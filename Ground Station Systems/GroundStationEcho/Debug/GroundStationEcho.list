
GroundStationEcho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a8c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c50  08002c50  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c58  08002c58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c5c  08002c5c  00012c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  08002cd0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002cd0  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082c5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001814  00000000  00000000  00028365  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  00029b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000628  00000000  00000000  0002a280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022eb5  00000000  00000000  0002a8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f40  00000000  00000000  0004d75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d184e  00000000  00000000  0005469d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125eeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cac  00000000  00000000  00125f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  00127c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00127c38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002c20 	.word	0x08002c20

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08002c20 	.word	0x08002c20

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	4b19      	ldr	r3, [pc, #100]	; (800056c <MX_GPIO_Init+0x80>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a18      	ldr	r2, [pc, #96]	; (800056c <MX_GPIO_Init+0x80>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_GPIO_Init+0x80>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_GPIO_Init+0x80>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a11      	ldr	r2, [pc, #68]	; (800056c <MX_GPIO_Init+0x80>)
 8000528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_GPIO_Init+0x80>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <MX_GPIO_Init+0x84>)
 8000542:	f000 fe87 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000546:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800054a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	4619      	mov	r1, r3
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_GPIO_Init+0x84>)
 8000560:	f000 fcce 	bl	8000f00 <HAL_GPIO_Init>

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40023800 	.word	0x40023800
 8000570:	40021800 	.word	0x40021800

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b0c7      	sub	sp, #284	; 0x11c
 8000578:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800057a:	f000 fb1b 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f8c9 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f7ff ffb3 	bl	80004ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000586:	f000 fa71 	bl	8000a6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int bytes = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint8_t data[260] = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000598:	461a      	mov	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	f002 fa6c 	bl	8002a78 <memset>
  srand(time(NULL));
 80005a0:	2000      	movs	r0, #0
 80005a2:	f002 fa95 	bl	8002ad0 <time>
 80005a6:	4603      	mov	r3, r0
 80005a8:	460c      	mov	r4, r1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fa6c 	bl	8002a88 <srand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i =0; i < 260; i++){
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80005b6:	e00a      	b.n	80005ce <main+0x5a>
		  data[i] = 0;
 80005b8:	1d3a      	adds	r2, r7, #4
 80005ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80005be:	4413      	add	r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	  for(int i =0; i < 260; i++){
 80005c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80005c8:	3301      	adds	r3, #1
 80005ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80005ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80005d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80005d6:	dbef      	blt.n	80005b8 <main+0x44>
	  }
	  bytes = debugSerialReceive(data);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f8fa 	bl	80007d4 <debugSerialReceive>
 80005e0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	  if(bytes){
 80005e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0e1      	beq.n	80005b0 <main+0x3c>
		  // Get command type
		  int packet_type = parse_packet_command(bytes, data);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4619      	mov	r1, r3
 80005f0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80005f4:	f000 f924 	bl	8000840 <parse_packet_command>
 80005f8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

		  // Don't respond to improper commands
		  if(packet_type == UNKNOWN_PACKET) continue;
 80005fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000600:	2b08      	cmp	r3, #8
 8000602:	f000 8083 	beq.w	800070c <main+0x198>

		  // Reconstitute packet then reply
  	  	  *(data+2) = *(data+2) - 1; //Response -> reply
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	789b      	ldrb	r3, [r3, #2]
 800060a:	3b01      	subs	r3, #1
 800060c:	b2da      	uxtb	r2, r3
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	709a      	strb	r2, [r3, #2]
  		  uint8_t cs = *(data+bytes-1); //Capture checksum for now
 8000612:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000616:	3b01      	subs	r3, #1
 8000618:	1d3a      	adds	r2, r7, #4
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		  switch(packet_type){
 8000622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000626:	2b07      	cmp	r3, #7
 8000628:	d8c2      	bhi.n	80005b0 <main+0x3c>
 800062a:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <main+0xbc>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000651 	.word	0x08000651
 8000634:	08000651 	.word	0x08000651
 8000638:	08000651 	.word	0x08000651
 800063c:	080006df 	.word	0x080006df
 8000640:	08000663 	.word	0x08000663
 8000644:	0800069f 	.word	0x0800069f
 8000648:	080006cd 	.word	0x080006cd
 800064c:	08000651 	.word	0x08000651
		  	  // Transform response
		  	  case PING: ;
		  	  case SHUTOFF_BEACON: ;
		  	  case ENTER_MAIN_OP_PHASE: ;
		  	  case EOL: ;
			  	  HAL_UART_Transmit(&huart1, data, bytes, 10);
 8000650:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000654:	b29a      	uxth	r2, r3
 8000656:	1d39      	adds	r1, r7, #4
 8000658:	230a      	movs	r3, #10
 800065a:	482d      	ldr	r0, [pc, #180]	; (8000710 <main+0x19c>)
 800065c:	f001 fa9d 	bl	8001b9a <HAL_UART_Transmit>
			  	  break;
 8000660:	e055      	b.n	800070e <main+0x19a>

			  // Respond with IEEE-754 floating point for 4.5
		  	  case BATTERY_VOLTAGE: ;
		  		  // Set data length to 1
		  		  *(data+3) = 0x04;
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2204      	movs	r2, #4
 8000666:	70da      	strb	r2, [r3, #3]
		  		  // Shift data
		  		  *(data+7) = 0x40;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2240      	movs	r2, #64	; 0x40
 800066c:	71da      	strb	r2, [r3, #7]
		  		  *(data+6) = 0x90;
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2290      	movs	r2, #144	; 0x90
 8000672:	719a      	strb	r2, [r3, #6]
		  		  *(data+5) = 0x00;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	715a      	strb	r2, [r3, #5]
		  		  *(data+4) = 0x00;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	711a      	strb	r2, [r3, #4]
		  		  *(data+8) = cs;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8000686:	721a      	strb	r2, [r3, #8]
		  		  HAL_UART_Transmit(&huart1, data, bytes+4, 10);
 8000688:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800068c:	b29b      	uxth	r3, r3
 800068e:	3304      	adds	r3, #4
 8000690:	b29a      	uxth	r2, r3
 8000692:	1d39      	adds	r1, r7, #4
 8000694:	230a      	movs	r3, #10
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <main+0x19c>)
 8000698:	f001 fa7f 	bl	8001b9a <HAL_UART_Transmit>
		  		  break;
 800069c:	e037      	b.n	800070e <main+0x19a>

		  	  case SDR_POWER_STATUS: ;
	  	  	  	  // Simply respond that we got it
	  	  	  	  *(data+3) = 0x03;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2203      	movs	r2, #3
 80006a2:	70da      	strb	r2, [r3, #3]
	  	  	  	  *(data+4) = 'S';
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2253      	movs	r2, #83	; 0x53
 80006a8:	711a      	strb	r2, [r3, #4]
	  	  	  	  *(data+5) = 'D';
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2244      	movs	r2, #68	; 0x44
 80006ae:	715a      	strb	r2, [r3, #5]
	  	  	  	  *(data+6) = 'R';
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2252      	movs	r2, #82	; 0x52
 80006b4:	719a      	strb	r2, [r3, #6]
	  	  	  	  *(data+7) = cs;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80006bc:	71da      	strb	r2, [r3, #7]
	  	  	  	  HAL_UART_Transmit(&huart1, data, 8, 10);
 80006be:	1d39      	adds	r1, r7, #4
 80006c0:	230a      	movs	r3, #10
 80006c2:	2208      	movs	r2, #8
 80006c4:	4812      	ldr	r0, [pc, #72]	; (8000710 <main+0x19c>)
 80006c6:	f001 fa68 	bl	8001b9a <HAL_UART_Transmit>
	  	  	  	  break;
 80006ca:	e020      	b.n	800070e <main+0x19a>

		  	  case TIME_SET_REQUEST: ;
	  	  	  	  // Echo it
		  	  	  HAL_UART_Transmit(&huart1, data, bytes, 10);
 80006cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	1d39      	adds	r1, r7, #4
 80006d4:	230a      	movs	r3, #10
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <main+0x19c>)
 80006d8:	f001 fa5f 	bl	8001b9a <HAL_UART_Transmit>
		  	  	  break;
 80006dc:	e017      	b.n	800070e <main+0x19a>

		  	  case BASIC_HEALTH_CHECK: ;
	  	  	  	  // Simply respond that we got it
		  	  	  *(data+3) = 0x03;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2203      	movs	r2, #3
 80006e2:	70da      	strb	r2, [r3, #3]
		  	  	  *(data+4) = 'B';
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2242      	movs	r2, #66	; 0x42
 80006e8:	711a      	strb	r2, [r3, #4]
		  	  	  *(data+5) = 'H';
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2248      	movs	r2, #72	; 0x48
 80006ee:	715a      	strb	r2, [r3, #5]
		  	  	  *(data+6) = 'C';
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2243      	movs	r2, #67	; 0x43
 80006f4:	719a      	strb	r2, [r3, #6]
		  	  	  *(data+7) = cs;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80006fc:	71da      	strb	r2, [r3, #7]
		  	  	  HAL_UART_Transmit(&huart1, data, 8, 10);
 80006fe:	1d39      	adds	r1, r7, #4
 8000700:	230a      	movs	r3, #10
 8000702:	2208      	movs	r2, #8
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <main+0x19c>)
 8000706:	f001 fa48 	bl	8001b9a <HAL_UART_Transmit>
		  	  	  break;
 800070a:	e000      	b.n	800070e <main+0x19a>
		  if(packet_type == UNKNOWN_PACKET) continue;
 800070c:	bf00      	nop
	  for(int i =0; i < 260; i++){
 800070e:	e74f      	b.n	80005b0 <main+0x3c>
 8000710:	20000098 	.word	0x20000098

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f002 f9a8 	bl	8002a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <SystemClock_Config+0xb8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <SystemClock_Config+0xb8>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <SystemClock_Config+0xb8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <SystemClock_Config+0xbc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <SystemClock_Config+0xbc>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <SystemClock_Config+0xbc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fd7d 	bl	8001288 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000794:	f000 f8b7 	bl	8000906 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 ffd8 	bl	8001768 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007be:	f000 f8a2 	bl	8000906 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <debugSerialReceive>:
		status = HAL_ERROR;
	}
	return status;
}

int debugSerialReceive(uint8_t *data){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	uint8_t byte;
	size_t bytes = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
	status = HAL_UART_Receive(&huart1, &byte, 1, 10);
 80007e0:	f107 010f 	add.w	r1, r7, #15
 80007e4:	230a      	movs	r3, #10
 80007e6:	2201      	movs	r2, #1
 80007e8:	4814      	ldr	r0, [pc, #80]	; (800083c <debugSerialReceive+0x68>)
 80007ea:	f001 fa6f 	bl	8001ccc <HAL_UART_Receive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	75fb      	strb	r3, [r7, #23]
	if(byte != 0xff){
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	2bff      	cmp	r3, #255	; 0xff
 80007f6:	d016      	beq.n	8000826 <debugSerialReceive+0x52>
		return 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e01a      	b.n	8000832 <debugSerialReceive+0x5e>
	}

	while(status != HAL_TIMEOUT){
	    data[bytes] = byte;
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	4413      	add	r3, r2
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	701a      	strb	r2, [r3, #0]
	    bytes++;
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	3301      	adds	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
	    if(bytes == 260) break;
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000812:	d00c      	beq.n	800082e <debugSerialReceive+0x5a>
	    status = HAL_UART_Receive(&huart1, &byte, 1, 10);
 8000814:	f107 010f 	add.w	r1, r7, #15
 8000818:	230a      	movs	r3, #10
 800081a:	2201      	movs	r2, #1
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <debugSerialReceive+0x68>)
 800081e:	f001 fa55 	bl	8001ccc <HAL_UART_Receive>
 8000822:	4603      	mov	r3, r0
 8000824:	75fb      	strb	r3, [r7, #23]
	while(status != HAL_TIMEOUT){
 8000826:	7dfb      	ldrb	r3, [r7, #23]
 8000828:	2b03      	cmp	r3, #3
 800082a:	d1e7      	bne.n	80007fc <debugSerialReceive+0x28>
 800082c:	e000      	b.n	8000830 <debugSerialReceive+0x5c>
	    if(bytes == 260) break;
 800082e:	bf00      	nop
    }
	return bytes;
 8000830:	693b      	ldr	r3, [r7, #16]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000098 	.word	0x20000098

08000840 <parse_packet_command>:

int parse_packet_command(int len, uint8_t *data){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	if(len < 4) return UNKNOWN_PACKET;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b03      	cmp	r3, #3
 800084e:	dc01      	bgt.n	8000854 <parse_packet_command+0x14>
 8000850:	2308      	movs	r3, #8
 8000852:	e052      	b.n	80008fa <parse_packet_command+0xba>
	if(*(data) != 0xff) return UNKNOWN_PACKET;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2bff      	cmp	r3, #255	; 0xff
 800085a:	d001      	beq.n	8000860 <parse_packet_command+0x20>
 800085c:	2308      	movs	r3, #8
 800085e:	e04c      	b.n	80008fa <parse_packet_command+0xba>

	// OBC Commands
	if(*(data+1) == 0x0a){
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b0a      	cmp	r3, #10
 8000868:	d11b      	bne.n	80008a2 <parse_packet_command+0x62>
		if(*(data+2) == 0x01) return PING;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	3302      	adds	r3, #2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d101      	bne.n	8000878 <parse_packet_command+0x38>
 8000874:	2300      	movs	r3, #0
 8000876:	e040      	b.n	80008fa <parse_packet_command+0xba>
		else if(*(data+2) == 0x03) return SHUTOFF_BEACON;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	3302      	adds	r3, #2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d101      	bne.n	8000886 <parse_packet_command+0x46>
 8000882:	2301      	movs	r3, #1
 8000884:	e039      	b.n	80008fa <parse_packet_command+0xba>
		else if(*(data+2) == 0x05) return BASIC_HEALTH_CHECK;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	3302      	adds	r3, #2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b05      	cmp	r3, #5
 800088e:	d101      	bne.n	8000894 <parse_packet_command+0x54>
 8000890:	2303      	movs	r3, #3
 8000892:	e032      	b.n	80008fa <parse_packet_command+0xba>
		else if(*(data+2) == 0x07) return ENTER_MAIN_OP_PHASE;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	3302      	adds	r3, #2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b07      	cmp	r3, #7
 800089c:	d101      	bne.n	80008a2 <parse_packet_command+0x62>
 800089e:	2302      	movs	r3, #2
 80008a0:	e02b      	b.n	80008fa <parse_packet_command+0xba>
	}
	//EPS Commands
	if(*(data+1) == 0x1e){
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b1e      	cmp	r3, #30
 80008aa:	d106      	bne.n	80008ba <parse_packet_command+0x7a>
		if(*(data+2) == 0x01) return BATTERY_VOLTAGE;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	3302      	adds	r3, #2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d101      	bne.n	80008ba <parse_packet_command+0x7a>
 80008b6:	2304      	movs	r3, #4
 80008b8:	e01f      	b.n	80008fa <parse_packet_command+0xba>
	}
	//SDR Commands
	if(*(data+1) == 0x28){
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b28      	cmp	r3, #40	; 0x28
 80008c2:	d10d      	bne.n	80008e0 <parse_packet_command+0xa0>
		if(*(data+2) == 0x01) return SDR_POWER_STATUS;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3302      	adds	r3, #2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d101      	bne.n	80008d2 <parse_packet_command+0x92>
 80008ce:	2305      	movs	r3, #5
 80008d0:	e013      	b.n	80008fa <parse_packet_command+0xba>
		else if(*(data+2) == 0x11) return TIME_SET_REQUEST;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	3302      	adds	r3, #2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b11      	cmp	r3, #17
 80008da:	d101      	bne.n	80008e0 <parse_packet_command+0xa0>
 80008dc:	2306      	movs	r3, #6
 80008de:	e00c      	b.n	80008fa <parse_packet_command+0xba>
	}
	//EOL Command
	if(*(data+1) == 0x5a){
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b5a      	cmp	r3, #90	; 0x5a
 80008e8:	d106      	bne.n	80008f8 <parse_packet_command+0xb8>
		if(*(data+2) == 0x01) return EOL;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	3302      	adds	r3, #2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d101      	bne.n	80008f8 <parse_packet_command+0xb8>
 80008f4:	2307      	movs	r3, #7
 80008f6:	e000      	b.n	80008fa <parse_packet_command+0xba>
	}
	return UNKNOWN_PACKET;
 80008f8:	2308      	movs	r3, #8
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f94e 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <USART1_IRQHandler+0x10>)
 80009c6:	f001 fa27 	bl	8001e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000098 	.word	0x20000098

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f002 f80e 	bl	8002a24 <__errno>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20030000 	.word	0x20030000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	2000008c 	.word	0x2000008c
 8000a3c:	200000e0 	.word	0x200000e0

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <SystemInit+0x28>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <SystemInit+0x28>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SystemInit+0x28>)
 8000a56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART1_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	f001 f82c 	bl	8001b00 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aae:	f7ff ff2a 	bl	8000906 <Error_Handler>
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000098 	.word	0x20000098
 8000abc:	40011000 	.word	0x40011000

08000ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <HAL_UART_MspInit+0x94>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d134      	bne.n	8000b4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000aec:	f043 0310 	orr.w	r3, r3, #16
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4809      	ldr	r0, [pc, #36]	; (8000b5c <HAL_UART_MspInit+0x9c>)
 8000b38:	f000 f9e2 	bl	8000f00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2025      	movs	r0, #37	; 0x25
 8000b42:	f000 f984 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b46:	2025      	movs	r0, #37	; 0x25
 8000b48:	f000 f99d 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b66:	e003      	b.n	8000b70 <LoopCopyDataInit>

08000b68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b6e:	3104      	adds	r1, #4

08000b70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b78:	d3f6      	bcc.n	8000b68 <CopyDataInit>
  ldr  r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b7c:	e002      	b.n	8000b84 <LoopFillZerobss>

08000b7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b80:	f842 3b04 	str.w	r3, [r2], #4

08000b84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b88:	d3f9      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ff59 	bl	8000a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f001 ff4f 	bl	8002a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fcef 	bl	8000574 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b98:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000b9c:	08002c60 	.word	0x08002c60
  ldr  r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ba4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ba8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000bac:	200000e0 	.word	0x200000e0

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f92b 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fe94 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f943 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f90b 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	200000d8 	.word	0x200000d8

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	200000d8 	.word	0x200000d8

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff29 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff3e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff31 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa2 	bl	8000df4 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d004      	beq.n	8000ed8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e00c      	b.n	8000ef2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2205      	movs	r2, #5
 8000edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e177      	b.n	800120c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 8166 	bne.w	8001206 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d00b      	beq.n	8000f5a <HAL_GPIO_Init+0x5a>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4e:	2b11      	cmp	r3, #17
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d130      	bne.n	8000fbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f003 0201 	and.w	r2, r3, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0xfc>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b12      	cmp	r3, #18
 8000ffa:	d123      	bne.n	8001044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	69b9      	ldr	r1, [r7, #24]
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0203 	and.w	r2, r3, #3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80c0 	beq.w	8001206 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b65      	ldr	r3, [pc, #404]	; (8001220 <HAL_GPIO_Init+0x320>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a64      	ldr	r2, [pc, #400]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b62      	ldr	r3, [pc, #392]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a60      	ldr	r2, [pc, #384]	; (8001224 <HAL_GPIO_Init+0x324>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a57      	ldr	r2, [pc, #348]	; (8001228 <HAL_GPIO_Init+0x328>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d037      	beq.n	800113e <HAL_GPIO_Init+0x23e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a56      	ldr	r2, [pc, #344]	; (800122c <HAL_GPIO_Init+0x32c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d031      	beq.n	800113a <HAL_GPIO_Init+0x23a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a55      	ldr	r2, [pc, #340]	; (8001230 <HAL_GPIO_Init+0x330>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x236>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a54      	ldr	r2, [pc, #336]	; (8001234 <HAL_GPIO_Init+0x334>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x232>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a53      	ldr	r2, [pc, #332]	; (8001238 <HAL_GPIO_Init+0x338>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x22e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a52      	ldr	r2, [pc, #328]	; (800123c <HAL_GPIO_Init+0x33c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x22a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a51      	ldr	r2, [pc, #324]	; (8001240 <HAL_GPIO_Init+0x340>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x226>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <HAL_GPIO_Init+0x344>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <HAL_GPIO_Init+0x348>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4e      	ldr	r2, [pc, #312]	; (800124c <HAL_GPIO_Init+0x34c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x21a>
 8001116:	2309      	movs	r3, #9
 8001118:	e012      	b.n	8001140 <HAL_GPIO_Init+0x240>
 800111a:	230a      	movs	r3, #10
 800111c:	e010      	b.n	8001140 <HAL_GPIO_Init+0x240>
 800111e:	2308      	movs	r3, #8
 8001120:	e00e      	b.n	8001140 <HAL_GPIO_Init+0x240>
 8001122:	2307      	movs	r3, #7
 8001124:	e00c      	b.n	8001140 <HAL_GPIO_Init+0x240>
 8001126:	2306      	movs	r3, #6
 8001128:	e00a      	b.n	8001140 <HAL_GPIO_Init+0x240>
 800112a:	2305      	movs	r3, #5
 800112c:	e008      	b.n	8001140 <HAL_GPIO_Init+0x240>
 800112e:	2304      	movs	r3, #4
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x240>
 8001132:	2303      	movs	r3, #3
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x240>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x240>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x240>
 800113e:	2300      	movs	r3, #0
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	f002 0203 	and.w	r2, r2, #3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	4934      	ldr	r1, [pc, #208]	; (8001224 <HAL_GPIO_Init+0x324>)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <HAL_GPIO_Init+0x350>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001182:	4a33      	ldr	r2, [pc, #204]	; (8001250 <HAL_GPIO_Init+0x350>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <HAL_GPIO_Init+0x350>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ac:	4a28      	ldr	r2, [pc, #160]	; (8001250 <HAL_GPIO_Init+0x350>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_GPIO_Init+0x350>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d6:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <HAL_GPIO_Init+0x350>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_GPIO_Init+0x350>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001200:	4a13      	ldr	r2, [pc, #76]	; (8001250 <HAL_GPIO_Init+0x350>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3301      	adds	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	f67f ae84 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001214:	bf00      	nop
 8001216:	3724      	adds	r7, #36	; 0x24
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40021400 	.word	0x40021400
 8001240:	40021800 	.word	0x40021800
 8001244:	40021c00 	.word	0x40021c00
 8001248:	40022000 	.word	0x40022000
 800124c:	40022400 	.word	0x40022400
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e25b      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d075      	beq.n	8001392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	4ba3      	ldr	r3, [pc, #652]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00c      	beq.n	80012cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4ba0      	ldr	r3, [pc, #640]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b9d      	ldr	r3, [pc, #628]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ca:	d10b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4b99      	ldr	r3, [pc, #612]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d157      	bne.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e236      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x74>
 80012ee:	4b91      	ldr	r3, [pc, #580]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a90      	ldr	r2, [pc, #576]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b8b      	ldr	r3, [pc, #556]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a8a      	ldr	r2, [pc, #552]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a87      	ldr	r2, [pc, #540]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 8001320:	4b84      	ldr	r3, [pc, #528]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a83      	ldr	r2, [pc, #524]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b81      	ldr	r3, [pc, #516]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a80      	ldr	r2, [pc, #512]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc9e 	bl	8000c80 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fc9a 	bl	8000c80 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1fb      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xc0>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fc8a 	bl	8000c80 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fc86 	bl	8000c80 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1e7      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	4b65      	ldr	r3, [pc, #404]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b62      	ldr	r3, [pc, #392]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1bb      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4952      	ldr	r1, [pc, #328]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <HAL_RCC_OscConfig+0x2b0>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fc3f 	bl	8000c80 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fc3b 	bl	8000c80 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e19c      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b46      	ldr	r3, [pc, #280]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b43      	ldr	r3, [pc, #268]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4940      	ldr	r1, [pc, #256]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x2b0>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fc1e 	bl	8000c80 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fc1a 	bl	8000c80 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e17b      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b36      	ldr	r3, [pc, #216]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d030      	beq.n	80014d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_RCC_OscConfig+0x2b4>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fbfe 	bl	8000c80 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fbfa 	bl	8000c80 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e15b      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
 80014a6:	e015      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_OscConfig+0x2b4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fbe7 	bl	8000c80 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fbe3 	bl	8000c80 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e144      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80014ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a0 	beq.w	8001622 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10f      	bne.n	8001512 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150e:	2301      	movs	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_OscConfig+0x2b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d121      	bne.n	8001562 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_RCC_OscConfig+0x2b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_RCC_OscConfig+0x2b8>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152a:	f7ff fba9 	bl	8000c80 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	e011      	b.n	8001556 <HAL_RCC_OscConfig+0x2ce>
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	42470000 	.word	0x42470000
 800153c:	42470e80 	.word	0x42470e80
 8001540:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001544:	f7ff fb9c 	bl	8000c80 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e0fd      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b81      	ldr	r3, [pc, #516]	; (800175c <HAL_RCC_OscConfig+0x4d4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0x2f0>
 800156a:	4b7d      	ldr	r3, [pc, #500]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	4a7c      	ldr	r2, [pc, #496]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6713      	str	r3, [r2, #112]	; 0x70
 8001576:	e01c      	b.n	80015b2 <HAL_RCC_OscConfig+0x32a>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b05      	cmp	r3, #5
 800157e:	d10c      	bne.n	800159a <HAL_RCC_OscConfig+0x312>
 8001580:	4b77      	ldr	r3, [pc, #476]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a76      	ldr	r2, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	4b74      	ldr	r3, [pc, #464]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a73      	ldr	r2, [pc, #460]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
 8001598:	e00b      	b.n	80015b2 <HAL_RCC_OscConfig+0x32a>
 800159a:	4b71      	ldr	r3, [pc, #452]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a70      	ldr	r2, [pc, #448]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
 80015a6:	4b6e      	ldr	r3, [pc, #440]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a6d      	ldr	r2, [pc, #436]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d015      	beq.n	80015e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb61 	bl	8000c80 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff fb5d 	bl	8000c80 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0bc      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	4b61      	ldr	r3, [pc, #388]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ee      	beq.n	80015c2 <HAL_RCC_OscConfig+0x33a>
 80015e4:	e014      	b.n	8001610 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fb4b 	bl	8000c80 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff fb47 	bl	8000c80 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0a6      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	4b56      	ldr	r3, [pc, #344]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ee      	bne.n	80015ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d105      	bne.n	8001622 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001616:	4b52      	ldr	r3, [pc, #328]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a51      	ldr	r2, [pc, #324]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 800161c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8092 	beq.w	8001750 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b08      	cmp	r3, #8
 8001636:	d05c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d141      	bne.n	80016c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b48      	ldr	r3, [pc, #288]	; (8001764 <HAL_RCC_OscConfig+0x4dc>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb1b 	bl	8000c80 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fb17 	bl	8000c80 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e078      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69da      	ldr	r2, [r3, #28]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	019b      	lsls	r3, r3, #6
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	3b01      	subs	r3, #1
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	061b      	lsls	r3, r3, #24
 8001690:	4933      	ldr	r1, [pc, #204]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001696:	4b33      	ldr	r3, [pc, #204]	; (8001764 <HAL_RCC_OscConfig+0x4dc>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff faf0 	bl	8000c80 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff faec 	bl	8000c80 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e04d      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x41c>
 80016c2:	e045      	b.n	8001750 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x4dc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fad9 	bl	8000c80 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fad5 	bl	8000c80 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e036      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x44a>
 80016f0:	e02e      	b.n	8001750 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e029      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	429a      	cmp	r2, r3
 8001710:	d11c      	bne.n	800174c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d115      	bne.n	800174c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001726:	4013      	ands	r3, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800172c:	4293      	cmp	r3, r2
 800172e:	d10d      	bne.n	800174c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40007000 	.word	0x40007000
 8001760:	40023800 	.word	0x40023800
 8001764:	42470060 	.word	0x42470060

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cc      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d90c      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d044      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d119      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e067      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4934      	ldr	r1, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff fa12 	bl	8000c80 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff fa0e 	bl	8000c80 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d20c      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4601      	mov	r1, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	fa21 f303 	lsr.w	r3, r1, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f972 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08002c38 	.word	0x08002c38
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194a:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x158>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b04      	cmp	r3, #4
 8001954:	d007      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x32>
 8001956:	2b08      	cmp	r3, #8
 8001958:	d008      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x38>
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 808d 	bne.w	8001a7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001962:	60bb      	str	r3, [r7, #8]
       break;
 8001964:	e08c      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001966:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001968:	60bb      	str	r3, [r7, #8]
      break;
 800196a:	e089      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x158>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001974:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001976:	4b45      	ldr	r3, [pc, #276]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d023      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001982:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	f04f 0400 	mov.w	r4, #0
 800198c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	ea03 0501 	and.w	r5, r3, r1
 8001998:	ea04 0602 	and.w	r6, r4, r2
 800199c:	4a3d      	ldr	r2, [pc, #244]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x160>)
 800199e:	fb02 f106 	mul.w	r1, r2, r6
 80019a2:	2200      	movs	r2, #0
 80019a4:	fb02 f205 	mul.w	r2, r2, r5
 80019a8:	440a      	add	r2, r1
 80019aa:	493a      	ldr	r1, [pc, #232]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x160>)
 80019ac:	fba5 0101 	umull	r0, r1, r5, r1
 80019b0:	1853      	adds	r3, r2, r1
 80019b2:	4619      	mov	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f04f 0400 	mov.w	r4, #0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4623      	mov	r3, r4
 80019be:	f7fe fc15 	bl	80001ec <__aeabi_uldivmod>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e049      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x158>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	f04f 0400 	mov.w	r4, #0
 80019d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	ea03 0501 	and.w	r5, r3, r1
 80019e0:	ea04 0602 	and.w	r6, r4, r2
 80019e4:	4629      	mov	r1, r5
 80019e6:	4632      	mov	r2, r6
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	f04f 0400 	mov.w	r4, #0
 80019f0:	0154      	lsls	r4, r2, #5
 80019f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019f6:	014b      	lsls	r3, r1, #5
 80019f8:	4619      	mov	r1, r3
 80019fa:	4622      	mov	r2, r4
 80019fc:	1b49      	subs	r1, r1, r5
 80019fe:	eb62 0206 	sbc.w	r2, r2, r6
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	f04f 0400 	mov.w	r4, #0
 8001a0a:	0194      	lsls	r4, r2, #6
 8001a0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a10:	018b      	lsls	r3, r1, #6
 8001a12:	1a5b      	subs	r3, r3, r1
 8001a14:	eb64 0402 	sbc.w	r4, r4, r2
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	00e2      	lsls	r2, r4, #3
 8001a22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a26:	00d9      	lsls	r1, r3, #3
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	195b      	adds	r3, r3, r5
 8001a2e:	eb44 0406 	adc.w	r4, r4, r6
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	02a2      	lsls	r2, r4, #10
 8001a3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a40:	0299      	lsls	r1, r3, #10
 8001a42:	460b      	mov	r3, r1
 8001a44:	4614      	mov	r4, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	4621      	mov	r1, r4
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f04f 0400 	mov.w	r4, #0
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	f7fe fbca 	bl	80001ec <__aeabi_uldivmod>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	60bb      	str	r3, [r7, #8]
      break;
 8001a78:	e002      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a7c:	60bb      	str	r3, [r7, #8]
      break;
 8001a7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a80:	68bb      	ldr	r3, [r7, #8]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	017d7840 	.word	0x017d7840

08001a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_RCC_GetHCLKFreq+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000000 	.word	0x20000000

08001ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ab4:	f7ff fff0 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4601      	mov	r1, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	0a9b      	lsrs	r3, r3, #10
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac6:	5cd3      	ldrb	r3, [r2, r3]
 8001ac8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08002c48 	.word	0x08002c48

08001ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001adc:	f7ff ffdc 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0b5b      	lsrs	r3, r3, #13
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4a03      	ldr	r2, [pc, #12]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	08002c48 	.word	0x08002c48

08001b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e03f      	b.n	8001b92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe ffca 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fbf1 	bl	800232c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b088      	sub	sp, #32
 8001b9e:	af02      	add	r7, sp, #8
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	f040 8083 	bne.w	8001cc2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_UART_Transmit+0x2e>
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e07b      	b.n	8001cc4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_UART_Transmit+0x40>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e074      	b.n	8001cc4 <HAL_UART_Transmit+0x12a>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2221      	movs	r2, #33	; 0x21
 8001bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001bf0:	f7ff f846 	bl	8000c80 <HAL_GetTick>
 8001bf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	88fa      	ldrh	r2, [r7, #6]
 8001bfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	88fa      	ldrh	r2, [r7, #6]
 8001c00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c0a:	e042      	b.n	8001c92 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c22:	d122      	bne.n	8001c6a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fa10 	bl	8002054 <UART_WaitOnFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e042      	b.n	8001cc4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c50:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	e017      	b.n	8001c92 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3301      	adds	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	e013      	b.n	8001c92 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2200      	movs	r2, #0
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f9ed 	bl	8002054 <UART_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e01f      	b.n	8001cc4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1b7      	bne.n	8001c0c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2140      	movs	r1, #64	; 0x40
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f9d4 	bl	8002054 <UART_WaitOnFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e006      	b.n	8001cc4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001cc2:	2302      	movs	r3, #2
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	f040 8090 	bne.w	8001e0e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_UART_Receive+0x2e>
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e088      	b.n	8001e10 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_UART_Receive+0x40>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e081      	b.n	8001e10 <HAL_UART_Receive+0x144>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2222      	movs	r2, #34	; 0x22
 8001d1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d22:	f7fe ffad 	bl	8000c80 <HAL_GetTick>
 8001d26:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	88fa      	ldrh	r2, [r7, #6]
 8001d2c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	88fa      	ldrh	r2, [r7, #6]
 8001d32:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d3c:	e05c      	b.n	8001df8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d54:	d12b      	bne.n	8001dae <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2120      	movs	r1, #32
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f977 	bl	8002054 <UART_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e04f      	b.n	8001e10 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10c      	bne.n	8001d96 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3302      	adds	r3, #2
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	e030      	b.n	8001df8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	e024      	b.n	8001df8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2200      	movs	r2, #0
 8001db6:	2120      	movs	r1, #32
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f94b 	bl	8002054 <UART_WaitOnFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e023      	b.n	8001e10 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d108      	bne.n	8001de2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6859      	ldr	r1, [r3, #4]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	60ba      	str	r2, [r7, #8]
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e00a      	b.n	8001df8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1c59      	adds	r1, r3, #1
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d19d      	bne.n	8001d3e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10d      	bne.n	8001e6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_UART_IRQHandler+0x52>
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f9e0 	bl	8002228 <UART_Receive_IT>
      return;
 8001e68:	e0d1      	b.n	800200e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80b0 	beq.w	8001fd2 <HAL_UART_IRQHandler+0x1ba>
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_UART_IRQHandler+0x70>
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80a5 	beq.w	8001fd2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_UART_IRQHandler+0x90>
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_UART_IRQHandler+0xb0>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	f043 0202 	orr.w	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_UART_IRQHandler+0xd0>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee0:	f043 0204 	orr.w	r2, r3, #4
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00f      	beq.n	8001f12 <HAL_UART_IRQHandler+0xfa>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d104      	bne.n	8001f06 <HAL_UART_IRQHandler+0xee>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	f043 0208 	orr.w	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d078      	beq.n	800200c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_UART_IRQHandler+0x11c>
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f97a 	bl	8002228 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	bf0c      	ite	eq
 8001f42:	2301      	moveq	r3, #1
 8001f44:	2300      	movne	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d102      	bne.n	8001f5c <HAL_UART_IRQHandler+0x144>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d031      	beq.n	8001fc0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8c3 	bl	80020e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d123      	bne.n	8001fb8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8c:	4a21      	ldr	r2, [pc, #132]	; (8002014 <HAL_UART_IRQHandler+0x1fc>)
 8001f8e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe ff90 	bl	8000eba <HAL_DMA_Abort_IT>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d016      	beq.n	8001fce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001faa:	4610      	mov	r0, r2
 8001fac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fae:	e00e      	b.n	8001fce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f845 	bl	8002040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb6:	e00a      	b.n	8001fce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f841 	bl	8002040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fbe:	e006      	b.n	8001fce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f83d 	bl	8002040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001fcc:	e01e      	b.n	800200c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fce:	bf00      	nop
    return;
 8001fd0:	e01c      	b.n	800200c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_UART_IRQHandler+0x1d6>
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8b0 	bl	800214c <UART_Transmit_IT>
    return;
 8001fec:	e00f      	b.n	800200e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_UART_IRQHandler+0x1f6>
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8f8 	bl	80021f8 <UART_EndTransmit_IT>
    return;
 8002008:	bf00      	nop
 800200a:	e000      	b.n	800200e <HAL_UART_IRQHandler+0x1f6>
    return;
 800200c:	bf00      	nop
  }
}
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	08002125 	.word	0x08002125

08002018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002064:	e02c      	b.n	80020c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d028      	beq.n	80020c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <UART_WaitOnFlagUntilTimeout+0x30>
 8002074:	f7fe fe04 	bl	8000c80 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	429a      	cmp	r2, r3
 8002082:	d21d      	bcs.n	80020c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002092:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e00f      	b.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4013      	ands	r3, r2
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d0c3      	beq.n	8002066 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff ff7e 	bl	8002040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b21      	cmp	r3, #33	; 0x21
 800215e:	d144      	bne.n	80021ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002168:	d11a      	bne.n	80021a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800217e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	1c9a      	adds	r2, r3, #2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	621a      	str	r2, [r3, #32]
 8002192:	e00e      	b.n	80021b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	621a      	str	r2, [r3, #32]
 800219e:	e008      	b.n	80021b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	1c59      	adds	r1, r3, #1
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6211      	str	r1, [r2, #32]
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4619      	mov	r1, r3
 80021c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800220e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff fefd 	bl	8002018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b22      	cmp	r3, #34	; 0x22
 800223a:	d171      	bne.n	8002320 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002244:	d123      	bne.n	800228e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10e      	bne.n	8002272 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	b29b      	uxth	r3, r3
 800225c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	1c9a      	adds	r2, r3, #2
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
 8002270:	e029      	b.n	80022c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	b29b      	uxth	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
 800228c:	e01b      	b.n	80022c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10a      	bne.n	80022ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6858      	ldr	r0, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	1c59      	adds	r1, r3, #1
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6291      	str	r1, [r2, #40]	; 0x28
 80022a6:	b2c2      	uxtb	r2, r0
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e00c      	b.n	80022c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	1c58      	adds	r0, r3, #1
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	6288      	str	r0, [r1, #40]	; 0x28
 80022be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4619      	mov	r1, r3
 80022d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d120      	bne.n	800231c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0220 	bic.w	r2, r2, #32
 80022e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff fe8a 	bl	800202c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e002      	b.n	8002322 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800236e:	f023 030c 	bic.w	r3, r3, #12
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	68f9      	ldr	r1, [r7, #12]
 8002378:	430b      	orrs	r3, r1
 800237a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239a:	f040 818b 	bne.w	80026b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4ac1      	ldr	r2, [pc, #772]	; (80026a8 <UART_SetConfig+0x37c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d005      	beq.n	80023b4 <UART_SetConfig+0x88>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4abf      	ldr	r2, [pc, #764]	; (80026ac <UART_SetConfig+0x380>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	f040 80bd 	bne.w	800252e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b4:	f7ff fb90 	bl	8001ad8 <HAL_RCC_GetPCLK2Freq>
 80023b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	461d      	mov	r5, r3
 80023be:	f04f 0600 	mov.w	r6, #0
 80023c2:	46a8      	mov	r8, r5
 80023c4:	46b1      	mov	r9, r6
 80023c6:	eb18 0308 	adds.w	r3, r8, r8
 80023ca:	eb49 0409 	adc.w	r4, r9, r9
 80023ce:	4698      	mov	r8, r3
 80023d0:	46a1      	mov	r9, r4
 80023d2:	eb18 0805 	adds.w	r8, r8, r5
 80023d6:	eb49 0906 	adc.w	r9, r9, r6
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023ee:	4688      	mov	r8, r1
 80023f0:	4691      	mov	r9, r2
 80023f2:	eb18 0005 	adds.w	r0, r8, r5
 80023f6:	eb49 0106 	adc.w	r1, r9, r6
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	461d      	mov	r5, r3
 8002400:	f04f 0600 	mov.w	r6, #0
 8002404:	196b      	adds	r3, r5, r5
 8002406:	eb46 0406 	adc.w	r4, r6, r6
 800240a:	461a      	mov	r2, r3
 800240c:	4623      	mov	r3, r4
 800240e:	f7fd feed 	bl	80001ec <__aeabi_uldivmod>
 8002412:	4603      	mov	r3, r0
 8002414:	460c      	mov	r4, r1
 8002416:	461a      	mov	r2, r3
 8002418:	4ba5      	ldr	r3, [pc, #660]	; (80026b0 <UART_SetConfig+0x384>)
 800241a:	fba3 2302 	umull	r2, r3, r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	461d      	mov	r5, r3
 8002428:	f04f 0600 	mov.w	r6, #0
 800242c:	46a9      	mov	r9, r5
 800242e:	46b2      	mov	sl, r6
 8002430:	eb19 0309 	adds.w	r3, r9, r9
 8002434:	eb4a 040a 	adc.w	r4, sl, sl
 8002438:	4699      	mov	r9, r3
 800243a:	46a2      	mov	sl, r4
 800243c:	eb19 0905 	adds.w	r9, r9, r5
 8002440:	eb4a 0a06 	adc.w	sl, sl, r6
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002458:	4689      	mov	r9, r1
 800245a:	4692      	mov	sl, r2
 800245c:	eb19 0005 	adds.w	r0, r9, r5
 8002460:	eb4a 0106 	adc.w	r1, sl, r6
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	461d      	mov	r5, r3
 800246a:	f04f 0600 	mov.w	r6, #0
 800246e:	196b      	adds	r3, r5, r5
 8002470:	eb46 0406 	adc.w	r4, r6, r6
 8002474:	461a      	mov	r2, r3
 8002476:	4623      	mov	r3, r4
 8002478:	f7fd feb8 	bl	80001ec <__aeabi_uldivmod>
 800247c:	4603      	mov	r3, r0
 800247e:	460c      	mov	r4, r1
 8002480:	461a      	mov	r2, r3
 8002482:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <UART_SetConfig+0x384>)
 8002484:	fba3 1302 	umull	r1, r3, r3, r2
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	2164      	movs	r1, #100	; 0x64
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	3332      	adds	r3, #50	; 0x32
 8002496:	4a86      	ldr	r2, [pc, #536]	; (80026b0 <UART_SetConfig+0x384>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024a4:	4498      	add	r8, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	461d      	mov	r5, r3
 80024aa:	f04f 0600 	mov.w	r6, #0
 80024ae:	46a9      	mov	r9, r5
 80024b0:	46b2      	mov	sl, r6
 80024b2:	eb19 0309 	adds.w	r3, r9, r9
 80024b6:	eb4a 040a 	adc.w	r4, sl, sl
 80024ba:	4699      	mov	r9, r3
 80024bc:	46a2      	mov	sl, r4
 80024be:	eb19 0905 	adds.w	r9, r9, r5
 80024c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80024c6:	f04f 0100 	mov.w	r1, #0
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024da:	4689      	mov	r9, r1
 80024dc:	4692      	mov	sl, r2
 80024de:	eb19 0005 	adds.w	r0, r9, r5
 80024e2:	eb4a 0106 	adc.w	r1, sl, r6
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	461d      	mov	r5, r3
 80024ec:	f04f 0600 	mov.w	r6, #0
 80024f0:	196b      	adds	r3, r5, r5
 80024f2:	eb46 0406 	adc.w	r4, r6, r6
 80024f6:	461a      	mov	r2, r3
 80024f8:	4623      	mov	r3, r4
 80024fa:	f7fd fe77 	bl	80001ec <__aeabi_uldivmod>
 80024fe:	4603      	mov	r3, r0
 8002500:	460c      	mov	r4, r1
 8002502:	461a      	mov	r2, r3
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <UART_SetConfig+0x384>)
 8002506:	fba3 1302 	umull	r1, r3, r3, r2
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2164      	movs	r1, #100	; 0x64
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	3332      	adds	r3, #50	; 0x32
 8002518:	4a65      	ldr	r2, [pc, #404]	; (80026b0 <UART_SetConfig+0x384>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	f003 0207 	and.w	r2, r3, #7
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4442      	add	r2, r8
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	e26f      	b.n	8002a0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800252e:	f7ff fabf 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 8002532:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	461d      	mov	r5, r3
 8002538:	f04f 0600 	mov.w	r6, #0
 800253c:	46a8      	mov	r8, r5
 800253e:	46b1      	mov	r9, r6
 8002540:	eb18 0308 	adds.w	r3, r8, r8
 8002544:	eb49 0409 	adc.w	r4, r9, r9
 8002548:	4698      	mov	r8, r3
 800254a:	46a1      	mov	r9, r4
 800254c:	eb18 0805 	adds.w	r8, r8, r5
 8002550:	eb49 0906 	adc.w	r9, r9, r6
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002560:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002564:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002568:	4688      	mov	r8, r1
 800256a:	4691      	mov	r9, r2
 800256c:	eb18 0005 	adds.w	r0, r8, r5
 8002570:	eb49 0106 	adc.w	r1, r9, r6
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	461d      	mov	r5, r3
 800257a:	f04f 0600 	mov.w	r6, #0
 800257e:	196b      	adds	r3, r5, r5
 8002580:	eb46 0406 	adc.w	r4, r6, r6
 8002584:	461a      	mov	r2, r3
 8002586:	4623      	mov	r3, r4
 8002588:	f7fd fe30 	bl	80001ec <__aeabi_uldivmod>
 800258c:	4603      	mov	r3, r0
 800258e:	460c      	mov	r4, r1
 8002590:	461a      	mov	r2, r3
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <UART_SetConfig+0x384>)
 8002594:	fba3 2302 	umull	r2, r3, r3, r2
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	461d      	mov	r5, r3
 80025a2:	f04f 0600 	mov.w	r6, #0
 80025a6:	46a9      	mov	r9, r5
 80025a8:	46b2      	mov	sl, r6
 80025aa:	eb19 0309 	adds.w	r3, r9, r9
 80025ae:	eb4a 040a 	adc.w	r4, sl, sl
 80025b2:	4699      	mov	r9, r3
 80025b4:	46a2      	mov	sl, r4
 80025b6:	eb19 0905 	adds.w	r9, r9, r5
 80025ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025d2:	4689      	mov	r9, r1
 80025d4:	4692      	mov	sl, r2
 80025d6:	eb19 0005 	adds.w	r0, r9, r5
 80025da:	eb4a 0106 	adc.w	r1, sl, r6
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	461d      	mov	r5, r3
 80025e4:	f04f 0600 	mov.w	r6, #0
 80025e8:	196b      	adds	r3, r5, r5
 80025ea:	eb46 0406 	adc.w	r4, r6, r6
 80025ee:	461a      	mov	r2, r3
 80025f0:	4623      	mov	r3, r4
 80025f2:	f7fd fdfb 	bl	80001ec <__aeabi_uldivmod>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <UART_SetConfig+0x384>)
 80025fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2164      	movs	r1, #100	; 0x64
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	3332      	adds	r3, #50	; 0x32
 8002610:	4a27      	ldr	r2, [pc, #156]	; (80026b0 <UART_SetConfig+0x384>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800261e:	4498      	add	r8, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	461d      	mov	r5, r3
 8002624:	f04f 0600 	mov.w	r6, #0
 8002628:	46a9      	mov	r9, r5
 800262a:	46b2      	mov	sl, r6
 800262c:	eb19 0309 	adds.w	r3, r9, r9
 8002630:	eb4a 040a 	adc.w	r4, sl, sl
 8002634:	4699      	mov	r9, r3
 8002636:	46a2      	mov	sl, r4
 8002638:	eb19 0905 	adds.w	r9, r9, r5
 800263c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800264c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002654:	4689      	mov	r9, r1
 8002656:	4692      	mov	sl, r2
 8002658:	eb19 0005 	adds.w	r0, r9, r5
 800265c:	eb4a 0106 	adc.w	r1, sl, r6
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	461d      	mov	r5, r3
 8002666:	f04f 0600 	mov.w	r6, #0
 800266a:	196b      	adds	r3, r5, r5
 800266c:	eb46 0406 	adc.w	r4, r6, r6
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	f7fd fdba 	bl	80001ec <__aeabi_uldivmod>
 8002678:	4603      	mov	r3, r0
 800267a:	460c      	mov	r4, r1
 800267c:	461a      	mov	r2, r3
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <UART_SetConfig+0x384>)
 8002680:	fba3 1302 	umull	r1, r3, r3, r2
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	2164      	movs	r1, #100	; 0x64
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	3332      	adds	r3, #50	; 0x32
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <UART_SetConfig+0x384>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	f003 0207 	and.w	r2, r3, #7
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4442      	add	r2, r8
 80026a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80026a6:	e1b2      	b.n	8002a0e <UART_SetConfig+0x6e2>
 80026a8:	40011000 	.word	0x40011000
 80026ac:	40011400 	.word	0x40011400
 80026b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4ad7      	ldr	r2, [pc, #860]	; (8002a18 <UART_SetConfig+0x6ec>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d005      	beq.n	80026ca <UART_SetConfig+0x39e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4ad6      	ldr	r2, [pc, #856]	; (8002a1c <UART_SetConfig+0x6f0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	f040 80d1 	bne.w	800286c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80026ca:	f7ff fa05 	bl	8001ad8 <HAL_RCC_GetPCLK2Freq>
 80026ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	469a      	mov	sl, r3
 80026d4:	f04f 0b00 	mov.w	fp, #0
 80026d8:	46d0      	mov	r8, sl
 80026da:	46d9      	mov	r9, fp
 80026dc:	eb18 0308 	adds.w	r3, r8, r8
 80026e0:	eb49 0409 	adc.w	r4, r9, r9
 80026e4:	4698      	mov	r8, r3
 80026e6:	46a1      	mov	r9, r4
 80026e8:	eb18 080a 	adds.w	r8, r8, sl
 80026ec:	eb49 090b 	adc.w	r9, r9, fp
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002700:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002704:	4688      	mov	r8, r1
 8002706:	4691      	mov	r9, r2
 8002708:	eb1a 0508 	adds.w	r5, sl, r8
 800270c:	eb4b 0609 	adc.w	r6, fp, r9
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4619      	mov	r1, r3
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	f04f 0400 	mov.w	r4, #0
 8002722:	0094      	lsls	r4, r2, #2
 8002724:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002728:	008b      	lsls	r3, r1, #2
 800272a:	461a      	mov	r2, r3
 800272c:	4623      	mov	r3, r4
 800272e:	4628      	mov	r0, r5
 8002730:	4631      	mov	r1, r6
 8002732:	f7fd fd5b 	bl	80001ec <__aeabi_uldivmod>
 8002736:	4603      	mov	r3, r0
 8002738:	460c      	mov	r4, r1
 800273a:	461a      	mov	r2, r3
 800273c:	4bb8      	ldr	r3, [pc, #736]	; (8002a20 <UART_SetConfig+0x6f4>)
 800273e:	fba3 2302 	umull	r2, r3, r3, r2
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	469b      	mov	fp, r3
 800274c:	f04f 0c00 	mov.w	ip, #0
 8002750:	46d9      	mov	r9, fp
 8002752:	46e2      	mov	sl, ip
 8002754:	eb19 0309 	adds.w	r3, r9, r9
 8002758:	eb4a 040a 	adc.w	r4, sl, sl
 800275c:	4699      	mov	r9, r3
 800275e:	46a2      	mov	sl, r4
 8002760:	eb19 090b 	adds.w	r9, r9, fp
 8002764:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002774:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002778:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800277c:	4689      	mov	r9, r1
 800277e:	4692      	mov	sl, r2
 8002780:	eb1b 0509 	adds.w	r5, fp, r9
 8002784:	eb4c 060a 	adc.w	r6, ip, sl
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4619      	mov	r1, r3
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	f04f 0400 	mov.w	r4, #0
 800279a:	0094      	lsls	r4, r2, #2
 800279c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027a0:	008b      	lsls	r3, r1, #2
 80027a2:	461a      	mov	r2, r3
 80027a4:	4623      	mov	r3, r4
 80027a6:	4628      	mov	r0, r5
 80027a8:	4631      	mov	r1, r6
 80027aa:	f7fd fd1f 	bl	80001ec <__aeabi_uldivmod>
 80027ae:	4603      	mov	r3, r0
 80027b0:	460c      	mov	r4, r1
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b9a      	ldr	r3, [pc, #616]	; (8002a20 <UART_SetConfig+0x6f4>)
 80027b6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2164      	movs	r1, #100	; 0x64
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	3332      	adds	r3, #50	; 0x32
 80027c8:	4a95      	ldr	r2, [pc, #596]	; (8002a20 <UART_SetConfig+0x6f4>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d4:	4498      	add	r8, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	469b      	mov	fp, r3
 80027da:	f04f 0c00 	mov.w	ip, #0
 80027de:	46d9      	mov	r9, fp
 80027e0:	46e2      	mov	sl, ip
 80027e2:	eb19 0309 	adds.w	r3, r9, r9
 80027e6:	eb4a 040a 	adc.w	r4, sl, sl
 80027ea:	4699      	mov	r9, r3
 80027ec:	46a2      	mov	sl, r4
 80027ee:	eb19 090b 	adds.w	r9, r9, fp
 80027f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027f6:	f04f 0100 	mov.w	r1, #0
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800280a:	4689      	mov	r9, r1
 800280c:	4692      	mov	sl, r2
 800280e:	eb1b 0509 	adds.w	r5, fp, r9
 8002812:	eb4c 060a 	adc.w	r6, ip, sl
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	0094      	lsls	r4, r2, #2
 800282a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800282e:	008b      	lsls	r3, r1, #2
 8002830:	461a      	mov	r2, r3
 8002832:	4623      	mov	r3, r4
 8002834:	4628      	mov	r0, r5
 8002836:	4631      	mov	r1, r6
 8002838:	f7fd fcd8 	bl	80001ec <__aeabi_uldivmod>
 800283c:	4603      	mov	r3, r0
 800283e:	460c      	mov	r4, r1
 8002840:	461a      	mov	r2, r3
 8002842:	4b77      	ldr	r3, [pc, #476]	; (8002a20 <UART_SetConfig+0x6f4>)
 8002844:	fba3 1302 	umull	r1, r3, r3, r2
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	2164      	movs	r1, #100	; 0x64
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	3332      	adds	r3, #50	; 0x32
 8002856:	4a72      	ldr	r2, [pc, #456]	; (8002a20 <UART_SetConfig+0x6f4>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	f003 020f 	and.w	r2, r3, #15
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4442      	add	r2, r8
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	e0d0      	b.n	8002a0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800286c:	f7ff f920 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 8002870:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	469a      	mov	sl, r3
 8002876:	f04f 0b00 	mov.w	fp, #0
 800287a:	46d0      	mov	r8, sl
 800287c:	46d9      	mov	r9, fp
 800287e:	eb18 0308 	adds.w	r3, r8, r8
 8002882:	eb49 0409 	adc.w	r4, r9, r9
 8002886:	4698      	mov	r8, r3
 8002888:	46a1      	mov	r9, r4
 800288a:	eb18 080a 	adds.w	r8, r8, sl
 800288e:	eb49 090b 	adc.w	r9, r9, fp
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800289e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028a6:	4688      	mov	r8, r1
 80028a8:	4691      	mov	r9, r2
 80028aa:	eb1a 0508 	adds.w	r5, sl, r8
 80028ae:	eb4b 0609 	adc.w	r6, fp, r9
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	f04f 0400 	mov.w	r4, #0
 80028c4:	0094      	lsls	r4, r2, #2
 80028c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028ca:	008b      	lsls	r3, r1, #2
 80028cc:	461a      	mov	r2, r3
 80028ce:	4623      	mov	r3, r4
 80028d0:	4628      	mov	r0, r5
 80028d2:	4631      	mov	r1, r6
 80028d4:	f7fd fc8a 	bl	80001ec <__aeabi_uldivmod>
 80028d8:	4603      	mov	r3, r0
 80028da:	460c      	mov	r4, r1
 80028dc:	461a      	mov	r2, r3
 80028de:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <UART_SetConfig+0x6f4>)
 80028e0:	fba3 2302 	umull	r2, r3, r3, r2
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	469b      	mov	fp, r3
 80028ee:	f04f 0c00 	mov.w	ip, #0
 80028f2:	46d9      	mov	r9, fp
 80028f4:	46e2      	mov	sl, ip
 80028f6:	eb19 0309 	adds.w	r3, r9, r9
 80028fa:	eb4a 040a 	adc.w	r4, sl, sl
 80028fe:	4699      	mov	r9, r3
 8002900:	46a2      	mov	sl, r4
 8002902:	eb19 090b 	adds.w	r9, r9, fp
 8002906:	eb4a 0a0c 	adc.w	sl, sl, ip
 800290a:	f04f 0100 	mov.w	r1, #0
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002916:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800291a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800291e:	4689      	mov	r9, r1
 8002920:	4692      	mov	sl, r2
 8002922:	eb1b 0509 	adds.w	r5, fp, r9
 8002926:	eb4c 060a 	adc.w	r6, ip, sl
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	0094      	lsls	r4, r2, #2
 800293e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002942:	008b      	lsls	r3, r1, #2
 8002944:	461a      	mov	r2, r3
 8002946:	4623      	mov	r3, r4
 8002948:	4628      	mov	r0, r5
 800294a:	4631      	mov	r1, r6
 800294c:	f7fd fc4e 	bl	80001ec <__aeabi_uldivmod>
 8002950:	4603      	mov	r3, r0
 8002952:	460c      	mov	r4, r1
 8002954:	461a      	mov	r2, r3
 8002956:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <UART_SetConfig+0x6f4>)
 8002958:	fba3 1302 	umull	r1, r3, r3, r2
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	2164      	movs	r1, #100	; 0x64
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	3332      	adds	r3, #50	; 0x32
 800296a:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <UART_SetConfig+0x6f4>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002976:	4498      	add	r8, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	469b      	mov	fp, r3
 800297c:	f04f 0c00 	mov.w	ip, #0
 8002980:	46d9      	mov	r9, fp
 8002982:	46e2      	mov	sl, ip
 8002984:	eb19 0309 	adds.w	r3, r9, r9
 8002988:	eb4a 040a 	adc.w	r4, sl, sl
 800298c:	4699      	mov	r9, r3
 800298e:	46a2      	mov	sl, r4
 8002990:	eb19 090b 	adds.w	r9, r9, fp
 8002994:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029ac:	4689      	mov	r9, r1
 80029ae:	4692      	mov	sl, r2
 80029b0:	eb1b 0509 	adds.w	r5, fp, r9
 80029b4:	eb4c 060a 	adc.w	r6, ip, sl
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4619      	mov	r1, r3
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	0094      	lsls	r4, r2, #2
 80029cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029d0:	008b      	lsls	r3, r1, #2
 80029d2:	461a      	mov	r2, r3
 80029d4:	4623      	mov	r3, r4
 80029d6:	4628      	mov	r0, r5
 80029d8:	4631      	mov	r1, r6
 80029da:	f7fd fc07 	bl	80001ec <__aeabi_uldivmod>
 80029de:	4603      	mov	r3, r0
 80029e0:	460c      	mov	r4, r1
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <UART_SetConfig+0x6f4>)
 80029e6:	fba3 1302 	umull	r1, r3, r3, r2
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2164      	movs	r1, #100	; 0x64
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	3332      	adds	r3, #50	; 0x32
 80029f8:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <UART_SetConfig+0x6f4>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	f003 020f 	and.w	r2, r3, #15
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4442      	add	r2, r8
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	e7ff      	b.n	8002a0e <UART_SetConfig+0x6e2>
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a18:	40011000 	.word	0x40011000
 8002a1c:	40011400 	.word	0x40011400
 8002a20:	51eb851f 	.word	0x51eb851f

08002a24 <__errno>:
 8002a24:	4b01      	ldr	r3, [pc, #4]	; (8002a2c <__errno+0x8>)
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	2000000c 	.word	0x2000000c

08002a30 <__libc_init_array>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	4e0d      	ldr	r6, [pc, #52]	; (8002a68 <__libc_init_array+0x38>)
 8002a34:	4c0d      	ldr	r4, [pc, #52]	; (8002a6c <__libc_init_array+0x3c>)
 8002a36:	1ba4      	subs	r4, r4, r6
 8002a38:	10a4      	asrs	r4, r4, #2
 8002a3a:	2500      	movs	r5, #0
 8002a3c:	42a5      	cmp	r5, r4
 8002a3e:	d109      	bne.n	8002a54 <__libc_init_array+0x24>
 8002a40:	4e0b      	ldr	r6, [pc, #44]	; (8002a70 <__libc_init_array+0x40>)
 8002a42:	4c0c      	ldr	r4, [pc, #48]	; (8002a74 <__libc_init_array+0x44>)
 8002a44:	f000 f8ec 	bl	8002c20 <_init>
 8002a48:	1ba4      	subs	r4, r4, r6
 8002a4a:	10a4      	asrs	r4, r4, #2
 8002a4c:	2500      	movs	r5, #0
 8002a4e:	42a5      	cmp	r5, r4
 8002a50:	d105      	bne.n	8002a5e <__libc_init_array+0x2e>
 8002a52:	bd70      	pop	{r4, r5, r6, pc}
 8002a54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a58:	4798      	blx	r3
 8002a5a:	3501      	adds	r5, #1
 8002a5c:	e7ee      	b.n	8002a3c <__libc_init_array+0xc>
 8002a5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a62:	4798      	blx	r3
 8002a64:	3501      	adds	r5, #1
 8002a66:	e7f2      	b.n	8002a4e <__libc_init_array+0x1e>
 8002a68:	08002c58 	.word	0x08002c58
 8002a6c:	08002c58 	.word	0x08002c58
 8002a70:	08002c58 	.word	0x08002c58
 8002a74:	08002c5c 	.word	0x08002c5c

08002a78 <memset>:
 8002a78:	4402      	add	r2, r0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <memset+0xa>
 8002a80:	4770      	bx	lr
 8002a82:	f803 1b01 	strb.w	r1, [r3], #1
 8002a86:	e7f9      	b.n	8002a7c <memset+0x4>

08002a88 <srand>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <srand+0x38>)
 8002a8c:	681c      	ldr	r4, [r3, #0]
 8002a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a90:	4605      	mov	r5, r0
 8002a92:	b97b      	cbnz	r3, 8002ab4 <srand+0x2c>
 8002a94:	2018      	movs	r0, #24
 8002a96:	f000 f847 	bl	8002b28 <malloc>
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <srand+0x3c>)
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <srand+0x40>)
 8002a9e:	63a0      	str	r0, [r4, #56]	; 0x38
 8002aa0:	e9c0 2300 	strd	r2, r3, [r0]
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <srand+0x44>)
 8002aa6:	6083      	str	r3, [r0, #8]
 8002aa8:	230b      	movs	r3, #11
 8002aaa:	8183      	strh	r3, [r0, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002ab4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611d      	str	r5, [r3, #16]
 8002aba:	615a      	str	r2, [r3, #20]
 8002abc:	bd38      	pop	{r3, r4, r5, pc}
 8002abe:	bf00      	nop
 8002ac0:	2000000c 	.word	0x2000000c
 8002ac4:	abcd330e 	.word	0xabcd330e
 8002ac8:	e66d1234 	.word	0xe66d1234
 8002acc:	0005deec 	.word	0x0005deec

08002ad0 <time>:
 8002ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <time+0x30>)
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4669      	mov	r1, sp
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	f000 f812 	bl	8002b04 <_gettimeofday_r>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	da05      	bge.n	8002af0 <time+0x20>
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aec:	e9cd 2300 	strd	r2, r3, [sp]
 8002af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002af4:	b10c      	cbz	r4, 8002afa <time+0x2a>
 8002af6:	e9c4 0100 	strd	r0, r1, [r4]
 8002afa:	b004      	add	sp, #16
 8002afc:	bd10      	pop	{r4, pc}
 8002afe:	bf00      	nop
 8002b00:	2000000c 	.word	0x2000000c

08002b04 <_gettimeofday_r>:
 8002b04:	b538      	push	{r3, r4, r5, lr}
 8002b06:	4c07      	ldr	r4, [pc, #28]	; (8002b24 <_gettimeofday_r+0x20>)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	4605      	mov	r5, r0
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	6023      	str	r3, [r4, #0]
 8002b12:	f000 f87d 	bl	8002c10 <_gettimeofday>
 8002b16:	1c43      	adds	r3, r0, #1
 8002b18:	d102      	bne.n	8002b20 <_gettimeofday_r+0x1c>
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	b103      	cbz	r3, 8002b20 <_gettimeofday_r+0x1c>
 8002b1e:	602b      	str	r3, [r5, #0]
 8002b20:	bd38      	pop	{r3, r4, r5, pc}
 8002b22:	bf00      	nop
 8002b24:	200000dc 	.word	0x200000dc

08002b28 <malloc>:
 8002b28:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <malloc+0xc>)
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	f000 b803 	b.w	8002b38 <_malloc_r>
 8002b32:	bf00      	nop
 8002b34:	2000000c 	.word	0x2000000c

08002b38 <_malloc_r>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	1ccd      	adds	r5, r1, #3
 8002b3c:	f025 0503 	bic.w	r5, r5, #3
 8002b40:	3508      	adds	r5, #8
 8002b42:	2d0c      	cmp	r5, #12
 8002b44:	bf38      	it	cc
 8002b46:	250c      	movcc	r5, #12
 8002b48:	2d00      	cmp	r5, #0
 8002b4a:	4606      	mov	r6, r0
 8002b4c:	db01      	blt.n	8002b52 <_malloc_r+0x1a>
 8002b4e:	42a9      	cmp	r1, r5
 8002b50:	d903      	bls.n	8002b5a <_malloc_r+0x22>
 8002b52:	230c      	movs	r3, #12
 8002b54:	6033      	str	r3, [r6, #0]
 8002b56:	2000      	movs	r0, #0
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
 8002b5a:	f000 f857 	bl	8002c0c <__malloc_lock>
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <_malloc_r+0xac>)
 8002b60:	6814      	ldr	r4, [r2, #0]
 8002b62:	4621      	mov	r1, r4
 8002b64:	b991      	cbnz	r1, 8002b8c <_malloc_r+0x54>
 8002b66:	4c20      	ldr	r4, [pc, #128]	; (8002be8 <_malloc_r+0xb0>)
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	b91b      	cbnz	r3, 8002b74 <_malloc_r+0x3c>
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	f000 f83d 	bl	8002bec <_sbrk_r>
 8002b72:	6020      	str	r0, [r4, #0]
 8002b74:	4629      	mov	r1, r5
 8002b76:	4630      	mov	r0, r6
 8002b78:	f000 f838 	bl	8002bec <_sbrk_r>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d124      	bne.n	8002bca <_malloc_r+0x92>
 8002b80:	230c      	movs	r3, #12
 8002b82:	6033      	str	r3, [r6, #0]
 8002b84:	4630      	mov	r0, r6
 8002b86:	f000 f842 	bl	8002c0e <__malloc_unlock>
 8002b8a:	e7e4      	b.n	8002b56 <_malloc_r+0x1e>
 8002b8c:	680b      	ldr	r3, [r1, #0]
 8002b8e:	1b5b      	subs	r3, r3, r5
 8002b90:	d418      	bmi.n	8002bc4 <_malloc_r+0x8c>
 8002b92:	2b0b      	cmp	r3, #11
 8002b94:	d90f      	bls.n	8002bb6 <_malloc_r+0x7e>
 8002b96:	600b      	str	r3, [r1, #0]
 8002b98:	50cd      	str	r5, [r1, r3]
 8002b9a:	18cc      	adds	r4, r1, r3
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f000 f836 	bl	8002c0e <__malloc_unlock>
 8002ba2:	f104 000b 	add.w	r0, r4, #11
 8002ba6:	1d23      	adds	r3, r4, #4
 8002ba8:	f020 0007 	bic.w	r0, r0, #7
 8002bac:	1ac3      	subs	r3, r0, r3
 8002bae:	d0d3      	beq.n	8002b58 <_malloc_r+0x20>
 8002bb0:	425a      	negs	r2, r3
 8002bb2:	50e2      	str	r2, [r4, r3]
 8002bb4:	e7d0      	b.n	8002b58 <_malloc_r+0x20>
 8002bb6:	428c      	cmp	r4, r1
 8002bb8:	684b      	ldr	r3, [r1, #4]
 8002bba:	bf16      	itet	ne
 8002bbc:	6063      	strne	r3, [r4, #4]
 8002bbe:	6013      	streq	r3, [r2, #0]
 8002bc0:	460c      	movne	r4, r1
 8002bc2:	e7eb      	b.n	8002b9c <_malloc_r+0x64>
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	6849      	ldr	r1, [r1, #4]
 8002bc8:	e7cc      	b.n	8002b64 <_malloc_r+0x2c>
 8002bca:	1cc4      	adds	r4, r0, #3
 8002bcc:	f024 0403 	bic.w	r4, r4, #3
 8002bd0:	42a0      	cmp	r0, r4
 8002bd2:	d005      	beq.n	8002be0 <_malloc_r+0xa8>
 8002bd4:	1a21      	subs	r1, r4, r0
 8002bd6:	4630      	mov	r0, r6
 8002bd8:	f000 f808 	bl	8002bec <_sbrk_r>
 8002bdc:	3001      	adds	r0, #1
 8002bde:	d0cf      	beq.n	8002b80 <_malloc_r+0x48>
 8002be0:	6025      	str	r5, [r4, #0]
 8002be2:	e7db      	b.n	8002b9c <_malloc_r+0x64>
 8002be4:	20000090 	.word	0x20000090
 8002be8:	20000094 	.word	0x20000094

08002bec <_sbrk_r>:
 8002bec:	b538      	push	{r3, r4, r5, lr}
 8002bee:	4c06      	ldr	r4, [pc, #24]	; (8002c08 <_sbrk_r+0x1c>)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	6023      	str	r3, [r4, #0]
 8002bf8:	f7fd feec 	bl	80009d4 <_sbrk>
 8002bfc:	1c43      	adds	r3, r0, #1
 8002bfe:	d102      	bne.n	8002c06 <_sbrk_r+0x1a>
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	b103      	cbz	r3, 8002c06 <_sbrk_r+0x1a>
 8002c04:	602b      	str	r3, [r5, #0]
 8002c06:	bd38      	pop	{r3, r4, r5, pc}
 8002c08:	200000dc 	.word	0x200000dc

08002c0c <__malloc_lock>:
 8002c0c:	4770      	bx	lr

08002c0e <__malloc_unlock>:
 8002c0e:	4770      	bx	lr

08002c10 <_gettimeofday>:
 8002c10:	4b02      	ldr	r3, [pc, #8]	; (8002c1c <_gettimeofday+0xc>)
 8002c12:	2258      	movs	r2, #88	; 0x58
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1a:	4770      	bx	lr
 8002c1c:	200000dc 	.word	0x200000dc

08002c20 <_init>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr

08002c2c <_fini>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr


OBC_SDK v.1.37.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a888  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001540  0801aa38  0801aa38  0002aa38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801bf78  0801bf78  0002bf78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801bf7c  0801bf7c  0002bf7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  20000000  0801bf80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
  7 .bss          00009940  200001f4  200001f4  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00002004  20009b34  20009b34  000301f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005d727  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009135  00000000  00000000  0008d94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e58  00000000  00000000  00096a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b50  00000000  00000000  000998d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000349c9  00000000  00000000  0009c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003dffe  00000000  00000000  000d0df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fd52b  00000000  00000000  0010edef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020c31a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000dde0  00000000  00000000  0020c370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  0021a150  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000183  00000000  00000000  0021a204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801aa20 	.word	0x0801aa20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	0801aa20 	.word	0x0801aa20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <StartDefaultTask>:
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* EXTERNAL (NONE STATIC) ROUTINES DEFINITION
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
void StartDefaultTask(void const * argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
                            E_COMBINED,
                            E_810uT,
                            E_30HZ,
                            E_MEAS_AVG_8);
      #else
          if (Magnitometers_LIS3MDL_Init(LIS3MDL_MAG_I2C_ADDRESS_LOW) == E_OK)
 8000bd0:	2038      	movs	r0, #56	; 0x38
 8000bd2:	f00a fc95 	bl	800b500 <Magnitometers_LIS3MDL_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d107      	bne.n	8000bec <StartDefaultTask+0x24>
              fprintf(SYSCON,"MAG1_INIT_OK\r");
 8000bdc:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	220d      	movs	r2, #13
 8000be2:	2101      	movs	r1, #1
 8000be4:	4861      	ldr	r0, [pc, #388]	; (8000d6c <StartDefaultTask+0x1a4>)
 8000be6:	f00a fd39 	bl	800b65c <fwrite>
 8000bea:	e006      	b.n	8000bfa <StartDefaultTask+0x32>
          else
              fprintf(SYSCON, "  MAG1 fail\r");
 8000bec:	4b5e      	ldr	r3, [pc, #376]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	485e      	ldr	r0, [pc, #376]	; (8000d70 <StartDefaultTask+0x1a8>)
 8000bf6:	f00a fd31 	bl	800b65c <fwrite>
          if (Magnitometers_LIS3MDL_Init(LIS3MDL_MAG_I2C_ADDRESS_HIGH) == E_OK)
 8000bfa:	203c      	movs	r0, #60	; 0x3c
 8000bfc:	f00a fc80 	bl	800b500 <Magnitometers_LIS3MDL_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d107      	bne.n	8000c16 <StartDefaultTask+0x4e>
              fprintf(SYSCON,"MAG2_INIT_OK\r");
 8000c06:	4b58      	ldr	r3, [pc, #352]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	220d      	movs	r2, #13
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4859      	ldr	r0, [pc, #356]	; (8000d74 <StartDefaultTask+0x1ac>)
 8000c10:	f00a fd24 	bl	800b65c <fwrite>
 8000c14:	e006      	b.n	8000c24 <StartDefaultTask+0x5c>
          else
              fprintf(SYSCON, "  MAG2 fail\r");
 8000c16:	4b54      	ldr	r3, [pc, #336]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4856      	ldr	r0, [pc, #344]	; (8000d78 <StartDefaultTask+0x1b0>)
 8000c20:	f00a fd1c 	bl	800b65c <fwrite>
      #endif

      //Inizialize ACC Sensor 1
      if (AIS328DQ_Init(AIS328DQ_1_MEMS_I2C_ADDRESS) == SEN_SUCCESS)
 8000c24:	2030      	movs	r0, #48	; 0x30
 8000c26:	f009 fc93 	bl	800a550 <AIS328DQ_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d107      	bne.n	8000c40 <StartDefaultTask+0x78>
        fprintf(SYSCON,"ACC1_INIT_OK\r");
 8000c30:	4b4d      	ldr	r3, [pc, #308]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	220d      	movs	r2, #13
 8000c36:	2101      	movs	r1, #1
 8000c38:	4850      	ldr	r0, [pc, #320]	; (8000d7c <StartDefaultTask+0x1b4>)
 8000c3a:	f00a fd0f 	bl	800b65c <fwrite>
 8000c3e:	e001      	b.n	8000c44 <StartDefaultTask+0x7c>
      else
        I2C2_Reset();
 8000c40:	f000 fa52 	bl	80010e8 <I2C2_Reset>

      //Inizialize ACC Sensor 2
      if (AIS328DQ_Init(AIS328DQ_2_MEMS_I2C_ADDRESS) == SEN_SUCCESS)
 8000c44:	2032      	movs	r0, #50	; 0x32
 8000c46:	f009 fc83 	bl	800a550 <AIS328DQ_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d107      	bne.n	8000c60 <StartDefaultTask+0x98>
        fprintf(SYSCON,"ACC2_INIT_OK\r");
 8000c50:	4b45      	ldr	r3, [pc, #276]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	220d      	movs	r2, #13
 8000c56:	2101      	movs	r1, #1
 8000c58:	4849      	ldr	r0, [pc, #292]	; (8000d80 <StartDefaultTask+0x1b8>)
 8000c5a:	f00a fcff 	bl	800b65c <fwrite>
 8000c5e:	e001      	b.n	8000c64 <StartDefaultTask+0x9c>
      else
        I2C2_Reset();
 8000c60:	f000 fa42 	bl	80010e8 <I2C2_Reset>


      Panels_Init();
 8000c64:	f009 fe4a 	bl	800a8fc <Panels_Init>

      if (SetMagnetorque(PAN_X_M, 10, 1) == SEN_SUCCESS)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	210a      	movs	r1, #10
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f009 fefb 	bl	800aa68 <SetMagnetorque>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d106      	bne.n	8000c86 <StartDefaultTask+0xbe>
        fprintf(SYSCON,"TRQ%u_SET_10%%\r", TRQ_1);
 8000c78:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4941      	ldr	r1, [pc, #260]	; (8000d84 <StartDefaultTask+0x1bc>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f016 fadb 	bl	801723c <fiprintf>
      if (SetMagnetorque(PAN_Y_M, 50, 1) == SEN_SUCCESS)
 8000c86:	2201      	movs	r2, #1
 8000c88:	2132      	movs	r1, #50	; 0x32
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	f009 feec 	bl	800aa68 <SetMagnetorque>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d106      	bne.n	8000ca4 <StartDefaultTask+0xdc>
        fprintf(SYSCON,"TRQ%u_SET_50%%\r", TRQ_2);
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	493a      	ldr	r1, [pc, #232]	; (8000d88 <StartDefaultTask+0x1c0>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f016 facc 	bl	801723c <fiprintf>
      if (SetMagnetorque(PAN_Z_M, 90, 1) == SEN_SUCCESS)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	215a      	movs	r1, #90	; 0x5a
 8000ca8:	2005      	movs	r0, #5
 8000caa:	f009 fedd 	bl	800aa68 <SetMagnetorque>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d106      	bne.n	8000cc2 <StartDefaultTask+0xfa>
        fprintf(SYSCON,"TRQ%u_SET_90%%\r", TRQ_3);
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2203      	movs	r2, #3
 8000cba:	4934      	ldr	r1, [pc, #208]	; (8000d8c <StartDefaultTask+0x1c4>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f016 fabd 	bl	801723c <fiprintf>

      //Inizialize GYR Sensor X
      if (ADIS16265_Init(PAN_X_M) == SEN_SUCCESS)
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f00a f9b6 	bl	800b034 <ADIS16265_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d107      	bne.n	8000cde <StartDefaultTask+0x116>
        fprintf(SYSCON,"GYR%u_INIT_OK\r", GYR_1);
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	492e      	ldr	r1, [pc, #184]	; (8000d90 <StartDefaultTask+0x1c8>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f016 fab0 	bl	801723c <fiprintf>
 8000cdc:	e006      	b.n	8000cec <StartDefaultTask+0x124>
      else
        fprintf(SYSCON,"GYR%u_INIT_FAIL\r", GYR_1);
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	492b      	ldr	r1, [pc, #172]	; (8000d94 <StartDefaultTask+0x1cc>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f016 faa8 	bl	801723c <fiprintf>

      //Inizialize GYR Sensor Y
      if (ADIS16265_Init(PAN_Y_M) == SEN_SUCCESS)
 8000cec:	2004      	movs	r0, #4
 8000cee:	f00a f9a1 	bl	800b034 <ADIS16265_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d107      	bne.n	8000d08 <StartDefaultTask+0x140>
        fprintf(SYSCON,"GYR%u_INIT_OK\r", GYR_2);
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	4924      	ldr	r1, [pc, #144]	; (8000d90 <StartDefaultTask+0x1c8>)
 8000d00:	4618      	mov	r0, r3
 8000d02:	f016 fa9b 	bl	801723c <fiprintf>
 8000d06:	e006      	b.n	8000d16 <StartDefaultTask+0x14e>
      else
        fprintf(SYSCON,"GYR%u_INIT_FAIL\r", GYR_2);
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	4921      	ldr	r1, [pc, #132]	; (8000d94 <StartDefaultTask+0x1cc>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f016 fa93 	bl	801723c <fiprintf>

      //Inizialize GYR Sensor Z
      if (ADIS16265_Init(PAN_Z_M) == SEN_SUCCESS)
 8000d16:	2005      	movs	r0, #5
 8000d18:	f00a f98c 	bl	800b034 <ADIS16265_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d107      	bne.n	8000d32 <StartDefaultTask+0x16a>
        fprintf(SYSCON,"GYR%u_INIT_OK\r", GYR_3);
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2203      	movs	r2, #3
 8000d28:	4919      	ldr	r1, [pc, #100]	; (8000d90 <StartDefaultTask+0x1c8>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f016 fa86 	bl	801723c <fiprintf>
 8000d30:	e006      	b.n	8000d40 <StartDefaultTask+0x178>
      else
        fprintf(SYSCON,"GYR%u_INIT_FAIL\r", GYR_3);
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <StartDefaultTask+0x1a0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2203      	movs	r2, #3
 8000d38:	4916      	ldr	r1, [pc, #88]	; (8000d94 <StartDefaultTask+0x1cc>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f016 fa7e 	bl	801723c <fiprintf>
      //----------------------------sensors init end


      for( ; ; )
      {
          GREEN_LED_ON();
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <StartDefaultTask+0x1d0>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <StartDefaultTask+0x1d0>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	6153      	str	r3, [r2, #20]
          osDelay(50);
 8000d4c:	2032      	movs	r0, #50	; 0x32
 8000d4e:	f013 fc86 	bl	801465e <osDelay>
          GREEN_LED_OFF();
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <StartDefaultTask+0x1d0>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <StartDefaultTask+0x1d0>)
 8000d58:	f023 0310 	bic.w	r3, r3, #16
 8000d5c:	6153      	str	r3, [r2, #20]


          osDelay(1000);
 8000d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d62:	f013 fc7c 	bl	801465e <osDelay>
          GREEN_LED_ON();
 8000d66:	e7eb      	b.n	8000d40 <StartDefaultTask+0x178>
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	0801aa38 	.word	0x0801aa38
 8000d70:	0801aa48 	.word	0x0801aa48
 8000d74:	0801aa58 	.word	0x0801aa58
 8000d78:	0801aa68 	.word	0x0801aa68
 8000d7c:	0801aa78 	.word	0x0801aa78
 8000d80:	0801aa88 	.word	0x0801aa88
 8000d84:	0801aa98 	.word	0x0801aa98
 8000d88:	0801aaa8 	.word	0x0801aaa8
 8000d8c:	0801aab8 	.word	0x0801aab8
 8000d90:	0801aac8 	.word	0x0801aac8
 8000d94:	0801aad8 	.word	0x0801aad8
 8000d98:	40020800 	.word	0x40020800

08000d9c <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cs_packet;
    uint8_t subsys = packet[1];
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	77fb      	strb	r3, [r7, #31]
    uint8_t cmd = packet[2];
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	789b      	ldrb	r3, [r3, #2]
 8000db0:	77bb      	strb	r3, [r7, #30]
    uint8_t data_len = packet[3];
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	78db      	ldrb	r3, [r3, #3]
 8000db6:	777b      	strb	r3, [r7, #29]
    uint8_t* data_ptr = (uint8_t*) malloc(sizeof(uint8_t) * data_len);
 8000db8:	7f7b      	ldrb	r3, [r7, #29]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f016 fa74 	bl	80172a8 <malloc>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	61bb      	str	r3, [r7, #24]
    uint8_t cksum = packet[4 + data_len];
 8000dc4:	7f7b      	ldrb	r3, [r7, #29]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	461a      	mov	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	75fb      	strb	r3, [r7, #23]

    cs_packet.Subsystem_Type = subsys;
 8000dd2:	7ffb      	ldrb	r3, [r7, #31]
 8000dd4:	723b      	strb	r3, [r7, #8]
    cs_packet.Command = cmd;
 8000dd6:	7fbb      	ldrb	r3, [r7, #30]
 8000dd8:	727b      	strb	r3, [r7, #9]
    cs_packet.Data_Length = data_len;
 8000dda:	7f7b      	ldrb	r3, [r7, #29]
 8000ddc:	72bb      	strb	r3, [r7, #10]
    cs_packet.Data = data_ptr;
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	60fb      	str	r3, [r7, #12]
    cs_packet.Checksum = cksum;
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	743b      	strb	r3, [r7, #16]

    return cs_packet;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	461c      	mov	r4, r3
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd90      	pop	{r4, r7, pc}
	...

08000e00 <sendCySatPacket>:
 * communicate with the UHF Transceiver in the final implementation.
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendCySatPacket(CySat_Packet_t packet){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint8_t* message = (uint8_t*) malloc(sizeof(uint8_t) * (packet.Data_Length + 5));
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	3305      	adds	r3, #5
 8000e10:	4618      	mov	r0, r3
 8000e12:	f016 fa49 	bl	80172a8 <malloc>
 8000e16:	4603      	mov	r3, r0
 8000e18:	613b      	str	r3, [r7, #16]

    //build byte array
    message[0] = 0xFF; //start byte
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	22ff      	movs	r2, #255	; 0xff
 8000e1e:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	3301      	adds	r3, #1
 8000e24:	793a      	ldrb	r2, [r7, #4]
 8000e26:	701a      	strb	r2, [r3, #0]
    message[2] = packet.Command;
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	797a      	ldrb	r2, [r7, #5]
 8000e2e:	701a      	strb	r2, [r3, #0]
    message[3] = packet.Data_Length;
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	3303      	adds	r3, #3
 8000e34:	79ba      	ldrb	r2, [r7, #6]
 8000e36:	701a      	strb	r2, [r3, #0]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e00b      	b.n	8000e56 <sendCySatPacket+0x56>
        message[i + 4] = packet.Data[i];
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	441a      	add	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3304      	adds	r3, #4
 8000e48:	6939      	ldr	r1, [r7, #16]
 8000e4a:	440b      	add	r3, r1
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < packet.Data_Length; i++){
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	dbee      	blt.n	8000e3e <sendCySatPacket+0x3e>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	3304      	adds	r3, #4
 8000e64:	461a      	mov	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4413      	add	r3, r2
 8000e6a:	7b3a      	ldrb	r2, [r7, #12]
 8000e6c:	701a      	strb	r2, [r3, #0]

    //send message over uart
    HAL_UART_Transmit(&huart6, message, packet.Data_Length + 5, 100); //send the message over uart, but timeout after 100ms
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	3305      	adds	r3, #5
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	2364      	movs	r3, #100	; 0x64
 8000e78:	6939      	ldr	r1, [r7, #16]
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <sendCySatPacket+0x90>)
 8000e7c:	f007 fe11 	bl	8008aa2 <HAL_UART_Transmit>

    free(message);
 8000e80:	6938      	ldr	r0, [r7, #16]
 8000e82:	f016 fa19 	bl	80172b8 <free>
    return 0;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200099c8 	.word	0x200099c8

08000e94 <READ_EPS_BATTERY_VOLTAGE>:
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param handle: The I2C handle you want to attempt to talk to the EPS upon
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(I2C_HandleTypeDef handle, float* volt_ptr){
 8000e94:	b084      	sub	sp, #16
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b096      	sub	sp, #88	; 0x58
 8000e9a:	af14      	add	r7, sp, #80	; 0x50
 8000e9c:	f107 0c10 	add.w	ip, r7, #16
 8000ea0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	71fb      	strb	r3, [r7, #7]
    uint8_t command = 1; //battery voltage command
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    status = EPS_READ(handle, command, data);
 8000eac:	463b      	mov	r3, r7
 8000eae:	9312      	str	r3, [sp, #72]	; 0x48
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	9311      	str	r3, [sp, #68]	; 0x44
 8000eb4:	4668      	mov	r0, sp
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2244      	movs	r2, #68	; 0x44
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f016 fa03 	bl	80172c8 <memcpy>
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec8:	f000 f826 	bl	8000f18 <EPS_READ>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK){
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <READ_EPS_BATTERY_VOLTAGE+0x46>
        return status;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	e014      	b.n	8000f04 <READ_EPS_BATTERY_VOLTAGE+0x70>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8000eda:	783b      	ldrb	r3, [r7, #0]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	787b      	ldrb	r3, [r7, #1]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	80bb      	strh	r3, [r7, #4]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 8000eea:	88bb      	ldrh	r3, [r7, #4]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f14 <READ_EPS_BATTERY_VOLTAGE+0x80>
 8000ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000efe:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58
    return status;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f0e:	b004      	add	sp, #16
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	3b1951eb 	.word	0x3b1951eb

08000f18 <EPS_READ>:
    return status;
}

/********************************************** HELPER FUNCTIONS **********************************************************************************/

HAL_StatusTypeDef EPS_READ(I2C_HandleTypeDef handle, uint8_t command, uint8_t* data_ptr){
 8000f18:	b084      	sub	sp, #16
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af02      	add	r7, sp, #8
 8000f20:	f107 0c10 	add.w	ip, r7, #16
 8000f24:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        HAL_StatusTypeDef status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	71fb      	strb	r3, [r7, #7]
        status = HAL_I2C_Master_Transmit(&handle, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 8000f2c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	2130      	movs	r1, #48	; 0x30
 8000f3a:	f107 0010 	add.w	r0, r7, #16
 8000f3e:	f002 f913 	bl	8003168 <HAL_I2C_Master_Transmit>
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
        if(status != HAL_OK){
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <EPS_READ+0x38>
            return status;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	e00c      	b.n	8000f6a <EPS_READ+0x52>
        }
        status = HAL_I2C_Master_Receive(&handle, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2302      	movs	r3, #2
 8000f58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f5a:	2130      	movs	r1, #48	; 0x30
 8000f5c:	f107 0010 	add.w	r0, r7, #16
 8000f60:	f002 fa10 	bl	8003384 <HAL_I2C_Master_Receive>
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
        return status;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f74:	b004      	add	sp, #16
 8000f76:	4770      	bx	lr

08000f78 <debugSerialReceive>:
  * @brief Receives data from the debug UART line in polling mode and then returns the number of read bytes.
  * It searches for a CySat Packet Protocol start field, and then reads until the end of the packet
  * @param data: a pointer to an allocated array to hold the received data
  * @retval the number of bytes read off the UART line
  */
int debugSerialReceive(uint8_t* data){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    uint8_t byte;
    int bytes = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
    status = HAL_UART_Receive(&huart6, &byte, 1, 10); //read one byte, which is the header. Only waits for a short time before returning from the function
 8000f84:	f107 010f 	add.w	r1, r7, #15
 8000f88:	230a      	movs	r3, #10
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <debugSerialReceive+0x68>)
 8000f8e:	f007 fe21 	bl	8008bd4 <HAL_UART_Receive>
 8000f92:	4603      	mov	r3, r0
 8000f94:	75fb      	strb	r3, [r7, #23]
    if(byte != CSPP_START_CHAR) //if the byte is not the start character, return
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2bff      	cmp	r3, #255	; 0xff
 8000f9a:	d016      	beq.n	8000fca <debugSerialReceive+0x52>
        return 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e01a      	b.n	8000fd6 <debugSerialReceive+0x5e>

    while(status != HAL_TIMEOUT){
        data[bytes] = byte;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	701a      	strb	r2, [r3, #0]
        bytes++;
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	3301      	adds	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
        if(bytes == 260){
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000fb6:	d00c      	beq.n	8000fd2 <debugSerialReceive+0x5a>
            break;
        }

        status = HAL_UART_Receive(&huart6, &byte, 1, 10);
 8000fb8:	f107 010f 	add.w	r1, r7, #15
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <debugSerialReceive+0x68>)
 8000fc2:	f007 fe07 	bl	8008bd4 <HAL_UART_Receive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	75fb      	strb	r3, [r7, #23]
    while(status != HAL_TIMEOUT){
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d1e7      	bne.n	8000fa0 <debugSerialReceive+0x28>
 8000fd0:	e000      	b.n	8000fd4 <debugSerialReceive+0x5c>
            break;
 8000fd2:	bf00      	nop
    }

    return bytes; //returns the number of bytes captured
 8000fd4:	693b      	ldr	r3, [r7, #16]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200099c8 	.word	0x200099c8

08000fe4 <FloatToUnsigned8bitArray>:
/**
  * @brief Converts a float into an array of 4 bytes
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a byte array
  */
void FloatToUnsigned8bitArray(uint8_t bytes[sizeof(float)], float float_value){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	ed87 0a00 	vstr	s0, [r7]
    union {
        float f;
        uint8_t b[sizeof(float)];
    } both;
    both.f = float_value;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
    memcpy(bytes, both.b, sizeof(float));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 8001006:	b480      	push	{r7}
 8001008:	b089      	sub	sp, #36	; 0x24
 800100a:	af00      	add	r7, sp, #0
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	461a      	mov	r2, r3
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4413      	add	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	461a      	mov	r2, r3
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	4413      	add	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	461a      	mov	r2, r3
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4413      	add	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	e00a      	b.n	8001050 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	4413      	add	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	461a      	mov	r2, r3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	4293      	cmp	r3, r2
 8001058:	dbef      	blt.n	800103a <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	43db      	mvns	r3, r3
 8001062:	b2db      	uxtb	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	3724      	adds	r7, #36	; 0x24
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 8001080:	793b      	ldrb	r3, [r7, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4413      	add	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 800108a:	797b      	ldrb	r3, [r7, #5]
 800108c:	461a      	mov	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4413      	add	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	461a      	mov	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4413      	add	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e00a      	b.n	80010ba <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4413      	add	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	461a      	mov	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	4293      	cmp	r3, r2
 80010c2:	dbef      	blt.n	80010a4 <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 80010c4:	7b3b      	ldrb	r3, [r7, #12]
 80010c6:	461a      	mov	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4413      	add	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2bff      	cmp	r3, #255	; 0xff
 80010d4:	d101      	bne.n	80010da <validateCySatChecksum+0x6a>
        return 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 80010da:	2300      	movs	r3, #0
    }
}
 80010dc:	4618      	mov	r0, r3
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <I2C2_Reset>:
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* EXTERNAL (NONE STATIC) ROUTINES DEFINITION
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

void I2C2_Reset (void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
   hi2c2.Instance->CR1 |= I2C_CR1_SWRST;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <I2C2_Reset+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <I2C2_Reset+0x40>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010fa:	601a      	str	r2, [r3, #0]
      osDelay(100);
 80010fc:	2064      	movs	r0, #100	; 0x64
 80010fe:	f013 faae 	bl	801465e <osDelay>
      hi2c2.Instance->CR1 &= ~I2C_CR1_SWRST;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <I2C2_Reset+0x40>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <I2C2_Reset+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001110:	601a      	str	r2, [r3, #0]
      HAL_I2C_DeInit(&hi2c2);
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <I2C2_Reset+0x40>)
 8001114:	f001 fff8 	bl	8003108 <HAL_I2C_DeInit>
      hi2c2.State = HAL_I2C_STATE_RESET;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <I2C2_Reset+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      MX_I2C2_Init();
 8001120:	f00e fa3a 	bl	800f598 <MX_I2C2_Init>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200096ec 	.word	0x200096ec

0800112c <main>:


int main(void)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b0ce      	sub	sp, #312	; 0x138
 8001130:	af00      	add	r7, sp, #0
    //  SCB->VTOR = APPL_ADDRESS;

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001132:	f000 fa19 	bl	8001568 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8001136:	f00d ff51 	bl	800efdc <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800113a:	f00d ffd1 	bl	800f0e0 <MX_GPIO_Init>
    MX_DMA_Init();
 800113e:	f00e fc3d 	bl	800f9bc <MX_DMA_Init>
    MX_ADC1_Init();
 8001142:	f00e f969 	bl	800f418 <MX_ADC1_Init>
    MX_FMC_Init();
 8001146:	f00e f9a1 	bl	800f48c <MX_FMC_Init>
    MX_I2C1_Init();
 800114a:	f00e f9f7 	bl	800f53c <MX_I2C1_Init>
    MX_I2C2_Init();
 800114e:	f00e fa23 	bl	800f598 <MX_I2C2_Init>
    MX_I2C3_Init();
 8001152:	f00e fa4f 	bl	800f5f4 <MX_I2C3_Init>
    MX_SDIO_SD_Init();
 8001156:	f00e fa7b 	bl	800f650 <MX_SDIO_SD_Init>
    MX_SPI1_Init();
 800115a:	f00e fa99 	bl	800f690 <MX_SPI1_Init>
    MX_SPI2_Init();
 800115e:	f00e facd 	bl	800f6fc <MX_SPI2_Init>
    MX_SPI6_Init();
 8001162:	f00e fb03 	bl	800f76c <MX_SPI6_Init>
    MX_TIM5_Init();
 8001166:	f00e fb37 	bl	800f7d8 <MX_TIM5_Init>
    MX_UART4_Init();
 800116a:	f00e fba9 	bl	800f8c0 <MX_UART4_Init>
    MX_USART1_UART_Init();
 800116e:	f00e fbd1 	bl	800f914 <MX_USART1_UART_Init>
    MX_USART6_UART_Init();
 8001172:	f00e fbf9 	bl	800f968 <MX_USART6_UART_Init>
    MX_RTC_Init(); //TODO: look into this
 8001176:	f00e fc49 	bl	800fa0c <MX_RTC_Init>
    MX_FATFS_Init();
 800117a:	f00e fd83 	bl	800fc84 <MX_FATFS_Init>
//    SatFlags.BeaconEnabled = 1;

    /* Create the thread(s) */
    /* definition and creation of defaultTask */

    osThreadDef(myStartDefaultTask, StartDefaultTask, osPriorityLow, 0, 6*128);
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <main+0xf4>)
 8001180:	f507 7492 	add.w	r4, r7, #292	; 0x124
 8001184:	461d      	mov	r5, r3
 8001186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myStartDefaultTask), NULL);
 800118e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f013 fa3b 	bl	8014610 <osThreadCreate>

    osThreadDef(myESTTC_UART_COMM, ESTTC_UART_COMM, osPriorityLow, 1, 5*128);
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <main+0xf8>)
 800119c:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80011a0:	461d      	mov	r5, r3
 80011a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myESTTC_UART_COMM), NULL);
 80011aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f013 fa2d 	bl	8014610 <osThreadCreate>

    /* Start scheduler */
    osKernelStart();
 80011b6:	f013 fa24 	bl	8014602 <osKernelStart>
    uint8_t message[260];

    //initial phase loop
    while (1)
    {
        GREEN_LED_XOR(); //so we know it is breathing
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <main+0xfc>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <main+0xfc>)
 80011c0:	f083 0310 	eor.w	r3, r3, #16
 80011c4:	6153      	str	r3, [r2, #20]
        // TODO: check for UHF message
        if(debugSerialReceive(message) >= 5){
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fed4 	bl	8000f78 <debugSerialReceive>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	dd1a      	ble.n	800120c <main+0xe0>
            CySat_Packet_t p = parseCySatPacket(message);
 80011d6:	463b      	mov	r3, r7
 80011d8:	f107 020c 	add.w	r2, r7, #12
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fddc 	bl	8000d9c <parseCySatPacket>
            if(validateCySatChecksum(p)){
 80011e4:	463b      	mov	r3, r7
 80011e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ea:	f7ff ff41 	bl	8001070 <validateCySatChecksum>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d012      	beq.n	800121a <main+0xee>
                if(handleCySatPacket(p) == -1){
 80011f4:	463b      	mov	r3, r7
 80011f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011fa:	f000 f829 	bl	8001250 <handleCySatPacket>
                    //log invalid subsystem type
                }
                AMBER_LED_ON();
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <main+0xfc>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <main+0xfc>)
 8001204:	f043 0320 	orr.w	r3, r3, #32
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	e7d6      	b.n	80011ba <main+0x8e>
            else{
                continue; //TODO: send error message and log
            }
        }
        else{
            AMBER_LED_OFF(); //No message received
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <main+0xfc>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	4a05      	ldr	r2, [pc, #20]	; (8001228 <main+0xfc>)
 8001212:	f023 0320 	bic.w	r3, r3, #32
 8001216:	6153      	str	r3, [r2, #20]
 8001218:	e7cf      	b.n	80011ba <main+0x8e>
                continue; //TODO: send error message and log
 800121a:	bf00      	nop
        GREEN_LED_XOR(); //so we know it is breathing
 800121c:	e7cd      	b.n	80011ba <main+0x8e>
 800121e:	bf00      	nop
 8001220:	0801ab14 	.word	0x0801ab14
 8001224:	0801ab28 	.word	0x0801ab28
 8001228:	40020800 	.word	0x40020800

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123e:	f000 f9b5 	bl	80015ac <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40010000 	.word	0x40010000

08001250 <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b0b6      	sub	sp, #216	; 0xd8
 8001254:	af12      	add	r7, sp, #72	; 0x48
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    switch(packet.Subsystem_Type){
 800125c:	793b      	ldrb	r3, [r7, #4]
 800125e:	2b28      	cmp	r3, #40	; 0x28
 8001260:	dc48      	bgt.n	80012f4 <handleCySatPacket+0xa4>
 8001262:	2b0a      	cmp	r3, #10
 8001264:	f2c0 8142 	blt.w	80014ec <handleCySatPacket+0x29c>
 8001268:	3b0a      	subs	r3, #10
 800126a:	2b1e      	cmp	r3, #30
 800126c:	f200 813e 	bhi.w	80014ec <handleCySatPacket+0x29c>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <handleCySatPacket+0x28>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	080012fd 	.word	0x080012fd
 800127c:	080014ed 	.word	0x080014ed
 8001280:	080014ed 	.word	0x080014ed
 8001284:	080014ed 	.word	0x080014ed
 8001288:	080014ed 	.word	0x080014ed
 800128c:	080014ed 	.word	0x080014ed
 8001290:	080014ed 	.word	0x080014ed
 8001294:	080014ed 	.word	0x080014ed
 8001298:	080014ed 	.word	0x080014ed
 800129c:	080014ed 	.word	0x080014ed
 80012a0:	080014f3 	.word	0x080014f3
 80012a4:	080014ed 	.word	0x080014ed
 80012a8:	080014ed 	.word	0x080014ed
 80012ac:	080014ed 	.word	0x080014ed
 80012b0:	080014ed 	.word	0x080014ed
 80012b4:	080014ed 	.word	0x080014ed
 80012b8:	080014ed 	.word	0x080014ed
 80012bc:	080014ed 	.word	0x080014ed
 80012c0:	080014ed 	.word	0x080014ed
 80012c4:	080014ed 	.word	0x080014ed
 80012c8:	0800147f 	.word	0x0800147f
 80012cc:	080014ed 	.word	0x080014ed
 80012d0:	080014ed 	.word	0x080014ed
 80012d4:	080014ed 	.word	0x080014ed
 80012d8:	080014ed 	.word	0x080014ed
 80012dc:	080014ed 	.word	0x080014ed
 80012e0:	080014ed 	.word	0x080014ed
 80012e4:	080014ed 	.word	0x080014ed
 80012e8:	080014ed 	.word	0x080014ed
 80012ec:	080014ed 	.word	0x080014ed
 80012f0:	080014f3 	.word	0x080014f3
 80012f4:	2b5a      	cmp	r3, #90	; 0x5a
 80012f6:	f000 80fe 	beq.w	80014f6 <handleCySatPacket+0x2a6>
 80012fa:	e0f7      	b.n	80014ec <handleCySatPacket+0x29c>

    case CSPP_OBC_SUBTYPE: //OBC
        if(packet.Command == 0x01){ //Ping request command
 80012fc:	797b      	ldrb	r3, [r7, #5]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d123      	bne.n	800134a <handleCySatPacket+0xfa>
            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_OBC_SUBTYPE; //OBC module
 8001302:	230a      	movs	r3, #10
 8001304:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            outgoingPacket.Command = 0x00; //Ping response
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
            outgoingPacket.Data_Length = 0x0C; //length of the message
 800130e:	230c      	movs	r3, #12
 8001310:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
            uint8_t d[] = "Hello Earth!";
 8001314:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <handleCySatPacket+0x2b8>)
 8001316:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800131a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131c:	c407      	stmia	r4!, {r0, r1, r2}
 800131e:	7023      	strb	r3, [r4, #0]
            outgoingPacket.Data = d;
 8001320:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001328:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800132c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001330:	f7ff fe69 	bl	8001006 <generateCySatChecksum>
 8001334:	4603      	mov	r3, r0
 8001336:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            return sendCySatPacket(outgoingPacket); //send the response
 800133a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800133e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001342:	f7ff fd5d 	bl	8000e00 <sendCySatPacket>
 8001346:	4603      	mov	r3, r0
 8001348:	e0d9      	b.n	80014fe <handleCySatPacket+0x2ae>
        }
        else if(packet.Command == 0x03){ //Request beacon shutoff
 800134a:	797b      	ldrb	r3, [r7, #5]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d14a      	bne.n	80013e6 <handleCySatPacket+0x196>
            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_OBC_SUBTYPE; //OBC module
 8001350:	230a      	movs	r3, #10
 8001352:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            outgoingPacket.Command = 0x02; //Beacon shutoff response
 8001356:	2302      	movs	r3, #2
 8001358:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

            if(SatFlags.BeaconEnabled){
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <handleCySatPacket+0x2bc>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d01a      	beq.n	80013a0 <handleCySatPacket+0x150>
                //TODO: command UHF to shutoff beacon
                SatFlags.BeaconEnabled = 0;
 800136a:	4a68      	ldr	r2, [pc, #416]	; (800150c <handleCySatPacket+0x2bc>)
 800136c:	7813      	ldrb	r3, [r2, #0]
 800136e:	f36f 1386 	bfc	r3, #6, #1
 8001372:	7013      	strb	r3, [r2, #0]
                outgoingPacket.Data_Length = 0x0F;
 8001374:	230f      	movs	r3, #15
 8001376:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
                uint8_t d[] = "Beacon Shut Off";
 800137a:	4b65      	ldr	r3, [pc, #404]	; (8001510 <handleCySatPacket+0x2c0>)
 800137c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001380:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001382:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                outgoingPacket.Data = d;
 8001386:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800138a:	66fb      	str	r3, [r7, #108]	; 0x6c
                outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800138c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001394:	f7ff fe37 	bl	8001006 <generateCySatChecksum>
 8001398:	4603      	mov	r3, r0
 800139a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800139e:	e01a      	b.n	80013d6 <handleCySatPacket+0x186>
            }
            else{
                outgoingPacket.Data_Length = 0x12;
 80013a0:	2312      	movs	r3, #18
 80013a2:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
                uint8_t d[] = "Beacon Already Off";
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <handleCySatPacket+0x2c4>)
 80013a8:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80013ac:	461d      	mov	r5, r3
 80013ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b2:	682b      	ldr	r3, [r5, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	8022      	strh	r2, [r4, #0]
 80013b8:	3402      	adds	r4, #2
 80013ba:	0c1b      	lsrs	r3, r3, #16
 80013bc:	7023      	strb	r3, [r4, #0]
                outgoingPacket.Data = d;
 80013be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013c2:	66fb      	str	r3, [r7, #108]	; 0x6c
                outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80013c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013cc:	f7ff fe1b 	bl	8001006 <generateCySatChecksum>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            return sendCySatPacket(outgoingPacket); //send the response
 80013d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013de:	f7ff fd0f 	bl	8000e00 <sendCySatPacket>
 80013e2:	4603      	mov	r3, r0
 80013e4:	e08b      	b.n	80014fe <handleCySatPacket+0x2ae>
        }
        else if(packet.Command == 0x05){ //Basic Health Check Request
 80013e6:	797b      	ldrb	r3, [r7, #5]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d125      	bne.n	8001438 <handleCySatPacket+0x1e8>
            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_OBC_SUBTYPE; //OBC module
 80013ec:	230a      	movs	r3, #10
 80013ee:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            outgoingPacket.Command = 0x04; //enter main operating phase response
 80013f2:	2304      	movs	r3, #4
 80013f4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            outgoingPacket.Data_Length = 0x3; //length of the message, one byte for each subsystem (EPS, OBC, UHF)
 80013f8:	2303      	movs	r3, #3
 80013fa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            uint8_t d[3]; //generally, a zero means a failure or unused.
            d[0] = 0x00; //OBC, all described elsewhere
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            d[0] = 0x00; //EPS
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            d[0] = 0x00; //UHF
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            outgoingPacket.Data = d;
 8001410:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
            outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001416:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800141a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800141e:	f7ff fdf2 	bl	8001006 <generateCySatChecksum>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

            return sendCySatPacket(outgoingPacket); //send the response
 8001428:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800142c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001430:	f7ff fce6 	bl	8000e00 <sendCySatPacket>
 8001434:	4603      	mov	r3, r0
 8001436:	e062      	b.n	80014fe <handleCySatPacket+0x2ae>
        }
        else if(packet.Command == 0x07){ //Enter Main Operating Phase Request
 8001438:	797b      	ldrb	r3, [r7, #5]
 800143a:	2b07      	cmp	r3, #7
 800143c:	d15d      	bne.n	80014fa <handleCySatPacket+0x2aa>
            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_OBC_SUBTYPE; //OBC module
 800143e:	230a      	movs	r3, #10
 8001440:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            outgoingPacket.Command = 0x06; //enter main operating phase response
 8001444:	2306      	movs	r3, #6
 8001446:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            outgoingPacket.Data_Length = 0x1; //length of the message
 800144a:	2301      	movs	r3, #1
 800144c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            uint8_t d[1] = "\0"; //0 means failure
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            outgoingPacket.Data = d;
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
            outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800145c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001460:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001464:	f7ff fdcf 	bl	8001006 <generateCySatChecksum>
 8001468:	4603      	mov	r3, r0
 800146a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

            return sendCySatPacket(outgoingPacket); //send the response
 800146e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001476:	f7ff fcc3 	bl	8000e00 <sendCySatPacket>
 800147a:	4603      	mov	r3, r0
 800147c:	e03f      	b.n	80014fe <handleCySatPacket+0x2ae>
    case CSPP_ADCS_SUBTYPE: //ADCS

        break;

    case CSPP_EPS_SUBTYPE: //EPS
        if(packet.Command == 0x01){ //Request EPS battery voltage
 800147e:	797b      	ldrb	r3, [r7, #5]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d130      	bne.n	80014e6 <handleCySatPacket+0x296>
            float voltage;
            READ_EPS_BATTERY_VOLTAGE(hi2c1, &voltage); //read the voltage from the EPS
 8001484:	4c24      	ldr	r4, [pc, #144]	; (8001518 <handleCySatPacket+0x2c8>)
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	9311      	str	r3, [sp, #68]	; 0x44
 800148c:	4668      	mov	r0, sp
 800148e:	f104 0310 	add.w	r3, r4, #16
 8001492:	2244      	movs	r2, #68	; 0x44
 8001494:	4619      	mov	r1, r3
 8001496:	f015 ff17 	bl	80172c8 <memcpy>
 800149a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800149e:	f7ff fcf9 	bl	8000e94 <READ_EPS_BATTERY_VOLTAGE>
            uint8_t bytes[sizeof(float)];
            FloatToUnsigned8bitArray(bytes, voltage); //get the voltage as 4 raw bytes
 80014a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	eeb0 0a67 	vmov.f32	s0, s15
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fd98 	bl	8000fe4 <FloatToUnsigned8bitArray>

            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_EPS_SUBTYPE; //EPS module
 80014b4:	231e      	movs	r3, #30
 80014b6:	743b      	strb	r3, [r7, #16]
            outgoingPacket.Command = 0x00; //EPS battery voltage response
 80014b8:	2300      	movs	r3, #0
 80014ba:	747b      	strb	r3, [r7, #17]
            outgoingPacket.Data_Length = sizeof(float);
 80014bc:	2304      	movs	r3, #4
 80014be:	74bb      	strb	r3, [r7, #18]
            outgoingPacket.Data = bytes;
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	617b      	str	r3, [r7, #20]
            outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014ce:	f7ff fd9a 	bl	8001006 <generateCySatChecksum>
 80014d2:	4603      	mov	r3, r0
 80014d4:	763b      	strb	r3, [r7, #24]

            return sendCySatPacket(outgoingPacket); //send the response
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014de:	f7ff fc8f 	bl	8000e00 <sendCySatPacket>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e00b      	b.n	80014fe <handleCySatPacket+0x2ae>
        }
        else{
            return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ea:	e008      	b.n	80014fe <handleCySatPacket+0x2ae>
    case CSPP_EOL_SUBTYPE: //End of Life

        break;

    default:
        return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f0:	e005      	b.n	80014fe <handleCySatPacket+0x2ae>
        break;
 80014f2:	bf00      	nop
 80014f4:	e002      	b.n	80014fc <handleCySatPacket+0x2ac>
        break;
 80014f6:	bf00      	nop
 80014f8:	e000      	b.n	80014fc <handleCySatPacket+0x2ac>
        break;
 80014fa:	bf00      	nop
    }

    return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3790      	adds	r7, #144	; 0x90
 8001502:	46bd      	mov	sp, r7
 8001504:	bdb0      	pop	{r4, r5, r7, pc}
 8001506:	bf00      	nop
 8001508:	0801ab3c 	.word	0x0801ab3c
 800150c:	200084e4 	.word	0x200084e4
 8001510:	0801ab4c 	.word	0x0801ab4c
 8001514:	0801ab5c 	.word	0x0801ab5c
 8001518:	20009684 	.word	0x20009684

0800151c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
#ifdef DEBUG_ENABLE
  while(1)
  {
      GREEN_LED_ON();
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <Error_Handler+0x48>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <Error_Handler+0x48>)
 8001526:	f043 0310 	orr.w	r3, r3, #16
 800152a:	6153      	str	r3, [r2, #20]
      AMBER_LED_ON();
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <Error_Handler+0x48>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <Error_Handler+0x48>)
 8001532:	f043 0320 	orr.w	r3, r3, #32
 8001536:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8001538:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800153c:	f000 f850 	bl	80015e0 <HAL_Delay>
      GREEN_LED_OFF();
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <Error_Handler+0x48>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <Error_Handler+0x48>)
 8001546:	f023 0310 	bic.w	r3, r3, #16
 800154a:	6153      	str	r3, [r2, #20]
      AMBER_LED_OFF();
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <Error_Handler+0x48>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <Error_Handler+0x48>)
 8001552:	f023 0320 	bic.w	r3, r3, #32
 8001556:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8001558:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800155c:	f000 f840 	bl	80015e0 <HAL_Delay>
      GREEN_LED_ON();
 8001560:	e7de      	b.n	8001520 <Error_Handler+0x4>
 8001562:	bf00      	nop
 8001564:	40020800 	.word	0x40020800

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_Init+0x40>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001576:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_Init+0x40>)
 800157e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001582:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_Init+0x40>)
 800158a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 fce7 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	200f      	movs	r0, #15
 8001598:	f00f f848 	bl	801062c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f00e fc92 	bl	800fec4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023c00 	.word	0x40023c00

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick++;
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <HAL_IncTick+0x18>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_IncTick+0x18>)
 80015b8:	6013      	str	r3, [r2, #0]
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	200084e8 	.word	0x200084e8

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200084e8 	.word	0x200084e8

080015e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff ffee 	bl	80015c8 <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f8:	d002      	beq.n	8001600 <HAL_Delay+0x20>
  {
     wait++;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001600:	bf00      	nop
 8001602:	f7ff ffe1 	bl	80015c8 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	429a      	cmp	r2, r3
 8001610:	d8f7      	bhi.n	8001602 <HAL_Delay+0x22>
  {
  }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e033      	b.n	800169a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f00e fc6d 	bl	800ff28 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	d118      	bne.n	800168c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001662:	f023 0302 	bic.w	r3, r3, #2
 8001666:	f043 0202 	orr.w	r2, r3, #2
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 faa6 	bl	8001bc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	f043 0201 	orr.w	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
 800168a:	e001      	b.n	8001690 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_ADC_Start+0x1a>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e089      	b.n	80017d2 <HAL_ADC_Start+0x12e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d018      	beq.n	8001706 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016e4:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <HAL_ADC_Start+0x13c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <HAL_ADC_Start+0x140>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0c9a      	lsrs	r2, r3, #18
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016f8:	e002      	b.n	8001700 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f9      	bne.n	80016fa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05d      	beq.n	80017d0 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800173e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_ADC_Start+0xbc>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f023 0206 	bic.w	r2, r3, #6
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
 800175e:	e002      	b.n	8001766 <HAL_ADC_Start+0xc2>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_ADC_Start+0x144>)
 8001770:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800177a:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10f      	bne.n	80017a8 <HAL_ADC_Start+0x104>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11c      	bne.n	80017d0 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	e013      	b.n	80017d0 <HAL_ADC_Start+0x12c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <HAL_ADC_Start+0x148>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10e      	bne.n	80017d0 <HAL_ADC_Start+0x12c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017ce:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	2000001c 	.word	0x2000001c
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	40012300 	.word	0x40012300
 80017ec:	40012000 	.word	0x40012000

080017f0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Stop+0x16>
 8001802:	2302      	movs	r3, #2
 8001804:	e021      	b.n	800184a <HAL_ADC_Stop+0x5a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	2b00      	cmp	r3, #0
 8001870:	d012      	beq.n	8001898 <HAL_ADC_PollForConversion+0x42>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f043 0220 	orr.w	r2, r3, #32
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e05c      	b.n	8001952 <HAL_ADC_PollForConversion+0xfc>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001898:	f7ff fe96 	bl	80015c8 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800189e:	e01a      	b.n	80018d6 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018a6:	d016      	beq.n	80018d6 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_ADC_PollForConversion+0x68>
 80018ae:	f7ff fe8b 	bl	80015c8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20b      	bcs.n	80018d6 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f043 0204 	orr.w	r2, r3, #4
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e03d      	b.n	8001952 <HAL_ADC_PollForConversion+0xfc>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d1dd      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0212 	mvn.w	r2, #18
 80018ec:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d123      	bne.n	8001950 <HAL_ADC_PollForConversion+0xfa>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800190c:	2b00      	cmp	r3, #0
 800190e:	d11f      	bne.n	8001950 <HAL_ADC_PollForConversion+0xfa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_ADC_PollForConversion+0xd6>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001928:	2b00      	cmp	r3, #0
 800192a:	d111      	bne.n	8001950 <HAL_ADC_PollForConversion+0xfa>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <HAL_ADC_PollForConversion+0xfa>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x1c>
 800198c:	2302      	movs	r3, #2
 800198e:	e107      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x22c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b09      	cmp	r3, #9
 800199e:	d925      	bls.n	80019ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68d9      	ldr	r1, [r3, #12]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	3b1e      	subs	r3, #30
 80019b6:	2207      	movs	r2, #7
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43da      	mvns	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	400a      	ands	r2, r1
 80019c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68d9      	ldr	r1, [r3, #12]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	4603      	mov	r3, r0
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4403      	add	r3, r0
 80019de:	3b1e      	subs	r3, #30
 80019e0:	409a      	lsls	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	e022      	b.n	8001a32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6919      	ldr	r1, [r3, #16]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	2207      	movs	r2, #7
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4403      	add	r3, r0
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d824      	bhi.n	8001a84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b05      	subs	r3, #5
 8001a4c:	221f      	movs	r2, #31
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	400a      	ands	r2, r1
 8001a5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	3b05      	subs	r3, #5
 8001a76:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
 8001a82:	e04c      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d824      	bhi.n	8001ad6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b23      	subs	r3, #35	; 0x23
 8001a9e:	221f      	movs	r2, #31
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	400a      	ands	r2, r1
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b23      	subs	r3, #35	; 0x23
 8001ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad4:	e023      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b41      	subs	r3, #65	; 0x41
 8001ae8:	221f      	movs	r2, #31
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	400a      	ands	r2, r1
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b41      	subs	r3, #65	; 0x41
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <HAL_ADC_ConfigChannel+0x238>)
 8001b20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <HAL_ADC_ConfigChannel+0x23c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d109      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1cc>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	d105      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1cc>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_ADC_ConfigChannel+0x23c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d125      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x222>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_ADC_ConfigChannel+0x240>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d003      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0x1e8>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b11      	cmp	r3, #17
 8001b5a:	d11c      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x222>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_ADC_ConfigChannel+0x240>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d111      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_ADC_ConfigChannel+0x244>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <HAL_ADC_ConfigChannel+0x248>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	0c9a      	lsrs	r2, r3, #18
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40012300 	.word	0x40012300
 8001bb0:	40012000 	.word	0x40012000
 8001bb4:	10000012 	.word	0x10000012
 8001bb8:	2000001c 	.word	0x2000001c
 8001bbc:	431bde83 	.word	0x431bde83

08001bc0 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc8:	4b7e      	ldr	r3, [pc, #504]	; (8001dc4 <ADC_Init+0x204>)
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	021a      	lsls	r2, r3, #8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <ADC_Init+0x208>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d022      	beq.n	8001c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e00f      	b.n	8001cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0202 	bic.w	r2, r2, #2
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	005a      	lsls	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d026      	beq.n	8001d38 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cf8:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d08:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	1e5a      	subs	r2, r3, #1
 8001d10:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d14:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	fa02 f103 	lsl.w	r1, r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	e007      	b.n	8001d48 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	051a      	lsls	r2, r3, #20
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6899      	ldr	r1, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	025a      	lsls	r2, r3, #9
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	029a      	lsls	r2, r3, #10
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]
}
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40012300 	.word	0x40012300
 8001dc8:	0f000001 	.word	0x0f000001

08001dcc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <NVIC_EnableIRQ+0x30>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	da0b      	bge.n	8001e90 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <NVIC_SetPriority+0x4c>)
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	3b04      	subs	r3, #4
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8e:	e009      	b.n	8001ea4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <NVIC_SetPriority+0x50>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f44:	f7ff ff8e 	bl	8001e64 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff2d 	bl	8001dcc <NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff42 	bl	8001e14 <NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff35 	bl	8001e30 <NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d106      	bne.n	8002004 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002002:	e005      	b.n	8002010 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d004      	beq.n	800203e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00c      	b.n	8002058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2205      	movs	r2, #5
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0201 	bic.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002070:	4b93      	ldr	r3, [pc, #588]	; (80022c0 <HAL_DMA_IRQHandler+0x25c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a93      	ldr	r2, [pc, #588]	; (80022c4 <HAL_DMA_IRQHandler+0x260>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0a9b      	lsrs	r3, r3, #10
 800207c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2208      	movs	r2, #8
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01a      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0204 	bic.w	r2, r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2208      	movs	r2, #8
 80020be:	409a      	lsls	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	4a7c      	ldr	r2, [pc, #496]	; (80022c8 <HAL_DMA_IRQHandler+0x264>)
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d012      	beq.n	8002106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	4a75      	ldr	r2, [pc, #468]	; (80022c8 <HAL_DMA_IRQHandler+0x264>)
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	f043 0202 	orr.w	r2, r3, #2
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	4a70      	ldr	r2, [pc, #448]	; (80022cc <HAL_DMA_IRQHandler+0x268>)
 800210c:	409a      	lsls	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00b      	beq.n	800213c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	4a68      	ldr	r2, [pc, #416]	; (80022cc <HAL_DMA_IRQHandler+0x268>)
 800212a:	409a      	lsls	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	f043 0204 	orr.w	r2, r3, #4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2210      	movs	r2, #16
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d043      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d03c      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2210      	movs	r2, #16
 8002160:	409a      	lsls	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d018      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d024      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
 8002192:	e01f      	b.n	80021d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01b      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
 80021a4:	e016      	b.n	80021d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0208 	bic.w	r2, r2, #8
 80021c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2220      	movs	r2, #32
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8094 	beq.w	800230e <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 808c 	beq.w	800230e <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	2220      	movs	r2, #32
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b05      	cmp	r3, #5
 800220c:	d137      	bne.n	800227e <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0216 	bic.w	r2, r2, #22
 800221c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800222c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <HAL_DMA_IRQHandler+0x1da>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0208 	bic.w	r2, r2, #8
 800224c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	223f      	movs	r2, #63	; 0x3f
 8002254:	409a      	lsls	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8083 	beq.w	800237a <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
        }
        return;
 800227c:	e07d      	b.n	800237a <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d021      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d035      	beq.n	800230e <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
 80022aa:	e030      	b.n	800230e <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02c      	beq.n	800230e <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
 80022bc:	e027      	b.n	800230e <HAL_DMA_IRQHandler+0x2aa>
 80022be:	bf00      	nop
 80022c0:	2000001c 	.word	0x2000001c
 80022c4:	1b4e81b5 	.word	0x1b4e81b5
 80022c8:	00800001 	.word	0x00800001
 80022cc:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0210 	bic.w	r2, r2, #16
 80022ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	2b00      	cmp	r3, #0
 8002314:	d032      	beq.n	800237c <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d022      	beq.n	8002368 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2205      	movs	r2, #5
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	429a      	cmp	r2, r3
 8002344:	d307      	bcc.n	8002356 <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f2      	bne.n	800233a <HAL_DMA_IRQHandler+0x2d6>
 8002354:	e000      	b.n	8002358 <HAL_DMA_IRQHandler+0x2f4>
          break;
 8002356:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e000      	b.n	800237c <HAL_DMA_IRQHandler+0x318>
        return;
 800237a:	bf00      	nop
    }
  }
}
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop

08002384 <HAL_FLASH_Program>:
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_FLASH_Program+0xa0>)
 8002398:	7e1b      	ldrb	r3, [r3, #24]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_FLASH_Program+0x1e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e03b      	b.n	800241a <HAL_FLASH_Program+0x96>
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_FLASH_Program+0xa0>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023ac:	f000 f858 	bl	8002460 <FLASH_WaitForLastOperation>
 80023b0:	4603      	mov	r3, r0
 80023b2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d12b      	bne.n	8002412 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023c0:	783b      	ldrb	r3, [r7, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	68b8      	ldr	r0, [r7, #8]
 80023c6:	f000 f901 	bl	80025cc <FLASH_Program_Byte>
 80023ca:	e016      	b.n	80023fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d105      	bne.n	80023de <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023d2:	883b      	ldrh	r3, [r7, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	68b8      	ldr	r0, [r7, #8]
 80023d8:	f000 f8d4 	bl	8002584 <FLASH_Program_HalfWord>
 80023dc:	e00d      	b.n	80023fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d105      	bne.n	80023f0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f000 f8a9 	bl	8002540 <FLASH_Program_Word>
 80023ee:	e004      	b.n	80023fa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80023f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f000 f873 	bl	80024e0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023fe:	f000 f82f 	bl	8002460 <FLASH_WaitForLastOperation>
 8002402:	4603      	mov	r3, r0
 8002404:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_FLASH_Program+0xa4>)
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_FLASH_Program+0xa4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <HAL_FLASH_Program+0xa0>)
 8002414:	2200      	movs	r2, #0
 8002416:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002418:	7dfb      	ldrb	r3, [r7, #23]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200084ec 	.word	0x200084ec
 8002428:	40023c00 	.word	0x40023c00

0800242c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_FLASH_Unlock+0x28>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	da07      	bge.n	8002448 <HAL_FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_FLASH_Unlock+0x28>)
 800243a:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_FLASH_Unlock+0x2c>)
 800243c:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_FLASH_Unlock+0x28>)
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <HAL_FLASH_Unlock+0x30>)
 8002442:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_FLASH_Unlock+0x1e>
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40023c00 	.word	0x40023c00
 8002458:	45670123 	.word	0x45670123
 800245c:	cdef89ab 	.word	0xcdef89ab

08002460 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <FLASH_WaitForLastOperation+0x78>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002472:	f7ff f8a9 	bl	80015c8 <HAL_GetTick>
 8002476:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002478:	e010      	b.n	800249c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002480:	d00c      	beq.n	800249c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <FLASH_WaitForLastOperation+0x38>
 8002488:	f7ff f89e 	bl	80015c8 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d201      	bcs.n	800249c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e019      	b.n	80024d0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <FLASH_WaitForLastOperation+0x7c>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e8      	bne.n	800247a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <FLASH_WaitForLastOperation+0x7c>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <FLASH_WaitForLastOperation+0x7c>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <FLASH_WaitForLastOperation+0x7c>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80024c6:	f000 f8a3 	bl	8002610 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
  
}  
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200084ec 	.word	0x200084ec
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024ec:	4b13      	ldr	r3, [pc, #76]	; (800253c <FLASH_Program_DoubleWord+0x5c>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <FLASH_Program_DoubleWord+0x5c>)
 80024f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <FLASH_Program_DoubleWord+0x5c>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4a0f      	ldr	r2, [pc, #60]	; (800253c <FLASH_Program_DoubleWord+0x5c>)
 80024fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002502:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <FLASH_Program_DoubleWord+0x5c>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4a0c      	ldr	r2, [pc, #48]	; (800253c <FLASH_Program_DoubleWord+0x5c>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	000a      	movs	r2, r1
 8002524:	2300      	movs	r3, #0
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	3104      	adds	r1, #4
 800252a:	4613      	mov	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023c00 	.word	0x40023c00

08002540 <FLASH_Program_Word>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <FLASH_Program_Word+0x40>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <FLASH_Program_Word+0x40>)
 8002550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002554:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <FLASH_Program_Word+0x40>)
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <FLASH_Program_Word+0x40>)
 800255c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002560:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <FLASH_Program_Word+0x40>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	4a06      	ldr	r2, [pc, #24]	; (8002580 <FLASH_Program_Word+0x40>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40023c00 	.word	0x40023c00

08002584 <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <FLASH_Program_HalfWord+0x44>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <FLASH_Program_HalfWord+0x44>)
 8002596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <FLASH_Program_HalfWord+0x44>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <FLASH_Program_HalfWord+0x44>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <FLASH_Program_HalfWord+0x44>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <FLASH_Program_HalfWord+0x44>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	801a      	strh	r2, [r3, #0]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023c00 	.word	0x40023c00

080025cc <FLASH_Program_Byte>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <FLASH_Program_Byte+0x40>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	4a0b      	ldr	r2, [pc, #44]	; (800260c <FLASH_Program_Byte+0x40>)
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <FLASH_Program_Byte+0x40>)
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <FLASH_Program_Byte+0x40>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <FLASH_Program_Byte+0x40>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <FLASH_Program_Byte+0x40>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	701a      	strb	r2, [r3, #0]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00

08002610 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
void FLASH_SetErrorCode(void)
{ 
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002614:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f043 0310 	orr.w	r3, r3, #16
 8002628:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 800262a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 800262e:	2210      	movs	r2, #16
 8002630:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002632:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f043 0308 	orr.w	r3, r3, #8
 8002646:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 8002648:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 800264c:	2220      	movs	r2, #32
 800264e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002650:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 8002666:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800266e:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	4a15      	ldr	r2, [pc, #84]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 8002684:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 80026a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 80026a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026aa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f043 0320 	orr.w	r3, r3, #32
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <FLASH_SetErrorCode+0xc8>)
 80026c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <FLASH_SetErrorCode+0xc4>)
 80026c6:	2202      	movs	r2, #2
 80026c8:	60da      	str	r2, [r3, #12]
  }
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40023c00 	.word	0x40023c00
 80026d8:	200084ec 	.word	0x200084ec

080026dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_FLASHEx_Erase+0xdc>)
 80026f0:	7e1b      	ldrb	r3, [r3, #24]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_FLASHEx_Erase+0x1e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e05a      	b.n	80027b0 <HAL_FLASHEx_Erase+0xd4>
 80026fa:	4b2f      	ldr	r3, [pc, #188]	; (80027b8 <HAL_FLASHEx_Erase+0xdc>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002700:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002704:	f7ff feac 	bl	8002460 <FLASH_WaitForLastOperation>
 8002708:	4603      	mov	r3, r0
 800270a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d14a      	bne.n	80027a8 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002718:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d117      	bne.n	8002752 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 f846 	bl	80027c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002738:	f7ff fe92 	bl	8002460 <FLASH_WaitForLastOperation>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_FLASHEx_Erase+0xe0>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_FLASHEx_Erase+0xe0>)
 8002746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800274a:	f023 0304 	bic.w	r3, r3, #4
 800274e:	6113      	str	r3, [r2, #16]
 8002750:	e028      	b.n	80027a4 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	e01c      	b.n	8002794 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	4619      	mov	r1, r3
 8002762:	68b8      	ldr	r0, [r7, #8]
 8002764:	f000 f866 	bl	8002834 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002768:	f24c 3050 	movw	r0, #50000	; 0xc350
 800276c:	f7ff fe78 	bl	8002460 <FLASH_WaitForLastOperation>
 8002770:	4603      	mov	r3, r0
 8002772:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_FLASHEx_Erase+0xe0>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_FLASHEx_Erase+0xe0>)
 800277a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800277e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	601a      	str	r2, [r3, #0]
          break;
 800278c:	e00a      	b.n	80027a4 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3301      	adds	r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4413      	add	r3, r2
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d3da      	bcc.n	800275a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80027a4:	f000 f89e 	bl	80028e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_FLASHEx_Erase+0xdc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	761a      	strb	r2, [r3, #24]

  return status;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200084ec 	.word	0x200084ec
 80027bc:	40023c00 	.word	0x40023c00

080027c0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <FLASH_MassErase+0x70>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4a17      	ldr	r2, [pc, #92]	; (8002830 <FLASH_MassErase+0x70>)
 80027d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d6:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d108      	bne.n	80027f0 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <FLASH_MassErase+0x70>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4a13      	ldr	r2, [pc, #76]	; (8002830 <FLASH_MassErase+0x70>)
 80027e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6113      	str	r3, [r2, #16]
 80027ee:	e00f      	b.n	8002810 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d106      	bne.n	8002804 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <FLASH_MassErase+0x70>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <FLASH_MassErase+0x70>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6113      	str	r3, [r2, #16]
 8002802:	e005      	b.n	8002810 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <FLASH_MassErase+0x70>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4a09      	ldr	r2, [pc, #36]	; (8002830 <FLASH_MassErase+0x70>)
 800280a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <FLASH_MassErase+0x70>)
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	4313      	orrs	r3, r2
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <FLASH_MassErase+0x70>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6113      	str	r3, [r2, #16]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00

08002834 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	e010      	b.n	8002872 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d103      	bne.n	800285e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e009      	b.n	8002872 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d103      	bne.n	800286c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e002      	b.n	8002872 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800286c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002870:	617b      	str	r3, [r7, #20]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0b      	cmp	r3, #11
 8002876:	d902      	bls.n	800287e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 8002884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002888:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	4914      	ldr	r1, [pc, #80]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 800289c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028a0:	6113      	str	r3, [r2, #16]
 80028a2:	23f8      	movs	r3, #248	; 0xf8
 80028a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80028ae:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	f043 0202 	orr.w	r2, r3, #2
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	4907      	ldr	r1, [pc, #28]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <FLASH_Erase_Sector+0xac>)
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d2:	6113      	str	r3, [r2, #16]
}
 80028d4:	bf00      	nop
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <FLASH_FlushCaches+0x88>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d017      	beq.n	8002924 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <FLASH_FlushCaches+0x88>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	; (800296c <FLASH_FlushCaches+0x88>)
 80028fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028fe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002900:	4b1a      	ldr	r3, [pc, #104]	; (800296c <FLASH_FlushCaches+0x88>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <FLASH_FlushCaches+0x88>)
 8002906:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b17      	ldr	r3, [pc, #92]	; (800296c <FLASH_FlushCaches+0x88>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a16      	ldr	r2, [pc, #88]	; (800296c <FLASH_FlushCaches+0x88>)
 8002912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002916:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <FLASH_FlushCaches+0x88>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a13      	ldr	r2, [pc, #76]	; (800296c <FLASH_FlushCaches+0x88>)
 800291e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002922:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <FLASH_FlushCaches+0x88>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d017      	beq.n	8002960 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <FLASH_FlushCaches+0x88>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <FLASH_FlushCaches+0x88>)
 8002936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800293a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <FLASH_FlushCaches+0x88>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0a      	ldr	r2, [pc, #40]	; (800296c <FLASH_FlushCaches+0x88>)
 8002942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <FLASH_FlushCaches+0x88>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a07      	ldr	r2, [pc, #28]	; (800296c <FLASH_FlushCaches+0x88>)
 800294e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002952:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <FLASH_FlushCaches+0x88>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <FLASH_FlushCaches+0x88>)
 800295a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800295e:	6013      	str	r3, [r2, #0]
  }
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40023c00 	.word	0x40023c00

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e177      	b.n	8002c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f040 8166 	bne.w	8002c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x4a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d123      	bne.n	8002a02 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	69b9      	ldr	r1, [r7, #24]
 80029fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d00b      	beq.n	8002a56 <HAL_GPIO_Init+0xe6>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a4a:	2b11      	cmp	r3, #17
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b12      	cmp	r3, #18
 8002a54:	d130      	bne.n	8002ab8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 0201 	and.w	r2, r3, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80c0 	beq.w	8002c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a65      	ldr	r2, [pc, #404]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b12:	4a61      	ldr	r2, [pc, #388]	; (8002c98 <HAL_GPIO_Init+0x328>)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_GPIO_Init+0x32c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d037      	beq.n	8002bae <HAL_GPIO_Init+0x23e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a57      	ldr	r2, [pc, #348]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d031      	beq.n	8002baa <HAL_GPIO_Init+0x23a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02b      	beq.n	8002ba6 <HAL_GPIO_Init+0x236>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <HAL_GPIO_Init+0x338>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d025      	beq.n	8002ba2 <HAL_GPIO_Init+0x232>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a54      	ldr	r2, [pc, #336]	; (8002cac <HAL_GPIO_Init+0x33c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01f      	beq.n	8002b9e <HAL_GPIO_Init+0x22e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a53      	ldr	r2, [pc, #332]	; (8002cb0 <HAL_GPIO_Init+0x340>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d019      	beq.n	8002b9a <HAL_GPIO_Init+0x22a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_GPIO_Init+0x344>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0x226>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a51      	ldr	r2, [pc, #324]	; (8002cb8 <HAL_GPIO_Init+0x348>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00d      	beq.n	8002b92 <HAL_GPIO_Init+0x222>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a50      	ldr	r2, [pc, #320]	; (8002cbc <HAL_GPIO_Init+0x34c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x21e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4f      	ldr	r2, [pc, #316]	; (8002cc0 <HAL_GPIO_Init+0x350>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_GPIO_Init+0x21a>
 8002b86:	2309      	movs	r3, #9
 8002b88:	e012      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b8a:	230a      	movs	r3, #10
 8002b8c:	e010      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	e00e      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b92:	2307      	movs	r3, #7
 8002b94:	e00c      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b96:	2306      	movs	r3, #6
 8002b98:	e00a      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	e008      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc0:	4935      	ldr	r1, [pc, #212]	; (8002c98 <HAL_GPIO_Init+0x328>)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf2:	4a34      	ldr	r2, [pc, #208]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bf8:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c22:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c46:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	f67f ae84 	bls.w	800298c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40021400 	.word	0x40021400
 8002cb4:	40021800 	.word	0x40021800
 8002cb8:	40021c00 	.word	0x40021c00
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40022400 	.word	0x40022400
 8002cc4:	40013c00 	.word	0x40013c00

08002cc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e0d9      	b.n	8002e98 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	f040 80c9 	bne.w	8002e92 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2103      	movs	r1, #3
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	08d2      	lsrs	r2, r2, #3
 8002d36:	4019      	ands	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3208      	adds	r2, #8
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2103      	movs	r1, #3
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	401a      	ands	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	401a      	ands	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2103      	movs	r1, #3
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_GPIO_DeInit+0x1e8>)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a43      	ldr	r2, [pc, #268]	; (8002eb4 <HAL_GPIO_DeInit+0x1ec>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d037      	beq.n	8002e1a <HAL_GPIO_DeInit+0x152>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a42      	ldr	r2, [pc, #264]	; (8002eb8 <HAL_GPIO_DeInit+0x1f0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d031      	beq.n	8002e16 <HAL_GPIO_DeInit+0x14e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a41      	ldr	r2, [pc, #260]	; (8002ebc <HAL_GPIO_DeInit+0x1f4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d02b      	beq.n	8002e12 <HAL_GPIO_DeInit+0x14a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a40      	ldr	r2, [pc, #256]	; (8002ec0 <HAL_GPIO_DeInit+0x1f8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d025      	beq.n	8002e0e <HAL_GPIO_DeInit+0x146>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a3f      	ldr	r2, [pc, #252]	; (8002ec4 <HAL_GPIO_DeInit+0x1fc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d01f      	beq.n	8002e0a <HAL_GPIO_DeInit+0x142>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a3e      	ldr	r2, [pc, #248]	; (8002ec8 <HAL_GPIO_DeInit+0x200>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d019      	beq.n	8002e06 <HAL_GPIO_DeInit+0x13e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a3d      	ldr	r2, [pc, #244]	; (8002ecc <HAL_GPIO_DeInit+0x204>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_GPIO_DeInit+0x13a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a3c      	ldr	r2, [pc, #240]	; (8002ed0 <HAL_GPIO_DeInit+0x208>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00d      	beq.n	8002dfe <HAL_GPIO_DeInit+0x136>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a3b      	ldr	r2, [pc, #236]	; (8002ed4 <HAL_GPIO_DeInit+0x20c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <HAL_GPIO_DeInit+0x132>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a3a      	ldr	r2, [pc, #232]	; (8002ed8 <HAL_GPIO_DeInit+0x210>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_GPIO_DeInit+0x12e>
 8002df2:	2309      	movs	r3, #9
 8002df4:	e012      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002df6:	230a      	movs	r3, #10
 8002df8:	e010      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	e00e      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002dfe:	2307      	movs	r3, #7
 8002e00:	e00c      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002e02:	2306      	movs	r3, #6
 8002e04:	e00a      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002e06:	2305      	movs	r3, #5
 8002e08:	e008      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e004      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e002      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_GPIO_DeInit+0x154>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	f002 0203 	and.w	r2, r2, #3
 8002e22:	0092      	lsls	r2, r2, #2
 8002e24:	4093      	lsls	r3, r2
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d132      	bne.n	8002e92 <HAL_GPIO_DeInit+0x1ca>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <HAL_GPIO_DeInit+0x1e8>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	4818      	ldr	r0, [pc, #96]	; (8002eb0 <HAL_GPIO_DeInit+0x1e8>)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	400a      	ands	r2, r1
 8002e54:	3302      	adds	r3, #2
 8002e56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_GPIO_DeInit+0x214>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	491e      	ldr	r1, [pc, #120]	; (8002edc <HAL_GPIO_DeInit+0x214>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e68:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <HAL_GPIO_DeInit+0x214>)
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	491a      	ldr	r1, [pc, #104]	; (8002edc <HAL_GPIO_DeInit+0x214>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e76:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_GPIO_DeInit+0x214>)
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	4917      	ldr	r1, [pc, #92]	; (8002edc <HAL_GPIO_DeInit+0x214>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_GPIO_DeInit+0x214>)
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	4913      	ldr	r1, [pc, #76]	; (8002edc <HAL_GPIO_DeInit+0x214>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3301      	adds	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	f67f af22 	bls.w	8002ce4 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40021400 	.word	0x40021400
 8002ecc:	40021800 	.word	0x40021800
 8002ed0:	40021c00 	.word	0x40021c00
 8002ed4:	40022000 	.word	0x40022000
 8002ed8:	40022400 	.word	0x40022400
 8002edc:	40013c00 	.word	0x40013c00

08002ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	887b      	ldrh	r3, [r7, #2]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e001      	b.n	8002f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0c9      	b.n	80030f2 <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f00d f814 	bl	800ffa0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f90:	f001 ffc6 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8002f94:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_I2C_Init+0x1b8>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0c9b      	lsrs	r3, r3, #18
 8002fa0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4a54      	ldr	r2, [pc, #336]	; (8003100 <HAL_I2C_Init+0x1bc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d802      	bhi.n	8002fba <HAL_I2C_Init+0x76>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	e009      	b.n	8002fce <HAL_I2C_Init+0x8a>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	4a4f      	ldr	r2, [pc, #316]	; (8003104 <HAL_I2C_Init+0x1c0>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	099b      	lsrs	r3, r3, #6
 8002fcc:	3301      	adds	r3, #1
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a49      	ldr	r2, [pc, #292]	; (8003100 <HAL_I2C_Init+0x1bc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d813      	bhi.n	8003006 <HAL_I2C_Init+0xc2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fea:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <HAL_I2C_Init+0xbe>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	e045      	b.n	800308e <HAL_I2C_Init+0x14a>
 8003002:	2304      	movs	r3, #4
 8003004:	e043      	b.n	800308e <HAL_I2C_Init+0x14a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10f      	bne.n	800302e <HAL_I2C_Init+0xea>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e010      	b.n	8003050 <HAL_I2C_Init+0x10c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	009a      	lsls	r2, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_I2C_Init+0x114>
 8003054:	2301      	movs	r3, #1
 8003056:	e01a      	b.n	800308e <HAL_I2C_Init+0x14a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <HAL_I2C_Init+0x132>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003074:	e00b      	b.n	800308e <HAL_I2C_Init+0x14a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009a      	lsls	r2, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6919      	ldr	r1, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6959      	ldr	r1, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	431bde83 	.word	0x431bde83
 8003100:	000186a0 	.word	0x000186a0
 8003104:	10624dd3 	.word	0x10624dd3

08003108 <HAL_I2C_DeInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e021      	b.n	800315e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2224      	movs	r2, #36	; 0x24
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0201 	bic.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f00c ffb6 	bl	80100a4 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	460b      	mov	r3, r1
 8003176:	817b      	strh	r3, [r7, #10]
 8003178:	4613      	mov	r3, r2
 800317a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003180:	f7fe fa22 	bl	80015c8 <HAL_GetTick>
 8003184:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b20      	cmp	r3, #32
 8003190:	f040 80ee 	bne.w	8003370 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2319      	movs	r3, #25
 800319a:	2201      	movs	r2, #1
 800319c:	4977      	ldr	r1, [pc, #476]	; (800337c <HAL_I2C_Master_Transmit+0x214>)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f001 f91a 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0e1      	b.n	8003372 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_I2C_Master_Transmit+0x54>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e0da      	b.n	8003372 <HAL_I2C_Master_Transmit+0x20a>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d007      	beq.n	80031e2 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2221      	movs	r2, #33	; 0x21
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2210      	movs	r2, #16
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	893a      	ldrh	r2, [r7, #8]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a5a      	ldr	r2, [pc, #360]	; (8003380 <HAL_I2C_Master_Transmit+0x218>)
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003224:	8979      	ldrh	r1, [r7, #10]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fe14 	bl	8003e58 <I2C_MasterRequestWrite>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00f      	beq.n	8003256 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b04      	cmp	r3, #4
 800323c:	d105      	bne.n	800324a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e093      	b.n	8003372 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e08d      	b.n	8003372 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 800326c:	e066      	b.n	800333c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	6a39      	ldr	r1, [r7, #32]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f001 f96f 	bl	8004556 <I2C_WaitOnTXEFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00f      	beq.n	800329e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b04      	cmp	r3, #4
 8003284:	d109      	bne.n	800329a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06b      	b.n	8003372 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e069      	b.n	8003372 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c59      	adds	r1, r3, #1
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	6251      	str	r1, [r2, #36]	; 0x24
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d119      	bne.n	800330c <HAL_I2C_Master_Transmit+0x1a4>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	1c59      	adds	r1, r3, #1
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	6251      	str	r1, [r2, #36]	; 0x24
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	6a39      	ldr	r1, [r7, #32]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f001 f95d 	bl	80045d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00f      	beq.n	800333c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	2b04      	cmp	r3, #4
 8003322:	d109      	bne.n	8003338 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e01c      	b.n	8003372 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e01a      	b.n	8003372 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d194      	bne.n	800326e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	e000      	b.n	8003372 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
  }
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	00100002 	.word	0x00100002
 8003380:	ffff0000 	.word	0xffff0000

08003384 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	; 0x30
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
 8003394:	4613      	mov	r3, r2
 8003396:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800339c:	f7fe f914 	bl	80015c8 <HAL_GetTick>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	f040 8215 	bne.w	80037da <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2319      	movs	r3, #25
 80033b6:	2201      	movs	r2, #1
 80033b8:	4985      	ldr	r1, [pc, #532]	; (80035d0 <HAL_I2C_Master_Receive+0x24c>)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f001 f80c 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	e208      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2C_Master_Receive+0x54>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e201      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d007      	beq.n	80033fe <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2222      	movs	r2, #34	; 0x22
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2210      	movs	r2, #16
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	893a      	ldrh	r2, [r7, #8]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a68      	ldr	r2, [pc, #416]	; (80035d4 <HAL_I2C_Master_Receive+0x250>)
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003440:	8979      	ldrh	r1, [r7, #10]
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fd88 	bl	8003f5c <I2C_MasterRequestRead>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00f      	beq.n	8003472 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b04      	cmp	r3, #4
 8003458:	d105      	bne.n	8003466 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1ba      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1b4      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	2b00      	cmp	r3, #0
 8003478:	d113      	bne.n	80034a2 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	623b      	str	r3, [r7, #32]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	623b      	str	r3, [r7, #32]
 800348e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e188      	b.n	80037b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d11b      	bne.n	80034e2 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e168      	b.n	80037b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d11b      	bne.n	8003522 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003508:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	e148      	b.n	80037b4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8003548:	e134      	b.n	80037b4 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	2b03      	cmp	r3, #3
 8003550:	f200 80eb 	bhi.w	800372a <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	2b01      	cmp	r3, #1
 800355a:	d127      	bne.n	80035ac <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f001 f872 	bl	800464a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	2b20      	cmp	r3, #32
 8003572:	d101      	bne.n	8003578 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e131      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e12f      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6918      	ldr	r0, [r3, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	1c59      	adds	r1, r3, #1
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	6251      	str	r1, [r2, #36]	; 0x24
 800358c:	b2c2      	uxtb	r2, r0
 800358e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035aa:	e103      	b.n	80037b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d14a      	bne.n	800364a <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	2200      	movs	r2, #0
 80035bc:	4906      	ldr	r1, [pc, #24]	; (80035d8 <HAL_I2C_Master_Receive+0x254>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 ff0a 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e106      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
 80035ce:	bf00      	nop
 80035d0:	00100002 	.word	0x00100002
 80035d4:	ffff0000 	.word	0xffff0000
 80035d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6918      	ldr	r0, [r3, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c59      	adds	r1, r3, #1
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	6251      	str	r1, [r2, #36]	; 0x24
 80035fc:	b2c2      	uxtb	r2, r0
 80035fe:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6918      	ldr	r0, [r3, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	1c59      	adds	r1, r3, #1
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	6251      	str	r1, [r2, #36]	; 0x24
 800362a:	b2c2      	uxtb	r2, r0
 800362c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003648:	e0b4      	b.n	80037b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	2200      	movs	r2, #0
 8003652:	4964      	ldr	r1, [pc, #400]	; (80037e4 <HAL_I2C_Master_Receive+0x460>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 febf 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0bb      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6918      	ldr	r0, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	1c59      	adds	r1, r3, #1
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	6251      	str	r1, [r2, #36]	; 0x24
 8003684:	b2c2      	uxtb	r2, r0
 8003686:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	2200      	movs	r2, #0
 80036aa:	494e      	ldr	r1, [pc, #312]	; (80037e4 <HAL_I2C_Master_Receive+0x460>)
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fe93 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e08f      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6918      	ldr	r0, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c59      	adds	r1, r3, #1
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	6251      	str	r1, [r2, #36]	; 0x24
 80036dc:	b2c2      	uxtb	r2, r0
 80036de:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6918      	ldr	r0, [r3, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	6251      	str	r1, [r2, #36]	; 0x24
 800370a:	b2c2      	uxtb	r2, r0
 800370c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003728:	e044      	b.n	80037b4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 ff8b 	bl	800464a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b20      	cmp	r3, #32
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e04a      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e048      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6918      	ldr	r0, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c59      	adds	r1, r3, #1
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	6251      	str	r1, [r2, #36]	; 0x24
 800375a:	b2c2      	uxtb	r2, r0
 800375c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b04      	cmp	r3, #4
 8003784:	d116      	bne.n	80037b4 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6918      	ldr	r0, [r3, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	1c59      	adds	r1, r3, #1
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	6251      	str	r1, [r2, #36]	; 0x24
 8003796:	b2c2      	uxtb	r2, r0
 8003798:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f aec6 	bne.w	800354a <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00010004 	.word	0x00010004

080037e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	4608      	mov	r0, r1
 80037f2:	4611      	mov	r1, r2
 80037f4:	461a      	mov	r2, r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	817b      	strh	r3, [r7, #10]
 80037fa:	460b      	mov	r3, r1
 80037fc:	813b      	strh	r3, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  //tickstart = HAL_GetTick();
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	f040 80ea 	bne.w	80039e4 <HAL_I2C_Mem_Write+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_I2C_Mem_Write+0x36>
 800381a:	2302      	movs	r3, #2
 800381c:	e0e3      	b.n	80039e6 <HAL_I2C_Mem_Write+0x1fe>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003826:	f7fd fecf 	bl	80015c8 <HAL_GetTick>
 800382a:	6178      	str	r0, [r7, #20]
    
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2319      	movs	r3, #25
 8003832:	2201      	movs	r2, #1
 8003834:	496e      	ldr	r1, [pc, #440]	; (80039f0 <HAL_I2C_Mem_Write+0x208>)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fdce 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8003842:	2302      	movs	r3, #2
 8003844:	e0cf      	b.n	80039e6 <HAL_I2C_Mem_Write+0x1fe>

    /* Process Locked */
    //__HAL_LOCK(hi2c);
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d007      	beq.n	8003864 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003872:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2221      	movs	r2, #33	; 0x21
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2240      	movs	r2, #64	; 0x40
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a56      	ldr	r2, [pc, #344]	; (80039f4 <HAL_I2C_Mem_Write+0x20c>)
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a6:	88f8      	ldrh	r0, [r7, #6]
 80038a8:	893a      	ldrh	r2, [r7, #8]
 80038aa:	8979      	ldrh	r1, [r7, #10]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	4603      	mov	r3, r0
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fc18 	bl	80040ec <I2C_RequestMemoryWrite>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d05e      	beq.n	8003980 <HAL_I2C_Mem_Write+0x198>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d105      	bne.n	80038d6 <HAL_I2C_Mem_Write+0xee>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e087      	b.n	80039e6 <HAL_I2C_Mem_Write+0x1fe>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e081      	b.n	80039e6 <HAL_I2C_Mem_Write+0x1fe>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fe35 	bl	8004556 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00f      	beq.n	8003912 <HAL_I2C_Mem_Write+0x12a>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d109      	bne.n	800390e <HAL_I2C_Mem_Write+0x126>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003908:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06b      	b.n	80039e6 <HAL_I2C_Mem_Write+0x1fe>
        }
        else
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e069      	b.n	80039e6 <HAL_I2C_Mem_Write+0x1fe>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c59      	adds	r1, r3, #1
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	6251      	str	r1, [r2, #36]	; 0x24
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d119      	bne.n	8003980 <HAL_I2C_Mem_Write+0x198>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_I2C_Mem_Write+0x198>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	1c59      	adds	r1, r3, #1
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	6251      	str	r1, [r2, #36]	; 0x24
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1ac      	bne.n	80038e2 <HAL_I2C_Mem_Write+0xfa>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fe1f 	bl	80045d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00f      	beq.n	80039b8 <HAL_I2C_Mem_Write+0x1d0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2b04      	cmp	r3, #4
 800399e:	d109      	bne.n	80039b4 <HAL_I2C_Mem_Write+0x1cc>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e018      	b.n	80039e6 <HAL_I2C_Mem_Write+0x1fe>
      }
      else
      {
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e016      	b.n	80039e6 <HAL_I2C_Mem_Write+0x1fe>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_I2C_Mem_Write+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	00100002 	.word	0x00100002
 80039f4:	ffff0000 	.word	0xffff0000

080039f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	4608      	mov	r0, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	817b      	strh	r3, [r7, #10]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	813b      	strh	r3, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  //tickstart = HAL_GetTick();
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	f040 8215 	bne.w	8003e4a <HAL_I2C_Mem_Read+0x452>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x36>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e20e      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a36:	f7fd fdc7 	bl	80015c8 <HAL_GetTick>
 8003a3a:	6278      	str	r0, [r7, #36]	; 0x24
    
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2319      	movs	r3, #25
 8003a42:	2201      	movs	r2, #1
 8003a44:	497e      	ldr	r1, [pc, #504]	; (8003c40 <HAL_I2C_Mem_Read+0x248>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fcc6 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
 8003a54:	e1fa      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>

    /* Process Locked */
    //__HAL_LOCK(hi2c);
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d007      	beq.n	8003a74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2222      	movs	r2, #34	; 0x22
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a66      	ldr	r2, [pc, #408]	; (8003c44 <HAL_I2C_Mem_Read+0x24c>)
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ab6:	88f8      	ldrh	r0, [r7, #6]
 8003ab8:	893a      	ldrh	r2, [r7, #8]
 8003aba:	8979      	ldrh	r1, [r7, #10]
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	9301      	str	r3, [sp, #4]
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fba4 	bl	8004214 <I2C_RequestMemoryRead>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00f      	beq.n	8003af2 <HAL_I2C_Mem_Read+0xfa>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d105      	bne.n	8003ae6 <HAL_I2C_Mem_Read+0xee>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1b2      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1ac      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
      }
    }

    if(hi2c->XferSize == 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d113      	bne.n	8003b22 <HAL_I2C_Mem_Read+0x12a>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afa:	2300      	movs	r3, #0
 8003afc:	623b      	str	r3, [r7, #32]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	623b      	str	r3, [r7, #32]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e180      	b.n	8003e24 <HAL_I2C_Mem_Read+0x42c>
    }
    else if(hi2c->XferSize == 1U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d11b      	bne.n	8003b62 <HAL_I2C_Mem_Read+0x16a>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e160      	b.n	8003e24 <HAL_I2C_Mem_Read+0x42c>
    }
    else if(hi2c->XferSize == 2U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d11b      	bne.n	8003ba2 <HAL_I2C_Mem_Read+0x1aa>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	e140      	b.n	8003e24 <HAL_I2C_Mem_Read+0x42c>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8003bb8:	e134      	b.n	8003e24 <HAL_I2C_Mem_Read+0x42c>
    {
      if(hi2c->XferSize <= 3U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	f200 80eb 	bhi.w	8003d9a <HAL_I2C_Mem_Read+0x3a2>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d127      	bne.n	8003c1c <HAL_I2C_Mem_Read+0x224>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fd3a 	bl	800464a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_I2C_Mem_Read+0x1f4>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d101      	bne.n	8003be8 <HAL_I2C_Mem_Read+0x1f0>
            {
              return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e131      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
            }
            else
            {
              return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e12f      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6918      	ldr	r0, [r3, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	6251      	str	r1, [r2, #36]	; 0x24
 8003bfc:	b2c2      	uxtb	r2, r0
 8003bfe:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c1a:	e103      	b.n	8003e24 <HAL_I2C_Mem_Read+0x42c>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d14a      	bne.n	8003cba <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	4906      	ldr	r1, [pc, #24]	; (8003c48 <HAL_I2C_Mem_Read+0x250>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fbd2 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_I2C_Mem_Read+0x254>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e106      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
 8003c3e:	bf00      	nop
 8003c40:	00100002 	.word	0x00100002
 8003c44:	ffff0000 	.word	0xffff0000
 8003c48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6918      	ldr	r0, [r3, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	6251      	str	r1, [r2, #36]	; 0x24
 8003c6c:	b2c2      	uxtb	r2, r0
 8003c6e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6918      	ldr	r0, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	1c59      	adds	r1, r3, #1
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	6251      	str	r1, [r2, #36]	; 0x24
 8003c9a:	b2c2      	uxtb	r2, r0
 8003c9c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cb8:	e0b4      	b.n	8003e24 <HAL_I2C_Mem_Read+0x42c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4964      	ldr	r1, [pc, #400]	; (8003e54 <HAL_I2C_Mem_Read+0x45c>)
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fb87 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e0bb      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6918      	ldr	r0, [r3, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	1c59      	adds	r1, r3, #1
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	6251      	str	r1, [r2, #36]	; 0x24
 8003cf4:	b2c2      	uxtb	r2, r0
 8003cf6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2200      	movs	r2, #0
 8003d1a:	494e      	ldr	r1, [pc, #312]	; (8003e54 <HAL_I2C_Mem_Read+0x45c>)
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fb5b 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e08f      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6918      	ldr	r0, [r3, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	1c59      	adds	r1, r3, #1
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	6251      	str	r1, [r2, #36]	; 0x24
 8003d4c:	b2c2      	uxtb	r2, r0
 8003d4e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6918      	ldr	r0, [r3, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	1c59      	adds	r1, r3, #1
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	6251      	str	r1, [r2, #36]	; 0x24
 8003d7a:	b2c2      	uxtb	r2, r0
 8003d7c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d98:	e044      	b.n	8003e24 <HAL_I2C_Mem_Read+0x42c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fc53 	bl	800464a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <HAL_I2C_Mem_Read+0x3c2>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d101      	bne.n	8003db6 <HAL_I2C_Mem_Read+0x3be>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e04a      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
          }
          else
          {
            return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e048      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6918      	ldr	r0, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	6251      	str	r1, [r2, #36]	; 0x24
 8003dca:	b2c2      	uxtb	r2, r0
 8003dcc:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d116      	bne.n	8003e24 <HAL_I2C_Mem_Read+0x42c>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6918      	ldr	r0, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	1c59      	adds	r1, r3, #1
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	6251      	str	r1, [r2, #36]	; 0x24
 8003e06:	b2c2      	uxtb	r2, r0
 8003e08:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f47f aec6 	bne.w	8003bba <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_I2C_Mem_Read+0x454>
  }
  else
  {
    return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3728      	adds	r7, #40	; 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	00010004 	.word	0x00010004

08003e58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	460b      	mov	r3, r1
 8003e66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d006      	beq.n	8003e82 <I2C_MasterRequestWrite+0x2a>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d003      	beq.n	8003e82 <I2C_MasterRequestWrite+0x2a>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e80:	d108      	bne.n	8003e94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e00b      	b.n	8003eac <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	2b12      	cmp	r3, #18
 8003e9a:	d107      	bne.n	8003eac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eaa:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fa8d 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e041      	b.n	8003f4c <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed0:	d108      	bne.n	8003ee4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed2:	897b      	ldrh	r3, [r7, #10]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee0:	611a      	str	r2, [r3, #16]
 8003ee2:	e021      	b.n	8003f28 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	11db      	asrs	r3, r3, #7
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f063 030f 	orn	r3, r3, #15
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4914      	ldr	r1, [pc, #80]	; (8003f54 <I2C_MasterRequestWrite+0xfc>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fab9 	bl	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d101      	bne.n	8003f1a <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e018      	b.n	8003f4c <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e016      	b.n	8003f4c <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f1e:	897b      	ldrh	r3, [r7, #10]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	490a      	ldr	r1, [pc, #40]	; (8003f58 <I2C_MasterRequestWrite+0x100>)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 faa3 	bl	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d101      	bne.n	8003f46 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e002      	b.n	8003f4c <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e000      	b.n	8003f4c <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	00010008 	.word	0x00010008
 8003f58:	00010002 	.word	0x00010002

08003f5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d006      	beq.n	8003f96 <I2C_MasterRequestRead+0x3a>
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d003      	beq.n	8003f96 <I2C_MasterRequestRead+0x3a>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f94:	d108      	bne.n	8003fa8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e00b      	b.n	8003fc0 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	2b11      	cmp	r3, #17
 8003fae:	d107      	bne.n	8003fc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbe:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fa03 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e07f      	b.n	80040dc <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe4:	d108      	bne.n	8003ff8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	e05f      	b.n	80040b8 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff8:	897b      	ldrh	r3, [r7, #10]
 8003ffa:	11db      	asrs	r3, r3, #7
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f063 030f 	orn	r3, r3, #15
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4933      	ldr	r1, [pc, #204]	; (80040e4 <I2C_MasterRequestRead+0x188>)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fa2f 	bl	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b04      	cmp	r3, #4
 8004028:	d101      	bne.n	800402e <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e056      	b.n	80040dc <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e054      	b.n	80040dc <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004032:	897b      	ldrh	r3, [r7, #10]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4929      	ldr	r1, [pc, #164]	; (80040e8 <I2C_MasterRequestRead+0x18c>)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fa19 	bl	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2b04      	cmp	r3, #4
 8004054:	d101      	bne.n	800405a <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e040      	b.n	80040dc <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e03e      	b.n	80040dc <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004082:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f9a1 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e01d      	b.n	80040dc <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040a0:	897b      	ldrh	r3, [r7, #10]
 80040a2:	11db      	asrs	r3, r3, #7
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f063 030e 	orn	r3, r3, #14
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	490a      	ldr	r1, [pc, #40]	; (80040e8 <I2C_MasterRequestRead+0x18c>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f9db 	bl	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d101      	bne.n	80040d6 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e002      	b.n	80040dc <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e000      	b.n	80040dc <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	00010008 	.word	0x00010008
 80040e8:	00010002 	.word	0x00010002

080040ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	460b      	mov	r3, r1
 8004100:	813b      	strh	r3, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004114:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	2200      	movs	r2, #0
 800411e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f958 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e069      	b.n	8004206 <I2C_RequestMemoryWrite+0x11a>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004132:	897b      	ldrh	r3, [r7, #10]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004140:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	4932      	ldr	r1, [pc, #200]	; (8004210 <I2C_RequestMemoryWrite+0x124>)
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f996 	bl	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <I2C_RequestMemoryWrite+0x78>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	2b04      	cmp	r3, #4
 800415a:	d101      	bne.n	8004160 <I2C_RequestMemoryWrite+0x74>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e052      	b.n	8004206 <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e050      	b.n	8004206 <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417c:	6a39      	ldr	r1, [r7, #32]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f9e9 	bl	8004556 <I2C_WaitOnTXEFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00f      	beq.n	80041aa <I2C_RequestMemoryWrite+0xbe>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	2b04      	cmp	r3, #4
 8004190:	d109      	bne.n	80041a6 <I2C_RequestMemoryWrite+0xba>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e02f      	b.n	8004206 <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e02d      	b.n	8004206 <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <I2C_RequestMemoryWrite+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	611a      	str	r2, [r3, #16]
 80041ba:	e023      	b.n	8004204 <I2C_RequestMemoryWrite+0x118>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041bc:	893b      	ldrh	r3, [r7, #8]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041cc:	6a39      	ldr	r1, [r7, #32]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f9c1 	bl	8004556 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00f      	beq.n	80041fa <I2C_RequestMemoryWrite+0x10e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d109      	bne.n	80041f6 <I2C_RequestMemoryWrite+0x10a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f0:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e007      	b.n	8004206 <I2C_RequestMemoryWrite+0x11a>
      }
      else
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e005      	b.n	8004206 <I2C_RequestMemoryWrite+0x11a>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041fa:	893b      	ldrh	r3, [r7, #8]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	00010002 	.word	0x00010002

08004214 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4603      	mov	r3, r0
 8004224:	817b      	strh	r3, [r7, #10]
 8004226:	460b      	mov	r3, r1
 8004228:	813b      	strh	r3, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800423c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800424c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	2200      	movs	r2, #0
 8004256:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f8bc 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e0b0      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004278:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	6a3a      	ldr	r2, [r7, #32]
 800427e:	4955      	ldr	r1, [pc, #340]	; (80043d4 <I2C_RequestMemoryRead+0x1c0>)
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f8fa 	bl	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <I2C_RequestMemoryRead+0x88>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	2b04      	cmp	r3, #4
 8004292:	d101      	bne.n	8004298 <I2C_RequestMemoryRead+0x84>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e099      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e097      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b4:	6a39      	ldr	r1, [r7, #32]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f94d 	bl	8004556 <I2C_WaitOnTXEFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00f      	beq.n	80042e2 <I2C_RequestMemoryRead+0xce>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d109      	bne.n	80042de <I2C_RequestMemoryRead+0xca>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e076      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e074      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <I2C_RequestMemoryRead+0xe0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042e8:	893b      	ldrh	r3, [r7, #8]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	611a      	str	r2, [r3, #16]
 80042f2:	e023      	b.n	800433c <I2C_RequestMemoryRead+0x128>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042f4:	893b      	ldrh	r3, [r7, #8]
 80042f6:	0a1b      	lsrs	r3, r3, #8
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	6a39      	ldr	r1, [r7, #32]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f925 	bl	8004556 <I2C_WaitOnTXEFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00f      	beq.n	8004332 <I2C_RequestMemoryRead+0x11e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b04      	cmp	r3, #4
 8004318:	d109      	bne.n	800432e <I2C_RequestMemoryRead+0x11a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004328:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e04e      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
      }
      else
      {
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e04c      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004332:	893b      	ldrh	r3, [r7, #8]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	6a39      	ldr	r1, [r7, #32]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f908 	bl	8004556 <I2C_WaitOnTXEFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00f      	beq.n	800436c <I2C_RequestMemoryRead+0x158>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	2b04      	cmp	r3, #4
 8004352:	d109      	bne.n	8004368 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004362:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e031      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e02f      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	2200      	movs	r2, #0
 8004384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f825 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <I2C_RequestMemoryRead+0x184>
  {
    return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e019      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004398:	897b      	ldrh	r3, [r7, #10]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	4909      	ldr	r1, [pc, #36]	; (80043d4 <I2C_RequestMemoryRead+0x1c0>)
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f863 	bl	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <I2C_RequestMemoryRead+0x1b6>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d101      	bne.n	80043c6 <I2C_RequestMemoryRead+0x1b2>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e002      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e000      	b.n	80043cc <I2C_RequestMemoryRead+0x1b8>
    }
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	00010002 	.word	0x00010002

080043d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80043e8:	e01f      	b.n	800442a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f0:	d01b      	beq.n	800442a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043f8:	f7fd f8e6 	bl	80015c8 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d210      	bcs.n	800442a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e023      	b.n	8004472 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d10d      	bne.n	8004450 <I2C_WaitOnFlagUntilTimeout+0x78>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	43da      	mvns	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4013      	ands	r3, r2
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	e00c      	b.n	800446a <I2C_WaitOnFlagUntilTimeout+0x92>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	43da      	mvns	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4013      	ands	r3, r2
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	bf0c      	ite	eq
 8004462:	2301      	moveq	r3, #1
 8004464:	2300      	movne	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	461a      	mov	r2, r3
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	429a      	cmp	r2, r3
 800446e:	d0bc      	beq.n	80043ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004488:	e040      	b.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004498:	d11c      	bne.n	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044b2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2204      	movs	r2, #4
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e03c      	b.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044da:	d017      	beq.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80044e2:	f7fd f871 	bl	80015c8 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d20c      	bcs.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e020      	b.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d10c      	bne.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	43da      	mvns	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4013      	ands	r3, r2
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	bf14      	ite	ne
 8004528:	2301      	movne	r3, #1
 800452a:	2300      	moveq	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e00b      	b.n	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4013      	ands	r3, r2
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf14      	ite	ne
 8004542:	2301      	movne	r3, #1
 8004544:	2300      	moveq	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d19e      	bne.n	800448a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004562:	e029      	b.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f8ba 	bl	80046de <I2C_IsAcknowledgeFailed>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e029      	b.n	80045c8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457a:	d01d      	beq.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004582:	f7fd f821 	bl	80015c8 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	d212      	bcs.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e007      	b.n	80045c8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d1ce      	bne.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045dc:	e029      	b.n	8004632 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f87d 	bl	80046de <I2C_IsAcknowledgeFailed>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e029      	b.n	8004642 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f4:	d01d      	beq.n	8004632 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045fc:	f7fc ffe4 	bl	80015c8 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	d212      	bcs.n	8004632 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e007      	b.n	8004642 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d1ce      	bne.n	80045de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004656:	e036      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b10      	cmp	r3, #16
 8004664:	d114      	bne.n	8004690 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0210 	mvn.w	r2, #16
 800466e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e022      	b.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8004696:	f7fc ff97 	bl	80015c8 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d20f      	bcs.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e007      	b.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b40      	cmp	r3, #64	; 0x40
 80046d2:	d1c1      	bne.n	8004658 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f4:	d114      	bne.n	8004720 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fe:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2204      	movs	r2, #4
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08e      	sub	sp, #56	; 0x38
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8004738:	2300      	movs	r3, #0
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d075      	beq.n	8004834 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004748:	4ba4      	ldr	r3, [pc, #656]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b04      	cmp	r3, #4
 8004752:	d00c      	beq.n	800476e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004754:	4ba1      	ldr	r3, [pc, #644]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800475c:	2b08      	cmp	r3, #8
 800475e:	d112      	bne.n	8004786 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004760:	4b9e      	ldr	r3, [pc, #632]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476c:	d10b      	bne.n	8004786 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476e:	4b9b      	ldr	r3, [pc, #620]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d05b      	beq.n	8004832 <HAL_RCC_OscConfig+0x102>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d157      	bne.n	8004832 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e224      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x6e>
 8004790:	4b92      	ldr	r3, [pc, #584]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a91      	ldr	r2, [pc, #580]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e01d      	b.n	80047da <HAL_RCC_OscConfig+0xaa>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x92>
 80047a8:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a8b      	ldr	r2, [pc, #556]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b89      	ldr	r3, [pc, #548]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a88      	ldr	r2, [pc, #544]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e00b      	b.n	80047da <HAL_RCC_OscConfig+0xaa>
 80047c2:	4b86      	ldr	r3, [pc, #536]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a85      	ldr	r2, [pc, #532]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	4b83      	ldr	r3, [pc, #524]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a82      	ldr	r2, [pc, #520]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d013      	beq.n	800480a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fc fef1 	bl	80015c8 <HAL_GetTick>
 80047e6:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ea:	f7fc feed 	bl	80015c8 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b64      	cmp	r3, #100	; 0x64
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1e9      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fc:	4b77      	ldr	r3, [pc, #476]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0xba>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fc fedd 	bl	80015c8 <HAL_GetTick>
 800480e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004812:	f7fc fed9 	bl	80015c8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b64      	cmp	r3, #100	; 0x64
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e1d5      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004824:	4b6d      	ldr	r3, [pc, #436]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0xe2>
 8004830:	e000      	b.n	8004834 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004832:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d077      	beq.n	8004930 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004840:	4b66      	ldr	r3, [pc, #408]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484c:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004854:	2b08      	cmp	r3, #8
 8004856:	d126      	bne.n	80048a6 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004858:	4b60      	ldr	r3, [pc, #384]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d120      	bne.n	80048a6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004864:	4b5d      	ldr	r3, [pc, #372]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_OscConfig+0x14c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d001      	beq.n	800487c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e1a9      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487c:	4b57      	ldr	r3, [pc, #348]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6919      	ldr	r1, [r3, #16]
 8004888:	23f8      	movs	r3, #248	; 0xf8
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	fa93 f3a3 	rbit	r3, r3
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	494f      	ldr	r1, [pc, #316]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a4:	e044      	b.n	8004930 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02a      	beq.n	8004904 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ae:	4b4c      	ldr	r3, [pc, #304]	; (80049e0 <HAL_RCC_OscConfig+0x2b0>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fc fe88 	bl	80015c8 <HAL_GetTick>
 80048b8:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048bc:	f7fc fe84 	bl	80015c8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e180      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ce:	4b43      	ldr	r3, [pc, #268]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b40      	ldr	r3, [pc, #256]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6919      	ldr	r1, [r3, #16]
 80048e6:	23f8      	movs	r3, #248	; 0xf8
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	fa01 f303 	lsl.w	r3, r1, r3
 80048fc:	4937      	ldr	r1, [pc, #220]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
 8004902:	e015      	b.n	8004930 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004904:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <HAL_RCC_OscConfig+0x2b0>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fc fe5d 	bl	80015c8 <HAL_GetTick>
 800490e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004912:	f7fc fe59 	bl	80015c8 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e155      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f0      	bne.n	8004912 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d030      	beq.n	800499e <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d016      	beq.n	8004972 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004944:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <HAL_RCC_OscConfig+0x2b4>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fc fe3d 	bl	80015c8 <HAL_GetTick>
 800494e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004952:	f7fc fe39 	bl	80015c8 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e135      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004964:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x222>
 8004970:	e015      	b.n	800499e <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004972:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <HAL_RCC_OscConfig+0x2b4>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fc fe26 	bl	80015c8 <HAL_GetTick>
 800497c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004980:	f7fc fe22 	bl	80015c8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e11e      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8086 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049ac:	2300      	movs	r3, #0
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	4a09      	ldr	r2, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ba:	6413      	str	r3, [r2, #64]	; 0x40
 80049bc:	4b07      	ldr	r3, [pc, #28]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049c8:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <HAL_RCC_OscConfig+0x2b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a06      	ldr	r2, [pc, #24]	; (80049e8 <HAL_RCC_OscConfig+0x2b8>)
 80049ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d2:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80049d4:	f7fc fdf8 	bl	80015c8 <HAL_GetTick>
 80049d8:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049da:	e010      	b.n	80049fe <HAL_RCC_OscConfig+0x2ce>
 80049dc:	40023800 	.word	0x40023800
 80049e0:	42470000 	.word	0x42470000
 80049e4:	42470e80 	.word	0x42470e80
 80049e8:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049ec:	f7fc fdec 	bl	80015c8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e0e8      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049fe:	4b76      	ldr	r3, [pc, #472]	; (8004bd8 <HAL_RCC_OscConfig+0x4a8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d106      	bne.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
 8004a12:	4b72      	ldr	r3, [pc, #456]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a71      	ldr	r2, [pc, #452]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1e:	e01c      	b.n	8004a5a <HAL_RCC_OscConfig+0x32a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b05      	cmp	r3, #5
 8004a26:	d10c      	bne.n	8004a42 <HAL_RCC_OscConfig+0x312>
 8004a28:	4b6c      	ldr	r3, [pc, #432]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	4a6b      	ldr	r2, [pc, #428]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a2e:	f043 0304 	orr.w	r3, r3, #4
 8004a32:	6713      	str	r3, [r2, #112]	; 0x70
 8004a34:	4b69      	ldr	r3, [pc, #420]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4a68      	ldr	r2, [pc, #416]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a40:	e00b      	b.n	8004a5a <HAL_RCC_OscConfig+0x32a>
 8004a42:	4b66      	ldr	r3, [pc, #408]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	4a65      	ldr	r2, [pc, #404]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a48:	f023 0301 	bic.w	r3, r3, #1
 8004a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4e:	4b63      	ldr	r3, [pc, #396]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	4a62      	ldr	r2, [pc, #392]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a54:	f023 0304 	bic.w	r3, r3, #4
 8004a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d015      	beq.n	8004a8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a62:	f7fc fdb1 	bl	80015c8 <HAL_GetTick>
 8004a66:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fc fdad 	bl	80015c8 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0a7      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a80:	4b56      	ldr	r3, [pc, #344]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ee      	beq.n	8004a6a <HAL_RCC_OscConfig+0x33a>
 8004a8c:	e014      	b.n	8004ab8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8e:	f7fc fd9b 	bl	80015c8 <HAL_GetTick>
 8004a92:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fc fd97 	bl	80015c8 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e091      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aac:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1ee      	bne.n	8004a96 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8086 	beq.w	8004bce <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ac2:	4b46      	ldr	r3, [pc, #280]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d07d      	beq.n	8004bca <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d162      	bne.n	8004b9c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad6:	4b42      	ldr	r3, [pc, #264]	; (8004be0 <HAL_RCC_OscConfig+0x4b0>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fc fd74 	bl	80015c8 <HAL_GetTick>
 8004ae0:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fc fd70 	bl	80015c8 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e06c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	fa01 f303 	lsl.w	r3, r1, r3
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	1e59      	subs	r1, r3, #1
 8004b32:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	fa93 f3a3 	rbit	r3, r3
 8004b3e:	617b      	str	r3, [r7, #20]
  return(result);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b50:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	fab3 f383 	clz	r3, r3
 8004b64:	fa01 f303 	lsl.w	r3, r1, r3
 8004b68:	491c      	ldr	r1, [pc, #112]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b6e:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <HAL_RCC_OscConfig+0x4b0>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fc fd28 	bl	80015c8 <HAL_GetTick>
 8004b78:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fc fd24 	bl	80015c8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e020      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x44c>
 8004b9a:	e018      	b.n	8004bce <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HAL_RCC_OscConfig+0x4b0>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fc fd11 	bl	80015c8 <HAL_GetTick>
 8004ba6:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fc fd0d 	bl	80015c8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e009      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbc:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <HAL_RCC_OscConfig+0x4ac>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f0      	bne.n	8004baa <HAL_RCC_OscConfig+0x47a>
 8004bc8:	e001      	b.n	8004bce <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3738      	adds	r7, #56	; 0x38
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40007000 	.word	0x40007000
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	42470060 	.word	0x42470060

08004be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004bf2:	4b81      	ldr	r3, [pc, #516]	; (8004df8 <HAL_RCC_ClockConfig+0x214>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d90c      	bls.n	8004c1a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c00:	4b7d      	ldr	r3, [pc, #500]	; (8004df8 <HAL_RCC_ClockConfig+0x214>)
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c08:	4b7b      	ldr	r3, [pc, #492]	; (8004df8 <HAL_RCC_ClockConfig+0x214>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0ea      	b.n	8004df0 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c26:	4b75      	ldr	r3, [pc, #468]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4972      	ldr	r1, [pc, #456]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8086 	beq.w	8004d52 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b6b      	ldr	r3, [pc, #428]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d119      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0c8      	b.n	8004df0 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d003      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6e:	4b63      	ldr	r3, [pc, #396]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0b8      	b.n	8004df0 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7e:	4b5f      	ldr	r3, [pc, #380]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0b0      	b.n	8004df0 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f023 0203 	bic.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4958      	ldr	r1, [pc, #352]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca0:	f7fc fc92 	bl	80015c8 <HAL_GetTick>
 8004ca4:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d112      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb0:	f7fc fc8a 	bl	80015c8 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e094      	b.n	8004df0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cc6:	4b4d      	ldr	r3, [pc, #308]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d1ee      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0xcc>
 8004cd2:	e03e      	b.n	8004d52 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d112      	bne.n	8004d02 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cde:	f7fc fc73 	bl	80015c8 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e07d      	b.n	8004df0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cf4:	4b41      	ldr	r3, [pc, #260]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 030c 	and.w	r3, r3, #12
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d1ee      	bne.n	8004cde <HAL_RCC_ClockConfig+0xfa>
 8004d00:	e027      	b.n	8004d52 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d11d      	bne.n	8004d46 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0c:	f7fc fc5c 	bl	80015c8 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e066      	b.n	8004df0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d1ee      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x128>
 8004d2e:	e010      	b.n	8004d52 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d30:	f7fc fc4a 	bl	80015c8 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e054      	b.n	8004df0 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d46:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1ee      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004d52:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <HAL_RCC_ClockConfig+0x214>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d20c      	bcs.n	8004d7a <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <HAL_RCC_ClockConfig+0x214>)
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d68:	4b23      	ldr	r3, [pc, #140]	; (8004df8 <HAL_RCC_ClockConfig+0x214>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d001      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e03a      	b.n	8004df0 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d86:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	491a      	ldr	r1, [pc, #104]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004da4:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4912      	ldr	r1, [pc, #72]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004db8:	f000 f826 	bl	8004e08 <HAL_RCC_GetSysClockFreq>
 8004dbc:	4601      	mov	r1, r0
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <HAL_RCC_ClockConfig+0x218>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dc6:	23f0      	movs	r3, #240	; 0xf0
 8004dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	fa93 f3a3 	rbit	r3, r3
 8004dd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	fab3 f383 	clz	r3, r3
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ddc:	4a08      	ldr	r2, [pc, #32]	; (8004e00 <HAL_RCC_ClockConfig+0x21c>)
 8004dde:	5cd3      	ldrb	r3, [r2, r3]
 8004de0:	fa21 f303 	lsr.w	r3, r1, r3
 8004de4:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <HAL_RCC_ClockConfig+0x220>)
 8004de6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004de8:	200f      	movs	r0, #15
 8004dea:	f00b fc1f 	bl	801062c <HAL_InitTick>
  
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40023c00 	.word	0x40023c00
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	0801ba4c 	.word	0x0801ba4c
 8004e04:	2000001c 	.word	0x2000001c

08004e08 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b08b      	sub	sp, #44	; 0x2c
 8004e0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	2300      	movs	r3, #0
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e1e:	4b38      	ldr	r3, [pc, #224]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d00c      	beq.n	8004e44 <HAL_RCC_GetSysClockFreq+0x3c>
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d85d      	bhi.n	8004eea <HAL_RCC_GetSysClockFreq+0xe2>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x30>
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x36>
 8004e36:	e058      	b.n	8004eea <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e38:	4b32      	ldr	r3, [pc, #200]	; (8004f04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e3a:	623b      	str	r3, [r7, #32]
       break;
 8004e3c:	e058      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e3e:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e40:	623b      	str	r3, [r7, #32]
      break;
 8004e42:	e055      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e44:	4b2e      	ldr	r3, [pc, #184]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e4c:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e4e:	4b2c      	ldr	r3, [pc, #176]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d017      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004e5a:	4a2a      	ldr	r2, [pc, #168]	; (8004f04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e62:	4b27      	ldr	r3, [pc, #156]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e64:	6859      	ldr	r1, [r3, #4]
 8004e66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e6a:	400b      	ands	r3, r1
 8004e6c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004e70:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	fa91 f1a1 	rbit	r1, r1
 8004e78:	6139      	str	r1, [r7, #16]
  return(result);
 8004e7a:	6939      	ldr	r1, [r7, #16]
 8004e7c:	fab1 f181 	clz	r1, r1
 8004e80:	40cb      	lsrs	r3, r1
 8004e82:	fb03 f302 	mul.w	r3, r3, r2
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
 8004e88:	e016      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004e8a:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e92:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004ea0:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	fa91 f1a1 	rbit	r1, r1
 8004ea8:	60b9      	str	r1, [r7, #8]
  return(result);
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	fab1 f181 	clz	r1, r1
 8004eb0:	40cb      	lsrs	r3, r1
 8004eb2:	fb03 f302 	mul.w	r3, r3, r2
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ec0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004ec4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	603b      	str	r3, [r7, #0]
  return(result);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	fab3 f383 	clz	r3, r3
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed8:	3301      	adds	r3, #1
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8004ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	623b      	str	r3, [r7, #32]
      break;
 8004ee8:	e002      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004eec:	623b      	str	r3, [r7, #32]
      break;
 8004eee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	372c      	adds	r7, #44	; 0x2c
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800
 8004f04:	00f42400 	.word	0x00f42400

08004f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	2000001c 	.word	0x2000001c

08004f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004f26:	f7ff ffef 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004f38:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	fa93 f3a3 	rbit	r3, r3
 8004f40:	603b      	str	r3, [r7, #0]
  return(result);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	fab3 f383 	clz	r3, r3
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f4e:	5cd3      	ldrb	r3, [r2, r3]
 8004f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	0801ba5c 	.word	0x0801ba5c

08004f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004f6a:	f7ff ffcd 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f6e:	4601      	mov	r1, r0
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8004f78:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004f7c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	fa93 f3a3 	rbit	r3, r3
 8004f84:	603b      	str	r3, [r7, #0]
  return(result);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	fab3 f383 	clz	r3, r3
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f92:	5cd3      	ldrb	r3, [r2, r3]
 8004f94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	0801ba5c 	.word	0x0801ba5c

08004fa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	220f      	movs	r2, #15
 8004fb6:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fb8:	4b12      	ldr	r3, [pc, #72]	; (8005004 <HAL_RCC_GetClockConfig+0x5c>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0203 	and.w	r2, r3, #3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <HAL_RCC_GetClockConfig+0x5c>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <HAL_RCC_GetClockConfig+0x5c>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_RCC_GetClockConfig+0x5c>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	08db      	lsrs	r3, r3, #3
 8004fe2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004fea:	4b07      	ldr	r3, [pc, #28]	; (8005008 <HAL_RCC_GetClockConfig+0x60>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 020f 	and.w	r2, r3, #15
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	601a      	str	r2, [r3, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800
 8005008:	40023c00 	.word	0x40023c00

0800500c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b09c      	sub	sp, #112	; 0x70
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t tmpreg1 = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8082 	beq.w	800513a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8005036:	4bac      	ldr	r3, [pc, #688]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800503c:	f7fc fac4 	bl	80015c8 <HAL_GetTick>
 8005040:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005044:	f7fc fac0 	bl	80015c8 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e1eb      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005056:	4ba5      	ldr	r3, [pc, #660]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }
    
    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01e      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005076:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800507a:	fa93 f3a3 	rbit	r3, r3
 800507e:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8005080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005082:	fab3 f383 	clz	r3, r3
 8005086:	409a      	lsls	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6899      	ldr	r1, [r3, #8]
 800508c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005090:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005094:	fa93 f3a3 	rbit	r3, r3
 8005098:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800509a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800509c:	fab3 f383 	clz	r3, r3
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	4991      	ldr	r1, [pc, #580]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d02a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80050b8:	4b8c      	ldr	r3, [pc, #560]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80050ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050c2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80050c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ca:	fa93 f3a3 	rbit	r3, r3
 80050ce:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 80050d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d2:	fab3 f383 	clz	r3, r3
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
 80050da:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	019a      	lsls	r2, r3, #6
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	061b      	lsls	r3, r3, #24
 80050e8:	431a      	orrs	r2, r3
 80050ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050ec:	071b      	lsls	r3, r3, #28
 80050ee:	497f      	ldr	r1, [pc, #508]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050f6:	4b7d      	ldr	r3, [pc, #500]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80050f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fc:	f023 021f 	bic.w	r2, r3, #31
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	3b01      	subs	r3, #1
 8005106:	4979      	ldr	r1, [pc, #484]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800510e:	4b76      	ldr	r3, [pc, #472]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005114:	f7fc fa58 	bl	80015c8 <HAL_GetTick>
 8005118:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800511c:	f7fc fa54 	bl	80015c8 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e17f      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800512e:	4b6f      	ldr	r3, [pc, #444]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x110>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x148>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80d7 	beq.w	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005154:	4b66      	ldr	r3, [pc, #408]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800515a:	f7fc fa35 	bl	80015c8 <HAL_GetTick>
 800515e:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005160:	e008      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005162:	f7fc fa31 	bl	80015c8 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x168>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e15c      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005174:	4b5d      	ldr	r3, [pc, #372]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800517c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005180:	d0ef      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d04b      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800518e:	4b57      	ldr	r3, [pc, #348]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005198:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	fa93 f3a3 	rbit	r3, r3
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	fab3 f383 	clz	r3, r3
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
 80051b0:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051be:	fa93 f3a3 	rbit	r3, r3
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	409a      	lsls	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6959      	ldr	r1, [r3, #20]
 80051d0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d8:	fa93 f3a3 	rbit	r3, r3
 80051dc:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80051de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e0:	fab3 f383 	clz	r3, r3
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	431a      	orrs	r2, r3
 80051ea:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f2:	fa93 f3a3 	rbit	r3, r3
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80051f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fa:	fab3 f383 	clz	r3, r3
 80051fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005200:	fa01 f303 	lsl.w	r3, r1, r3
 8005204:	4939      	ldr	r1, [pc, #228]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800520c:	4b37      	ldr	r3, [pc, #220]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800520e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005212:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	3b01      	subs	r3, #1
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	4933      	ldr	r1, [pc, #204]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d049      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005232:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800523c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	fa93 f3a3 	rbit	r3, r3
 8005248:	613b      	str	r3, [r7, #16]
  return(result);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	fab3 f383 	clz	r3, r3
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800525e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	fa93 f3a3 	rbit	r3, r3
 8005266:	61bb      	str	r3, [r7, #24]
  return(result);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	409a      	lsls	r2, r3
 8005270:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	fa93 f3a3 	rbit	r3, r3
 800527c:	623b      	str	r3, [r7, #32]
  return(result);
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	fab3 f383 	clz	r3, r3
 8005284:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6999      	ldr	r1, [r3, #24]
 8005290:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	fa93 f3a3 	rbit	r3, r3
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	fab3 f383 	clz	r3, r3
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	4910      	ldr	r1, [pc, #64]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	490b      	ldr	r1, [pc, #44]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052cc:	f7fc f97c 	bl	80015c8 <HAL_GetTick>
 80052d0:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052d2:	e00f      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052d4:	f7fc f978 	bl	80015c8 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d908      	bls.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e0a3      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x422>
 80052e6:	bf00      	nop
 80052e8:	42470068 	.word	0x42470068
 80052ec:	40023800 	.word	0x40023800
 80052f0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052f4:	4b50      	ldr	r3, [pc, #320]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005300:	d1e8      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8083 	beq.w	8005416 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	4b48      	ldr	r3, [pc, #288]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	4a47      	ldr	r2, [pc, #284]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800531a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531e:	6413      	str	r3, [r2, #64]	; 0x40
 8005320:	4b45      	ldr	r3, [pc, #276]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	68fb      	ldr	r3, [r7, #12]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800532c:	4b43      	ldr	r3, [pc, #268]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a42      	ldr	r2, [pc, #264]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005336:	6013      	str	r3, [r2, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 8005338:	f7fc f946 	bl	80015c8 <HAL_GetTick>
 800533c:	66f8      	str	r0, [r7, #108]	; 0x6c
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x346>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005340:	f7fc f942 	bl	80015c8 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x346>
      {
        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e06d      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005352:	4b3a      	ldr	r3, [pc, #232]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x334>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800535e:	4b36      	ldr	r3, [pc, #216]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005366:	66bb      	str	r3, [r7, #104]	; 0x68
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02f      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005378:	429a      	cmp	r2, r3
 800537a:	d028      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800537c:	4b2e      	ldr	r3, [pc, #184]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005384:	66bb      	str	r3, [r7, #104]	; 0x68
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005386:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005388:	2201      	movs	r2, #1
 800538a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800538c:	4b2c      	ldr	r3, [pc, #176]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005392:	4a29      	ldr	r2, [pc, #164]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005396:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005398:	4b27      	ldr	r3, [pc, #156]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d014      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053a4:	f7fc f910 	bl	80015c8 <HAL_GetTick>
 80053a8:	66f8      	str	r0, [r7, #108]	; 0x6c
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053aa:	e00a      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ac:	f7fc f90c 	bl	80015c8 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e035      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0ee      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053da:	d10d      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80053dc:	4b16      	ldr	r3, [pc, #88]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f0:	4911      	ldr	r1, [pc, #68]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
 80053f6:	e005      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80053f8:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	4a0e      	ldr	r2, [pc, #56]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005402:	6093      	str	r3, [r2, #8]
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005406:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005410:	4909      	ldr	r1, [pc, #36]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005412:	4313      	orrs	r3, r2
 8005414:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800542a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3770      	adds	r7, #112	; 0x70
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40023800 	.word	0x40023800
 800543c:	40007000 	.word	0x40007000
 8005440:	42470e40 	.word	0x42470e40
 8005444:	424711e0 	.word	0x424711e0

08005448 <HAL_RTC_Init>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e06d      	b.n	8005536 <HAL_RTC_Init+0xee>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	7f5b      	ldrb	r3, [r3, #29]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d105      	bne.n	8005470 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f00a fe60 	bl	8010130 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	22ca      	movs	r2, #202	; 0xca
 800547c:	625a      	str	r2, [r3, #36]	; 0x24
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2253      	movs	r2, #83	; 0x53
 8005484:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 faa8 	bl	80059dc <RTC_EnterInitMode>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	22ff      	movs	r2, #255	; 0xff
 8005498:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2204      	movs	r2, #4
 800549e:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e048      	b.n	8005536 <HAL_RTC_Init+0xee>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6899      	ldr	r1, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68d2      	ldr	r2, [r2, #12]
 80054de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6919      	ldr	r1, [r3, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	041a      	lsls	r2, r3, #16
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005502:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005512:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	22ff      	movs	r2, #255	; 0xff
 800552c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8005534:	2300      	movs	r3, #0
  }
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800553e:	b590      	push	{r4, r7, lr}
 8005540:	b087      	sub	sp, #28
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	7f1b      	ldrb	r3, [r3, #28]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_RTC_SetTime+0x1c>
 8005556:	2302      	movs	r3, #2
 8005558:	e0b2      	b.n	80056c0 <HAL_RTC_SetTime+0x182>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2202      	movs	r2, #2
 8005564:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d126      	bne.n	80055ba <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fa55 	bl	8005a34 <RTC_ByteToBcd2>
 800558a:	4603      	mov	r3, r0
 800558c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fa4e 	bl	8005a34 <RTC_ByteToBcd2>
 8005598:	4603      	mov	r3, r0
 800559a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800559c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	789b      	ldrb	r3, [r3, #2]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fa46 	bl	8005a34 <RTC_ByteToBcd2>
 80055a8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80055aa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	78db      	ldrb	r3, [r3, #3]
 80055b2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e020      	b.n	80055fc <HAL_RTC_SetTime+0xbe>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fa4f 	bl	8005a70 <RTC_Bcd2ToByte>
 80055d2:	4603      	mov	r3, r0
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	e002      	b.n	80055de <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2200      	movs	r2, #0
 80055dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055ea:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80055f0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	78db      	ldrb	r3, [r3, #3]
 80055f6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	22ca      	movs	r2, #202	; 0xca
 8005602:	625a      	str	r2, [r3, #36]	; 0x24
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2253      	movs	r2, #83	; 0x53
 800560a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f9e5 	bl	80059dc <RTC_EnterInitMode>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00b      	beq.n	8005630 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	22ff      	movs	r2, #255	; 0xff
 800561e:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2204      	movs	r2, #4
 8005624:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e047      	b.n	80056c0 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800563a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800563e:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800564e:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6899      	ldr	r1, [r3, #8]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	431a      	orrs	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005676:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d111      	bne.n	80056aa <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f980 	bl	800598c <HAL_RTC_WaitForSynchro>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	22ff      	movs	r2, #255	; 0xff
 8005698:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2204      	movs	r2, #4
 800569e:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e00a      	b.n	80056c0 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	22ff      	movs	r2, #255	; 0xff
 80056b0:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 80056be:	2300      	movs	r3, #0
  }
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd90      	pop	{r4, r7, pc}

080056c8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	605a      	str	r2, [r3, #4]
  
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80056fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056fe:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800570a:	b2da      	uxtb	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	0a1b      	lsrs	r3, r3, #8
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005728:	b2da      	uxtb	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11a      	bne.n	800577a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f991 	bl	8005a70 <RTC_Bcd2ToByte>
 800574e:	4603      	mov	r3, r0
 8005750:	461a      	mov	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f988 	bl	8005a70 <RTC_Bcd2ToByte>
 8005760:	4603      	mov	r3, r0
 8005762:	461a      	mov	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	789b      	ldrb	r3, [r3, #2]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 f97f 	bl	8005a70 <RTC_Bcd2ToByte>
 8005772:	4603      	mov	r3, r0
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	7f1b      	ldrb	r3, [r3, #28]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_RTC_SetDate+0x1c>
 800579c:	2302      	movs	r3, #2
 800579e:	e0a2      	b.n	80058e6 <HAL_RTC_SetDate+0x162>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2202      	movs	r2, #2
 80057aa:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10e      	bne.n	80057d0 <HAL_RTC_SetDate+0x4c>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	785b      	ldrb	r3, [r3, #1]
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	f023 0310 	bic.w	r3, r3, #16
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	330a      	adds	r3, #10
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d11c      	bne.n	8005810 <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	78db      	ldrb	r3, [r3, #3]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f92a 	bl	8005a34 <RTC_ByteToBcd2>
 80057e0:	4603      	mov	r3, r0
 80057e2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 f923 	bl	8005a34 <RTC_ByteToBcd2>
 80057ee:	4603      	mov	r3, r0
 80057f0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80057f2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	789b      	ldrb	r3, [r3, #2]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f91b 	bl	8005a34 <RTC_ByteToBcd2>
 80057fe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005800:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e01c      	b.n	800584a <HAL_RTC_SetDate+0xc6>
  }
  else
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	4618      	mov	r0, r3
 8005816:	f000 f92b 	bl	8005a70 <RTC_Bcd2ToByte>
 800581a:	4603      	mov	r3, r0
 800581c:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	789b      	ldrb	r3, [r3, #2]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f924 	bl	8005a70 <RTC_Bcd2ToByte>
 8005828:	4603      	mov	r3, r0
 800582a:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	78db      	ldrb	r3, [r3, #3]
 8005830:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005838:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800583e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	22ca      	movs	r2, #202	; 0xca
 8005850:	625a      	str	r2, [r3, #36]	; 0x24
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2253      	movs	r2, #83	; 0x53
 8005858:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f8be 	bl	80059dc <RTC_EnterInitMode>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_RTC_SetDate+0xfa>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	22ff      	movs	r2, #255	; 0xff
 800586c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2204      	movs	r2, #4
 8005872:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e033      	b.n	80058e6 <HAL_RTC_SetDate+0x162>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005888:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800588c:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800589c:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d111      	bne.n	80058d0 <HAL_RTC_SetDate+0x14c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f86d 	bl	800598c <HAL_RTC_WaitForSynchro>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <HAL_RTC_SetDate+0x14c>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	22ff      	movs	r2, #255	; 0xff
 80058be:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2204      	movs	r2, #4
 80058c4:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e00a      	b.n	80058e6 <HAL_RTC_SetDate+0x162>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 80058e4:	2300      	movs	r3, #0
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd90      	pop	{r4, r7, pc}

080058ee <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b086      	sub	sp, #24
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
          
  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005908:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800590c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	b2da      	uxtb	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	b2da      	uxtb	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	0b5b      	lsrs	r3, r3, #13
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d11a      	bne.n	8005982 <HAL_RTC_GetDate+0x94>
  {    
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	78db      	ldrb	r3, [r3, #3]
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f88d 	bl	8005a70 <RTC_Bcd2ToByte>
 8005956:	4603      	mov	r3, r0
 8005958:	461a      	mov	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f884 	bl	8005a70 <RTC_Bcd2ToByte>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	789b      	ldrb	r3, [r3, #2]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 f87b 	bl	8005a70 <RTC_Bcd2ToByte>
 800597a:	4603      	mov	r3, r0
 800597c:	461a      	mov	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059a8:	f7fb fe0e 	bl	80015c8 <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80059ae:	e009      	b.n	80059c4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80059b0:	f7fb fe0a 	bl	80015c8 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059be:	d901      	bls.n	80059c4 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e007      	b.n	80059d4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0ee      	beq.n	80059b0 <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d119      	bne.n	8005a2a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a00:	f7fb fde2 	bl	80015c8 <HAL_GetTick>
 8005a04:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a06:	e009      	b.n	8005a1c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a08:	f7fb fdde 	bl	80015c8 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a16:	d901      	bls.n	8005a1c <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e007      	b.n	8005a2c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0ee      	beq.n	8005a08 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 8005a42:	e005      	b.n	8005a50 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	3b0a      	subs	r3, #10
 8005a4e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	2b09      	cmp	r3, #9
 8005a54:	d8f6      	bhi.n	8005a44 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b2db      	uxtb	r3, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	091b      	lsrs	r3, r3, #4
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	b2db      	uxtb	r3, r3
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3350      	adds	r3, #80	; 0x50
 8005ac2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4413      	add	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
  
  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.                   
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3350      	adds	r3, #80	; 0x50
 8005af4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e01d      	b.n	8005b5e <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d105      	bne.n	8005b3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f00a fb11 	bl	801015c <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f810 	bl	8005b68 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b68:	b5b0      	push	{r4, r5, r7, lr}
 8005b6a:	b08e      	sub	sp, #56	; 0x38
 8005b6c:	af04      	add	r7, sp, #16
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005b88:	2376      	movs	r3, #118	; 0x76
 8005b8a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681d      	ldr	r5, [r3, #0]
 8005b90:	466c      	mov	r4, sp
 8005b92:	f107 0318 	add.w	r3, r7, #24
 8005b96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b9e:	f107 030c 	add.w	r3, r7, #12
 8005ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f003 fe51 	bl	800984c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8005baa:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <HAL_SD_InitCard+0xb4>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f003 fe92 	bl	80098de <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005bba:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <HAL_SD_InitCard+0xb4>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8005bc0:	2002      	movs	r0, #2
 8005bc2:	f7fb fd0d 	bl	80015e0 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 f90a 	bl	8006de0 <SD_PowerON>
 8005bcc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e013      	b.n	8005c14 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 f82f 	bl	8006c50 <SD_InitCard>
 8005bf2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3728      	adds	r7, #40	; 0x28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c1c:	422580a0 	.word	0x422580a0

08005c20 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b08f      	sub	sp, #60	; 0x3c
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8005c32:	f7fb fcc9 	bl	80015c8 <HAL_GetTick>
 8005c36:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d107      	bne.n	8005c56 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e177      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	f040 816a 	bne.w	8005f38 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	441a      	add	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d907      	bls.n	8005c88 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e15e      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d002      	beq.n	8005ca6 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	025b      	lsls	r3, r3, #9
 8005ca4:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f003 fea9 	bl	8009a06 <SDMMC_CmdBlockLength>
 8005cb4:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d010      	beq.n	8005cde <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e133      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ce2:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	025b      	lsls	r3, r3, #9
 8005ce8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005cea:	2390      	movs	r3, #144	; 0x90
 8005cec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005cee:	2302      	movs	r3, #2
 8005cf0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f107 0210 	add.w	r2, r7, #16
 8005d02:	4611      	mov	r1, r2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f003 fe52 	bl	80099ae <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d90a      	bls.n	8005d26 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2202      	movs	r2, #2
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f003 feba 	bl	8009a96 <SDMMC_CmdReadMultiBlock>
 8005d22:	6378      	str	r0, [r7, #52]	; 0x34
 8005d24:	e009      	b.n	8005d3a <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f003 fe8b 	bl	8009a4e <SDMMC_CmdReadSingleBlock>
 8005d38:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d04a      	beq.n	8005dd6 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d50:	431a      	orrs	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e0f1      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d016      	beq.n	8005d9e <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	633b      	str	r3, [r7, #48]	; 0x30
 8005d74:	e00d      	b.n	8005d92 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6819      	ldr	r1, [r3, #0]
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d80:	18d4      	adds	r4, r2, r3
 8005d82:	4608      	mov	r0, r1
 8005d84:	f003 fd8d 	bl	80098a2 <SDIO_ReadFIFO>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	3301      	adds	r3, #1
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	2b07      	cmp	r3, #7
 8005d96:	d9ee      	bls.n	8005d76 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	3320      	adds	r3, #32
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_SD_ReadBlocks+0x194>
 8005da4:	f7fb fc10 	bl	80015c8 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d810      	bhi.n	8005dd6 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e0b7      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ddc:	f240 332a 	movw	r3, #810	; 0x32a
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0bd      	beq.n	8005d62 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d020      	beq.n	8005e36 <HAL_SD_ReadBlocks+0x216>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d91d      	bls.n	8005e36 <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d019      	beq.n	8005e36 <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f003 feb2 	bl	8009b70 <SDMMC_CmdStopTransfer>
 8005e0c:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d010      	beq.n	8005e36 <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e24:	431a      	orrs	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e087      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f043 0208 	orr.w	r2, r3, #8
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e06f      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005e7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	f043 0202 	orr.w	r2, r3, #2
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e057      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d037      	beq.n	8005f14 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	f043 0220 	orr.w	r2, r3, #32
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e03f      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f003 fce9 	bl	80098a2 <SDIO_ReadFIFO>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	3304      	adds	r3, #4
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <HAL_SD_ReadBlocks+0x2d2>
 8005ee2:	f7fb fb71 	bl	80015c8 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d810      	bhi.n	8005f14 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e018      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1d1      	bne.n	8005ec6 <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e006      	b.n	8005f46 <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	373c      	adds	r7, #60	; 0x3c
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd90      	pop	{r4, r7, pc}

08005f4e <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b08e      	sub	sp, #56	; 0x38
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8005f60:	f7fb fb32 	bl	80015c8 <HAL_GetTick>
 8005f64:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e160      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	f040 8153 	bne.w	8006238 <HAL_SD_WriteBlocks+0x2ea>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	441a      	add	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d907      	bls.n	8005fb6 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e147      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2203      	movs	r2, #3
 8005fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d002      	beq.n	8005fd4 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	025b      	lsls	r3, r3, #9
 8005fd2:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f003 fd12 	bl	8009a06 <SDMMC_CmdBlockLength>
 8005fe2:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d010      	beq.n	800600c <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e11c      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d90a      	bls.n	8006028 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4618      	mov	r0, r3
 8006020:	f003 fd81 	bl	8009b26 <SDMMC_CmdWriteMultiBlock>
 8006024:	6378      	str	r0, [r7, #52]	; 0x34
 8006026:	e009      	b.n	800603c <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2210      	movs	r2, #16
 800602c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	4618      	mov	r0, r3
 8006036:	f003 fd52 	bl	8009ade <SDMMC_CmdWriteSingleBlock>
 800603a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	2b00      	cmp	r3, #0
 8006040:	d010      	beq.n	8006064 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800604a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	431a      	orrs	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e0f0      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006068:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	025b      	lsls	r3, r3, #9
 800606e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006070:	2390      	movs	r3, #144	; 0x90
 8006072:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006078:	2300      	movs	r3, #0
 800607a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800607c:	2301      	movs	r3, #1
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f107 0210 	add.w	r2, r7, #16
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f003 fc8f 	bl	80099ae <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006090:	e037      	b.n	8006102 <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, /*SDIO_FLAG_TXUNDERR |*/ SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d014      	beq.n	80060ca <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80060a0:	2300      	movs	r3, #0
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
 80060a4:	e00b      	b.n	80060be <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b0:	4413      	add	r3, r2
 80060b2:	4619      	mov	r1, r3
 80060b4:	f003 fc02 	bl	80098bc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	3301      	adds	r3, #1
 80060bc:	633b      	str	r3, [r7, #48]	; 0x30
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b07      	cmp	r3, #7
 80060c2:	d9f0      	bls.n	80060a6 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	3320      	adds	r3, #32
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80060ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <HAL_SD_WriteBlocks+0x192>
 80060d0:	f7fb fa7a 	bl	80015c8 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060dc:	429a      	cmp	r2, r3
 80060de:	d810      	bhi.n	8006102 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e0a1      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006108:	f240 331a 	movw	r3, #794	; 0x31a
 800610c:	4013      	ands	r3, r2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0bf      	beq.n	8006092 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611c:	2b00      	cmp	r3, #0
 800611e:	d020      	beq.n	8006162 <HAL_SD_WriteBlocks+0x214>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d91d      	bls.n	8006162 <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612a:	2b03      	cmp	r3, #3
 800612c:	d019      	beq.n	8006162 <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f003 fd1c 	bl	8009b70 <SDMMC_CmdStopTransfer>
 8006138:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	2b00      	cmp	r3, #0
 800613e:	d010      	beq.n	8006162 <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006150:	431a      	orrs	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e071      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d010      	beq.n	8006192 <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617e:	f043 0208 	orr.w	r2, r3, #8
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e059      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d010      	beq.n	80061c2 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	f043 0202 	orr.w	r2, r3, #2
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e041      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d010      	beq.n	80061f2 <HAL_SD_WriteBlocks+0x2a4>
    {
      // Clear all the static flags
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	f043 0210 	orr.w	r2, r3, #16
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e029      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_STA_STBITERR))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d010      	beq.n	8006222 <HAL_SD_WriteBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_GENERAL_UNKNOWN_ERR;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e011      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800622a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e006      	b.n	8006246 <HAL_SD_WriteBlocks+0x2f8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	3738      	adds	r7, #56	; 0x38
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 808d 	beq.w	8006386 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006284:	f023 0302 	bic.w	r3, r3, #2
 8006288:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d03a      	beq.n	800630c <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d105      	bne.n	80062ae <HAL_SD_IRQHandler+0x5e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d011      	beq.n	80062d2 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f003 fc5c 	bl	8009b70 <SDMMC_CmdStopTransfer>
 80062b8:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f939 	bl	8006544 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062da:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <HAL_SD_IRQHandler+0xac>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f917 	bl	8006530 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8006302:	e103      	b.n	800650c <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f909 	bl	800651c <HAL_SD_TxCpltCallback>
}
 800630a:	e0ff      	b.n	800650c <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80f9 	beq.w	800650c <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d011      	beq.n	800634a <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f003 fc20 	bl	8009b70 <SDMMC_CmdStopTransfer>
 8006330:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f8fd 	bl	8006544 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	f040 80da 	bne.w	800650c <HAL_SD_IRQHandler+0x2bc>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 80d3 	bne.w	800650c <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0208 	bic.w	r2, r2, #8
 8006374:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f8cc 	bl	800651c <HAL_SD_TxCpltCallback>
}
 8006384:	e0c2      	b.n	800650c <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 ff7b 	bl	800729a <SD_Write_IT>
}
 80063a4:	e0b2      	b.n	800650c <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 ff43 	bl	800724a <SD_Read_IT>
}
 80063c4:	e0a2      	b.n	800650c <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063cc:	f240 233a 	movw	r3, #570	; 0x23a
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 809a 	beq.w	800650c <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	f043 0202 	orr.w	r2, r3, #2
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	f043 0208 	orr.w	r2, r3, #8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	f043 0220 	orr.w	r2, r3, #32
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	f043 0210 	orr.w	r2, r3, #16
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	f043 0208 	orr.w	r2, r3, #8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006472:	f023 0302 	bic.w	r3, r3, #2
 8006476:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d036      	beq.n	80064f2 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d011      	beq.n	80064b0 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	4a20      	ldr	r2, [pc, #128]	; (8006514 <HAL_SD_IRQHandler+0x2c4>)
 8006492:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	4618      	mov	r0, r3
 800649a:	f7fb fdc1 	bl	8002020 <HAL_DMA_Abort_IT>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d033      	beq.n	800650c <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fb55 	bl	8006b58 <SD_DMATxAbort>
}
 80064ae:	e02d      	b.n	800650c <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d011      	beq.n	80064dc <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	4a16      	ldr	r2, [pc, #88]	; (8006518 <HAL_SD_IRQHandler+0x2c8>)
 80064be:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fb fdab 	bl	8002020 <HAL_DMA_Abort_IT>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01d      	beq.n	800650c <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fb7d 	bl	8006bd4 <SD_DMARxAbort>
}
 80064da:	e017      	b.n	800650c <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f834 	bl	8006558 <HAL_SD_AbortCallback>
}
 80064f0:	e00c      	b.n	800650c <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d006      	beq.n	800650c <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f81c 	bl	8006544 <HAL_SD_ErrorCallback>
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	08006b59 	.word	0x08006b59
 8006518:	08006bd5 	.word	0x08006bd5

0800651c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800657e:	0e1b      	lsrs	r3, r3, #24
 8006580:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	099b      	lsrs	r3, r3, #6
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	b2da      	uxtb	r2, r3
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	089b      	lsrs	r3, r3, #2
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 030f 	and.w	r3, r3, #15
 800659c:	b2da      	uxtb	r2, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c6:	0a1b      	lsrs	r3, r3, #8
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e8:	0e1b      	lsrs	r3, r3, #24
 80065ea:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065fc:	0c1b      	lsrs	r3, r3, #16
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	88db      	ldrh	r3, [r3, #6]
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	b29b      	uxth	r3, r3
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	b29b      	uxth	r3, r3
 8006614:	4313      	orrs	r3, r2
 8006616:	b29a      	uxth	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	b2da      	uxtb	r2, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	b2db      	uxtb	r3, r3
 8006632:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	09db      	lsrs	r3, r3, #7
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	b2da      	uxtb	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	b2da      	uxtb	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	091b      	lsrs	r3, r3, #4
 8006668:	b2db      	uxtb	r3, r3
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	b2da      	uxtb	r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2200      	movs	r2, #0
 8006678:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667e:	2b00      	cmp	r3, #0
 8006680:	f040 8087 	bne.w	8006792 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006694:	b2db      	uxtb	r3, r3
 8006696:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	431a      	orrs	r2, r3
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066aa:	0e1b      	lsrs	r3, r3, #24
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	099b      	lsrs	r3, r3, #6
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	431a      	orrs	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	08db      	lsrs	r3, r3, #3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e4:	0c1b      	lsrs	r3, r3, #16
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	089b      	lsrs	r3, r3, #2
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	b2da      	uxtb	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 0306 	and.w	r3, r3, #6
 8006716:	b2da      	uxtb	r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006720:	0a1b      	lsrs	r3, r3, #8
 8006722:	b2db      	uxtb	r3, r3
 8006724:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	7e1b      	ldrb	r3, [r3, #24]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	09db      	lsrs	r3, r3, #7
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	4313      	orrs	r3, r2
 800673a:	b2da      	uxtb	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	7e1b      	ldrb	r3, [r3, #24]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	3302      	adds	r3, #2
 8006752:	2201      	movs	r2, #1
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800675c:	fb02 f203 	mul.w	r2, r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	7a1b      	ldrb	r3, [r3, #8]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	2301      	movs	r3, #1
 800676e:	fa03 f202 	lsl.w	r2, r3, r2
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800677e:	0a52      	lsrs	r2, r2, #9
 8006780:	fb02 f203 	mul.w	r2, r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800678e:	661a      	str	r2, [r3, #96]	; 0x60
 8006790:	e04d      	b.n	800682e <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006796:	2b01      	cmp	r3, #1
 8006798:	d138      	bne.n	800680c <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b2:	0e1b      	lsrs	r3, r3, #24
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	431a      	orrs	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ca:	0c1b      	lsrs	r3, r3, #16
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e0:	0a1b      	lsrs	r3, r3, #8
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	3301      	adds	r3, #1
 80067ec:	029a      	lsls	r2, r3, #10
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006800:	659a      	str	r2, [r3, #88]	; 0x58
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	661a      	str	r2, [r3, #96]	; 0x60
 800680a:	e010      	b.n	800682e <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006814:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e0c1      	b.n	80069b2 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	099b      	lsrs	r3, r3, #6
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	b2da      	uxtb	r2, r3
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	b2db      	uxtb	r3, r3
 8006846:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800684a:	b2da      	uxtb	r2, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006854:	b2db      	uxtb	r3, r3
 8006856:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	7e9b      	ldrb	r3, [r3, #26]
 800685c:	b2da      	uxtb	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	09db      	lsrs	r3, r3, #7
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	b2db      	uxtb	r3, r3
 800686a:	4313      	orrs	r3, r2
 800686c:	b2da      	uxtb	r2, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800687a:	b2da      	uxtb	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006884:	0e1b      	lsrs	r3, r3, #24
 8006886:	b2db      	uxtb	r3, r3
 8006888:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	09db      	lsrs	r3, r3, #7
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	b2da      	uxtb	r2, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	089b      	lsrs	r3, r3, #2
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	f003 030c 	and.w	r3, r3, #12
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	7fdb      	ldrb	r3, [r3, #31]
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	099b      	lsrs	r3, r3, #6
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	b2da      	uxtb	r2, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	0a1b      	lsrs	r3, r3, #8
 8006920:	b2db      	uxtb	r3, r3
 8006922:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	09db      	lsrs	r3, r3, #7
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	b2da      	uxtb	r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	099b      	lsrs	r3, r3, #6
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	b2da      	uxtb	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	091b      	lsrs	r3, r3, #4
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	b2da      	uxtb	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	089b      	lsrs	r3, r3, #2
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	b2da      	uxtb	r2, r3
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	b2da      	uxtb	r2, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006992:	b2db      	uxtb	r3, r3
 8006994:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006a16:	b5b0      	push	{r4, r5, r7, lr}
 8006a18:	b08e      	sub	sp, #56	; 0x38
 8006a1a:	af04      	add	r7, sp, #16
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2203      	movs	r2, #3
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d02e      	beq.n	8006a92 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3a:	d106      	bne.n	8006a4a <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	639a      	str	r2, [r3, #56]	; 0x38
 8006a48:	e029      	b.n	8006a9e <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a50:	d10a      	bne.n	8006a68 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa96 	bl	8006f84 <SD_WideBus_Enable>
 8006a58:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	639a      	str	r2, [r3, #56]	; 0x38
 8006a66:	e01a      	b.n	8006a9e <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fad5 	bl	800701e <SD_WideBus_Disable>
 8006a74:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	639a      	str	r2, [r3, #56]	; 0x38
 8006a82:	e00c      	b.n	8006a9e <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
 8006a90:	e005      	b.n	8006a9e <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e024      	b.n	8006b06 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681d      	ldr	r5, [r3, #0]
 8006ae2:	466c      	mov	r4, sp
 8006ae4:	f107 0318 	add.w	r3, r7, #24
 8006ae8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006af0:	f107 030c 	add.w	r3, r7, #12
 8006af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006af6:	4628      	mov	r0, r5
 8006af8:	f002 fea8 	bl	800984c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3728      	adds	r7, #40	; 0x28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bdb0      	pop	{r4, r5, r7, pc}

08006b0e <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b086      	sub	sp, #24
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8006b16:	2304      	movs	r3, #4
 8006b18:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8006b22:	f107 030c 	add.w	r3, r7, #12
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa01 	bl	8006f30 <SD_SendStatus>
 8006b2e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	0a5b      	lsrs	r3, r3, #9
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d127      	bne.n	8006bcc <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7ff ffc6 	bl	8006b0e <HAL_SD_GetCardState>
 8006b82:	4603      	mov	r3, r0
 8006b84:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	2b06      	cmp	r3, #6
 8006b98:	d002      	beq.n	8006ba0 <SD_DMATxAbort+0x48>
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d115      	bne.n	8006bcc <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f002 ffe3 	bl	8009b70 <SDMMC_CmdStopTransfer>
 8006baa:	4602      	mov	r2, r0
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fcca 	bl	8006558 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8006bc4:	e002      	b.n	8006bcc <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fcbc 	bl	8006544 <HAL_SD_ErrorCallback>
}
 8006bcc:	bf00      	nop
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d127      	bne.n	8006c48 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff ff88 	bl	8006b0e <HAL_SD_GetCardState>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006c10:	7afb      	ldrb	r3, [r7, #11]
 8006c12:	2b06      	cmp	r3, #6
 8006c14:	d002      	beq.n	8006c1c <SD_DMARxAbort+0x48>
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	2b05      	cmp	r3, #5
 8006c1a:	d115      	bne.n	8006c48 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f002 ffa5 	bl	8009b70 <SDMMC_CmdStopTransfer>
 8006c26:	4602      	mov	r2, r0
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff fc8c 	bl	8006558 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8006c40:	e002      	b.n	8006c48 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff fc7e 	bl	8006544 <HAL_SD_ErrorCallback>
}
 8006c48:	bf00      	nop
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c50:	b5b0      	push	{r4, r5, r7, lr}
 8006c52:	b094      	sub	sp, #80	; 0x50
 8006c54:	af04      	add	r7, sp, #16
 8006c56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f002 fe48 	bl	80098fa <SDIO_GetPowerState>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d102      	bne.n	8006c76 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c74:	e0b0      	b.n	8006dd8 <SD_InitCard+0x188>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d02f      	beq.n	8006cde <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f003 f88e 	bl	8009da4 <SDMMC_CmdSendCID>
 8006c88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <SD_InitCard+0x44>
    {
      return errorstate;
 8006c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c92:	e0a1      	b.n	8006dd8 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f002 fe72 	bl	8009984 <SDIO_GetResponse>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2104      	movs	r1, #4
 8006cac:	4618      	mov	r0, r3
 8006cae:	f002 fe69 	bl	8009984 <SDIO_GetResponse>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2108      	movs	r1, #8
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f002 fe60 	bl	8009984 <SDIO_GetResponse>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	210c      	movs	r1, #12
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f002 fe57 	bl	8009984 <SDIO_GetResponse>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d00d      	beq.n	8006d02 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f107 020e 	add.w	r2, r7, #14
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f003 f898 	bl	8009e26 <SDMMC_CmdSetRelAdd>
 8006cf6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <SD_InitCard+0xb2>
    {
      return errorstate;
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d00:	e06a      	b.n	8006dd8 <SD_InitCard+0x188>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d036      	beq.n	8006d78 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006d0a:	89fb      	ldrh	r3, [r7, #14]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f003 f860 	bl	8009de4 <SDMMC_CmdSendCSD>
 8006d24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <SD_InitCard+0xe0>
    {
      return errorstate;
 8006d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2e:	e053      	b.n	8006dd8 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2100      	movs	r1, #0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f002 fe24 	bl	8009984 <SDIO_GetResponse>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2104      	movs	r1, #4
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f002 fe1b 	bl	8009984 <SDIO_GetResponse>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2108      	movs	r1, #8
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f002 fe12 	bl	8009984 <SDIO_GetResponse>
 8006d60:	4602      	mov	r2, r0
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	210c      	movs	r1, #12
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f002 fe09 	bl	8009984 <SDIO_GetResponse>
 8006d72:	4602      	mov	r2, r0
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2104      	movs	r1, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f002 fe00 	bl	8009984 <SDIO_GetResponse>
 8006d84:	4603      	mov	r3, r0
 8006d86:	0d1a      	lsrs	r2, r3, #20
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8006d8c:	f107 0310 	add.w	r3, r7, #16
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff fbea 	bl	800656c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6819      	ldr	r1, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da0:	041b      	lsls	r3, r3, #16
 8006da2:	461a      	mov	r2, r3
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	4608      	mov	r0, r1
 8006daa:	f002 ff05 	bl	8009bb8 <SDMMC_CmdSelDesel>
 8006dae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <SD_InitCard+0x16a>
  {
    return errorstate;
 8006db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db8:	e00e      	b.n	8006dd8 <SD_InitCard+0x188>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681d      	ldr	r5, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	466c      	mov	r4, sp
 8006dc2:	f103 0210 	add.w	r2, r3, #16
 8006dc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006dcc:	3304      	adds	r3, #4
 8006dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f002 fd3b 	bl	800984c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3740      	adds	r7, #64	; 0x40
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bdb0      	pop	{r4, r5, r7, pc}

08006de0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f002 ff00 	bl	8009c02 <SDMMC_CmdGoIdleState>
 8006e02:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <SD_PowerON+0x2e>
  {
    return errorstate;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	e08c      	b.n	8006f28 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f002 ff15 	bl	8009c42 <SDMMC_CmdOperCond>
 8006e18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d03d      	beq.n	8006e9c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8006e26:	e032      	b.n	8006e8e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	60ba      	str	r2, [r7, #8]
 8006e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d102      	bne.n	8006e3c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e3a:	e075      	b.n	8006f28 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f002 ff1e 	bl	8009c84 <SDMMC_CmdAppCommand>
 8006e48:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e54:	e068      	b.n	8006f28 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f002 ff35 	bl	8009ccc <SDMMC_CmdAppOperCommand>
 8006e62:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e6e:	e05b      	b.n	8006f28 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2100      	movs	r1, #0
 8006e76:	4618      	mov	r0, r3
 8006e78:	f002 fd84 	bl	8009984 <SDIO_GetResponse>
 8006e7c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	0fdb      	lsrs	r3, r3, #31
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <SD_PowerON+0xaa>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <SD_PowerON+0xac>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0c9      	beq.n	8006e28 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	645a      	str	r2, [r3, #68]	; 0x44
 8006e9a:	e044      	b.n	8006f26 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8006ea2:	e031      	b.n	8006f08 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	60ba      	str	r2, [r7, #8]
 8006eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d102      	bne.n	8006eb8 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006eb6:	e037      	b.n	8006f28 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f002 fee0 	bl	8009c84 <SDMMC_CmdAppCommand>
 8006ec4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <SD_PowerON+0xf0>
      {
        return errorstate;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	e02b      	b.n	8006f28 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f002 fef7 	bl	8009ccc <SDMMC_CmdAppOperCommand>
 8006ede:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <SD_PowerON+0x10a>
      {
        return errorstate;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	e01e      	b.n	8006f28 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2100      	movs	r1, #0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f002 fd47 	bl	8009984 <SDIO_GetResponse>
 8006ef6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	0fdb      	lsrs	r3, r3, #31
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <SD_PowerON+0x124>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <SD_PowerON+0x126>
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0ca      	beq.n	8006ea4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	645a      	str	r2, [r3, #68]	; 0x44
 8006f1e:	e002      	b.n	8006f26 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8006f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f48:	e018      	b.n	8006f7c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f002 ff88 	bl	8009e6c <SDMMC_CmdSendStatus>
 8006f5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <SD_SendStatus+0x38>
  {
    return errorstate;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	e009      	b.n	8006f7c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f002 fd08 	bl	8009984 <SDIO_GetResponse>
 8006f74:	4602      	mov	r2, r0
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f002 fcf0 	bl	8009984 <SDIO_GetResponse>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fae:	d102      	bne.n	8006fb6 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fb4:	e02f      	b.n	8007016 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fb6:	f107 030c 	add.w	r3, r7, #12
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f87b 	bl	80070b8 <SD_FindSCR>
 8006fc2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	e023      	b.n	8007016 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01c      	beq.n	8007012 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	f002 fe4d 	bl	8009c84 <SDMMC_CmdAppCommand>
 8006fea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	e00f      	b.n	8007016 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2102      	movs	r1, #2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f002 fe8a 	bl	8009d16 <SDMMC_CmdBusWidth>
 8007002:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	e003      	b.n	8007016 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800700e:	2300      	movs	r3, #0
 8007010:	e001      	b.n	8007016 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007012:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f002 fca3 	bl	8009984 <SDIO_GetResponse>
 800703e:	4603      	mov	r3, r0
 8007040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007048:	d102      	bne.n	8007050 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800704a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800704e:	e02f      	b.n	80070b0 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f82e 	bl	80070b8 <SD_FindSCR>
 800705c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	e023      	b.n	80070b0 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01c      	beq.n	80070ac <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707a:	041b      	lsls	r3, r3, #16
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f002 fe00 	bl	8009c84 <SDMMC_CmdAppCommand>
 8007084:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	e00f      	b.n	80070b0 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f002 fe3d 	bl	8009d16 <SDMMC_CmdBusWidth>
 800709c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	e003      	b.n	80070b0 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	e001      	b.n	80070b0 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80070b8:	b590      	push	{r4, r7, lr}
 80070ba:	b08f      	sub	sp, #60	; 0x3c
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80070c6:	f7fa fa7f 	bl	80015c8 <HAL_GetTick>
 80070ca:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	2300      	movs	r3, #0
 80070d6:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2108      	movs	r1, #8
 80070de:	4618      	mov	r0, r3
 80070e0:	f002 fc91 	bl	8009a06 <SDMMC_CmdBlockLength>
 80070e4:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	e0a8      	b.n	8007242 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f002 fdc1 	bl	8009c84 <SDMMC_CmdAppCommand>
 8007102:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <SD_FindSCR+0x56>
  {
    return errorstate;
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	e099      	b.n	8007242 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800710e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007112:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8007114:	2308      	movs	r3, #8
 8007116:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007118:	2330      	movs	r3, #48	; 0x30
 800711a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800711c:	2302      	movs	r3, #2
 800711e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007120:	2300      	movs	r3, #0
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007124:	2301      	movs	r3, #1
 8007126:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f107 0214 	add.w	r2, r7, #20
 8007130:	4611      	mov	r1, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f002 fc3b 	bl	80099ae <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f002 fe0e 	bl	8009d5e <SDMMC_CmdSendSCR>
 8007142:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	2b00      	cmp	r3, #0
 8007148:	d022      	beq.n	8007190 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	e079      	b.n	8007242 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00e      	beq.n	800717a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6819      	ldr	r1, [r3, #0]
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	f107 020c 	add.w	r2, r7, #12
 8007168:	18d4      	adds	r4, r2, r3
 800716a:	4608      	mov	r0, r1
 800716c:	f002 fb99 	bl	80098a2 <SDIO_ReadFIFO>
 8007170:	4603      	mov	r3, r0
 8007172:	6023      	str	r3, [r4, #0]
      index++;
 8007174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007176:	3301      	adds	r3, #1
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800717a:	f7fa fa25 	bl	80015c8 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007188:	d102      	bne.n	8007190 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800718a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800718e:	e058      	b.n	8007242 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007196:	f240 432a 	movw	r3, #1066	; 0x42a
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0d6      	beq.n	800714e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2208      	movs	r2, #8
 80071b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071b6:	2308      	movs	r3, #8
 80071b8:	e043      	b.n	8007242 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2202      	movs	r2, #2
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071d0:	2302      	movs	r3, #2
 80071d2:	e036      	b.n	8007242 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2220      	movs	r2, #32
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80071ea:	2320      	movs	r3, #32
 80071ec:	e029      	b.n	8007242 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	061a      	lsls	r2, r3, #24
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007204:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	0a1b      	lsrs	r3, r3, #8
 800720a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800720e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800721a:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800721c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	061a      	lsls	r2, r3, #24
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800722a:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8007234:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	0e1b      	lsrs	r3, r3, #24
 800723a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	373c      	adds	r7, #60	; 0x3c
 8007246:	46bd      	mov	sp, r7
 8007248:	bd90      	pop	{r4, r7, pc}

0800724a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800724a:	b590      	push	{r4, r7, lr}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	e00d      	b.n	800727e <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6819      	ldr	r1, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	18d4      	adds	r4, r2, r3
 800726e:	4608      	mov	r0, r1
 8007270:	f002 fb17 	bl	80098a2 <SDIO_ReadFIFO>
 8007274:	4603      	mov	r3, r0
 8007276:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b07      	cmp	r3, #7
 8007282:	d9ee      	bls.n	8007262 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	f103 0220 	add.w	r2, r3, #32
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	bd90      	pop	{r4, r7, pc}

0800729a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e00b      	b.n	80072ca <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4413      	add	r3, r2
 80072be:	4619      	mov	r1, r3
 80072c0:	f002 fafc 	bl	80098bc <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b07      	cmp	r3, #7
 80072ce:	d9f0      	bls.n	80072b2 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	f103 0220 	add.w	r2, r3, #32
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e05e      	b.n	80073b6 <HAL_SPI_Init+0xd0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f008 ff6e 	bl	80101f4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800732e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	ea42 0103 	orr.w	r1, r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	f003 0104 	and.w	r1, r3, #4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007394:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  __HAL_SPI_ENABLE(hspi);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b2:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b08a      	sub	sp, #40	; 0x28
 80073c2:	af02      	add	r7, sp, #8
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_SPI_Transmit+0x26>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e125      	b.n	8007630 <HAL_SPI_Transmit+0x272>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ec:	f7fa f8ec 	bl	80015c8 <HAL_GetTick>
 80073f0:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d002      	beq.n	8007404 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073fe:	2302      	movs	r3, #2
 8007400:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007402:	e10c      	b.n	800761e <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0))
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <HAL_SPI_Transmit+0x52>
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d102      	bne.n	8007416 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007414:	e103      	b.n	800761e <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2203      	movs	r2, #3
 800741a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800745c:	d107      	bne.n	800746e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800746c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d007      	beq.n	800748c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800748a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007494:	d147      	bne.n	8007526 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <HAL_SPI_Transmit+0xea>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d138      	bne.n	800751a <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	881a      	ldrh	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	3302      	adds	r3, #2
 80074b6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074c6:	e028      	b.n	800751a <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d10f      	bne.n	80074f6 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	881a      	ldrh	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	3302      	adds	r3, #2
 80074e4:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80074f4:	e011      	b.n	800751a <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <HAL_SPI_Transmit+0x156>
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007502:	d00a      	beq.n	800751a <HAL_SPI_Transmit+0x15c>
 8007504:	f7fa f860 	bl	80015c8 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d802      	bhi.n	800751a <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007518:	e081      	b.n	800761e <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1d1      	bne.n	80074c8 <HAL_SPI_Transmit+0x10a>
 8007524:	e048      	b.n	80075b8 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <HAL_SPI_Transmit+0x17a>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d13a      	bne.n	80075ae <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	3301      	adds	r3, #1
 8007548:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007558:	e029      	b.n	80075ae <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b02      	cmp	r3, #2
 8007566:	d110      	bne.n	800758a <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	330c      	adds	r3, #12
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	7812      	ldrb	r2, [r2, #0]
 8007572:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	3301      	adds	r3, #1
 8007578:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	86da      	strh	r2, [r3, #54]	; 0x36
 8007588:	e011      	b.n	80075ae <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <HAL_SPI_Transmit+0x1ea>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007596:	d00a      	beq.n	80075ae <HAL_SPI_Transmit+0x1f0>
 8007598:	f7fa f816 	bl	80015c8 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d802      	bhi.n	80075ae <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075ac:	e037      	b.n	800761e <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1d0      	bne.n	800755a <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2201      	movs	r2, #1
 80075c0:	2102      	movs	r1, #2
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f9d8 	bl	8007978 <SPI_WaitFlagStateUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075d2:	e024      	b.n	800761e <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 fa36 	bl	8007a4a <SPI_CheckFlag_BSY>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d005      	beq.n	80075f0 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80075ee:	e016      	b.n	800761e <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e000      	b.n	800761e <HAL_SPI_Transmit+0x260>
  }

error:
 800761c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800762e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3720      	adds	r7, #32
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08c      	sub	sp, #48	; 0x30
 800763c:	af02      	add	r7, sp, #8
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	2300      	movs	r3, #0
 800764c:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8007652:	2301      	movs	r3, #1
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_SPI_TransmitReceive+0x32>
 8007666:	2302      	movs	r3, #2
 8007668:	e182      	b.n	8007970 <HAL_SPI_TransmitReceive+0x338>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007672:	f7f9 ffa9 	bl	80015c8 <HAL_GetTick>
 8007676:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800767e:	b2db      	uxtb	r3, r3
 8007680:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d00e      	beq.n	80076ac <HAL_SPI_TransmitReceive+0x74>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007694:	d106      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x6c>
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d003      	beq.n	80076ac <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80076a4:	2302      	movs	r3, #2
 80076a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80076aa:	e157      	b.n	800795c <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <HAL_SPI_TransmitReceive+0x86>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_TransmitReceive+0x86>
 80076b8:	887b      	ldrh	r3, [r7, #2]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80076c4:	e14a      	b.n	800795c <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d103      	bne.n	80076da <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2205      	movs	r2, #5
 80076d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	887a      	ldrh	r2, [r7, #2]
 80076ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	887a      	ldrh	r2, [r7, #2]
 80076f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	887a      	ldrh	r2, [r7, #2]
 80076fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	887a      	ldrh	r2, [r7, #2]
 8007702:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d007      	beq.n	800772e <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800772c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007736:	d171      	bne.n	800781c <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d004      	beq.n	800774a <HAL_SPI_TransmitReceive+0x112>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007744:	b29b      	uxth	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d15d      	bne.n	8007806 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	881a      	ldrh	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	3302      	adds	r3, #2
 8007758:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007768:	e04d      	b.n	8007806 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01c      	beq.n	80077aa <HAL_SPI_TransmitReceive+0x172>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d017      	beq.n	80077aa <HAL_SPI_TransmitReceive+0x172>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b02      	cmp	r3, #2
 8007786:	d110      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	881a      	ldrh	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	3302      	adds	r3, #2
 8007796:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d018      	beq.n	80077e6 <HAL_SPI_TransmitReceive+0x1ae>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d111      	bne.n	80077e6 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3302      	adds	r3, #2
 80077d2:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80077e2:	2301      	movs	r3, #1
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ec:	d00b      	beq.n	8007806 <HAL_SPI_TransmitReceive+0x1ce>
 80077ee:	f7f9 feeb 	bl	80015c8 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d803      	bhi.n	8007806 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007804:	e0aa      	b.n	800795c <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1ac      	bne.n	800776a <HAL_SPI_TransmitReceive+0x132>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1a7      	bne.n	800776a <HAL_SPI_TransmitReceive+0x132>
 800781a:	e070      	b.n	80078fe <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <HAL_SPI_TransmitReceive+0x1f6>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b01      	cmp	r3, #1
 800782c:	d15d      	bne.n	80078ea <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	330c      	adds	r3, #12
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	7812      	ldrb	r2, [r2, #0]
 8007838:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3301      	adds	r3, #1
 800783e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800784e:	e04c      	b.n	80078ea <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d01c      	beq.n	8007890 <HAL_SPI_TransmitReceive+0x258>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d017      	beq.n	8007890 <HAL_SPI_TransmitReceive+0x258>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b02      	cmp	r3, #2
 800786c:	d110      	bne.n	8007890 <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	60ba      	str	r2, [r7, #8]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	6812      	ldr	r2, [r2, #0]
 8007878:	320c      	adds	r2, #12
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007882:	b29b      	uxth	r3, r3
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d017      	beq.n	80078ca <HAL_SPI_TransmitReceive+0x292>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d110      	bne.n	80078ca <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68d9      	ldr	r1, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	b2ca      	uxtb	r2, r1
 80078b6:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80078c6:	2301      	movs	r3, #1
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078d0:	d00b      	beq.n	80078ea <HAL_SPI_TransmitReceive+0x2b2>
 80078d2:	f7f9 fe79 	bl	80015c8 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078de:	429a      	cmp	r2, r3
 80078e0:	d803      	bhi.n	80078ea <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80078e8:	e038      	b.n	800795c <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1ad      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x218>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1a8      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	2201      	movs	r2, #1
 8007906:	2102      	movs	r1, #2
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f835 	bl	8007978 <SPI_WaitFlagStateUntilTimeout>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800791a:	e01f      	b.n	800795c <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f892 	bl	8007a4a <SPI_CheckFlag_BSY>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d006      	beq.n	800793a <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007938:	e010      	b.n	800795c <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10b      	bne.n	800795a <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	e000      	b.n	800795c <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 800795a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800796c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007970:	4618      	mov	r0, r3
 8007972:	3728      	adds	r7, #40	; 0x28
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8007986:	e04d      	b.n	8007a24 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800798e:	d049      	beq.n	8007a24 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8007996:	f7f9 fe17 	bl	80015c8 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d83e      	bhi.n	8007a24 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079b4:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079be:	d111      	bne.n	80079e4 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c8:	d004      	beq.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0x5c>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079d2:	d107      	bne.n	80079e4 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ec:	d110      	bne.n	8007a10 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6819      	ldr	r1, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80079fc:	400b      	ands	r3, r1
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e00e      	b.n	8007a42 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d101      	bne.n	8007a38 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8007a34:	2201      	movs	r2, #1
 8007a36:	e000      	b.n	8007a3a <SPI_WaitFlagStateUntilTimeout+0xc2>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d1a3      	bne.n	8007988 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b086      	sub	sp, #24
 8007a4e:	af02      	add	r7, sp, #8
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2180      	movs	r1, #128	; 0x80
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff ff89 	bl	8007978 <SPI_WaitFlagStateUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d007      	beq.n	8007a7c <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a70:	f043 0220 	orr.w	r2, r3, #32
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e000      	b.n	8007a7e <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e034      	b.n	8007b06 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d106      	bne.n	8007ab6 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f008 fdb1 	bl	8010618 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3308      	adds	r3, #8
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f001 fdcd 	bl	8009660 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	68b9      	ldr	r1, [r7, #8]
 8007ad2:	f001 fe29 	bl	8009728 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6858      	ldr	r0, [r3, #4]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	f001 fe72 	bl	80097cc <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	6892      	ldr	r2, [r2, #8]
 8007af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	6892      	ldr	r2, [r2, #8]
 8007afc:	f041 0101 	orr.w	r1, r1, #1
 8007b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e01d      	b.n	8007b5c <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f008 fc09 	bl	801034c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	f000 fbc7 	bl	80082e0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e01d      	b.n	8007be8 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f815 	bl	8007bf0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4610      	mov	r0, r2
 8007bda:	f000 fb81 	bl	80082e0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}  
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <HAL_TIM_PWM_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2201      	movs	r2, #1
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fc84 	bl	8008524 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <HAL_TIM_PWM_Start+0x60>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d004      	beq.n	8007c30 <HAL_TIM_PWM_Start+0x2c>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a0f      	ldr	r2, [pc, #60]	; (8007c68 <HAL_TIM_PWM_Start+0x64>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d101      	bne.n	8007c34 <HAL_TIM_PWM_Start+0x30>
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <HAL_TIM_PWM_Start+0x32>
 8007c34:	2300      	movs	r3, #0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c48:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0201 	orr.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
} 
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	40010000 	.word	0x40010000
 8007c68:	40010400 	.word	0x40010400

08007c6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fc50 	bl	8008524 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a22      	ldr	r2, [pc, #136]	; (8007d14 <HAL_TIM_PWM_Stop+0xa8>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_TIM_PWM_Stop+0x2c>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a21      	ldr	r2, [pc, #132]	; (8007d18 <HAL_TIM_PWM_Stop+0xac>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d101      	bne.n	8007c9c <HAL_TIM_PWM_Stop+0x30>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <HAL_TIM_PWM_Stop+0x32>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d017      	beq.n	8007cd2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6a1a      	ldr	r2, [r3, #32]
 8007ca8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10f      	bne.n	8007cd2 <HAL_TIM_PWM_Stop+0x66>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a1a      	ldr	r2, [r3, #32]
 8007cb8:	f240 4344 	movw	r3, #1092	; 0x444
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d107      	bne.n	8007cd2 <HAL_TIM_PWM_Stop+0x66>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6a1a      	ldr	r2, [r3, #32]
 8007cd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10f      	bne.n	8007d02 <HAL_TIM_PWM_Stop+0x96>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	f240 4344 	movw	r3, #1092	; 0x444
 8007cec:	4013      	ands	r3, r2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d107      	bne.n	8007d02 <HAL_TIM_PWM_Stop+0x96>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0201 	bic.w	r2, r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
} 
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40010000 	.word	0x40010000
 8007d18:	40010400 	.word	0x40010400

08007d1c <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d122      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d11b      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0202 	mvn.w	r2, #2
 8007d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa9f 	bl	80082a2 <HAL_TIM_IC_CaptureCallback>
 8007d64:	e005      	b.n	8007d72 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa91 	bl	800828e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 faa2 	bl	80082b6 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d122      	bne.n	8007dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d11b      	bne.n	8007dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0204 	mvn.w	r2, #4
 8007d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa75 	bl	80082a2 <HAL_TIM_IC_CaptureCallback>
 8007db8:	e005      	b.n	8007dc6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa67 	bl	800828e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fa78 	bl	80082b6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d122      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d11b      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0208 	mvn.w	r2, #8
 8007df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2204      	movs	r2, #4
 8007df6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa4b 	bl	80082a2 <HAL_TIM_IC_CaptureCallback>
 8007e0c:	e005      	b.n	8007e1a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa3d 	bl	800828e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fa4e 	bl	80082b6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0310 	and.w	r3, r3, #16
 8007e2a:	2b10      	cmp	r3, #16
 8007e2c:	d122      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d11b      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0210 	mvn.w	r2, #16
 8007e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2208      	movs	r2, #8
 8007e4a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa21 	bl	80082a2 <HAL_TIM_IC_CaptureCallback>
 8007e60:	e005      	b.n	8007e6e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa13 	bl	800828e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fa24 	bl	80082b6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d10e      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d107      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0201 	mvn.w	r2, #1
 8007e98:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7f9 f9c6 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d10e      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb8:	2b80      	cmp	r3, #128	; 0x80
 8007eba:	d107      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ec4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fd94 	bl	80089f4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d10e      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d107      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ef0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9e9 	bl	80082ca <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d10e      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f003 0320 	and.w	r3, r3, #32
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d107      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0220 	mvn.w	r2, #32
 8007f1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fd5e 	bl	80089e0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007f42:	2302      	movs	r3, #2
 8007f44:	e0b4      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b0c      	cmp	r3, #12
 8007f5a:	f200 809f 	bhi.w	800809c <HAL_TIM_PWM_ConfigChannel+0x170>
 8007f5e:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f99 	.word	0x08007f99
 8007f68:	0800809d 	.word	0x0800809d
 8007f6c:	0800809d 	.word	0x0800809d
 8007f70:	0800809d 	.word	0x0800809d
 8007f74:	08007fd9 	.word	0x08007fd9
 8007f78:	0800809d 	.word	0x0800809d
 8007f7c:	0800809d 	.word	0x0800809d
 8007f80:	0800809d 	.word	0x0800809d
 8007f84:	0800801b 	.word	0x0800801b
 8007f88:	0800809d 	.word	0x0800809d
 8007f8c:	0800809d 	.word	0x0800809d
 8007f90:	0800809d 	.word	0x0800809d
 8007f94:	0800805b 	.word	0x0800805b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fae4 	bl	800856c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0208 	orr.w	r2, r2, #8
 8007fb2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699a      	ldr	r2, [r3, #24]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0204 	bic.w	r2, r2, #4
 8007fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6999      	ldr	r1, [r3, #24]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	691a      	ldr	r2, [r3, #16]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	619a      	str	r2, [r3, #24]
    }
    break;
 8007fd6:	e062      	b.n	800809e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fa28 	bl	8008434 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ff2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699a      	ldr	r2, [r3, #24]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6999      	ldr	r1, [r3, #24]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	021a      	lsls	r2, r3, #8
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	619a      	str	r2, [r3, #24]
    }
    break;
 8008018:	e041      	b.n	800809e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fb17 	bl	8008654 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69da      	ldr	r2, [r3, #28]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f042 0208 	orr.w	r2, r2, #8
 8008034:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69da      	ldr	r2, [r3, #28]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0204 	bic.w	r2, r2, #4
 8008044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69d9      	ldr	r1, [r3, #28]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	61da      	str	r2, [r3, #28]
    }
    break;
 8008058:	e021      	b.n	800809e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fb6f 	bl	8008744 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69da      	ldr	r2, [r3, #28]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008074:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69da      	ldr	r2, [r3, #28]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69d9      	ldr	r1, [r3, #28]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	021a      	lsls	r2, r3, #8
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	61da      	str	r2, [r3, #28]
    }
    break;
 800809a:	e000      	b.n	800809e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 800809c:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d101      	bne.n	80080d4 <HAL_TIM_ConfigClockSource+0x1c>
 80080d0:	2302      	movs	r3, #2
 80080d2:	e0d8      	b.n	8008286 <HAL_TIM_ConfigClockSource+0x1ce>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810c:	d052      	beq.n	80081b4 <HAL_TIM_ConfigClockSource+0xfc>
 800810e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008112:	f200 80ae 	bhi.w	8008272 <HAL_TIM_ConfigClockSource+0x1ba>
 8008116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811a:	d027      	beq.n	800816c <HAL_TIM_ConfigClockSource+0xb4>
 800811c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008120:	f200 80a7 	bhi.w	8008272 <HAL_TIM_ConfigClockSource+0x1ba>
 8008124:	2b70      	cmp	r3, #112	; 0x70
 8008126:	d02a      	beq.n	800817e <HAL_TIM_ConfigClockSource+0xc6>
 8008128:	2b70      	cmp	r3, #112	; 0x70
 800812a:	f200 80a2 	bhi.w	8008272 <HAL_TIM_ConfigClockSource+0x1ba>
 800812e:	2b60      	cmp	r3, #96	; 0x60
 8008130:	d063      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x142>
 8008132:	2b60      	cmp	r3, #96	; 0x60
 8008134:	f200 809d 	bhi.w	8008272 <HAL_TIM_ConfigClockSource+0x1ba>
 8008138:	2b50      	cmp	r3, #80	; 0x50
 800813a:	d04e      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x122>
 800813c:	2b50      	cmp	r3, #80	; 0x50
 800813e:	f200 8098 	bhi.w	8008272 <HAL_TIM_ConfigClockSource+0x1ba>
 8008142:	2b40      	cmp	r3, #64	; 0x40
 8008144:	d069      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x162>
 8008146:	2b40      	cmp	r3, #64	; 0x40
 8008148:	f200 8093 	bhi.w	8008272 <HAL_TIM_ConfigClockSource+0x1ba>
 800814c:	2b30      	cmp	r3, #48	; 0x30
 800814e:	f000 8089 	beq.w	8008264 <HAL_TIM_ConfigClockSource+0x1ac>
 8008152:	2b30      	cmp	r3, #48	; 0x30
 8008154:	f200 808d 	bhi.w	8008272 <HAL_TIM_ConfigClockSource+0x1ba>
 8008158:	2b20      	cmp	r3, #32
 800815a:	d07c      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x19e>
 800815c:	2b20      	cmp	r3, #32
 800815e:	f200 8088 	bhi.w	8008272 <HAL_TIM_ConfigClockSource+0x1ba>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d069      	beq.n	800823a <HAL_TIM_ConfigClockSource+0x182>
 8008166:	2b10      	cmp	r3, #16
 8008168:	d06e      	beq.n	8008248 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 800816a:	e082      	b.n	8008272 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0207 	bic.w	r2, r2, #7
 800817a:	609a      	str	r2, [r3, #8]
    break;
 800817c:	e07a      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	6899      	ldr	r1, [r3, #8]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f000 fbc0 	bl	8008912 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	609a      	str	r2, [r3, #8]
    break;
 80081b2:	e05f      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6818      	ldr	r0, [r3, #0]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	6899      	ldr	r1, [r3, #8]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f000 fba5 	bl	8008912 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081d6:	609a      	str	r2, [r3, #8]
    break;
 80081d8:	e04c      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6818      	ldr	r0, [r3, #0]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	6859      	ldr	r1, [r3, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f000 fb0c 	bl	8008804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2150      	movs	r1, #80	; 0x50
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fb6d 	bl	80088d2 <TIM_ITRx_SetConfig>
    break;
 80081f8:	e03c      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	6859      	ldr	r1, [r3, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	461a      	mov	r2, r3
 8008208:	f000 fb2f 	bl	800886a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2160      	movs	r1, #96	; 0x60
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fb5d 	bl	80088d2 <TIM_ITRx_SetConfig>
    break;
 8008218:	e02c      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	6859      	ldr	r1, [r3, #4]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	461a      	mov	r2, r3
 8008228:	f000 faec 	bl	8008804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2140      	movs	r1, #64	; 0x40
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fb4d 	bl	80088d2 <TIM_ITRx_SetConfig>
    break;
 8008238:	e01c      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2100      	movs	r1, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fb46 	bl	80088d2 <TIM_ITRx_SetConfig>
    break;
 8008246:	e015      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2110      	movs	r1, #16
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fb3f 	bl	80088d2 <TIM_ITRx_SetConfig>
    break;
 8008254:	e00e      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2120      	movs	r1, #32
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fb38 	bl	80088d2 <TIM_ITRx_SetConfig>
    break;
 8008262:	e007      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2130      	movs	r1, #48	; 0x30
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fb31 	bl	80088d2 <TIM_ITRx_SetConfig>
    break;
 8008270:	e000      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x1bc>
    break;    
 8008272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
	...

080082e0 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a44      	ldr	r2, [pc, #272]	; (8008408 <TIM_Base_SetConfig+0x128>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d013      	beq.n	8008324 <TIM_Base_SetConfig+0x44>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008302:	d00f      	beq.n	8008324 <TIM_Base_SetConfig+0x44>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a41      	ldr	r2, [pc, #260]	; (800840c <TIM_Base_SetConfig+0x12c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00b      	beq.n	8008324 <TIM_Base_SetConfig+0x44>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a40      	ldr	r2, [pc, #256]	; (8008410 <TIM_Base_SetConfig+0x130>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d007      	beq.n	8008324 <TIM_Base_SetConfig+0x44>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a3f      	ldr	r2, [pc, #252]	; (8008414 <TIM_Base_SetConfig+0x134>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d003      	beq.n	8008324 <TIM_Base_SetConfig+0x44>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a3e      	ldr	r2, [pc, #248]	; (8008418 <TIM_Base_SetConfig+0x138>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d101      	bne.n	8008328 <TIM_Base_SetConfig+0x48>
 8008324:	2301      	movs	r3, #1
 8008326:	e000      	b.n	800832a <TIM_Base_SetConfig+0x4a>
 8008328:	2300      	movs	r3, #0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d008      	beq.n	8008340 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a31      	ldr	r2, [pc, #196]	; (8008408 <TIM_Base_SetConfig+0x128>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d02b      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834e:	d027      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a2e      	ldr	r2, [pc, #184]	; (800840c <TIM_Base_SetConfig+0x12c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d023      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a2d      	ldr	r2, [pc, #180]	; (8008410 <TIM_Base_SetConfig+0x130>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d01f      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a2c      	ldr	r2, [pc, #176]	; (8008414 <TIM_Base_SetConfig+0x134>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d01b      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a2b      	ldr	r2, [pc, #172]	; (8008418 <TIM_Base_SetConfig+0x138>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d017      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a2a      	ldr	r2, [pc, #168]	; (800841c <TIM_Base_SetConfig+0x13c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d013      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a29      	ldr	r2, [pc, #164]	; (8008420 <TIM_Base_SetConfig+0x140>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00f      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a28      	ldr	r2, [pc, #160]	; (8008424 <TIM_Base_SetConfig+0x144>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00b      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a27      	ldr	r2, [pc, #156]	; (8008428 <TIM_Base_SetConfig+0x148>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d007      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a26      	ldr	r2, [pc, #152]	; (800842c <TIM_Base_SetConfig+0x14c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_Base_SetConfig+0xc0>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a25      	ldr	r2, [pc, #148]	; (8008430 <TIM_Base_SetConfig+0x150>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d101      	bne.n	80083a4 <TIM_Base_SetConfig+0xc4>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e000      	b.n	80083a6 <TIM_Base_SetConfig+0xc6>
 80083a4:	2300      	movs	r3, #0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d008      	beq.n	80083bc <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a0c      	ldr	r2, [pc, #48]	; (8008408 <TIM_Base_SetConfig+0x128>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d003      	beq.n	80083e2 <TIM_Base_SetConfig+0x102>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a0e      	ldr	r2, [pc, #56]	; (8008418 <TIM_Base_SetConfig+0x138>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d101      	bne.n	80083e6 <TIM_Base_SetConfig+0x106>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <TIM_Base_SetConfig+0x108>
 80083e6:	2300      	movs	r3, #0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	615a      	str	r2, [r3, #20]
}
 80083fa:	bf00      	nop
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	40010000 	.word	0x40010000
 800840c:	40000400 	.word	0x40000400
 8008410:	40000800 	.word	0x40000800
 8008414:	40000c00 	.word	0x40000c00
 8008418:	40010400 	.word	0x40010400
 800841c:	40014000 	.word	0x40014000
 8008420:	40014400 	.word	0x40014400
 8008424:	40014800 	.word	0x40014800
 8008428:	40001800 	.word	0x40001800
 800842c:	40001c00 	.word	0x40001c00
 8008430:	40002000 	.word	0x40002000

08008434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	f023 0210 	bic.w	r2, r3, #16
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008476:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f023 0320 	bic.w	r3, r3, #32
 800848a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a20      	ldr	r2, [pc, #128]	; (800851c <TIM_OC2_SetConfig+0xe8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_OC2_SetConfig+0x74>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a1f      	ldr	r2, [pc, #124]	; (8008520 <TIM_OC2_SetConfig+0xec>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d101      	bne.n	80084ac <TIM_OC2_SetConfig+0x78>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <TIM_OC2_SetConfig+0x7a>
 80084ac:	2300      	movs	r3, #0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d021      	beq.n	80084f6 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084cc:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	621a      	str	r2, [r3, #32]
}
 8008510:	bf00      	nop
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	40010000 	.word	0x40010000
 8008520:	40010400 	.word	0x40010400

08008524 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8008534:	2201      	movs	r2, #1
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1a      	ldr	r2, [r3, #32]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	43db      	mvns	r3, r3
 8008546:	401a      	ands	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a1a      	ldr	r2, [r3, #32]
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	fa01 f303 	lsl.w	r3, r1, r3
 8008558:	431a      	orrs	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	621a      	str	r2, [r3, #32]
}
 800855e:	bf00      	nop
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
	...

0800856c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800857e:	2300      	movs	r3, #0
 8008580:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	f023 0201 	bic.w	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0303 	bic.w	r3, r3, #3
 80085ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f023 0302 	bic.w	r3, r3, #2
 80085c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a1f      	ldr	r2, [pc, #124]	; (800864c <TIM_OC1_SetConfig+0xe0>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d003      	beq.n	80085dc <TIM_OC1_SetConfig+0x70>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a1e      	ldr	r2, [pc, #120]	; (8008650 <TIM_OC1_SetConfig+0xe4>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d101      	bne.n	80085e0 <TIM_OC1_SetConfig+0x74>
 80085dc:	2301      	movs	r3, #1
 80085de:	e000      	b.n	80085e2 <TIM_OC1_SetConfig+0x76>
 80085e0:	2300      	movs	r3, #0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d01e      	beq.n	8008624 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f023 0308 	bic.w	r3, r3, #8
 80085ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f023 0304 	bic.w	r3, r3, #4
 80085fe:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800860e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	4313      	orrs	r3, r2
 8008618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4313      	orrs	r3, r2
 8008622:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	621a      	str	r2, [r3, #32]
} 
 800863e:	bf00      	nop
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	40010000 	.word	0x40010000
 8008650:	40010400 	.word	0x40010400

08008654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8008666:	2300      	movs	r3, #0
 8008668:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 0303 	bic.w	r3, r3, #3
 8008696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4313      	orrs	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a20      	ldr	r2, [pc, #128]	; (800873c <TIM_OC3_SetConfig+0xe8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d003      	beq.n	80086c6 <TIM_OC3_SetConfig+0x72>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a1f      	ldr	r2, [pc, #124]	; (8008740 <TIM_OC3_SetConfig+0xec>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d101      	bne.n	80086ca <TIM_OC3_SetConfig+0x76>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <TIM_OC3_SetConfig+0x78>
 80086ca:	2300      	movs	r3, #0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d021      	beq.n	8008714 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086ea:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	011b      	lsls	r3, r3, #4
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	011b      	lsls	r3, r3, #4
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	4313      	orrs	r3, r2
 8008712:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	621a      	str	r2, [r3, #32]
}
 800872e:	bf00      	nop
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	40010000 	.word	0x40010000
 8008740:	40010400 	.word	0x40010400

08008744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800877e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008786:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	021b      	lsls	r3, r3, #8
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	4313      	orrs	r3, r2
 8008792:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800879a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	031b      	lsls	r3, r3, #12
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a14      	ldr	r2, [pc, #80]	; (80087fc <TIM_OC4_SetConfig+0xb8>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d003      	beq.n	80087b8 <TIM_OC4_SetConfig+0x74>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a13      	ldr	r2, [pc, #76]	; (8008800 <TIM_OC4_SetConfig+0xbc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d101      	bne.n	80087bc <TIM_OC4_SetConfig+0x78>
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <TIM_OC4_SetConfig+0x7a>
 80087bc:	2300      	movs	r3, #0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d009      	beq.n	80087d6 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	019b      	lsls	r3, r3, #6
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	621a      	str	r2, [r3, #32]
}
 80087f0:	bf00      	nop
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	40010000 	.word	0x40010000
 8008800:	40010400 	.word	0x40010400

08008804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	f023 0201 	bic.w	r2, r3, #1
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008836:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	4313      	orrs	r3, r2
 8008840:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f023 030a 	bic.w	r3, r3, #10
 8008848:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4313      	orrs	r3, r2
 8008850:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	621a      	str	r2, [r3, #32]
}
 800885e:	bf00      	nop
 8008860:	371c      	adds	r7, #28
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800886a:	b480      	push	{r7}
 800886c:	b087      	sub	sp, #28
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	f023 0210 	bic.w	r2, r3, #16
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800889c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	031b      	lsls	r3, r3, #12
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	621a      	str	r2, [r3, #32]
}
 80088c6:	bf00      	nop
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ee:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80088f0:	887b      	ldrh	r3, [r7, #2]
 80088f2:	f043 0307 	orr.w	r3, r3, #7
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	609a      	str	r2, [r3, #8]
}
 8008906:	bf00      	nop
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008912:	b480      	push	{r7}
 8008914:	b087      	sub	sp, #28
 8008916:	af00      	add	r7, sp, #0
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	607a      	str	r2, [r7, #4]
 800891e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008930:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	021a      	lsls	r2, r3, #8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	431a      	orrs	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	4313      	orrs	r3, r2
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	4313      	orrs	r3, r2
 8008942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	609a      	str	r2, [r3, #8]
} 
 800894a:	bf00      	nop
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800896a:	2302      	movs	r3, #2
 800896c:	e032      	b.n	80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2202      	movs	r2, #2
 800897a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800898c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6859      	ldr	r1, [r3, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	430a      	orrs	r2, r1
 800899e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089ae:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6899      	ldr	r1, [r3, #8]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
} 
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e03f      	b.n	8008a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f007 fcd0 	bl	80103d4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2224      	movs	r2, #36	; 0x24
 8008a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a4a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fbc7 	bl	80091e0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	695a      	ldr	r2, [r3, #20]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a70:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68da      	ldr	r2, [r3, #12]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a80:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b088      	sub	sp, #32
 8008aa6:	af02      	add	r7, sp, #8
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	603b      	str	r3, [r7, #0]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	f040 8083 	bne.w	8008bca <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_UART_Transmit+0x2e>
 8008aca:	88fb      	ldrh	r3, [r7, #6]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e07b      	b.n	8008bcc <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <HAL_UART_Transmit+0x40>
 8008ade:	2302      	movs	r3, #2
 8008ae0:	e074      	b.n	8008bcc <HAL_UART_Transmit+0x12a>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2221      	movs	r2, #33	; 0x21
 8008af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008af8:	f7f8 fd66 	bl	80015c8 <HAL_GetTick>
 8008afc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	88fa      	ldrh	r2, [r7, #6]
 8008b02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	88fa      	ldrh	r2, [r7, #6]
 8008b08:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8008b0a:	e042      	b.n	8008b92 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b22:	d122      	bne.n	8008b6a <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2180      	movs	r1, #128	; 0x80
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fa48 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e046      	b.n	8008bcc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b50:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d103      	bne.n	8008b62 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	3302      	adds	r3, #2
 8008b5e:	60bb      	str	r3, [r7, #8]
 8008b60:	e017      	b.n	8008b92 <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	3301      	adds	r3, #1
 8008b66:	60bb      	str	r3, [r7, #8]
 8008b68:	e013      	b.n	8008b92 <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2200      	movs	r2, #0
 8008b72:	2180      	movs	r1, #128	; 0x80
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fa25 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e023      	b.n	8008bcc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	60ba      	str	r2, [r7, #8]
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1b7      	bne.n	8008b0c <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2140      	movs	r1, #64	; 0x40
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 fa0c 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e00a      	b.n	8008bcc <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e000      	b.n	8008bcc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008bca:	2302      	movs	r3, #2
  }
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af02      	add	r7, sp, #8
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b20      	cmp	r3, #32
 8008bf2:	f040 8090 	bne.w	8008d16 <HAL_UART_Receive+0x142>
  { 
    if((pData == NULL ) || (Size == 0)) 
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <HAL_UART_Receive+0x2e>
 8008bfc:	88fb      	ldrh	r3, [r7, #6]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e088      	b.n	8008d18 <HAL_UART_Receive+0x144>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_UART_Receive+0x40>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e081      	b.n	8008d18 <HAL_UART_Receive+0x144>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2222      	movs	r2, #34	; 0x22
 8008c26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008c2a:	f7f8 fccd 	bl	80015c8 <HAL_GetTick>
 8008c2e:	6178      	str	r0, [r7, #20]
        
    huart->RxXferSize = Size; 
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	88fa      	ldrh	r2, [r7, #6]
 8008c34:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	88fa      	ldrh	r2, [r7, #6]
 8008c3a:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8008c3c:	e05c      	b.n	8008cf8 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c54:	d12b      	bne.n	8008cae <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2120      	movs	r1, #32
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 f9af 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <HAL_UART_Receive+0x9c>
        { 
          return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e053      	b.n	8008d18 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*) pData;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10c      	bne.n	8008c96 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3302      	adds	r3, #2
 8008c92:	60bb      	str	r3, [r7, #8]
 8008c94:	e030      	b.n	8008cf8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60bb      	str	r3, [r7, #8]
 8008cac:	e024      	b.n	8008cf8 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2120      	movs	r1, #32
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 f983 	bl	8008fc4 <UART_WaitOnFlagUntilTimeout>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <HAL_UART_Receive+0xf4>
        { 
          return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e027      	b.n	8008d18 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d108      	bne.n	8008ce2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6859      	ldr	r1, [r3, #4]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	60ba      	str	r2, [r7, #8]
 8008cdc:	b2ca      	uxtb	r2, r1
 8008cde:	701a      	strb	r2, [r3, #0]
 8008ce0:	e00a      	b.n	8008cf8 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	1c59      	adds	r1, r3, #1
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cf4:	b2d2      	uxtb	r2, r2
 8008cf6:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d19d      	bne.n	8008c3e <HAL_UART_Receive+0x6a>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	e000      	b.n	8008d18 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;   
 8008d16:	2302      	movs	r3, #2
  }
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d138      	bne.n	8008dac <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <HAL_UART_Receive_IT+0x26>
 8008d40:	88fb      	ldrh	r3, [r7, #6]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e031      	b.n	8008dae <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d101      	bne.n	8008d58 <HAL_UART_Receive_IT+0x38>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e02a      	b.n	8008dae <HAL_UART_Receive_IT+0x8e>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	88fa      	ldrh	r2, [r7, #6]
 8008d6a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	88fa      	ldrh	r2, [r7, #6]
 8008d70:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2222      	movs	r2, #34	; 0x22
 8008d7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695a      	ldr	r2, [r3, #20]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008da6:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	e000      	b.n	8008dae <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8008dac:	2302      	movs	r3, #2
  }
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10d      	bne.n	8008e0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d008      	beq.n	8008e0e <HAL_UART_IRQHandler+0x52>
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f9c6 	bl	8009198 <UART_Receive_IT>
      return;
 8008e0c:	e0cb      	b.n	8008fa6 <HAL_UART_IRQHandler+0x1ea>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80ab 	beq.w	8008f6c <HAL_UART_IRQHandler+0x1b0>
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <HAL_UART_IRQHandler+0x70>
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 80a0 	beq.w	8008f6c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <HAL_UART_IRQHandler+0x90>
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e44:	f043 0201 	orr.w	r2, r3, #1
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <HAL_UART_IRQHandler+0xb0>
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e64:	f043 0202 	orr.w	r2, r3, #2
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <HAL_UART_IRQHandler+0xd0>
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e84:	f043 0204 	orr.w	r2, r3, #4
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <HAL_UART_IRQHandler+0xf0>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea4:	f043 0208 	orr.w	r2, r3, #8
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d077      	beq.n	8008fa4 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <HAL_UART_IRQHandler+0x112>
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	f003 0320 	and.w	r3, r3, #32
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f965 	bl	8009198 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bf14      	ite	ne
 8008edc:	2301      	movne	r3, #1
 8008ede:	2300      	moveq	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee8:	f003 0308 	and.w	r3, r3, #8
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <HAL_UART_IRQHandler+0x13a>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d031      	beq.n	8008f5a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f8ae 	bl	8009058 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d023      	beq.n	8008f52 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	695a      	ldr	r2, [r3, #20]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f18:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d013      	beq.n	8008f4a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f26:	4a21      	ldr	r2, [pc, #132]	; (8008fac <HAL_UART_IRQHandler+0x1f0>)
 8008f28:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f9 f876 	bl	8002020 <HAL_DMA_Abort_IT>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d016      	beq.n	8008f68 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f48:	e00e      	b.n	8008f68 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f005 fe00 	bl	800eb50 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f50:	e00a      	b.n	8008f68 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f005 fdfc 	bl	800eb50 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f58:	e006      	b.n	8008f68 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f005 fdf8 	bl	800eb50 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008f66:	e01d      	b.n	8008fa4 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f68:	bf00      	nop
    return;
 8008f6a:	e01b      	b.n	8008fa4 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d008      	beq.n	8008f88 <HAL_UART_IRQHandler+0x1cc>
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f89b 	bl	80090bc <UART_Transmit_IT>
    return;
 8008f86:	e00e      	b.n	8008fa6 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d009      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x1ea>
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f8e3 	bl	8009168 <UART_EndTransmit_IT>
    return;
 8008fa2:	e000      	b.n	8008fa6 <HAL_UART_IRQHandler+0x1ea>
    return;
 8008fa4:	bf00      	nop
  }
}
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	08009095 	.word	0x08009095

08008fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8008fd4:	e02c      	b.n	8009030 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fdc:	d028      	beq.n	8009030 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fe4:	f7f8 faf0 	bl	80015c8 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d21d      	bcs.n	8009030 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009002:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695a      	ldr	r2, [r3, #20]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0201 	bic.w	r2, r2, #1
 8009012:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2220      	movs	r2, #32
 8009018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e00f      	b.n	8009050 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	4013      	ands	r3, r2
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	429a      	cmp	r2, r3
 800903e:	bf0c      	ite	eq
 8009040:	2301      	moveq	r3, #1
 8009042:	2300      	movne	r3, #0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	429a      	cmp	r2, r3
 800904c:	d0c3      	beq.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800906e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	695a      	ldr	r2, [r3, #20]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0201 	bic.w	r2, r2, #1
 800907e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f005 fd4e 	bl	800eb50 <HAL_UART_ErrorCallback>
}
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b21      	cmp	r3, #33	; 0x21
 80090ce:	d144      	bne.n	800915a <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d8:	d11a      	bne.n	8009110 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	461a      	mov	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090ee:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d105      	bne.n	8009104 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	1c9a      	adds	r2, r3, #2
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	621a      	str	r2, [r3, #32]
 8009102:	e00e      	b.n	8009122 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	621a      	str	r2, [r3, #32]
 800910e:	e008      	b.n	8009122 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	1c59      	adds	r1, r3, #1
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6211      	str	r1, [r2, #32]
 800911a:	781a      	ldrb	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009126:	b29b      	uxth	r3, r3
 8009128:	3b01      	subs	r3, #1
 800912a:	b29b      	uxth	r3, r3
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	4619      	mov	r1, r3
 8009130:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10f      	bne.n	8009156 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009144:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009154:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	e000      	b.n	800915c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800915a:	2302      	movs	r3, #2
  }
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800917e:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2220      	movs	r2, #32
 8009184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff ff11 	bl	8008fb0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
#if 1
    if( huart == &huart1 )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a0c      	ldr	r2, [pc, #48]	; (80091d4 <UART_Receive_IT+0x3c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d102      	bne.n	80091ae <UART_Receive_IT+0x16>
    {
        CUSTOM_UART_Receive_IT_1();
 80091a8:	f007 fada 	bl	8010760 <CUSTOM_UART_Receive_IT_1>
 80091ac:	e00c      	b.n	80091c8 <UART_Receive_IT+0x30>
    }else if( huart == &huart4 )
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a09      	ldr	r2, [pc, #36]	; (80091d8 <UART_Receive_IT+0x40>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d102      	bne.n	80091bc <UART_Receive_IT+0x24>
    {
        CUSTOM_UART_Receive_IT_4();
 80091b6:	f007 fb17 	bl	80107e8 <CUSTOM_UART_Receive_IT_4>
 80091ba:	e005      	b.n	80091c8 <UART_Receive_IT+0x30>
    }else if( huart == &huart6 )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a07      	ldr	r2, [pc, #28]	; (80091dc <UART_Receive_IT+0x44>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d101      	bne.n	80091c8 <UART_Receive_IT+0x30>
    {
        CUSTOM_UART_Receive_IT_6();
 80091c4:	f007 fb56 	bl	8010874 <CUSTOM_UART_Receive_IT_6>
    }
    return HAL_OK;
 80091c8:	2300      	movs	r3, #0
  {
    return HAL_BUSY;
  }

#endif
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	2000986c 	.word	0x2000986c
 80091d8:	20009a08 	.word	0x20009a08
 80091dc:	200099c8 	.word	0x200099c8

080091e0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091e0:	b5b0      	push	{r4, r5, r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800921c:	f023 030c 	bic.w	r3, r3, #12
 8009220:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	431a      	orrs	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	4313      	orrs	r3, r2
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	4313      	orrs	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	695b      	ldr	r3, [r3, #20]
 800924c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009254:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009270:	f040 80e4 	bne.w	800943c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4aab      	ldr	r2, [pc, #684]	; (8009528 <UART_SetConfig+0x348>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d004      	beq.n	8009288 <UART_SetConfig+0xa8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4aaa      	ldr	r2, [pc, #680]	; (800952c <UART_SetConfig+0x34c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d16c      	bne.n	8009362 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009288:	f7fb fe6c 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 800928c:	4602      	mov	r2, r0
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	009a      	lsls	r2, r3, #2
 8009296:	441a      	add	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a2:	4aa3      	ldr	r2, [pc, #652]	; (8009530 <UART_SetConfig+0x350>)
 80092a4:	fba2 2303 	umull	r2, r3, r2, r3
 80092a8:	095b      	lsrs	r3, r3, #5
 80092aa:	011c      	lsls	r4, r3, #4
 80092ac:	f7fb fe5a 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 80092b0:	4602      	mov	r2, r0
 80092b2:	4613      	mov	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	009a      	lsls	r2, r3, #2
 80092ba:	441a      	add	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	fbb2 f5f3 	udiv	r5, r2, r3
 80092c6:	f7fb fe4d 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 80092ca:	4602      	mov	r2, r0
 80092cc:	4613      	mov	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	009a      	lsls	r2, r3, #2
 80092d4:	441a      	add	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e0:	4a93      	ldr	r2, [pc, #588]	; (8009530 <UART_SetConfig+0x350>)
 80092e2:	fba2 2303 	umull	r2, r3, r2, r3
 80092e6:	095b      	lsrs	r3, r3, #5
 80092e8:	2264      	movs	r2, #100	; 0x64
 80092ea:	fb02 f303 	mul.w	r3, r2, r3
 80092ee:	1aeb      	subs	r3, r5, r3
 80092f0:	00db      	lsls	r3, r3, #3
 80092f2:	3332      	adds	r3, #50	; 0x32
 80092f4:	4a8e      	ldr	r2, [pc, #568]	; (8009530 <UART_SetConfig+0x350>)
 80092f6:	fba2 2303 	umull	r2, r3, r2, r3
 80092fa:	095b      	lsrs	r3, r3, #5
 80092fc:	005b      	lsls	r3, r3, #1
 80092fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009302:	441c      	add	r4, r3
 8009304:	f7fb fe2e 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8009308:	4602      	mov	r2, r0
 800930a:	4613      	mov	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4413      	add	r3, r2
 8009310:	009a      	lsls	r2, r3, #2
 8009312:	441a      	add	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	fbb2 f5f3 	udiv	r5, r2, r3
 800931e:	f7fb fe21 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8009322:	4602      	mov	r2, r0
 8009324:	4613      	mov	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	009a      	lsls	r2, r3, #2
 800932c:	441a      	add	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	4a7d      	ldr	r2, [pc, #500]	; (8009530 <UART_SetConfig+0x350>)
 800933a:	fba2 2303 	umull	r2, r3, r2, r3
 800933e:	095b      	lsrs	r3, r3, #5
 8009340:	2264      	movs	r2, #100	; 0x64
 8009342:	fb02 f303 	mul.w	r3, r2, r3
 8009346:	1aeb      	subs	r3, r5, r3
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	3332      	adds	r3, #50	; 0x32
 800934c:	4a78      	ldr	r2, [pc, #480]	; (8009530 <UART_SetConfig+0x350>)
 800934e:	fba2 2303 	umull	r2, r3, r2, r3
 8009352:	095b      	lsrs	r3, r3, #5
 8009354:	f003 0207 	and.w	r2, r3, #7
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4422      	add	r2, r4
 800935e:	609a      	str	r2, [r3, #8]
 8009360:	e154      	b.n	800960c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009362:	f7fb fddd 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8009366:	4602      	mov	r2, r0
 8009368:	4613      	mov	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	009a      	lsls	r2, r3, #2
 8009370:	441a      	add	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	fbb2 f3f3 	udiv	r3, r2, r3
 800937c:	4a6c      	ldr	r2, [pc, #432]	; (8009530 <UART_SetConfig+0x350>)
 800937e:	fba2 2303 	umull	r2, r3, r2, r3
 8009382:	095b      	lsrs	r3, r3, #5
 8009384:	011c      	lsls	r4, r3, #4
 8009386:	f7fb fdcb 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 800938a:	4602      	mov	r2, r0
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009a      	lsls	r2, r3, #2
 8009394:	441a      	add	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	005b      	lsls	r3, r3, #1
 800939c:	fbb2 f5f3 	udiv	r5, r2, r3
 80093a0:	f7fb fdbe 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80093a4:	4602      	mov	r2, r0
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	009a      	lsls	r2, r3, #2
 80093ae:	441a      	add	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ba:	4a5d      	ldr	r2, [pc, #372]	; (8009530 <UART_SetConfig+0x350>)
 80093bc:	fba2 2303 	umull	r2, r3, r2, r3
 80093c0:	095b      	lsrs	r3, r3, #5
 80093c2:	2264      	movs	r2, #100	; 0x64
 80093c4:	fb02 f303 	mul.w	r3, r2, r3
 80093c8:	1aeb      	subs	r3, r5, r3
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	3332      	adds	r3, #50	; 0x32
 80093ce:	4a58      	ldr	r2, [pc, #352]	; (8009530 <UART_SetConfig+0x350>)
 80093d0:	fba2 2303 	umull	r2, r3, r2, r3
 80093d4:	095b      	lsrs	r3, r3, #5
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093dc:	441c      	add	r4, r3
 80093de:	f7fb fd9f 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80093e2:	4602      	mov	r2, r0
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	009a      	lsls	r2, r3, #2
 80093ec:	441a      	add	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80093f8:	f7fb fd92 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80093fc:	4602      	mov	r2, r0
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009a      	lsls	r2, r3, #2
 8009406:	441a      	add	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009412:	4a47      	ldr	r2, [pc, #284]	; (8009530 <UART_SetConfig+0x350>)
 8009414:	fba2 2303 	umull	r2, r3, r2, r3
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	2264      	movs	r2, #100	; 0x64
 800941c:	fb02 f303 	mul.w	r3, r2, r3
 8009420:	1aeb      	subs	r3, r5, r3
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	3332      	adds	r3, #50	; 0x32
 8009426:	4a42      	ldr	r2, [pc, #264]	; (8009530 <UART_SetConfig+0x350>)
 8009428:	fba2 2303 	umull	r2, r3, r2, r3
 800942c:	095b      	lsrs	r3, r3, #5
 800942e:	f003 0207 	and.w	r2, r3, #7
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4422      	add	r2, r4
 8009438:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800943a:	e0e7      	b.n	800960c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a39      	ldr	r2, [pc, #228]	; (8009528 <UART_SetConfig+0x348>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d004      	beq.n	8009450 <UART_SetConfig+0x270>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a38      	ldr	r2, [pc, #224]	; (800952c <UART_SetConfig+0x34c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d171      	bne.n	8009534 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009450:	f7fb fd88 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8009454:	4602      	mov	r2, r0
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009a      	lsls	r2, r3, #2
 800945e:	441a      	add	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	fbb2 f3f3 	udiv	r3, r2, r3
 800946a:	4a31      	ldr	r2, [pc, #196]	; (8009530 <UART_SetConfig+0x350>)
 800946c:	fba2 2303 	umull	r2, r3, r2, r3
 8009470:	095b      	lsrs	r3, r3, #5
 8009472:	011c      	lsls	r4, r3, #4
 8009474:	f7fb fd76 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8009478:	4602      	mov	r2, r0
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009a      	lsls	r2, r3, #2
 8009482:	441a      	add	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	fbb2 f5f3 	udiv	r5, r2, r3
 800948e:	f7fb fd69 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8009492:	4602      	mov	r2, r0
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	009a      	lsls	r2, r3, #2
 800949c:	441a      	add	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a8:	4a21      	ldr	r2, [pc, #132]	; (8009530 <UART_SetConfig+0x350>)
 80094aa:	fba2 2303 	umull	r2, r3, r2, r3
 80094ae:	095b      	lsrs	r3, r3, #5
 80094b0:	2264      	movs	r2, #100	; 0x64
 80094b2:	fb02 f303 	mul.w	r3, r2, r3
 80094b6:	1aeb      	subs	r3, r5, r3
 80094b8:	011b      	lsls	r3, r3, #4
 80094ba:	3332      	adds	r3, #50	; 0x32
 80094bc:	4a1c      	ldr	r2, [pc, #112]	; (8009530 <UART_SetConfig+0x350>)
 80094be:	fba2 2303 	umull	r2, r3, r2, r3
 80094c2:	095b      	lsrs	r3, r3, #5
 80094c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094c8:	441c      	add	r4, r3
 80094ca:	f7fb fd4b 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 80094ce:	4602      	mov	r2, r0
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	009a      	lsls	r2, r3, #2
 80094d8:	441a      	add	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80094e4:	f7fb fd3e 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 80094e8:	4602      	mov	r2, r0
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009a      	lsls	r2, r3, #2
 80094f2:	441a      	add	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fe:	4a0c      	ldr	r2, [pc, #48]	; (8009530 <UART_SetConfig+0x350>)
 8009500:	fba2 2303 	umull	r2, r3, r2, r3
 8009504:	095b      	lsrs	r3, r3, #5
 8009506:	2264      	movs	r2, #100	; 0x64
 8009508:	fb02 f303 	mul.w	r3, r2, r3
 800950c:	1aeb      	subs	r3, r5, r3
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	3332      	adds	r3, #50	; 0x32
 8009512:	4a07      	ldr	r2, [pc, #28]	; (8009530 <UART_SetConfig+0x350>)
 8009514:	fba2 2303 	umull	r2, r3, r2, r3
 8009518:	095b      	lsrs	r3, r3, #5
 800951a:	f003 020f 	and.w	r2, r3, #15
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4422      	add	r2, r4
 8009524:	609a      	str	r2, [r3, #8]
 8009526:	e071      	b.n	800960c <UART_SetConfig+0x42c>
 8009528:	40011000 	.word	0x40011000
 800952c:	40011400 	.word	0x40011400
 8009530:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009534:	f7fb fcf4 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8009538:	4602      	mov	r2, r0
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009a      	lsls	r2, r3, #2
 8009542:	441a      	add	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	fbb2 f3f3 	udiv	r3, r2, r3
 800954e:	4a31      	ldr	r2, [pc, #196]	; (8009614 <UART_SetConfig+0x434>)
 8009550:	fba2 2303 	umull	r2, r3, r2, r3
 8009554:	095b      	lsrs	r3, r3, #5
 8009556:	011c      	lsls	r4, r3, #4
 8009558:	f7fb fce2 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 800955c:	4602      	mov	r2, r0
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009a      	lsls	r2, r3, #2
 8009566:	441a      	add	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	fbb2 f5f3 	udiv	r5, r2, r3
 8009572:	f7fb fcd5 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8009576:	4602      	mov	r2, r0
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009a      	lsls	r2, r3, #2
 8009580:	441a      	add	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	fbb2 f3f3 	udiv	r3, r2, r3
 800958c:	4a21      	ldr	r2, [pc, #132]	; (8009614 <UART_SetConfig+0x434>)
 800958e:	fba2 2303 	umull	r2, r3, r2, r3
 8009592:	095b      	lsrs	r3, r3, #5
 8009594:	2264      	movs	r2, #100	; 0x64
 8009596:	fb02 f303 	mul.w	r3, r2, r3
 800959a:	1aeb      	subs	r3, r5, r3
 800959c:	011b      	lsls	r3, r3, #4
 800959e:	3332      	adds	r3, #50	; 0x32
 80095a0:	4a1c      	ldr	r2, [pc, #112]	; (8009614 <UART_SetConfig+0x434>)
 80095a2:	fba2 2303 	umull	r2, r3, r2, r3
 80095a6:	095b      	lsrs	r3, r3, #5
 80095a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095ac:	441c      	add	r4, r3
 80095ae:	f7fb fcb7 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80095b2:	4602      	mov	r2, r0
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009a      	lsls	r2, r3, #2
 80095bc:	441a      	add	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80095c8:	f7fb fcaa 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80095cc:	4602      	mov	r2, r0
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	009a      	lsls	r2, r3, #2
 80095d6:	441a      	add	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e2:	4a0c      	ldr	r2, [pc, #48]	; (8009614 <UART_SetConfig+0x434>)
 80095e4:	fba2 2303 	umull	r2, r3, r2, r3
 80095e8:	095b      	lsrs	r3, r3, #5
 80095ea:	2264      	movs	r2, #100	; 0x64
 80095ec:	fb02 f303 	mul.w	r3, r2, r3
 80095f0:	1aeb      	subs	r3, r5, r3
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	3332      	adds	r3, #50	; 0x32
 80095f6:	4a07      	ldr	r2, [pc, #28]	; (8009614 <UART_SetConfig+0x434>)
 80095f8:	fba2 2303 	umull	r2, r3, r2, r3
 80095fc:	095b      	lsrs	r3, r3, #5
 80095fe:	f003 020f 	and.w	r2, r3, #15
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4422      	add	r2, r4
 8009608:	609a      	str	r2, [r3, #8]
}
 800960a:	e7ff      	b.n	800960c <UART_SetConfig+0x42c>
 800960c:	bf00      	nop
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bdb0      	pop	{r4, r5, r7, pc}
 8009614:	51eb851f 	.word	0x51eb851f

08009618 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e016      	b.n	8009658 <HAL_WWDG_Init+0x40>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f006 ff6a 	bl	8010504 <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68da      	ldr	r2, [r3, #12]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800963c:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	ea42 0103 	orr.w	r1, r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <FMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800966a:	2300      	movs	r3, #0
 800966c:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	60fb      	str	r3, [r7, #12]

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	4b29      	ldr	r3, [pc, #164]	; (8009724 <FMC_NORSRAM_Init+0xc4>)
 800967e:	4013      	ands	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CPSIZE   | FMC_BCR1_CBURSTRW | \
                       FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800968a:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 8009690:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 8009696:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 800969c:	431a      	orrs	r2, r3
                    Init->WrapMode             |\
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	699b      	ldr	r3, [r3, #24]
                    Init->WaitSignalPolarity   |\
 80096a2:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	69db      	ldr	r3, [r3, #28]
                    Init->WrapMode             |\
 80096a8:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 80096ae:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 80096b4:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 80096ba:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 80096c0:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->AsynchronousWait     |\
 80096c6:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->PageSize             |\
 80096cc:	431a      	orrs	r2, r3
                    Init->ContinuousClock);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 80096d2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]
                    Init->ContinuousClock      |\
                    Init->PageSize             |\
                    Init->WriteFifo);
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	2b08      	cmp	r3, #8
 80096e0:	d103      	bne.n	80096ea <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096e8:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68f9      	ldr	r1, [r7, #12]
 80096f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096fe:	d10a      	bne.n	8009716 <FMC_NORSRAM_Init+0xb6>
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d006      	beq.n	8009716 <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009710:	431a      	orrs	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	601a      	str	r2, [r3, #0]
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	ffe00080 	.word	0xffe00080

08009728 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009728:	b480      	push	{r7}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009742:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800974a:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8009756:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 800975e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 8009766:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	3b01      	subs	r3, #1
 800976e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8009770:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	3b02      	subs	r3, #2
 8009778:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 800977a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8009780:	4313      	orrs	r3, r2
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	4313      	orrs	r3, r2
 8009786:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6979      	ldr	r1, [r7, #20]
 8009790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00e      	beq.n	80097be <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80097a8:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	051b      	lsls	r3, r3, #20
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097e4:	d122      	bne.n	800982c <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ee:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80097f4:	4013      	ands	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009802:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800980a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009812:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009818:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	4313      	orrs	r3, r2
 800981e:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	6979      	ldr	r1, [r7, #20]
 8009826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800982a:	e005      	b.n	8009838 <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	cff00000 	.word	0xcff00000

0800984c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800984c:	b084      	sub	sp, #16
 800984e:	b480      	push	{r7}
 8009850:	b085      	sub	sp, #20
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	f107 001c 	add.w	r0, r7, #28
 800985a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009862:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009864:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009866:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800986a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800986e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009872:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009876:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4313      	orrs	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009886:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	431a      	orrs	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	b004      	add	sp, #16
 80098a0:	4770      	bx	lr

080098a2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2203      	movs	r2, #3
 80098ea:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0303 	and.w	r3, r3, #3
}
 800990a:	4618      	mov	r0, r3
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009916:	b480      	push	{r7}
 8009918:	b085      	sub	sp, #20
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009920:	2300      	movs	r3, #0
 8009922:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009934:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800993a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009940:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	4313      	orrs	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009950:	f023 030f 	bic.w	r3, r3, #15
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	431a      	orrs	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	b2db      	uxtb	r3, r3
}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3314      	adds	r3, #20
 8009996:	461a      	mov	r2, r3
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	4413      	add	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
}  
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80099d4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80099da:	431a      	orrs	r2, r3
                       Data->DPSM);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80099e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ec:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	431a      	orrs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0

}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b088      	sub	sp, #32
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009a18:	2310      	movs	r3, #16
 8009a1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a1c:	2340      	movs	r3, #64	; 0x40
 8009a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a20:	2300      	movs	r3, #0
 8009a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a28:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a2a:	f107 0308 	add.w	r3, r7, #8
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff ff70 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009a36:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009a3a:	2110      	movs	r1, #16
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fa63 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009a42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a44:	69fb      	ldr	r3, [r7, #28]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b088      	sub	sp, #32
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009a60:	2311      	movs	r3, #17
 8009a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a64:	2340      	movs	r3, #64	; 0x40
 8009a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a70:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a72:	f107 0308 	add.w	r3, r7, #8
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff ff4c 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009a7e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009a82:	2111      	movs	r1, #17
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fa3f 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b088      	sub	sp, #32
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009aa8:	2312      	movs	r3, #18
 8009aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aac:	2340      	movs	r3, #64	; 0x40
 8009aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aba:	f107 0308 	add.w	r3, r7, #8
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff ff28 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009ac6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009aca:	2112      	movs	r1, #18
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fa1b 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009ad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3720      	adds	r7, #32
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b088      	sub	sp, #32
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009af0:	2318      	movs	r3, #24
 8009af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009af4:	2340      	movs	r3, #64	; 0x40
 8009af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b00:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b02:	f107 0308 	add.w	r3, r7, #8
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff ff04 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009b0e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009b12:	2118      	movs	r1, #24
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f9f7 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009b1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3720      	adds	r7, #32
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b088      	sub	sp, #32
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009b38:	2319      	movs	r3, #25
 8009b3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b3c:	2340      	movs	r3, #64	; 0x40
 8009b3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b40:	2300      	movs	r3, #0
 8009b42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b48:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b4a:	f107 0308 	add.w	r3, r7, #8
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff fee0 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009b56:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009b5a:	2119      	movs	r1, #25
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f9d3 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009b62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b64:	69fb      	ldr	r3, [r7, #28]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009b80:	230c      	movs	r3, #12
 8009b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b84:	2340      	movs	r3, #64	; 0x40
 8009b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b90:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b92:	f107 0308 	add.w	r3, r7, #8
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff febc 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8009b9e:	4a05      	ldr	r2, [pc, #20]	; (8009bb4 <SDMMC_CmdStopTransfer+0x44>)
 8009ba0:	210c      	movs	r1, #12
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f9b0 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009ba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009baa:	69fb      	ldr	r3, [r7, #28]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3720      	adds	r7, #32
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	05f5e100 	.word	0x05f5e100

08009bb8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08a      	sub	sp, #40	; 0x28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009bcc:	2307      	movs	r3, #7
 8009bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bdc:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bde:	f107 0310 	add.w	r3, r7, #16
 8009be2:	4619      	mov	r1, r3
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7ff fe96 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009bea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009bee:	2107      	movs	r1, #7
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 f989 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009bf6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3728      	adds	r7, #40	; 0x28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b088      	sub	sp, #32
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c22:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c24:	f107 0308 	add.w	r3, r7, #8
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7ff fe73 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f93f 	bl	8009eb4 <SDMMC_GetCmdError>
 8009c36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c38:	69fb      	ldr	r3, [r7, #28]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3720      	adds	r7, #32
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b088      	sub	sp, #32
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009c4e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c54:	2308      	movs	r3, #8
 8009c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c58:	2340      	movs	r3, #64	; 0x40
 8009c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c64:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c66:	f107 0308 	add.w	r3, r7, #8
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff fe52 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fb10 	bl	800a298 <SDMMC_GetCmdResp7>
 8009c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c7a:	69fb      	ldr	r3, [r7, #28]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3720      	adds	r7, #32
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009c96:	2337      	movs	r3, #55	; 0x37
 8009c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c9a:	2340      	movs	r3, #64	; 0x40
 8009c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ca8:	f107 0308 	add.w	r3, r7, #8
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7ff fe31 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009cb4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009cb8:	2137      	movs	r1, #55	; 0x37
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f924 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cc2:	69fb      	ldr	r3, [r7, #28]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3720      	adds	r7, #32
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b088      	sub	sp, #32
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009ce6:	2329      	movs	r3, #41	; 0x29
 8009ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cea:	2340      	movs	r3, #64	; 0x40
 8009cec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cf6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cf8:	f107 0308 	add.w	r3, r7, #8
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7ff fe09 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fa25 	bl	800a154 <SDMMC_GetCmdResp3>
 8009d0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3720      	adds	r7, #32
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b088      	sub	sp, #32
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009d20:	2300      	movs	r3, #0
 8009d22:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009d28:	2306      	movs	r3, #6
 8009d2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d30:	2300      	movs	r3, #0
 8009d32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d38:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d3a:	f107 0308 	add.w	r3, r7, #8
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7ff fde8 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009d46:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009d4a:	2106      	movs	r1, #6
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f8db 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009d52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d54:	69fb      	ldr	r3, [r7, #28]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3720      	adds	r7, #32
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b088      	sub	sp, #32
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009d6e:	2333      	movs	r3, #51	; 0x33
 8009d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d72:	2340      	movs	r3, #64	; 0x40
 8009d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d7e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d80:	f107 0308 	add.w	r3, r7, #8
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff fdc5 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009d8c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009d90:	2133      	movs	r1, #51	; 0x33
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f8b8 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009d98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d9a:	69fb      	ldr	r3, [r7, #28]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3720      	adds	r7, #32
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b088      	sub	sp, #32
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009dac:	2300      	movs	r3, #0
 8009dae:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009db0:	2300      	movs	r3, #0
 8009db2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009db4:	2302      	movs	r3, #2
 8009db6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009db8:	23c0      	movs	r3, #192	; 0xc0
 8009dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dc6:	f107 0308 	add.w	r3, r7, #8
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7ff fda2 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f97e 	bl	800a0d4 <SDMMC_GetCmdResp2>
 8009dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dda:	69fb      	ldr	r3, [r7, #28]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3720      	adds	r7, #32
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009df6:	2309      	movs	r3, #9
 8009df8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009dfa:	23c0      	movs	r3, #192	; 0xc0
 8009dfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e06:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e08:	f107 0308 	add.w	r3, r7, #8
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fd81 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f95d 	bl	800a0d4 <SDMMC_GetCmdResp2>
 8009e1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3720      	adds	r7, #32
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b088      	sub	sp, #32
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009e30:	2300      	movs	r3, #0
 8009e32:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e3c:	2340      	movs	r3, #64	; 0x40
 8009e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e48:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff fd60 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	2103      	movs	r1, #3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f9ae 	bl	800a1bc <SDMMC_GetCmdResp6>
 8009e60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e62:	69fb      	ldr	r3, [r7, #28]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3720      	adds	r7, #32
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009e76:	2300      	movs	r3, #0
 8009e78:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009e7e:	230d      	movs	r3, #13
 8009e80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e82:	2340      	movs	r3, #64	; 0x40
 8009e84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e86:	2300      	movs	r3, #0
 8009e88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e8e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e90:	f107 0308 	add.w	r3, r7, #8
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7ff fd3d 	bl	8009916 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009e9c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009ea0:	210d      	movs	r1, #13
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f830 	bl	8009f08 <SDMMC_GetCmdResp1>
 8009ea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3720      	adds	r7, #32
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009eb4:	b490      	push	{r4, r7}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ebc:	4b10      	ldr	r3, [pc, #64]	; (8009f00 <SDMMC_GetCmdError+0x4c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a10      	ldr	r2, [pc, #64]	; (8009f04 <SDMMC_GetCmdError+0x50>)
 8009ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec6:	0a5b      	lsrs	r3, r3, #9
 8009ec8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009ecc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	1e5c      	subs	r4, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ed8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009edc:	e00a      	b.n	8009ef4 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0f2      	beq.n	8009ed0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009ef0:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bc90      	pop	{r4, r7}
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	2000001c 	.word	0x2000001c
 8009f04:	10624dd3 	.word	0x10624dd3

08009f08 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009f08:	b590      	push	{r4, r7, lr}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	460b      	mov	r3, r1
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009f16:	4b6c      	ldr	r3, [pc, #432]	; (800a0c8 <SDMMC_GetCmdResp1+0x1c0>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a6c      	ldr	r2, [pc, #432]	; (800a0cc <SDMMC_GetCmdResp1+0x1c4>)
 8009f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f20:	0a5b      	lsrs	r3, r3, #9
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009f28:	4623      	mov	r3, r4
 8009f2a:	1e5c      	subs	r4, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d102      	bne.n	8009f36 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f34:	e0c3      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0f2      	beq.n	8009f28 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d004      	beq.n	8009f58 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2204      	movs	r2, #4
 8009f52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f54:	2304      	movs	r3, #4
 8009f56:	e0b2      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d004      	beq.n	8009f6e <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2201      	movs	r2, #1
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e0a7      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7ff fcfb 	bl	800996a <SDIO_GetCommandResponse>
 8009f74:	4603      	mov	r3, r0
 8009f76:	461a      	mov	r2, r3
 8009f78:	7afb      	ldrb	r3, [r7, #11]
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d001      	beq.n	8009f82 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e09d      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff fcf9 	bl	8009984 <SDIO_GetResponse>
 8009f92:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4b4e      	ldr	r3, [pc, #312]	; (800a0d0 <SDMMC_GetCmdResp1+0x1c8>)
 8009f98:	4013      	ands	r3, r2
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	e08d      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	da02      	bge.n	8009fae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009fa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fac:	e087      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	e080      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009fc6:	2380      	movs	r3, #128	; 0x80
 8009fc8:	e079      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fd8:	e071      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fe8:	e069      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ff8:	e061      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a008:	e059      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a018:	e051      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a028:	e049      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a038:	e041      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800a044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a048:	e039      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a058:	e031      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a064:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a068:	e029      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a074:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a078:	e021      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a084:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a088:	e019      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a094:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a098:	e011      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a0a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0a8:	e009      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f003 0308 	and.w	r3, r3, #8
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a0b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a0b8:	e001      	b.n	800a0be <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a0ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd90      	pop	{r4, r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	2000001c 	.word	0x2000001c
 800a0cc:	10624dd3 	.word	0x10624dd3
 800a0d0:	fdffe008 	.word	0xfdffe008

0800a0d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a0d4:	b490      	push	{r4, r7}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0dc:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <SDMMC_GetCmdResp2+0x78>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a1b      	ldr	r2, [pc, #108]	; (800a150 <SDMMC_GetCmdResp2+0x7c>)
 800a0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e6:	0a5b      	lsrs	r3, r3, #9
 800a0e8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a0ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	1e5c      	subs	r4, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d102      	bne.n	800a0fe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0fc:	e020      	b.n	800a140 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a102:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0f2      	beq.n	800a0f0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10e:	f003 0304 	and.w	r3, r3, #4
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2204      	movs	r2, #4
 800a11a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a11c:	2304      	movs	r3, #4
 800a11e:	e00f      	b.n	800a140 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d004      	beq.n	800a136 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a132:	2301      	movs	r3, #1
 800a134:	e004      	b.n	800a140 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a13c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bc90      	pop	{r4, r7}
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	2000001c 	.word	0x2000001c
 800a150:	10624dd3 	.word	0x10624dd3

0800a154 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a154:	b490      	push	{r4, r7}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a15c:	4b15      	ldr	r3, [pc, #84]	; (800a1b4 <SDMMC_GetCmdResp3+0x60>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a15      	ldr	r2, [pc, #84]	; (800a1b8 <SDMMC_GetCmdResp3+0x64>)
 800a162:	fba2 2303 	umull	r2, r3, r2, r3
 800a166:	0a5b      	lsrs	r3, r3, #9
 800a168:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a16c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a170:	4623      	mov	r3, r4
 800a172:	1e5c      	subs	r4, r3, #1
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a178:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a17c:	e015      	b.n	800a1aa <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a182:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0f2      	beq.n	800a170 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18e:	f003 0304 	and.w	r3, r3, #4
 800a192:	2b00      	cmp	r3, #0
 800a194:	d004      	beq.n	800a1a0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2204      	movs	r2, #4
 800a19a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a19c:	2304      	movs	r3, #4
 800a19e:	e004      	b.n	800a1aa <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a1a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bc90      	pop	{r4, r7}
 800a1b2:	4770      	bx	lr
 800a1b4:	2000001c 	.word	0x2000001c
 800a1b8:	10624dd3 	.word	0x10624dd3

0800a1bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a1bc:	b590      	push	{r4, r7, lr}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1ca:	4b31      	ldr	r3, [pc, #196]	; (800a290 <SDMMC_GetCmdResp6+0xd4>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a31      	ldr	r2, [pc, #196]	; (800a294 <SDMMC_GetCmdResp6+0xd8>)
 800a1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d4:	0a5b      	lsrs	r3, r3, #9
 800a1d6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a1da:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a1de:	4623      	mov	r3, r4
 800a1e0:	1e5c      	subs	r4, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d102      	bne.n	800a1ec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1ea:	e04c      	b.n	800a286 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d0f2      	beq.n	800a1de <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fc:	f003 0304 	and.w	r3, r3, #4
 800a200:	2b00      	cmp	r3, #0
 800a202:	d004      	beq.n	800a20e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2204      	movs	r2, #4
 800a208:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a20a:	2304      	movs	r3, #4
 800a20c:	e03b      	b.n	800a286 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a220:	2301      	movs	r3, #1
 800a222:	e030      	b.n	800a286 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7ff fba0 	bl	800996a <SDIO_GetCommandResponse>
 800a22a:	4603      	mov	r3, r0
 800a22c:	461a      	mov	r2, r3
 800a22e:	7afb      	ldrb	r3, [r7, #11]
 800a230:	4293      	cmp	r3, r2
 800a232:	d001      	beq.n	800a238 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a234:	2301      	movs	r3, #1
 800a236:	e026      	b.n	800a286 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a23e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a240:	2100      	movs	r1, #0
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f7ff fb9e 	bl	8009984 <SDIO_GetResponse>
 800a248:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d106      	bne.n	800a262 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	0c1b      	lsrs	r3, r3, #16
 800a258:	b29a      	uxth	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a25e:	2300      	movs	r3, #0
 800a260:	e011      	b.n	800a286 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a26c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a270:	e009      	b.n	800a286 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a27c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a280:	e001      	b.n	800a286 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a286:	4618      	mov	r0, r3
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd90      	pop	{r4, r7, pc}
 800a28e:	bf00      	nop
 800a290:	2000001c 	.word	0x2000001c
 800a294:	10624dd3 	.word	0x10624dd3

0800a298 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a298:	b490      	push	{r4, r7}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2a0:	4b18      	ldr	r3, [pc, #96]	; (800a304 <SDMMC_GetCmdResp7+0x6c>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a18      	ldr	r2, [pc, #96]	; (800a308 <SDMMC_GetCmdResp7+0x70>)
 800a2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2aa:	0a5b      	lsrs	r3, r3, #9
 800a2ac:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a2b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a2b4:	4623      	mov	r3, r4
 800a2b6:	1e5c      	subs	r4, r3, #1
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d102      	bne.n	800a2c2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2c0:	e01a      	b.n	800a2f8 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0f2      	beq.n	800a2b4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d004      	beq.n	800a2e4 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2240      	movs	r2, #64	; 0x40
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2e0:	2304      	movs	r3, #4
 800a2e2:	e009      	b.n	800a2f8 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2240      	movs	r2, #64	; 0x40
 800a2f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a2f6:	2300      	movs	r3, #0
  
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bc90      	pop	{r4, r7}
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	2000001c 	.word	0x2000001c
 800a308:	10624dd3 	.word	0x10624dd3

0800a30c <LIS3MDL_MAG_WriteReg>:
* Output      : None
* Return      : None
*******************************************************************************/
//status_t LIS3MDL_MAG_WriteReg(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
status_t LIS3MDL_MAG_WriteReg(uint8_t deviceAddress, uint8_t WriteAddr, uint8_t Data)   // iii
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af04      	add	r7, sp, #16
 800a312:	4603      	mov	r3, r0
 800a314:	71fb      	strb	r3, [r7, #7]
 800a316:	460b      	mov	r3, r1
 800a318:	71bb      	strb	r3, [r7, #6]
 800a31a:	4613      	mov	r3, r2
 800a31c:	717b      	strb	r3, [r7, #5]
  if ( HAL_I2C_Mem_Write(&hi2c2, deviceAddress, WriteAddr, 1, &Data, 1, 10))
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	b299      	uxth	r1, r3
 800a322:	79bb      	ldrb	r3, [r7, #6]
 800a324:	b29a      	uxth	r2, r3
 800a326:	230a      	movs	r3, #10
 800a328:	9302      	str	r3, [sp, #8]
 800a32a:	2301      	movs	r3, #1
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	1d7b      	adds	r3, r7, #5
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	2301      	movs	r3, #1
 800a334:	4806      	ldr	r0, [pc, #24]	; (800a350 <LIS3MDL_MAG_WriteReg+0x44>)
 800a336:	f7f9 fa57 	bl	80037e8 <HAL_I2C_Mem_Write>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <LIS3MDL_MAG_WriteReg+0x38>
    return SEN_ERROR;
 800a340:	2300      	movs	r3, #0
 800a342:	e000      	b.n	800a346 <LIS3MDL_MAG_WriteReg+0x3a>

  return SEN_SUCCESS;
 800a344:	2301      	movs	r3, #1
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	200096ec 	.word	0x200096ec

0800a354 <LIS3MDL_MAG_ReadReg>:
* Output      : Data REad
* Return      : None
*******************************************************************************/
//status_t LIS3MDL_MAG_ReadReg(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
status_t LIS3MDL_MAG_ReadReg(uint8_t deviceAddr, uint8_t Reg, uint8_t* Data)    // iii
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af04      	add	r7, sp, #16
 800a35a:	4603      	mov	r3, r0
 800a35c:	603a      	str	r2, [r7, #0]
 800a35e:	71fb      	strb	r3, [r7, #7]
 800a360:	460b      	mov	r3, r1
 800a362:	71bb      	strb	r3, [r7, #6]
  if ( HAL_I2C_Mem_Read(&hi2c2, deviceAddr, Reg, 1, Data, 1, 10))
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	b299      	uxth	r1, r3
 800a368:	79bb      	ldrb	r3, [r7, #6]
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	230a      	movs	r3, #10
 800a36e:	9302      	str	r3, [sp, #8]
 800a370:	2301      	movs	r3, #1
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	2301      	movs	r3, #1
 800a37a:	4806      	ldr	r0, [pc, #24]	; (800a394 <LIS3MDL_MAG_ReadReg+0x40>)
 800a37c:	f7f9 fb3c 	bl	80039f8 <HAL_I2C_Mem_Read>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <LIS3MDL_MAG_ReadReg+0x36>
    return SEN_ERROR;
 800a386:	2300      	movs	r3, #0
 800a388:	e000      	b.n	800a38c <LIS3MDL_MAG_ReadReg+0x38>

  return SEN_SUCCESS;
 800a38a:	2301      	movs	r3, #1
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	200096ec 	.word	0x200096ec

0800a398 <LIS3MDL_MAG_R_WHO_AM_I_>:
* Input          : Pointer to uint8_t
* Output         : Status of WHO_AM_I_BIT
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t LIS3MDL_MAG_R_WHO_AM_I_(uint8_t id, uint8_t *value)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	71fb      	strb	r3, [r7, #7]
  //if( !LIS3MDL_MAG_ReadReg(handle, LIS3MDL_MAG_WHO_AM_I_REG, (uint8_t *)value, 1) )
  if( !LIS3MDL_MAG_ReadReg(id , LIS3MDL_MAG_WHO_AM_I_REG, value) )
 800a3a4:	79fb      	ldrb	r3, [r7, #7]
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	210f      	movs	r1, #15
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7ff ffd2 	bl	800a354 <LIS3MDL_MAG_ReadReg>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <LIS3MDL_MAG_R_WHO_AM_I_+0x22>
    return SEN_ERROR;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e008      	b.n	800a3cc <LIS3MDL_MAG_R_WHO_AM_I_+0x34>

  *value &= LIS3MDL_MAG_WHO_AM_I_BIT_MASK; //coerce
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	701a      	strb	r2, [r3, #0]
  *value = *value >> LIS3MDL_MAG_WHO_AM_I_BIT_POSITION; //mask
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781a      	ldrb	r2, [r3, #0]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	701a      	strb	r2, [r3, #0]

  return SEN_SUCCESS;
 800a3ca:	2301      	movs	r3, #1
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <LIS3MDL_MAG_W_SystemOperatingMode>:
* Input          : LIS3MDL_MAG_MD_t
* Output         : None
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t  LIS3MDL_MAG_W_SystemOperatingMode(uint8_t id, LIS3MDL_MAG_MD_t newValue)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	460a      	mov	r2, r1
 800a3de:	71fb      	strb	r3, [r7, #7]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	71bb      	strb	r3, [r7, #6]
  uint8_t value;

  //if( !LIS3MDL_MAG_ReadReg(handle, LIS3MDL_MAG_CTRL_REG3, &value, 1) )
  if( !LIS3MDL_MAG_ReadReg(id , LIS3MDL_MAG_CTRL_REG3, &value) )
 800a3e4:	f107 020f 	add.w	r2, r7, #15
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	2122      	movs	r1, #34	; 0x22
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff ffb1 	bl	800a354 <LIS3MDL_MAG_ReadReg>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <LIS3MDL_MAG_W_SystemOperatingMode+0x28>
    return SEN_ERROR;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e015      	b.n	800a428 <LIS3MDL_MAG_W_SystemOperatingMode+0x54>

  value &= ~LIS3MDL_MAG_MD_MASK;
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	f023 0303 	bic.w	r3, r3, #3
 800a402:	b2db      	uxtb	r3, r3
 800a404:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 800a406:	7bfa      	ldrb	r2, [r7, #15]
 800a408:	79bb      	ldrb	r3, [r7, #6]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	73fb      	strb	r3, [r7, #15]

  //if( !LIS3MDL_MAG_WriteReg(handle, LIS3MDL_MAG_CTRL_REG3, &value, 1) )
  if( !LIS3MDL_MAG_WriteReg(id , LIS3MDL_MAG_CTRL_REG3, value) )
 800a410:	7bfa      	ldrb	r2, [r7, #15]
 800a412:	79fb      	ldrb	r3, [r7, #7]
 800a414:	2122      	movs	r1, #34	; 0x22
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff ff78 	bl	800a30c <LIS3MDL_MAG_WriteReg>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <LIS3MDL_MAG_W_SystemOperatingMode+0x52>
    return SEN_ERROR;
 800a422:	2300      	movs	r3, #0
 800a424:	e000      	b.n	800a428 <LIS3MDL_MAG_W_SystemOperatingMode+0x54>

  return SEN_SUCCESS;
 800a426:	2301      	movs	r3, #1
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <LIS3MDL_MAG_W_FullScale>:
* Input          : LIS3MDL_MAG_FS_t
* Output         : None
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t  LIS3MDL_MAG_W_FullScale(uint8_t id, LIS3MDL_MAG_FS_t newValue)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	460a      	mov	r2, r1
 800a43a:	71fb      	strb	r3, [r7, #7]
 800a43c:	4613      	mov	r3, r2
 800a43e:	71bb      	strb	r3, [r7, #6]
  uint8_t value;

  //if( !LIS3MDL_MAG_ReadReg(handle, LIS3MDL_MAG_CTRL_REG2, &value, 1) )
  if( !LIS3MDL_MAG_ReadReg(id, LIS3MDL_MAG_CTRL_REG2, &value) )
 800a440:	f107 020f 	add.w	r2, r7, #15
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	2121      	movs	r1, #33	; 0x21
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff ff83 	bl	800a354 <LIS3MDL_MAG_ReadReg>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <LIS3MDL_MAG_W_FullScale+0x28>
    return SEN_ERROR;
 800a454:	2300      	movs	r3, #0
 800a456:	e015      	b.n	800a484 <LIS3MDL_MAG_W_FullScale+0x54>

  value &= ~LIS3MDL_MAG_FS_MASK;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 800a462:	7bfa      	ldrb	r2, [r7, #15]
 800a464:	79bb      	ldrb	r3, [r7, #6]
 800a466:	4313      	orrs	r3, r2
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	73fb      	strb	r3, [r7, #15]

  //if( !LIS3MDL_MAG_WriteReg(handle, LIS3MDL_MAG_CTRL_REG2, &value, 1) )
  if( !LIS3MDL_MAG_WriteReg(id , LIS3MDL_MAG_CTRL_REG2, value) )
 800a46c:	7bfa      	ldrb	r2, [r7, #15]
 800a46e:	79fb      	ldrb	r3, [r7, #7]
 800a470:	2121      	movs	r1, #33	; 0x21
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff ff4a 	bl	800a30c <LIS3MDL_MAG_WriteReg>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <LIS3MDL_MAG_W_FullScale+0x52>
    return SEN_ERROR;
 800a47e:	2300      	movs	r3, #0
 800a480:	e000      	b.n	800a484 <LIS3MDL_MAG_W_FullScale+0x54>

  return SEN_SUCCESS;
 800a482:	2301      	movs	r3, #1
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <LIS3MDL_MAG_W_OutputDataRate>:
* Input          : LIS3MDL_MAG_DO_t
* Output         : None
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t  LIS3MDL_MAG_W_OutputDataRate(uint8_t id, LIS3MDL_MAG_DO_t newValue)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	460a      	mov	r2, r1
 800a496:	71fb      	strb	r3, [r7, #7]
 800a498:	4613      	mov	r3, r2
 800a49a:	71bb      	strb	r3, [r7, #6]
  uint8_t value;

  //if( !LIS3MDL_MAG_ReadReg(handle, LIS3MDL_MAG_CTRL_REG1, &value, 1) )
  if( !LIS3MDL_MAG_ReadReg(id, LIS3MDL_MAG_CTRL_REG1, &value) )
 800a49c:	f107 020f 	add.w	r2, r7, #15
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	2120      	movs	r1, #32
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff ff55 	bl	800a354 <LIS3MDL_MAG_ReadReg>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <LIS3MDL_MAG_W_OutputDataRate+0x28>
    return SEN_ERROR;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	e015      	b.n	800a4e0 <LIS3MDL_MAG_W_OutputDataRate+0x54>

  value &= ~LIS3MDL_MAG_DO_MASK;
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	f023 031c 	bic.w	r3, r3, #28
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	73fb      	strb	r3, [r7, #15]
  value |= newValue;
 800a4be:	7bfa      	ldrb	r2, [r7, #15]
 800a4c0:	79bb      	ldrb	r3, [r7, #6]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	73fb      	strb	r3, [r7, #15]

  //if( !LIS3MDL_MAG_WriteReg(handle, LIS3MDL_MAG_CTRL_REG1, &value, 1) )
  if( !LIS3MDL_MAG_WriteReg(id , LIS3MDL_MAG_CTRL_REG1, value) )
 800a4c8:	7bfa      	ldrb	r2, [r7, #15]
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	2120      	movs	r1, #32
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff ff1c 	bl	800a30c <LIS3MDL_MAG_WriteReg>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <LIS3MDL_MAG_W_OutputDataRate+0x52>
    return SEN_ERROR;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	e000      	b.n	800a4e0 <LIS3MDL_MAG_W_OutputDataRate+0x54>

  return SEN_SUCCESS;
 800a4de:	2301      	movs	r3, #1
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <LIS3MDL_MAG_Get_Magnetic>:
* Input          : pointer to [uint8_t]
* Output         : Magnetic buffer uint8_t
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t LIS3MDL_MAG_Get_Magnetic(uint8_t id, uint8_t *buff)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	6039      	str	r1, [r7, #0]
 800a4f2:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j, k;
  uint8_t numberOfByteForDimension;

  numberOfByteForDimension = 6 / 3;
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	733b      	strb	r3, [r7, #12]

  k = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	737b      	strb	r3, [r7, #13]
  for (i = 0; i < 3; i++ )
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]
 800a500:	e01e      	b.n	800a540 <LIS3MDL_MAG_Get_Magnetic+0x58>
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
 800a502:	2300      	movs	r3, #0
 800a504:	73bb      	strb	r3, [r7, #14]
 800a506:	e014      	b.n	800a532 <LIS3MDL_MAG_Get_Magnetic+0x4a>
    {
      //if( !LIS3MDL_MAG_ReadReg(handle, LIS3MDL_MAG_OUTX_L + k, &buff[k], 1))
      if( !LIS3MDL_MAG_ReadReg(id, LIS3MDL_MAG_OUTX_L + k, &buff[k]) )
 800a508:	7b7b      	ldrb	r3, [r7, #13]
 800a50a:	3328      	adds	r3, #40	; 0x28
 800a50c:	b2d9      	uxtb	r1, r3
 800a50e:	7b7b      	ldrb	r3, [r7, #13]
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	441a      	add	r2, r3
 800a514:	79fb      	ldrb	r3, [r7, #7]
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff ff1c 	bl	800a354 <LIS3MDL_MAG_ReadReg>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <LIS3MDL_MAG_Get_Magnetic+0x3e>
        return SEN_ERROR;
 800a522:	2300      	movs	r3, #0
 800a524:	e010      	b.n	800a548 <LIS3MDL_MAG_Get_Magnetic+0x60>
      k++;
 800a526:	7b7b      	ldrb	r3, [r7, #13]
 800a528:	3301      	adds	r3, #1
 800a52a:	737b      	strb	r3, [r7, #13]
    for (j = 0; j < numberOfByteForDimension; j++ )
 800a52c:	7bbb      	ldrb	r3, [r7, #14]
 800a52e:	3301      	adds	r3, #1
 800a530:	73bb      	strb	r3, [r7, #14]
 800a532:	7bba      	ldrb	r2, [r7, #14]
 800a534:	7b3b      	ldrb	r3, [r7, #12]
 800a536:	429a      	cmp	r2, r3
 800a538:	d3e6      	bcc.n	800a508 <LIS3MDL_MAG_Get_Magnetic+0x20>
  for (i = 0; i < 3; i++ )
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
 800a53c:	3301      	adds	r3, #1
 800a53e:	73fb      	strb	r3, [r7, #15]
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d9dd      	bls.n	800a502 <LIS3MDL_MAG_Get_Magnetic+0x1a>
    }
  }

  return SEN_SUCCESS;
 800a546:	2301      	movs	r3, #1
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <AIS328DQ_Init>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/

status_t AIS328DQ_Init(uint8_t deviceAddress)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	71fb      	strb	r3, [r7, #7]
  uint8_t val;
  
  //set ODR (turn ON device)
  if (AIS328DQ_SetODR(deviceAddress, AIS328DQ_ODR_100Hz) != SEN_SUCCESS)
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	2101      	movs	r1, #1
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 f896 	bl	800a690 <AIS328DQ_SetODR>
 800a564:	4603      	mov	r3, r0
 800a566:	2b01      	cmp	r3, #1
 800a568:	d001      	beq.n	800a56e <AIS328DQ_Init+0x1e>
    return SEN_ERROR;
 800a56a:	2300      	movs	r3, #0
 800a56c:	e02a      	b.n	800a5c4 <AIS328DQ_Init+0x74>
  //else fprintf(CON,"\r\n[1]SET_ODR_OK\n\r");
  
  //get sensor ID
  if (AIS328DQ_GetWHO_AM_I(deviceAddress, &val) != SEN_SUCCESS)
 800a56e:	f107 020f 	add.w	r2, r7, #15
 800a572:	79fb      	ldrb	r3, [r7, #7]
 800a574:	4611      	mov	r1, r2
 800a576:	4618      	mov	r0, r3
 800a578:	f000 f86e 	bl	800a658 <AIS328DQ_GetWHO_AM_I>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d001      	beq.n	800a586 <AIS328DQ_Init+0x36>
    return SEN_ERROR;
 800a582:	2300      	movs	r3, #0
 800a584:	e01e      	b.n	800a5c4 <AIS328DQ_Init+0x74>
  //else fprintf(CON,"[1]GET_WHOAMI_OK=%02X\n\r", val[0]);
  
  //set PowerMode
  if (AIS328DQ_SetMode(deviceAddress, AIS328DQ_NORMAL) != SEN_SUCCESS)
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	2101      	movs	r1, #1
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f8b2 	bl	800a6f4 <AIS328DQ_SetMode>
 800a590:	4603      	mov	r3, r0
 800a592:	2b01      	cmp	r3, #1
 800a594:	d001      	beq.n	800a59a <AIS328DQ_Init+0x4a>
    return SEN_ERROR;
 800a596:	2300      	movs	r3, #0
 800a598:	e014      	b.n	800a5c4 <AIS328DQ_Init+0x74>
  //else fprintf(CON,"[1]SET_MODE_OK\n\r");  
  
  //set Fullscale
  if (AIS328DQ_SetFullScale(deviceAddress, AIS328DQ_FULLSCALE_2) != SEN_SUCCESS)
 800a59a:	79fb      	ldrb	r3, [r7, #7]
 800a59c:	2100      	movs	r1, #0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 f90b 	bl	800a7ba <AIS328DQ_SetFullScale>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d001      	beq.n	800a5ae <AIS328DQ_Init+0x5e>
    return SEN_ERROR;    
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	e00a      	b.n	800a5c4 <AIS328DQ_Init+0x74>
  //else fprintf(CON,"[1]SET_FULLSCALE_OK\n\r");
  
  //set axis Enable
  if (AIS328DQ_SetAxis(deviceAddress, AIS328DQ_X_ENABLE | AIS328DQ_Y_ENABLE |  AIS328DQ_Z_ENABLE) != SEN_SUCCESS)
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	2107      	movs	r1, #7
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 f8d0 	bl	800a758 <AIS328DQ_SetAxis>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d001      	beq.n	800a5c2 <AIS328DQ_Init+0x72>
    return SEN_ERROR;    
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e000      	b.n	800a5c4 <AIS328DQ_Init+0x74>
  //else fprintf(CON,"[1]SET_AXIS_OK\n\r");
  
  return SEN_SUCCESS;
 800a5c2:	2301      	movs	r3, #1
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <AIS328DQ_ReadReg>:
* Input			: Register Address
* Output		: Data Read
* Return		: Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
uint8_t AIS328DQ_ReadReg(uint8_t deviceAddr, uint8_t Reg, uint8_t* Data)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af04      	add	r7, sp, #16
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	603a      	str	r2, [r7, #0]
 800a5d6:	71fb      	strb	r3, [r7, #7]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	71bb      	strb	r3, [r7, #6]
  if (HAL_OK != HAL_I2C_Mem_Read(&hi2c2, deviceAddr, Reg, 1, Data, 1, 10))
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	b299      	uxth	r1, r3
 800a5e0:	79bb      	ldrb	r3, [r7, #6]
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	230a      	movs	r3, #10
 800a5e6:	9302      	str	r3, [sp, #8]
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	9301      	str	r3, [sp, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	4806      	ldr	r0, [pc, #24]	; (800a60c <AIS328DQ_ReadReg+0x40>)
 800a5f4:	f7f9 fa00 	bl	80039f8 <HAL_I2C_Mem_Read>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <AIS328DQ_ReadReg+0x36>
    return SEN_ERROR;
 800a5fe:	2300      	movs	r3, #0
 800a600:	e000      	b.n	800a604 <AIS328DQ_ReadReg+0x38>
  
  return SEN_SUCCESS;
 800a602:	2301      	movs	r3, #1
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	200096ec 	.word	0x200096ec

0800a610 <AIS328DQ_WriteReg>:
* Input			: Register Address, Data to be written
* Output		: None
* Return		: Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
uint8_t AIS328DQ_WriteReg(uint8_t deviceAddress, uint8_t WriteAddr, uint8_t Data)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af04      	add	r7, sp, #16
 800a616:	4603      	mov	r3, r0
 800a618:	71fb      	strb	r3, [r7, #7]
 800a61a:	460b      	mov	r3, r1
 800a61c:	71bb      	strb	r3, [r7, #6]
 800a61e:	4613      	mov	r3, r2
 800a620:	717b      	strb	r3, [r7, #5]
  if (HAL_OK != HAL_I2C_Mem_Write(&hi2c2, deviceAddress, WriteAddr, 1, &Data, 1, 10))
 800a622:	79fb      	ldrb	r3, [r7, #7]
 800a624:	b299      	uxth	r1, r3
 800a626:	79bb      	ldrb	r3, [r7, #6]
 800a628:	b29a      	uxth	r2, r3
 800a62a:	230a      	movs	r3, #10
 800a62c:	9302      	str	r3, [sp, #8]
 800a62e:	2301      	movs	r3, #1
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	1d7b      	adds	r3, r7, #5
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	2301      	movs	r3, #1
 800a638:	4806      	ldr	r0, [pc, #24]	; (800a654 <AIS328DQ_WriteReg+0x44>)
 800a63a:	f7f9 f8d5 	bl	80037e8 <HAL_I2C_Mem_Write>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <AIS328DQ_WriteReg+0x38>
    return SEN_ERROR;
 800a644:	2300      	movs	r3, #0
 800a646:	e000      	b.n	800a64a <AIS328DQ_WriteReg+0x3a>
  
  return SEN_SUCCESS;
 800a648:	2301      	movs	r3, #1
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	200096ec 	.word	0x200096ec

0800a658 <AIS328DQ_GetWHO_AM_I>:
* Description    : Read identification code from AIS328DQ_WHO_AM_I register
* Input          : char to be filled with the Device identification Value
* Output         : None
* Return         : Status [value of FSS]
*******************************************************************************/
status_t AIS328DQ_GetWHO_AM_I(uint8_t deviceAddress, uint8_t* val){
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	6039      	str	r1, [r7, #0]
 800a662:	71fb      	strb	r3, [r7, #7]
  
  if( !AIS328DQ_ReadReg(deviceAddress, AIS328DQ_WHO_AM_I, val) )
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	210f      	movs	r1, #15
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff ffae 	bl	800a5cc <AIS328DQ_ReadReg>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <AIS328DQ_GetWHO_AM_I+0x22>
    return SEN_ERROR;
 800a676:	2300      	movs	r3, #0
 800a678:	e006      	b.n	800a688 <AIS328DQ_GetWHO_AM_I+0x30>
  
  if (*val != AIS328DQ_WHO_AM_I_VAL)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	2b32      	cmp	r3, #50	; 0x32
 800a680:	d001      	beq.n	800a686 <AIS328DQ_GetWHO_AM_I+0x2e>
    return SEN_ERROR;
 800a682:	2300      	movs	r3, #0
 800a684:	e000      	b.n	800a688 <AIS328DQ_GetWHO_AM_I+0x30>
  
  return SEN_SUCCESS;
 800a686:	2301      	movs	r3, #1
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <AIS328DQ_SetODR>:
* Description    : Sets AIS328DQ Accelerometer Output Data Rate 
* Input          : Output Data Rate
* Output         : None
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t AIS328DQ_SetODR(uint8_t deviceAddress, AIS328DQ_ODR_t dr){
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	460a      	mov	r2, r1
 800a69a:	71fb      	strb	r3, [r7, #7]
 800a69c:	4613      	mov	r3, r2
 800a69e:	71bb      	strb	r3, [r7, #6]
  uint8_t value;
  
  if( !AIS328DQ_ReadReg(deviceAddress, AIS328DQ_CTRL_REG1, &value) )
 800a6a0:	f107 020f 	add.w	r2, r7, #15
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	2120      	movs	r1, #32
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff ff8f 	bl	800a5cc <AIS328DQ_ReadReg>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <AIS328DQ_SetODR+0x28>
    return SEN_ERROR;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	e019      	b.n	800a6ec <AIS328DQ_SetODR+0x5c>
  
  value &= 0xE7;
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	f023 0318 	bic.w	r3, r3, #24
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	73fb      	strb	r3, [r7, #15]
  value |= dr<<AIS328DQ_DR;
 800a6c2:	79bb      	ldrb	r3, [r7, #6]
 800a6c4:	00db      	lsls	r3, r3, #3
 800a6c6:	b25a      	sxtb	r2, r3
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	b25b      	sxtb	r3, r3
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	b25b      	sxtb	r3, r3
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	73fb      	strb	r3, [r7, #15]
  
  if( !AIS328DQ_WriteReg(deviceAddress, AIS328DQ_CTRL_REG1, value) )
 800a6d4:	7bfa      	ldrb	r2, [r7, #15]
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	2120      	movs	r1, #32
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7ff ff98 	bl	800a610 <AIS328DQ_WriteReg>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <AIS328DQ_SetODR+0x5a>
    return SEN_ERROR;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e000      	b.n	800a6ec <AIS328DQ_SetODR+0x5c>
  
  return SEN_SUCCESS;
 800a6ea:	2301      	movs	r3, #1
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <AIS328DQ_SetMode>:
* Description    : Sets AIS328DQ Accelerometer Operating Mode
* Input          : Modality (AIS328DQ_LOW_POWER, AIS328DQ_NORMAL, AIS328DQ_POWER_DOWN...)
* Output         : None
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t AIS328DQ_SetMode(uint8_t deviceAddress, AIS328DQ_Mode_t pm) {
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	460a      	mov	r2, r1
 800a6fe:	71fb      	strb	r3, [r7, #7]
 800a700:	4613      	mov	r3, r2
 800a702:	71bb      	strb	r3, [r7, #6]
  uint8_t value;
  
  if( !AIS328DQ_ReadReg(deviceAddress, AIS328DQ_CTRL_REG1, &value) )
 800a704:	f107 020f 	add.w	r2, r7, #15
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	2120      	movs	r1, #32
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7ff ff5d 	bl	800a5cc <AIS328DQ_ReadReg>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <AIS328DQ_SetMode+0x28>
    return SEN_ERROR;
 800a718:	2300      	movs	r3, #0
 800a71a:	e019      	b.n	800a750 <AIS328DQ_SetMode+0x5c>
  
  value &= 0x1F;
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	f003 031f 	and.w	r3, r3, #31
 800a722:	b2db      	uxtb	r3, r3
 800a724:	73fb      	strb	r3, [r7, #15]
  value |= (pm<<AIS328DQ_PM);   
 800a726:	79bb      	ldrb	r3, [r7, #6]
 800a728:	015b      	lsls	r3, r3, #5
 800a72a:	b25a      	sxtb	r2, r3
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	b25b      	sxtb	r3, r3
 800a730:	4313      	orrs	r3, r2
 800a732:	b25b      	sxtb	r3, r3
 800a734:	b2db      	uxtb	r3, r3
 800a736:	73fb      	strb	r3, [r7, #15]
  
  if( !AIS328DQ_WriteReg(deviceAddress, AIS328DQ_CTRL_REG1, value) )
 800a738:	7bfa      	ldrb	r2, [r7, #15]
 800a73a:	79fb      	ldrb	r3, [r7, #7]
 800a73c:	2120      	movs	r1, #32
 800a73e:	4618      	mov	r0, r3
 800a740:	f7ff ff66 	bl	800a610 <AIS328DQ_WriteReg>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <AIS328DQ_SetMode+0x5a>
    return SEN_ERROR;
 800a74a:	2300      	movs	r3, #0
 800a74c:	e000      	b.n	800a750 <AIS328DQ_SetMode+0x5c>
  
  return SEN_SUCCESS;
 800a74e:	2301      	movs	r3, #1
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <AIS328DQ_SetAxis>:
                   | AIS328DQ_Z_ENABLE/AIS328DQ_Z_DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t AIS328DQ_SetAxis(uint8_t deviceAddress, AIS328DQ_Axis_t axis) {
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	460a      	mov	r2, r1
 800a762:	71fb      	strb	r3, [r7, #7]
 800a764:	4613      	mov	r3, r2
 800a766:	71bb      	strb	r3, [r7, #6]
  uint8_t value;
  
  if( !AIS328DQ_ReadReg(deviceAddress, AIS328DQ_CTRL_REG1, &value) )
 800a768:	f107 020f 	add.w	r2, r7, #15
 800a76c:	79fb      	ldrb	r3, [r7, #7]
 800a76e:	2120      	movs	r1, #32
 800a770:	4618      	mov	r0, r3
 800a772:	f7ff ff2b 	bl	800a5cc <AIS328DQ_ReadReg>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <AIS328DQ_SetAxis+0x28>
    return SEN_ERROR;
 800a77c:	2300      	movs	r3, #0
 800a77e:	e018      	b.n	800a7b2 <AIS328DQ_SetAxis+0x5a>
  
  value &= 0xF8;
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	f023 0307 	bic.w	r3, r3, #7
 800a786:	b2db      	uxtb	r3, r3
 800a788:	73fb      	strb	r3, [r7, #15]
  value |= (0x07 & axis);
 800a78a:	79bb      	ldrb	r3, [r7, #6]
 800a78c:	f003 0307 	and.w	r3, r3, #7
 800a790:	b2da      	uxtb	r2, r3
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	4313      	orrs	r3, r2
 800a796:	b2db      	uxtb	r3, r3
 800a798:	73fb      	strb	r3, [r7, #15]
  
  if( !AIS328DQ_WriteReg(deviceAddress, AIS328DQ_CTRL_REG1, value) )
 800a79a:	7bfa      	ldrb	r2, [r7, #15]
 800a79c:	79fb      	ldrb	r3, [r7, #7]
 800a79e:	2120      	movs	r1, #32
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7ff ff35 	bl	800a610 <AIS328DQ_WriteReg>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d101      	bne.n	800a7b0 <AIS328DQ_SetAxis+0x58>
    return SEN_ERROR;   
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	e000      	b.n	800a7b2 <AIS328DQ_SetAxis+0x5a>
  
  return SEN_SUCCESS;
 800a7b0:	2301      	movs	r3, #1
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <AIS328DQ_SetFullScale>:
* Description    : Sets the AIS328DQ FullScale
* Input          : AIS328DQ_FULLSCALE_2/AIS328DQ_FULLSCALE_4/AIS328DQ_FULLSCALE_8
* Output         : None
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t AIS328DQ_SetFullScale(uint8_t deviceAddress, AIS328DQ_Fullscale_t fs) {
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	460a      	mov	r2, r1
 800a7c4:	71fb      	strb	r3, [r7, #7]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	71bb      	strb	r3, [r7, #6]
  uint8_t value;
  
  if( !AIS328DQ_ReadReg(deviceAddress, AIS328DQ_CTRL_REG4, &value) )
 800a7ca:	f107 020f 	add.w	r2, r7, #15
 800a7ce:	79fb      	ldrb	r3, [r7, #7]
 800a7d0:	2123      	movs	r1, #35	; 0x23
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7ff fefa 	bl	800a5cc <AIS328DQ_ReadReg>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <AIS328DQ_SetFullScale+0x28>
    return SEN_ERROR;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e019      	b.n	800a816 <AIS328DQ_SetFullScale+0x5c>
  
  value &= 0xCF;	
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
 800a7e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	73fb      	strb	r3, [r7, #15]
  value |= (fs<<AIS328DQ_FS);
 800a7ec:	79bb      	ldrb	r3, [r7, #6]
 800a7ee:	011b      	lsls	r3, r3, #4
 800a7f0:	b25a      	sxtb	r2, r3
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	b25b      	sxtb	r3, r3
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	b25b      	sxtb	r3, r3
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	73fb      	strb	r3, [r7, #15]
  
  if( !AIS328DQ_WriteReg(deviceAddress, AIS328DQ_CTRL_REG4, value) )
 800a7fe:	7bfa      	ldrb	r2, [r7, #15]
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	2123      	movs	r1, #35	; 0x23
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff ff03 	bl	800a610 <AIS328DQ_WriteReg>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <AIS328DQ_SetFullScale+0x5a>
    return SEN_ERROR;
 800a810:	2300      	movs	r3, #0
 800a812:	e000      	b.n	800a816 <AIS328DQ_SetFullScale+0x5c>
  
  return SEN_SUCCESS;
 800a814:	2301      	movs	r3, #1
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <AIS328DQ_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AccAxesRaw_t Typedef
* Output         : None
* Return         : Status [SEN_ERROR, SEN_SUCCESS]
*******************************************************************************/
status_t AIS328DQ_GetAccAxesRaw(uint8_t deviceAddr, AxesRaw_t* buff) {
 800a81e:	b580      	push	{r7, lr}
 800a820:	b086      	sub	sp, #24
 800a822:	af00      	add	r7, sp, #0
 800a824:	4603      	mov	r3, r0
 800a826:	6039      	str	r1, [r7, #0]
 800a828:	71fb      	strb	r3, [r7, #7]
  int16_t value;
  uint8_t *valueL = (uint8_t *)(&value);
 800a82a:	f107 030e 	add.w	r3, r7, #14
 800a82e:	617b      	str	r3, [r7, #20]
  uint8_t *valueH = ((uint8_t *)(&value)+1);
 800a830:	f107 030e 	add.w	r3, r7, #14
 800a834:	3301      	adds	r3, #1
 800a836:	613b      	str	r3, [r7, #16]
  
  if( !AIS328DQ_ReadReg(deviceAddr, AIS328DQ_OUT_X_L, valueL) )
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	2128      	movs	r1, #40	; 0x28
 800a83e:	4618      	mov	r0, r3
 800a840:	f7ff fec4 	bl	800a5cc <AIS328DQ_ReadReg>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <AIS328DQ_GetAccAxesRaw+0x30>
    return SEN_ERROR;
 800a84a:	2300      	movs	r3, #0
 800a84c:	e052      	b.n	800a8f4 <AIS328DQ_GetAccAxesRaw+0xd6>
  
  if( !AIS328DQ_ReadReg(deviceAddr, AIS328DQ_OUT_X_H, valueH) )
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	2129      	movs	r1, #41	; 0x29
 800a854:	4618      	mov	r0, r3
 800a856:	f7ff feb9 	bl	800a5cc <AIS328DQ_ReadReg>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d101      	bne.n	800a864 <AIS328DQ_GetAccAxesRaw+0x46>
    return SEN_ERROR;
 800a860:	2300      	movs	r3, #0
 800a862:	e047      	b.n	800a8f4 <AIS328DQ_GetAccAxesRaw+0xd6>
  
  buff->AXIS_X = value/16;
 800a864:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	da00      	bge.n	800a86e <AIS328DQ_GetAccAxesRaw+0x50>
 800a86c:	330f      	adds	r3, #15
 800a86e:	111b      	asrs	r3, r3, #4
 800a870:	b21a      	sxth	r2, r3
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	801a      	strh	r2, [r3, #0]
  
  if( !AIS328DQ_ReadReg(deviceAddr, AIS328DQ_OUT_Y_L, valueL) )
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	212a      	movs	r1, #42	; 0x2a
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff fea5 	bl	800a5cc <AIS328DQ_ReadReg>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <AIS328DQ_GetAccAxesRaw+0x6e>
    return SEN_ERROR;
 800a888:	2300      	movs	r3, #0
 800a88a:	e033      	b.n	800a8f4 <AIS328DQ_GetAccAxesRaw+0xd6>
  
  if( !AIS328DQ_ReadReg(deviceAddr, AIS328DQ_OUT_Y_H, valueH) )
 800a88c:	79fb      	ldrb	r3, [r7, #7]
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	212b      	movs	r1, #43	; 0x2b
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff fe9a 	bl	800a5cc <AIS328DQ_ReadReg>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <AIS328DQ_GetAccAxesRaw+0x84>
    return SEN_ERROR;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e028      	b.n	800a8f4 <AIS328DQ_GetAccAxesRaw+0xd6>
  
  buff->AXIS_Y = value/16;
 800a8a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da00      	bge.n	800a8ac <AIS328DQ_GetAccAxesRaw+0x8e>
 800a8aa:	330f      	adds	r3, #15
 800a8ac:	111b      	asrs	r3, r3, #4
 800a8ae:	b21a      	sxth	r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	805a      	strh	r2, [r3, #2]
  
  if( !AIS328DQ_ReadReg(deviceAddr, AIS328DQ_OUT_Z_L, valueL) )
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	212c      	movs	r1, #44	; 0x2c
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff fe86 	bl	800a5cc <AIS328DQ_ReadReg>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <AIS328DQ_GetAccAxesRaw+0xac>
    return SEN_ERROR;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e014      	b.n	800a8f4 <AIS328DQ_GetAccAxesRaw+0xd6>
  
  if( !AIS328DQ_ReadReg(deviceAddr, AIS328DQ_OUT_Z_H, valueH) )
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	212d      	movs	r1, #45	; 0x2d
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff fe7b 	bl	800a5cc <AIS328DQ_ReadReg>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <AIS328DQ_GetAccAxesRaw+0xc2>
    return SEN_ERROR;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e009      	b.n	800a8f4 <AIS328DQ_GetAccAxesRaw+0xd6>
  
  buff->AXIS_Z = value/16;
 800a8e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	da00      	bge.n	800a8ea <AIS328DQ_GetAccAxesRaw+0xcc>
 800a8e8:	330f      	adds	r3, #15
 800a8ea:	111b      	asrs	r3, r3, #4
 800a8ec:	b21a      	sxth	r2, r3
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	809a      	strh	r2, [r3, #4]
  
  return SEN_SUCCESS;  
 800a8f2:	2301      	movs	r3, #1
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <Panels_Init>:
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* EXTERNAL (NONE STATIC) ROUTINES DEFINITION
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
void Panels_Init(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  PanelStat = 0;
 800a902:	4b55      	ldr	r3, [pc, #340]	; (800aa58 <Panels_Init+0x15c>)
 800a904:	2200      	movs	r2, #0
 800a906:	701a      	strb	r2, [r3, #0]
  
  // Configure all panel temperature sensors CS as inputs with pull-down 
  GPIO_InitStruct.Pin = PAN5_CS2_Pin;
 800a908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a90c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a90e:	2300      	movs	r3, #0
 800a910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a912:	2302      	movs	r3, #2
 800a914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a916:	2300      	movs	r3, #0
 800a918:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PAN5_CS2_GPIO_Port, &GPIO_InitStruct);
 800a91a:	1d3b      	adds	r3, r7, #4
 800a91c:	4619      	mov	r1, r3
 800a91e:	484f      	ldr	r0, [pc, #316]	; (800aa5c <Panels_Init+0x160>)
 800a920:	f7f8 f826 	bl	8002970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PAN6_CS2_Pin|PAN1_CS2_Pin|PAN2_CS2_Pin|PAN3_CS2_Pin|PAN4_CS2_Pin;
 800a924:	f240 4355 	movw	r3, #1109	; 0x455
 800a928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a92e:	2302      	movs	r3, #2
 800a930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a932:	2300      	movs	r3, #0
 800a934:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a936:	1d3b      	adds	r3, r7, #4
 800a938:	4619      	mov	r1, r3
 800a93a:	4849      	ldr	r0, [pc, #292]	; (800aa60 <Panels_Init+0x164>)
 800a93c:	f7f8 f818 	bl	8002970 <HAL_GPIO_Init>
  
  osDelay(10);
 800a940:	200a      	movs	r0, #10
 800a942:	f009 fe8c 	bl	801465e <osDelay>
  
  if (HAL_GPIO_ReadPin(PAN1_CS2_GPIO_Port, PAN1_CS2_Pin)) PanelStat |= (1 << PAN_X_P);
 800a946:	2101      	movs	r1, #1
 800a948:	4845      	ldr	r0, [pc, #276]	; (800aa60 <Panels_Init+0x164>)
 800a94a:	f7f8 fac9 	bl	8002ee0 <HAL_GPIO_ReadPin>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d007      	beq.n	800a964 <Panels_Init+0x68>
 800a954:	4b40      	ldr	r3, [pc, #256]	; (800aa58 <Panels_Init+0x15c>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	f043 0301 	orr.w	r3, r3, #1
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	4b3d      	ldr	r3, [pc, #244]	; (800aa58 <Panels_Init+0x15c>)
 800a962:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(PAN2_CS2_GPIO_Port, PAN2_CS2_Pin)) PanelStat |= (1 << PAN_Y_P);
 800a964:	2104      	movs	r1, #4
 800a966:	483e      	ldr	r0, [pc, #248]	; (800aa60 <Panels_Init+0x164>)
 800a968:	f7f8 faba 	bl	8002ee0 <HAL_GPIO_ReadPin>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d007      	beq.n	800a982 <Panels_Init+0x86>
 800a972:	4b39      	ldr	r3, [pc, #228]	; (800aa58 <Panels_Init+0x15c>)
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f043 0302 	orr.w	r3, r3, #2
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	4b36      	ldr	r3, [pc, #216]	; (800aa58 <Panels_Init+0x15c>)
 800a980:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(PAN3_CS2_GPIO_Port, PAN3_CS2_Pin)) PanelStat |= (1 << PAN_Z_P);
 800a982:	2110      	movs	r1, #16
 800a984:	4836      	ldr	r0, [pc, #216]	; (800aa60 <Panels_Init+0x164>)
 800a986:	f7f8 faab 	bl	8002ee0 <HAL_GPIO_ReadPin>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d007      	beq.n	800a9a0 <Panels_Init+0xa4>
 800a990:	4b31      	ldr	r3, [pc, #196]	; (800aa58 <Panels_Init+0x15c>)
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	b2db      	uxtb	r3, r3
 800a996:	f043 0304 	orr.w	r3, r3, #4
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	4b2e      	ldr	r3, [pc, #184]	; (800aa58 <Panels_Init+0x15c>)
 800a99e:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(PAN4_CS2_GPIO_Port, PAN4_CS2_Pin)) PanelStat |= (1 << PAN_X_M);
 800a9a0:	2140      	movs	r1, #64	; 0x40
 800a9a2:	482f      	ldr	r0, [pc, #188]	; (800aa60 <Panels_Init+0x164>)
 800a9a4:	f7f8 fa9c 	bl	8002ee0 <HAL_GPIO_ReadPin>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <Panels_Init+0xc2>
 800a9ae:	4b2a      	ldr	r3, [pc, #168]	; (800aa58 <Panels_Init+0x15c>)
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	f043 0308 	orr.w	r3, r3, #8
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	4b27      	ldr	r3, [pc, #156]	; (800aa58 <Panels_Init+0x15c>)
 800a9bc:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(PAN5_CS2_GPIO_Port, PAN5_CS2_Pin)) PanelStat |= (1 << PAN_Y_M);
 800a9be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a9c2:	4826      	ldr	r0, [pc, #152]	; (800aa5c <Panels_Init+0x160>)
 800a9c4:	f7f8 fa8c 	bl	8002ee0 <HAL_GPIO_ReadPin>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d007      	beq.n	800a9de <Panels_Init+0xe2>
 800a9ce:	4b22      	ldr	r3, [pc, #136]	; (800aa58 <Panels_Init+0x15c>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f043 0310 	orr.w	r3, r3, #16
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	4b1f      	ldr	r3, [pc, #124]	; (800aa58 <Panels_Init+0x15c>)
 800a9dc:	701a      	strb	r2, [r3, #0]
  if (HAL_GPIO_ReadPin(PAN6_CS2_GPIO_Port, PAN6_CS2_Pin)) PanelStat |= (1 << PAN_Z_M);  
 800a9de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9e2:	481f      	ldr	r0, [pc, #124]	; (800aa60 <Panels_Init+0x164>)
 800a9e4:	f7f8 fa7c 	bl	8002ee0 <HAL_GPIO_ReadPin>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d007      	beq.n	800a9fe <Panels_Init+0x102>
 800a9ee:	4b1a      	ldr	r3, [pc, #104]	; (800aa58 <Panels_Init+0x15c>)
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f043 0320 	orr.w	r3, r3, #32
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	4b17      	ldr	r3, [pc, #92]	; (800aa58 <Panels_Init+0x15c>)
 800a9fc:	701a      	strb	r2, [r3, #0]
  
  // Configure all panel temperature sensors CS as push-pull outputs
  GPIO_InitStruct.Pin = PAN5_CS2_Pin;
 800a9fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa04:	2301      	movs	r3, #1
 800aa06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa10:	1d3b      	adds	r3, r7, #4
 800aa12:	4619      	mov	r1, r3
 800aa14:	4811      	ldr	r0, [pc, #68]	; (800aa5c <Panels_Init+0x160>)
 800aa16:	f7f7 ffab 	bl	8002970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PAN6_CS2_Pin|PAN1_CS2_Pin|PAN2_CS2_Pin|PAN3_CS2_Pin|PAN4_CS2_Pin;
 800aa1a:	f240 4355 	movw	r3, #1109	; 0x455
 800aa1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa20:	2301      	movs	r3, #1
 800aa22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800aa2c:	1d3b      	adds	r3, r7, #4
 800aa2e:	4619      	mov	r1, r3
 800aa30:	480b      	ldr	r0, [pc, #44]	; (800aa60 <Panels_Init+0x164>)
 800aa32:	f7f7 ff9d 	bl	8002970 <HAL_GPIO_Init>
  
  htim5.Init.Period = MAGTORQ_PWM_PERIOD;
 800aa36:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <Panels_Init+0x168>)
 800aa38:	f240 3283 	movw	r2, #899	; 0x383
 800aa3c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800aa3e:	4809      	ldr	r0, [pc, #36]	; (800aa64 <Panels_Init+0x168>)
 800aa40:	f7fd f865 	bl	8007b0e <HAL_TIM_Base_Init>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d001      	beq.n	800aa4e <Panels_Init+0x152>
  {
    Error_Handler();
 800aa4a:	f7f6 fd67 	bl	800151c <Error_Handler>
  }
  
}
 800aa4e:	bf00      	nop
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20000210 	.word	0x20000210
 800aa5c:	40020800 	.word	0x40020800
 800aa60:	40022000 	.word	0x40022000
 800aa64:	20009798 	.word	0x20009798

0800aa68 <SetMagnetorque>:

status_t SetMagnetorque(uint8_t Panel, uint8_t perc, uint8_t dir)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08c      	sub	sp, #48	; 0x30
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	4603      	mov	r3, r0
 800aa70:	71fb      	strb	r3, [r7, #7]
 800aa72:	460b      	mov	r3, r1
 800aa74:	71bb      	strb	r3, [r7, #6]
 800aa76:	4613      	mov	r3, r2
 800aa78:	717b      	strb	r3, [r7, #5]
  uint32_t tmp, chn;
  TIM_OC_InitTypeDef sConfigOC;

  if(perc > 100) tmp = 100;
 800aa7a:	79bb      	ldrb	r3, [r7, #6]
 800aa7c:	2b64      	cmp	r3, #100	; 0x64
 800aa7e:	d902      	bls.n	800aa86 <SetMagnetorque+0x1e>
 800aa80:	2364      	movs	r3, #100	; 0x64
 800aa82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa84:	e001      	b.n	800aa8a <SetMagnetorque+0x22>
  else tmp = perc;
 800aa86:	79bb      	ldrb	r3, [r7, #6]
 800aa88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (Panel == PAN_X_M)
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	d11c      	bne.n	800aaca <SetMagnetorque+0x62>
  {
    chn = TIM_CHANNEL_1;
 800aa90:	2300      	movs	r3, #0
 800aa92:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dir)
 800aa94:	797b      	ldrb	r3, [r7, #5]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00b      	beq.n	800aab2 <SetMagnetorque+0x4a>
    {
      HAL_GPIO_WritePin(PAN4_DIR1_GPIO_Port, PAN4_DIR1_Pin, GPIO_PIN_RESET);
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2180      	movs	r1, #128	; 0x80
 800aa9e:	4840      	ldr	r0, [pc, #256]	; (800aba0 <SetMagnetorque+0x138>)
 800aaa0:	f7f8 fa36 	bl	8002f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PAN4_DIR2_GPIO_Port, PAN4_DIR2_Pin, GPIO_PIN_SET);
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aaaa:	483e      	ldr	r0, [pc, #248]	; (800aba4 <SetMagnetorque+0x13c>)
 800aaac:	f7f8 fa30 	bl	8002f10 <HAL_GPIO_WritePin>
 800aab0:	e049      	b.n	800ab46 <SetMagnetorque+0xde>
    }
    else
    {
      HAL_GPIO_WritePin(PAN4_DIR2_GPIO_Port, PAN4_DIR2_Pin, GPIO_PIN_RESET);
 800aab2:	2200      	movs	r2, #0
 800aab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aab8:	483a      	ldr	r0, [pc, #232]	; (800aba4 <SetMagnetorque+0x13c>)
 800aaba:	f7f8 fa29 	bl	8002f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PAN4_DIR1_GPIO_Port, PAN4_DIR1_Pin, GPIO_PIN_SET);
 800aabe:	2201      	movs	r2, #1
 800aac0:	2180      	movs	r1, #128	; 0x80
 800aac2:	4837      	ldr	r0, [pc, #220]	; (800aba0 <SetMagnetorque+0x138>)
 800aac4:	f7f8 fa24 	bl	8002f10 <HAL_GPIO_WritePin>
 800aac8:	e03d      	b.n	800ab46 <SetMagnetorque+0xde>
    }
  }
  else
  if (Panel == PAN_Y_M)
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	2b04      	cmp	r3, #4
 800aace:	d11a      	bne.n	800ab06 <SetMagnetorque+0x9e>
  {
    chn = TIM_CHANNEL_2;
 800aad0:	2304      	movs	r3, #4
 800aad2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dir)
 800aad4:	797b      	ldrb	r3, [r7, #5]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00a      	beq.n	800aaf0 <SetMagnetorque+0x88>
    {
      HAL_GPIO_WritePin(PAN5_DIR1_GPIO_Port, PAN5_DIR1_Pin, GPIO_PIN_RESET);
 800aada:	2200      	movs	r2, #0
 800aadc:	2104      	movs	r1, #4
 800aade:	4831      	ldr	r0, [pc, #196]	; (800aba4 <SetMagnetorque+0x13c>)
 800aae0:	f7f8 fa16 	bl	8002f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PAN5_DIR2_GPIO_Port, PAN5_DIR2_Pin, GPIO_PIN_SET);
 800aae4:	2201      	movs	r2, #1
 800aae6:	2108      	movs	r1, #8
 800aae8:	482e      	ldr	r0, [pc, #184]	; (800aba4 <SetMagnetorque+0x13c>)
 800aaea:	f7f8 fa11 	bl	8002f10 <HAL_GPIO_WritePin>
 800aaee:	e02a      	b.n	800ab46 <SetMagnetorque+0xde>
    }
    else
    {
      HAL_GPIO_WritePin(PAN5_DIR2_GPIO_Port, PAN5_DIR2_Pin, GPIO_PIN_RESET);
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2108      	movs	r1, #8
 800aaf4:	482b      	ldr	r0, [pc, #172]	; (800aba4 <SetMagnetorque+0x13c>)
 800aaf6:	f7f8 fa0b 	bl	8002f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PAN5_DIR1_GPIO_Port, PAN5_DIR1_Pin, GPIO_PIN_SET);
 800aafa:	2201      	movs	r2, #1
 800aafc:	2104      	movs	r1, #4
 800aafe:	4829      	ldr	r0, [pc, #164]	; (800aba4 <SetMagnetorque+0x13c>)
 800ab00:	f7f8 fa06 	bl	8002f10 <HAL_GPIO_WritePin>
 800ab04:	e01f      	b.n	800ab46 <SetMagnetorque+0xde>
    }
  }
  else
  if (Panel == PAN_Z_M)
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	2b05      	cmp	r3, #5
 800ab0a:	d11a      	bne.n	800ab42 <SetMagnetorque+0xda>
  {
    chn = TIM_CHANNEL_3;
 800ab0c:	2308      	movs	r3, #8
 800ab0e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dir)
 800ab10:	797b      	ldrb	r3, [r7, #5]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <SetMagnetorque+0xc4>
    {
      HAL_GPIO_WritePin(PAN6_DIR1_GPIO_Port, PAN6_DIR1_Pin, GPIO_PIN_RESET);
 800ab16:	2200      	movs	r2, #0
 800ab18:	2110      	movs	r1, #16
 800ab1a:	4822      	ldr	r0, [pc, #136]	; (800aba4 <SetMagnetorque+0x13c>)
 800ab1c:	f7f8 f9f8 	bl	8002f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PAN6_DIR2_GPIO_Port, PAN6_DIR2_Pin, GPIO_PIN_SET);
 800ab20:	2201      	movs	r2, #1
 800ab22:	2120      	movs	r1, #32
 800ab24:	481f      	ldr	r0, [pc, #124]	; (800aba4 <SetMagnetorque+0x13c>)
 800ab26:	f7f8 f9f3 	bl	8002f10 <HAL_GPIO_WritePin>
 800ab2a:	e00c      	b.n	800ab46 <SetMagnetorque+0xde>
    }
    else
    {
      HAL_GPIO_WritePin(PAN6_DIR2_GPIO_Port, PAN6_DIR2_Pin, GPIO_PIN_RESET);
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2120      	movs	r1, #32
 800ab30:	481c      	ldr	r0, [pc, #112]	; (800aba4 <SetMagnetorque+0x13c>)
 800ab32:	f7f8 f9ed 	bl	8002f10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(PAN6_DIR1_GPIO_Port, PAN6_DIR1_Pin, GPIO_PIN_SET);
 800ab36:	2201      	movs	r2, #1
 800ab38:	2110      	movs	r1, #16
 800ab3a:	481a      	ldr	r0, [pc, #104]	; (800aba4 <SetMagnetorque+0x13c>)
 800ab3c:	f7f8 f9e8 	bl	8002f10 <HAL_GPIO_WritePin>
 800ab40:	e001      	b.n	800ab46 <SetMagnetorque+0xde>
    }
  }  
  else 
    return SEN_ERROR;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e028      	b.n	800ab98 <SetMagnetorque+0x130>

  tmp = (tmp * (MAGTORQ_PWM_PERIOD+1) + 50) / 100;
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ab4c:	fb02 f303 	mul.w	r3, r2, r3
 800ab50:	3332      	adds	r3, #50	; 0x32
 800ab52:	4a15      	ldr	r2, [pc, #84]	; (800aba8 <SetMagnetorque+0x140>)
 800ab54:	fba2 2303 	umull	r2, r3, r2, r3
 800ab58:	095b      	lsrs	r3, r3, #5
 800ab5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_TIM_PWM_Stop(&htim5, chn);
 800ab5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab5e:	4813      	ldr	r0, [pc, #76]	; (800abac <SetMagnetorque+0x144>)
 800ab60:	f7fd f884 	bl	8007c6c <HAL_TIM_PWM_Stop>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ab64:	2360      	movs	r3, #96	; 0x60
 800ab66:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = tmp;
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	617b      	str	r3, [r7, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ab70:	2300      	movs	r3, #0
 800ab72:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	623b      	str	r3, [r7, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, chn);
 800ab80:	f107 030c 	add.w	r3, r7, #12
 800ab84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab86:	4619      	mov	r1, r3
 800ab88:	4808      	ldr	r0, [pc, #32]	; (800abac <SetMagnetorque+0x144>)
 800ab8a:	f7fd f9cf 	bl	8007f2c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim5, chn);
 800ab8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab90:	4806      	ldr	r0, [pc, #24]	; (800abac <SetMagnetorque+0x144>)
 800ab92:	f7fd f837 	bl	8007c04 <HAL_TIM_PWM_Start>
  
  return SEN_SUCCESS;
 800ab96:	2301      	movs	r3, #1
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3730      	adds	r7, #48	; 0x30
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	40021800 	.word	0x40021800
 800aba4:	40021c00 	.word	0x40021c00
 800aba8:	51eb851f 	.word	0x51eb851f
 800abac:	20009798 	.word	0x20009798

0800abb0 <Pan_PD_ADC_Measure>:

}


status_t Pan_PD_ADC_Measure(uint8_t Panel, uint16_t *val)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4603      	mov	r3, r0
 800abb8:	6039      	str	r1, [r7, #0]
 800abba:	71fb      	strb	r3, [r7, #7]
  ADC_ChannelConfTypeDef sConfig;
  
  //Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  sConfig.Channel = AdcChannel[Panel];
 800abbc:	79fb      	ldrb	r3, [r7, #7]
 800abbe:	4a19      	ldr	r2, [pc, #100]	; (800ac24 <Pan_PD_ADC_Measure+0x74>)
 800abc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abc4:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800abc6:	2301      	movs	r3, #1
 800abc8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800abca:	2303      	movs	r3, #3
 800abcc:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800abce:	f107 0308 	add.w	r3, r7, #8
 800abd2:	4619      	mov	r1, r3
 800abd4:	4814      	ldr	r0, [pc, #80]	; (800ac28 <Pan_PD_ADC_Measure+0x78>)
 800abd6:	f7f6 fecd 	bl	8001974 <HAL_ADC_ConfigChannel>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <Pan_PD_ADC_Measure+0x34>
    return SEN_ERROR;  
 800abe0:	2300      	movs	r3, #0
 800abe2:	e01b      	b.n	800ac1c <Pan_PD_ADC_Measure+0x6c>
  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800abe4:	4810      	ldr	r0, [pc, #64]	; (800ac28 <Pan_PD_ADC_Measure+0x78>)
 800abe6:	f7f6 fd5d 	bl	80016a4 <HAL_ADC_Start>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <Pan_PD_ADC_Measure+0x44>
    return SEN_ERROR;
 800abf0:	2300      	movs	r3, #0
 800abf2:	e013      	b.n	800ac1c <Pan_PD_ADC_Measure+0x6c>
  if (HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK)
 800abf4:	210a      	movs	r1, #10
 800abf6:	480c      	ldr	r0, [pc, #48]	; (800ac28 <Pan_PD_ADC_Measure+0x78>)
 800abf8:	f7f6 fe2d 	bl	8001856 <HAL_ADC_PollForConversion>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <Pan_PD_ADC_Measure+0x56>
    return SEN_ERROR;
 800ac02:	2300      	movs	r3, #0
 800ac04:	e00a      	b.n	800ac1c <Pan_PD_ADC_Measure+0x6c>
  *val = (uint16_t)HAL_ADC_GetValue(&hadc1);
 800ac06:	4808      	ldr	r0, [pc, #32]	; (800ac28 <Pan_PD_ADC_Measure+0x78>)
 800ac08:	f7f6 fea7 	bl	800195a <HAL_ADC_GetValue>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	801a      	strh	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 800ac14:	4804      	ldr	r0, [pc, #16]	; (800ac28 <Pan_PD_ADC_Measure+0x78>)
 800ac16:	f7f6 fdeb 	bl	80017f0 <HAL_ADC_Stop>
  return SEN_SUCCESS;
 800ac1a:	2301      	movs	r3, #1
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	0801ab70 	.word	0x0801ab70
 800ac28:	20009824 	.word	0x20009824

0800ac2c <Panel_GetPhotodiodesLum>:

void Panel_GetPhotodiodesLum(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < MAX_PAN; i++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	71fb      	strb	r3, [r7, #7]
 800ac36:	e014      	b.n	800ac62 <Panel_GetPhotodiodesLum+0x36>
  {
    if (Pan_PD_ADC_Measure(i, (uint16_t *)&PanelLight[i]) != SEN_SUCCESS)
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	4a0d      	ldr	r2, [pc, #52]	; (800ac74 <Panel_GetPhotodiodesLum+0x48>)
 800ac3e:	441a      	add	r2, r3
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	4611      	mov	r1, r2
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7ff ffb3 	bl	800abb0 <Pan_PD_ADC_Measure>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d005      	beq.n	800ac5c <Panel_GetPhotodiodesLum+0x30>
      PanelLight[i] = 0xFFFF;
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	4a08      	ldr	r2, [pc, #32]	; (800ac74 <Panel_GetPhotodiodesLum+0x48>)
 800ac54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ac58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0; i < MAX_PAN; i++)
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	71fb      	strb	r3, [r7, #7]
 800ac62:	79fb      	ldrb	r3, [r7, #7]
 800ac64:	2b05      	cmp	r3, #5
 800ac66:	d9e7      	bls.n	800ac38 <Panel_GetPhotodiodesLum+0xc>
  }
}
 800ac68:	bf00      	nop
 800ac6a:	bf00      	nop
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	20000214 	.word	0x20000214

0800ac78 <SPI_SlaveSelect>:

void SPI_SlaveSelect(uint8_t Mode)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	4603      	mov	r3, r0
 800ac80:	71fb      	strb	r3, [r7, #7]
  switch (Mode & (MAX_PAN+1))
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	f003 0307 	and.w	r3, r3, #7
 800ac88:	2b05      	cmp	r3, #5
 800ac8a:	f200 80fb 	bhi.w	800ae84 <SPI_SlaveSelect+0x20c>
 800ac8e:	a201      	add	r2, pc, #4	; (adr r2, 800ac94 <SPI_SlaveSelect+0x1c>)
 800ac90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac94:	0800acad 	.word	0x0800acad
 800ac98:	0800acf9 	.word	0x0800acf9
 800ac9c:	0800ad45 	.word	0x0800ad45
 800aca0:	0800ad91 	.word	0x0800ad91
 800aca4:	0800addd 	.word	0x0800addd
 800aca8:	0800ae31 	.word	0x0800ae31
  {
    case 0:
      if (Mode & TEMP_CS)
 800acac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	da10      	bge.n	800acd6 <SPI_SlaveSelect+0x5e>
      {
        if (Mode & CS_OFF)
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d005      	beq.n	800acca <SPI_SlaveSelect+0x52>
          HAL_GPIO_WritePin(PAN1_CS2_GPIO_Port, PAN1_CS2_Pin, GPIO_PIN_SET);
 800acbe:	2201      	movs	r2, #1
 800acc0:	2101      	movs	r1, #1
 800acc2:	4873      	ldr	r0, [pc, #460]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800acc4:	f7f8 f924 	bl	8002f10 <HAL_GPIO_WritePin>
        if (Mode & CS_OFF)
          HAL_GPIO_WritePin(PAN1_CS1_GPIO_Port, PAN1_CS1_Pin, GPIO_PIN_SET);
        else
          HAL_GPIO_WritePin(PAN1_CS1_GPIO_Port, PAN1_CS1_Pin, GPIO_PIN_RESET);
      }
      break;
 800acc8:	e0dd      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN1_CS2_GPIO_Port, PAN1_CS2_Pin, GPIO_PIN_RESET);
 800acca:	2200      	movs	r2, #0
 800accc:	2101      	movs	r1, #1
 800acce:	4870      	ldr	r0, [pc, #448]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800acd0:	f7f8 f91e 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800acd4:	e0d7      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
        if (Mode & CS_OFF)
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d005      	beq.n	800acec <SPI_SlaveSelect+0x74>
          HAL_GPIO_WritePin(PAN1_CS1_GPIO_Port, PAN1_CS1_Pin, GPIO_PIN_SET);
 800ace0:	2201      	movs	r2, #1
 800ace2:	2102      	movs	r1, #2
 800ace4:	486a      	ldr	r0, [pc, #424]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ace6:	f7f8 f913 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800acea:	e0cc      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN1_CS1_GPIO_Port, PAN1_CS1_Pin, GPIO_PIN_RESET);
 800acec:	2200      	movs	r2, #0
 800acee:	2102      	movs	r1, #2
 800acf0:	4867      	ldr	r0, [pc, #412]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800acf2:	f7f8 f90d 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800acf6:	e0c6      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
      
    case 1:
      if (Mode & TEMP_CS)
 800acf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	da10      	bge.n	800ad22 <SPI_SlaveSelect+0xaa>
      {
        if (Mode & CS_OFF)
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d005      	beq.n	800ad16 <SPI_SlaveSelect+0x9e>
          HAL_GPIO_WritePin(PAN2_CS2_GPIO_Port, PAN2_CS2_Pin, GPIO_PIN_SET);
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	2104      	movs	r1, #4
 800ad0e:	4860      	ldr	r0, [pc, #384]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ad10:	f7f8 f8fe 	bl	8002f10 <HAL_GPIO_WritePin>
        if (Mode & CS_OFF)
          HAL_GPIO_WritePin(PAN2_CS1_GPIO_Port, PAN2_CS1_Pin, GPIO_PIN_SET);
        else
          HAL_GPIO_WritePin(PAN2_CS1_GPIO_Port, PAN2_CS1_Pin, GPIO_PIN_RESET);
      }
      break;
 800ad14:	e0b7      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN2_CS2_GPIO_Port, PAN2_CS2_Pin, GPIO_PIN_RESET);
 800ad16:	2200      	movs	r2, #0
 800ad18:	2104      	movs	r1, #4
 800ad1a:	485d      	ldr	r0, [pc, #372]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ad1c:	f7f8 f8f8 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ad20:	e0b1      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
        if (Mode & CS_OFF)
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d005      	beq.n	800ad38 <SPI_SlaveSelect+0xc0>
          HAL_GPIO_WritePin(PAN2_CS1_GPIO_Port, PAN2_CS1_Pin, GPIO_PIN_SET);
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	2108      	movs	r1, #8
 800ad30:	4857      	ldr	r0, [pc, #348]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ad32:	f7f8 f8ed 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ad36:	e0a6      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN2_CS1_GPIO_Port, PAN2_CS1_Pin, GPIO_PIN_RESET);
 800ad38:	2200      	movs	r2, #0
 800ad3a:	2108      	movs	r1, #8
 800ad3c:	4854      	ldr	r0, [pc, #336]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ad3e:	f7f8 f8e7 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ad42:	e0a0      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
      
    case 2:
      if (Mode & TEMP_CS)
 800ad44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	da10      	bge.n	800ad6e <SPI_SlaveSelect+0xf6>
      {
        if (Mode & CS_OFF)
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
 800ad4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d005      	beq.n	800ad62 <SPI_SlaveSelect+0xea>
          HAL_GPIO_WritePin(PAN3_CS2_GPIO_Port, PAN3_CS2_Pin, GPIO_PIN_SET);
 800ad56:	2201      	movs	r2, #1
 800ad58:	2110      	movs	r1, #16
 800ad5a:	484d      	ldr	r0, [pc, #308]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ad5c:	f7f8 f8d8 	bl	8002f10 <HAL_GPIO_WritePin>
        if (Mode & CS_OFF)
          HAL_GPIO_WritePin(PAN3_CS1_GPIO_Port, PAN3_CS1_Pin, GPIO_PIN_SET);
        else
          HAL_GPIO_WritePin(PAN3_CS1_GPIO_Port, PAN3_CS1_Pin, GPIO_PIN_RESET);
      }
      break;
 800ad60:	e091      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN3_CS2_GPIO_Port, PAN3_CS2_Pin, GPIO_PIN_RESET);
 800ad62:	2200      	movs	r2, #0
 800ad64:	2110      	movs	r1, #16
 800ad66:	484a      	ldr	r0, [pc, #296]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ad68:	f7f8 f8d2 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ad6c:	e08b      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
        if (Mode & CS_OFF)
 800ad6e:	79fb      	ldrb	r3, [r7, #7]
 800ad70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <SPI_SlaveSelect+0x10c>
          HAL_GPIO_WritePin(PAN3_CS1_GPIO_Port, PAN3_CS1_Pin, GPIO_PIN_SET);
 800ad78:	2201      	movs	r2, #1
 800ad7a:	2120      	movs	r1, #32
 800ad7c:	4844      	ldr	r0, [pc, #272]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ad7e:	f7f8 f8c7 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ad82:	e080      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN3_CS1_GPIO_Port, PAN3_CS1_Pin, GPIO_PIN_RESET);
 800ad84:	2200      	movs	r2, #0
 800ad86:	2120      	movs	r1, #32
 800ad88:	4841      	ldr	r0, [pc, #260]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ad8a:	f7f8 f8c1 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ad8e:	e07a      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
      
    case 3:
      if (Mode & TEMP_CS)
 800ad90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	da10      	bge.n	800adba <SPI_SlaveSelect+0x142>
      {
        if (Mode & CS_OFF)
 800ad98:	79fb      	ldrb	r3, [r7, #7]
 800ad9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d005      	beq.n	800adae <SPI_SlaveSelect+0x136>
          HAL_GPIO_WritePin(PAN4_CS2_GPIO_Port, PAN4_CS2_Pin, GPIO_PIN_SET);
 800ada2:	2201      	movs	r2, #1
 800ada4:	2140      	movs	r1, #64	; 0x40
 800ada6:	483a      	ldr	r0, [pc, #232]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ada8:	f7f8 f8b2 	bl	8002f10 <HAL_GPIO_WritePin>
        if (Mode & CS_OFF)
          HAL_GPIO_WritePin(PAN4_CS1_GPIO_Port, PAN4_CS1_Pin, GPIO_PIN_SET);
        else
          HAL_GPIO_WritePin(PAN4_CS1_GPIO_Port, PAN4_CS1_Pin, GPIO_PIN_RESET);
      }
      break;
 800adac:	e06b      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN4_CS2_GPIO_Port, PAN4_CS2_Pin, GPIO_PIN_RESET);
 800adae:	2200      	movs	r2, #0
 800adb0:	2140      	movs	r1, #64	; 0x40
 800adb2:	4837      	ldr	r0, [pc, #220]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800adb4:	f7f8 f8ac 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800adb8:	e065      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
        if (Mode & CS_OFF)
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d005      	beq.n	800add0 <SPI_SlaveSelect+0x158>
          HAL_GPIO_WritePin(PAN4_CS1_GPIO_Port, PAN4_CS1_Pin, GPIO_PIN_SET);
 800adc4:	2201      	movs	r2, #1
 800adc6:	2180      	movs	r1, #128	; 0x80
 800adc8:	4831      	ldr	r0, [pc, #196]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800adca:	f7f8 f8a1 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800adce:	e05a      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN4_CS1_GPIO_Port, PAN4_CS1_Pin, GPIO_PIN_RESET);
 800add0:	2200      	movs	r2, #0
 800add2:	2180      	movs	r1, #128	; 0x80
 800add4:	482e      	ldr	r0, [pc, #184]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800add6:	f7f8 f89b 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800adda:	e054      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
      
    case 4:
      if (Mode & TEMP_CS)
 800addc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	da12      	bge.n	800ae0a <SPI_SlaveSelect+0x192>
      {
        if (Mode & CS_OFF)
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adea:	2b00      	cmp	r3, #0
 800adec:	d006      	beq.n	800adfc <SPI_SlaveSelect+0x184>
          HAL_GPIO_WritePin(PAN5_CS2_GPIO_Port, PAN5_CS2_Pin, GPIO_PIN_SET);
 800adee:	2201      	movs	r2, #1
 800adf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800adf4:	4827      	ldr	r0, [pc, #156]	; (800ae94 <SPI_SlaveSelect+0x21c>)
 800adf6:	f7f8 f88b 	bl	8002f10 <HAL_GPIO_WritePin>
        if (Mode & CS_OFF)
          HAL_GPIO_WritePin(PAN5_CS1_GPIO_Port, PAN5_CS1_Pin, GPIO_PIN_SET);
        else
          HAL_GPIO_WritePin(PAN5_CS1_GPIO_Port, PAN5_CS1_Pin, GPIO_PIN_RESET);
      }
      break;
 800adfa:	e044      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN5_CS2_GPIO_Port, PAN5_CS2_Pin, GPIO_PIN_RESET);
 800adfc:	2200      	movs	r2, #0
 800adfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ae02:	4824      	ldr	r0, [pc, #144]	; (800ae94 <SPI_SlaveSelect+0x21c>)
 800ae04:	f7f8 f884 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ae08:	e03d      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
        if (Mode & CS_OFF)
 800ae0a:	79fb      	ldrb	r3, [r7, #7]
 800ae0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d006      	beq.n	800ae22 <SPI_SlaveSelect+0x1aa>
          HAL_GPIO_WritePin(PAN5_CS1_GPIO_Port, PAN5_CS1_Pin, GPIO_PIN_SET);
 800ae14:	2201      	movs	r2, #1
 800ae16:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae1a:	481d      	ldr	r0, [pc, #116]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ae1c:	f7f8 f878 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ae20:	e031      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN5_CS1_GPIO_Port, PAN5_CS1_Pin, GPIO_PIN_RESET);
 800ae22:	2200      	movs	r2, #0
 800ae24:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae28:	4819      	ldr	r0, [pc, #100]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ae2a:	f7f8 f871 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ae2e:	e02a      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
      
    case 5:
      if (Mode & TEMP_CS)
 800ae30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	da12      	bge.n	800ae5e <SPI_SlaveSelect+0x1e6>
      {
        if (Mode & CS_OFF)
 800ae38:	79fb      	ldrb	r3, [r7, #7]
 800ae3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d006      	beq.n	800ae50 <SPI_SlaveSelect+0x1d8>
          HAL_GPIO_WritePin(PAN6_CS2_GPIO_Port, PAN6_CS2_Pin, GPIO_PIN_SET);
 800ae42:	2201      	movs	r2, #1
 800ae44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae48:	4811      	ldr	r0, [pc, #68]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ae4a:	f7f8 f861 	bl	8002f10 <HAL_GPIO_WritePin>
        if (Mode & CS_OFF)
          HAL_GPIO_WritePin(PAN6_CS1_GPIO_Port, PAN6_CS1_Pin, GPIO_PIN_SET);
        else
          HAL_GPIO_WritePin(PAN6_CS1_GPIO_Port, PAN6_CS1_Pin, GPIO_PIN_RESET);
      }
      break;
 800ae4e:	e01a      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN6_CS2_GPIO_Port, PAN6_CS2_Pin, GPIO_PIN_RESET);
 800ae50:	2200      	movs	r2, #0
 800ae52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae56:	480e      	ldr	r0, [pc, #56]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ae58:	f7f8 f85a 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ae5c:	e013      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
        if (Mode & CS_OFF)
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d006      	beq.n	800ae76 <SPI_SlaveSelect+0x1fe>
          HAL_GPIO_WritePin(PAN6_CS1_GPIO_Port, PAN6_CS1_Pin, GPIO_PIN_SET);
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae6e:	4808      	ldr	r0, [pc, #32]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ae70:	f7f8 f84e 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ae74:	e007      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
          HAL_GPIO_WritePin(PAN6_CS1_GPIO_Port, PAN6_CS1_Pin, GPIO_PIN_RESET);
 800ae76:	2200      	movs	r2, #0
 800ae78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae7c:	4804      	ldr	r0, [pc, #16]	; (800ae90 <SPI_SlaveSelect+0x218>)
 800ae7e:	f7f8 f847 	bl	8002f10 <HAL_GPIO_WritePin>
      break;
 800ae82:	e000      	b.n	800ae86 <SPI_SlaveSelect+0x20e>
        
    default:
      break;
 800ae84:	bf00      	nop
  }
}
 800ae86:	bf00      	nop
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	40022000 	.word	0x40022000
 800ae94:	40020800 	.word	0x40020800

0800ae98 <StallDelay>:

void StallDelay(void)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
  for (uint32_t i = 0; i < 400; i++) __no_operation();
 800ae9e:	2300      	movs	r3, #0
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	e004      	b.n	800aeae <StallDelay+0x16>
  __ASM volatile ("nop");
 800aea4:	bf00      	nop
}
 800aea6:	bf00      	nop
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	607b      	str	r3, [r7, #4]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800aeb4:	d3f6      	bcc.n	800aea4 <StallDelay+0xc>
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <ADIS16265_WriteReg16>:
  
  return SEN_SUCCESS;
}

status_t ADIS16265_WriteReg16(uint8_t Address, uint16_t data, uint8_t Panel)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	71fb      	strb	r3, [r7, #7]
 800aece:	460b      	mov	r3, r1
 800aed0:	80bb      	strh	r3, [r7, #4]
 800aed2:	4613      	mov	r3, r2
 800aed4:	71bb      	strb	r3, [r7, #6]
  uint16_t txdata;
  HAL_StatusTypeDef res;
  
  txdata = (0x8000 | ((uint16_t)(Address+1) << 8) | (data>>8));
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	3301      	adds	r3, #1
 800aedc:	b29b      	uxth	r3, r3
 800aede:	021b      	lsls	r3, r3, #8
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	88bb      	ldrh	r3, [r7, #4]
 800aee4:	0a1b      	lsrs	r3, r3, #8
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	4313      	orrs	r3, r2
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	81bb      	strh	r3, [r7, #12]
  
  SPI_SlaveSelect(GYRO_CS|CS_ON|Panel);
 800aef8:	79bb      	ldrb	r3, [r7, #6]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff febc 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_Transmit(&hspi2, (uint8_t *)&txdata, 1, 10);
 800af00:	f107 010c 	add.w	r1, r7, #12
 800af04:	230a      	movs	r3, #10
 800af06:	2201      	movs	r2, #1
 800af08:	4820      	ldr	r0, [pc, #128]	; (800af8c <ADIS16265_WriteReg16+0xc8>)
 800af0a:	f7fc fa58 	bl	80073be <HAL_SPI_Transmit>
 800af0e:	4603      	mov	r3, r0
 800af10:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(GYRO_CS|CS_OFF|Panel);
 800af12:	79bb      	ldrb	r3, [r7, #6]
 800af14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7ff feac 	bl	800ac78 <SPI_SlaveSelect>
  
  if (res != HAL_OK)
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <ADIS16265_WriteReg16+0x66>
    return SEN_ERROR;
 800af26:	2300      	movs	r3, #0
 800af28:	e02b      	b.n	800af82 <ADIS16265_WriteReg16+0xbe>
        
  StallDelay();
 800af2a:	f7ff ffb5 	bl	800ae98 <StallDelay>
  
  txdata = (0x8000 | ((uint16_t)Address << 8) | (data & 0xFF));
 800af2e:	79fb      	ldrb	r3, [r7, #7]
 800af30:	021b      	lsls	r3, r3, #8
 800af32:	b21b      	sxth	r3, r3
 800af34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af3c:	b21a      	sxth	r2, r3
 800af3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800af42:	b2db      	uxtb	r3, r3
 800af44:	b21b      	sxth	r3, r3
 800af46:	4313      	orrs	r3, r2
 800af48:	b21b      	sxth	r3, r3
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	81bb      	strh	r3, [r7, #12]
  
  SPI_SlaveSelect(GYRO_CS|CS_ON|Panel);
 800af4e:	79bb      	ldrb	r3, [r7, #6]
 800af50:	4618      	mov	r0, r3
 800af52:	f7ff fe91 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_Transmit(&hspi2, (uint8_t *)&txdata, 1, 10);
 800af56:	f107 010c 	add.w	r1, r7, #12
 800af5a:	230a      	movs	r3, #10
 800af5c:	2201      	movs	r2, #1
 800af5e:	480b      	ldr	r0, [pc, #44]	; (800af8c <ADIS16265_WriteReg16+0xc8>)
 800af60:	f7fc fa2d 	bl	80073be <HAL_SPI_Transmit>
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(GYRO_CS|CS_OFF|Panel);
 800af68:	79bb      	ldrb	r3, [r7, #6]
 800af6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff fe81 	bl	800ac78 <SPI_SlaveSelect>
  
  if (res != HAL_OK)
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <ADIS16265_WriteReg16+0xbc>
    return SEN_ERROR;
 800af7c:	2300      	movs	r3, #0
 800af7e:	e000      	b.n	800af82 <ADIS16265_WriteReg16+0xbe>
  
  return SEN_SUCCESS;
 800af80:	2301      	movs	r3, #1
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	200095d4 	.word	0x200095d4

0800af90 <ADIS16265_ReadReg16>:

status_t ADIS16265_ReadReg16(uint8_t Address, uint16_t *data, uint8_t Panel)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af02      	add	r7, sp, #8
 800af96:	4603      	mov	r3, r0
 800af98:	6039      	str	r1, [r7, #0]
 800af9a:	71fb      	strb	r3, [r7, #7]
 800af9c:	4613      	mov	r3, r2
 800af9e:	71bb      	strb	r3, [r7, #6]
  uint16_t txdata;    
  HAL_StatusTypeDef res = HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
  
  if (data == NULL)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <ADIS16265_ReadReg16+0x1e>
    return SEN_ERROR;
 800afaa:	2300      	movs	r3, #0
 800afac:	e03b      	b.n	800b026 <ADIS16265_ReadReg16+0x96>
  
  txdata = (uint16_t)Address << 8;
 800afae:	79fb      	ldrb	r3, [r7, #7]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	021b      	lsls	r3, r3, #8
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	81bb      	strh	r3, [r7, #12]
  
  SPI_SlaveSelect(GYRO_CS|CS_ON|Panel);
 800afb8:	79bb      	ldrb	r3, [r7, #6]
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff fe5c 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_Transmit(&hspi2, (uint8_t *)&txdata, 1, 10);
 800afc0:	f107 010c 	add.w	r1, r7, #12
 800afc4:	230a      	movs	r3, #10
 800afc6:	2201      	movs	r2, #1
 800afc8:	4819      	ldr	r0, [pc, #100]	; (800b030 <ADIS16265_ReadReg16+0xa0>)
 800afca:	f7fc f9f8 	bl	80073be <HAL_SPI_Transmit>
 800afce:	4603      	mov	r3, r0
 800afd0:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(GYRO_CS|CS_OFF|Panel);
 800afd2:	79bb      	ldrb	r3, [r7, #6]
 800afd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	4618      	mov	r0, r3
 800afdc:	f7ff fe4c 	bl	800ac78 <SPI_SlaveSelect>
  
  if (res != HAL_OK)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <ADIS16265_ReadReg16+0x5a>
    return SEN_ERROR;
 800afe6:	2300      	movs	r3, #0
 800afe8:	e01d      	b.n	800b026 <ADIS16265_ReadReg16+0x96>

  StallDelay();
 800afea:	f7ff ff55 	bl	800ae98 <StallDelay>

  SPI_SlaveSelect(GYRO_CS|CS_ON|Panel);
 800afee:	79bb      	ldrb	r3, [r7, #6]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff fe41 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&txdata, (uint8_t *)data, 1, 10);
 800aff6:	f107 010c 	add.w	r1, r7, #12
 800affa:	230a      	movs	r3, #10
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	2301      	movs	r3, #1
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	480b      	ldr	r0, [pc, #44]	; (800b030 <ADIS16265_ReadReg16+0xa0>)
 800b004:	f7fc fb18 	bl	8007638 <HAL_SPI_TransmitReceive>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(GYRO_CS|CS_OFF|Panel);
 800b00c:	79bb      	ldrb	r3, [r7, #6]
 800b00e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b012:	b2db      	uxtb	r3, r3
 800b014:	4618      	mov	r0, r3
 800b016:	f7ff fe2f 	bl	800ac78 <SPI_SlaveSelect>

  if (res != HAL_OK)
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <ADIS16265_ReadReg16+0x94>
    return SEN_ERROR;
 800b020:	2300      	movs	r3, #0
 800b022:	e000      	b.n	800b026 <ADIS16265_ReadReg16+0x96>
  
  return SEN_SUCCESS;
 800b024:	2301      	movs	r3, #1
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	200095d4 	.word	0x200095d4

0800b034 <ADIS16265_Init>:
          
status_t ADIS16265_Init(uint8_t Panel)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	71fb      	strb	r3, [r7, #7]
  uint16_t wTmp;
  
  osDelay(200);
 800b03e:	20c8      	movs	r0, #200	; 0xc8
 800b040:	f009 fb0d 	bl	801465e <osDelay>
  if (ADIS16265_ReadReg16(ADIS16260_PROD_ID, &wTmp, Panel) != SEN_SUCCESS)
 800b044:	79fa      	ldrb	r2, [r7, #7]
 800b046:	f107 030c 	add.w	r3, r7, #12
 800b04a:	4619      	mov	r1, r3
 800b04c:	2056      	movs	r0, #86	; 0x56
 800b04e:	f7ff ff9f 	bl	800af90 <ADIS16265_ReadReg16>
 800b052:	4603      	mov	r3, r0
 800b054:	2b01      	cmp	r3, #1
 800b056:	d001      	beq.n	800b05c <ADIS16265_Init+0x28>
    return SEN_ERROR;
 800b058:	2300      	movs	r3, #0
 800b05a:	e057      	b.n	800b10c <ADIS16265_Init+0xd8>
  if (wTmp != ADIS16265_PROD_NUM)
 800b05c:	89bb      	ldrh	r3, [r7, #12]
 800b05e:	f643 7289 	movw	r2, #16265	; 0x3f89
 800b062:	4293      	cmp	r3, r2
 800b064:	d001      	beq.n	800b06a <ADIS16265_Init+0x36>
    return SEN_ERROR;
 800b066:	2300      	movs	r3, #0
 800b068:	e050      	b.n	800b10c <ADIS16265_Init+0xd8>
  
  GyroStat |= (1 << Panel);
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	2201      	movs	r2, #1
 800b06e:	fa02 f303 	lsl.w	r3, r2, r3
 800b072:	b25a      	sxtb	r2, r3
 800b074:	4b27      	ldr	r3, [pc, #156]	; (800b114 <ADIS16265_Init+0xe0>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	b25b      	sxtb	r3, r3
 800b07c:	4313      	orrs	r3, r2
 800b07e:	b25b      	sxtb	r3, r3
 800b080:	b2da      	uxtb	r2, r3
 800b082:	4b24      	ldr	r3, [pc, #144]	; (800b114 <ADIS16265_Init+0xe0>)
 800b084:	701a      	strb	r2, [r3, #0]
  
  osDelay(200);
 800b086:	20c8      	movs	r0, #200	; 0xc8
 800b088:	f009 fae9 	bl	801465e <osDelay>

  osDelay(200);
 800b08c:	20c8      	movs	r0, #200	; 0xc8
 800b08e:	f009 fae6 	bl	801465e <osDelay>
  
  for (uint8_t i = 0; i < 90; i+=2)
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
 800b096:	e029      	b.n	800b0ec <ADIS16265_Init+0xb8>
  {
    if ((i<0x06||i>0x09)&&(i<0x10||i>0x13)&&(i<0x18||i>0x1f)&&(i<0x2a||i>0x2f)&&(i<0x40||i>0x51))
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	2b05      	cmp	r3, #5
 800b09c:	d902      	bls.n	800b0a4 <ADIS16265_Init+0x70>
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	2b09      	cmp	r3, #9
 800b0a2:	d920      	bls.n	800b0e6 <ADIS16265_Init+0xb2>
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	2b0f      	cmp	r3, #15
 800b0a8:	d902      	bls.n	800b0b0 <ADIS16265_Init+0x7c>
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
 800b0ac:	2b13      	cmp	r3, #19
 800b0ae:	d91a      	bls.n	800b0e6 <ADIS16265_Init+0xb2>
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	2b17      	cmp	r3, #23
 800b0b4:	d902      	bls.n	800b0bc <ADIS16265_Init+0x88>
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
 800b0b8:	2b1f      	cmp	r3, #31
 800b0ba:	d914      	bls.n	800b0e6 <ADIS16265_Init+0xb2>
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	2b29      	cmp	r3, #41	; 0x29
 800b0c0:	d902      	bls.n	800b0c8 <ADIS16265_Init+0x94>
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
 800b0c4:	2b2f      	cmp	r3, #47	; 0x2f
 800b0c6:	d90e      	bls.n	800b0e6 <ADIS16265_Init+0xb2>
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ca:	2b3f      	cmp	r3, #63	; 0x3f
 800b0cc:	d902      	bls.n	800b0d4 <ADIS16265_Init+0xa0>
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	2b51      	cmp	r3, #81	; 0x51
 800b0d2:	d908      	bls.n	800b0e6 <ADIS16265_Init+0xb2>
    {
      if (SEN_SUCCESS != ADIS16265_ReadReg16(i, &wTmp, Panel)) continue;
 800b0d4:	79fa      	ldrb	r2, [r7, #7]
 800b0d6:	f107 010c 	add.w	r1, r7, #12
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff ff57 	bl	800af90 <ADIS16265_ReadReg16>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b01      	cmp	r3, #1
  for (uint8_t i = 0; i < 90; i+=2)
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	3302      	adds	r3, #2
 800b0ea:	73fb      	strb	r3, [r7, #15]
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	2b59      	cmp	r3, #89	; 0x59
 800b0f0:	d9d2      	bls.n	800b098 <ADIS16265_Init+0x64>
    }
  }
  

  
  if (SEN_SUCCESS != ADIS16265_WriteReg16(ADIS16260_SENS_AVG, 0x0104, Panel))
 800b0f2:	79fb      	ldrb	r3, [r7, #7]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b0fa:	2038      	movs	r0, #56	; 0x38
 800b0fc:	f7ff fee2 	bl	800aec4 <ADIS16265_WriteReg16>
 800b100:	4603      	mov	r3, r0
 800b102:	2b01      	cmp	r3, #1
 800b104:	d001      	beq.n	800b10a <ADIS16265_Init+0xd6>
    return SEN_ERROR;
 800b106:	2300      	movs	r3, #0
 800b108:	e000      	b.n	800b10c <ADIS16265_Init+0xd8>

  return SEN_SUCCESS;
 800b10a:	2301      	movs	r3, #1
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	2000022c 	.word	0x2000022c

0800b118 <ADIS16265_GetAxesRate>:

status_t ADIS16265_GetAxesRate(AxesRaw_t* buff) 
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  buff->AXIS_X = buff->AXIS_Y = buff->AXIS_Z = 0x7FFF;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b126:	809a      	strh	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	805a      	strh	r2, [r3, #2]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	801a      	strh	r2, [r3, #0]
  
  if (GyroStat & (1<< PAN_X_M))
 800b13c:	4b38      	ldr	r3, [pc, #224]	; (800b220 <ADIS16265_GetAxesRate+0x108>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b2db      	uxtb	r3, r3
 800b142:	f003 0308 	and.w	r3, r3, #8
 800b146:	2b00      	cmp	r3, #0
 800b148:	d01a      	beq.n	800b180 <ADIS16265_GetAxesRate+0x68>
  {
    if (ADIS16265_ReadReg16(ADIS16260_GYRO_OUT, (uint16_t *)(&buff->AXIS_X), PAN_X_M) != SEN_SUCCESS)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2203      	movs	r2, #3
 800b14e:	4619      	mov	r1, r3
 800b150:	2004      	movs	r0, #4
 800b152:	f7ff ff1d 	bl	800af90 <ADIS16265_ReadReg16>
 800b156:	4603      	mov	r3, r0
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d001      	beq.n	800b160 <ADIS16265_GetAxesRate+0x48>
      return SEN_ERROR;
 800b15c:	2300      	movs	r3, #0
 800b15e:	e05a      	b.n	800b216 <ADIS16265_GetAxesRate+0xfe>
    else
    {
      *((uint16_t *)(&buff->AXIS_X)) <<= 2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	881a      	ldrh	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	0092      	lsls	r2, r2, #2
 800b168:	b292      	uxth	r2, r2
 800b16a:	801a      	strh	r2, [r3, #0]
      buff->AXIS_X /= 4;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b172:	2b00      	cmp	r3, #0
 800b174:	da00      	bge.n	800b178 <ADIS16265_GetAxesRate+0x60>
 800b176:	3303      	adds	r3, #3
 800b178:	109b      	asrs	r3, r3, #2
 800b17a:	b21a      	sxth	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	801a      	strh	r2, [r3, #0]
    }    
  }
  
  if (GyroStat & (1<< PAN_Y_M))
 800b180:	4b27      	ldr	r3, [pc, #156]	; (800b220 <ADIS16265_GetAxesRate+0x108>)
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	b2db      	uxtb	r3, r3
 800b186:	f003 0310 	and.w	r3, r3, #16
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d01d      	beq.n	800b1ca <ADIS16265_GetAxesRate+0xb2>
  {
    if (ADIS16265_ReadReg16(ADIS16260_GYRO_OUT, (uint16_t *)(&buff->AXIS_Y), PAN_Y_M) != SEN_SUCCESS)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3302      	adds	r3, #2
 800b192:	2204      	movs	r2, #4
 800b194:	4619      	mov	r1, r3
 800b196:	2004      	movs	r0, #4
 800b198:	f7ff fefa 	bl	800af90 <ADIS16265_ReadReg16>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d001      	beq.n	800b1a6 <ADIS16265_GetAxesRate+0x8e>
      return SEN_ERROR;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e037      	b.n	800b216 <ADIS16265_GetAxesRate+0xfe>
    else
    {
      *((uint16_t *)(&buff->AXIS_Y)) <<= 2;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	3302      	adds	r3, #2
 800b1aa:	881a      	ldrh	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	3302      	adds	r3, #2
 800b1b0:	0092      	lsls	r2, r2, #2
 800b1b2:	b292      	uxth	r2, r2
 800b1b4:	801a      	strh	r2, [r3, #0]
      buff->AXIS_Y /= 4;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	da00      	bge.n	800b1c2 <ADIS16265_GetAxesRate+0xaa>
 800b1c0:	3303      	adds	r3, #3
 800b1c2:	109b      	asrs	r3, r3, #2
 800b1c4:	b21a      	sxth	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	805a      	strh	r2, [r3, #2]
    }
  }
  
  if (GyroStat & (1<< PAN_Z_M))
 800b1ca:	4b15      	ldr	r3, [pc, #84]	; (800b220 <ADIS16265_GetAxesRate+0x108>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	f003 0320 	and.w	r3, r3, #32
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d01d      	beq.n	800b214 <ADIS16265_GetAxesRate+0xfc>
  {
    if (ADIS16265_ReadReg16(ADIS16260_GYRO_OUT, (uint16_t *)(&buff->AXIS_Z), PAN_Z_M) != SEN_SUCCESS)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	2205      	movs	r2, #5
 800b1de:	4619      	mov	r1, r3
 800b1e0:	2004      	movs	r0, #4
 800b1e2:	f7ff fed5 	bl	800af90 <ADIS16265_ReadReg16>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d001      	beq.n	800b1f0 <ADIS16265_GetAxesRate+0xd8>
      return SEN_ERROR;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e012      	b.n	800b216 <ADIS16265_GetAxesRate+0xfe>
    else
    {
      *((uint16_t *)(&buff->AXIS_Z)) <<= 2;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	881a      	ldrh	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	0092      	lsls	r2, r2, #2
 800b1fc:	b292      	uxth	r2, r2
 800b1fe:	801a      	strh	r2, [r3, #0]
      buff->AXIS_Z /= 4;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	da00      	bge.n	800b20c <ADIS16265_GetAxesRate+0xf4>
 800b20a:	3303      	adds	r3, #3
 800b20c:	109b      	asrs	r3, r3, #2
 800b20e:	b21a      	sxth	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	809a      	strh	r2, [r3, #4]
    }
  }
  
  return SEN_SUCCESS;  
 800b214:	2301      	movs	r3, #1
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	2000022c 	.word	0x2000022c

0800b224 <ADIS16265_GetAxesAngle>:

status_t ADIS16265_GetAxesAngle(AxesRaw_t* buff) 
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  uint32_t uTmp;
  
  if (buff == NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d101      	bne.n	800b236 <ADIS16265_GetAxesAngle+0x12>
    return SEN_ERROR;
 800b232:	2300      	movs	r3, #0
 800b234:	e08f      	b.n	800b356 <ADIS16265_GetAxesAngle+0x132>
  
  buff->AXIS_X = buff->AXIS_Y = buff->AXIS_Z = 0x7FFF;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b23c:	809a      	strh	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	805a      	strh	r2, [r3, #2]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	801a      	strh	r2, [r3, #0]
  
  if (GyroStat & (1<< PAN_X_M))
 800b252:	4b43      	ldr	r3, [pc, #268]	; (800b360 <ADIS16265_GetAxesAngle+0x13c>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	f003 0308 	and.w	r3, r3, #8
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d023      	beq.n	800b2a8 <ADIS16265_GetAxesAngle+0x84>
  {
    if (ADIS16265_ReadReg16(ADIS16260_ANGL_OUT, (uint16_t *)&uTmp, PAN_X_M) != SEN_SUCCESS)
 800b260:	f107 030c 	add.w	r3, r7, #12
 800b264:	2203      	movs	r2, #3
 800b266:	4619      	mov	r1, r3
 800b268:	200e      	movs	r0, #14
 800b26a:	f7ff fe91 	bl	800af90 <ADIS16265_ReadReg16>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b01      	cmp	r3, #1
 800b272:	d001      	beq.n	800b278 <ADIS16265_GetAxesAngle+0x54>
      return SEN_ERROR;
 800b274:	2300      	movs	r3, #0
 800b276:	e06e      	b.n	800b356 <ADIS16265_GetAxesAngle+0x132>
    else
    {
      uTmp &= 0x3FFF;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b27e:	60fb      	str	r3, [r7, #12]
      uTmp *= 3600;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800b286:	fb02 f303 	mul.w	r3, r2, r3
 800b28a:	60fb      	str	r3, [r7, #12]
      uTmp = (uTmp + ANGLE_UNITS_360/2) / ANGLE_UNITS_360;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800b292:	3312      	adds	r3, #18
 800b294:	089b      	lsrs	r3, r3, #2
 800b296:	4a33      	ldr	r2, [pc, #204]	; (800b364 <ADIS16265_GetAxesAngle+0x140>)
 800b298:	fba2 2303 	umull	r2, r3, r2, r3
 800b29c:	0a9b      	lsrs	r3, r3, #10
 800b29e:	60fb      	str	r3, [r7, #12]
      buff->AXIS_X = (int16_t)uTmp;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	b21a      	sxth	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	801a      	strh	r2, [r3, #0]
    }    
  }
  
  if (GyroStat & (1<< PAN_Y_M))
 800b2a8:	4b2d      	ldr	r3, [pc, #180]	; (800b360 <ADIS16265_GetAxesAngle+0x13c>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f003 0310 	and.w	r3, r3, #16
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d023      	beq.n	800b2fe <ADIS16265_GetAxesAngle+0xda>
  {
    if (ADIS16265_ReadReg16(ADIS16260_ANGL_OUT, (uint16_t *)&uTmp, PAN_Y_M) != SEN_SUCCESS)
 800b2b6:	f107 030c 	add.w	r3, r7, #12
 800b2ba:	2204      	movs	r2, #4
 800b2bc:	4619      	mov	r1, r3
 800b2be:	200e      	movs	r0, #14
 800b2c0:	f7ff fe66 	bl	800af90 <ADIS16265_ReadReg16>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d001      	beq.n	800b2ce <ADIS16265_GetAxesAngle+0xaa>
      return SEN_ERROR;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e043      	b.n	800b356 <ADIS16265_GetAxesAngle+0x132>
    else
    {
      uTmp &= 0x3FFF;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b2d4:	60fb      	str	r3, [r7, #12]
      uTmp *= 3600;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800b2dc:	fb02 f303 	mul.w	r3, r2, r3
 800b2e0:	60fb      	str	r3, [r7, #12]
      uTmp = (uTmp + ANGLE_UNITS_360/2) / ANGLE_UNITS_360;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800b2e8:	3312      	adds	r3, #18
 800b2ea:	089b      	lsrs	r3, r3, #2
 800b2ec:	4a1d      	ldr	r2, [pc, #116]	; (800b364 <ADIS16265_GetAxesAngle+0x140>)
 800b2ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f2:	0a9b      	lsrs	r3, r3, #10
 800b2f4:	60fb      	str	r3, [r7, #12]
      buff->AXIS_Y = (int16_t)uTmp;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	b21a      	sxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	805a      	strh	r2, [r3, #2]
    }
  }
  
  if (GyroStat & (1<< PAN_Z_M))
 800b2fe:	4b18      	ldr	r3, [pc, #96]	; (800b360 <ADIS16265_GetAxesAngle+0x13c>)
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	b2db      	uxtb	r3, r3
 800b304:	f003 0320 	and.w	r3, r3, #32
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d023      	beq.n	800b354 <ADIS16265_GetAxesAngle+0x130>
  {
    if (ADIS16265_ReadReg16(ADIS16260_ANGL_OUT, (uint16_t *)&uTmp, PAN_Z_M) != SEN_SUCCESS)
 800b30c:	f107 030c 	add.w	r3, r7, #12
 800b310:	2205      	movs	r2, #5
 800b312:	4619      	mov	r1, r3
 800b314:	200e      	movs	r0, #14
 800b316:	f7ff fe3b 	bl	800af90 <ADIS16265_ReadReg16>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d001      	beq.n	800b324 <ADIS16265_GetAxesAngle+0x100>
      return SEN_ERROR;
 800b320:	2300      	movs	r3, #0
 800b322:	e018      	b.n	800b356 <ADIS16265_GetAxesAngle+0x132>
    else
    {
      uTmp &= 0x3FFF;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b32a:	60fb      	str	r3, [r7, #12]
      uTmp *= 3600;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800b332:	fb02 f303 	mul.w	r3, r2, r3
 800b336:	60fb      	str	r3, [r7, #12]
      uTmp = (uTmp + ANGLE_UNITS_360/2) / ANGLE_UNITS_360;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800b33e:	3312      	adds	r3, #18
 800b340:	089b      	lsrs	r3, r3, #2
 800b342:	4a08      	ldr	r2, [pc, #32]	; (800b364 <ADIS16265_GetAxesAngle+0x140>)
 800b344:	fba2 2303 	umull	r2, r3, r2, r3
 800b348:	0a9b      	lsrs	r3, r3, #10
 800b34a:	60fb      	str	r3, [r7, #12]
      buff->AXIS_Z = (int16_t)uTmp;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	b21a      	sxth	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	809a      	strh	r2, [r3, #4]
    }
  }
  
  return SEN_SUCCESS;  
 800b354:	2301      	movs	r3, #1
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	2000022c 	.word	0x2000022c
 800b364:	6ab155c1 	.word	0x6ab155c1

0800b368 <TMP122_GetTemperatureP>:
  
  return SEN_SUCCESS;  
}

status_t TMP122_GetTemperatureP(Temperature_t* tmp)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af02      	add	r7, sp, #8
 800b36e:	6078      	str	r0, [r7, #4]
  uint16_t txdata = 0;
 800b370:	2300      	movs	r3, #0
 800b372:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef res = HAL_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
  
  if (tmp == NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d101      	bne.n	800b382 <TMP122_GetTemperatureP+0x1a>
    return SEN_ERROR;
 800b37e:	2300      	movs	r3, #0
 800b380:	e052      	b.n	800b428 <TMP122_GetTemperatureP+0xc0>
  
  tmp->Temp_X = tmp->Temp_Y = tmp->Temp_Z = 0xFFFF;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b388:	809a      	strh	r2, [r3, #4]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	805a      	strh	r2, [r3, #2]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	801a      	strh	r2, [r3, #0]

  SPI_SlaveSelect(TEMP_CS|CS_ON|PAN_X_P);
 800b39e:	2080      	movs	r0, #128	; 0x80
 800b3a0:	f7ff fc6a 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&txdata, (uint8_t *)(&tmp->Temp_X), 1, 10);
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	f107 010c 	add.w	r1, r7, #12
 800b3aa:	230a      	movs	r3, #10
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	481f      	ldr	r0, [pc, #124]	; (800b430 <TMP122_GetTemperatureP+0xc8>)
 800b3b2:	f7fc f941 	bl	8007638 <HAL_SPI_TransmitReceive>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(TEMP_CS|CS_OFF|PAN_X_P);
 800b3ba:	20e0      	movs	r0, #224	; 0xe0
 800b3bc:	f7ff fc5c 	bl	800ac78 <SPI_SlaveSelect>
  if (res != HAL_OK)
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <TMP122_GetTemperatureP+0x62>
    return SEN_ERROR;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e02e      	b.n	800b428 <TMP122_GetTemperatureP+0xc0>
  
  SPI_SlaveSelect(TEMP_CS|CS_ON|PAN_Y_P);
 800b3ca:	2081      	movs	r0, #129	; 0x81
 800b3cc:	f7ff fc54 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&txdata, (uint8_t *)(&tmp->Temp_Y), 1, 10);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	1c9a      	adds	r2, r3, #2
 800b3d4:	f107 010c 	add.w	r1, r7, #12
 800b3d8:	230a      	movs	r3, #10
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	2301      	movs	r3, #1
 800b3de:	4814      	ldr	r0, [pc, #80]	; (800b430 <TMP122_GetTemperatureP+0xc8>)
 800b3e0:	f7fc f92a 	bl	8007638 <HAL_SPI_TransmitReceive>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(TEMP_CS|CS_OFF|PAN_Y_P);
 800b3e8:	20e1      	movs	r0, #225	; 0xe1
 800b3ea:	f7ff fc45 	bl	800ac78 <SPI_SlaveSelect>
  if (res != HAL_OK)
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <TMP122_GetTemperatureP+0x90>
    return SEN_ERROR;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	e017      	b.n	800b428 <TMP122_GetTemperatureP+0xc0>
  
  SPI_SlaveSelect(TEMP_CS|CS_ON|PAN_Z_P);
 800b3f8:	2082      	movs	r0, #130	; 0x82
 800b3fa:	f7ff fc3d 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&txdata, (uint8_t *)(&tmp->Temp_Z), 1, 10);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	1d1a      	adds	r2, r3, #4
 800b402:	f107 010c 	add.w	r1, r7, #12
 800b406:	230a      	movs	r3, #10
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	2301      	movs	r3, #1
 800b40c:	4808      	ldr	r0, [pc, #32]	; (800b430 <TMP122_GetTemperatureP+0xc8>)
 800b40e:	f7fc f913 	bl	8007638 <HAL_SPI_TransmitReceive>
 800b412:	4603      	mov	r3, r0
 800b414:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(TEMP_CS|CS_OFF|PAN_Z_P);
 800b416:	20e2      	movs	r0, #226	; 0xe2
 800b418:	f7ff fc2e 	bl	800ac78 <SPI_SlaveSelect>
  if (res != HAL_OK)
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <TMP122_GetTemperatureP+0xbe>
    return SEN_ERROR;
 800b422:	2300      	movs	r3, #0
 800b424:	e000      	b.n	800b428 <TMP122_GetTemperatureP+0xc0>

  return SEN_SUCCESS;
 800b426:	2301      	movs	r3, #1
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	200095d4 	.word	0x200095d4

0800b434 <TMP122_GetTemperatureM>:

status_t TMP122_GetTemperatureM(Temperature_t* tmp)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af02      	add	r7, sp, #8
 800b43a:	6078      	str	r0, [r7, #4]
  uint16_t txdata = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef res = HAL_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	73fb      	strb	r3, [r7, #15]
  
  if (tmp == NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <TMP122_GetTemperatureM+0x1a>
    return SEN_ERROR;
 800b44a:	2300      	movs	r3, #0
 800b44c:	e052      	b.n	800b4f4 <TMP122_GetTemperatureM+0xc0>
  
  tmp->Temp_X = tmp->Temp_Y = tmp->Temp_Z = 0xFFFF;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b454:	809a      	strh	r2, [r3, #4]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	805a      	strh	r2, [r3, #2]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	801a      	strh	r2, [r3, #0]

  SPI_SlaveSelect(TEMP_CS|CS_ON|PAN_X_M);
 800b46a:	2083      	movs	r0, #131	; 0x83
 800b46c:	f7ff fc04 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&txdata, (uint8_t *)(&tmp->Temp_X), 1, 10);
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	f107 010c 	add.w	r1, r7, #12
 800b476:	230a      	movs	r3, #10
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	2301      	movs	r3, #1
 800b47c:	481f      	ldr	r0, [pc, #124]	; (800b4fc <TMP122_GetTemperatureM+0xc8>)
 800b47e:	f7fc f8db 	bl	8007638 <HAL_SPI_TransmitReceive>
 800b482:	4603      	mov	r3, r0
 800b484:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(TEMP_CS|CS_OFF|PAN_X_M);
 800b486:	20e3      	movs	r0, #227	; 0xe3
 800b488:	f7ff fbf6 	bl	800ac78 <SPI_SlaveSelect>
  if (res != HAL_OK)
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <TMP122_GetTemperatureM+0x62>
    return SEN_ERROR;
 800b492:	2300      	movs	r3, #0
 800b494:	e02e      	b.n	800b4f4 <TMP122_GetTemperatureM+0xc0>
  
  SPI_SlaveSelect(TEMP_CS|CS_ON|PAN_Y_M);
 800b496:	2084      	movs	r0, #132	; 0x84
 800b498:	f7ff fbee 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&txdata, (uint8_t *)(&tmp->Temp_Y), 1, 10);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	1c9a      	adds	r2, r3, #2
 800b4a0:	f107 010c 	add.w	r1, r7, #12
 800b4a4:	230a      	movs	r3, #10
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	4814      	ldr	r0, [pc, #80]	; (800b4fc <TMP122_GetTemperatureM+0xc8>)
 800b4ac:	f7fc f8c4 	bl	8007638 <HAL_SPI_TransmitReceive>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(TEMP_CS|CS_OFF|PAN_Y_M);
 800b4b4:	20e4      	movs	r0, #228	; 0xe4
 800b4b6:	f7ff fbdf 	bl	800ac78 <SPI_SlaveSelect>
  if (res != HAL_OK)
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <TMP122_GetTemperatureM+0x90>
    return SEN_ERROR;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e017      	b.n	800b4f4 <TMP122_GetTemperatureM+0xc0>
  
  SPI_SlaveSelect(TEMP_CS|CS_ON|PAN_Z_M);
 800b4c4:	2085      	movs	r0, #133	; 0x85
 800b4c6:	f7ff fbd7 	bl	800ac78 <SPI_SlaveSelect>
  res = HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&txdata, (uint8_t *)(&tmp->Temp_Z), 1, 10);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	1d1a      	adds	r2, r3, #4
 800b4ce:	f107 010c 	add.w	r1, r7, #12
 800b4d2:	230a      	movs	r3, #10
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	4808      	ldr	r0, [pc, #32]	; (800b4fc <TMP122_GetTemperatureM+0xc8>)
 800b4da:	f7fc f8ad 	bl	8007638 <HAL_SPI_TransmitReceive>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73fb      	strb	r3, [r7, #15]
  SPI_SlaveSelect(TEMP_CS|CS_OFF|PAN_Z_M);
 800b4e2:	20e5      	movs	r0, #229	; 0xe5
 800b4e4:	f7ff fbc8 	bl	800ac78 <SPI_SlaveSelect>
  if (res != HAL_OK)
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d001      	beq.n	800b4f2 <TMP122_GetTemperatureM+0xbe>
    return SEN_ERROR;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e000      	b.n	800b4f4 <TMP122_GetTemperatureM+0xc0>

  return SEN_SUCCESS;
 800b4f2:	2301      	movs	r3, #1
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	200095d4 	.word	0x200095d4

0800b500 <Magnitometers_LIS3MDL_Init>:
 
    return ESRetValue;
}


ES_ReturnType Magnitometers_LIS3MDL_Init(uint8_t Dev_No) {
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	71fb      	strb	r3, [r7, #7]
    uint8_t val;  
    ES_ReturnType ESRetValue = E_OK; 
 800b50a:	2300      	movs	r3, #0
 800b50c:	73fb      	strb	r3, [r7, #15]

    
    //set ODR (turn ON device)
  
 // turn on device in continues measuring 
  if ( !(LIS3MDL_MAG_W_SystemOperatingMode (Dev_No, LIS3MDL_MAG_MD_CONTINUOUS)))
 800b50e:	79fb      	ldrb	r3, [r7, #7]
 800b510:	2100      	movs	r1, #0
 800b512:	4618      	mov	r0, r3
 800b514:	f7fe ff5e 	bl	800a3d4 <LIS3MDL_MAG_W_SystemOperatingMode>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <Magnitometers_LIS3MDL_Init+0x22>
    return E_INV_CFG;    
 800b51e:	2305      	movs	r3, #5
 800b520:	e025      	b.n	800b56e <Magnitometers_LIS3MDL_Init+0x6e>
 // update output value 10 times per sec - prity enough for our detumbling algo 
  if ( !(LIS3MDL_MAG_W_OutputDataRate (Dev_No, LIS3MDL_MAG_DO_10Hz)))
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	2110      	movs	r1, #16
 800b526:	4618      	mov	r0, r3
 800b528:	f7fe ffb0 	bl	800a48c <LIS3MDL_MAG_W_OutputDataRate>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <Magnitometers_LIS3MDL_Init+0x36>
    return E_INV_CFG;
 800b532:	2305      	movs	r3, #5
 800b534:	e01b      	b.n	800b56e <Magnitometers_LIS3MDL_Init+0x6e>
 // check status   
  if ( !(LIS3MDL_MAG_R_WHO_AM_I_(Dev_No, &val )))
 800b536:	f107 020e 	add.w	r2, r7, #14
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	4611      	mov	r1, r2
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fe ff2a 	bl	800a398 <LIS3MDL_MAG_R_WHO_AM_I_>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <Magnitometers_LIS3MDL_Init+0x4e>
    return E_INV_CFG;
 800b54a:	2305      	movs	r3, #5
 800b54c:	e00f      	b.n	800b56e <Magnitometers_LIS3MDL_Init+0x6e>
  
  if (val ^ 0x3D)     // invalid configuratuion if device magnetometer answered with id differ than 0x3D
 800b54e:	7bbb      	ldrb	r3, [r7, #14]
 800b550:	2b3d      	cmp	r3, #61	; 0x3d
 800b552:	d001      	beq.n	800b558 <Magnitometers_LIS3MDL_Init+0x58>
    return E_INV_CFG;
 800b554:	2305      	movs	r3, #5
 800b556:	e00a      	b.n	800b56e <Magnitometers_LIS3MDL_Init+0x6e>
  
  // Here range of the magnetometer is configured, user set to different - check LIS3MDL_MAG_FS_t enumerator!
  if ( !(LIS3MDL_MAG_W_FullScale(Dev_No, LIS3MDL_MAG_FS_16Ga )))
 800b558:	79fb      	ldrb	r3, [r7, #7]
 800b55a:	2160      	movs	r1, #96	; 0x60
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe ff67 	bl	800a430 <LIS3MDL_MAG_W_FullScale>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <Magnitometers_LIS3MDL_Init+0x6c>
    return E_INV_CFG;    
 800b568:	2305      	movs	r3, #5
 800b56a:	e000      	b.n	800b56e <Magnitometers_LIS3MDL_Init+0x6e>
  
  return ESRetValue;
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
	...

0800b578 <Magnitometers_LIS3MDL_Read_Data>:

ES_ReturnType Magnitometers_LIS3MDL_Read_Data (Compass_Axis_t *MagOutData, uint8_t Dev_No) {
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	460b      	mov	r3, r1
 800b582:	70fb      	strb	r3, [r7, #3]
  
  int16_t pDataRaw[3];
  double sensitivity = 1; 
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	4b32      	ldr	r3, [pc, #200]	; (800b654 <Magnitometers_LIS3MDL_Read_Data+0xdc>)
 800b58a:	e9c7 2306 	strd	r2, r3, [r7, #24]

  ES_ReturnType ESRetValue = E_OK;   
 800b58e:	2300      	movs	r3, #0
 800b590:	75fb      	strb	r3, [r7, #23]
  
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 800b592:	4a31      	ldr	r2, [pc, #196]	; (800b658 <Magnitometers_LIS3MDL_Read_Data+0xe0>)
 800b594:	f107 0308 	add.w	r3, r7, #8
 800b598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b59c:	6018      	str	r0, [r3, #0]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	8019      	strh	r1, [r3, #0]
  
  if ( !(LIS3MDL_MAG_Get_Magnetic(Dev_No, (uint8_t*)regValue )))
 800b5a2:	f107 0208 	add.w	r2, r7, #8
 800b5a6:	78fb      	ldrb	r3, [r7, #3]
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fe ff9c 	bl	800a4e8 <LIS3MDL_MAG_Get_Magnetic>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <Magnitometers_LIS3MDL_Read_Data+0x42>
   return E_INV_CFG;   
 800b5b6:	2305      	movs	r3, #5
 800b5b8:	e048      	b.n	800b64c <Magnitometers_LIS3MDL_Read_Data+0xd4>

  /* Format the data. */
  pDataRaw[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 800b5ba:	7a7b      	ldrb	r3, [r7, #9]
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	021b      	lsls	r3, r3, #8
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	7a3b      	ldrb	r3, [r7, #8]
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	4413      	add	r3, r2
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	b21b      	sxth	r3, r3
 800b5cc:	823b      	strh	r3, [r7, #16]
  pDataRaw[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 800b5ce:	7afb      	ldrb	r3, [r7, #11]
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	021b      	lsls	r3, r3, #8
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	7abb      	ldrb	r3, [r7, #10]
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	4413      	add	r3, r2
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	b21b      	sxth	r3, r3
 800b5e0:	827b      	strh	r3, [r7, #18]
  pDataRaw[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );  
 800b5e2:	7b7b      	ldrb	r3, [r7, #13]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	021b      	lsls	r3, r3, #8
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	7b3b      	ldrb	r3, [r7, #12]
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	4413      	add	r3, r2
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	b21b      	sxth	r3, r3
 800b5f4:	82bb      	strh	r3, [r7, #20]
  
  MagOutData->AXIS_X = ( (double)pDataRaw[0] * sensitivity );
 800b5f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7f4 ffa2 	bl	8000544 <__aeabi_i2d>
 800b600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b604:	f7f5 f808 	bl	8000618 <__aeabi_dmul>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	6879      	ldr	r1, [r7, #4]
 800b60e:	e9c1 2300 	strd	r2, r3, [r1]
  MagOutData->AXIS_Y = ( (double)pDataRaw[1] * sensitivity );
 800b612:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b616:	4618      	mov	r0, r3
 800b618:	f7f4 ff94 	bl	8000544 <__aeabi_i2d>
 800b61c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b620:	f7f4 fffa 	bl	8000618 <__aeabi_dmul>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	6879      	ldr	r1, [r7, #4]
 800b62a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  MagOutData->AXIS_Z = ( (double)pDataRaw[2] * sensitivity );
 800b62e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b632:	4618      	mov	r0, r3
 800b634:	f7f4 ff86 	bl	8000544 <__aeabi_i2d>
 800b638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b63c:	f7f4 ffec 	bl	8000618 <__aeabi_dmul>
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	e9c1 2304 	strd	r2, r3, [r1, #16]
  
  return ESRetValue;    
 800b64a:	7dfb      	ldrb	r3, [r7, #23]
  
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3720      	adds	r7, #32
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	3ff00000 	.word	0x3ff00000
 800b658:	0801ab88 	.word	0x0801ab88

0800b65c <fwrite>:
#endif



size_t fwrite(const void * __restrict data, size_t _size, size_t _n, FILE* file )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
 800b668:	603b      	str	r3, [r7, #0]
	pritntToInterface((FILE *)file, (uint8_t *)data, _n);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	461a      	mov	r2, r3
 800b66e:	68f9      	ldr	r1, [r7, #12]
 800b670:	6838      	ldr	r0, [r7, #0]
 800b672:	f000 f85b 	bl	800b72c <pritntToInterface>

	return _n;
 800b676:	687b      	ldr	r3, [r7, #4]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <_write>:

int _write(int file, char *data, int len)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d00a      	beq.n	800b6a8 <_write+0x28>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d007      	beq.n	800b6a8 <_write+0x28>
   {
      errno = EBADF;
 800b698:	f00b fdca 	bl	8017230 <__errno>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2209      	movs	r2, #9
 800b6a0:	601a      	str	r2, [r3, #0]
      return -1;
 800b6a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6a6:	e010      	b.n	800b6ca <_write+0x4a>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit((UART_HandleTypeDef *)COMM, (uint8_t*)data, len, 1000);
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <_write+0x54>)
 800b6aa:	6818      	ldr	r0, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6b4:	68b9      	ldr	r1, [r7, #8]
 800b6b6:	f7fd f9f4 	bl	8008aa2 <HAL_UART_Transmit>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <_write+0x48>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	e000      	b.n	800b6ca <_write+0x4a>
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20000000 	.word	0x20000000

0800b6d8 <fputc>:

#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
PUTCHAR_PROTOTYPE
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
    if ((f == (FILE *)&huart1) || (f == (FILE *)&huart4) || (f == (FILE *)&huart6))
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	4a0e      	ldr	r2, [pc, #56]	; (800b720 <fputc+0x48>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d007      	beq.n	800b6fa <fputc+0x22>
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	4a0d      	ldr	r2, [pc, #52]	; (800b724 <fputc+0x4c>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d003      	beq.n	800b6fa <fputc+0x22>
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	4a0c      	ldr	r2, [pc, #48]	; (800b728 <fputc+0x50>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d106      	bne.n	800b708 <fputc+0x30>
    {
      HAL_UART_Transmit((UART_HandleTypeDef *)f, (uint8_t *)&ch, 1, 10);
 800b6fa:	1d39      	adds	r1, r7, #4
 800b6fc:	230a      	movs	r3, #10
 800b6fe:	2201      	movs	r2, #1
 800b700:	6838      	ldr	r0, [r7, #0]
 800b702:	f7fd f9ce 	bl	8008aa2 <HAL_UART_Transmit>
 800b706:	e005      	b.n	800b714 <fputc+0x3c>
    }
    else f_putc((TCHAR)ch, (FIL *)f);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	4618      	mov	r0, r3
 800b710:	f008 fe3d 	bl	801438e <f_putc>

  return ch;
 800b714:	687b      	ldr	r3, [r7, #4]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	2000986c 	.word	0x2000986c
 800b724:	20009a08 	.word	0x20009a08
 800b728:	200099c8 	.word	0x200099c8

0800b72c <pritntToInterface>:
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* INTERNAL (STATIC) ROUTINES DEFINITION
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
static void pritntToInterface(FILE *f, uint8_t * data, int size)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
	if( f != NULL)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d020      	beq.n	800b780 <pritntToInterface+0x54>
	{
		if(( f == COMM )||( f == SYSCON )||( f == PAYLOAD ))
 800b73e:	4b12      	ldr	r3, [pc, #72]	; (800b788 <pritntToInterface+0x5c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	429a      	cmp	r2, r3
 800b746:	d009      	beq.n	800b75c <pritntToInterface+0x30>
 800b748:	4b10      	ldr	r3, [pc, #64]	; (800b78c <pritntToInterface+0x60>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d004      	beq.n	800b75c <pritntToInterface+0x30>
 800b752:	4b0f      	ldr	r3, [pc, #60]	; (800b790 <pritntToInterface+0x64>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d108      	bne.n	800b76e <pritntToInterface+0x42>
		{
			/* Write to Communication interface UART */
			HAL_UART_Transmit((UART_HandleTypeDef *)f, (uint8_t *)data, size, 1000);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	b29a      	uxth	r2, r3
 800b760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b764:	68b9      	ldr	r1, [r7, #8]
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7fd f99b 	bl	8008aa2 <HAL_UART_Transmit>
					size,			/* Number of bytes to write */
				    &written_bytes			/* Pointer to number of bytes written */
			);
		}
	}
}
 800b76c:	e008      	b.n	800b780 <pritntToInterface+0x54>
			FIL * temp_file = (FIL *)f;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	617b      	str	r3, [r7, #20]
			f_write (
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	f107 0310 	add.w	r3, r7, #16
 800b778:	68b9      	ldr	r1, [r7, #8]
 800b77a:	6978      	ldr	r0, [r7, #20]
 800b77c:	f007 fdbe 	bl	80132fc <f_write>
}
 800b780:	bf00      	nop
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	20000000 	.word	0x20000000
 800b78c:	20000008 	.word	0x20000008
 800b790:	20000004 	.word	0x20000004

0800b794 <ESTTC_UART_COMM>:
    HAL_UART_Receive_IT((UART_HandleTypeDef*)PAYLOAD, (uint8_t *)&br, 1);
}

static  uint32_t rx_data_dummy;
void ESTTC_UART_COMM(void const * argument)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  uint8_t ProcessedPacket = 0;
 800b79c:	2300      	movs	r3, #0
 800b79e:	73fb      	strb	r3, [r7, #15]

  APP_InitCdCardFiles();
 800b7a0:	f003 fb36 	bl	800ee10 <APP_InitCdCardFiles>


  for(;;)
  {
      ProcessedPacket = ProcessedPacket | ESTTC_ProcessData(ESTTC_COMM_INTEFACE);
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	f000 f81f 	bl	800b7e8 <ESTTC_ProcessData>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	73fb      	strb	r3, [r7, #15]

      ProcessedPacket = ProcessedPacket | ESTTC_ProcessData(ESTTC_PAYLOAD_INTEFACE );
 800b7b4:	2001      	movs	r0, #1
 800b7b6:	f000 f817 	bl	800b7e8 <ESTTC_ProcessData>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	461a      	mov	r2, r3
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	73fb      	strb	r3, [r7, #15]

      ProcessedPacket = ProcessedPacket | ESTTC_ProcessData(ESTTC_SYSCOMM_INTEFACE );
 800b7c4:	2002      	movs	r0, #2
 800b7c6:	f000 f80f 	bl	800b7e8 <ESTTC_ProcessData>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	73fb      	strb	r3, [r7, #15]

	  if ( ProcessedPacket == 0 )  /* if there were no packets to process */
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e4      	bne.n	800b7a4 <ESTTC_UART_COMM+0x10>
	  {
	      /* give time for the other processes */
	      ProcessedPacket = 0;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	73fb      	strb	r3, [r7, #15]
	      osDelay(10);
 800b7de:	200a      	movs	r0, #10
 800b7e0:	f008 ff3d 	bl	801465e <osDelay>
      ProcessedPacket = ProcessedPacket | ESTTC_ProcessData(ESTTC_COMM_INTEFACE);
 800b7e4:	e7de      	b.n	800b7a4 <ESTTC_UART_COMM+0x10>
	...

0800b7e8 <ESTTC_ProcessData>:
	  }
  }
}

static uint8_t ESTTC_ProcessData(ESTTC_InterfacesEnum Interface)
{
 800b7e8:	b5b0      	push	{r4, r5, r7, lr}
 800b7ea:	b0a2      	sub	sp, #136	; 0x88
 800b7ec:	af04      	add	r7, sp, #16
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	71fb      	strb	r3, [r7, #7]

    FLASH_EraseInitTypeDef fes;
    FILE * ComInterface;
    uint32_t se;

    uint8_t ProcessedPacket = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if( Interface >= ESTTC_INTERFACE_NUMBER )
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d901      	bls.n	800b802 <ESTTC_ProcessData+0x1a>
    {
        Error_Handler();
 800b7fe:	f7f5 fe8d 	bl	800151c <Error_Handler>
    }

    if(GetPhrase(rxline[Interface], LINE_BUFFER_SIZE-1, '\r', Interface))
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	021b      	lsls	r3, r3, #8
 800b806:	4ad6      	ldr	r2, [pc, #856]	; (800bb60 <ESTTC_ProcessData+0x378>)
 800b808:	1898      	adds	r0, r3, r2
 800b80a:	79fb      	ldrb	r3, [r7, #7]
 800b80c:	220d      	movs	r2, #13
 800b80e:	21ff      	movs	r1, #255	; 0xff
 800b810:	f003 fa0c 	bl	800ec2c <GetPhrase>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	f003 812b 	beq.w	800ea72 <ESTTC_ProcessData+0x328a>
    {
      ComInterface = (FILE *)Esttc_usart_interfaces[Interface];
 800b81c:	79fb      	ldrb	r3, [r7, #7]
 800b81e:	4ad1      	ldr	r2, [pc, #836]	; (800bb64 <ESTTC_ProcessData+0x37c>)
 800b820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b824:	667b      	str	r3, [r7, #100]	; 0x64

      begin = strstr(rxline[Interface], "ES+");
 800b826:	79fb      	ldrb	r3, [r7, #7]
 800b828:	021b      	lsls	r3, r3, #8
 800b82a:	4acd      	ldr	r2, [pc, #820]	; (800bb60 <ESTTC_ProcessData+0x378>)
 800b82c:	4413      	add	r3, r2
 800b82e:	49ce      	ldr	r1, [pc, #824]	; (800bb68 <ESTTC_ProcessData+0x380>)
 800b830:	4618      	mov	r0, r3
 800b832:	f00c fc76 	bl	8018122 <strstr>
 800b836:	6638      	str	r0, [r7, #96]	; 0x60
      if(begin != NULL)
 800b838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f003 8119 	beq.w	800ea72 <ESTTC_ProcessData+0x328a>
      {
        ProcessedPacket = 1;
 800b840:	2301      	movs	r3, #1
 800b842:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        len = strlen(begin);
 800b846:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b848:	f7f4 fcd2 	bl	80001f0 <strlen>
 800b84c:	65f8      	str	r0, [r7, #92]	; 0x5c
        if( len <= LINE_BUFFER_SIZE)
 800b84e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b854:	f203 80ff 	bhi.w	800ea56 <ESTTC_ProcessData+0x326e>
        {
          strcpy(txline[Interface], begin);
 800b858:	79fb      	ldrb	r3, [r7, #7]
 800b85a:	021b      	lsls	r3, r3, #8
 800b85c:	4ac3      	ldr	r2, [pc, #780]	; (800bb6c <ESTTC_ProcessData+0x384>)
 800b85e:	4413      	add	r3, r2
 800b860:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b862:	4618      	mov	r0, r3
 800b864:	f00c fc55 	bl	8018112 <strcpy>
          for (i = 4, j = 4; i < len; i+=2, j++)
 800b868:	2304      	movs	r3, #4
 800b86a:	677b      	str	r3, [r7, #116]	; 0x74
 800b86c:	2304      	movs	r3, #4
 800b86e:	673b      	str	r3, [r7, #112]	; 0x70
 800b870:	e021      	b.n	800b8b6 <ESTTC_ProcessData+0xce>
          {
              txline[Interface][j] = HexToBin(txline[Interface][i], txline[Interface][i+1]);
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	4abd      	ldr	r2, [pc, #756]	; (800bb6c <ESTTC_ProcessData+0x384>)
 800b876:	021b      	lsls	r3, r3, #8
 800b878:	441a      	add	r2, r3
 800b87a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b87c:	4413      	add	r3, r2
 800b87e:	7818      	ldrb	r0, [r3, #0]
 800b880:	79fa      	ldrb	r2, [r7, #7]
 800b882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b884:	3301      	adds	r3, #1
 800b886:	49b9      	ldr	r1, [pc, #740]	; (800bb6c <ESTTC_ProcessData+0x384>)
 800b888:	0212      	lsls	r2, r2, #8
 800b88a:	440a      	add	r2, r1
 800b88c:	4413      	add	r3, r2
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	79fc      	ldrb	r4, [r7, #7]
 800b892:	4619      	mov	r1, r3
 800b894:	f003 fa1c 	bl	800ecd0 <HexToBin>
 800b898:	4603      	mov	r3, r0
 800b89a:	4619      	mov	r1, r3
 800b89c:	4ab3      	ldr	r2, [pc, #716]	; (800bb6c <ESTTC_ProcessData+0x384>)
 800b89e:	0223      	lsls	r3, r4, #8
 800b8a0:	441a      	add	r2, r3
 800b8a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8a4:	4413      	add	r3, r2
 800b8a6:	460a      	mov	r2, r1
 800b8a8:	701a      	strb	r2, [r3, #0]
          for (i = 4, j = 4; i < len; i+=2, j++)
 800b8aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8ac:	3302      	adds	r3, #2
 800b8ae:	677b      	str	r3, [r7, #116]	; 0x74
 800b8b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	673b      	str	r3, [r7, #112]	; 0x70
 800b8b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b8b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d3d9      	bcc.n	800b872 <ESTTC_ProcessData+0x8a>
          }

          if (txline[Interface][3] == 'R')
 800b8be:	79fb      	ldrb	r3, [r7, #7]
 800b8c0:	4aaa      	ldr	r2, [pc, #680]	; (800bb6c <ESTTC_ProcessData+0x384>)
 800b8c2:	021b      	lsls	r3, r3, #8
 800b8c4:	4413      	add	r3, r2
 800b8c6:	3303      	adds	r3, #3
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b52      	cmp	r3, #82	; 0x52
 800b8cc:	f041 805f 	bne.w	800c98e <ESTTC_ProcessData+0x11a6>
          {
            if (txline[Interface][4] == OBC_I2C_ADDRESS)
 800b8d0:	79fb      	ldrb	r3, [r7, #7]
 800b8d2:	4aa6      	ldr	r2, [pc, #664]	; (800bb6c <ESTTC_ProcessData+0x384>)
 800b8d4:	021b      	lsls	r3, r3, #8
 800b8d6:	4413      	add	r3, r2
 800b8d8:	3304      	adds	r3, #4
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	2b11      	cmp	r3, #17
 800b8de:	f040 87f0 	bne.w	800c8c2 <ESTTC_ProcessData+0x10da>
            {
              switch(txline[Interface][5])
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	4aa1      	ldr	r2, [pc, #644]	; (800bb6c <ESTTC_ProcessData+0x384>)
 800b8e6:	021b      	lsls	r3, r3, #8
 800b8e8:	4413      	add	r3, r2
 800b8ea:	3305      	adds	r3, #5
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	2b7f      	cmp	r3, #127	; 0x7f
 800b8f0:	f200 87c8 	bhi.w	800c884 <ESTTC_ProcessData+0x109c>
 800b8f4:	a201      	add	r2, pc, #4	; (adr r2, 800b8fc <ESTTC_ProcessData+0x114>)
 800b8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fa:	bf00      	nop
 800b8fc:	0800bafd 	.word	0x0800bafd
 800b900:	0800bb7d 	.word	0x0800bb7d
 800b904:	0800bbfd 	.word	0x0800bbfd
 800b908:	0800bc5f 	.word	0x0800bc5f
 800b90c:	0800bcdf 	.word	0x0800bcdf
 800b910:	0800bd49 	.word	0x0800bd49
 800b914:	0800bdc9 	.word	0x0800bdc9
 800b918:	0800be71 	.word	0x0800be71
 800b91c:	0800bef1 	.word	0x0800bef1
 800b920:	0800bf3d 	.word	0x0800bf3d
 800b924:	0800bf89 	.word	0x0800bf89
 800b928:	0800bfef 	.word	0x0800bfef
 800b92c:	0800c03b 	.word	0x0800c03b
 800b930:	0800c087 	.word	0x0800c087
 800b934:	0800c0ed 	.word	0x0800c0ed
 800b938:	0800c139 	.word	0x0800c139
 800b93c:	0800c1c5 	.word	0x0800c1c5
 800b940:	0800c885 	.word	0x0800c885
 800b944:	0800c885 	.word	0x0800c885
 800b948:	0800c885 	.word	0x0800c885
 800b94c:	0800c22b 	.word	0x0800c22b
 800b950:	0800c2cf 	.word	0x0800c2cf
 800b954:	0800c373 	.word	0x0800c373
 800b958:	0800c417 	.word	0x0800c417
 800b95c:	0800c505 	.word	0x0800c505
 800b960:	0800c5a9 	.word	0x0800c5a9
 800b964:	0800c64d 	.word	0x0800c64d
 800b968:	0800c671 	.word	0x0800c671
 800b96c:	0800c695 	.word	0x0800c695
 800b970:	0800c6b9 	.word	0x0800c6b9
 800b974:	0800c6dd 	.word	0x0800c6dd
 800b978:	0800c701 	.word	0x0800c701
 800b97c:	0800c885 	.word	0x0800c885
 800b980:	0800c885 	.word	0x0800c885
 800b984:	0800c885 	.word	0x0800c885
 800b988:	0800c885 	.word	0x0800c885
 800b98c:	0800c885 	.word	0x0800c885
 800b990:	0800c885 	.word	0x0800c885
 800b994:	0800c885 	.word	0x0800c885
 800b998:	0800c885 	.word	0x0800c885
 800b99c:	0800c885 	.word	0x0800c885
 800b9a0:	0800c885 	.word	0x0800c885
 800b9a4:	0800c885 	.word	0x0800c885
 800b9a8:	0800c885 	.word	0x0800c885
 800b9ac:	0800c885 	.word	0x0800c885
 800b9b0:	0800c885 	.word	0x0800c885
 800b9b4:	0800c885 	.word	0x0800c885
 800b9b8:	0800c885 	.word	0x0800c885
 800b9bc:	0800c885 	.word	0x0800c885
 800b9c0:	0800c725 	.word	0x0800c725
 800b9c4:	0800c885 	.word	0x0800c885
 800b9c8:	0800c775 	.word	0x0800c775
 800b9cc:	0800c885 	.word	0x0800c885
 800b9d0:	0800c885 	.word	0x0800c885
 800b9d4:	0800c885 	.word	0x0800c885
 800b9d8:	0800c885 	.word	0x0800c885
 800b9dc:	0800c885 	.word	0x0800c885
 800b9e0:	0800c885 	.word	0x0800c885
 800b9e4:	0800c885 	.word	0x0800c885
 800b9e8:	0800c885 	.word	0x0800c885
 800b9ec:	0800c885 	.word	0x0800c885
 800b9f0:	0800c885 	.word	0x0800c885
 800b9f4:	0800c885 	.word	0x0800c885
 800b9f8:	0800c885 	.word	0x0800c885
 800b9fc:	0800c885 	.word	0x0800c885
 800ba00:	0800c885 	.word	0x0800c885
 800ba04:	0800c885 	.word	0x0800c885
 800ba08:	0800c885 	.word	0x0800c885
 800ba0c:	0800c885 	.word	0x0800c885
 800ba10:	0800c885 	.word	0x0800c885
 800ba14:	0800c885 	.word	0x0800c885
 800ba18:	0800c885 	.word	0x0800c885
 800ba1c:	0800c885 	.word	0x0800c885
 800ba20:	0800c885 	.word	0x0800c885
 800ba24:	0800c885 	.word	0x0800c885
 800ba28:	0800c885 	.word	0x0800c885
 800ba2c:	0800c885 	.word	0x0800c885
 800ba30:	0800c885 	.word	0x0800c885
 800ba34:	0800c885 	.word	0x0800c885
 800ba38:	0800c885 	.word	0x0800c885
 800ba3c:	0800c885 	.word	0x0800c885
 800ba40:	0800c885 	.word	0x0800c885
 800ba44:	0800c885 	.word	0x0800c885
 800ba48:	0800c885 	.word	0x0800c885
 800ba4c:	0800c885 	.word	0x0800c885
 800ba50:	0800c885 	.word	0x0800c885
 800ba54:	0800c885 	.word	0x0800c885
 800ba58:	0800c885 	.word	0x0800c885
 800ba5c:	0800c885 	.word	0x0800c885
 800ba60:	0800c885 	.word	0x0800c885
 800ba64:	0800c885 	.word	0x0800c885
 800ba68:	0800c885 	.word	0x0800c885
 800ba6c:	0800c885 	.word	0x0800c885
 800ba70:	0800c885 	.word	0x0800c885
 800ba74:	0800c885 	.word	0x0800c885
 800ba78:	0800c885 	.word	0x0800c885
 800ba7c:	0800c885 	.word	0x0800c885
 800ba80:	0800c885 	.word	0x0800c885
 800ba84:	0800c885 	.word	0x0800c885
 800ba88:	0800c885 	.word	0x0800c885
 800ba8c:	0800c885 	.word	0x0800c885
 800ba90:	0800c885 	.word	0x0800c885
 800ba94:	0800c885 	.word	0x0800c885
 800ba98:	0800c885 	.word	0x0800c885
 800ba9c:	0800c885 	.word	0x0800c885
 800baa0:	0800c885 	.word	0x0800c885
 800baa4:	0800c885 	.word	0x0800c885
 800baa8:	0800c885 	.word	0x0800c885
 800baac:	0800c885 	.word	0x0800c885
 800bab0:	0800c885 	.word	0x0800c885
 800bab4:	0800c885 	.word	0x0800c885
 800bab8:	0800c885 	.word	0x0800c885
 800babc:	0800c885 	.word	0x0800c885
 800bac0:	0800c885 	.word	0x0800c885
 800bac4:	0800c885 	.word	0x0800c885
 800bac8:	0800c885 	.word	0x0800c885
 800bacc:	0800c885 	.word	0x0800c885
 800bad0:	0800c885 	.word	0x0800c885
 800bad4:	0800c885 	.word	0x0800c885
 800bad8:	0800c885 	.word	0x0800c885
 800badc:	0800c885 	.word	0x0800c885
 800bae0:	0800c885 	.word	0x0800c885
 800bae4:	0800c885 	.word	0x0800c885
 800bae8:	0800c885 	.word	0x0800c885
 800baec:	0800c885 	.word	0x0800c885
 800baf0:	0800c885 	.word	0x0800c885
 800baf4:	0800c885 	.word	0x0800c885
 800baf8:	0800c7b9 	.word	0x0800c7b9
              {
                case ESTTC_CMD_ACCSEL_1_DATA: //0x00:
                  if (AIS328DQ_GetAccAxesRaw(AIS328DQ_1_MEMS_I2C_ADDRESS, &data) == SEN_SUCCESS) { 
 800bafc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb00:	4619      	mov	r1, r3
 800bb02:	2030      	movs	r0, #48	; 0x30
 800bb04:	f7fe fe8b 	bl	800a81e <AIS328DQ_GetAccAxesRaw>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d11d      	bne.n	800bb4a <ESTTC_ProcessData+0x362>
                    fprintf(ComInterface, "OK+1%d/%d/%d\r", data.AXIS_X, data.AXIS_Y, data.AXIS_Z);
 800bb0e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bb12:	461a      	mov	r2, r3
 800bb14:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bb18:	4619      	mov	r1, r3
 800bb1a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	460b      	mov	r3, r1
 800bb22:	4913      	ldr	r1, [pc, #76]	; (800bb70 <ESTTC_ProcessData+0x388>)
 800bb24:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bb26:	f00b fb89 	bl	801723c <fiprintf>
                    fprintf(ComInterface, "Accelerometer 1 X=%d Y=%d Z=%d\r", data.AXIS_X, data.AXIS_Y, data.AXIS_Z);
 800bb2a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bb34:	4619      	mov	r1, r3
 800bb36:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	490d      	ldr	r1, [pc, #52]	; (800bb74 <ESTTC_ProcessData+0x38c>)
 800bb40:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bb42:	f00b fb7b 	bl	801723c <fiprintf>
                  }
                  else {
                    I2C2_Reset();                    
                    fprintf(ComInterface, "ERR - Accelerometer 1 fail - I2C bus restart is performed, please try command again\r  ");
                  }
                  break;
 800bb46:	f002 bf94 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    I2C2_Reset();                    
 800bb4a:	f7f5 facd 	bl	80010e8 <I2C2_Reset>
                    fprintf(ComInterface, "ERR - Accelerometer 1 fail - I2C bus restart is performed, please try command again\r  ");
 800bb4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb50:	2256      	movs	r2, #86	; 0x56
 800bb52:	2101      	movs	r1, #1
 800bb54:	4808      	ldr	r0, [pc, #32]	; (800bb78 <ESTTC_ProcessData+0x390>)
 800bb56:	f7ff fd81 	bl	800b65c <fwrite>
                  break;
 800bb5a:	f002 bf8a 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800bb5e:	bf00      	nop
 800bb60:	20000764 	.word	0x20000764
 800bb64:	2000000c 	.word	0x2000000c
 800bb68:	0801abb8 	.word	0x0801abb8
 800bb6c:	20000464 	.word	0x20000464
 800bb70:	0801abbc 	.word	0x0801abbc
 800bb74:	0801abcc 	.word	0x0801abcc
 800bb78:	0801abec 	.word	0x0801abec
                case ESTTC_CMD_ACCSEL_1_ACESS:	//0x01
                  if(SEN_SUCCESS == AIS328DQ_ReadReg(AIS328DQ_1_MEMS_I2C_ADDRESS, txline[Interface][6], (uint8_t *)&txline[Interface][7])) {
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	4aad      	ldr	r2, [pc, #692]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	4413      	add	r3, r2
 800bb84:	3306      	adds	r3, #6
 800bb86:	7819      	ldrb	r1, [r3, #0]
 800bb88:	79fb      	ldrb	r3, [r7, #7]
 800bb8a:	021b      	lsls	r3, r3, #8
 800bb8c:	3307      	adds	r3, #7
 800bb8e:	4aa9      	ldr	r2, [pc, #676]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bb90:	4413      	add	r3, r2
 800bb92:	461a      	mov	r2, r3
 800bb94:	2030      	movs	r0, #48	; 0x30
 800bb96:	f7fe fd19 	bl	800a5cc <AIS328DQ_ReadReg>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d125      	bne.n	800bbec <ESTTC_ProcessData+0x404>
                    fprintf(ComInterface, "OK+1%02X/%02X\r", txline[Interface][6], txline[Interface][7]);
 800bba0:	79fb      	ldrb	r3, [r7, #7]
 800bba2:	4aa4      	ldr	r2, [pc, #656]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	4413      	add	r3, r2
 800bba8:	3306      	adds	r3, #6
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	4619      	mov	r1, r3
 800bbae:	79fb      	ldrb	r3, [r7, #7]
 800bbb0:	4aa0      	ldr	r2, [pc, #640]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bbb2:	021b      	lsls	r3, r3, #8
 800bbb4:	4413      	add	r3, r2
 800bbb6:	3307      	adds	r3, #7
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	460a      	mov	r2, r1
 800bbbc:	499e      	ldr	r1, [pc, #632]	; (800be38 <ESTTC_ProcessData+0x650>)
 800bbbe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bbc0:	f00b fb3c 	bl	801723c <fiprintf>
                    fprintf(ComInterface, "Accelerometer 1 register %X has value %X\r", txline[Interface][6], txline[Interface][7]);
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	4a9b      	ldr	r2, [pc, #620]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bbc8:	021b      	lsls	r3, r3, #8
 800bbca:	4413      	add	r3, r2
 800bbcc:	3306      	adds	r3, #6
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	4a97      	ldr	r2, [pc, #604]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bbd6:	021b      	lsls	r3, r3, #8
 800bbd8:	4413      	add	r3, r2
 800bbda:	3307      	adds	r3, #7
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	460a      	mov	r2, r1
 800bbe0:	4996      	ldr	r1, [pc, #600]	; (800be3c <ESTTC_ProcessData+0x654>)
 800bbe2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bbe4:	f00b fb2a 	bl	801723c <fiprintf>
                  }
                  else
                    fprintf(ComInterface, "ERR - Not valid parameters!\r");
                  break;
 800bbe8:	f002 bf43 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    fprintf(ComInterface, "ERR - Not valid parameters!\r");
 800bbec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbee:	221c      	movs	r2, #28
 800bbf0:	2101      	movs	r1, #1
 800bbf2:	4893      	ldr	r0, [pc, #588]	; (800be40 <ESTTC_ProcessData+0x658>)
 800bbf4:	f7ff fd32 	bl	800b65c <fwrite>
                  break;
 800bbf8:	f002 bf3b 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  
                case ESTTC_CMD_ACCSEL_2_DATA: //0x02:
                  if (AIS328DQ_GetAccAxesRaw(AIS328DQ_2_MEMS_I2C_ADDRESS, &data) == SEN_SUCCESS) { 
 800bbfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc00:	4619      	mov	r1, r3
 800bc02:	2032      	movs	r0, #50	; 0x32
 800bc04:	f7fe fe0b 	bl	800a81e <AIS328DQ_GetAccAxesRaw>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d11d      	bne.n	800bc4a <ESTTC_ProcessData+0x462>
                    fprintf(ComInterface, "OK+2%d/%d/%d\r", data.AXIS_X, data.AXIS_Y, data.AXIS_Z);
 800bc0e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bc12:	461a      	mov	r2, r3
 800bc14:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bc18:	4619      	mov	r1, r3
 800bc1a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	460b      	mov	r3, r1
 800bc22:	4988      	ldr	r1, [pc, #544]	; (800be44 <ESTTC_ProcessData+0x65c>)
 800bc24:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bc26:	f00b fb09 	bl	801723c <fiprintf>
                    fprintf(ComInterface, "Accelerometer 2 X=%d Y=%d Z=%d\r", data.AXIS_X, data.AXIS_Y, data.AXIS_Z);
 800bc2a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bc2e:	461a      	mov	r2, r3
 800bc30:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bc34:	4619      	mov	r1, r3
 800bc36:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4982      	ldr	r1, [pc, #520]	; (800be48 <ESTTC_ProcessData+0x660>)
 800bc40:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bc42:	f00b fafb 	bl	801723c <fiprintf>
                  }
                  else {
                    I2C2_Reset();  
                    fprintf(ComInterface, "Accelerometer 2 fail - I2C bus restart is performed, please try command again\r  ");
                  } 
                  break;                  
 800bc46:	f002 bf14 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    I2C2_Reset();  
 800bc4a:	f7f5 fa4d 	bl	80010e8 <I2C2_Reset>
                    fprintf(ComInterface, "Accelerometer 2 fail - I2C bus restart is performed, please try command again\r  ");
 800bc4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc50:	2250      	movs	r2, #80	; 0x50
 800bc52:	2101      	movs	r1, #1
 800bc54:	487d      	ldr	r0, [pc, #500]	; (800be4c <ESTTC_ProcessData+0x664>)
 800bc56:	f7ff fd01 	bl	800b65c <fwrite>
                  break;                  
 800bc5a:	f002 bf0a 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                case ESTTC_CMD_ACCSEL_2_ACESS: //0x03:
                  if(SEN_SUCCESS == AIS328DQ_ReadReg(AIS328DQ_2_MEMS_I2C_ADDRESS, txline[Interface][6], (uint8_t *)&txline[Interface][7])) {
 800bc5e:	79fb      	ldrb	r3, [r7, #7]
 800bc60:	4a74      	ldr	r2, [pc, #464]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bc62:	021b      	lsls	r3, r3, #8
 800bc64:	4413      	add	r3, r2
 800bc66:	3306      	adds	r3, #6
 800bc68:	7819      	ldrb	r1, [r3, #0]
 800bc6a:	79fb      	ldrb	r3, [r7, #7]
 800bc6c:	021b      	lsls	r3, r3, #8
 800bc6e:	3307      	adds	r3, #7
 800bc70:	4a70      	ldr	r2, [pc, #448]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bc72:	4413      	add	r3, r2
 800bc74:	461a      	mov	r2, r3
 800bc76:	2032      	movs	r0, #50	; 0x32
 800bc78:	f7fe fca8 	bl	800a5cc <AIS328DQ_ReadReg>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d125      	bne.n	800bcce <ESTTC_ProcessData+0x4e6>
                    fprintf(ComInterface, "OK+2%02X/%02X\r", txline[Interface][6], txline[Interface][7]);
 800bc82:	79fb      	ldrb	r3, [r7, #7]
 800bc84:	4a6b      	ldr	r2, [pc, #428]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bc86:	021b      	lsls	r3, r3, #8
 800bc88:	4413      	add	r3, r2
 800bc8a:	3306      	adds	r3, #6
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	79fb      	ldrb	r3, [r7, #7]
 800bc92:	4a68      	ldr	r2, [pc, #416]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bc94:	021b      	lsls	r3, r3, #8
 800bc96:	4413      	add	r3, r2
 800bc98:	3307      	adds	r3, #7
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	460a      	mov	r2, r1
 800bc9e:	496c      	ldr	r1, [pc, #432]	; (800be50 <ESTTC_ProcessData+0x668>)
 800bca0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bca2:	f00b facb 	bl	801723c <fiprintf>
                    fprintf(ComInterface, "Accelerometer 2 register %X, has value %X\r", txline[Interface][6], txline[Interface][7]);
 800bca6:	79fb      	ldrb	r3, [r7, #7]
 800bca8:	4a62      	ldr	r2, [pc, #392]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bcaa:	021b      	lsls	r3, r3, #8
 800bcac:	4413      	add	r3, r2
 800bcae:	3306      	adds	r3, #6
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	4a5f      	ldr	r2, [pc, #380]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bcb8:	021b      	lsls	r3, r3, #8
 800bcba:	4413      	add	r3, r2
 800bcbc:	3307      	adds	r3, #7
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	460a      	mov	r2, r1
 800bcc2:	4964      	ldr	r1, [pc, #400]	; (800be54 <ESTTC_ProcessData+0x66c>)
 800bcc4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bcc6:	f00b fab9 	bl	801723c <fiprintf>
                  }
                  else
                    fprintf(ComInterface, "ERR - Not valid parameters!\r");
                  break;
 800bcca:	f002 bed2 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    fprintf(ComInterface, "ERR - Not valid parameters!\r");
 800bcce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcd0:	221c      	movs	r2, #28
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	485a      	ldr	r0, [pc, #360]	; (800be40 <ESTTC_ProcessData+0x658>)
 800bcd6:	f7ff fcc1 	bl	800b65c <fwrite>
                  break;
 800bcda:	f002 beca 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        else {  
                    fprintf(ComInterface, "OK+1%1.0f/%01.0f/%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
                        fprintf(ComInterface, "Magnetometer 1 - Magnetic field in specific rande X=%1.0f Y=%1.0f Z=%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
                        }
                #else   
                      if (Magnitometers_LIS3MDL_Read_Data(&B_raw, LIS3MDL_MAG_I2C_ADDRESS_LOW) != E_OK) {
 800bcde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bce2:	2138      	movs	r1, #56	; 0x38
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff fc47 	bl	800b578 <Magnitometers_LIS3MDL_Read_Data>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d009      	beq.n	800bd04 <ESTTC_ProcessData+0x51c>
                        I2C2_Reset();
 800bcf0:	f7f5 f9fa 	bl	80010e8 <I2C2_Reset>
                        fprintf(ComInterface, "ERR exe\r");
 800bcf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcf6:	2208      	movs	r2, #8
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	4857      	ldr	r0, [pc, #348]	; (800be58 <ESTTC_ProcessData+0x670>)
 800bcfc:	f7ff fcae 	bl	800b65c <fwrite>
                      else    {  
                        fprintf(ComInterface, "OK+1%1.0f/%01.0f/%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
                        fprintf(ComInterface, "Magnetometer 1 - Magnetic field in specific rande X=%1.0f Y=%1.0f Z=%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
                      }  
                #endif        
                  break;                  
 800bd00:	f002 beb7 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        fprintf(ComInterface, "OK+1%1.0f/%01.0f/%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
 800bd04:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800bd08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bd0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bd10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd14:	e9cd 2300 	strd	r2, r3, [sp]
 800bd18:	4622      	mov	r2, r4
 800bd1a:	462b      	mov	r3, r5
 800bd1c:	494f      	ldr	r1, [pc, #316]	; (800be5c <ESTTC_ProcessData+0x674>)
 800bd1e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bd20:	f00b fa8c 	bl	801723c <fiprintf>
                        fprintf(ComInterface, "Magnetometer 1 - Magnetic field in specific rande X=%1.0f Y=%1.0f Z=%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
 800bd24:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800bd28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bd2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bd30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd34:	e9cd 2300 	strd	r2, r3, [sp]
 800bd38:	4622      	mov	r2, r4
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	4948      	ldr	r1, [pc, #288]	; (800be60 <ESTTC_ProcessData+0x678>)
 800bd3e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bd40:	f00b fa7c 	bl	801723c <fiprintf>
                  break;                  
 800bd44:	f002 be95 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    fprintf(ComInterface, "OK+");
                    for (i = 0; i < txline[Interface][8]; i++) fprintf(ComInterface, "%02X", txline[Interface][9+i]);
                    fprintf(ComInterface, "\r");
                  }
                #else                   
                  if (SEN_SUCCESS == LIS3MDL_MAG_ReadReg(LIS3MDL_MAG_I2C_ADDRESS_LOW, txline[Interface][6], (uint8_t *) &txline[Interface][7])) {
 800bd48:	79fb      	ldrb	r3, [r7, #7]
 800bd4a:	4a3a      	ldr	r2, [pc, #232]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bd4c:	021b      	lsls	r3, r3, #8
 800bd4e:	4413      	add	r3, r2
 800bd50:	3306      	adds	r3, #6
 800bd52:	7819      	ldrb	r1, [r3, #0]
 800bd54:	79fb      	ldrb	r3, [r7, #7]
 800bd56:	021b      	lsls	r3, r3, #8
 800bd58:	3307      	adds	r3, #7
 800bd5a:	4a36      	ldr	r2, [pc, #216]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bd5c:	4413      	add	r3, r2
 800bd5e:	461a      	mov	r2, r3
 800bd60:	2038      	movs	r0, #56	; 0x38
 800bd62:	f7fe faf7 	bl	800a354 <LIS3MDL_MAG_ReadReg>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d125      	bne.n	800bdb8 <ESTTC_ProcessData+0x5d0>
                    fprintf(ComInterface, "OK+1%02X/%02X\r", txline[Interface][6], txline[Interface][7]);
 800bd6c:	79fb      	ldrb	r3, [r7, #7]
 800bd6e:	4a31      	ldr	r2, [pc, #196]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bd70:	021b      	lsls	r3, r3, #8
 800bd72:	4413      	add	r3, r2
 800bd74:	3306      	adds	r3, #6
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	79fb      	ldrb	r3, [r7, #7]
 800bd7c:	4a2d      	ldr	r2, [pc, #180]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bd7e:	021b      	lsls	r3, r3, #8
 800bd80:	4413      	add	r3, r2
 800bd82:	3307      	adds	r3, #7
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	460a      	mov	r2, r1
 800bd88:	492b      	ldr	r1, [pc, #172]	; (800be38 <ESTTC_ProcessData+0x650>)
 800bd8a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bd8c:	f00b fa56 	bl	801723c <fiprintf>
                    fprintf(ComInterface, "Magnetometer 1 reg No %d has value %d\r", txline[Interface][6], txline[Interface][7]);
 800bd90:	79fb      	ldrb	r3, [r7, #7]
 800bd92:	4a28      	ldr	r2, [pc, #160]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bd94:	021b      	lsls	r3, r3, #8
 800bd96:	4413      	add	r3, r2
 800bd98:	3306      	adds	r3, #6
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	4a24      	ldr	r2, [pc, #144]	; (800be34 <ESTTC_ProcessData+0x64c>)
 800bda2:	021b      	lsls	r3, r3, #8
 800bda4:	4413      	add	r3, r2
 800bda6:	3307      	adds	r3, #7
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	460a      	mov	r2, r1
 800bdac:	492d      	ldr	r1, [pc, #180]	; (800be64 <ESTTC_ProcessData+0x67c>)
 800bdae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bdb0:	f00b fa44 	bl	801723c <fiprintf>
                  }
                #endif  
                  else
                    fprintf(ComInterface, "ERR exe\r");
                  break;
 800bdb4:	f002 be5d 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    fprintf(ComInterface, "ERR exe\r");
 800bdb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdba:	2208      	movs	r2, #8
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	4826      	ldr	r0, [pc, #152]	; (800be58 <ESTTC_ProcessData+0x670>)
 800bdc0:	f7ff fc4c 	bl	800b65c <fwrite>
                  break;
 800bdc4:	f002 be55 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                                          E_30HZ,
                                          E_MEAS_AVG_8);                  
                      if (Magnitometers_Read_Data (&B_raw, E_810uT) != E_OK) fprintf(ComInterface, "ERR exe\r");
                      else fprintf(ComInterface, "Magnetometer 2 -  Magnetic field in specific rande X=%1.0f Y=%1.0f Z=%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
                #else   
                      Magnitometers_LIS3MDL_Init(LIS3MDL_MAG_I2C_ADDRESS_HIGH);
 800bdc8:	203c      	movs	r0, #60	; 0x3c
 800bdca:	f7ff fb99 	bl	800b500 <Magnitometers_LIS3MDL_Init>
                      if (Magnitometers_LIS3MDL_Read_Data(&B_raw, LIS3MDL_MAG_I2C_ADDRESS_HIGH) != E_OK) fprintf(ComInterface, "ERR exe\r");
 800bdce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bdd2:	213c      	movs	r1, #60	; 0x3c
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7ff fbcf 	bl	800b578 <Magnitometers_LIS3MDL_Read_Data>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d007      	beq.n	800bdf0 <ESTTC_ProcessData+0x608>
 800bde0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bde2:	2208      	movs	r2, #8
 800bde4:	2101      	movs	r1, #1
 800bde6:	481c      	ldr	r0, [pc, #112]	; (800be58 <ESTTC_ProcessData+0x670>)
 800bde8:	f7ff fc38 	bl	800b65c <fwrite>
                      else {
                        fprintf(ComInterface, "OK+2%1.0f/%01.0f/%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
                        fprintf(ComInterface, "Magnetometer 2 -  Magnetic field in specific rande X=%1.0f Y=%1.0f Z=%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
                      }                         
                #endif        
                  break;      
 800bdec:	f002 be41 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        fprintf(ComInterface, "OK+2%1.0f/%01.0f/%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
 800bdf0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800bdf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bdf8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bdfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be00:	e9cd 2300 	strd	r2, r3, [sp]
 800be04:	4622      	mov	r2, r4
 800be06:	462b      	mov	r3, r5
 800be08:	4917      	ldr	r1, [pc, #92]	; (800be68 <ESTTC_ProcessData+0x680>)
 800be0a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800be0c:	f00b fa16 	bl	801723c <fiprintf>
                        fprintf(ComInterface, "Magnetometer 2 -  Magnetic field in specific rande X=%1.0f Y=%1.0f Z=%1.0f\r", B_raw.AXIS_X, B_raw.AXIS_Y, B_raw.AXIS_Z);
 800be10:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800be14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be18:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800be1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be20:	e9cd 2300 	strd	r2, r3, [sp]
 800be24:	4622      	mov	r2, r4
 800be26:	462b      	mov	r3, r5
 800be28:	4910      	ldr	r1, [pc, #64]	; (800be6c <ESTTC_ProcessData+0x684>)
 800be2a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800be2c:	f00b fa06 	bl	801723c <fiprintf>
                  break;      
 800be30:	f002 be1f 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800be34:	20000464 	.word	0x20000464
 800be38:	0801ac44 	.word	0x0801ac44
 800be3c:	0801ac54 	.word	0x0801ac54
 800be40:	0801ac80 	.word	0x0801ac80
 800be44:	0801aca0 	.word	0x0801aca0
 800be48:	0801acb0 	.word	0x0801acb0
 800be4c:	0801acd0 	.word	0x0801acd0
 800be50:	0801ad24 	.word	0x0801ad24
 800be54:	0801ad34 	.word	0x0801ad34
 800be58:	0801ad60 	.word	0x0801ad60
 800be5c:	0801ad6c 	.word	0x0801ad6c
 800be60:	0801ad84 	.word	0x0801ad84
 800be64:	0801add0 	.word	0x0801add0
 800be68:	0801adf8 	.word	0x0801adf8
 800be6c:	0801ae10 	.word	0x0801ae10
                    fprintf(ComInterface, "OK+");
                    for (i = 0; i < txline[Interface][8]; i++) fprintf(ComInterface, "%02X", txline[Interface][9+i]);
                    fprintf(ComInterface, "\r");
                  }
                #else                 
                  if (SEN_SUCCESS == LIS3MDL_MAG_ReadReg(LIS3MDL_MAG_I2C_ADDRESS_HIGH, txline[Interface][6], (uint8_t *) &txline[Interface][7])) {
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	4ac4      	ldr	r2, [pc, #784]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800be74:	021b      	lsls	r3, r3, #8
 800be76:	4413      	add	r3, r2
 800be78:	3306      	adds	r3, #6
 800be7a:	7819      	ldrb	r1, [r3, #0]
 800be7c:	79fb      	ldrb	r3, [r7, #7]
 800be7e:	021b      	lsls	r3, r3, #8
 800be80:	3307      	adds	r3, #7
 800be82:	4ac0      	ldr	r2, [pc, #768]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800be84:	4413      	add	r3, r2
 800be86:	461a      	mov	r2, r3
 800be88:	203c      	movs	r0, #60	; 0x3c
 800be8a:	f7fe fa63 	bl	800a354 <LIS3MDL_MAG_ReadReg>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b01      	cmp	r3, #1
 800be92:	d125      	bne.n	800bee0 <ESTTC_ProcessData+0x6f8>
                    fprintf(ComInterface, "OK+2%02X/%02X\r", txline[Interface][6], txline[Interface][7]);
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	4abb      	ldr	r2, [pc, #748]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800be98:	021b      	lsls	r3, r3, #8
 800be9a:	4413      	add	r3, r2
 800be9c:	3306      	adds	r3, #6
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	4619      	mov	r1, r3
 800bea2:	79fb      	ldrb	r3, [r7, #7]
 800bea4:	4ab7      	ldr	r2, [pc, #732]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800bea6:	021b      	lsls	r3, r3, #8
 800bea8:	4413      	add	r3, r2
 800beaa:	3307      	adds	r3, #7
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	460a      	mov	r2, r1
 800beb0:	49b5      	ldr	r1, [pc, #724]	; (800c188 <ESTTC_ProcessData+0x9a0>)
 800beb2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800beb4:	f00b f9c2 	bl	801723c <fiprintf>
                    fprintf(ComInterface, "Magnetometer 2 reg No %d has value %d\r", txline[Interface][6], txline[Interface][7]);
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	4ab2      	ldr	r2, [pc, #712]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	4413      	add	r3, r2
 800bec0:	3306      	adds	r3, #6
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	4619      	mov	r1, r3
 800bec6:	79fb      	ldrb	r3, [r7, #7]
 800bec8:	4aae      	ldr	r2, [pc, #696]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800beca:	021b      	lsls	r3, r3, #8
 800becc:	4413      	add	r3, r2
 800bece:	3307      	adds	r3, #7
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	460a      	mov	r2, r1
 800bed4:	49ad      	ldr	r1, [pc, #692]	; (800c18c <ESTTC_ProcessData+0x9a4>)
 800bed6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bed8:	f00b f9b0 	bl	801723c <fiprintf>
                  }
                #endif  
                  else
                    fprintf(ComInterface, "ERR exe\r");
                  break;                 
 800bedc:	f002 bdc9 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    fprintf(ComInterface, "ERR exe\r");
 800bee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bee2:	2208      	movs	r2, #8
 800bee4:	2101      	movs	r1, #1
 800bee6:	48aa      	ldr	r0, [pc, #680]	; (800c190 <ESTTC_ProcessData+0x9a8>)
 800bee8:	f7ff fbb8 	bl	800b65c <fwrite>
                  break;                 
 800beec:	f002 bdc1 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                case ESTTC_CMD_GYR1_X_RADIO_DATA: //0x08:
                  if ((ADIS16265_GetAxesRate(&data) == SEN_SUCCESS) && (data.AXIS_X != 0x7FFF))   {  
 800bef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7ff f90f 	bl	800b118 <ADIS16265_GetAxesRate>
 800befa:	4603      	mov	r3, r0
 800befc:	2b01      	cmp	r3, #1
 800befe:	d115      	bne.n	800bf2c <ESTTC_ProcessData+0x744>
 800bf00:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bf04:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d00f      	beq.n	800bf2c <ESTTC_ProcessData+0x744>
                     fprintf(ComInterface, "OK+1%d\r", data.AXIS_X);
 800bf0c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bf10:	461a      	mov	r2, r3
 800bf12:	49a0      	ldr	r1, [pc, #640]	; (800c194 <ESTTC_ProcessData+0x9ac>)
 800bf14:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bf16:	f00b f991 	bl	801723c <fiprintf>
                     fprintf(ComInterface, "Gyroscope 1 Data X=%5d\r", data.AXIS_X);
 800bf1a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bf1e:	461a      	mov	r2, r3
 800bf20:	499d      	ldr	r1, [pc, #628]	; (800c198 <ESTTC_ProcessData+0x9b0>)
 800bf22:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bf24:	f00b f98a 	bl	801723c <fiprintf>
                  }
                  else fprintf(ComInterface, "ERR exe\r");
                break;
 800bf28:	f002 bda3 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else fprintf(ComInterface, "ERR exe\r");
 800bf2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf2e:	2208      	movs	r2, #8
 800bf30:	2101      	movs	r1, #1
 800bf32:	4897      	ldr	r0, [pc, #604]	; (800c190 <ESTTC_ProcessData+0x9a8>)
 800bf34:	f7ff fb92 	bl	800b65c <fwrite>
                break;
 800bf38:	f002 bd9b 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                case ESTTC_CMD_GYR1_X_ANGLE_DATA: //0x09:
                  if ((ADIS16265_GetAxesAngle(&data) == SEN_SUCCESS) && (data.AXIS_X != 0x7FFF))   { 
 800bf3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7ff f96f 	bl	800b224 <ADIS16265_GetAxesAngle>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d115      	bne.n	800bf78 <ESTTC_ProcessData+0x790>
 800bf4c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bf50:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00f      	beq.n	800bf78 <ESTTC_ProcessData+0x790>
                     fprintf(ComInterface, "OK+1%d\r", data.AXIS_X);
 800bf58:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	498d      	ldr	r1, [pc, #564]	; (800c194 <ESTTC_ProcessData+0x9ac>)
 800bf60:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bf62:	f00b f96b 	bl	801723c <fiprintf>
                     fprintf(ComInterface, "Gyroscope 1 Angle X=%5d\r", data.AXIS_X);
 800bf66:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	498b      	ldr	r1, [pc, #556]	; (800c19c <ESTTC_ProcessData+0x9b4>)
 800bf6e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bf70:	f00b f964 	bl	801723c <fiprintf>
                  }
                  else fprintf(ComInterface, "ERR exe\r");
                break;    
 800bf74:	f002 bd7d 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else fprintf(ComInterface, "ERR exe\r");
 800bf78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	4884      	ldr	r0, [pc, #528]	; (800c190 <ESTTC_ProcessData+0x9a8>)
 800bf80:	f7ff fb6c 	bl	800b65c <fwrite>
                break;    
 800bf84:	f002 bd75 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                
                case ESTTC_CMD_GYR1_X_AB_DATA: //0x0A:
                  if (ADIS16265_ReadReg16(txline[Interface][6], (uint16_t *)&utmp, PAN_X_M) == SEN_SUCCESS)   {
 800bf88:	79fb      	ldrb	r3, [r7, #7]
 800bf8a:	4a7e      	ldr	r2, [pc, #504]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800bf8c:	021b      	lsls	r3, r3, #8
 800bf8e:	4413      	add	r3, r2
 800bf90:	3306      	adds	r3, #6
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	f107 0156 	add.w	r1, r7, #86	; 0x56
 800bf98:	2203      	movs	r2, #3
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe fff8 	bl	800af90 <ADIS16265_ReadReg16>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d11b      	bne.n	800bfde <ESTTC_ProcessData+0x7f6>
                      fprintf(ComInterface, "OK+1%02X/%02X\r", txline[Interface][6], utmp);
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	4a76      	ldr	r2, [pc, #472]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800bfaa:	021b      	lsls	r3, r3, #8
 800bfac:	4413      	add	r3, r2
 800bfae:	3306      	adds	r3, #6
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bfb8:	4979      	ldr	r1, [pc, #484]	; (800c1a0 <ESTTC_ProcessData+0x9b8>)
 800bfba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bfbc:	f00b f93e 	bl	801723c <fiprintf>
                      fprintf(ComInterface, "Gyroscope 1 reg No %d has value %d\r", txline[Interface][6], utmp);
 800bfc0:	79fb      	ldrb	r3, [r7, #7]
 800bfc2:	4a70      	ldr	r2, [pc, #448]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800bfc4:	021b      	lsls	r3, r3, #8
 800bfc6:	4413      	add	r3, r2
 800bfc8:	3306      	adds	r3, #6
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bfd2:	4974      	ldr	r1, [pc, #464]	; (800c1a4 <ESTTC_ProcessData+0x9bc>)
 800bfd4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800bfd6:	f00b f931 	bl	801723c <fiprintf>
                  } 
                  else fprintf(ComInterface, "ERR exe\r");
                break;                               
 800bfda:	f002 bd4a 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else fprintf(ComInterface, "ERR exe\r");
 800bfde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfe0:	2208      	movs	r2, #8
 800bfe2:	2101      	movs	r1, #1
 800bfe4:	486a      	ldr	r0, [pc, #424]	; (800c190 <ESTTC_ProcessData+0x9a8>)
 800bfe6:	f7ff fb39 	bl	800b65c <fwrite>
                break;                               
 800bfea:	f002 bd42 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                
                case ESTTC_CMD_GYR2_Y_RADIO_DATA: //0x0B:
                  if ((ADIS16265_GetAxesRate(&data) == SEN_SUCCESS) && (data.AXIS_Y != 0x7FFF))   {   
 800bfee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff f890 	bl	800b118 <ADIS16265_GetAxesRate>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d115      	bne.n	800c02a <ESTTC_ProcessData+0x842>
 800bffe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800c002:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c006:	4293      	cmp	r3, r2
 800c008:	d00f      	beq.n	800c02a <ESTTC_ProcessData+0x842>
                     fprintf(ComInterface, "OK+2%d\r", data.AXIS_Y);
 800c00a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800c00e:	461a      	mov	r2, r3
 800c010:	4965      	ldr	r1, [pc, #404]	; (800c1a8 <ESTTC_ProcessData+0x9c0>)
 800c012:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c014:	f00b f912 	bl	801723c <fiprintf>
                     fprintf(ComInterface, "Gyroscope 2 Data Y=%5d\r", data.AXIS_Y);
 800c018:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800c01c:	461a      	mov	r2, r3
 800c01e:	4963      	ldr	r1, [pc, #396]	; (800c1ac <ESTTC_ProcessData+0x9c4>)
 800c020:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c022:	f00b f90b 	bl	801723c <fiprintf>
                  }
                  else fprintf(ComInterface, "ERR exe\r");
                break;
 800c026:	f002 bd24 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else fprintf(ComInterface, "ERR exe\r");
 800c02a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c02c:	2208      	movs	r2, #8
 800c02e:	2101      	movs	r1, #1
 800c030:	4857      	ldr	r0, [pc, #348]	; (800c190 <ESTTC_ProcessData+0x9a8>)
 800c032:	f7ff fb13 	bl	800b65c <fwrite>
                break;
 800c036:	f002 bd1c 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                case ESTTC_CMD_GYR2_Y_ANGLE_DATA: //0x0C:
                  if ((ADIS16265_GetAxesAngle(&data) == SEN_SUCCESS) && (data.AXIS_Y != 0x7FFF))   {              
 800c03a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff f8f0 	bl	800b224 <ADIS16265_GetAxesAngle>
 800c044:	4603      	mov	r3, r0
 800c046:	2b01      	cmp	r3, #1
 800c048:	d115      	bne.n	800c076 <ESTTC_ProcessData+0x88e>
 800c04a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800c04e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c052:	4293      	cmp	r3, r2
 800c054:	d00f      	beq.n	800c076 <ESTTC_ProcessData+0x88e>
                     fprintf(ComInterface, "OK+2%d\r", data.AXIS_Y);
 800c056:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800c05a:	461a      	mov	r2, r3
 800c05c:	4952      	ldr	r1, [pc, #328]	; (800c1a8 <ESTTC_ProcessData+0x9c0>)
 800c05e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c060:	f00b f8ec 	bl	801723c <fiprintf>
                     fprintf(ComInterface, "Gyroscope 2 Angle Y=%5d\r", data.AXIS_Y);
 800c064:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800c068:	461a      	mov	r2, r3
 800c06a:	4951      	ldr	r1, [pc, #324]	; (800c1b0 <ESTTC_ProcessData+0x9c8>)
 800c06c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c06e:	f00b f8e5 	bl	801723c <fiprintf>
                  }
                  else fprintf(ComInterface, "ERR exe\r");
                break; 
 800c072:	f002 bcfe 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else fprintf(ComInterface, "ERR exe\r");
 800c076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c078:	2208      	movs	r2, #8
 800c07a:	2101      	movs	r1, #1
 800c07c:	4844      	ldr	r0, [pc, #272]	; (800c190 <ESTTC_ProcessData+0x9a8>)
 800c07e:	f7ff faed 	bl	800b65c <fwrite>
                break; 
 800c082:	f002 bcf6 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                
                case ESTTC_CMD_GYR2_Y_AB_DATA: //0x0D:
                  if (ADIS16265_ReadReg16(txline[Interface][6], (uint16_t *)&utmp, PAN_Y_M) == SEN_SUCCESS)   {
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	4a3e      	ldr	r2, [pc, #248]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800c08a:	021b      	lsls	r3, r3, #8
 800c08c:	4413      	add	r3, r2
 800c08e:	3306      	adds	r3, #6
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f107 0156 	add.w	r1, r7, #86	; 0x56
 800c096:	2204      	movs	r2, #4
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fe ff79 	bl	800af90 <ADIS16265_ReadReg16>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d11b      	bne.n	800c0dc <ESTTC_ProcessData+0x8f4>
                      fprintf(ComInterface, "OK+2%02X/%02X\r", txline[Interface][6], utmp);
 800c0a4:	79fb      	ldrb	r3, [r7, #7]
 800c0a6:	4a37      	ldr	r2, [pc, #220]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800c0a8:	021b      	lsls	r3, r3, #8
 800c0aa:	4413      	add	r3, r2
 800c0ac:	3306      	adds	r3, #6
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c0b6:	4934      	ldr	r1, [pc, #208]	; (800c188 <ESTTC_ProcessData+0x9a0>)
 800c0b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c0ba:	f00b f8bf 	bl	801723c <fiprintf>
                      fprintf(ComInterface, "Gyroscope 2 reg No %d has value %d\r", txline[Interface][6], utmp);
 800c0be:	79fb      	ldrb	r3, [r7, #7]
 800c0c0:	4a30      	ldr	r2, [pc, #192]	; (800c184 <ESTTC_ProcessData+0x99c>)
 800c0c2:	021b      	lsls	r3, r3, #8
 800c0c4:	4413      	add	r3, r2
 800c0c6:	3306      	adds	r3, #6
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c0d0:	4938      	ldr	r1, [pc, #224]	; (800c1b4 <ESTTC_ProcessData+0x9cc>)
 800c0d2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c0d4:	f00b f8b2 	bl	801723c <fiprintf>
                  } 
                  else fprintf(ComInterface, "ERR exe\r");
                break;
 800c0d8:	f002 bccb 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else fprintf(ComInterface, "ERR exe\r");
 800c0dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0de:	2208      	movs	r2, #8
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	482b      	ldr	r0, [pc, #172]	; (800c190 <ESTTC_ProcessData+0x9a8>)
 800c0e4:	f7ff faba 	bl	800b65c <fwrite>
                break;
 800c0e8:	f002 bcc3 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                
                case ESTTC_CMD_GYR3_Z_RADIO_DATA: //0x0E:
                  if ((ADIS16265_GetAxesRate(&data) == SEN_SUCCESS) && (data.AXIS_Z != 0x7FFF))   {    
 800c0ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff f811 	bl	800b118 <ADIS16265_GetAxesRate>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d115      	bne.n	800c128 <ESTTC_ProcessData+0x940>
 800c0fc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c100:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c104:	4293      	cmp	r3, r2
 800c106:	d00f      	beq.n	800c128 <ESTTC_ProcessData+0x940>
                     fprintf(ComInterface, "OK+3%d\r", data.AXIS_Z);
 800c108:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c10c:	461a      	mov	r2, r3
 800c10e:	492a      	ldr	r1, [pc, #168]	; (800c1b8 <ESTTC_ProcessData+0x9d0>)
 800c110:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c112:	f00b f893 	bl	801723c <fiprintf>
                     fprintf(ComInterface, "Gyroscope 3 Data Z=%5d\r", data.AXIS_Z);
 800c116:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c11a:	461a      	mov	r2, r3
 800c11c:	4927      	ldr	r1, [pc, #156]	; (800c1bc <ESTTC_ProcessData+0x9d4>)
 800c11e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c120:	f00b f88c 	bl	801723c <fiprintf>
                  }
                  else fprintf(ComInterface, "ERR exe\r");
                break;
 800c124:	f002 bca5 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else fprintf(ComInterface, "ERR exe\r");
 800c128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c12a:	2208      	movs	r2, #8
 800c12c:	2101      	movs	r1, #1
 800c12e:	4818      	ldr	r0, [pc, #96]	; (800c190 <ESTTC_ProcessData+0x9a8>)
 800c130:	f7ff fa94 	bl	800b65c <fwrite>
                break;
 800c134:	f002 bc9d 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                case ESTTC_CMD_GYR3_Z_ANGLE_DATA: //0x0F:
                  if ((ADIS16265_GetAxesAngle(&data) == SEN_SUCCESS) && (data.AXIS_Z != 0x7FFF))  {               
 800c138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff f871 	bl	800b224 <ADIS16265_GetAxesAngle>
 800c142:	4603      	mov	r3, r0
 800c144:	2b01      	cmp	r3, #1
 800c146:	d115      	bne.n	800c174 <ESTTC_ProcessData+0x98c>
 800c148:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c14c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c150:	4293      	cmp	r3, r2
 800c152:	d00f      	beq.n	800c174 <ESTTC_ProcessData+0x98c>
                     fprintf(ComInterface, "OK+3%d\r", data.AXIS_Z);
 800c154:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c158:	461a      	mov	r2, r3
 800c15a:	4917      	ldr	r1, [pc, #92]	; (800c1b8 <ESTTC_ProcessData+0x9d0>)
 800c15c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c15e:	f00b f86d 	bl	801723c <fiprintf>
                     fprintf(ComInterface, "Gyroscope 3 Angle Z=%5d\r", data.AXIS_Z);
 800c162:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800c166:	461a      	mov	r2, r3
 800c168:	4915      	ldr	r1, [pc, #84]	; (800c1c0 <ESTTC_ProcessData+0x9d8>)
 800c16a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c16c:	f00b f866 	bl	801723c <fiprintf>
                  }
                  else fprintf(ComInterface, "ERR exe\r");
                break;   
 800c170:	f002 bc7f 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else fprintf(ComInterface, "ERR exe\r");
 800c174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c176:	2208      	movs	r2, #8
 800c178:	2101      	movs	r1, #1
 800c17a:	4805      	ldr	r0, [pc, #20]	; (800c190 <ESTTC_ProcessData+0x9a8>)
 800c17c:	f7ff fa6e 	bl	800b65c <fwrite>
                break;   
 800c180:	f002 bc77 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800c184:	20000464 	.word	0x20000464
 800c188:	0801ad24 	.word	0x0801ad24
 800c18c:	0801ae5c 	.word	0x0801ae5c
 800c190:	0801ad60 	.word	0x0801ad60
 800c194:	0801ae84 	.word	0x0801ae84
 800c198:	0801ae8c 	.word	0x0801ae8c
 800c19c:	0801aea4 	.word	0x0801aea4
 800c1a0:	0801ac44 	.word	0x0801ac44
 800c1a4:	0801aec0 	.word	0x0801aec0
 800c1a8:	0801aee4 	.word	0x0801aee4
 800c1ac:	0801aeec 	.word	0x0801aeec
 800c1b0:	0801af04 	.word	0x0801af04
 800c1b4:	0801af20 	.word	0x0801af20
 800c1b8:	0801af44 	.word	0x0801af44
 800c1bc:	0801af4c 	.word	0x0801af4c
 800c1c0:	0801af64 	.word	0x0801af64
                
                case ESTTC_CMD_GYR4_Z_AB_DATA: //0x10:
                  if (ADIS16265_ReadReg16(txline[Interface][6], (uint16_t *)&utmp, PAN_Z_M) == SEN_SUCCESS)  {
 800c1c4:	79fb      	ldrb	r3, [r7, #7]
 800c1c6:	4abd      	ldr	r2, [pc, #756]	; (800c4bc <ESTTC_ProcessData+0xcd4>)
 800c1c8:	021b      	lsls	r3, r3, #8
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3306      	adds	r3, #6
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	f107 0156 	add.w	r1, r7, #86	; 0x56
 800c1d4:	2205      	movs	r2, #5
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe feda 	bl	800af90 <ADIS16265_ReadReg16>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d11b      	bne.n	800c21a <ESTTC_ProcessData+0xa32>
                      fprintf(ComInterface, "OK+3%02X/%02X\r", txline[Interface][6], utmp);
 800c1e2:	79fb      	ldrb	r3, [r7, #7]
 800c1e4:	4ab5      	ldr	r2, [pc, #724]	; (800c4bc <ESTTC_ProcessData+0xcd4>)
 800c1e6:	021b      	lsls	r3, r3, #8
 800c1e8:	4413      	add	r3, r2
 800c1ea:	3306      	adds	r3, #6
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c1f4:	49b2      	ldr	r1, [pc, #712]	; (800c4c0 <ESTTC_ProcessData+0xcd8>)
 800c1f6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c1f8:	f00b f820 	bl	801723c <fiprintf>
                      fprintf(ComInterface, "Gyroscope 3 reg No %d has value %d\r", txline[Interface][6], utmp);
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	4aaf      	ldr	r2, [pc, #700]	; (800c4bc <ESTTC_ProcessData+0xcd4>)
 800c200:	021b      	lsls	r3, r3, #8
 800c202:	4413      	add	r3, r2
 800c204:	3306      	adds	r3, #6
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	461a      	mov	r2, r3
 800c20a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c20e:	49ad      	ldr	r1, [pc, #692]	; (800c4c4 <ESTTC_ProcessData+0xcdc>)
 800c210:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c212:	f00b f813 	bl	801723c <fiprintf>
                  } 
                  else fprintf(ComInterface, "ERR exe\r");
                break;                    
 800c216:	f002 bc2c 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else fprintf(ComInterface, "ERR exe\r");
 800c21a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c21c:	2208      	movs	r2, #8
 800c21e:	2101      	movs	r1, #1
 800c220:	48a9      	ldr	r0, [pc, #676]	; (800c4c8 <ESTTC_ProcessData+0xce0>)
 800c222:	f7ff fa1b 	bl	800b65c <fwrite>
                break;                    
 800c226:	f002 bc24 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  
                case ESTTC_CMD_TEMP_PANEL_X_P: //0x14:
                  Panels_Init();
 800c22a:	f7fe fb67 	bl	800a8fc <Panels_Init>
                  if ((TMP122_GetTemperatureP(&tmperature_sens) == SEN_SUCCESS) && (PanelStat & (1<< PAN_X_P))) {
 800c22e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c232:	4618      	mov	r0, r3
 800c234:	f7ff f898 	bl	800b368 <TMP122_GetTemperatureP>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d13f      	bne.n	800c2be <ESTTC_ProcessData+0xad6>
 800c23e:	4ba3      	ldr	r3, [pc, #652]	; (800c4cc <ESTTC_ProcessData+0xce4>)
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	b2db      	uxtb	r3, r3
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d038      	beq.n	800c2be <ESTTC_ProcessData+0xad6>
                      tp = ((tmperature_sens.Temp_X/8)*10)/16;
 800c24c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c250:	2b00      	cmp	r3, #0
 800c252:	da00      	bge.n	800c256 <ESTTC_ProcessData+0xa6e>
 800c254:	3307      	adds	r3, #7
 800c256:	10db      	asrs	r3, r3, #3
 800c258:	b21b      	sxth	r3, r3
 800c25a:	461a      	mov	r2, r3
 800c25c:	4613      	mov	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	2b00      	cmp	r3, #0
 800c266:	da00      	bge.n	800c26a <ESTTC_ProcessData+0xa82>
 800c268:	330f      	adds	r3, #15
 800c26a:	111b      	asrs	r3, r3, #4
 800c26c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                      fprintf(ComInterface, "OK+1%04X\r",(uint16_t)tmperature_sens.Temp_X);
 800c270:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c274:	b29b      	uxth	r3, r3
 800c276:	461a      	mov	r2, r3
 800c278:	4995      	ldr	r1, [pc, #596]	; (800c4d0 <ESTTC_ProcessData+0xce8>)
 800c27a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c27c:	f00a ffde 	bl	801723c <fiprintf>
                      fprintf(ComInterface, "Temperature Panel 1 (PAN1) =%3d.%d\r", tp/10, tp%10);
 800c280:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800c284:	4a93      	ldr	r2, [pc, #588]	; (800c4d4 <ESTTC_ProcessData+0xcec>)
 800c286:	fb82 1203 	smull	r1, r2, r2, r3
 800c28a:	1092      	asrs	r2, r2, #2
 800c28c:	17db      	asrs	r3, r3, #31
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	b21b      	sxth	r3, r3
 800c292:	4618      	mov	r0, r3
 800c294:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800c298:	4b8e      	ldr	r3, [pc, #568]	; (800c4d4 <ESTTC_ProcessData+0xcec>)
 800c29a:	fb83 1302 	smull	r1, r3, r3, r2
 800c29e:	1099      	asrs	r1, r3, #2
 800c2a0:	17d3      	asrs	r3, r2, #31
 800c2a2:	1ac9      	subs	r1, r1, r3
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	440b      	add	r3, r1
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	b21b      	sxth	r3, r3
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	4989      	ldr	r1, [pc, #548]	; (800c4d8 <ESTTC_ProcessData+0xcf0>)
 800c2b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c2b6:	f00a ffc1 	bl	801723c <fiprintf>
                   } else
                      fprintf(ComInterface, "ERR - Panel 1 is not attached!\r");
                   break;
 800c2ba:	f002 bbda 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      fprintf(ComInterface, "ERR - Panel 1 is not attached!\r");
 800c2be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2c0:	221f      	movs	r2, #31
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	4885      	ldr	r0, [pc, #532]	; (800c4dc <ESTTC_ProcessData+0xcf4>)
 800c2c6:	f7ff f9c9 	bl	800b65c <fwrite>
                   break;
 800c2ca:	f002 bbd2 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  
                case ESTTC_CMD_TEMP_PANEL_Y_P: //0x15:
                  Panels_Init();
 800c2ce:	f7fe fb15 	bl	800a8fc <Panels_Init>
                  if ((TMP122_GetTemperatureP(&tmperature_sens) == SEN_SUCCESS) && (PanelStat & (1<< PAN_Y_P))) {
 800c2d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7ff f846 	bl	800b368 <TMP122_GetTemperatureP>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d13f      	bne.n	800c362 <ESTTC_ProcessData+0xb7a>
 800c2e2:	4b7a      	ldr	r3, [pc, #488]	; (800c4cc <ESTTC_ProcessData+0xce4>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	f003 0302 	and.w	r3, r3, #2
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d038      	beq.n	800c362 <ESTTC_ProcessData+0xb7a>
                      tp = ((tmperature_sens.Temp_Y/8)*10)/16;
 800c2f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da00      	bge.n	800c2fa <ESTTC_ProcessData+0xb12>
 800c2f8:	3307      	adds	r3, #7
 800c2fa:	10db      	asrs	r3, r3, #3
 800c2fc:	b21b      	sxth	r3, r3
 800c2fe:	461a      	mov	r2, r3
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	da00      	bge.n	800c30e <ESTTC_ProcessData+0xb26>
 800c30c:	330f      	adds	r3, #15
 800c30e:	111b      	asrs	r3, r3, #4
 800c310:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                      fprintf(ComInterface, "OK+2%04X\r",(uint16_t)tmperature_sens.Temp_Y);
 800c314:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c318:	b29b      	uxth	r3, r3
 800c31a:	461a      	mov	r2, r3
 800c31c:	4970      	ldr	r1, [pc, #448]	; (800c4e0 <ESTTC_ProcessData+0xcf8>)
 800c31e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c320:	f00a ff8c 	bl	801723c <fiprintf>
                      fprintf(ComInterface, "Temperature Panel 2 (PAN2) =%3d.%d\r", tp/10, tp%10);
 800c324:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800c328:	4a6a      	ldr	r2, [pc, #424]	; (800c4d4 <ESTTC_ProcessData+0xcec>)
 800c32a:	fb82 1203 	smull	r1, r2, r2, r3
 800c32e:	1092      	asrs	r2, r2, #2
 800c330:	17db      	asrs	r3, r3, #31
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	b21b      	sxth	r3, r3
 800c336:	4618      	mov	r0, r3
 800c338:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800c33c:	4b65      	ldr	r3, [pc, #404]	; (800c4d4 <ESTTC_ProcessData+0xcec>)
 800c33e:	fb83 1302 	smull	r1, r3, r3, r2
 800c342:	1099      	asrs	r1, r3, #2
 800c344:	17d3      	asrs	r3, r2, #31
 800c346:	1ac9      	subs	r1, r1, r3
 800c348:	460b      	mov	r3, r1
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	440b      	add	r3, r1
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	b21b      	sxth	r3, r3
 800c354:	4602      	mov	r2, r0
 800c356:	4963      	ldr	r1, [pc, #396]	; (800c4e4 <ESTTC_ProcessData+0xcfc>)
 800c358:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c35a:	f00a ff6f 	bl	801723c <fiprintf>
                   } else
                      fprintf(ComInterface, "ERR - Panel 2 is not attached!\r");
                   break;
 800c35e:	f002 bb88 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      fprintf(ComInterface, "ERR - Panel 2 is not attached!\r");
 800c362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c364:	221f      	movs	r2, #31
 800c366:	2101      	movs	r1, #1
 800c368:	485f      	ldr	r0, [pc, #380]	; (800c4e8 <ESTTC_ProcessData+0xd00>)
 800c36a:	f7ff f977 	bl	800b65c <fwrite>
                   break;
 800c36e:	f002 bb80 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                   
                case ESTTC_CMD_TEMP_PANEL_Z_P: //0x16:
                  Panels_Init();
 800c372:	f7fe fac3 	bl	800a8fc <Panels_Init>
                  if ((TMP122_GetTemperatureP(&tmperature_sens) == SEN_SUCCESS) && (PanelStat & (1<< PAN_Z_P))) {
 800c376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fe fff4 	bl	800b368 <TMP122_GetTemperatureP>
 800c380:	4603      	mov	r3, r0
 800c382:	2b01      	cmp	r3, #1
 800c384:	d13f      	bne.n	800c406 <ESTTC_ProcessData+0xc1e>
 800c386:	4b51      	ldr	r3, [pc, #324]	; (800c4cc <ESTTC_ProcessData+0xce4>)
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	f003 0304 	and.w	r3, r3, #4
 800c390:	2b00      	cmp	r3, #0
 800c392:	d038      	beq.n	800c406 <ESTTC_ProcessData+0xc1e>
                      tp = ((tmperature_sens.Temp_Z/8)*10)/16;
 800c394:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	da00      	bge.n	800c39e <ESTTC_ProcessData+0xbb6>
 800c39c:	3307      	adds	r3, #7
 800c39e:	10db      	asrs	r3, r3, #3
 800c3a0:	b21b      	sxth	r3, r3
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	005b      	lsls	r3, r3, #1
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	da00      	bge.n	800c3b2 <ESTTC_ProcessData+0xbca>
 800c3b0:	330f      	adds	r3, #15
 800c3b2:	111b      	asrs	r3, r3, #4
 800c3b4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                      fprintf(ComInterface, "OK+3%04X\r",(uint16_t)tmperature_sens.Temp_Z);
 800c3b8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	461a      	mov	r2, r3
 800c3c0:	494a      	ldr	r1, [pc, #296]	; (800c4ec <ESTTC_ProcessData+0xd04>)
 800c3c2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c3c4:	f00a ff3a 	bl	801723c <fiprintf>
                      fprintf(ComInterface, "Temperature Panel 3 (PAN3) =%3d.%d\r", tp/10, tp%10);
 800c3c8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800c3cc:	4a41      	ldr	r2, [pc, #260]	; (800c4d4 <ESTTC_ProcessData+0xcec>)
 800c3ce:	fb82 1203 	smull	r1, r2, r2, r3
 800c3d2:	1092      	asrs	r2, r2, #2
 800c3d4:	17db      	asrs	r3, r3, #31
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	b21b      	sxth	r3, r3
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800c3e0:	4b3c      	ldr	r3, [pc, #240]	; (800c4d4 <ESTTC_ProcessData+0xcec>)
 800c3e2:	fb83 1302 	smull	r1, r3, r3, r2
 800c3e6:	1099      	asrs	r1, r3, #2
 800c3e8:	17d3      	asrs	r3, r2, #31
 800c3ea:	1ac9      	subs	r1, r1, r3
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	440b      	add	r3, r1
 800c3f2:	005b      	lsls	r3, r3, #1
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	b21b      	sxth	r3, r3
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	493d      	ldr	r1, [pc, #244]	; (800c4f0 <ESTTC_ProcessData+0xd08>)
 800c3fc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c3fe:	f00a ff1d 	bl	801723c <fiprintf>
                   } else
                      fprintf(ComInterface, "ERR - Panel 3 is not attached!\r");
                   break;
 800c402:	f002 bb36 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      fprintf(ComInterface, "ERR - Panel 3 is not attached!\r");
 800c406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c408:	221f      	movs	r2, #31
 800c40a:	2101      	movs	r1, #1
 800c40c:	4839      	ldr	r0, [pc, #228]	; (800c4f4 <ESTTC_ProcessData+0xd0c>)
 800c40e:	f7ff f925 	bl	800b65c <fwrite>
                   break;
 800c412:	f002 bb2e 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                   
                case ESTTC_CMD_TEMP_PANEL_X_M: //0x17:
                  Panels_Init();
 800c416:	f7fe fa71 	bl	800a8fc <Panels_Init>
                  if ((TMP122_GetTemperatureM(&tmperature_sens) == SEN_SUCCESS) && (PanelStat & (1<< PAN_X_M))) {
 800c41a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c41e:	4618      	mov	r0, r3
 800c420:	f7ff f808 	bl	800b434 <TMP122_GetTemperatureM>
 800c424:	4603      	mov	r3, r0
 800c426:	2b01      	cmp	r3, #1
 800c428:	d13f      	bne.n	800c4aa <ESTTC_ProcessData+0xcc2>
 800c42a:	4b28      	ldr	r3, [pc, #160]	; (800c4cc <ESTTC_ProcessData+0xce4>)
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	f003 0308 	and.w	r3, r3, #8
 800c434:	2b00      	cmp	r3, #0
 800c436:	d038      	beq.n	800c4aa <ESTTC_ProcessData+0xcc2>
                      tp = ((tmperature_sens.Temp_X/8)*10)/16;
 800c438:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	da00      	bge.n	800c442 <ESTTC_ProcessData+0xc5a>
 800c440:	3307      	adds	r3, #7
 800c442:	10db      	asrs	r3, r3, #3
 800c444:	b21b      	sxth	r3, r3
 800c446:	461a      	mov	r2, r3
 800c448:	4613      	mov	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	4413      	add	r3, r2
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	2b00      	cmp	r3, #0
 800c452:	da00      	bge.n	800c456 <ESTTC_ProcessData+0xc6e>
 800c454:	330f      	adds	r3, #15
 800c456:	111b      	asrs	r3, r3, #4
 800c458:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                      fprintf(ComInterface, "OK+4%04X\r",(uint16_t)tmperature_sens.Temp_X);
 800c45c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c460:	b29b      	uxth	r3, r3
 800c462:	461a      	mov	r2, r3
 800c464:	4924      	ldr	r1, [pc, #144]	; (800c4f8 <ESTTC_ProcessData+0xd10>)
 800c466:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c468:	f00a fee8 	bl	801723c <fiprintf>
                      fprintf(ComInterface, "Temperature Panel 4 (PAN4) =%3d.%d\r", tp/10, tp%10);
 800c46c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800c470:	4a18      	ldr	r2, [pc, #96]	; (800c4d4 <ESTTC_ProcessData+0xcec>)
 800c472:	fb82 1203 	smull	r1, r2, r2, r3
 800c476:	1092      	asrs	r2, r2, #2
 800c478:	17db      	asrs	r3, r3, #31
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	b21b      	sxth	r3, r3
 800c47e:	4618      	mov	r0, r3
 800c480:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800c484:	4b13      	ldr	r3, [pc, #76]	; (800c4d4 <ESTTC_ProcessData+0xcec>)
 800c486:	fb83 1302 	smull	r1, r3, r3, r2
 800c48a:	1099      	asrs	r1, r3, #2
 800c48c:	17d3      	asrs	r3, r2, #31
 800c48e:	1ac9      	subs	r1, r1, r3
 800c490:	460b      	mov	r3, r1
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	440b      	add	r3, r1
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	b21b      	sxth	r3, r3
 800c49c:	4602      	mov	r2, r0
 800c49e:	4917      	ldr	r1, [pc, #92]	; (800c4fc <ESTTC_ProcessData+0xd14>)
 800c4a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c4a2:	f00a fecb 	bl	801723c <fiprintf>
                   } else
                      fprintf(ComInterface, "ERR - Panel 4 is not attached!\r");
                   break;
 800c4a6:	f002 bae4 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      fprintf(ComInterface, "ERR - Panel 4 is not attached!\r");
 800c4aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4ac:	221f      	movs	r2, #31
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	4813      	ldr	r0, [pc, #76]	; (800c500 <ESTTC_ProcessData+0xd18>)
 800c4b2:	f7ff f8d3 	bl	800b65c <fwrite>
                   break;
 800c4b6:	f002 badc 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800c4ba:	bf00      	nop
 800c4bc:	20000464 	.word	0x20000464
 800c4c0:	0801af80 	.word	0x0801af80
 800c4c4:	0801af90 	.word	0x0801af90
 800c4c8:	0801ad60 	.word	0x0801ad60
 800c4cc:	20000210 	.word	0x20000210
 800c4d0:	0801afb4 	.word	0x0801afb4
 800c4d4:	66666667 	.word	0x66666667
 800c4d8:	0801afc0 	.word	0x0801afc0
 800c4dc:	0801afe4 	.word	0x0801afe4
 800c4e0:	0801b004 	.word	0x0801b004
 800c4e4:	0801b010 	.word	0x0801b010
 800c4e8:	0801b034 	.word	0x0801b034
 800c4ec:	0801b054 	.word	0x0801b054
 800c4f0:	0801b060 	.word	0x0801b060
 800c4f4:	0801b084 	.word	0x0801b084
 800c4f8:	0801b0a4 	.word	0x0801b0a4
 800c4fc:	0801b0b0 	.word	0x0801b0b0
 800c500:	0801b0d4 	.word	0x0801b0d4
                  
                case ESTTC_CMD_TEMP_PANEL_Y_M: //0x18:
                  Panels_Init();
 800c504:	f7fe f9fa 	bl	800a8fc <Panels_Init>
                  if ((TMP122_GetTemperatureM(&tmperature_sens) == SEN_SUCCESS) && (PanelStat & (1<< PAN_Y_M))) {
 800c508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fe ff91 	bl	800b434 <TMP122_GetTemperatureM>
 800c512:	4603      	mov	r3, r0
 800c514:	2b01      	cmp	r3, #1
 800c516:	d13f      	bne.n	800c598 <ESTTC_ProcessData+0xdb0>
 800c518:	4bb8      	ldr	r3, [pc, #736]	; (800c7fc <ESTTC_ProcessData+0x1014>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	f003 0310 	and.w	r3, r3, #16
 800c522:	2b00      	cmp	r3, #0
 800c524:	d038      	beq.n	800c598 <ESTTC_ProcessData+0xdb0>
                      tp = ((tmperature_sens.Temp_Y/8)*10)/16;
 800c526:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	da00      	bge.n	800c530 <ESTTC_ProcessData+0xd48>
 800c52e:	3307      	adds	r3, #7
 800c530:	10db      	asrs	r3, r3, #3
 800c532:	b21b      	sxth	r3, r3
 800c534:	461a      	mov	r2, r3
 800c536:	4613      	mov	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	4413      	add	r3, r2
 800c53c:	005b      	lsls	r3, r3, #1
 800c53e:	2b00      	cmp	r3, #0
 800c540:	da00      	bge.n	800c544 <ESTTC_ProcessData+0xd5c>
 800c542:	330f      	adds	r3, #15
 800c544:	111b      	asrs	r3, r3, #4
 800c546:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                      fprintf(ComInterface, "OK+5%04X\r",(uint16_t)tmperature_sens.Temp_Y);
 800c54a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c54e:	b29b      	uxth	r3, r3
 800c550:	461a      	mov	r2, r3
 800c552:	49ab      	ldr	r1, [pc, #684]	; (800c800 <ESTTC_ProcessData+0x1018>)
 800c554:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c556:	f00a fe71 	bl	801723c <fiprintf>
                      fprintf(ComInterface, "Temperature Panel 5 (PAN5) =%3d.%d\r", tp/10, tp%10);
 800c55a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800c55e:	4aa9      	ldr	r2, [pc, #676]	; (800c804 <ESTTC_ProcessData+0x101c>)
 800c560:	fb82 1203 	smull	r1, r2, r2, r3
 800c564:	1092      	asrs	r2, r2, #2
 800c566:	17db      	asrs	r3, r3, #31
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	b21b      	sxth	r3, r3
 800c56c:	4618      	mov	r0, r3
 800c56e:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800c572:	4ba4      	ldr	r3, [pc, #656]	; (800c804 <ESTTC_ProcessData+0x101c>)
 800c574:	fb83 1302 	smull	r1, r3, r3, r2
 800c578:	1099      	asrs	r1, r3, #2
 800c57a:	17d3      	asrs	r3, r2, #31
 800c57c:	1ac9      	subs	r1, r1, r3
 800c57e:	460b      	mov	r3, r1
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	440b      	add	r3, r1
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	b21b      	sxth	r3, r3
 800c58a:	4602      	mov	r2, r0
 800c58c:	499e      	ldr	r1, [pc, #632]	; (800c808 <ESTTC_ProcessData+0x1020>)
 800c58e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c590:	f00a fe54 	bl	801723c <fiprintf>
                   } else
                      fprintf(ComInterface, "ERR - Panel 5 is not attached!\r");
                   break;
 800c594:	f002 ba6d 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      fprintf(ComInterface, "ERR - Panel 5 is not attached!\r");
 800c598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c59a:	221f      	movs	r2, #31
 800c59c:	2101      	movs	r1, #1
 800c59e:	489b      	ldr	r0, [pc, #620]	; (800c80c <ESTTC_ProcessData+0x1024>)
 800c5a0:	f7ff f85c 	bl	800b65c <fwrite>
                   break;
 800c5a4:	f002 ba65 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                   
                case ESTTC_CMD_TEMP_PANEL_Z_M: //0x19:
                  Panels_Init();
 800c5a8:	f7fe f9a8 	bl	800a8fc <Panels_Init>
                  if ((TMP122_GetTemperatureM(&tmperature_sens) == SEN_SUCCESS) && (PanelStat & (1<< PAN_Z_M))) {
 800c5ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fe ff3f 	bl	800b434 <TMP122_GetTemperatureM>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d13f      	bne.n	800c63c <ESTTC_ProcessData+0xe54>
 800c5bc:	4b8f      	ldr	r3, [pc, #572]	; (800c7fc <ESTTC_ProcessData+0x1014>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	f003 0320 	and.w	r3, r3, #32
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d038      	beq.n	800c63c <ESTTC_ProcessData+0xe54>
                      tp = ((tmperature_sens.Temp_Z/8)*10)/16;
 800c5ca:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	da00      	bge.n	800c5d4 <ESTTC_ProcessData+0xdec>
 800c5d2:	3307      	adds	r3, #7
 800c5d4:	10db      	asrs	r3, r3, #3
 800c5d6:	b21b      	sxth	r3, r3
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4613      	mov	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	da00      	bge.n	800c5e8 <ESTTC_ProcessData+0xe00>
 800c5e6:	330f      	adds	r3, #15
 800c5e8:	111b      	asrs	r3, r3, #4
 800c5ea:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                      fprintf(ComInterface, "OK+6%04X\r",(uint16_t)tmperature_sens.Temp_Z);
 800c5ee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	4986      	ldr	r1, [pc, #536]	; (800c810 <ESTTC_ProcessData+0x1028>)
 800c5f8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c5fa:	f00a fe1f 	bl	801723c <fiprintf>
                      fprintf(ComInterface, "Temperature Panel 6 (PAN6) =%3d.%d\r", tp/10, tp%10);
 800c5fe:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800c602:	4a80      	ldr	r2, [pc, #512]	; (800c804 <ESTTC_ProcessData+0x101c>)
 800c604:	fb82 1203 	smull	r1, r2, r2, r3
 800c608:	1092      	asrs	r2, r2, #2
 800c60a:	17db      	asrs	r3, r3, #31
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	b21b      	sxth	r3, r3
 800c610:	4618      	mov	r0, r3
 800c612:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800c616:	4b7b      	ldr	r3, [pc, #492]	; (800c804 <ESTTC_ProcessData+0x101c>)
 800c618:	fb83 1302 	smull	r1, r3, r3, r2
 800c61c:	1099      	asrs	r1, r3, #2
 800c61e:	17d3      	asrs	r3, r2, #31
 800c620:	1ac9      	subs	r1, r1, r3
 800c622:	460b      	mov	r3, r1
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	440b      	add	r3, r1
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	b21b      	sxth	r3, r3
 800c62e:	4602      	mov	r2, r0
 800c630:	4978      	ldr	r1, [pc, #480]	; (800c814 <ESTTC_ProcessData+0x102c>)
 800c632:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c634:	f00a fe02 	bl	801723c <fiprintf>
                   } else
                      fprintf(ComInterface, "ERR - Panel 6 is not attached!\r");
                   break;                                     
 800c638:	f002 ba1b 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      fprintf(ComInterface, "ERR - Panel 6 is not attached!\r");
 800c63c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c63e:	221f      	movs	r2, #31
 800c640:	2101      	movs	r1, #1
 800c642:	4875      	ldr	r0, [pc, #468]	; (800c818 <ESTTC_ProcessData+0x1030>)
 800c644:	f7ff f80a 	bl	800b65c <fwrite>
                   break;                                     
 800c648:	f002 ba13 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                case ESTTC_CMD_PHOTO_PANEL_1: //0x1A:
                   Panel_GetPhotodiodesLum();
 800c64c:	f7fe faee 	bl	800ac2c <Panel_GetPhotodiodesLum>
                   fprintf(ComInterface, "OK+1%02X\r", PanelLight[0]);
 800c650:	4b72      	ldr	r3, [pc, #456]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	461a      	mov	r2, r3
 800c656:	4972      	ldr	r1, [pc, #456]	; (800c820 <ESTTC_ProcessData+0x1038>)
 800c658:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c65a:	f00a fdef 	bl	801723c <fiprintf>
                   fprintf(ComInterface, "Panel Light 1 (PAN1) =%4u\r ", PanelLight[0]);
 800c65e:	4b6f      	ldr	r3, [pc, #444]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	461a      	mov	r2, r3
 800c664:	496f      	ldr	r1, [pc, #444]	; (800c824 <ESTTC_ProcessData+0x103c>)
 800c666:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c668:	f00a fde8 	bl	801723c <fiprintf>
                   break;
 800c66c:	f002 ba01 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                   
                case ESTTC_CMD_PHOTO_PANEL_2: //0x1B:
                   Panel_GetPhotodiodesLum();
 800c670:	f7fe fadc 	bl	800ac2c <Panel_GetPhotodiodesLum>
                   fprintf(ComInterface, "OK+2%02X\r", PanelLight[1]);
 800c674:	4b69      	ldr	r3, [pc, #420]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c676:	885b      	ldrh	r3, [r3, #2]
 800c678:	461a      	mov	r2, r3
 800c67a:	496b      	ldr	r1, [pc, #428]	; (800c828 <ESTTC_ProcessData+0x1040>)
 800c67c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c67e:	f00a fddd 	bl	801723c <fiprintf>
                   fprintf(ComInterface, "Panel Light 2 (PAN2) =%4u\r ", PanelLight[1]);
 800c682:	4b66      	ldr	r3, [pc, #408]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c684:	885b      	ldrh	r3, [r3, #2]
 800c686:	461a      	mov	r2, r3
 800c688:	4968      	ldr	r1, [pc, #416]	; (800c82c <ESTTC_ProcessData+0x1044>)
 800c68a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c68c:	f00a fdd6 	bl	801723c <fiprintf>
                   break;
 800c690:	f002 b9ef 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                   
                case ESTTC_CMD_PHOTO_PANEL_3: //0x1C:
                   Panel_GetPhotodiodesLum();
 800c694:	f7fe faca 	bl	800ac2c <Panel_GetPhotodiodesLum>
                   fprintf(ComInterface, "OK+3%02X\r", PanelLight[2]);
 800c698:	4b60      	ldr	r3, [pc, #384]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c69a:	889b      	ldrh	r3, [r3, #4]
 800c69c:	461a      	mov	r2, r3
 800c69e:	4964      	ldr	r1, [pc, #400]	; (800c830 <ESTTC_ProcessData+0x1048>)
 800c6a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c6a2:	f00a fdcb 	bl	801723c <fiprintf>
                   fprintf(ComInterface, "Panel Light 3 (PAN3) =%4u\r ", PanelLight[2]);
 800c6a6:	4b5d      	ldr	r3, [pc, #372]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c6a8:	889b      	ldrh	r3, [r3, #4]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	4961      	ldr	r1, [pc, #388]	; (800c834 <ESTTC_ProcessData+0x104c>)
 800c6ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c6b0:	f00a fdc4 	bl	801723c <fiprintf>
                   break;
 800c6b4:	f002 b9dd 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                                     
                case ESTTC_CMD_PHOTO_PANEL_4: //0x1D:
                   Panel_GetPhotodiodesLum();
 800c6b8:	f7fe fab8 	bl	800ac2c <Panel_GetPhotodiodesLum>
                   fprintf(ComInterface, "OK+4%02X\r", PanelLight[3]);
 800c6bc:	4b57      	ldr	r3, [pc, #348]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c6be:	88db      	ldrh	r3, [r3, #6]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	495d      	ldr	r1, [pc, #372]	; (800c838 <ESTTC_ProcessData+0x1050>)
 800c6c4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c6c6:	f00a fdb9 	bl	801723c <fiprintf>
                   fprintf(ComInterface, "Panel Light 4 (PAN4) =%4u\r ", PanelLight[3]);
 800c6ca:	4b54      	ldr	r3, [pc, #336]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c6cc:	88db      	ldrh	r3, [r3, #6]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	495a      	ldr	r1, [pc, #360]	; (800c83c <ESTTC_ProcessData+0x1054>)
 800c6d2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c6d4:	f00a fdb2 	bl	801723c <fiprintf>
                   break;
 800c6d8:	f002 b9cb 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                                              
                case ESTTC_CMD_PHOTO_PANEL_5: //0x1E:
                   Panel_GetPhotodiodesLum();
 800c6dc:	f7fe faa6 	bl	800ac2c <Panel_GetPhotodiodesLum>
                   fprintf(ComInterface, "OK+5%02X\r", PanelLight[4]);
 800c6e0:	4b4e      	ldr	r3, [pc, #312]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c6e2:	891b      	ldrh	r3, [r3, #8]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4956      	ldr	r1, [pc, #344]	; (800c840 <ESTTC_ProcessData+0x1058>)
 800c6e8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c6ea:	f00a fda7 	bl	801723c <fiprintf>
                   fprintf(ComInterface, "Panel Light 5 (PAN5) =%4u\r ", PanelLight[4]);
 800c6ee:	4b4b      	ldr	r3, [pc, #300]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c6f0:	891b      	ldrh	r3, [r3, #8]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	4953      	ldr	r1, [pc, #332]	; (800c844 <ESTTC_ProcessData+0x105c>)
 800c6f6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c6f8:	f00a fda0 	bl	801723c <fiprintf>
                   break;
 800c6fc:	f002 b9b9 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                                              
                case ESTTC_CMD_PHOTO_PANEL_6: //0x1F:
                   Panel_GetPhotodiodesLum();
 800c700:	f7fe fa94 	bl	800ac2c <Panel_GetPhotodiodesLum>
                   fprintf(ComInterface, "OK+6%02X\r", PanelLight[5]);
 800c704:	4b45      	ldr	r3, [pc, #276]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c706:	895b      	ldrh	r3, [r3, #10]
 800c708:	461a      	mov	r2, r3
 800c70a:	494f      	ldr	r1, [pc, #316]	; (800c848 <ESTTC_ProcessData+0x1060>)
 800c70c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c70e:	f00a fd95 	bl	801723c <fiprintf>
                   fprintf(ComInterface, "Panel Light 6 (PAN6) =%4u\r ", PanelLight[5]);
 800c712:	4b42      	ldr	r3, [pc, #264]	; (800c81c <ESTTC_ProcessData+0x1034>)
 800c714:	895b      	ldrh	r3, [r3, #10]
 800c716:	461a      	mov	r2, r3
 800c718:	494c      	ldr	r1, [pc, #304]	; (800c84c <ESTTC_ProcessData+0x1064>)
 800c71a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c71c:	f00a fd8e 	bl	801723c <fiprintf>
                   break;
 800c720:	f002 b9a7 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                   
                case ESTTC_CMD_GET_TIME: //0x31:   // get time
                  if (HAL_OK == HAL_RTC_GetTime(&hrtc, &sTime, calendar_format))
 800c724:	4b4a      	ldr	r3, [pc, #296]	; (800c850 <ESTTC_ProcessData+0x1068>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	494a      	ldr	r1, [pc, #296]	; (800c854 <ESTTC_ProcessData+0x106c>)
 800c72c:	484a      	ldr	r0, [pc, #296]	; (800c858 <ESTTC_ProcessData+0x1070>)
 800c72e:	f7f8 ffcb 	bl	80056c8 <HAL_RTC_GetTime>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10e      	bne.n	800c756 <ESTTC_ProcessData+0xf6e>
                  {
                    fprintf(ComInterface, "OK TIME %02d:%02d:%02d  \r", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800c738:	4b46      	ldr	r3, [pc, #280]	; (800c854 <ESTTC_ProcessData+0x106c>)
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	461a      	mov	r2, r3
 800c73e:	4b45      	ldr	r3, [pc, #276]	; (800c854 <ESTTC_ProcessData+0x106c>)
 800c740:	785b      	ldrb	r3, [r3, #1]
 800c742:	4619      	mov	r1, r3
 800c744:	4b43      	ldr	r3, [pc, #268]	; (800c854 <ESTTC_ProcessData+0x106c>)
 800c746:	789b      	ldrb	r3, [r3, #2]
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	460b      	mov	r3, r1
 800c74c:	4943      	ldr	r1, [pc, #268]	; (800c85c <ESTTC_ProcessData+0x1074>)
 800c74e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c750:	f00a fd74 	bl	801723c <fiprintf>
 800c754:	e005      	b.n	800c762 <ESTTC_ProcessData+0xf7a>
                  }else{
                    fprintf(ComInterface, "ERR exe\r");
 800c756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c758:	2208      	movs	r2, #8
 800c75a:	2101      	movs	r1, #1
 800c75c:	4840      	ldr	r0, [pc, #256]	; (800c860 <ESTTC_ProcessData+0x1078>)
 800c75e:	f7fe ff7d 	bl	800b65c <fwrite>
                  }
                    HAL_RTC_GetDate(&hrtc, &sDate, calendar_format); // synchronization RTC date/time
 800c762:	4b3b      	ldr	r3, [pc, #236]	; (800c850 <ESTTC_ProcessData+0x1068>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	493e      	ldr	r1, [pc, #248]	; (800c864 <ESTTC_ProcessData+0x107c>)
 800c76a:	483b      	ldr	r0, [pc, #236]	; (800c858 <ESTTC_ProcessData+0x1070>)
 800c76c:	f7f9 f8bf 	bl	80058ee <HAL_RTC_GetDate>
                  break;
 800c770:	f002 b97f 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                case ESTTC_CMD_GET_DATA: //0x33:   // get date
                  if (HAL_OK == HAL_RTC_GetDate(&hrtc, &sDate, calendar_format))
 800c774:	4b36      	ldr	r3, [pc, #216]	; (800c850 <ESTTC_ProcessData+0x1068>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	461a      	mov	r2, r3
 800c77a:	493a      	ldr	r1, [pc, #232]	; (800c864 <ESTTC_ProcessData+0x107c>)
 800c77c:	4836      	ldr	r0, [pc, #216]	; (800c858 <ESTTC_ProcessData+0x1070>)
 800c77e:	f7f9 f8b6 	bl	80058ee <HAL_RTC_GetDate>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10f      	bne.n	800c7a8 <ESTTC_ProcessData+0xfc0>
                    fprintf(ComInterface, "OK DATE YY/MM/DD %d / %d / %d  \r", sDate.Year, sDate.Month, sDate.Date);
 800c788:	4b36      	ldr	r3, [pc, #216]	; (800c864 <ESTTC_ProcessData+0x107c>)
 800c78a:	78db      	ldrb	r3, [r3, #3]
 800c78c:	461a      	mov	r2, r3
 800c78e:	4b35      	ldr	r3, [pc, #212]	; (800c864 <ESTTC_ProcessData+0x107c>)
 800c790:	785b      	ldrb	r3, [r3, #1]
 800c792:	4619      	mov	r1, r3
 800c794:	4b33      	ldr	r3, [pc, #204]	; (800c864 <ESTTC_ProcessData+0x107c>)
 800c796:	789b      	ldrb	r3, [r3, #2]
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	460b      	mov	r3, r1
 800c79c:	4932      	ldr	r1, [pc, #200]	; (800c868 <ESTTC_ProcessData+0x1080>)
 800c79e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c7a0:	f00a fd4c 	bl	801723c <fiprintf>
                  else
                    fprintf(ComInterface, "ERR exe\r");
                  break;
 800c7a4:	f002 b965 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    fprintf(ComInterface, "ERR exe\r");
 800c7a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7aa:	2208      	movs	r2, #8
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	482c      	ldr	r0, [pc, #176]	; (800c860 <ESTTC_ProcessData+0x1078>)
 800c7b0:	f7fe ff54 	bl	800b65c <fwrite>
                  break;
 800c7b4:	f002 b95d 	b.w	800ea72 <ESTTC_ProcessData+0x328a>


                case ESTTC_CMD_PAR_NUM:   // get s/w version
                      if (*((__IO uint32_t*)MAILBOX_ADDRESS) == MAILBOX_VAL_APPL)
 800c7b8:	4b2c      	ldr	r3, [pc, #176]	; (800c86c <ESTTC_ProcessData+0x1084>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a2c      	ldr	r2, [pc, #176]	; (800c870 <ESTTC_ProcessData+0x1088>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d10f      	bne.n	800c7e2 <ESTTC_ProcessData+0xffa>
                      {
                    	  fprintf(ComInterface, "OK: SDK v.%d.%0d / APPL v.%d.%0d / <%s %s>\r",
 800c7c2:	4b2c      	ldr	r3, [pc, #176]	; (800c874 <ESTTC_ProcessData+0x108c>)
 800c7c4:	9303      	str	r3, [sp, #12]
 800c7c6:	4b2c      	ldr	r3, [pc, #176]	; (800c878 <ESTTC_ProcessData+0x1090>)
 800c7c8:	9302      	str	r3, [sp, #8]
 800c7ca:	2325      	movs	r3, #37	; 0x25
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	2325      	movs	r3, #37	; 0x25
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	4929      	ldr	r1, [pc, #164]	; (800c87c <ESTTC_ProcessData+0x1094>)
 800c7d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c7da:	f00a fd2f 	bl	801723c <fiprintf>
                      {
                    	  fprintf(ComInterface, "OK: BOOT v.%d.%0d / <%s %s>\r",
                    				verFW_MAJOR_REV_NB, verFW_MINOR_REV_NB,
                    			  __DATE__, __TIME__);
                      }
                  break;
 800c7de:	f002 b948 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    	  fprintf(ComInterface, "OK: BOOT v.%d.%0d / <%s %s>\r",
 800c7e2:	4b24      	ldr	r3, [pc, #144]	; (800c874 <ESTTC_ProcessData+0x108c>)
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	4b24      	ldr	r3, [pc, #144]	; (800c878 <ESTTC_ProcessData+0x1090>)
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	2325      	movs	r3, #37	; 0x25
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	4924      	ldr	r1, [pc, #144]	; (800c880 <ESTTC_ProcessData+0x1098>)
 800c7f0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c7f2:	f00a fd23 	bl	801723c <fiprintf>
                  break;
 800c7f6:	f002 b93c 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800c7fa:	bf00      	nop
 800c7fc:	20000210 	.word	0x20000210
 800c800:	0801b0f4 	.word	0x0801b0f4
 800c804:	66666667 	.word	0x66666667
 800c808:	0801b100 	.word	0x0801b100
 800c80c:	0801b124 	.word	0x0801b124
 800c810:	0801b144 	.word	0x0801b144
 800c814:	0801b150 	.word	0x0801b150
 800c818:	0801b174 	.word	0x0801b174
 800c81c:	20000214 	.word	0x20000214
 800c820:	0801b194 	.word	0x0801b194
 800c824:	0801b1a0 	.word	0x0801b1a0
 800c828:	0801b1bc 	.word	0x0801b1bc
 800c82c:	0801b1c8 	.word	0x0801b1c8
 800c830:	0801b1e4 	.word	0x0801b1e4
 800c834:	0801b1f0 	.word	0x0801b1f0
 800c838:	0801b20c 	.word	0x0801b20c
 800c83c:	0801b218 	.word	0x0801b218
 800c840:	0801b234 	.word	0x0801b234
 800c844:	0801b240 	.word	0x0801b240
 800c848:	0801b25c 	.word	0x0801b25c
 800c84c:	0801b268 	.word	0x0801b268
 800c850:	200084e0 	.word	0x200084e0
 800c854:	200096d8 	.word	0x200096d8
 800c858:	200098b0 	.word	0x200098b0
 800c85c:	0801b284 	.word	0x0801b284
 800c860:	0801ad60 	.word	0x0801ad60
 800c864:	200098ac 	.word	0x200098ac
 800c868:	0801b2a0 	.word	0x0801b2a0
 800c86c:	40002854 	.word	0x40002854
 800c870:	a552a552 	.word	0xa552a552
 800c874:	0801b2f0 	.word	0x0801b2f0
 800c878:	0801b2fc 	.word	0x0801b2fc
 800c87c:	0801b2c4 	.word	0x0801b2c4
 800c880:	0801b308 	.word	0x0801b308

                default:
                  if (txline[Interface][5] < ESTTC_CMD_PAR_NUM)
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	4a8f      	ldr	r2, [pc, #572]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c888:	021b      	lsls	r3, r3, #8
 800c88a:	4413      	add	r3, r2
 800c88c:	3305      	adds	r3, #5
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	2b7e      	cmp	r3, #126	; 0x7e
 800c892:	d80e      	bhi.n	800c8b2 <ESTTC_ProcessData+0x10ca>
                  {
                      txline[Interface][5] = ESTTC_CMD_PAR_NUM-1;
 800c894:	79fb      	ldrb	r3, [r7, #7]
 800c896:	4a8b      	ldr	r2, [pc, #556]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c898:	021b      	lsls	r3, r3, #8
 800c89a:	4413      	add	r3, r2
 800c89c:	3305      	adds	r3, #5
 800c89e:	227e      	movs	r2, #126	; 0x7e
 800c8a0:	701a      	strb	r2, [r3, #0]
                      fprintf(ComInterface, "ERR invalid number\r");
 800c8a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8a4:	2213      	movs	r2, #19
 800c8a6:	2101      	movs	r1, #1
 800c8a8:	4887      	ldr	r0, [pc, #540]	; (800cac8 <ESTTC_ProcessData+0x12e0>)
 800c8aa:	f7fe fed7 	bl	800b65c <fwrite>
                  }
                  else
                    fprintf(ComInterface, "ERR parm\r");
                  break;
 800c8ae:	f002 b8e0 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    fprintf(ComInterface, "ERR parm\r");
 800c8b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8b4:	2209      	movs	r2, #9
 800c8b6:	2101      	movs	r1, #1
 800c8b8:	4884      	ldr	r0, [pc, #528]	; (800cacc <ESTTC_ProcessData+0x12e4>)
 800c8ba:	f7fe fecf 	bl	800b65c <fwrite>
                  break;
 800c8be:	f002 b8d8 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
              }
            }
            else
            if (txline[Interface][4] == UHF_I2C_ADDRESS)
 800c8c2:	79fb      	ldrb	r3, [r7, #7]
 800c8c4:	4a7f      	ldr	r2, [pc, #508]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c8c6:	021b      	lsls	r3, r3, #8
 800c8c8:	4413      	add	r3, r2
 800c8ca:	3304      	adds	r3, #4
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b22      	cmp	r3, #34	; 0x22
 800c8d0:	d155      	bne.n	800c97e <ESTTC_ProcessData+0x1196>
            {
              switch(txline[Interface][5])
              {
                default:
                  if (txline[Interface][5] < UHF_MAX_PAR_NUM)
 800c8d2:	79fb      	ldrb	r3, [r7, #7]
 800c8d4:	4a7b      	ldr	r2, [pc, #492]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c8d6:	021b      	lsls	r3, r3, #8
 800c8d8:	4413      	add	r3, r2
 800c8da:	3305      	adds	r3, #5
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	2b07      	cmp	r3, #7
 800c8e0:	d845      	bhi.n	800c96e <ESTTC_ProcessData+0x1186>
                  {
                    if (HAL_OK == HAL_I2C_Mem_Read (&hi2c1, UHF_I2C_ADDRESS<<1, txline[Interface][5], 1, (uint8_t *)&txline[Interface][7], txline[Interface][6], 10))
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	4a77      	ldr	r2, [pc, #476]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c8e6:	021b      	lsls	r3, r3, #8
 800c8e8:	4413      	add	r3, r2
 800c8ea:	3305      	adds	r3, #5
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	b299      	uxth	r1, r3
 800c8f0:	79fb      	ldrb	r3, [r7, #7]
 800c8f2:	021b      	lsls	r3, r3, #8
 800c8f4:	3307      	adds	r3, #7
 800c8f6:	4a73      	ldr	r2, [pc, #460]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c8f8:	4413      	add	r3, r2
 800c8fa:	79fa      	ldrb	r2, [r7, #7]
 800c8fc:	4871      	ldr	r0, [pc, #452]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c8fe:	0212      	lsls	r2, r2, #8
 800c900:	4402      	add	r2, r0
 800c902:	3206      	adds	r2, #6
 800c904:	7812      	ldrb	r2, [r2, #0]
 800c906:	b292      	uxth	r2, r2
 800c908:	200a      	movs	r0, #10
 800c90a:	9002      	str	r0, [sp, #8]
 800c90c:	9201      	str	r2, [sp, #4]
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	2301      	movs	r3, #1
 800c912:	460a      	mov	r2, r1
 800c914:	2144      	movs	r1, #68	; 0x44
 800c916:	486e      	ldr	r0, [pc, #440]	; (800cad0 <ESTTC_ProcessData+0x12e8>)
 800c918:	f7f7 f86e 	bl	80039f8 <HAL_I2C_Mem_Read>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f042 80a0 	bne.w	800ea64 <ESTTC_ProcessData+0x327c>
                    {
                      fprintf(ComInterface, "OK+%02X%02X%02X%02X\r", txline[Interface][7], txline[Interface][8], txline[Interface][9], txline[Interface][10]);
 800c924:	79fb      	ldrb	r3, [r7, #7]
 800c926:	4a67      	ldr	r2, [pc, #412]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c928:	021b      	lsls	r3, r3, #8
 800c92a:	4413      	add	r3, r2
 800c92c:	3307      	adds	r3, #7
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	4618      	mov	r0, r3
 800c932:	79fb      	ldrb	r3, [r7, #7]
 800c934:	4a63      	ldr	r2, [pc, #396]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c936:	021b      	lsls	r3, r3, #8
 800c938:	4413      	add	r3, r2
 800c93a:	3308      	adds	r3, #8
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	461c      	mov	r4, r3
 800c940:	79fb      	ldrb	r3, [r7, #7]
 800c942:	4a60      	ldr	r2, [pc, #384]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c944:	021b      	lsls	r3, r3, #8
 800c946:	4413      	add	r3, r2
 800c948:	3309      	adds	r3, #9
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	4619      	mov	r1, r3
 800c94e:	79fb      	ldrb	r3, [r7, #7]
 800c950:	4a5c      	ldr	r2, [pc, #368]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c952:	021b      	lsls	r3, r3, #8
 800c954:	4413      	add	r3, r2
 800c956:	330a      	adds	r3, #10
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	9301      	str	r3, [sp, #4]
 800c95c:	9100      	str	r1, [sp, #0]
 800c95e:	4623      	mov	r3, r4
 800c960:	4602      	mov	r2, r0
 800c962:	495c      	ldr	r1, [pc, #368]	; (800cad4 <ESTTC_ProcessData+0x12ec>)
 800c964:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c966:	f00a fc69 	bl	801723c <fiprintf>
                    }
                  }
                  else
                    fprintf(ComInterface, "ERR parm\r");
                  break;
 800c96a:	f002 b87b 	b.w	800ea64 <ESTTC_ProcessData+0x327c>
                    fprintf(ComInterface, "ERR parm\r");
 800c96e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c970:	2209      	movs	r2, #9
 800c972:	2101      	movs	r1, #1
 800c974:	4855      	ldr	r0, [pc, #340]	; (800cacc <ESTTC_ProcessData+0x12e4>)
 800c976:	f7fe fe71 	bl	800b65c <fwrite>
                  break;
 800c97a:	f002 b873 	b.w	800ea64 <ESTTC_ProcessData+0x327c>
              }
            }
            else
              fprintf(ComInterface, "ERR addr\r");
 800c97e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c980:	2209      	movs	r2, #9
 800c982:	2101      	movs	r1, #1
 800c984:	4854      	ldr	r0, [pc, #336]	; (800cad8 <ESTTC_ProcessData+0x12f0>)
 800c986:	f7fe fe69 	bl	800b65c <fwrite>
 800c98a:	f002 b872 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
          }
          else
          if (txline[Interface][3] == 'W')
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	4a4c      	ldr	r2, [pc, #304]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c992:	021b      	lsls	r3, r3, #8
 800c994:	4413      	add	r3, r2
 800c996:	3303      	adds	r3, #3
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b57      	cmp	r3, #87	; 0x57
 800c99c:	f040 868e 	bne.w	800d6bc <ESTTC_ProcessData+0x1ed4>
          {
            if (txline[Interface][4] == EPS_I2C_ADDRESS)
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	4a48      	ldr	r2, [pc, #288]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c9a4:	021b      	lsls	r3, r3, #8
 800c9a6:	4413      	add	r3, r2
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	2b18      	cmp	r3, #24
 800c9ae:	d148      	bne.n	800ca42 <ESTTC_ProcessData+0x125a>
            {
              if (txline[Interface][5] == EPS_OUT_PAR_NUM)
 800c9b0:	79fb      	ldrb	r3, [r7, #7]
 800c9b2:	4a44      	ldr	r2, [pc, #272]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c9b4:	021b      	lsls	r3, r3, #8
 800c9b6:	4413      	add	r3, r2
 800c9b8:	3305      	adds	r3, #5
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b18      	cmp	r3, #24
 800c9be:	d138      	bne.n	800ca32 <ESTTC_ProcessData+0x124a>
              {
                if (txline[Interface][6] == ((len-10)/2))
 800c9c0:	79fb      	ldrb	r3, [r7, #7]
 800c9c2:	4a40      	ldr	r2, [pc, #256]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c9c4:	021b      	lsls	r3, r3, #8
 800c9c6:	4413      	add	r3, r2
 800c9c8:	3306      	adds	r3, #6
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9d0:	3b0a      	subs	r3, #10
 800c9d2:	085b      	lsrs	r3, r3, #1
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d124      	bne.n	800ca22 <ESTTC_ProcessData+0x123a>
                {
                  if (HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, EPS_I2C_ADDRESS<<1, (uint8_t *)&txline[Interface][7], txline[Interface][6], 10))
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	021b      	lsls	r3, r3, #8
 800c9dc:	3307      	adds	r3, #7
 800c9de:	4a39      	ldr	r2, [pc, #228]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c9e0:	441a      	add	r2, r3
 800c9e2:	79fb      	ldrb	r3, [r7, #7]
 800c9e4:	4937      	ldr	r1, [pc, #220]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800c9e6:	021b      	lsls	r3, r3, #8
 800c9e8:	440b      	add	r3, r1
 800c9ea:	3306      	adds	r3, #6
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	210a      	movs	r1, #10
 800c9f2:	9100      	str	r1, [sp, #0]
 800c9f4:	2130      	movs	r1, #48	; 0x30
 800c9f6:	4836      	ldr	r0, [pc, #216]	; (800cad0 <ESTTC_ProcessData+0x12e8>)
 800c9f8:	f7f6 fbb6 	bl	8003168 <HAL_I2C_Master_Transmit>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d107      	bne.n	800ca12 <ESTTC_ProcessData+0x122a>
                    fprintf(ComInterface, "OK\r");
 800ca02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca04:	2203      	movs	r2, #3
 800ca06:	2101      	movs	r1, #1
 800ca08:	4834      	ldr	r0, [pc, #208]	; (800cadc <ESTTC_ProcessData+0x12f4>)
 800ca0a:	f7fe fe27 	bl	800b65c <fwrite>
 800ca0e:	f002 b830 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  else
                    fprintf(ComInterface, "ERR exe\r");
 800ca12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca14:	2208      	movs	r2, #8
 800ca16:	2101      	movs	r1, #1
 800ca18:	4831      	ldr	r0, [pc, #196]	; (800cae0 <ESTTC_ProcessData+0x12f8>)
 800ca1a:	f7fe fe1f 	bl	800b65c <fwrite>
 800ca1e:	f002 b828 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                }
                else
                  fprintf(ComInterface, "ERR len\r");
 800ca22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca24:	2208      	movs	r2, #8
 800ca26:	2101      	movs	r1, #1
 800ca28:	482e      	ldr	r0, [pc, #184]	; (800cae4 <ESTTC_ProcessData+0x12fc>)
 800ca2a:	f7fe fe17 	bl	800b65c <fwrite>
 800ca2e:	f002 b820 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
              }
              else
                fprintf(ComInterface, "ERR parm\r");
 800ca32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca34:	2209      	movs	r2, #9
 800ca36:	2101      	movs	r1, #1
 800ca38:	4824      	ldr	r0, [pc, #144]	; (800cacc <ESTTC_ProcessData+0x12e4>)
 800ca3a:	f7fe fe0f 	bl	800b65c <fwrite>
 800ca3e:	f002 b818 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
            }
            else
            if (txline[Interface][4] == ANT_I2C_ADDRESS)
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	4a1f      	ldr	r2, [pc, #124]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800ca46:	021b      	lsls	r3, r3, #8
 800ca48:	4413      	add	r3, r2
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	2b33      	cmp	r3, #51	; 0x33
 800ca50:	d14a      	bne.n	800cae8 <ESTTC_ProcessData+0x1300>
            {
              if (txline[Interface][6] == ((len-10)/2))
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	4a1b      	ldr	r2, [pc, #108]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800ca56:	021b      	lsls	r3, r3, #8
 800ca58:	4413      	add	r3, r2
 800ca5a:	3306      	adds	r3, #6
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca62:	3b0a      	subs	r3, #10
 800ca64:	085b      	lsrs	r3, r3, #1
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d124      	bne.n	800cab4 <ESTTC_ProcessData+0x12cc>
              {
                if (HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, ANT_I2C_ADDRESS<<1, (uint8_t *)&txline[Interface][7], txline[Interface][6], 10))
 800ca6a:	79fb      	ldrb	r3, [r7, #7]
 800ca6c:	021b      	lsls	r3, r3, #8
 800ca6e:	3307      	adds	r3, #7
 800ca70:	4a14      	ldr	r2, [pc, #80]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800ca72:	441a      	add	r2, r3
 800ca74:	79fb      	ldrb	r3, [r7, #7]
 800ca76:	4913      	ldr	r1, [pc, #76]	; (800cac4 <ESTTC_ProcessData+0x12dc>)
 800ca78:	021b      	lsls	r3, r3, #8
 800ca7a:	440b      	add	r3, r1
 800ca7c:	3306      	adds	r3, #6
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	210a      	movs	r1, #10
 800ca84:	9100      	str	r1, [sp, #0]
 800ca86:	2166      	movs	r1, #102	; 0x66
 800ca88:	4811      	ldr	r0, [pc, #68]	; (800cad0 <ESTTC_ProcessData+0x12e8>)
 800ca8a:	f7f6 fb6d 	bl	8003168 <HAL_I2C_Master_Transmit>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d107      	bne.n	800caa4 <ESTTC_ProcessData+0x12bc>
                  fprintf(ComInterface, "OK\r");
 800ca94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca96:	2203      	movs	r2, #3
 800ca98:	2101      	movs	r1, #1
 800ca9a:	4810      	ldr	r0, [pc, #64]	; (800cadc <ESTTC_ProcessData+0x12f4>)
 800ca9c:	f7fe fdde 	bl	800b65c <fwrite>
 800caa0:	f001 bfe7 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                else
                  fprintf(ComInterface, "ERR exe\r");
 800caa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caa6:	2208      	movs	r2, #8
 800caa8:	2101      	movs	r1, #1
 800caaa:	480d      	ldr	r0, [pc, #52]	; (800cae0 <ESTTC_ProcessData+0x12f8>)
 800caac:	f7fe fdd6 	bl	800b65c <fwrite>
 800cab0:	f001 bfdf 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
              }
              else
                fprintf(ComInterface, "ERR len\r");
 800cab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cab6:	2208      	movs	r2, #8
 800cab8:	2101      	movs	r1, #1
 800caba:	480a      	ldr	r0, [pc, #40]	; (800cae4 <ESTTC_ProcessData+0x12fc>)
 800cabc:	f7fe fdce 	bl	800b65c <fwrite>
 800cac0:	f001 bfd7 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800cac4:	20000464 	.word	0x20000464
 800cac8:	0801b328 	.word	0x0801b328
 800cacc:	0801b33c 	.word	0x0801b33c
 800cad0:	20009684 	.word	0x20009684
 800cad4:	0801b348 	.word	0x0801b348
 800cad8:	0801b360 	.word	0x0801b360
 800cadc:	0801b36c 	.word	0x0801b36c
 800cae0:	0801ad60 	.word	0x0801ad60
 800cae4:	0801b370 	.word	0x0801b370
            }
            else
            if (txline[Interface][4] == OBC_I2C_ADDRESS)
 800cae8:	79fb      	ldrb	r3, [r7, #7]
 800caea:	4ab0      	ldr	r2, [pc, #704]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	4413      	add	r3, r2
 800caf0:	3304      	adds	r3, #4
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b11      	cmp	r3, #17
 800caf6:	f040 858d 	bne.w	800d614 <ESTTC_ProcessData+0x1e2c>
            {
              if (txline[Interface][5] <= ESTTC_CMD_PAR_NUM)
 800cafa:	79fb      	ldrb	r3, [r7, #7]
 800cafc:	4aab      	ldr	r2, [pc, #684]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cafe:	021b      	lsls	r3, r3, #8
 800cb00:	4413      	add	r3, r2
 800cb02:	3305      	adds	r3, #5
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	b25b      	sxtb	r3, r3
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f2c0 8557 	blt.w	800d5bc <ESTTC_ProcessData+0x1dd4>
              {
                if (txline[Interface][6] == ((len-10)/2))
 800cb0e:	79fb      	ldrb	r3, [r7, #7]
 800cb10:	4aa6      	ldr	r2, [pc, #664]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cb12:	021b      	lsls	r3, r3, #8
 800cb14:	4413      	add	r3, r2
 800cb16:	3306      	adds	r3, #6
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb1e:	3b0a      	subs	r3, #10
 800cb20:	085b      	lsrs	r3, r3, #1
 800cb22:	429a      	cmp	r2, r3
 800cb24:	f040 8542 	bne.w	800d5ac <ESTTC_ProcessData+0x1dc4>
                {
                  switch(txline[Interface][5])
 800cb28:	79fb      	ldrb	r3, [r7, #7]
 800cb2a:	4aa0      	ldr	r2, [pc, #640]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cb2c:	021b      	lsls	r3, r3, #8
 800cb2e:	4413      	add	r3, r2
 800cb30:	3305      	adds	r3, #5
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b34      	cmp	r3, #52	; 0x34
 800cb36:	dc71      	bgt.n	800cc1c <ESTTC_ProcessData+0x1434>
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f340 852f 	ble.w	800d59c <ESTTC_ProcessData+0x1db4>
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	2b33      	cmp	r3, #51	; 0x33
 800cb42:	f200 852b 	bhi.w	800d59c <ESTTC_ProcessData+0x1db4>
 800cb46:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <ESTTC_ProcessData+0x1364>)
 800cb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4c:	0800cc27 	.word	0x0800cc27
 800cb50:	0800d59d 	.word	0x0800d59d
 800cb54:	0800cca9 	.word	0x0800cca9
 800cb58:	0800d59d 	.word	0x0800d59d
 800cb5c:	0800cd2b 	.word	0x0800cd2b
 800cb60:	0800d59d 	.word	0x0800d59d
 800cb64:	0800cdcd 	.word	0x0800cdcd
 800cb68:	0800d59d 	.word	0x0800d59d
 800cb6c:	0800d59d 	.word	0x0800d59d
 800cb70:	0800ce4f 	.word	0x0800ce4f
 800cb74:	0800d59d 	.word	0x0800d59d
 800cb78:	0800d59d 	.word	0x0800d59d
 800cb7c:	0800cedd 	.word	0x0800cedd
 800cb80:	0800d59d 	.word	0x0800d59d
 800cb84:	0800d59d 	.word	0x0800d59d
 800cb88:	0800cf6b 	.word	0x0800cf6b
 800cb8c:	0800cff9 	.word	0x0800cff9
 800cb90:	0800d11f 	.word	0x0800d11f
 800cb94:	0800d217 	.word	0x0800d217
 800cb98:	0800d59d 	.word	0x0800d59d
 800cb9c:	0800d59d 	.word	0x0800d59d
 800cba0:	0800d59d 	.word	0x0800d59d
 800cba4:	0800d59d 	.word	0x0800d59d
 800cba8:	0800d59d 	.word	0x0800d59d
 800cbac:	0800d59d 	.word	0x0800d59d
 800cbb0:	0800d59d 	.word	0x0800d59d
 800cbb4:	0800d59d 	.word	0x0800d59d
 800cbb8:	0800d59d 	.word	0x0800d59d
 800cbbc:	0800d59d 	.word	0x0800d59d
 800cbc0:	0800d59d 	.word	0x0800d59d
 800cbc4:	0800d59d 	.word	0x0800d59d
 800cbc8:	0800d59d 	.word	0x0800d59d
 800cbcc:	0800d59d 	.word	0x0800d59d
 800cbd0:	0800d59d 	.word	0x0800d59d
 800cbd4:	0800d59d 	.word	0x0800d59d
 800cbd8:	0800d59d 	.word	0x0800d59d
 800cbdc:	0800d59d 	.word	0x0800d59d
 800cbe0:	0800d59d 	.word	0x0800d59d
 800cbe4:	0800d59d 	.word	0x0800d59d
 800cbe8:	0800d59d 	.word	0x0800d59d
 800cbec:	0800d59d 	.word	0x0800d59d
 800cbf0:	0800d59d 	.word	0x0800d59d
 800cbf4:	0800d59d 	.word	0x0800d59d
 800cbf8:	0800d59d 	.word	0x0800d59d
 800cbfc:	0800d59d 	.word	0x0800d59d
 800cc00:	0800d59d 	.word	0x0800d59d
 800cc04:	0800d59d 	.word	0x0800d59d
 800cc08:	0800d59d 	.word	0x0800d59d
 800cc0c:	0800d59d 	.word	0x0800d59d
 800cc10:	0800d335 	.word	0x0800d335
 800cc14:	0800d59d 	.word	0x0800d59d
 800cc18:	0800d40f 	.word	0x0800d40f
 800cc1c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc1e:	f000 8463 	beq.w	800d4e8 <ESTTC_ProcessData+0x1d00>
 800cc22:	f000 bcbb 	b.w	800d59c <ESTTC_ProcessData+0x1db4>
                  {
                    case ESTTC_CMD_ACCSEL_1_ACESS: // 0x01
                      if(SEN_SUCCESS == AIS328DQ_WriteReg(AIS328DQ_1_MEMS_I2C_ADDRESS,txline[Interface][7], txline[Interface][8])) {
 800cc26:	79fb      	ldrb	r3, [r7, #7]
 800cc28:	4a60      	ldr	r2, [pc, #384]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cc2a:	021b      	lsls	r3, r3, #8
 800cc2c:	4413      	add	r3, r2
 800cc2e:	3307      	adds	r3, #7
 800cc30:	7819      	ldrb	r1, [r3, #0]
 800cc32:	79fb      	ldrb	r3, [r7, #7]
 800cc34:	4a5d      	ldr	r2, [pc, #372]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cc36:	021b      	lsls	r3, r3, #8
 800cc38:	4413      	add	r3, r2
 800cc3a:	3308      	adds	r3, #8
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	2030      	movs	r0, #48	; 0x30
 800cc42:	f7fd fce5 	bl	800a610 <AIS328DQ_WriteReg>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d125      	bne.n	800cc98 <ESTTC_ProcessData+0x14b0>
                        fprintf(ComInterface, "OK+1%02X/%02X\r", txline[Interface][7], txline[Interface][8]);
 800cc4c:	79fb      	ldrb	r3, [r7, #7]
 800cc4e:	4a57      	ldr	r2, [pc, #348]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cc50:	021b      	lsls	r3, r3, #8
 800cc52:	4413      	add	r3, r2
 800cc54:	3307      	adds	r3, #7
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	4a53      	ldr	r2, [pc, #332]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cc5e:	021b      	lsls	r3, r3, #8
 800cc60:	4413      	add	r3, r2
 800cc62:	3308      	adds	r3, #8
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	460a      	mov	r2, r1
 800cc68:	4951      	ldr	r1, [pc, #324]	; (800cdb0 <ESTTC_ProcessData+0x15c8>)
 800cc6a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cc6c:	f00a fae6 	bl	801723c <fiprintf>
                        fprintf(ComInterface, "Accelerometer 1 register %X is set with value %X\r", txline[Interface][7], txline[Interface][8]);
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	4a4e      	ldr	r2, [pc, #312]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cc74:	021b      	lsls	r3, r3, #8
 800cc76:	4413      	add	r3, r2
 800cc78:	3307      	adds	r3, #7
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	79fb      	ldrb	r3, [r7, #7]
 800cc80:	4a4a      	ldr	r2, [pc, #296]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cc82:	021b      	lsls	r3, r3, #8
 800cc84:	4413      	add	r3, r2
 800cc86:	3308      	adds	r3, #8
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	460a      	mov	r2, r1
 800cc8c:	4949      	ldr	r1, [pc, #292]	; (800cdb4 <ESTTC_ProcessData+0x15cc>)
 800cc8e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cc90:	f00a fad4 	bl	801723c <fiprintf>
                      }
                      else
                        fprintf(ComInterface, "ERR - Not valid parameters!\r");
                      break;
 800cc94:	f001 beed 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        fprintf(ComInterface, "ERR - Not valid parameters!\r");
 800cc98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc9a:	221c      	movs	r2, #28
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	4846      	ldr	r0, [pc, #280]	; (800cdb8 <ESTTC_ProcessData+0x15d0>)
 800cca0:	f7fe fcdc 	bl	800b65c <fwrite>
                      break;
 800cca4:	f001 bee5 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                    case ESTTC_CMD_ACCSEL_2_ACESS: //0x03:
                      if(SEN_SUCCESS == AIS328DQ_WriteReg(AIS328DQ_2_MEMS_I2C_ADDRESS,txline[Interface][7], txline[Interface][8])) {
 800cca8:	79fb      	ldrb	r3, [r7, #7]
 800ccaa:	4a40      	ldr	r2, [pc, #256]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800ccac:	021b      	lsls	r3, r3, #8
 800ccae:	4413      	add	r3, r2
 800ccb0:	3307      	adds	r3, #7
 800ccb2:	7819      	ldrb	r1, [r3, #0]
 800ccb4:	79fb      	ldrb	r3, [r7, #7]
 800ccb6:	4a3d      	ldr	r2, [pc, #244]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800ccb8:	021b      	lsls	r3, r3, #8
 800ccba:	4413      	add	r3, r2
 800ccbc:	3308      	adds	r3, #8
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	2032      	movs	r0, #50	; 0x32
 800ccc4:	f7fd fca4 	bl	800a610 <AIS328DQ_WriteReg>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d125      	bne.n	800cd1a <ESTTC_ProcessData+0x1532>
                        fprintf(ComInterface, "OK+2%02X/%02X\r", txline[Interface][7], txline[Interface][8]);
 800ccce:	79fb      	ldrb	r3, [r7, #7]
 800ccd0:	4a36      	ldr	r2, [pc, #216]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800ccd2:	021b      	lsls	r3, r3, #8
 800ccd4:	4413      	add	r3, r2
 800ccd6:	3307      	adds	r3, #7
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	4619      	mov	r1, r3
 800ccdc:	79fb      	ldrb	r3, [r7, #7]
 800ccde:	4a33      	ldr	r2, [pc, #204]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cce0:	021b      	lsls	r3, r3, #8
 800cce2:	4413      	add	r3, r2
 800cce4:	3308      	adds	r3, #8
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	460a      	mov	r2, r1
 800ccea:	4934      	ldr	r1, [pc, #208]	; (800cdbc <ESTTC_ProcessData+0x15d4>)
 800ccec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ccee:	f00a faa5 	bl	801723c <fiprintf>
                        fprintf(ComInterface, "Accelerometer 2 register %X is set with value %X\r", txline[Interface][7], txline[Interface][8]);
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	4a2d      	ldr	r2, [pc, #180]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800ccf6:	021b      	lsls	r3, r3, #8
 800ccf8:	4413      	add	r3, r2
 800ccfa:	3307      	adds	r3, #7
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	4619      	mov	r1, r3
 800cd00:	79fb      	ldrb	r3, [r7, #7]
 800cd02:	4a2a      	ldr	r2, [pc, #168]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cd04:	021b      	lsls	r3, r3, #8
 800cd06:	4413      	add	r3, r2
 800cd08:	3308      	adds	r3, #8
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	460a      	mov	r2, r1
 800cd0e:	492c      	ldr	r1, [pc, #176]	; (800cdc0 <ESTTC_ProcessData+0x15d8>)
 800cd10:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cd12:	f00a fa93 	bl	801723c <fiprintf>
                      }
                      else
                        fprintf(ComInterface, "ERR - Not valid parameters!\r");
                      break;
 800cd16:	f001 beac 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        fprintf(ComInterface, "ERR - Not valid parameters!\r");
 800cd1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd1c:	221c      	movs	r2, #28
 800cd1e:	2101      	movs	r1, #1
 800cd20:	4825      	ldr	r0, [pc, #148]	; (800cdb8 <ESTTC_ProcessData+0x15d0>)
 800cd22:	f7fe fc9b 	bl	800b65c <fwrite>
                      break;
 800cd26:	f001 bea4 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      if (SEN_SUCCESS == HMC5883L_WriteReg(txline[Interface][7], txline[Interface][8]))
                        fprintf(ComInterface, "Magnetometer 1 set reg No %d with value %d\r", txline[Interface][7], txline[Interface][8]);
                      else
                        fprintf(ComInterface, "ERR exe\r");
#else                         
                      if (SEN_SUCCESS == LIS3MDL_MAG_WriteReg(LIS3MDL_MAG_I2C_ADDRESS_LOW, txline[Interface][7], txline[Interface][8])) {
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	4a1f      	ldr	r2, [pc, #124]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cd2e:	021b      	lsls	r3, r3, #8
 800cd30:	4413      	add	r3, r2
 800cd32:	3307      	adds	r3, #7
 800cd34:	7819      	ldrb	r1, [r3, #0]
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	4a1c      	ldr	r2, [pc, #112]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cd3a:	021b      	lsls	r3, r3, #8
 800cd3c:	4413      	add	r3, r2
 800cd3e:	3308      	adds	r3, #8
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	461a      	mov	r2, r3
 800cd44:	2038      	movs	r0, #56	; 0x38
 800cd46:	f7fd fae1 	bl	800a30c <LIS3MDL_MAG_WriteReg>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d125      	bne.n	800cd9c <ESTTC_ProcessData+0x15b4>
                        fprintf(ComInterface, "OK+1%02X/%02X\r", txline[Interface][7], txline[Interface][8]);
 800cd50:	79fb      	ldrb	r3, [r7, #7]
 800cd52:	4a16      	ldr	r2, [pc, #88]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cd54:	021b      	lsls	r3, r3, #8
 800cd56:	4413      	add	r3, r2
 800cd58:	3307      	adds	r3, #7
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	79fb      	ldrb	r3, [r7, #7]
 800cd60:	4a12      	ldr	r2, [pc, #72]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cd62:	021b      	lsls	r3, r3, #8
 800cd64:	4413      	add	r3, r2
 800cd66:	3308      	adds	r3, #8
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	460a      	mov	r2, r1
 800cd6c:	4910      	ldr	r1, [pc, #64]	; (800cdb0 <ESTTC_ProcessData+0x15c8>)
 800cd6e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cd70:	f00a fa64 	bl	801723c <fiprintf>
                        fprintf(ComInterface, "Magnetometer 1 set reg No %d with value %d\r", txline[Interface][7], txline[Interface][8]);
 800cd74:	79fb      	ldrb	r3, [r7, #7]
 800cd76:	4a0d      	ldr	r2, [pc, #52]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cd78:	021b      	lsls	r3, r3, #8
 800cd7a:	4413      	add	r3, r2
 800cd7c:	3307      	adds	r3, #7
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	4619      	mov	r1, r3
 800cd82:	79fb      	ldrb	r3, [r7, #7]
 800cd84:	4a09      	ldr	r2, [pc, #36]	; (800cdac <ESTTC_ProcessData+0x15c4>)
 800cd86:	021b      	lsls	r3, r3, #8
 800cd88:	4413      	add	r3, r2
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	460a      	mov	r2, r1
 800cd90:	490c      	ldr	r1, [pc, #48]	; (800cdc4 <ESTTC_ProcessData+0x15dc>)
 800cd92:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cd94:	f00a fa52 	bl	801723c <fiprintf>
                      }
                      else
                        fprintf(ComInterface, "ERR exe\r");
#endif                       
                      break;
 800cd98:	f001 be6b 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        fprintf(ComInterface, "ERR exe\r");
 800cd9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd9e:	2208      	movs	r2, #8
 800cda0:	2101      	movs	r1, #1
 800cda2:	4809      	ldr	r0, [pc, #36]	; (800cdc8 <ESTTC_ProcessData+0x15e0>)
 800cda4:	f7fe fc5a 	bl	800b65c <fwrite>
                      break;
 800cda8:	f001 be63 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800cdac:	20000464 	.word	0x20000464
 800cdb0:	0801ac44 	.word	0x0801ac44
 800cdb4:	0801b37c 	.word	0x0801b37c
 800cdb8:	0801ac80 	.word	0x0801ac80
 800cdbc:	0801ad24 	.word	0x0801ad24
 800cdc0:	0801b3b0 	.word	0x0801b3b0
 800cdc4:	0801b3e4 	.word	0x0801b3e4
 800cdc8:	0801ad60 	.word	0x0801ad60
                      if (SEN_SUCCESS == HMC5883L_WriteReg(txline[Interface][7], txline[Interface][8]))
                        fprintf(ComInterface, "Magnetometer 2 set reg No %d with value %d\r", txline[Interface][7], txline[Interface][8]);
                      else
                        fprintf(ComInterface, "ERR exe\r");
#else                         
                      if (SEN_SUCCESS == LIS3MDL_MAG_WriteReg(LIS3MDL_MAG_I2C_ADDRESS_HIGH, txline[Interface][7], txline[Interface][8])) {
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
 800cdce:	4ab0      	ldr	r2, [pc, #704]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cdd0:	021b      	lsls	r3, r3, #8
 800cdd2:	4413      	add	r3, r2
 800cdd4:	3307      	adds	r3, #7
 800cdd6:	7819      	ldrb	r1, [r3, #0]
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	4aad      	ldr	r2, [pc, #692]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cddc:	021b      	lsls	r3, r3, #8
 800cdde:	4413      	add	r3, r2
 800cde0:	3308      	adds	r3, #8
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	461a      	mov	r2, r3
 800cde6:	203c      	movs	r0, #60	; 0x3c
 800cde8:	f7fd fa90 	bl	800a30c <LIS3MDL_MAG_WriteReg>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d125      	bne.n	800ce3e <ESTTC_ProcessData+0x1656>
                        fprintf(ComInterface, "OK+2%02X/%02X\r", txline[Interface][7], txline[Interface][8]);
 800cdf2:	79fb      	ldrb	r3, [r7, #7]
 800cdf4:	4aa6      	ldr	r2, [pc, #664]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cdf6:	021b      	lsls	r3, r3, #8
 800cdf8:	4413      	add	r3, r2
 800cdfa:	3307      	adds	r3, #7
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	4619      	mov	r1, r3
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	4aa3      	ldr	r2, [pc, #652]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800ce04:	021b      	lsls	r3, r3, #8
 800ce06:	4413      	add	r3, r2
 800ce08:	3308      	adds	r3, #8
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	460a      	mov	r2, r1
 800ce0e:	49a1      	ldr	r1, [pc, #644]	; (800d094 <ESTTC_ProcessData+0x18ac>)
 800ce10:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ce12:	f00a fa13 	bl	801723c <fiprintf>
                        fprintf(ComInterface, "Magnetometer 2 set reg No %d with value %d\r", txline[Interface][7], txline[Interface][8]);
 800ce16:	79fb      	ldrb	r3, [r7, #7]
 800ce18:	4a9d      	ldr	r2, [pc, #628]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800ce1a:	021b      	lsls	r3, r3, #8
 800ce1c:	4413      	add	r3, r2
 800ce1e:	3307      	adds	r3, #7
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	4619      	mov	r1, r3
 800ce24:	79fb      	ldrb	r3, [r7, #7]
 800ce26:	4a9a      	ldr	r2, [pc, #616]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800ce28:	021b      	lsls	r3, r3, #8
 800ce2a:	4413      	add	r3, r2
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	460a      	mov	r2, r1
 800ce32:	4999      	ldr	r1, [pc, #612]	; (800d098 <ESTTC_ProcessData+0x18b0>)
 800ce34:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ce36:	f00a fa01 	bl	801723c <fiprintf>
                      }
                      else
                        fprintf(ComInterface, "ERR exe\r");
#endif                       
                      break;                     
 800ce3a:	f001 be1a 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        fprintf(ComInterface, "ERR exe\r");
 800ce3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce40:	2208      	movs	r2, #8
 800ce42:	2101      	movs	r1, #1
 800ce44:	4895      	ldr	r0, [pc, #596]	; (800d09c <ESTTC_ProcessData+0x18b4>)
 800ce46:	f7fe fc09 	bl	800b65c <fwrite>
                      break;                     
 800ce4a:	f001 be12 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      
                    case ESTTC_CMD_GYR1_X_AB_DATA: //0x0A:
                      utmp = ((uint16_t)txline[Interface][8] << 8) + (uint16_t)txline[Interface][9];
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	4a8f      	ldr	r2, [pc, #572]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800ce52:	021b      	lsls	r3, r3, #8
 800ce54:	4413      	add	r3, r2
 800ce56:	3308      	adds	r3, #8
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	021b      	lsls	r3, r3, #8
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	79fb      	ldrb	r3, [r7, #7]
 800ce62:	498b      	ldr	r1, [pc, #556]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800ce64:	021b      	lsls	r3, r3, #8
 800ce66:	440b      	add	r3, r1
 800ce68:	3309      	adds	r3, #9
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	4413      	add	r3, r2
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                      if (SEN_SUCCESS == ADIS16265_WriteReg16(txline[Interface][7], utmp, PAN_X_M)) {
 800ce76:	79fb      	ldrb	r3, [r7, #7]
 800ce78:	4a85      	ldr	r2, [pc, #532]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800ce7a:	021b      	lsls	r3, r3, #8
 800ce7c:	4413      	add	r3, r2
 800ce7e:	3307      	adds	r3, #7
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800ce86:	2203      	movs	r2, #3
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fe f81b 	bl	800aec4 <ADIS16265_WriteReg16>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d11b      	bne.n	800cecc <ESTTC_ProcessData+0x16e4>
                        fprintf(ComInterface, "OK+1%02X/%02X\r", txline[Interface][7], utmp);
 800ce94:	79fb      	ldrb	r3, [r7, #7]
 800ce96:	4a7e      	ldr	r2, [pc, #504]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800ce98:	021b      	lsls	r3, r3, #8
 800ce9a:	4413      	add	r3, r2
 800ce9c:	3307      	adds	r3, #7
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	461a      	mov	r2, r3
 800cea2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cea6:	497e      	ldr	r1, [pc, #504]	; (800d0a0 <ESTTC_ProcessData+0x18b8>)
 800cea8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ceaa:	f00a f9c7 	bl	801723c <fiprintf>
                        fprintf(ComInterface, "Gyroscope 1 set reg No %d with value %d\r", txline[Interface][7], utmp);
 800ceae:	79fb      	ldrb	r3, [r7, #7]
 800ceb0:	4a77      	ldr	r2, [pc, #476]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800ceb2:	021b      	lsls	r3, r3, #8
 800ceb4:	4413      	add	r3, r2
 800ceb6:	3307      	adds	r3, #7
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cec0:	4978      	ldr	r1, [pc, #480]	; (800d0a4 <ESTTC_ProcessData+0x18bc>)
 800cec2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cec4:	f00a f9ba 	bl	801723c <fiprintf>
                      }
                      else
                        fprintf(ComInterface, "ERR exe\r");
                      break;   
 800cec8:	f001 bdd3 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        fprintf(ComInterface, "ERR exe\r");
 800cecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cece:	2208      	movs	r2, #8
 800ced0:	2101      	movs	r1, #1
 800ced2:	4872      	ldr	r0, [pc, #456]	; (800d09c <ESTTC_ProcessData+0x18b4>)
 800ced4:	f7fe fbc2 	bl	800b65c <fwrite>
                      break;   
 800ced8:	f001 bdcb 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      
                    case ESTTC_CMD_GYR2_Y_AB_DATA: //0x0D:
                      utmp = ((uint16_t)txline[Interface][8] << 8) + (uint16_t)txline[Interface][9];
 800cedc:	79fb      	ldrb	r3, [r7, #7]
 800cede:	4a6c      	ldr	r2, [pc, #432]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cee0:	021b      	lsls	r3, r3, #8
 800cee2:	4413      	add	r3, r2
 800cee4:	3308      	adds	r3, #8
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	021b      	lsls	r3, r3, #8
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	79fb      	ldrb	r3, [r7, #7]
 800cef0:	4967      	ldr	r1, [pc, #412]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cef2:	021b      	lsls	r3, r3, #8
 800cef4:	440b      	add	r3, r1
 800cef6:	3309      	adds	r3, #9
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	4413      	add	r3, r2
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                      if (SEN_SUCCESS == ADIS16265_WriteReg16(txline[Interface][7], utmp, PAN_Y_M)) {
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	4a62      	ldr	r2, [pc, #392]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cf08:	021b      	lsls	r3, r3, #8
 800cf0a:	4413      	add	r3, r2
 800cf0c:	3307      	adds	r3, #7
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800cf14:	2204      	movs	r2, #4
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fd ffd4 	bl	800aec4 <ADIS16265_WriteReg16>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d11b      	bne.n	800cf5a <ESTTC_ProcessData+0x1772>
                        fprintf(ComInterface, "OK+2%02X/%02X\r", txline[Interface][7], utmp);
 800cf22:	79fb      	ldrb	r3, [r7, #7]
 800cf24:	4a5a      	ldr	r2, [pc, #360]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cf26:	021b      	lsls	r3, r3, #8
 800cf28:	4413      	add	r3, r2
 800cf2a:	3307      	adds	r3, #7
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cf34:	4957      	ldr	r1, [pc, #348]	; (800d094 <ESTTC_ProcessData+0x18ac>)
 800cf36:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cf38:	f00a f980 	bl	801723c <fiprintf>
                        fprintf(ComInterface, "Gyroscope 2 set reg No %d with value %d\r", txline[Interface][7], utmp);
 800cf3c:	79fb      	ldrb	r3, [r7, #7]
 800cf3e:	4a54      	ldr	r2, [pc, #336]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cf40:	021b      	lsls	r3, r3, #8
 800cf42:	4413      	add	r3, r2
 800cf44:	3307      	adds	r3, #7
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cf4e:	4956      	ldr	r1, [pc, #344]	; (800d0a8 <ESTTC_ProcessData+0x18c0>)
 800cf50:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cf52:	f00a f973 	bl	801723c <fiprintf>
                      }
                      else
                        fprintf(ComInterface, "ERR exe\r");
                      break;                                          
 800cf56:	f001 bd8c 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        fprintf(ComInterface, "ERR exe\r");
 800cf5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf5c:	2208      	movs	r2, #8
 800cf5e:	2101      	movs	r1, #1
 800cf60:	484e      	ldr	r0, [pc, #312]	; (800d09c <ESTTC_ProcessData+0x18b4>)
 800cf62:	f7fe fb7b 	bl	800b65c <fwrite>
                      break;                                          
 800cf66:	f001 bd84 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                    case ESTTC_CMD_GYR4_Z_AB_DATA: //0x10:
                      utmp = ((uint16_t)txline[Interface][8] << 8) + (uint16_t)txline[Interface][9];
 800cf6a:	79fb      	ldrb	r3, [r7, #7]
 800cf6c:	4a48      	ldr	r2, [pc, #288]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cf6e:	021b      	lsls	r3, r3, #8
 800cf70:	4413      	add	r3, r2
 800cf72:	3308      	adds	r3, #8
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	021b      	lsls	r3, r3, #8
 800cf7a:	b29a      	uxth	r2, r3
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	4944      	ldr	r1, [pc, #272]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cf80:	021b      	lsls	r3, r3, #8
 800cf82:	440b      	add	r3, r1
 800cf84:	3309      	adds	r3, #9
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	4413      	add	r3, r2
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                      if (SEN_SUCCESS == ADIS16265_WriteReg16(txline[Interface][7], utmp, PAN_Z_M)) {
 800cf92:	79fb      	ldrb	r3, [r7, #7]
 800cf94:	4a3e      	ldr	r2, [pc, #248]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cf96:	021b      	lsls	r3, r3, #8
 800cf98:	4413      	add	r3, r2
 800cf9a:	3307      	adds	r3, #7
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800cfa2:	2205      	movs	r2, #5
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fd ff8d 	bl	800aec4 <ADIS16265_WriteReg16>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d11b      	bne.n	800cfe8 <ESTTC_ProcessData+0x1800>
                        fprintf(ComInterface, "OK+3%02X/%02X\r", txline[Interface][7], utmp);
 800cfb0:	79fb      	ldrb	r3, [r7, #7]
 800cfb2:	4a37      	ldr	r2, [pc, #220]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cfb4:	021b      	lsls	r3, r3, #8
 800cfb6:	4413      	add	r3, r2
 800cfb8:	3307      	adds	r3, #7
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cfc2:	493a      	ldr	r1, [pc, #232]	; (800d0ac <ESTTC_ProcessData+0x18c4>)
 800cfc4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cfc6:	f00a f939 	bl	801723c <fiprintf>
                        fprintf(ComInterface, "Gyroscope 3 set reg No %d with value %d\r", txline[Interface][7], utmp);
 800cfca:	79fb      	ldrb	r3, [r7, #7]
 800cfcc:	4a30      	ldr	r2, [pc, #192]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cfce:	021b      	lsls	r3, r3, #8
 800cfd0:	4413      	add	r3, r2
 800cfd2:	3307      	adds	r3, #7
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cfdc:	4934      	ldr	r1, [pc, #208]	; (800d0b0 <ESTTC_ProcessData+0x18c8>)
 800cfde:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cfe0:	f00a f92c 	bl	801723c <fiprintf>
                      }
                      else
                        fprintf(ComInterface, "ERR exe\r");
                      break;                        
 800cfe4:	f001 bd45 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        fprintf(ComInterface, "ERR exe\r");
 800cfe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfea:	2208      	movs	r2, #8
 800cfec:	2101      	movs	r1, #1
 800cfee:	482b      	ldr	r0, [pc, #172]	; (800d09c <ESTTC_ProcessData+0x18b4>)
 800cff0:	f7fe fb34 	bl	800b65c <fwrite>
                      break;                        
 800cff4:	f001 bd3d 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                    case ESTTC_CMD_MAGTRK1_POWER: //0x11:
                      if (txline[Interface][7] > 100) txline[Interface][8] = 100; // 100% is maximum
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	4a25      	ldr	r2, [pc, #148]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800cffc:	021b      	lsls	r3, r3, #8
 800cffe:	4413      	add	r3, r2
 800d000:	3307      	adds	r3, #7
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	2b64      	cmp	r3, #100	; 0x64
 800d006:	d906      	bls.n	800d016 <ESTTC_ProcessData+0x182e>
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	4a21      	ldr	r2, [pc, #132]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800d00c:	021b      	lsls	r3, r3, #8
 800d00e:	4413      	add	r3, r2
 800d010:	3308      	adds	r3, #8
 800d012:	2264      	movs	r2, #100	; 0x64
 800d014:	701a      	strb	r2, [r3, #0]
                      if (txline[Interface][8] > 1)  txline[Interface][9] = 1; // 0 - negative, 1 is positive direction
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	4a1d      	ldr	r2, [pc, #116]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800d01a:	021b      	lsls	r3, r3, #8
 800d01c:	4413      	add	r3, r2
 800d01e:	3308      	adds	r3, #8
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d906      	bls.n	800d034 <ESTTC_ProcessData+0x184c>
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	4a19      	ldr	r2, [pc, #100]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800d02a:	021b      	lsls	r3, r3, #8
 800d02c:	4413      	add	r3, r2
 800d02e:	3309      	adds	r3, #9
 800d030:	2201      	movs	r2, #1
 800d032:	701a      	strb	r2, [r3, #0]
                      if (SetMagnetorque(PAN_X_M, txline[Interface][7], txline[Interface][8]) == SEN_SUCCESS) {
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	4a16      	ldr	r2, [pc, #88]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800d038:	021b      	lsls	r3, r3, #8
 800d03a:	4413      	add	r3, r2
 800d03c:	3307      	adds	r3, #7
 800d03e:	7819      	ldrb	r1, [r3, #0]
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	4a13      	ldr	r2, [pc, #76]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800d044:	021b      	lsls	r3, r3, #8
 800d046:	4413      	add	r3, r2
 800d048:	3308      	adds	r3, #8
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	461a      	mov	r2, r3
 800d04e:	2003      	movs	r0, #3
 800d050:	f7fd fd0a 	bl	800aa68 <SetMagnetorque>
 800d054:	4603      	mov	r3, r0
 800d056:	2b01      	cmp	r3, #1
 800d058:	d159      	bne.n	800d10e <ESTTC_ProcessData+0x1926>
                          fprintf(ComInterface, "OK+1%02X/X", txline[Interface][7]);
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	4a0c      	ldr	r2, [pc, #48]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800d05e:	021b      	lsls	r3, r3, #8
 800d060:	4413      	add	r3, r2
 800d062:	3307      	adds	r3, #7
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	461a      	mov	r2, r3
 800d068:	4912      	ldr	r1, [pc, #72]	; (800d0b4 <ESTTC_ProcessData+0x18cc>)
 800d06a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d06c:	f00a f8e6 	bl	801723c <fiprintf>
                          if(txline[Interface][8] == 0)
 800d070:	79fb      	ldrb	r3, [r7, #7]
 800d072:	4a07      	ldr	r2, [pc, #28]	; (800d090 <ESTTC_ProcessData+0x18a8>)
 800d074:	021b      	lsls	r3, r3, #8
 800d076:	4413      	add	r3, r2
 800d078:	3308      	adds	r3, #8
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d11d      	bne.n	800d0bc <ESTTC_ProcessData+0x18d4>
						  {
						    fprintf(ComInterface, "-\r");
 800d080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d082:	2202      	movs	r2, #2
 800d084:	2101      	movs	r1, #1
 800d086:	480c      	ldr	r0, [pc, #48]	; (800d0b8 <ESTTC_ProcessData+0x18d0>)
 800d088:	f7fe fae8 	bl	800b65c <fwrite>
 800d08c:	e01c      	b.n	800d0c8 <ESTTC_ProcessData+0x18e0>
 800d08e:	bf00      	nop
 800d090:	20000464 	.word	0x20000464
 800d094:	0801ad24 	.word	0x0801ad24
 800d098:	0801b410 	.word	0x0801b410
 800d09c:	0801ad60 	.word	0x0801ad60
 800d0a0:	0801ac44 	.word	0x0801ac44
 800d0a4:	0801b43c 	.word	0x0801b43c
 800d0a8:	0801b468 	.word	0x0801b468
 800d0ac:	0801af80 	.word	0x0801af80
 800d0b0:	0801b494 	.word	0x0801b494
 800d0b4:	0801b4c0 	.word	0x0801b4c0
 800d0b8:	0801b4cc 	.word	0x0801b4cc
						  }
						  else
						  {
						    fprintf(ComInterface, "+\r");
 800d0bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0be:	2202      	movs	r2, #2
 800d0c0:	2101      	movs	r1, #1
 800d0c2:	4893      	ldr	r0, [pc, #588]	; (800d310 <ESTTC_ProcessData+0x1b28>)
 800d0c4:	f7fe faca 	bl	800b65c <fwrite>
						  }

                          fprintf(ComInterface, "Set Magnetorquer 1 (TRQ1) on PAN 4 with power %d and direction X", txline[Interface][7]);
 800d0c8:	79fb      	ldrb	r3, [r7, #7]
 800d0ca:	4a92      	ldr	r2, [pc, #584]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d0cc:	021b      	lsls	r3, r3, #8
 800d0ce:	4413      	add	r3, r2
 800d0d0:	3307      	adds	r3, #7
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	4990      	ldr	r1, [pc, #576]	; (800d318 <ESTTC_ProcessData+0x1b30>)
 800d0d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d0da:	f00a f8af 	bl	801723c <fiprintf>
                          if(txline[Interface][8] == 0)
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	4a8c      	ldr	r2, [pc, #560]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	4413      	add	r3, r2
 800d0e6:	3308      	adds	r3, #8
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d107      	bne.n	800d0fe <ESTTC_ProcessData+0x1916>
                          {
                        	  fprintf(ComInterface, "-\r");
 800d0ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0f0:	2202      	movs	r2, #2
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	4889      	ldr	r0, [pc, #548]	; (800d31c <ESTTC_ProcessData+0x1b34>)
 800d0f6:	f7fe fab1 	bl	800b65c <fwrite>
                          {
                        	  fprintf(ComInterface, "+\r");
                          }
                      }
                      else fprintf(ComInterface, "ERR - Not valid parameters!\r");
                      break;
 800d0fa:	f001 bcba 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        	  fprintf(ComInterface, "+\r");
 800d0fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d100:	2202      	movs	r2, #2
 800d102:	2101      	movs	r1, #1
 800d104:	4882      	ldr	r0, [pc, #520]	; (800d310 <ESTTC_ProcessData+0x1b28>)
 800d106:	f7fe faa9 	bl	800b65c <fwrite>
                      break;
 800d10a:	f001 bcb2 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      else fprintf(ComInterface, "ERR - Not valid parameters!\r");
 800d10e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d110:	221c      	movs	r2, #28
 800d112:	2101      	movs	r1, #1
 800d114:	4882      	ldr	r0, [pc, #520]	; (800d320 <ESTTC_ProcessData+0x1b38>)
 800d116:	f7fe faa1 	bl	800b65c <fwrite>
                      break;
 800d11a:	f001 bcaa 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  
                    case ESTTC_CMD_MAGTRK2_POWER: //0x12:
                      if (txline[Interface][7] > 100) txline[Interface][8] = 100; // 100% is maximum
 800d11e:	79fb      	ldrb	r3, [r7, #7]
 800d120:	4a7c      	ldr	r2, [pc, #496]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d122:	021b      	lsls	r3, r3, #8
 800d124:	4413      	add	r3, r2
 800d126:	3307      	adds	r3, #7
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	2b64      	cmp	r3, #100	; 0x64
 800d12c:	d906      	bls.n	800d13c <ESTTC_ProcessData+0x1954>
 800d12e:	79fb      	ldrb	r3, [r7, #7]
 800d130:	4a78      	ldr	r2, [pc, #480]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d132:	021b      	lsls	r3, r3, #8
 800d134:	4413      	add	r3, r2
 800d136:	3308      	adds	r3, #8
 800d138:	2264      	movs	r2, #100	; 0x64
 800d13a:	701a      	strb	r2, [r3, #0]
                      if (txline[Interface][8] > 1)  txline[Interface][9] = 1; // 0 - negative, 1 is positive direction
 800d13c:	79fb      	ldrb	r3, [r7, #7]
 800d13e:	4a75      	ldr	r2, [pc, #468]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d140:	021b      	lsls	r3, r3, #8
 800d142:	4413      	add	r3, r2
 800d144:	3308      	adds	r3, #8
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d906      	bls.n	800d15a <ESTTC_ProcessData+0x1972>
 800d14c:	79fb      	ldrb	r3, [r7, #7]
 800d14e:	4a71      	ldr	r2, [pc, #452]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d150:	021b      	lsls	r3, r3, #8
 800d152:	4413      	add	r3, r2
 800d154:	3309      	adds	r3, #9
 800d156:	2201      	movs	r2, #1
 800d158:	701a      	strb	r2, [r3, #0]
                      if (SetMagnetorque(PAN_Y_M, txline[Interface][7], txline[Interface][8]) == SEN_SUCCESS) {
 800d15a:	79fb      	ldrb	r3, [r7, #7]
 800d15c:	4a6d      	ldr	r2, [pc, #436]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d15e:	021b      	lsls	r3, r3, #8
 800d160:	4413      	add	r3, r2
 800d162:	3307      	adds	r3, #7
 800d164:	7819      	ldrb	r1, [r3, #0]
 800d166:	79fb      	ldrb	r3, [r7, #7]
 800d168:	4a6a      	ldr	r2, [pc, #424]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d16a:	021b      	lsls	r3, r3, #8
 800d16c:	4413      	add	r3, r2
 800d16e:	3308      	adds	r3, #8
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	2004      	movs	r0, #4
 800d176:	f7fd fc77 	bl	800aa68 <SetMagnetorque>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d142      	bne.n	800d206 <ESTTC_ProcessData+0x1a1e>
                          fprintf(ComInterface, "OK+2%02X/Y", txline[Interface][7]);
 800d180:	79fb      	ldrb	r3, [r7, #7]
 800d182:	4a64      	ldr	r2, [pc, #400]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d184:	021b      	lsls	r3, r3, #8
 800d186:	4413      	add	r3, r2
 800d188:	3307      	adds	r3, #7
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	461a      	mov	r2, r3
 800d18e:	4965      	ldr	r1, [pc, #404]	; (800d324 <ESTTC_ProcessData+0x1b3c>)
 800d190:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d192:	f00a f853 	bl	801723c <fiprintf>
                          if(txline[Interface][8] == 0)
 800d196:	79fb      	ldrb	r3, [r7, #7]
 800d198:	4a5e      	ldr	r2, [pc, #376]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d19a:	021b      	lsls	r3, r3, #8
 800d19c:	4413      	add	r3, r2
 800d19e:	3308      	adds	r3, #8
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d106      	bne.n	800d1b4 <ESTTC_ProcessData+0x19cc>
						  {
						    fprintf(ComInterface, "-\r");
 800d1a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	2101      	movs	r1, #1
 800d1ac:	485b      	ldr	r0, [pc, #364]	; (800d31c <ESTTC_ProcessData+0x1b34>)
 800d1ae:	f7fe fa55 	bl	800b65c <fwrite>
 800d1b2:	e005      	b.n	800d1c0 <ESTTC_ProcessData+0x19d8>
						  }
						  else
						  {
						    fprintf(ComInterface, "+\r");
 800d1b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	2101      	movs	r1, #1
 800d1ba:	4855      	ldr	r0, [pc, #340]	; (800d310 <ESTTC_ProcessData+0x1b28>)
 800d1bc:	f7fe fa4e 	bl	800b65c <fwrite>
						  }
                          fprintf(ComInterface, "Set Magnetorquer 2 (TRQ2) on PAN 5 with power %d and direction Y", txline[Interface][7]);
 800d1c0:	79fb      	ldrb	r3, [r7, #7]
 800d1c2:	4a54      	ldr	r2, [pc, #336]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d1c4:	021b      	lsls	r3, r3, #8
 800d1c6:	4413      	add	r3, r2
 800d1c8:	3307      	adds	r3, #7
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	4956      	ldr	r1, [pc, #344]	; (800d328 <ESTTC_ProcessData+0x1b40>)
 800d1d0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d1d2:	f00a f833 	bl	801723c <fiprintf>
                          if(txline[Interface][8] == 0)
 800d1d6:	79fb      	ldrb	r3, [r7, #7]
 800d1d8:	4a4e      	ldr	r2, [pc, #312]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d1da:	021b      	lsls	r3, r3, #8
 800d1dc:	4413      	add	r3, r2
 800d1de:	3308      	adds	r3, #8
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d107      	bne.n	800d1f6 <ESTTC_ProcessData+0x1a0e>
                          {
                        	  fprintf(ComInterface, "-\r");
 800d1e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	484b      	ldr	r0, [pc, #300]	; (800d31c <ESTTC_ProcessData+0x1b34>)
 800d1ee:	f7fe fa35 	bl	800b65c <fwrite>
                          {
                        	  fprintf(ComInterface, "+\r");
                          }
                      }
                      else fprintf(ComInterface, "ERR - Not valid parameters!\r");
                      break;
 800d1f2:	f001 bc3e 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        	  fprintf(ComInterface, "+\r");
 800d1f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	2101      	movs	r1, #1
 800d1fc:	4844      	ldr	r0, [pc, #272]	; (800d310 <ESTTC_ProcessData+0x1b28>)
 800d1fe:	f7fe fa2d 	bl	800b65c <fwrite>
                      break;
 800d202:	f001 bc36 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      else fprintf(ComInterface, "ERR - Not valid parameters!\r");
 800d206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d208:	221c      	movs	r2, #28
 800d20a:	2101      	movs	r1, #1
 800d20c:	4844      	ldr	r0, [pc, #272]	; (800d320 <ESTTC_ProcessData+0x1b38>)
 800d20e:	f7fe fa25 	bl	800b65c <fwrite>
                      break;
 800d212:	f001 bc2e 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      
                    case ESTTC_CMD_MAGTRK3_POWER: //0x13:
                      if (txline[Interface][7] > 100) txline[Interface][8] = 100; // 100% is maximum
 800d216:	79fb      	ldrb	r3, [r7, #7]
 800d218:	4a3e      	ldr	r2, [pc, #248]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d21a:	021b      	lsls	r3, r3, #8
 800d21c:	4413      	add	r3, r2
 800d21e:	3307      	adds	r3, #7
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b64      	cmp	r3, #100	; 0x64
 800d224:	d906      	bls.n	800d234 <ESTTC_ProcessData+0x1a4c>
 800d226:	79fb      	ldrb	r3, [r7, #7]
 800d228:	4a3a      	ldr	r2, [pc, #232]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d22a:	021b      	lsls	r3, r3, #8
 800d22c:	4413      	add	r3, r2
 800d22e:	3308      	adds	r3, #8
 800d230:	2264      	movs	r2, #100	; 0x64
 800d232:	701a      	strb	r2, [r3, #0]
                      if (txline[Interface][8] > 1)  txline[Interface][9] = 1; // 0 - negative, 1 is positive direction
 800d234:	79fb      	ldrb	r3, [r7, #7]
 800d236:	4a37      	ldr	r2, [pc, #220]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d238:	021b      	lsls	r3, r3, #8
 800d23a:	4413      	add	r3, r2
 800d23c:	3308      	adds	r3, #8
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b01      	cmp	r3, #1
 800d242:	d906      	bls.n	800d252 <ESTTC_ProcessData+0x1a6a>
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	4a33      	ldr	r2, [pc, #204]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d248:	021b      	lsls	r3, r3, #8
 800d24a:	4413      	add	r3, r2
 800d24c:	3309      	adds	r3, #9
 800d24e:	2201      	movs	r2, #1
 800d250:	701a      	strb	r2, [r3, #0]
                      if (SetMagnetorque(PAN_Z_M, txline[Interface][7], txline[Interface][8]) == SEN_SUCCESS) {
 800d252:	79fb      	ldrb	r3, [r7, #7]
 800d254:	4a2f      	ldr	r2, [pc, #188]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d256:	021b      	lsls	r3, r3, #8
 800d258:	4413      	add	r3, r2
 800d25a:	3307      	adds	r3, #7
 800d25c:	7819      	ldrb	r1, [r3, #0]
 800d25e:	79fb      	ldrb	r3, [r7, #7]
 800d260:	4a2c      	ldr	r2, [pc, #176]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d262:	021b      	lsls	r3, r3, #8
 800d264:	4413      	add	r3, r2
 800d266:	3308      	adds	r3, #8
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	461a      	mov	r2, r3
 800d26c:	2005      	movs	r0, #5
 800d26e:	f7fd fbfb 	bl	800aa68 <SetMagnetorque>
 800d272:	4603      	mov	r3, r0
 800d274:	2b01      	cmp	r3, #1
 800d276:	d142      	bne.n	800d2fe <ESTTC_ProcessData+0x1b16>
                          fprintf(ComInterface, "OK+3%02X/Z", txline[Interface][7]);
 800d278:	79fb      	ldrb	r3, [r7, #7]
 800d27a:	4a26      	ldr	r2, [pc, #152]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d27c:	021b      	lsls	r3, r3, #8
 800d27e:	4413      	add	r3, r2
 800d280:	3307      	adds	r3, #7
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	461a      	mov	r2, r3
 800d286:	4929      	ldr	r1, [pc, #164]	; (800d32c <ESTTC_ProcessData+0x1b44>)
 800d288:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d28a:	f009 ffd7 	bl	801723c <fiprintf>
                          if(txline[Interface][8] == 0)
 800d28e:	79fb      	ldrb	r3, [r7, #7]
 800d290:	4a20      	ldr	r2, [pc, #128]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d292:	021b      	lsls	r3, r3, #8
 800d294:	4413      	add	r3, r2
 800d296:	3308      	adds	r3, #8
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d106      	bne.n	800d2ac <ESTTC_ProcessData+0x1ac4>
						  {
						    fprintf(ComInterface, "-\r");
 800d29e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	2101      	movs	r1, #1
 800d2a4:	481d      	ldr	r0, [pc, #116]	; (800d31c <ESTTC_ProcessData+0x1b34>)
 800d2a6:	f7fe f9d9 	bl	800b65c <fwrite>
 800d2aa:	e005      	b.n	800d2b8 <ESTTC_ProcessData+0x1ad0>
						  }
						  else
						  {
						    fprintf(ComInterface, "+\r");
 800d2ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	4817      	ldr	r0, [pc, #92]	; (800d310 <ESTTC_ProcessData+0x1b28>)
 800d2b4:	f7fe f9d2 	bl	800b65c <fwrite>
						  }

                          fprintf(ComInterface, "Set Magnetorquer 3 (TRQ3) on PAN 6 with power %d and direction Z", txline[Interface][7]);
 800d2b8:	79fb      	ldrb	r3, [r7, #7]
 800d2ba:	4a16      	ldr	r2, [pc, #88]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d2bc:	021b      	lsls	r3, r3, #8
 800d2be:	4413      	add	r3, r2
 800d2c0:	3307      	adds	r3, #7
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	491a      	ldr	r1, [pc, #104]	; (800d330 <ESTTC_ProcessData+0x1b48>)
 800d2c8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d2ca:	f009 ffb7 	bl	801723c <fiprintf>
                          if(txline[Interface][8] == 0)
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	4a10      	ldr	r2, [pc, #64]	; (800d314 <ESTTC_ProcessData+0x1b2c>)
 800d2d2:	021b      	lsls	r3, r3, #8
 800d2d4:	4413      	add	r3, r2
 800d2d6:	3308      	adds	r3, #8
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d107      	bne.n	800d2ee <ESTTC_ProcessData+0x1b06>
                          {
                        	  fprintf(ComInterface, "-\r");
 800d2de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	2101      	movs	r1, #1
 800d2e4:	480d      	ldr	r0, [pc, #52]	; (800d31c <ESTTC_ProcessData+0x1b34>)
 800d2e6:	f7fe f9b9 	bl	800b65c <fwrite>
                          {
                        	  fprintf(ComInterface, "+\r");
                          }
                      }
                      else fprintf(ComInterface, "ERR - Not valid parameters!\r");
                      break;
 800d2ea:	f001 bbc2 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                        	  fprintf(ComInterface, "+\r");
 800d2ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	2101      	movs	r1, #1
 800d2f4:	4806      	ldr	r0, [pc, #24]	; (800d310 <ESTTC_ProcessData+0x1b28>)
 800d2f6:	f7fe f9b1 	bl	800b65c <fwrite>
                      break;
 800d2fa:	f001 bbba 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      else fprintf(ComInterface, "ERR - Not valid parameters!\r");
 800d2fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d300:	221c      	movs	r2, #28
 800d302:	2101      	movs	r1, #1
 800d304:	4806      	ldr	r0, [pc, #24]	; (800d320 <ESTTC_ProcessData+0x1b38>)
 800d306:	f7fe f9a9 	bl	800b65c <fwrite>
                      break;
 800d30a:	f001 bbb2 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800d30e:	bf00      	nop
 800d310:	0801b4d0 	.word	0x0801b4d0
 800d314:	20000464 	.word	0x20000464
 800d318:	0801b4d4 	.word	0x0801b4d4
 800d31c:	0801b4cc 	.word	0x0801b4cc
 800d320:	0801ac80 	.word	0x0801ac80
 800d324:	0801b518 	.word	0x0801b518
 800d328:	0801b524 	.word	0x0801b524
 800d32c:	0801b568 	.word	0x0801b568
 800d330:	0801b574 	.word	0x0801b574

                    case ESTTC_CMD_SET_TIME: //0x32:   // set time
                        sTime.Hours = (uint16_t)((txline[Interface][7]-0x30)*10 + (txline[Interface][8]-0x30));
 800d334:	79fb      	ldrb	r3, [r7, #7]
 800d336:	4aa5      	ldr	r2, [pc, #660]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d338:	021b      	lsls	r3, r3, #8
 800d33a:	4413      	add	r3, r2
 800d33c:	3307      	adds	r3, #7
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	3b30      	subs	r3, #48	; 0x30
 800d342:	b2db      	uxtb	r3, r3
 800d344:	461a      	mov	r2, r3
 800d346:	0092      	lsls	r2, r2, #2
 800d348:	4413      	add	r3, r2
 800d34a:	005b      	lsls	r3, r3, #1
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	79fb      	ldrb	r3, [r7, #7]
 800d350:	499e      	ldr	r1, [pc, #632]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d352:	021b      	lsls	r3, r3, #8
 800d354:	440b      	add	r3, r1
 800d356:	3308      	adds	r3, #8
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	4413      	add	r3, r2
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	3b30      	subs	r3, #48	; 0x30
 800d360:	b2da      	uxtb	r2, r3
 800d362:	4b9b      	ldr	r3, [pc, #620]	; (800d5d0 <ESTTC_ProcessData+0x1de8>)
 800d364:	701a      	strb	r2, [r3, #0]
                        sTime.Minutes = (uint16_t)((txline[Interface][9]-0x30)*10 + (txline[Interface][10]-0x30));
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	4a98      	ldr	r2, [pc, #608]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d36a:	021b      	lsls	r3, r3, #8
 800d36c:	4413      	add	r3, r2
 800d36e:	3309      	adds	r3, #9
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	3b30      	subs	r3, #48	; 0x30
 800d374:	b2db      	uxtb	r3, r3
 800d376:	461a      	mov	r2, r3
 800d378:	0092      	lsls	r2, r2, #2
 800d37a:	4413      	add	r3, r2
 800d37c:	005b      	lsls	r3, r3, #1
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	79fb      	ldrb	r3, [r7, #7]
 800d382:	4992      	ldr	r1, [pc, #584]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d384:	021b      	lsls	r3, r3, #8
 800d386:	440b      	add	r3, r1
 800d388:	330a      	adds	r3, #10
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	4413      	add	r3, r2
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	3b30      	subs	r3, #48	; 0x30
 800d392:	b2da      	uxtb	r2, r3
 800d394:	4b8e      	ldr	r3, [pc, #568]	; (800d5d0 <ESTTC_ProcessData+0x1de8>)
 800d396:	705a      	strb	r2, [r3, #1]
                        sTime.Seconds = (uint16_t)((txline[Interface][11]-0x30)*10 + (txline[Interface][12]-0x30));
 800d398:	79fb      	ldrb	r3, [r7, #7]
 800d39a:	4a8c      	ldr	r2, [pc, #560]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d39c:	021b      	lsls	r3, r3, #8
 800d39e:	4413      	add	r3, r2
 800d3a0:	330b      	adds	r3, #11
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	3b30      	subs	r3, #48	; 0x30
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	0092      	lsls	r2, r2, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	005b      	lsls	r3, r3, #1
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	79fb      	ldrb	r3, [r7, #7]
 800d3b4:	4985      	ldr	r1, [pc, #532]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	440b      	add	r3, r1
 800d3ba:	330c      	adds	r3, #12
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	4413      	add	r3, r2
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	3b30      	subs	r3, #48	; 0x30
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	4b82      	ldr	r3, [pc, #520]	; (800d5d0 <ESTTC_ProcessData+0x1de8>)
 800d3c8:	709a      	strb	r2, [r3, #2]
                        if (HAL_OK == HAL_RTC_SetTime(&hrtc, &sTime, calendar_format))
 800d3ca:	4b82      	ldr	r3, [pc, #520]	; (800d5d4 <ESTTC_ProcessData+0x1dec>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	497f      	ldr	r1, [pc, #508]	; (800d5d0 <ESTTC_ProcessData+0x1de8>)
 800d3d2:	4881      	ldr	r0, [pc, #516]	; (800d5d8 <ESTTC_ProcessData+0x1df0>)
 800d3d4:	f7f8 f8b3 	bl	800553e <HAL_RTC_SetTime>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10f      	bne.n	800d3fe <ESTTC_ProcessData+0x1c16>
                          fprintf(ComInterface, "OK TIME %02d:%02d:%02d  \r", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800d3de:	4b7c      	ldr	r3, [pc, #496]	; (800d5d0 <ESTTC_ProcessData+0x1de8>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	4b7a      	ldr	r3, [pc, #488]	; (800d5d0 <ESTTC_ProcessData+0x1de8>)
 800d3e6:	785b      	ldrb	r3, [r3, #1]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	4b79      	ldr	r3, [pc, #484]	; (800d5d0 <ESTTC_ProcessData+0x1de8>)
 800d3ec:	789b      	ldrb	r3, [r3, #2]
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	497a      	ldr	r1, [pc, #488]	; (800d5dc <ESTTC_ProcessData+0x1df4>)
 800d3f4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d3f6:	f009 ff21 	bl	801723c <fiprintf>
                        else
                          fprintf(ComInterface, "ERR exe\r");
                        break;
 800d3fa:	f001 bb3a 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                          fprintf(ComInterface, "ERR exe\r");
 800d3fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d400:	2208      	movs	r2, #8
 800d402:	2101      	movs	r1, #1
 800d404:	4876      	ldr	r0, [pc, #472]	; (800d5e0 <ESTTC_ProcessData+0x1df8>)
 800d406:	f7fe f929 	bl	800b65c <fwrite>
                        break;
 800d40a:	f001 bb32 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                    case ESTTC_CMD_SET_DATA: //0x34:   // set date
                        sDate.Year = (uint16_t)((txline[Interface][7]-0x30)*10 + (txline[Interface][8]-0x30));
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	4a6e      	ldr	r2, [pc, #440]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d412:	021b      	lsls	r3, r3, #8
 800d414:	4413      	add	r3, r2
 800d416:	3307      	adds	r3, #7
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	3b30      	subs	r3, #48	; 0x30
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	461a      	mov	r2, r3
 800d420:	0092      	lsls	r2, r2, #2
 800d422:	4413      	add	r3, r2
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	b2da      	uxtb	r2, r3
 800d428:	79fb      	ldrb	r3, [r7, #7]
 800d42a:	4968      	ldr	r1, [pc, #416]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d42c:	021b      	lsls	r3, r3, #8
 800d42e:	440b      	add	r3, r1
 800d430:	3308      	adds	r3, #8
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	4413      	add	r3, r2
 800d436:	b2db      	uxtb	r3, r3
 800d438:	3b30      	subs	r3, #48	; 0x30
 800d43a:	b2da      	uxtb	r2, r3
 800d43c:	4b69      	ldr	r3, [pc, #420]	; (800d5e4 <ESTTC_ProcessData+0x1dfc>)
 800d43e:	70da      	strb	r2, [r3, #3]
                        sDate.Month = (uint16_t)((txline[Interface][9]-0x30)*10 + (txline[Interface][10]-0x30));
 800d440:	79fb      	ldrb	r3, [r7, #7]
 800d442:	4a62      	ldr	r2, [pc, #392]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d444:	021b      	lsls	r3, r3, #8
 800d446:	4413      	add	r3, r2
 800d448:	3309      	adds	r3, #9
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	3b30      	subs	r3, #48	; 0x30
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	461a      	mov	r2, r3
 800d452:	0092      	lsls	r2, r2, #2
 800d454:	4413      	add	r3, r2
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	495b      	ldr	r1, [pc, #364]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d45e:	021b      	lsls	r3, r3, #8
 800d460:	440b      	add	r3, r1
 800d462:	330a      	adds	r3, #10
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	4413      	add	r3, r2
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	3b30      	subs	r3, #48	; 0x30
 800d46c:	b2da      	uxtb	r2, r3
 800d46e:	4b5d      	ldr	r3, [pc, #372]	; (800d5e4 <ESTTC_ProcessData+0x1dfc>)
 800d470:	705a      	strb	r2, [r3, #1]
                        sDate.Date = (uint16_t)((txline[Interface][11]-0x30)*10 + (txline[Interface][12]-0x30));
 800d472:	79fb      	ldrb	r3, [r7, #7]
 800d474:	4a55      	ldr	r2, [pc, #340]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d476:	021b      	lsls	r3, r3, #8
 800d478:	4413      	add	r3, r2
 800d47a:	330b      	adds	r3, #11
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	3b30      	subs	r3, #48	; 0x30
 800d480:	b2db      	uxtb	r3, r3
 800d482:	461a      	mov	r2, r3
 800d484:	0092      	lsls	r2, r2, #2
 800d486:	4413      	add	r3, r2
 800d488:	005b      	lsls	r3, r3, #1
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	79fb      	ldrb	r3, [r7, #7]
 800d48e:	494f      	ldr	r1, [pc, #316]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d490:	021b      	lsls	r3, r3, #8
 800d492:	440b      	add	r3, r1
 800d494:	330c      	adds	r3, #12
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	4413      	add	r3, r2
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	3b30      	subs	r3, #48	; 0x30
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	4b50      	ldr	r3, [pc, #320]	; (800d5e4 <ESTTC_ProcessData+0x1dfc>)
 800d4a2:	709a      	strb	r2, [r3, #2]
                        if (HAL_OK == HAL_RTC_SetDate(&hrtc, &sDate, calendar_format))
 800d4a4:	4b4b      	ldr	r3, [pc, #300]	; (800d5d4 <ESTTC_ProcessData+0x1dec>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	494e      	ldr	r1, [pc, #312]	; (800d5e4 <ESTTC_ProcessData+0x1dfc>)
 800d4ac:	484a      	ldr	r0, [pc, #296]	; (800d5d8 <ESTTC_ProcessData+0x1df0>)
 800d4ae:	f7f8 f969 	bl	8005784 <HAL_RTC_SetDate>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10f      	bne.n	800d4d8 <ESTTC_ProcessData+0x1cf0>
                          fprintf(ComInterface, "OK DATE YY/MM/DD %d / %d / %d  \r", sDate.Year, sDate.Month, sDate.Date);
 800d4b8:	4b4a      	ldr	r3, [pc, #296]	; (800d5e4 <ESTTC_ProcessData+0x1dfc>)
 800d4ba:	78db      	ldrb	r3, [r3, #3]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4b49      	ldr	r3, [pc, #292]	; (800d5e4 <ESTTC_ProcessData+0x1dfc>)
 800d4c0:	785b      	ldrb	r3, [r3, #1]
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	4b47      	ldr	r3, [pc, #284]	; (800d5e4 <ESTTC_ProcessData+0x1dfc>)
 800d4c6:	789b      	ldrb	r3, [r3, #2]
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	4946      	ldr	r1, [pc, #280]	; (800d5e8 <ESTTC_ProcessData+0x1e00>)
 800d4ce:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d4d0:	f009 feb4 	bl	801723c <fiprintf>
                        else
                          fprintf(ComInterface, "ERR exe\r");
                    break;
 800d4d4:	f001 bacd 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                          fprintf(ComInterface, "ERR exe\r");
 800d4d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4da:	2208      	movs	r2, #8
 800d4dc:	2101      	movs	r1, #1
 800d4de:	4840      	ldr	r0, [pc, #256]	; (800d5e0 <ESTTC_ProcessData+0x1df8>)
 800d4e0:	f7fe f8bc 	bl	800b65c <fwrite>
                    break;
 800d4e4:	f001 bac5 	b.w	800ea72 <ESTTC_ProcessData+0x328a>



                    case ESTTC_CMD_PAR_NUM: // Conditional RESET
                      if ((txline[Interface][6] == 1) && (txline[Interface][7] == 0xA))
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	4a38      	ldr	r2, [pc, #224]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d4ec:	021b      	lsls	r3, r3, #8
 800d4ee:	4413      	add	r3, r2
 800d4f0:	3306      	adds	r3, #6
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d111      	bne.n	800d51c <ESTTC_ProcessData+0x1d34>
 800d4f8:	79fb      	ldrb	r3, [r7, #7]
 800d4fa:	4a34      	ldr	r2, [pc, #208]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d4fc:	021b      	lsls	r3, r3, #8
 800d4fe:	4413      	add	r3, r2
 800d500:	3307      	adds	r3, #7
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	2b0a      	cmp	r3, #10
 800d506:	d109      	bne.n	800d51c <ESTTC_ProcessData+0x1d34>
                      {
                        fprintf(ComInterface, "\nOK+APPL\r");
 800d508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d50a:	2209      	movs	r2, #9
 800d50c:	2101      	movs	r1, #1
 800d50e:	4837      	ldr	r0, [pc, #220]	; (800d5ec <ESTTC_ProcessData+0x1e04>)
 800d510:	f7fe f8a4 	bl	800b65c <fwrite>
                        *((__IO uint32_t *)MAILBOX_ADDRESS) = MAILBOX_VAL_APPL;
 800d514:	4b36      	ldr	r3, [pc, #216]	; (800d5f0 <ESTTC_ProcessData+0x1e08>)
 800d516:	4a37      	ldr	r2, [pc, #220]	; (800d5f4 <ESTTC_ProcessData+0x1e0c>)
 800d518:	601a      	str	r2, [r3, #0]
 800d51a:	e039      	b.n	800d590 <ESTTC_ProcessData+0x1da8>
                      }
                      else
                      if ((txline[Interface][6] == 1) && (txline[Interface][7] == 0xB))
 800d51c:	79fb      	ldrb	r3, [r7, #7]
 800d51e:	4a2b      	ldr	r2, [pc, #172]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d520:	021b      	lsls	r3, r3, #8
 800d522:	4413      	add	r3, r2
 800d524:	3306      	adds	r3, #6
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d111      	bne.n	800d550 <ESTTC_ProcessData+0x1d68>
 800d52c:	79fb      	ldrb	r3, [r7, #7]
 800d52e:	4a27      	ldr	r2, [pc, #156]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d530:	021b      	lsls	r3, r3, #8
 800d532:	4413      	add	r3, r2
 800d534:	3307      	adds	r3, #7
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	2b0b      	cmp	r3, #11
 800d53a:	d109      	bne.n	800d550 <ESTTC_ProcessData+0x1d68>
                      {
                        fprintf(ComInterface, "\nOK+BOOT\r");
 800d53c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d53e:	2209      	movs	r2, #9
 800d540:	2101      	movs	r1, #1
 800d542:	482d      	ldr	r0, [pc, #180]	; (800d5f8 <ESTTC_ProcessData+0x1e10>)
 800d544:	f7fe f88a 	bl	800b65c <fwrite>
                        *((__IO uint32_t *)MAILBOX_ADDRESS) = MAILBOX_VAL_BOOT;
 800d548:	4b29      	ldr	r3, [pc, #164]	; (800d5f0 <ESTTC_ProcessData+0x1e08>)
 800d54a:	4a2c      	ldr	r2, [pc, #176]	; (800d5fc <ESTTC_ProcessData+0x1e14>)
 800d54c:	601a      	str	r2, [r3, #0]
 800d54e:	e01f      	b.n	800d590 <ESTTC_ProcessData+0x1da8>
                      }
                      else
                      if ((txline[Interface][6] == 1) && (txline[Interface][7] == 0xF))
 800d550:	79fb      	ldrb	r3, [r7, #7]
 800d552:	4a1e      	ldr	r2, [pc, #120]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d554:	021b      	lsls	r3, r3, #8
 800d556:	4413      	add	r3, r2
 800d558:	3306      	adds	r3, #6
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d111      	bne.n	800d584 <ESTTC_ProcessData+0x1d9c>
 800d560:	79fb      	ldrb	r3, [r7, #7]
 800d562:	4a1a      	ldr	r2, [pc, #104]	; (800d5cc <ESTTC_ProcessData+0x1de4>)
 800d564:	021b      	lsls	r3, r3, #8
 800d566:	4413      	add	r3, r2
 800d568:	3307      	adds	r3, #7
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b0f      	cmp	r3, #15
 800d56e:	d109      	bne.n	800d584 <ESTTC_ProcessData+0x1d9c>
                      {
                        fprintf(ComInterface, "\nOK+FILE\r");
 800d570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d572:	2209      	movs	r2, #9
 800d574:	2101      	movs	r1, #1
 800d576:	4822      	ldr	r0, [pc, #136]	; (800d600 <ESTTC_ProcessData+0x1e18>)
 800d578:	f7fe f870 	bl	800b65c <fwrite>
                        *((__IO uint32_t *)MAILBOX_ADDRESS) = MAILBOX_VAL_FILE;
 800d57c:	4b1c      	ldr	r3, [pc, #112]	; (800d5f0 <ESTTC_ProcessData+0x1e08>)
 800d57e:	4a21      	ldr	r2, [pc, #132]	; (800d604 <ESTTC_ProcessData+0x1e1c>)
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	e005      	b.n	800d590 <ESTTC_ProcessData+0x1da8>
                      }
                      else
                        fprintf(ComInterface, "\nERR\r");
 800d584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d586:	2205      	movs	r2, #5
 800d588:	2101      	movs	r1, #1
 800d58a:	481f      	ldr	r0, [pc, #124]	; (800d608 <ESTTC_ProcessData+0x1e20>)
 800d58c:	f7fe f866 	bl	800b65c <fwrite>
                      osDelay(50);
 800d590:	2032      	movs	r0, #50	; 0x32
 800d592:	f007 f864 	bl	801465e <osDelay>
                      MX_WWDG_Init();
 800d596:	f002 faa1 	bl	800fadc <MX_WWDG_Init>
                      while(1);
 800d59a:	e7fe      	b.n	800d59a <ESTTC_ProcessData+0x1db2>
                      break;

                    default:
                      fprintf(ComInterface, "ERR parm\r");
 800d59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d59e:	2209      	movs	r2, #9
 800d5a0:	2101      	movs	r1, #1
 800d5a2:	481a      	ldr	r0, [pc, #104]	; (800d60c <ESTTC_ProcessData+0x1e24>)
 800d5a4:	f7fe f85a 	bl	800b65c <fwrite>
                      break;
 800d5a8:	f001 ba63 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                  } // switch case
                } // txline[Interface][6]
                else
                  fprintf(ComInterface, "ERR len\r");
 800d5ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5ae:	2208      	movs	r2, #8
 800d5b0:	2101      	movs	r1, #1
 800d5b2:	4817      	ldr	r0, [pc, #92]	; (800d610 <ESTTC_ProcessData+0x1e28>)
 800d5b4:	f7fe f852 	bl	800b65c <fwrite>
 800d5b8:	f001 ba5b 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
              } // txline[Interface][5]
              else
                fprintf(ComInterface, "ERR parm\r");
 800d5bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5be:	2209      	movs	r2, #9
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	4812      	ldr	r0, [pc, #72]	; (800d60c <ESTTC_ProcessData+0x1e24>)
 800d5c4:	f7fe f84a 	bl	800b65c <fwrite>
 800d5c8:	f001 ba53 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800d5cc:	20000464 	.word	0x20000464
 800d5d0:	200096d8 	.word	0x200096d8
 800d5d4:	200084e0 	.word	0x200084e0
 800d5d8:	200098b0 	.word	0x200098b0
 800d5dc:	0801b284 	.word	0x0801b284
 800d5e0:	0801ad60 	.word	0x0801ad60
 800d5e4:	200098ac 	.word	0x200098ac
 800d5e8:	0801b2a0 	.word	0x0801b2a0
 800d5ec:	0801b5b8 	.word	0x0801b5b8
 800d5f0:	40002854 	.word	0x40002854
 800d5f4:	a552a552 	.word	0xa552a552
 800d5f8:	0801b5c4 	.word	0x0801b5c4
 800d5fc:	b007b007 	.word	0xb007b007
 800d600:	0801b5d0 	.word	0x0801b5d0
 800d604:	f12ef12e 	.word	0xf12ef12e
 800d608:	0801b5dc 	.word	0x0801b5dc
 800d60c:	0801b33c 	.word	0x0801b33c
 800d610:	0801b370 	.word	0x0801b370
            } // txline[Interface] [4]
            else
            if (txline[Interface][4] == UHF_I2C_ADDRESS)
 800d614:	79fb      	ldrb	r3, [r7, #7]
 800d616:	4abf      	ldr	r2, [pc, #764]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d618:	021b      	lsls	r3, r3, #8
 800d61a:	4413      	add	r3, r2
 800d61c:	3304      	adds	r3, #4
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2b22      	cmp	r3, #34	; 0x22
 800d622:	d143      	bne.n	800d6ac <ESTTC_ProcessData+0x1ec4>
            {
              if (txline[Interface][6] == ((len-10)/2))
 800d624:	79fb      	ldrb	r3, [r7, #7]
 800d626:	4abb      	ldr	r2, [pc, #748]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d628:	021b      	lsls	r3, r3, #8
 800d62a:	4413      	add	r3, r2
 800d62c:	3306      	adds	r3, #6
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	461a      	mov	r2, r3
 800d632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d634:	3b0a      	subs	r3, #10
 800d636:	085b      	lsrs	r3, r3, #1
 800d638:	429a      	cmp	r2, r3
 800d63a:	d12f      	bne.n	800d69c <ESTTC_ProcessData+0x1eb4>
              {
                if (HAL_OK == HAL_I2C_Mem_Write(&hi2c1, UHF_I2C_ADDRESS<<1, txline[Interface][5], 1, (uint8_t *)&txline[Interface][7], txline[Interface][6], 10))
 800d63c:	79fb      	ldrb	r3, [r7, #7]
 800d63e:	4ab5      	ldr	r2, [pc, #724]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d640:	021b      	lsls	r3, r3, #8
 800d642:	4413      	add	r3, r2
 800d644:	3305      	adds	r3, #5
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	b299      	uxth	r1, r3
 800d64a:	79fb      	ldrb	r3, [r7, #7]
 800d64c:	021b      	lsls	r3, r3, #8
 800d64e:	3307      	adds	r3, #7
 800d650:	4ab0      	ldr	r2, [pc, #704]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d652:	4413      	add	r3, r2
 800d654:	79fa      	ldrb	r2, [r7, #7]
 800d656:	48af      	ldr	r0, [pc, #700]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d658:	0212      	lsls	r2, r2, #8
 800d65a:	4402      	add	r2, r0
 800d65c:	3206      	adds	r2, #6
 800d65e:	7812      	ldrb	r2, [r2, #0]
 800d660:	b292      	uxth	r2, r2
 800d662:	200a      	movs	r0, #10
 800d664:	9002      	str	r0, [sp, #8]
 800d666:	9201      	str	r2, [sp, #4]
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	2301      	movs	r3, #1
 800d66c:	460a      	mov	r2, r1
 800d66e:	2144      	movs	r1, #68	; 0x44
 800d670:	48a9      	ldr	r0, [pc, #676]	; (800d918 <ESTTC_ProcessData+0x2130>)
 800d672:	f7f6 f8b9 	bl	80037e8 <HAL_I2C_Mem_Write>
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d107      	bne.n	800d68c <ESTTC_ProcessData+0x1ea4>
                    fprintf(ComInterface, "OK\r");
 800d67c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d67e:	2203      	movs	r2, #3
 800d680:	2101      	movs	r1, #1
 800d682:	48a6      	ldr	r0, [pc, #664]	; (800d91c <ESTTC_ProcessData+0x2134>)
 800d684:	f7fd ffea 	bl	800b65c <fwrite>
 800d688:	f001 b9f3 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                else
                  fprintf(ComInterface, "ERR exe\r");
 800d68c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d68e:	2208      	movs	r2, #8
 800d690:	2101      	movs	r1, #1
 800d692:	48a3      	ldr	r0, [pc, #652]	; (800d920 <ESTTC_ProcessData+0x2138>)
 800d694:	f7fd ffe2 	bl	800b65c <fwrite>
 800d698:	f001 b9eb 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
              }
              else
                fprintf(ComInterface, "ERR len\r");
 800d69c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d69e:	2208      	movs	r2, #8
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	48a0      	ldr	r0, [pc, #640]	; (800d924 <ESTTC_ProcessData+0x213c>)
 800d6a4:	f7fd ffda 	bl	800b65c <fwrite>
 800d6a8:	f001 b9e3 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
            }
            else
              fprintf(ComInterface, "ERR addr\r");
 800d6ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6ae:	2209      	movs	r2, #9
 800d6b0:	2101      	movs	r1, #1
 800d6b2:	489d      	ldr	r0, [pc, #628]	; (800d928 <ESTTC_ProcessData+0x2140>)
 800d6b4:	f7fd ffd2 	bl	800b65c <fwrite>
 800d6b8:	f001 b9db 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
          }
          else
          if (txline[Interface][3] == 'D')
 800d6bc:	79fb      	ldrb	r3, [r7, #7]
 800d6be:	4a95      	ldr	r2, [pc, #596]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d6c0:	021b      	lsls	r3, r3, #8
 800d6c2:	4413      	add	r3, r2
 800d6c4:	3303      	adds	r3, #3
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b44      	cmp	r3, #68	; 0x44
 800d6ca:	f041 81bd 	bne.w	800ea48 <ESTTC_ProcessData+0x3260>
          {
            if (txline[Interface][4] == OBC_I2C_ADDRESS)
 800d6ce:	79fb      	ldrb	r3, [r7, #7]
 800d6d0:	4a90      	ldr	r2, [pc, #576]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d6d2:	021b      	lsls	r3, r3, #8
 800d6d4:	4413      	add	r3, r2
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	2b11      	cmp	r3, #17
 800d6dc:	f041 81c4 	bne.w	800ea68 <ESTTC_ProcessData+0x3280>
            {
              if (begin[6] == 'F')
 800d6e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6e2:	3306      	adds	r3, #6
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b46      	cmp	r3, #70	; 0x46
 800d6e8:	f041 81be 	bne.w	800ea68 <ESTTC_ProcessData+0x3280>
              {
                switch(begin[7])
 800d6ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6ee:	3307      	adds	r3, #7
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	3b41      	subs	r3, #65	; 0x41
 800d6f4:	2b16      	cmp	r3, #22
 800d6f6:	f201 819f 	bhi.w	800ea38 <ESTTC_ProcessData+0x3250>
 800d6fa:	a201      	add	r2, pc, #4	; (adr r2, 800d700 <ESTTC_ProcessData+0x1f18>)
 800d6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d700:	0800d75d 	.word	0x0800d75d
 800d704:	0800ea39 	.word	0x0800ea39
 800d708:	0800dca5 	.word	0x0800dca5
 800d70c:	0800e6eb 	.word	0x0800e6eb
 800d710:	0800ea39 	.word	0x0800ea39
 800d714:	0800ea39 	.word	0x0800ea39
 800d718:	0800ea39 	.word	0x0800ea39
 800d71c:	0800ea39 	.word	0x0800ea39
 800d720:	0800df49 	.word	0x0800df49
 800d724:	0800ea39 	.word	0x0800ea39
 800d728:	0800ea39 	.word	0x0800ea39
 800d72c:	0800e761 	.word	0x0800e761
 800d730:	0800ea39 	.word	0x0800ea39
 800d734:	0800ea39 	.word	0x0800ea39
 800d738:	0800e353 	.word	0x0800e353
 800d73c:	0800ea39 	.word	0x0800ea39
 800d740:	0800ea39 	.word	0x0800ea39
 800d744:	0800e083 	.word	0x0800e083
 800d748:	0800dce1 	.word	0x0800dce1
 800d74c:	0800ea39 	.word	0x0800ea39
 800d750:	0800ea39 	.word	0x0800ea39
 800d754:	0800ea39 	.word	0x0800ea39
 800d758:	0800e3e3 	.word	0x0800e3e3
                {
                  case 'A':
                    if (*((__IO uint32_t*)MAILBOX_ADDRESS) == MAILBOX_VAL_APPL)
 800d75c:	4b73      	ldr	r3, [pc, #460]	; (800d92c <ESTTC_ProcessData+0x2144>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a73      	ldr	r2, [pc, #460]	; (800d930 <ESTTC_ProcessData+0x2148>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d107      	bne.n	800d776 <ESTTC_ProcessData+0x1f8e>
                    {
                      fprintf(ComInterface, "ERR+INAPP\r");
 800d766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d768:	220a      	movs	r2, #10
 800d76a:	2101      	movs	r1, #1
 800d76c:	4871      	ldr	r0, [pc, #452]	; (800d934 <ESTTC_ProcessData+0x214c>)
 800d76e:	f7fd ff75 	bl	800b65c <fwrite>
                      break;
 800d772:	f001 b97e 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    if (df[Interface].fs) f_close(&df[Interface]);
 800d776:	79fb      	ldrb	r3, [r7, #7]
 800d778:	4a6f      	ldr	r2, [pc, #444]	; (800d938 <ESTTC_ProcessData+0x2150>)
 800d77a:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800d77e:	fb01 f303 	mul.w	r3, r1, r3
 800d782:	4413      	add	r3, r2
 800d784:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d009      	beq.n	800d7a2 <ESTTC_ProcessData+0x1fba>
 800d78e:	79fb      	ldrb	r3, [r7, #7]
 800d790:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d794:	fb02 f303 	mul.w	r3, r2, r3
 800d798:	4a67      	ldr	r2, [pc, #412]	; (800d938 <ESTTC_ProcessData+0x2150>)
 800d79a:	4413      	add	r3, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f006 f86d 	bl	801387c <f_close>
                    sprintf(txline[Interface], "0:/%s", &begin[8]);
 800d7a2:	79fb      	ldrb	r3, [r7, #7]
 800d7a4:	021b      	lsls	r3, r3, #8
 800d7a6:	4a5b      	ldr	r2, [pc, #364]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d7a8:	1898      	adds	r0, r3, r2
 800d7aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7ac:	3308      	adds	r3, #8
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	4962      	ldr	r1, [pc, #392]	; (800d93c <ESTTC_ProcessData+0x2154>)
 800d7b2:	f00a fc1d 	bl	8017ff0 <siprintf>
                    if (FR_OK != (fr = f_open(&df[Interface], txline[Interface], FA_READ | FA_OPEN_EXISTING)))
 800d7b6:	79fb      	ldrb	r3, [r7, #7]
 800d7b8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d7bc:	fb02 f303 	mul.w	r3, r2, r3
 800d7c0:	4a5d      	ldr	r2, [pc, #372]	; (800d938 <ESTTC_ProcessData+0x2150>)
 800d7c2:	1898      	adds	r0, r3, r2
 800d7c4:	79fb      	ldrb	r3, [r7, #7]
 800d7c6:	021b      	lsls	r3, r3, #8
 800d7c8:	4a52      	ldr	r2, [pc, #328]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d7ca:	4413      	add	r3, r2
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	f005 f9ca 	bl	8012b68 <f_open>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800d7da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00b      	beq.n	800d7fa <ESTTC_ProcessData+0x2012>
                    {
                      fprintf(ComInterface, "ERR+FNF(%u)=%s\r", fr, txline[Interface]);
 800d7e2:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800d7e6:	79fb      	ldrb	r3, [r7, #7]
 800d7e8:	021b      	lsls	r3, r3, #8
 800d7ea:	494a      	ldr	r1, [pc, #296]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d7ec:	440b      	add	r3, r1
 800d7ee:	4954      	ldr	r1, [pc, #336]	; (800d940 <ESTTC_ProcessData+0x2158>)
 800d7f0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d7f2:	f009 fd23 	bl	801723c <fiprintf>
                      break;
 800d7f6:	f001 b93c 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    else{
                        if (FR_OK == f_stat(txline[Interface], &fno[Interface]) )
 800d7fa:	79fb      	ldrb	r3, [r7, #7]
 800d7fc:	021b      	lsls	r3, r3, #8
 800d7fe:	4a45      	ldr	r2, [pc, #276]	; (800d914 <ESTTC_ProcessData+0x212c>)
 800d800:	1898      	adds	r0, r3, r2
 800d802:	79fa      	ldrb	r2, [r7, #7]
 800d804:	4613      	mov	r3, r2
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	4413      	add	r3, r2
 800d80a:	00db      	lsls	r3, r3, #3
 800d80c:	4a4d      	ldr	r2, [pc, #308]	; (800d944 <ESTTC_ProcessData+0x215c>)
 800d80e:	4413      	add	r3, r2
 800d810:	4619      	mov	r1, r3
 800d812:	f006 fc50 	bl	80140b6 <f_stat>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d14a      	bne.n	800d8b2 <ESTTC_ProcessData+0x20ca>
                        {
                            if( fno[Interface].fsize < 0xFFFF )
 800d81c:	79fa      	ldrb	r2, [r7, #7]
 800d81e:	4949      	ldr	r1, [pc, #292]	; (800d944 <ESTTC_ProcessData+0x215c>)
 800d820:	4613      	mov	r3, r2
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	4413      	add	r3, r2
 800d826:	00db      	lsls	r3, r3, #3
 800d828:	440b      	add	r3, r1
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d830:	4293      	cmp	r3, r2
 800d832:	d810      	bhi.n	800d856 <ESTTC_ProcessData+0x206e>
                            {
                              fprintf(ComInterface, "OK+%08X B\r", (uint16_t)(f_size(&df[Interface])));
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	4a40      	ldr	r2, [pc, #256]	; (800d938 <ESTTC_ProcessData+0x2150>)
 800d838:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800d83c:	fb01 f303 	mul.w	r3, r1, r3
 800d840:	4413      	add	r3, r2
 800d842:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	b29b      	uxth	r3, r3
 800d84a:	461a      	mov	r2, r3
 800d84c:	493e      	ldr	r1, [pc, #248]	; (800d948 <ESTTC_ProcessData+0x2160>)
 800d84e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d850:	f009 fcf4 	bl	801723c <fiprintf>
 800d854:	e02d      	b.n	800d8b2 <ESTTC_ProcessData+0x20ca>
                            }else if( fno[Interface].fsize < 0x3FFFFF )
 800d856:	79fa      	ldrb	r2, [r7, #7]
 800d858:	493a      	ldr	r1, [pc, #232]	; (800d944 <ESTTC_ProcessData+0x215c>)
 800d85a:	4613      	mov	r3, r2
 800d85c:	005b      	lsls	r3, r3, #1
 800d85e:	4413      	add	r3, r2
 800d860:	00db      	lsls	r3, r3, #3
 800d862:	440b      	add	r3, r1
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4a39      	ldr	r2, [pc, #228]	; (800d94c <ESTTC_ProcessData+0x2164>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d811      	bhi.n	800d890 <ESTTC_ProcessData+0x20a8>
                            {
                              fprintf(ComInterface, "OK+%08X kB\r", (uint16_t)(f_size(&df[Interface])>>10));
 800d86c:	79fb      	ldrb	r3, [r7, #7]
 800d86e:	4a32      	ldr	r2, [pc, #200]	; (800d938 <ESTTC_ProcessData+0x2150>)
 800d870:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800d874:	fb01 f303 	mul.w	r3, r1, r3
 800d878:	4413      	add	r3, r2
 800d87a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	0a9b      	lsrs	r3, r3, #10
 800d882:	b29b      	uxth	r3, r3
 800d884:	461a      	mov	r2, r3
 800d886:	4932      	ldr	r1, [pc, #200]	; (800d950 <ESTTC_ProcessData+0x2168>)
 800d888:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d88a:	f009 fcd7 	bl	801723c <fiprintf>
 800d88e:	e010      	b.n	800d8b2 <ESTTC_ProcessData+0x20ca>
                            }else
                            {
                                fprintf(ComInterface, "OK+%08X MB\r", (uint16_t)(f_size(&df[Interface])>>20));
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	4a29      	ldr	r2, [pc, #164]	; (800d938 <ESTTC_ProcessData+0x2150>)
 800d894:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800d898:	fb01 f303 	mul.w	r3, r1, r3
 800d89c:	4413      	add	r3, r2
 800d89e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	0d1b      	lsrs	r3, r3, #20
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	492a      	ldr	r1, [pc, #168]	; (800d954 <ESTTC_ProcessData+0x216c>)
 800d8ac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d8ae:	f009 fcc5 	bl	801723c <fiprintf>
                            }
                        }
                    }

                    fprintf(ComInterface, "Erasing FLASH...\n\r");
 800d8b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8b4:	2212      	movs	r2, #18
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	4827      	ldr	r0, [pc, #156]	; (800d958 <ESTTC_ProcessData+0x2170>)
 800d8ba:	f7fd fecf 	bl	800b65c <fwrite>
                    if (HAL_OK != HAL_FLASH_Unlock())
 800d8be:	f7f4 fdb5 	bl	800242c <HAL_FLASH_Unlock>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d011      	beq.n	800d8ec <ESTTC_ProcessData+0x2104>
                    {
                      f_close(&df[Interface]);
 800d8c8:	79fb      	ldrb	r3, [r7, #7]
 800d8ca:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d8ce:	fb02 f303 	mul.w	r3, r2, r3
 800d8d2:	4a19      	ldr	r2, [pc, #100]	; (800d938 <ESTTC_ProcessData+0x2150>)
 800d8d4:	4413      	add	r3, r2
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f005 ffd0 	bl	801387c <f_close>
                      fprintf(ComInterface, "ERR+FU\r");
 800d8dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8de:	2207      	movs	r2, #7
 800d8e0:	2101      	movs	r1, #1
 800d8e2:	481e      	ldr	r0, [pc, #120]	; (800d95c <ESTTC_ProcessData+0x2174>)
 800d8e4:	f7fd feba 	bl	800b65c <fwrite>
                      break;
 800d8e8:	f001 b8c3 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    //FLASH_SetErrorCode();
                    // Calculate number of sectors
                    bsize[Interface] = (f_size(&df[Interface]) + FLASH_SECTOR_SIZE) / FLASH_SECTOR_SIZE;
 800d8ec:	79fb      	ldrb	r3, [r7, #7]
 800d8ee:	4a12      	ldr	r2, [pc, #72]	; (800d938 <ESTTC_ProcessData+0x2150>)
 800d8f0:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800d8f4:	fb01 f303 	mul.w	r3, r1, r3
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f503 3200 	add.w	r2, r3, #131072	; 0x20000
 800d904:	79fb      	ldrb	r3, [r7, #7]
 800d906:	0c52      	lsrs	r2, r2, #17
 800d908:	4915      	ldr	r1, [pc, #84]	; (800d960 <ESTTC_ProcessData+0x2178>)
 800d90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    for (i = FLASH_MIN_SECTOR; i < FLASH_MIN_SECTOR + bsize[Interface]; i++)
 800d90e:	2306      	movs	r3, #6
 800d910:	677b      	str	r3, [r7, #116]	; 0x74
 800d912:	e058      	b.n	800d9c6 <ESTTC_ProcessData+0x21de>
 800d914:	20000464 	.word	0x20000464
 800d918:	20009684 	.word	0x20009684
 800d91c:	0801b36c 	.word	0x0801b36c
 800d920:	0801ad60 	.word	0x0801ad60
 800d924:	0801b370 	.word	0x0801b370
 800d928:	0801b360 	.word	0x0801b360
 800d92c:	40002854 	.word	0x40002854
 800d930:	a552a552 	.word	0xa552a552
 800d934:	0801b5e4 	.word	0x0801b5e4
 800d938:	20008518 	.word	0x20008518
 800d93c:	0801b5f0 	.word	0x0801b5f0
 800d940:	0801b5f8 	.word	0x0801b5f8
 800d944:	20000a7c 	.word	0x20000a7c
 800d948:	0801b608 	.word	0x0801b608
 800d94c:	003ffffe 	.word	0x003ffffe
 800d950:	0801b614 	.word	0x0801b614
 800d954:	0801b620 	.word	0x0801b620
 800d958:	0801b62c 	.word	0x0801b62c
 800d95c:	0801b640 	.word	0x0801b640
 800d960:	20000a70 	.word	0x20000a70
                    {
                      fes.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d964:	2300      	movs	r3, #0
 800d966:	613b      	str	r3, [r7, #16]
                      fes.NbSectors = 1;
 800d968:	2301      	movs	r3, #1
 800d96a:	61fb      	str	r3, [r7, #28]
                      fes.Sector = i;
 800d96c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d96e:	61bb      	str	r3, [r7, #24]
                      fes.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d970:	2302      	movs	r3, #2
 800d972:	623b      	str	r3, [r7, #32]
                      if (HAL_OK != HAL_FLASHEx_Erase(&fes, &se))
 800d974:	f107 020c 	add.w	r2, r7, #12
 800d978:	f107 0310 	add.w	r3, r7, #16
 800d97c:	4611      	mov	r1, r2
 800d97e:	4618      	mov	r0, r3
 800d980:	f7f4 feac 	bl	80026dc <HAL_FLASHEx_Erase>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d013      	beq.n	800d9b2 <ESTTC_ProcessData+0x21ca>
                      {
                        f_close(&df[Interface]);
 800d98a:	79fb      	ldrb	r3, [r7, #7]
 800d98c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d990:	fb02 f303 	mul.w	r3, r2, r3
 800d994:	4a9e      	ldr	r2, [pc, #632]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800d996:	4413      	add	r3, r2
 800d998:	4618      	mov	r0, r3
 800d99a:	f005 ff6f 	bl	801387c <f_close>
                        fprintf(ComInterface, "ERR+FBSE%u@%u\r", (uint16_t)se, (uint16_t)i);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	499a      	ldr	r1, [pc, #616]	; (800dc14 <ESTTC_ProcessData+0x242c>)
 800d9aa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d9ac:	f009 fc46 	bl	801723c <fiprintf>
                        break;
 800d9b0:	e011      	b.n	800d9d6 <ESTTC_ProcessData+0x21ee>
                      }
                      fprintf(ComInterface, "Sector%u erased.\n\r", (uint16_t)i);
 800d9b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	4997      	ldr	r1, [pc, #604]	; (800dc18 <ESTTC_ProcessData+0x2430>)
 800d9ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d9bc:	f009 fc3e 	bl	801723c <fiprintf>
                    for (i = FLASH_MIN_SECTOR; i < FLASH_MIN_SECTOR + bsize[Interface]; i++)
 800d9c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	677b      	str	r3, [r7, #116]	; 0x74
 800d9c6:	79fb      	ldrb	r3, [r7, #7]
 800d9c8:	4a94      	ldr	r2, [pc, #592]	; (800dc1c <ESTTC_ProcessData+0x2434>)
 800d9ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9ce:	3306      	adds	r3, #6
 800d9d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d3c6      	bcc.n	800d964 <ESTTC_ProcessData+0x217c>
                    }
                    fprintf(ComInterface, "BLANK CHECK...\n\r");
 800d9d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9d8:	2210      	movs	r2, #16
 800d9da:	2101      	movs	r1, #1
 800d9dc:	4890      	ldr	r0, [pc, #576]	; (800dc20 <ESTTC_ProcessData+0x2438>)
 800d9de:	f7fd fe3d 	bl	800b65c <fwrite>
                    if (HAL_OK != (se = FLASH_PatternCheck(FLASH_MIN_ADDR, FLASH_BLANK, f_size(&df[Interface]))))
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	4a8a      	ldr	r2, [pc, #552]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800d9e6:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800d9ea:	fb01 f303 	mul.w	r3, r1, r3
 800d9ee:	4413      	add	r3, r2
 800d9f0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	21ff      	movs	r1, #255	; 0xff
 800d9fa:	488a      	ldr	r0, [pc, #552]	; (800dc24 <ESTTC_ProcessData+0x243c>)
 800d9fc:	f001 f990 	bl	800ed20 <FLASH_PatternCheck>
 800da00:	4603      	mov	r3, r0
 800da02:	60fb      	str	r3, [r7, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d021      	beq.n	800da4e <ESTTC_ProcessData+0x2266>
                    {
                      f_close(&df[Interface]);
 800da0a:	79fb      	ldrb	r3, [r7, #7]
 800da0c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800da10:	fb02 f303 	mul.w	r3, r2, r3
 800da14:	4a7e      	ldr	r2, [pc, #504]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800da16:	4413      	add	r3, r2
 800da18:	4618      	mov	r0, r3
 800da1a:	f005 ff2f 	bl	801387c <f_close>

                      fprintf(COMM, "ERR+FB%08X addr=%08X size=%08X\r", (uint16_t)se, (uint16_t)FLASH_MIN_ADDR, (uint16_t)df[Interface].fsize);
 800da1e:	4b82      	ldr	r3, [pc, #520]	; (800dc28 <ESTTC_ProcessData+0x2440>)
 800da20:	6818      	ldr	r0, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	b29b      	uxth	r3, r3
 800da26:	461c      	mov	r4, r3
 800da28:	79fb      	ldrb	r3, [r7, #7]
 800da2a:	4a79      	ldr	r2, [pc, #484]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800da2c:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800da30:	fb01 f303 	mul.w	r3, r1, r3
 800da34:	4413      	add	r3, r2
 800da36:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	2300      	movs	r3, #0
 800da42:	4622      	mov	r2, r4
 800da44:	4979      	ldr	r1, [pc, #484]	; (800dc2c <ESTTC_ProcessData+0x2444>)
 800da46:	f009 fbf9 	bl	801723c <fiprintf>

                      break;
 800da4a:	f001 b812 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    fprintf(ComInterface, "BLANK\n\r");
 800da4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da50:	2207      	movs	r2, #7
 800da52:	2101      	movs	r1, #1
 800da54:	4876      	ldr	r0, [pc, #472]	; (800dc30 <ESTTC_ProcessData+0x2448>)
 800da56:	f7fd fe01 	bl	800b65c <fwrite>
                    bsize[Interface] = sizeof(txline[Interface]);
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	4a6f      	ldr	r2, [pc, #444]	; (800dc1c <ESTTC_ProcessData+0x2434>)
 800da5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    for (fpos[Interface] = 0; fpos[Interface] < f_size(&df[Interface]); fpos[Interface] += bsize[Interface])
 800da66:	79fb      	ldrb	r3, [r7, #7]
 800da68:	4a72      	ldr	r2, [pc, #456]	; (800dc34 <ESTTC_ProcessData+0x244c>)
 800da6a:	2100      	movs	r1, #0
 800da6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800da70:	e098      	b.n	800dba4 <ESTTC_ProcessData+0x23bc>
                    {
                      if (f_size(&df[Interface]) - fpos[Interface] < bsize[Interface]) bsize[Interface] = f_size(&df[Interface]) - fpos[Interface]; // Last packet alignment
 800da72:	79fb      	ldrb	r3, [r7, #7]
 800da74:	4a66      	ldr	r2, [pc, #408]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800da76:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800da7a:	fb01 f303 	mul.w	r3, r1, r3
 800da7e:	4413      	add	r3, r2
 800da80:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	79fb      	ldrb	r3, [r7, #7]
 800da88:	496a      	ldr	r1, [pc, #424]	; (800dc34 <ESTTC_ProcessData+0x244c>)
 800da8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800da8e:	1ad2      	subs	r2, r2, r3
 800da90:	79fb      	ldrb	r3, [r7, #7]
 800da92:	4962      	ldr	r1, [pc, #392]	; (800dc1c <ESTTC_ProcessData+0x2434>)
 800da94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d212      	bcs.n	800dac2 <ESTTC_ProcessData+0x22da>
 800da9c:	79fb      	ldrb	r3, [r7, #7]
 800da9e:	4a5c      	ldr	r2, [pc, #368]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800daa0:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800daa4:	fb01 f303 	mul.w	r3, r1, r3
 800daa8:	4413      	add	r3, r2
 800daaa:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800daae:	6819      	ldr	r1, [r3, #0]
 800dab0:	79fb      	ldrb	r3, [r7, #7]
 800dab2:	4a60      	ldr	r2, [pc, #384]	; (800dc34 <ESTTC_ProcessData+0x244c>)
 800dab4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dab8:	79fb      	ldrb	r3, [r7, #7]
 800daba:	1a8a      	subs	r2, r1, r2
 800dabc:	4957      	ldr	r1, [pc, #348]	; (800dc1c <ESTTC_ProcessData+0x2434>)
 800dabe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                      if (FR_OK != (fr = f_read(&df[Interface], txline[Interface], bsize[Interface], (UINT*)&br)))
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800dac8:	fb02 f303 	mul.w	r3, r2, r3
 800dacc:	4a50      	ldr	r2, [pc, #320]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800dace:	1898      	adds	r0, r3, r2
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	021b      	lsls	r3, r3, #8
 800dad4:	4a58      	ldr	r2, [pc, #352]	; (800dc38 <ESTTC_ProcessData+0x2450>)
 800dad6:	1899      	adds	r1, r3, r2
 800dad8:	79fb      	ldrb	r3, [r7, #7]
 800dada:	4a50      	ldr	r2, [pc, #320]	; (800dc1c <ESTTC_ProcessData+0x2434>)
 800dadc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dae0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dae4:	f005 fa55 	bl	8012f92 <f_read>
 800dae8:	4603      	mov	r3, r0
 800daea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800daee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d008      	beq.n	800db08 <ESTTC_ProcessData+0x2320>
                      {
                        fprintf(ComInterface, "ERR+FIR(%u)=%u\r", (uint16_t)fr, (uint16_t)br);
 800daf6:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800dafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	494f      	ldr	r1, [pc, #316]	; (800dc3c <ESTTC_ProcessData+0x2454>)
 800db00:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800db02:	f009 fb9b 	bl	801723c <fiprintf>
                        break;
 800db06:	e05e      	b.n	800dbc6 <ESTTC_ProcessData+0x23de>
                      }
                      if (bsize[Interface] != br)
 800db08:	79fb      	ldrb	r3, [r7, #7]
 800db0a:	4a44      	ldr	r2, [pc, #272]	; (800dc1c <ESTTC_ProcessData+0x2434>)
 800db0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800db10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db12:	429a      	cmp	r2, r3
 800db14:	d00c      	beq.n	800db30 <ESTTC_ProcessData+0x2348>
                      {
                        fprintf(ComInterface, "ERR+FRS(%u)=%u\r", (uint16_t)bsize[Interface], (uint16_t)br);
 800db16:	79fb      	ldrb	r3, [r7, #7]
 800db18:	4a40      	ldr	r2, [pc, #256]	; (800dc1c <ESTTC_ProcessData+0x2434>)
 800db1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	461a      	mov	r2, r3
 800db22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db24:	b29b      	uxth	r3, r3
 800db26:	4946      	ldr	r1, [pc, #280]	; (800dc40 <ESTTC_ProcessData+0x2458>)
 800db28:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800db2a:	f009 fb87 	bl	801723c <fiprintf>
                        break;
 800db2e:	e04a      	b.n	800dbc6 <ESTTC_ProcessData+0x23de>
                      }
                      if (HAL_OK == (se = FLASH_Write((uint8_t *)txline[Interface], FLASH_MIN_ADDR+fpos[Interface], bsize[Interface])))
 800db30:	79fb      	ldrb	r3, [r7, #7]
 800db32:	021b      	lsls	r3, r3, #8
 800db34:	4a40      	ldr	r2, [pc, #256]	; (800dc38 <ESTTC_ProcessData+0x2450>)
 800db36:	1898      	adds	r0, r3, r2
 800db38:	79fb      	ldrb	r3, [r7, #7]
 800db3a:	4a3e      	ldr	r2, [pc, #248]	; (800dc34 <ESTTC_ProcessData+0x244c>)
 800db3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db40:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800db44:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800db48:	79fa      	ldrb	r2, [r7, #7]
 800db4a:	4934      	ldr	r1, [pc, #208]	; (800dc1c <ESTTC_ProcessData+0x2434>)
 800db4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800db50:	4619      	mov	r1, r3
 800db52:	f001 f917 	bl	800ed84 <FLASH_Write>
 800db56:	4603      	mov	r3, r0
 800db58:	60fb      	str	r3, [r7, #12]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d10c      	bne.n	800db7a <ESTTC_ProcessData+0x2392>
                      {
                        if ((fpos[Interface]%0x4000)==0) fprintf(ComInterface, "+");
 800db60:	79fb      	ldrb	r3, [r7, #7]
 800db62:	4a34      	ldr	r2, [pc, #208]	; (800dc34 <ESTTC_ProcessData+0x244c>)
 800db64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d10c      	bne.n	800db8a <ESTTC_ProcessData+0x23a2>
 800db70:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800db72:	202b      	movs	r0, #43	; 0x2b
 800db74:	f7fd fdb0 	bl	800b6d8 <fputc>
 800db78:	e007      	b.n	800db8a <ESTTC_ProcessData+0x23a2>
                      }
                      else
                      {
                        fprintf(ComInterface, "ERR+FW%u\r", (uint16_t)se);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	461a      	mov	r2, r3
 800db80:	4930      	ldr	r1, [pc, #192]	; (800dc44 <ESTTC_ProcessData+0x245c>)
 800db82:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800db84:	f009 fb5a 	bl	801723c <fiprintf>
                        break;
 800db88:	e01d      	b.n	800dbc6 <ESTTC_ProcessData+0x23de>
                    for (fpos[Interface] = 0; fpos[Interface] < f_size(&df[Interface]); fpos[Interface] += bsize[Interface])
 800db8a:	79fb      	ldrb	r3, [r7, #7]
 800db8c:	4a29      	ldr	r2, [pc, #164]	; (800dc34 <ESTTC_ProcessData+0x244c>)
 800db8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800db92:	79fb      	ldrb	r3, [r7, #7]
 800db94:	4a21      	ldr	r2, [pc, #132]	; (800dc1c <ESTTC_ProcessData+0x2434>)
 800db96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800db9a:	79fb      	ldrb	r3, [r7, #7]
 800db9c:	440a      	add	r2, r1
 800db9e:	4925      	ldr	r1, [pc, #148]	; (800dc34 <ESTTC_ProcessData+0x244c>)
 800dba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dba4:	79fb      	ldrb	r3, [r7, #7]
 800dba6:	4a23      	ldr	r2, [pc, #140]	; (800dc34 <ESTTC_ProcessData+0x244c>)
 800dba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dbac:	79fb      	ldrb	r3, [r7, #7]
 800dbae:	4918      	ldr	r1, [pc, #96]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800dbb0:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800dbb4:	fb00 f303 	mul.w	r3, r0, r3
 800dbb8:	440b      	add	r3, r1
 800dbba:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	f4ff af56 	bcc.w	800da72 <ESTTC_ProcessData+0x228a>
                      }
                    }
                    j = f_size(&df[Interface]);
 800dbc6:	79fb      	ldrb	r3, [r7, #7]
 800dbc8:	4a11      	ldr	r2, [pc, #68]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800dbca:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800dbce:	fb01 f303 	mul.w	r3, r1, r3
 800dbd2:	4413      	add	r3, r2
 800dbd4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	673b      	str	r3, [r7, #112]	; 0x70
                    f_close(&df[Interface]);
 800dbdc:	79fb      	ldrb	r3, [r7, #7]
 800dbde:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800dbe2:	fb02 f303 	mul.w	r3, r2, r3
 800dbe6:	4a0a      	ldr	r2, [pc, #40]	; (800dc10 <ESTTC_ProcessData+0x2428>)
 800dbe8:	4413      	add	r3, r2
 800dbea:	4618      	mov	r0, r3
 800dbec:	f005 fe46 	bl	801387c <f_close>
                    if (fpos[Interface] == j)
 800dbf0:	79fb      	ldrb	r3, [r7, #7]
 800dbf2:	4a10      	ldr	r2, [pc, #64]	; (800dc34 <ESTTC_ProcessData+0x244c>)
 800dbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbf8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	f040 8736 	bne.w	800ea6c <ESTTC_ProcessData+0x3284>
  __ASM volatile ("cpsid i" : : : "memory");
 800dc00:	b672      	cpsid	i
}
 800dc02:	bf00      	nop
                    {
                      __disable_interrupt();
                      for (j = 0, i = 0; i < fpos[Interface]; i++) j += *((uint8_t*)(i+FLASH_MIN_ADDR));
 800dc04:	2300      	movs	r3, #0
 800dc06:	673b      	str	r3, [r7, #112]	; 0x70
 800dc08:	2300      	movs	r3, #0
 800dc0a:	677b      	str	r3, [r7, #116]	; 0x74
 800dc0c:	e029      	b.n	800dc62 <ESTTC_ProcessData+0x247a>
 800dc0e:	bf00      	nop
 800dc10:	20008518 	.word	0x20008518
 800dc14:	0801b648 	.word	0x0801b648
 800dc18:	0801b658 	.word	0x0801b658
 800dc1c:	20000a70 	.word	0x20000a70
 800dc20:	0801b66c 	.word	0x0801b66c
 800dc24:	08040000 	.word	0x08040000
 800dc28:	20000000 	.word	0x20000000
 800dc2c:	0801b680 	.word	0x0801b680
 800dc30:	0801b6a0 	.word	0x0801b6a0
 800dc34:	20000a64 	.word	0x20000a64
 800dc38:	20000464 	.word	0x20000464
 800dc3c:	0801b6a8 	.word	0x0801b6a8
 800dc40:	0801b6b8 	.word	0x0801b6b8
 800dc44:	0801b6c8 	.word	0x0801b6c8
 800dc48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc4a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800dc4e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	461a      	mov	r2, r3
 800dc56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc58:	4413      	add	r3, r2
 800dc5a:	673b      	str	r3, [r7, #112]	; 0x70
 800dc5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc5e:	3301      	adds	r3, #1
 800dc60:	677b      	str	r3, [r7, #116]	; 0x74
 800dc62:	79fb      	ldrb	r3, [r7, #7]
 800dc64:	4aa7      	ldr	r2, [pc, #668]	; (800df04 <ESTTC_ProcessData+0x271c>)
 800dc66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d3eb      	bcc.n	800dc48 <ESTTC_ProcessData+0x2460>
                      *((__IO uint32_t*)APP_SIZE_ADDRESS) = fpos[Interface];
 800dc70:	79fb      	ldrb	r3, [r7, #7]
 800dc72:	4aa5      	ldr	r2, [pc, #660]	; (800df08 <ESTTC_ProcessData+0x2720>)
 800dc74:	49a3      	ldr	r1, [pc, #652]	; (800df04 <ESTTC_ProcessData+0x271c>)
 800dc76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dc7a:	6013      	str	r3, [r2, #0]
                      *((__IO uint32_t*)APP_CHKS_ADDRESS) = j;
 800dc7c:	4aa3      	ldr	r2, [pc, #652]	; (800df0c <ESTTC_ProcessData+0x2724>)
 800dc7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc80:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800dc82:	b662      	cpsie	i
}
 800dc84:	bf00      	nop
                      __enable_interrupt();
                      fprintf(ComInterface, "OK+%08X %08X\r", (uint16_t)j, (uint16_t)fpos[Interface]);
 800dc86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	79fb      	ldrb	r3, [r7, #7]
 800dc8e:	4a9d      	ldr	r2, [pc, #628]	; (800df04 <ESTTC_ProcessData+0x271c>)
 800dc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	460a      	mov	r2, r1
 800dc98:	499d      	ldr	r1, [pc, #628]	; (800df10 <ESTTC_ProcessData+0x2728>)
 800dc9a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dc9c:	f009 face 	bl	801723c <fiprintf>
                    }
                    break;
 800dca0:	f000 bee4 	b.w	800ea6c <ESTTC_ProcessData+0x3284>

                  case 'C':
                    if (df[Interface].fs) f_close(&df[Interface]);
 800dca4:	79fb      	ldrb	r3, [r7, #7]
 800dca6:	4a9b      	ldr	r2, [pc, #620]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800dca8:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800dcac:	fb01 f303 	mul.w	r3, r1, r3
 800dcb0:	4413      	add	r3, r2
 800dcb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d009      	beq.n	800dcd0 <ESTTC_ProcessData+0x24e8>
 800dcbc:	79fb      	ldrb	r3, [r7, #7]
 800dcbe:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800dcc2:	fb02 f303 	mul.w	r3, r2, r3
 800dcc6:	4a93      	ldr	r2, [pc, #588]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800dcc8:	4413      	add	r3, r2
 800dcca:	4618      	mov	r0, r3
 800dccc:	f005 fdd6 	bl	801387c <f_close>
                    fprintf(ComInterface, "OK\r");
 800dcd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcd2:	2203      	movs	r2, #3
 800dcd4:	2101      	movs	r1, #1
 800dcd6:	4890      	ldr	r0, [pc, #576]	; (800df18 <ESTTC_ProcessData+0x2730>)
 800dcd8:	f7fd fcc0 	bl	800b65c <fwrite>
                    break;
 800dcdc:	f000 bec9 	b.w	800ea72 <ESTTC_ProcessData+0x328a>

                  case 'S': // Calculate file checksum
                    if (df[Interface].fs) f_close(&df[Interface]);
 800dce0:	79fb      	ldrb	r3, [r7, #7]
 800dce2:	4a8c      	ldr	r2, [pc, #560]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800dce4:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800dce8:	fb01 f303 	mul.w	r3, r1, r3
 800dcec:	4413      	add	r3, r2
 800dcee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d009      	beq.n	800dd0c <ESTTC_ProcessData+0x2524>
 800dcf8:	79fb      	ldrb	r3, [r7, #7]
 800dcfa:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800dcfe:	fb02 f303 	mul.w	r3, r2, r3
 800dd02:	4a84      	ldr	r2, [pc, #528]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800dd04:	4413      	add	r3, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f005 fdb8 	bl	801387c <f_close>
                    sprintf(txline[Interface], "0:/%s", &begin[8]);
 800dd0c:	79fb      	ldrb	r3, [r7, #7]
 800dd0e:	021b      	lsls	r3, r3, #8
 800dd10:	4a82      	ldr	r2, [pc, #520]	; (800df1c <ESTTC_ProcessData+0x2734>)
 800dd12:	1898      	adds	r0, r3, r2
 800dd14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd16:	3308      	adds	r3, #8
 800dd18:	461a      	mov	r2, r3
 800dd1a:	4981      	ldr	r1, [pc, #516]	; (800df20 <ESTTC_ProcessData+0x2738>)
 800dd1c:	f00a f968 	bl	8017ff0 <siprintf>
                    if (FR_OK != (fr = f_open(&df[Interface], txline[Interface], FA_READ | FA_OPEN_EXISTING)))
 800dd20:	79fb      	ldrb	r3, [r7, #7]
 800dd22:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800dd26:	fb02 f303 	mul.w	r3, r2, r3
 800dd2a:	4a7a      	ldr	r2, [pc, #488]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800dd2c:	1898      	adds	r0, r3, r2
 800dd2e:	79fb      	ldrb	r3, [r7, #7]
 800dd30:	021b      	lsls	r3, r3, #8
 800dd32:	4a7a      	ldr	r2, [pc, #488]	; (800df1c <ESTTC_ProcessData+0x2734>)
 800dd34:	4413      	add	r3, r2
 800dd36:	2201      	movs	r2, #1
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f004 ff15 	bl	8012b68 <f_open>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800dd44:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00b      	beq.n	800dd64 <ESTTC_ProcessData+0x257c>
                    {
                      fprintf(ComInterface, "ERR+FNF(%u)=%s\r", fr, txline[Interface]);
 800dd4c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800dd50:	79fb      	ldrb	r3, [r7, #7]
 800dd52:	021b      	lsls	r3, r3, #8
 800dd54:	4971      	ldr	r1, [pc, #452]	; (800df1c <ESTTC_ProcessData+0x2734>)
 800dd56:	440b      	add	r3, r1
 800dd58:	4972      	ldr	r1, [pc, #456]	; (800df24 <ESTTC_ProcessData+0x273c>)
 800dd5a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dd5c:	f009 fa6e 	bl	801723c <fiprintf>
                      break;
 800dd60:	f000 be87 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    for (j = 0, i = 0; i < f_size(&df[Interface]); i++)
 800dd64:	2300      	movs	r3, #0
 800dd66:	673b      	str	r3, [r7, #112]	; 0x70
 800dd68:	2300      	movs	r3, #0
 800dd6a:	677b      	str	r3, [r7, #116]	; 0x74
 800dd6c:	e045      	b.n	800ddfa <ESTTC_ProcessData+0x2612>
                    {
                      if (FR_OK != (fr = f_read(&df[Interface], &s8_tmp, 1, (UINT*)&br)))
 800dd6e:	79fb      	ldrb	r3, [r7, #7]
 800dd70:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800dd74:	fb02 f303 	mul.w	r3, r2, r3
 800dd78:	4a66      	ldr	r2, [pc, #408]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800dd7a:	1898      	adds	r0, r3, r2
 800dd7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dd80:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800dd84:	2201      	movs	r2, #1
 800dd86:	f005 f904 	bl	8012f92 <f_read>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800dd90:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d012      	beq.n	800ddbe <ESTTC_ProcessData+0x25d6>
                      {
                        f_close(&df[Interface]);
 800dd98:	79fb      	ldrb	r3, [r7, #7]
 800dd9a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800dd9e:	fb02 f303 	mul.w	r3, r2, r3
 800dda2:	4a5c      	ldr	r2, [pc, #368]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800dda4:	4413      	add	r3, r2
 800dda6:	4618      	mov	r0, r3
 800dda8:	f005 fd68 	bl	801387c <f_close>
                        fprintf(ComInterface, "ERR+FIR(%u)=%u\r", (uint16_t)fr, (uint16_t)br);
 800ddac:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800ddb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	495c      	ldr	r1, [pc, #368]	; (800df28 <ESTTC_ProcessData+0x2740>)
 800ddb6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ddb8:	f009 fa40 	bl	801723c <fiprintf>
                        break;
 800ddbc:	e02a      	b.n	800de14 <ESTTC_ProcessData+0x262c>
                      }
                      if (1 != br)
 800ddbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d011      	beq.n	800dde8 <ESTTC_ProcessData+0x2600>
                      {
                        f_close(&df[Interface]);
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800ddca:	fb02 f303 	mul.w	r3, r2, r3
 800ddce:	4a51      	ldr	r2, [pc, #324]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800ddd0:	4413      	add	r3, r2
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f005 fd52 	bl	801387c <f_close>
                        fprintf(ComInterface, "ERR+FRS=%u\r", (uint16_t)br);
 800ddd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	461a      	mov	r2, r3
 800ddde:	4953      	ldr	r1, [pc, #332]	; (800df2c <ESTTC_ProcessData+0x2744>)
 800dde0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dde2:	f009 fa2b 	bl	801723c <fiprintf>
                        break;
 800dde6:	e015      	b.n	800de14 <ESTTC_ProcessData+0x262c>
                      }
                      j += s8_tmp;
 800dde8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddec:	461a      	mov	r2, r3
 800ddee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddf0:	4413      	add	r3, r2
 800ddf2:	673b      	str	r3, [r7, #112]	; 0x70
                    for (j = 0, i = 0; i < f_size(&df[Interface]); i++)
 800ddf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	677b      	str	r3, [r7, #116]	; 0x74
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	4a45      	ldr	r2, [pc, #276]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800ddfe:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800de02:	fb01 f303 	mul.w	r3, r1, r3
 800de06:	4413      	add	r3, r2
 800de08:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800de10:	429a      	cmp	r2, r3
 800de12:	d3ac      	bcc.n	800dd6e <ESTTC_ProcessData+0x2586>
                    }

                    if (FR_OK == f_stat(txline[Interface], &fno[Interface]) )
 800de14:	79fb      	ldrb	r3, [r7, #7]
 800de16:	021b      	lsls	r3, r3, #8
 800de18:	4a40      	ldr	r2, [pc, #256]	; (800df1c <ESTTC_ProcessData+0x2734>)
 800de1a:	1898      	adds	r0, r3, r2
 800de1c:	79fa      	ldrb	r2, [r7, #7]
 800de1e:	4613      	mov	r3, r2
 800de20:	005b      	lsls	r3, r3, #1
 800de22:	4413      	add	r3, r2
 800de24:	00db      	lsls	r3, r3, #3
 800de26:	4a42      	ldr	r2, [pc, #264]	; (800df30 <ESTTC_ProcessData+0x2748>)
 800de28:	4413      	add	r3, r2
 800de2a:	4619      	mov	r1, r3
 800de2c:	f006 f943 	bl	80140b6 <f_stat>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d154      	bne.n	800dee0 <ESTTC_ProcessData+0x26f8>
                    {
                        if( fno[Interface].fsize < 0xFFFF )
 800de36:	79fa      	ldrb	r2, [r7, #7]
 800de38:	493d      	ldr	r1, [pc, #244]	; (800df30 <ESTTC_ProcessData+0x2748>)
 800de3a:	4613      	mov	r3, r2
 800de3c:	005b      	lsls	r3, r3, #1
 800de3e:	4413      	add	r3, r2
 800de40:	00db      	lsls	r3, r3, #3
 800de42:	440b      	add	r3, r1
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d813      	bhi.n	800de76 <ESTTC_ProcessData+0x268e>
                        {
                            fprintf(ComInterface, "OK+%08X %08X B\r", (uint16_t)j, (uint16_t)f_size(&df[Interface]));
 800de4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de50:	b29b      	uxth	r3, r3
 800de52:	4618      	mov	r0, r3
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	4a2f      	ldr	r2, [pc, #188]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800de58:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800de5c:	fb01 f303 	mul.w	r3, r1, r3
 800de60:	4413      	add	r3, r2
 800de62:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	b29b      	uxth	r3, r3
 800de6a:	4602      	mov	r2, r0
 800de6c:	4931      	ldr	r1, [pc, #196]	; (800df34 <ESTTC_ProcessData+0x274c>)
 800de6e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800de70:	f009 f9e4 	bl	801723c <fiprintf>
 800de74:	e03a      	b.n	800deec <ESTTC_ProcessData+0x2704>
                        }else if( fno[Interface].fsize < 0x3FFFFF )
 800de76:	79fa      	ldrb	r2, [r7, #7]
 800de78:	492d      	ldr	r1, [pc, #180]	; (800df30 <ESTTC_ProcessData+0x2748>)
 800de7a:	4613      	mov	r3, r2
 800de7c:	005b      	lsls	r3, r3, #1
 800de7e:	4413      	add	r3, r2
 800de80:	00db      	lsls	r3, r3, #3
 800de82:	440b      	add	r3, r1
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4a2c      	ldr	r2, [pc, #176]	; (800df38 <ESTTC_ProcessData+0x2750>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d814      	bhi.n	800deb6 <ESTTC_ProcessData+0x26ce>
                        {
                            fprintf(ComInterface, "OK+%08X %08X kB\r", (uint16_t)j, (uint16_t)(f_size(&df[Interface])>>10));
 800de8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de8e:	b29b      	uxth	r3, r3
 800de90:	4618      	mov	r0, r3
 800de92:	79fb      	ldrb	r3, [r7, #7]
 800de94:	4a1f      	ldr	r2, [pc, #124]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800de96:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800de9a:	fb01 f303 	mul.w	r3, r1, r3
 800de9e:	4413      	add	r3, r2
 800dea0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	0a9b      	lsrs	r3, r3, #10
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	4602      	mov	r2, r0
 800deac:	4923      	ldr	r1, [pc, #140]	; (800df3c <ESTTC_ProcessData+0x2754>)
 800deae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800deb0:	f009 f9c4 	bl	801723c <fiprintf>
 800deb4:	e01a      	b.n	800deec <ESTTC_ProcessData+0x2704>
                        }else
                        {
                            fprintf(ComInterface, "OK+%08X %08X MB\r", (uint16_t)j, (uint16_t)(f_size(&df[Interface])>>20));
 800deb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800deb8:	b29b      	uxth	r3, r3
 800deba:	4618      	mov	r0, r3
 800debc:	79fb      	ldrb	r3, [r7, #7]
 800debe:	4a15      	ldr	r2, [pc, #84]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800dec0:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800dec4:	fb01 f303 	mul.w	r3, r1, r3
 800dec8:	4413      	add	r3, r2
 800deca:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	0d1b      	lsrs	r3, r3, #20
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	4602      	mov	r2, r0
 800ded6:	491a      	ldr	r1, [pc, #104]	; (800df40 <ESTTC_ProcessData+0x2758>)
 800ded8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800deda:	f009 f9af 	bl	801723c <fiprintf>
 800dede:	e005      	b.n	800deec <ESTTC_ProcessData+0x2704>
                        }
                    }else{
                        fprintf(ComInterface, "ERR+WrongPath");
 800dee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dee2:	220d      	movs	r2, #13
 800dee4:	2101      	movs	r1, #1
 800dee6:	4817      	ldr	r0, [pc, #92]	; (800df44 <ESTTC_ProcessData+0x275c>)
 800dee8:	f7fd fbb8 	bl	800b65c <fwrite>
                    }

                    f_close(&df[Interface]);
 800deec:	79fb      	ldrb	r3, [r7, #7]
 800deee:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800def2:	fb02 f303 	mul.w	r3, r2, r3
 800def6:	4a07      	ldr	r2, [pc, #28]	; (800df14 <ESTTC_ProcessData+0x272c>)
 800def8:	4413      	add	r3, r2
 800defa:	4618      	mov	r0, r3
 800defc:	f005 fcbe 	bl	801387c <f_close>
                    break;
 800df00:	f000 bdb7 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800df04:	20000a64 	.word	0x20000a64
 800df08:	40002858 	.word	0x40002858
 800df0c:	4000285c 	.word	0x4000285c
 800df10:	0801b6d4 	.word	0x0801b6d4
 800df14:	20008518 	.word	0x20008518
 800df18:	0801b36c 	.word	0x0801b36c
 800df1c:	20000464 	.word	0x20000464
 800df20:	0801b5f0 	.word	0x0801b5f0
 800df24:	0801b5f8 	.word	0x0801b5f8
 800df28:	0801b6a8 	.word	0x0801b6a8
 800df2c:	0801b6e4 	.word	0x0801b6e4
 800df30:	20000a7c 	.word	0x20000a7c
 800df34:	0801b6f0 	.word	0x0801b6f0
 800df38:	003ffffe 	.word	0x003ffffe
 800df3c:	0801b700 	.word	0x0801b700
 800df40:	0801b714 	.word	0x0801b714
 800df44:	0801b728 	.word	0x0801b728

                  case 'I': // Find file for reading
                    if (df[Interface].fs) f_close(&df[Interface]);
 800df48:	79fb      	ldrb	r3, [r7, #7]
 800df4a:	4aae      	ldr	r2, [pc, #696]	; (800e204 <ESTTC_ProcessData+0x2a1c>)
 800df4c:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800df50:	fb01 f303 	mul.w	r3, r1, r3
 800df54:	4413      	add	r3, r2
 800df56:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d009      	beq.n	800df74 <ESTTC_ProcessData+0x278c>
 800df60:	79fb      	ldrb	r3, [r7, #7]
 800df62:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800df66:	fb02 f303 	mul.w	r3, r2, r3
 800df6a:	4aa6      	ldr	r2, [pc, #664]	; (800e204 <ESTTC_ProcessData+0x2a1c>)
 800df6c:	4413      	add	r3, r2
 800df6e:	4618      	mov	r0, r3
 800df70:	f005 fc84 	bl	801387c <f_close>
                    sprintf(txline[Interface], "0:/%s", &begin[8]);
 800df74:	79fb      	ldrb	r3, [r7, #7]
 800df76:	021b      	lsls	r3, r3, #8
 800df78:	4aa3      	ldr	r2, [pc, #652]	; (800e208 <ESTTC_ProcessData+0x2a20>)
 800df7a:	1898      	adds	r0, r3, r2
 800df7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df7e:	3308      	adds	r3, #8
 800df80:	461a      	mov	r2, r3
 800df82:	49a2      	ldr	r1, [pc, #648]	; (800e20c <ESTTC_ProcessData+0x2a24>)
 800df84:	f00a f834 	bl	8017ff0 <siprintf>
                    if (FR_OK == (fr = f_open(&df[Interface], txline[Interface], FA_READ | FA_OPEN_EXISTING)))
 800df88:	79fb      	ldrb	r3, [r7, #7]
 800df8a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800df8e:	fb02 f303 	mul.w	r3, r2, r3
 800df92:	4a9c      	ldr	r2, [pc, #624]	; (800e204 <ESTTC_ProcessData+0x2a1c>)
 800df94:	1898      	adds	r0, r3, r2
 800df96:	79fb      	ldrb	r3, [r7, #7]
 800df98:	021b      	lsls	r3, r3, #8
 800df9a:	4a9b      	ldr	r2, [pc, #620]	; (800e208 <ESTTC_ProcessData+0x2a20>)
 800df9c:	4413      	add	r3, r2
 800df9e:	2201      	movs	r2, #1
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	f004 fde1 	bl	8012b68 <f_open>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800dfac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d15a      	bne.n	800e06a <ESTTC_ProcessData+0x2882>
                    {
                        if (FR_OK == f_stat(txline[Interface], &fno[Interface]) )
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	021b      	lsls	r3, r3, #8
 800dfb8:	4a93      	ldr	r2, [pc, #588]	; (800e208 <ESTTC_ProcessData+0x2a20>)
 800dfba:	1898      	adds	r0, r3, r2
 800dfbc:	79fa      	ldrb	r2, [r7, #7]
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	4413      	add	r3, r2
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	4a92      	ldr	r2, [pc, #584]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800dfc8:	4413      	add	r3, r2
 800dfca:	4619      	mov	r1, r3
 800dfcc:	f006 f873 	bl	80140b6 <f_stat>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	f040 854c 	bne.w	800ea70 <ESTTC_ProcessData+0x3288>
                        {
                            if( fno[Interface].fsize < 0xFFFF )
 800dfd8:	79fa      	ldrb	r2, [r7, #7]
 800dfda:	498d      	ldr	r1, [pc, #564]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800dfdc:	4613      	mov	r3, r2
 800dfde:	005b      	lsls	r3, r3, #1
 800dfe0:	4413      	add	r3, r2
 800dfe2:	00db      	lsls	r3, r3, #3
 800dfe4:	440b      	add	r3, r1
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d80f      	bhi.n	800e010 <ESTTC_ProcessData+0x2828>
                            {
                                fprintf(ComInterface, "OK+%08X B\r", (uint16_t)fno[Interface].fsize);
 800dff0:	79fa      	ldrb	r2, [r7, #7]
 800dff2:	4987      	ldr	r1, [pc, #540]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800dff4:	4613      	mov	r3, r2
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	4413      	add	r3, r2
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	440b      	add	r3, r1
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	b29b      	uxth	r3, r3
 800e002:	461a      	mov	r2, r3
 800e004:	4983      	ldr	r1, [pc, #524]	; (800e214 <ESTTC_ProcessData+0x2a2c>)
 800e006:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e008:	f009 f918 	bl	801723c <fiprintf>
                        }
                    }
                    else {
                        fprintf(ComInterface, "ERR+FNF(%u)=%s\r", fr, txline[Interface]);
                    }
                    break;
 800e00c:	f000 bd30 	b.w	800ea70 <ESTTC_ProcessData+0x3288>
                            }else if( fno[Interface].fsize < 0x3FFFFF )
 800e010:	79fa      	ldrb	r2, [r7, #7]
 800e012:	497f      	ldr	r1, [pc, #508]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800e014:	4613      	mov	r3, r2
 800e016:	005b      	lsls	r3, r3, #1
 800e018:	4413      	add	r3, r2
 800e01a:	00db      	lsls	r3, r3, #3
 800e01c:	440b      	add	r3, r1
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a7d      	ldr	r2, [pc, #500]	; (800e218 <ESTTC_ProcessData+0x2a30>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d810      	bhi.n	800e048 <ESTTC_ProcessData+0x2860>
                                fprintf(ComInterface, "OK+%08X kB\r", (uint16_t)(fno[Interface].fsize>>10));
 800e026:	79fa      	ldrb	r2, [r7, #7]
 800e028:	4979      	ldr	r1, [pc, #484]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800e02a:	4613      	mov	r3, r2
 800e02c:	005b      	lsls	r3, r3, #1
 800e02e:	4413      	add	r3, r2
 800e030:	00db      	lsls	r3, r3, #3
 800e032:	440b      	add	r3, r1
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	0a9b      	lsrs	r3, r3, #10
 800e038:	b29b      	uxth	r3, r3
 800e03a:	461a      	mov	r2, r3
 800e03c:	4977      	ldr	r1, [pc, #476]	; (800e21c <ESTTC_ProcessData+0x2a34>)
 800e03e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e040:	f009 f8fc 	bl	801723c <fiprintf>
                    break;
 800e044:	f000 bd14 	b.w	800ea70 <ESTTC_ProcessData+0x3288>
                                fprintf(ComInterface, "OK+%08X MB\r", (uint16_t)(fno[Interface].fsize>>20));
 800e048:	79fa      	ldrb	r2, [r7, #7]
 800e04a:	4971      	ldr	r1, [pc, #452]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800e04c:	4613      	mov	r3, r2
 800e04e:	005b      	lsls	r3, r3, #1
 800e050:	4413      	add	r3, r2
 800e052:	00db      	lsls	r3, r3, #3
 800e054:	440b      	add	r3, r1
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	0d1b      	lsrs	r3, r3, #20
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	461a      	mov	r2, r3
 800e05e:	4970      	ldr	r1, [pc, #448]	; (800e220 <ESTTC_ProcessData+0x2a38>)
 800e060:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e062:	f009 f8eb 	bl	801723c <fiprintf>
                    break;
 800e066:	f000 bd03 	b.w	800ea70 <ESTTC_ProcessData+0x3288>
                        fprintf(ComInterface, "ERR+FNF(%u)=%s\r", fr, txline[Interface]);
 800e06a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800e06e:	79fb      	ldrb	r3, [r7, #7]
 800e070:	021b      	lsls	r3, r3, #8
 800e072:	4965      	ldr	r1, [pc, #404]	; (800e208 <ESTTC_ProcessData+0x2a20>)
 800e074:	440b      	add	r3, r1
 800e076:	496b      	ldr	r1, [pc, #428]	; (800e224 <ESTTC_ProcessData+0x2a3c>)
 800e078:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e07a:	f009 f8df 	bl	801723c <fiprintf>
                    break;
 800e07e:	f000 bcf7 	b.w	800ea70 <ESTTC_ProcessData+0x3288>

                  case 'R': // Read from file @ position
                    if (df[Interface].fs == 0)
 800e082:	79fb      	ldrb	r3, [r7, #7]
 800e084:	4a5f      	ldr	r2, [pc, #380]	; (800e204 <ESTTC_ProcessData+0x2a1c>)
 800e086:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800e08a:	fb01 f303 	mul.w	r3, r1, r3
 800e08e:	4413      	add	r3, r2
 800e090:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d107      	bne.n	800e0aa <ESTTC_ProcessData+0x28c2>
                    {
                      fprintf(ComInterface, "ERR+FIH\r");
 800e09a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e09c:	2208      	movs	r2, #8
 800e09e:	2101      	movs	r1, #1
 800e0a0:	4861      	ldr	r0, [pc, #388]	; (800e228 <ESTTC_ProcessData+0x2a40>)
 800e0a2:	f7fd fadb 	bl	800b65c <fwrite>
                      break;
 800e0a6:	f000 bce4 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    sscanf(&begin[8], "%08X", (unsigned int *)&fpos[Interface]);
 800e0aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0ac:	f103 0008 	add.w	r0, r3, #8
 800e0b0:	79fb      	ldrb	r3, [r7, #7]
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4a5d      	ldr	r2, [pc, #372]	; (800e22c <ESTTC_ProcessData+0x2a44>)
 800e0b6:	4413      	add	r3, r2
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	495d      	ldr	r1, [pc, #372]	; (800e230 <ESTTC_ProcessData+0x2a48>)
 800e0bc:	f009 ffb8 	bl	8018030 <siscanf>
                    sscanf(&begin[8+8], "%04X", (unsigned int *)&bsize[Interface]);
 800e0c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0c2:	f103 0010 	add.w	r0, r3, #16
 800e0c6:	79fb      	ldrb	r3, [r7, #7]
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4a5a      	ldr	r2, [pc, #360]	; (800e234 <ESTTC_ProcessData+0x2a4c>)
 800e0cc:	4413      	add	r3, r2
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	4959      	ldr	r1, [pc, #356]	; (800e238 <ESTTC_ProcessData+0x2a50>)
 800e0d2:	f009 ffad 	bl	8018030 <siscanf>
                    if ((fpos[Interface] > f_size(&df[Interface]))||(bsize[Interface] > sizeof(txline[Interface])))
 800e0d6:	79fb      	ldrb	r3, [r7, #7]
 800e0d8:	4a54      	ldr	r2, [pc, #336]	; (800e22c <ESTTC_ProcessData+0x2a44>)
 800e0da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e0de:	79fb      	ldrb	r3, [r7, #7]
 800e0e0:	4948      	ldr	r1, [pc, #288]	; (800e204 <ESTTC_ProcessData+0x2a1c>)
 800e0e2:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800e0e6:	fb00 f303 	mul.w	r3, r0, r3
 800e0ea:	440b      	add	r3, r1
 800e0ec:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d807      	bhi.n	800e106 <ESTTC_ProcessData+0x291e>
 800e0f6:	79fb      	ldrb	r3, [r7, #7]
 800e0f8:	4a4e      	ldr	r2, [pc, #312]	; (800e234 <ESTTC_ProcessData+0x2a4c>)
 800e0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e102:	f240 80a1 	bls.w	800e248 <ESTTC_ProcessData+0x2a60>
                    {
                      if( fno[Interface].fsize < 0xFFFF )
 800e106:	79fa      	ldrb	r2, [r7, #7]
 800e108:	4941      	ldr	r1, [pc, #260]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800e10a:	4613      	mov	r3, r2
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	4413      	add	r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	440b      	add	r3, r1
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d821      	bhi.n	800e162 <ESTTC_ProcessData+0x297a>
                      {
                          fprintf(ComInterface, "ERR+FIP=%u-%u B,%u-%u\r", (uint16_t)fpos[Interface], (uint16_t)fno[Interface].fsize, (uint16_t)bsize[Interface], sizeof(txline[Interface]));
 800e11e:	79fb      	ldrb	r3, [r7, #7]
 800e120:	4a42      	ldr	r2, [pc, #264]	; (800e22c <ESTTC_ProcessData+0x2a44>)
 800e122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e126:	b29b      	uxth	r3, r3
 800e128:	4618      	mov	r0, r3
 800e12a:	79fa      	ldrb	r2, [r7, #7]
 800e12c:	4938      	ldr	r1, [pc, #224]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800e12e:	4613      	mov	r3, r2
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	4413      	add	r3, r2
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	440b      	add	r3, r1
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	4619      	mov	r1, r3
 800e13e:	79fb      	ldrb	r3, [r7, #7]
 800e140:	4a3c      	ldr	r2, [pc, #240]	; (800e234 <ESTTC_ProcessData+0x2a4c>)
 800e142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e146:	b29b      	uxth	r3, r3
 800e148:	461a      	mov	r2, r3
 800e14a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e14e:	9301      	str	r3, [sp, #4]
 800e150:	9200      	str	r2, [sp, #0]
 800e152:	460b      	mov	r3, r1
 800e154:	4602      	mov	r2, r0
 800e156:	4939      	ldr	r1, [pc, #228]	; (800e23c <ESTTC_ProcessData+0x2a54>)
 800e158:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e15a:	f009 f86f 	bl	801723c <fiprintf>
                      }else
                      {
                          fprintf(ComInterface, "ERR+FIP=%u-%u MB,%u-%u\r", (uint16_t)fpos[Interface], (uint16_t)(fno[Interface].fsize>>20), (uint16_t)bsize[Interface], sizeof(txline[Interface]));
                      }

                      break;
 800e15e:	f000 bc88 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                      }else if( fno[Interface].fsize < 0x3FFFFF )
 800e162:	79fa      	ldrb	r2, [r7, #7]
 800e164:	492a      	ldr	r1, [pc, #168]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800e166:	4613      	mov	r3, r2
 800e168:	005b      	lsls	r3, r3, #1
 800e16a:	4413      	add	r3, r2
 800e16c:	00db      	lsls	r3, r3, #3
 800e16e:	440b      	add	r3, r1
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4a29      	ldr	r2, [pc, #164]	; (800e218 <ESTTC_ProcessData+0x2a30>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d822      	bhi.n	800e1be <ESTTC_ProcessData+0x29d6>
                          fprintf(ComInterface, "ERR+FIP=%u-%u kB,%u-%u\r", (uint16_t)fpos[Interface], (uint16_t)(fno[Interface].fsize>>10), (uint16_t)bsize[Interface], sizeof(txline[Interface]));
 800e178:	79fb      	ldrb	r3, [r7, #7]
 800e17a:	4a2c      	ldr	r2, [pc, #176]	; (800e22c <ESTTC_ProcessData+0x2a44>)
 800e17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e180:	b29b      	uxth	r3, r3
 800e182:	4618      	mov	r0, r3
 800e184:	79fa      	ldrb	r2, [r7, #7]
 800e186:	4922      	ldr	r1, [pc, #136]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800e188:	4613      	mov	r3, r2
 800e18a:	005b      	lsls	r3, r3, #1
 800e18c:	4413      	add	r3, r2
 800e18e:	00db      	lsls	r3, r3, #3
 800e190:	440b      	add	r3, r1
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	0a9b      	lsrs	r3, r3, #10
 800e196:	b29b      	uxth	r3, r3
 800e198:	4619      	mov	r1, r3
 800e19a:	79fb      	ldrb	r3, [r7, #7]
 800e19c:	4a25      	ldr	r2, [pc, #148]	; (800e234 <ESTTC_ProcessData+0x2a4c>)
 800e19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1aa:	9301      	str	r3, [sp, #4]
 800e1ac:	9200      	str	r2, [sp, #0]
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	4923      	ldr	r1, [pc, #140]	; (800e240 <ESTTC_ProcessData+0x2a58>)
 800e1b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e1b6:	f009 f841 	bl	801723c <fiprintf>
                      break;
 800e1ba:	f000 bc5a 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
                          fprintf(ComInterface, "ERR+FIP=%u-%u MB,%u-%u\r", (uint16_t)fpos[Interface], (uint16_t)(fno[Interface].fsize>>20), (uint16_t)bsize[Interface], sizeof(txline[Interface]));
 800e1be:	79fb      	ldrb	r3, [r7, #7]
 800e1c0:	4a1a      	ldr	r2, [pc, #104]	; (800e22c <ESTTC_ProcessData+0x2a44>)
 800e1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	79fa      	ldrb	r2, [r7, #7]
 800e1cc:	4910      	ldr	r1, [pc, #64]	; (800e210 <ESTTC_ProcessData+0x2a28>)
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	005b      	lsls	r3, r3, #1
 800e1d2:	4413      	add	r3, r2
 800e1d4:	00db      	lsls	r3, r3, #3
 800e1d6:	440b      	add	r3, r1
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	0d1b      	lsrs	r3, r3, #20
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	4619      	mov	r1, r3
 800e1e0:	79fb      	ldrb	r3, [r7, #7]
 800e1e2:	4a14      	ldr	r2, [pc, #80]	; (800e234 <ESTTC_ProcessData+0x2a4c>)
 800e1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1f0:	9301      	str	r3, [sp, #4]
 800e1f2:	9200      	str	r2, [sp, #0]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	4912      	ldr	r1, [pc, #72]	; (800e244 <ESTTC_ProcessData+0x2a5c>)
 800e1fa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e1fc:	f009 f81e 	bl	801723c <fiprintf>
                      break;
 800e200:	f000 bc37 	b.w	800ea72 <ESTTC_ProcessData+0x328a>
 800e204:	20008518 	.word	0x20008518
 800e208:	20000464 	.word	0x20000464
 800e20c:	0801b5f0 	.word	0x0801b5f0
 800e210:	20000a7c 	.word	0x20000a7c
 800e214:	0801b608 	.word	0x0801b608
 800e218:	003ffffe 	.word	0x003ffffe
 800e21c:	0801b614 	.word	0x0801b614
 800e220:	0801b620 	.word	0x0801b620
 800e224:	0801b5f8 	.word	0x0801b5f8
 800e228:	0801b738 	.word	0x0801b738
 800e22c:	20000a64 	.word	0x20000a64
 800e230:	0801b744 	.word	0x0801b744
 800e234:	20000a70 	.word	0x20000a70
 800e238:	0801b74c 	.word	0x0801b74c
 800e23c:	0801b754 	.word	0x0801b754
 800e240:	0801b76c 	.word	0x0801b76c
 800e244:	0801b784 	.word	0x0801b784
                    }
                    if (FR_OK != (fr = f_lseek(&df[Interface], fpos[Interface])))
 800e248:	79fb      	ldrb	r3, [r7, #7]
 800e24a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e24e:	fb02 f303 	mul.w	r3, r2, r3
 800e252:	4aaa      	ldr	r2, [pc, #680]	; (800e4fc <ESTTC_ProcessData+0x2d14>)
 800e254:	441a      	add	r2, r3
 800e256:	79fb      	ldrb	r3, [r7, #7]
 800e258:	49a9      	ldr	r1, [pc, #676]	; (800e500 <ESTTC_ProcessData+0x2d18>)
 800e25a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e25e:	4619      	mov	r1, r3
 800e260:	4610      	mov	r0, r2
 800e262:	f005 fb3b 	bl	80138dc <f_lseek>
 800e266:	4603      	mov	r3, r0
 800e268:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800e26c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00b      	beq.n	800e28c <ESTTC_ProcessData+0x2aa4>
                    {
                      fprintf(ComInterface, "ERR+FIS(%u)=%u\r", (uint16_t)fr, (uint16_t)fpos[Interface]);
 800e274:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800e278:	79fb      	ldrb	r3, [r7, #7]
 800e27a:	49a1      	ldr	r1, [pc, #644]	; (800e500 <ESTTC_ProcessData+0x2d18>)
 800e27c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e280:	b29b      	uxth	r3, r3
 800e282:	49a0      	ldr	r1, [pc, #640]	; (800e504 <ESTTC_ProcessData+0x2d1c>)
 800e284:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e286:	f008 ffd9 	bl	801723c <fiprintf>
                      break;
 800e28a:	e3f2      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    if (FR_OK != (fr = f_read(&df[Interface], txline[Interface], bsize[Interface], (UINT*)&br)))
 800e28c:	79fb      	ldrb	r3, [r7, #7]
 800e28e:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e292:	fb02 f303 	mul.w	r3, r2, r3
 800e296:	4a99      	ldr	r2, [pc, #612]	; (800e4fc <ESTTC_ProcessData+0x2d14>)
 800e298:	1898      	adds	r0, r3, r2
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	021b      	lsls	r3, r3, #8
 800e29e:	4a9a      	ldr	r2, [pc, #616]	; (800e508 <ESTTC_ProcessData+0x2d20>)
 800e2a0:	1899      	adds	r1, r3, r2
 800e2a2:	79fb      	ldrb	r3, [r7, #7]
 800e2a4:	4a99      	ldr	r2, [pc, #612]	; (800e50c <ESTTC_ProcessData+0x2d24>)
 800e2a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e2aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e2ae:	f004 fe70 	bl	8012f92 <f_read>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800e2b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d008      	beq.n	800e2d2 <ESTTC_ProcessData+0x2aea>
                    {
                      fprintf(ComInterface, "ERR+FIR(%u)=%u\r", fr, (uint16_t)br);
 800e2c0:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800e2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	4991      	ldr	r1, [pc, #580]	; (800e510 <ESTTC_ProcessData+0x2d28>)
 800e2ca:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e2cc:	f008 ffb6 	bl	801723c <fiprintf>
                      break;
 800e2d0:	e3cf      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    if (bsize[Interface] != br)
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	4a8d      	ldr	r2, [pc, #564]	; (800e50c <ESTTC_ProcessData+0x2d24>)
 800e2d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d00c      	beq.n	800e2fa <ESTTC_ProcessData+0x2b12>
                    {
                      fprintf(ComInterface, "ERR+FRS(%u)=%u\r", (uint16_t)bsize[Interface], (uint16_t)br);
 800e2e0:	79fb      	ldrb	r3, [r7, #7]
 800e2e2:	4a8a      	ldr	r2, [pc, #552]	; (800e50c <ESTTC_ProcessData+0x2d24>)
 800e2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	4988      	ldr	r1, [pc, #544]	; (800e514 <ESTTC_ProcessData+0x2d2c>)
 800e2f2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e2f4:	f008 ffa2 	bl	801723c <fiprintf>
                      break;
 800e2f8:	e3bb      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    br = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	653b      	str	r3, [r7, #80]	; 0x50
                    for (i = 0; i < bsize[Interface]; i++)
 800e2fe:	2300      	movs	r3, #0
 800e300:	677b      	str	r3, [r7, #116]	; 0x74
 800e302:	e018      	b.n	800e336 <ESTTC_ProcessData+0x2b4e>
                    {
                      br += txline[Interface][i];
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	4a80      	ldr	r2, [pc, #512]	; (800e508 <ESTTC_ProcessData+0x2d20>)
 800e308:	021b      	lsls	r3, r3, #8
 800e30a:	441a      	add	r2, r3
 800e30c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e30e:	4413      	add	r3, r2
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	461a      	mov	r2, r3
 800e314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e316:	4413      	add	r3, r2
 800e318:	653b      	str	r3, [r7, #80]	; 0x50
                      fprintf(ComInterface, "%c", txline[Interface][i]);
 800e31a:	79fb      	ldrb	r3, [r7, #7]
 800e31c:	4a7a      	ldr	r2, [pc, #488]	; (800e508 <ESTTC_ProcessData+0x2d20>)
 800e31e:	021b      	lsls	r3, r3, #8
 800e320:	441a      	add	r2, r3
 800e322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e324:	4413      	add	r3, r2
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fd f9d4 	bl	800b6d8 <fputc>
                    for (i = 0; i < bsize[Interface]; i++)
 800e330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e332:	3301      	adds	r3, #1
 800e334:	677b      	str	r3, [r7, #116]	; 0x74
 800e336:	79fb      	ldrb	r3, [r7, #7]
 800e338:	4a74      	ldr	r2, [pc, #464]	; (800e50c <ESTTC_ProcessData+0x2d24>)
 800e33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e33e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e340:	429a      	cmp	r2, r3
 800e342:	d3df      	bcc.n	800e304 <ESTTC_ProcessData+0x2b1c>
                    }
                    fprintf(ComInterface, "%c", (BYTE)br);
 800e344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e346:	b2db      	uxtb	r3, r3
 800e348:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fd f9c4 	bl	800b6d8 <fputc>
                    break;
 800e350:	e38f      	b.n	800ea72 <ESTTC_ProcessData+0x328a>

                  case 'O': // Create file for writing
                    if (df[Interface].fs) f_close(&df[Interface]);
 800e352:	79fb      	ldrb	r3, [r7, #7]
 800e354:	4a69      	ldr	r2, [pc, #420]	; (800e4fc <ESTTC_ProcessData+0x2d14>)
 800e356:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800e35a:	fb01 f303 	mul.w	r3, r1, r3
 800e35e:	4413      	add	r3, r2
 800e360:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d009      	beq.n	800e37e <ESTTC_ProcessData+0x2b96>
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e370:	fb02 f303 	mul.w	r3, r2, r3
 800e374:	4a61      	ldr	r2, [pc, #388]	; (800e4fc <ESTTC_ProcessData+0x2d14>)
 800e376:	4413      	add	r3, r2
 800e378:	4618      	mov	r0, r3
 800e37a:	f005 fa7f 	bl	801387c <f_close>
                    sprintf(txline[Interface], "0:/%s", &begin[8]);
 800e37e:	79fb      	ldrb	r3, [r7, #7]
 800e380:	021b      	lsls	r3, r3, #8
 800e382:	4a61      	ldr	r2, [pc, #388]	; (800e508 <ESTTC_ProcessData+0x2d20>)
 800e384:	1898      	adds	r0, r3, r2
 800e386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e388:	3308      	adds	r3, #8
 800e38a:	461a      	mov	r2, r3
 800e38c:	4962      	ldr	r1, [pc, #392]	; (800e518 <ESTTC_ProcessData+0x2d30>)
 800e38e:	f009 fe2f 	bl	8017ff0 <siprintf>
                    if (FR_OK == (fr = f_open(&df[Interface], txline[Interface], FA_WRITE | FA_CREATE_ALWAYS)))
 800e392:	79fb      	ldrb	r3, [r7, #7]
 800e394:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e398:	fb02 f303 	mul.w	r3, r2, r3
 800e39c:	4a57      	ldr	r2, [pc, #348]	; (800e4fc <ESTTC_ProcessData+0x2d14>)
 800e39e:	1898      	adds	r0, r3, r2
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	021b      	lsls	r3, r3, #8
 800e3a4:	4a58      	ldr	r2, [pc, #352]	; (800e508 <ESTTC_ProcessData+0x2d20>)
 800e3a6:	4413      	add	r3, r2
 800e3a8:	220a      	movs	r2, #10
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	f004 fbdc 	bl	8012b68 <f_open>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800e3b6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d106      	bne.n	800e3cc <ESTTC_ProcessData+0x2be4>
                    {
                        fprintf(ComInterface, "OK\r");
 800e3be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3c0:	2203      	movs	r2, #3
 800e3c2:	2101      	movs	r1, #1
 800e3c4:	4855      	ldr	r0, [pc, #340]	; (800e51c <ESTTC_ProcessData+0x2d34>)
 800e3c6:	f7fd f949 	bl	800b65c <fwrite>
                    }
                    else fprintf(ComInterface, "ERR+FNC(%u)=%s\r", fr, txline[Interface]);
                    break;
 800e3ca:	e352      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    else fprintf(ComInterface, "ERR+FNC(%u)=%s\r", fr, txline[Interface]);
 800e3cc:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800e3d0:	79fb      	ldrb	r3, [r7, #7]
 800e3d2:	021b      	lsls	r3, r3, #8
 800e3d4:	494c      	ldr	r1, [pc, #304]	; (800e508 <ESTTC_ProcessData+0x2d20>)
 800e3d6:	440b      	add	r3, r1
 800e3d8:	4951      	ldr	r1, [pc, #324]	; (800e520 <ESTTC_ProcessData+0x2d38>)
 800e3da:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e3dc:	f008 ff2e 	bl	801723c <fiprintf>
                    break;
 800e3e0:	e347      	b.n	800ea72 <ESTTC_ProcessData+0x328a>

                  case 'W': // Write to file @ position
                    if (df[Interface].fs == NULL)
 800e3e2:	79fb      	ldrb	r3, [r7, #7]
 800e3e4:	4a45      	ldr	r2, [pc, #276]	; (800e4fc <ESTTC_ProcessData+0x2d14>)
 800e3e6:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800e3ea:	fb01 f303 	mul.w	r3, r1, r3
 800e3ee:	4413      	add	r3, r2
 800e3f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d106      	bne.n	800e408 <ESTTC_ProcessData+0x2c20>
                    {
                      fprintf(ComInterface, "ERR+FIH\r");
 800e3fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3fc:	2208      	movs	r2, #8
 800e3fe:	2101      	movs	r1, #1
 800e400:	4848      	ldr	r0, [pc, #288]	; (800e524 <ESTTC_ProcessData+0x2d3c>)
 800e402:	f7fd f92b 	bl	800b65c <fwrite>
                      break;
 800e406:	e334      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    sscanf(&begin[8], "%08X", (unsigned int *)&fpos[Interface]);
 800e408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e40a:	f103 0008 	add.w	r0, r3, #8
 800e40e:	79fb      	ldrb	r3, [r7, #7]
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	4a3b      	ldr	r2, [pc, #236]	; (800e500 <ESTTC_ProcessData+0x2d18>)
 800e414:	4413      	add	r3, r2
 800e416:	461a      	mov	r2, r3
 800e418:	4943      	ldr	r1, [pc, #268]	; (800e528 <ESTTC_ProcessData+0x2d40>)
 800e41a:	f009 fe09 	bl	8018030 <siscanf>
                    sscanf(&begin[8+8], "%04X", (unsigned int *)&bsize[Interface]);
 800e41e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e420:	f103 0010 	add.w	r0, r3, #16
 800e424:	79fb      	ldrb	r3, [r7, #7]
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4a38      	ldr	r2, [pc, #224]	; (800e50c <ESTTC_ProcessData+0x2d24>)
 800e42a:	4413      	add	r3, r2
 800e42c:	461a      	mov	r2, r3
 800e42e:	493f      	ldr	r1, [pc, #252]	; (800e52c <ESTTC_ProcessData+0x2d44>)
 800e430:	f009 fdfe 	bl	8018030 <siscanf>
                    if ((fpos[Interface] > f_size(&df[Interface]))||(bsize[Interface] > sizeof(txline[Interface])))
 800e434:	79fb      	ldrb	r3, [r7, #7]
 800e436:	4a32      	ldr	r2, [pc, #200]	; (800e500 <ESTTC_ProcessData+0x2d18>)
 800e438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e43c:	79fb      	ldrb	r3, [r7, #7]
 800e43e:	492f      	ldr	r1, [pc, #188]	; (800e4fc <ESTTC_ProcessData+0x2d14>)
 800e440:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800e444:	fb00 f303 	mul.w	r3, r0, r3
 800e448:	440b      	add	r3, r1
 800e44a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	429a      	cmp	r2, r3
 800e452:	d807      	bhi.n	800e464 <ESTTC_ProcessData+0x2c7c>
 800e454:	79fb      	ldrb	r3, [r7, #7]
 800e456:	4a2d      	ldr	r2, [pc, #180]	; (800e50c <ESTTC_ProcessData+0x2d24>)
 800e458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e45c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e460:	f240 8089 	bls.w	800e576 <ESTTC_ProcessData+0x2d8e>
                    {
                      if( fno[Interface].fsize < 0xFFFF )
 800e464:	79fa      	ldrb	r2, [r7, #7]
 800e466:	4932      	ldr	r1, [pc, #200]	; (800e530 <ESTTC_ProcessData+0x2d48>)
 800e468:	4613      	mov	r3, r2
 800e46a:	005b      	lsls	r3, r3, #1
 800e46c:	4413      	add	r3, r2
 800e46e:	00db      	lsls	r3, r3, #3
 800e470:	440b      	add	r3, r1
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e478:	4293      	cmp	r3, r2
 800e47a:	d819      	bhi.n	800e4b0 <ESTTC_ProcessData+0x2cc8>
                      {
                          fprintf(ComInterface, "ERR+FIP=%X-%X B,%s\r", (uint16_t)fpos[Interface], (uint16_t)fno[Interface].fsize, &begin[8]);
 800e47c:	79fb      	ldrb	r3, [r7, #7]
 800e47e:	4a20      	ldr	r2, [pc, #128]	; (800e500 <ESTTC_ProcessData+0x2d18>)
 800e480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e484:	b29b      	uxth	r3, r3
 800e486:	4618      	mov	r0, r3
 800e488:	79fa      	ldrb	r2, [r7, #7]
 800e48a:	4929      	ldr	r1, [pc, #164]	; (800e530 <ESTTC_ProcessData+0x2d48>)
 800e48c:	4613      	mov	r3, r2
 800e48e:	005b      	lsls	r3, r3, #1
 800e490:	4413      	add	r3, r2
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	440b      	add	r3, r1
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	b29b      	uxth	r3, r3
 800e49a:	461a      	mov	r2, r3
 800e49c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e49e:	3308      	adds	r3, #8
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	4923      	ldr	r1, [pc, #140]	; (800e534 <ESTTC_ProcessData+0x2d4c>)
 800e4a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e4aa:	f008 fec7 	bl	801723c <fiprintf>
                      }else
                      {
                          fprintf(ComInterface, "ERR+FIP=%X-%X MB,%s\r", (uint16_t)fpos[Interface], (uint16_t)(fno[Interface].fsize>>20), &begin[8]);
                      }

                      break;
 800e4ae:	e2e0      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                      }else if( fno[Interface].fsize < 0x3FFFFF )
 800e4b0:	79fa      	ldrb	r2, [r7, #7]
 800e4b2:	491f      	ldr	r1, [pc, #124]	; (800e530 <ESTTC_ProcessData+0x2d48>)
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	005b      	lsls	r3, r3, #1
 800e4b8:	4413      	add	r3, r2
 800e4ba:	00db      	lsls	r3, r3, #3
 800e4bc:	440b      	add	r3, r1
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a1d      	ldr	r2, [pc, #116]	; (800e538 <ESTTC_ProcessData+0x2d50>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d83c      	bhi.n	800e540 <ESTTC_ProcessData+0x2d58>
                          fprintf(ComInterface, "ERR+FIP=%X-%X kB,%s\r", (uint16_t)fpos[Interface], (uint16_t)(fno[Interface].fsize>>10), &begin[8]);
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	4a0d      	ldr	r2, [pc, #52]	; (800e500 <ESTTC_ProcessData+0x2d18>)
 800e4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	79fa      	ldrb	r2, [r7, #7]
 800e4d4:	4916      	ldr	r1, [pc, #88]	; (800e530 <ESTTC_ProcessData+0x2d48>)
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	4413      	add	r3, r2
 800e4dc:	00db      	lsls	r3, r3, #3
 800e4de:	440b      	add	r3, r1
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	0a9b      	lsrs	r3, r3, #10
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	4912      	ldr	r1, [pc, #72]	; (800e53c <ESTTC_ProcessData+0x2d54>)
 800e4f4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e4f6:	f008 fea1 	bl	801723c <fiprintf>
                      break;
 800e4fa:	e2ba      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
 800e4fc:	20008518 	.word	0x20008518
 800e500:	20000a64 	.word	0x20000a64
 800e504:	0801b79c 	.word	0x0801b79c
 800e508:	20000464 	.word	0x20000464
 800e50c:	20000a70 	.word	0x20000a70
 800e510:	0801b6a8 	.word	0x0801b6a8
 800e514:	0801b6b8 	.word	0x0801b6b8
 800e518:	0801b5f0 	.word	0x0801b5f0
 800e51c:	0801b36c 	.word	0x0801b36c
 800e520:	0801b7ac 	.word	0x0801b7ac
 800e524:	0801b738 	.word	0x0801b738
 800e528:	0801b744 	.word	0x0801b744
 800e52c:	0801b74c 	.word	0x0801b74c
 800e530:	20000a7c 	.word	0x20000a7c
 800e534:	0801b7bc 	.word	0x0801b7bc
 800e538:	003ffffe 	.word	0x003ffffe
 800e53c:	0801b7d0 	.word	0x0801b7d0
                          fprintf(ComInterface, "ERR+FIP=%X-%X MB,%s\r", (uint16_t)fpos[Interface], (uint16_t)(fno[Interface].fsize>>20), &begin[8]);
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	4aa0      	ldr	r2, [pc, #640]	; (800e7c4 <ESTTC_ProcessData+0x2fdc>)
 800e544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e548:	b29b      	uxth	r3, r3
 800e54a:	4618      	mov	r0, r3
 800e54c:	79fa      	ldrb	r2, [r7, #7]
 800e54e:	499e      	ldr	r1, [pc, #632]	; (800e7c8 <ESTTC_ProcessData+0x2fe0>)
 800e550:	4613      	mov	r3, r2
 800e552:	005b      	lsls	r3, r3, #1
 800e554:	4413      	add	r3, r2
 800e556:	00db      	lsls	r3, r3, #3
 800e558:	440b      	add	r3, r1
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	0d1b      	lsrs	r3, r3, #20
 800e55e:	b29b      	uxth	r3, r3
 800e560:	461a      	mov	r2, r3
 800e562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e564:	3308      	adds	r3, #8
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	4613      	mov	r3, r2
 800e56a:	4602      	mov	r2, r0
 800e56c:	4997      	ldr	r1, [pc, #604]	; (800e7cc <ESTTC_ProcessData+0x2fe4>)
 800e56e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e570:	f008 fe64 	bl	801723c <fiprintf>
                      break;
 800e574:	e27d      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    if (FR_OK != (fr = f_lseek(&df[Interface], fpos[Interface])))
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e57c:	fb02 f303 	mul.w	r3, r2, r3
 800e580:	4a93      	ldr	r2, [pc, #588]	; (800e7d0 <ESTTC_ProcessData+0x2fe8>)
 800e582:	441a      	add	r2, r3
 800e584:	79fb      	ldrb	r3, [r7, #7]
 800e586:	498f      	ldr	r1, [pc, #572]	; (800e7c4 <ESTTC_ProcessData+0x2fdc>)
 800e588:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e58c:	4619      	mov	r1, r3
 800e58e:	4610      	mov	r0, r2
 800e590:	f005 f9a4 	bl	80138dc <f_lseek>
 800e594:	4603      	mov	r3, r0
 800e596:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800e59a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00b      	beq.n	800e5ba <ESTTC_ProcessData+0x2dd2>
                    {
                      fprintf(ComInterface, "ERR+FIS(%u)=%u\r", (uint16_t)fr, (uint16_t)fpos[Interface]);
 800e5a2:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	4986      	ldr	r1, [pc, #536]	; (800e7c4 <ESTTC_ProcessData+0x2fdc>)
 800e5aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	4988      	ldr	r1, [pc, #544]	; (800e7d4 <ESTTC_ProcessData+0x2fec>)
 800e5b2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e5b4:	f008 fe42 	bl	801723c <fiprintf>
                      break;
 800e5b8:	e25b      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    int ch = -1;
 800e5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5be:	66bb      	str	r3, [r7, #104]	; 0x68
                    br = 0;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	653b      	str	r3, [r7, #80]	; 0x50
                    for (i = 0; i < bsize[Interface]; i++)
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	677b      	str	r3, [r7, #116]	; 0x74
 800e5c8:	e01c      	b.n	800e604 <ESTTC_ProcessData+0x2e1c>
                    {
                      if ((ch = getbyte(20, Interface)) == -1) break;
 800e5ca:	79fb      	ldrb	r3, [r7, #7]
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	2014      	movs	r0, #20
 800e5d0:	f000 fafe 	bl	800ebd0 <getbyte>
 800e5d4:	66b8      	str	r0, [r7, #104]	; 0x68
 800e5d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5dc:	d01a      	beq.n	800e614 <ESTTC_ProcessData+0x2e2c>
                      txline[Interface][i] = (BYTE)ch;
 800e5de:	79fb      	ldrb	r3, [r7, #7]
 800e5e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5e2:	b2d1      	uxtb	r1, r2
 800e5e4:	4a7c      	ldr	r2, [pc, #496]	; (800e7d8 <ESTTC_ProcessData+0x2ff0>)
 800e5e6:	021b      	lsls	r3, r3, #8
 800e5e8:	441a      	add	r2, r3
 800e5ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5ec:	4413      	add	r3, r2
 800e5ee:	460a      	mov	r2, r1
 800e5f0:	701a      	strb	r2, [r3, #0]
                      br += (BYTE)ch;
 800e5f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5fa:	4413      	add	r3, r2
 800e5fc:	653b      	str	r3, [r7, #80]	; 0x50
                    for (i = 0; i < bsize[Interface]; i++)
 800e5fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e600:	3301      	adds	r3, #1
 800e602:	677b      	str	r3, [r7, #116]	; 0x74
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	4a75      	ldr	r2, [pc, #468]	; (800e7dc <ESTTC_ProcessData+0x2ff4>)
 800e608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e60c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e60e:	429a      	cmp	r2, r3
 800e610:	d3db      	bcc.n	800e5ca <ESTTC_ProcessData+0x2de2>
 800e612:	e000      	b.n	800e616 <ESTTC_ProcessData+0x2e2e>
                      if ((ch = getbyte(20, Interface)) == -1) break;
 800e614:	bf00      	nop
                    }
                    if (ch == -1)
 800e616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e61c:	d106      	bne.n	800e62c <ESTTC_ProcessData+0x2e44>
                    {
                      fprintf(ComInterface, "ERR+FTM\r");
 800e61e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e620:	2208      	movs	r2, #8
 800e622:	2101      	movs	r1, #1
 800e624:	486e      	ldr	r0, [pc, #440]	; (800e7e0 <ESTTC_ProcessData+0x2ff8>)
 800e626:	f7fd f819 	bl	800b65c <fwrite>
                      break;
 800e62a:	e222      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    if ((ch = getbyte(20, Interface)) == -1)
 800e62c:	79fb      	ldrb	r3, [r7, #7]
 800e62e:	4619      	mov	r1, r3
 800e630:	2014      	movs	r0, #20
 800e632:	f000 facd 	bl	800ebd0 <getbyte>
 800e636:	66b8      	str	r0, [r7, #104]	; 0x68
 800e638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e63a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e63e:	d106      	bne.n	800e64e <ESTTC_ProcessData+0x2e66>
                    {
                      fprintf(ComInterface, "ERR+FTM\r");
 800e640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e642:	2208      	movs	r2, #8
 800e644:	2101      	movs	r1, #1
 800e646:	4866      	ldr	r0, [pc, #408]	; (800e7e0 <ESTTC_ProcessData+0x2ff8>)
 800e648:	f7fd f808 	bl	800b65c <fwrite>
                      break;
 800e64c:	e211      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    if (((BYTE)br) != ((BYTE)ch))
 800e64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e650:	b2da      	uxtb	r2, r3
 800e652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e654:	b2db      	uxtb	r3, r3
 800e656:	429a      	cmp	r2, r3
 800e658:	d009      	beq.n	800e66e <ESTTC_ProcessData+0x2e86>
                    {
                      fprintf(ComInterface, "ERR+FEC=%02X(%02X)\r", (BYTE)br, (BYTE)ch);
 800e65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	461a      	mov	r2, r3
 800e660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e662:	b2db      	uxtb	r3, r3
 800e664:	495f      	ldr	r1, [pc, #380]	; (800e7e4 <ESTTC_ProcessData+0x2ffc>)
 800e666:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e668:	f008 fde8 	bl	801723c <fiprintf>
                      break;
 800e66c:	e201      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    if (FR_OK != (fr = f_write(&df[Interface], txline[Interface], bsize[Interface], (UINT*)&br)))
 800e66e:	79fb      	ldrb	r3, [r7, #7]
 800e670:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e674:	fb02 f303 	mul.w	r3, r2, r3
 800e678:	4a55      	ldr	r2, [pc, #340]	; (800e7d0 <ESTTC_ProcessData+0x2fe8>)
 800e67a:	1898      	adds	r0, r3, r2
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	021b      	lsls	r3, r3, #8
 800e680:	4a55      	ldr	r2, [pc, #340]	; (800e7d8 <ESTTC_ProcessData+0x2ff0>)
 800e682:	1899      	adds	r1, r3, r2
 800e684:	79fb      	ldrb	r3, [r7, #7]
 800e686:	4a55      	ldr	r2, [pc, #340]	; (800e7dc <ESTTC_ProcessData+0x2ff4>)
 800e688:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e68c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e690:	f004 fe34 	bl	80132fc <f_write>
 800e694:	4603      	mov	r3, r0
 800e696:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800e69a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d007      	beq.n	800e6b2 <ESTTC_ProcessData+0x2eca>
                    {
                      fprintf(ComInterface, "ERR+FWE=%u\r", fr);
 800e6a2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	494f      	ldr	r1, [pc, #316]	; (800e7e8 <ESTTC_ProcessData+0x3000>)
 800e6aa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e6ac:	f008 fdc6 	bl	801723c <fiprintf>
                      break;
 800e6b0:	e1df      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    if (bsize[Interface] != br)
 800e6b2:	79fb      	ldrb	r3, [r7, #7]
 800e6b4:	4a49      	ldr	r2, [pc, #292]	; (800e7dc <ESTTC_ProcessData+0x2ff4>)
 800e6b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d00d      	beq.n	800e6dc <ESTTC_ProcessData+0x2ef4>
                    {
                      fprintf(ComInterface, "ERR+FWC=%u(%u)\r", (uint16_t)br, (uint16_t)bsize[Interface]);
 800e6c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	79fb      	ldrb	r3, [r7, #7]
 800e6c8:	4a44      	ldr	r2, [pc, #272]	; (800e7dc <ESTTC_ProcessData+0x2ff4>)
 800e6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	460a      	mov	r2, r1
 800e6d2:	4946      	ldr	r1, [pc, #280]	; (800e7ec <ESTTC_ProcessData+0x3004>)
 800e6d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e6d6:	f008 fdb1 	bl	801723c <fiprintf>
                      break;
 800e6da:	e1ca      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    fprintf(ComInterface, "OK\r");
 800e6dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6de:	2203      	movs	r2, #3
 800e6e0:	2101      	movs	r1, #1
 800e6e2:	4843      	ldr	r0, [pc, #268]	; (800e7f0 <ESTTC_ProcessData+0x3008>)
 800e6e4:	f7fc ffba 	bl	800b65c <fwrite>
                    break;
 800e6e8:	e1c3      	b.n	800ea72 <ESTTC_ProcessData+0x328a>

                  case 'D': // Delete file
                    if (df[Interface].fs) f_close(&df[Interface]);
 800e6ea:	79fb      	ldrb	r3, [r7, #7]
 800e6ec:	4a38      	ldr	r2, [pc, #224]	; (800e7d0 <ESTTC_ProcessData+0x2fe8>)
 800e6ee:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800e6f2:	fb01 f303 	mul.w	r3, r1, r3
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d009      	beq.n	800e716 <ESTTC_ProcessData+0x2f2e>
 800e702:	79fb      	ldrb	r3, [r7, #7]
 800e704:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e708:	fb02 f303 	mul.w	r3, r2, r3
 800e70c:	4a30      	ldr	r2, [pc, #192]	; (800e7d0 <ESTTC_ProcessData+0x2fe8>)
 800e70e:	4413      	add	r3, r2
 800e710:	4618      	mov	r0, r3
 800e712:	f005 f8b3 	bl	801387c <f_close>
                    sprintf(txline[Interface], "0:/%s", &begin[8]);
 800e716:	79fb      	ldrb	r3, [r7, #7]
 800e718:	021b      	lsls	r3, r3, #8
 800e71a:	4a2f      	ldr	r2, [pc, #188]	; (800e7d8 <ESTTC_ProcessData+0x2ff0>)
 800e71c:	1898      	adds	r0, r3, r2
 800e71e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e720:	3308      	adds	r3, #8
 800e722:	461a      	mov	r2, r3
 800e724:	4933      	ldr	r1, [pc, #204]	; (800e7f4 <ESTTC_ProcessData+0x300c>)
 800e726:	f009 fc63 	bl	8017ff0 <siprintf>
                    if (FR_OK != f_unlink(txline[Interface]))
 800e72a:	79fb      	ldrb	r3, [r7, #7]
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	4a2a      	ldr	r2, [pc, #168]	; (800e7d8 <ESTTC_ProcessData+0x2ff0>)
 800e730:	4413      	add	r3, r2
 800e732:	4618      	mov	r0, r3
 800e734:	f005 fd12 	bl	801415c <f_unlink>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d009      	beq.n	800e752 <ESTTC_ProcessData+0x2f6a>
                      fprintf(ComInterface, "ERR+FDL%s\r", txline[Interface]);
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	021b      	lsls	r3, r3, #8
 800e742:	4a25      	ldr	r2, [pc, #148]	; (800e7d8 <ESTTC_ProcessData+0x2ff0>)
 800e744:	4413      	add	r3, r2
 800e746:	461a      	mov	r2, r3
 800e748:	492b      	ldr	r1, [pc, #172]	; (800e7f8 <ESTTC_ProcessData+0x3010>)
 800e74a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e74c:	f008 fd76 	bl	801723c <fiprintf>
                    else
                      fprintf(ComInterface, "OK\r");
                    break;
 800e750:	e18f      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                      fprintf(ComInterface, "OK\r");
 800e752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e754:	2203      	movs	r2, #3
 800e756:	2101      	movs	r1, #1
 800e758:	4825      	ldr	r0, [pc, #148]	; (800e7f0 <ESTTC_ProcessData+0x3008>)
 800e75a:	f7fc ff7f 	bl	800b65c <fwrite>
                    break;
 800e75e:	e188      	b.n	800ea72 <ESTTC_ProcessData+0x328a>

                  case 'L': // Write to file "DirList" a list of existing files
                    if (df[Interface].fs) f_close(&df[Interface]);
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	4a1b      	ldr	r2, [pc, #108]	; (800e7d0 <ESTTC_ProcessData+0x2fe8>)
 800e764:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800e768:	fb01 f303 	mul.w	r3, r1, r3
 800e76c:	4413      	add	r3, r2
 800e76e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d009      	beq.n	800e78c <ESTTC_ProcessData+0x2fa4>
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e77e:	fb02 f303 	mul.w	r3, r2, r3
 800e782:	4a13      	ldr	r2, [pc, #76]	; (800e7d0 <ESTTC_ProcessData+0x2fe8>)
 800e784:	4413      	add	r3, r2
 800e786:	4618      	mov	r0, r3
 800e788:	f005 f878 	bl	801387c <f_close>
                    if (FR_OK != (fr = f_open(&df[Interface], "0:/DirList.txt", FA_WRITE | FA_CREATE_ALWAYS)))
 800e78c:	79fb      	ldrb	r3, [r7, #7]
 800e78e:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e792:	fb02 f303 	mul.w	r3, r2, r3
 800e796:	4a0e      	ldr	r2, [pc, #56]	; (800e7d0 <ESTTC_ProcessData+0x2fe8>)
 800e798:	4413      	add	r3, r2
 800e79a:	220a      	movs	r2, #10
 800e79c:	4917      	ldr	r1, [pc, #92]	; (800e7fc <ESTTC_ProcessData+0x3014>)
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f004 f9e2 	bl	8012b68 <f_open>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800e7aa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d028      	beq.n	800e804 <ESTTC_ProcessData+0x301c>
                    {
                        fprintf(ComInterface, "ERR+LCF(%u)\r", fr);
 800e7b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	4911      	ldr	r1, [pc, #68]	; (800e800 <ESTTC_ProcessData+0x3018>)
 800e7ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e7bc:	f008 fd3e 	bl	801723c <fiprintf>
                      break;
 800e7c0:	e157      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
 800e7c2:	bf00      	nop
 800e7c4:	20000a64 	.word	0x20000a64
 800e7c8:	20000a7c 	.word	0x20000a7c
 800e7cc:	0801b7e8 	.word	0x0801b7e8
 800e7d0:	20008518 	.word	0x20008518
 800e7d4:	0801b79c 	.word	0x0801b79c
 800e7d8:	20000464 	.word	0x20000464
 800e7dc:	20000a70 	.word	0x20000a70
 800e7e0:	0801b800 	.word	0x0801b800
 800e7e4:	0801b80c 	.word	0x0801b80c
 800e7e8:	0801b820 	.word	0x0801b820
 800e7ec:	0801b82c 	.word	0x0801b82c
 800e7f0:	0801b36c 	.word	0x0801b36c
 800e7f4:	0801b5f0 	.word	0x0801b5f0
 800e7f8:	0801b83c 	.word	0x0801b83c
 800e7fc:	0801b848 	.word	0x0801b848
 800e800:	0801b858 	.word	0x0801b858
                    }
                    len = strlen(&begin[8]);
 800e804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e806:	3308      	adds	r3, #8
 800e808:	4618      	mov	r0, r3
 800e80a:	f7f1 fcf1 	bl	80001f0 <strlen>
 800e80e:	65f8      	str	r0, [r7, #92]	; 0x5c
                    if ((len == 0) || (len > 12))
 800e810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <ESTTC_ProcessData+0x3034>
 800e816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e818:	2b0c      	cmp	r3, #12
 800e81a:	d907      	bls.n	800e82c <ESTTC_ProcessData+0x3044>
                    {
                      begin[8] = '*';
 800e81c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e81e:	3308      	adds	r3, #8
 800e820:	222a      	movs	r2, #42	; 0x2a
 800e822:	701a      	strb	r2, [r3, #0]
                      begin[9] = 0;
 800e824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e826:	3309      	adds	r3, #9
 800e828:	2200      	movs	r2, #0
 800e82a:	701a      	strb	r2, [r3, #0]
                    }
                    fprintf((FILE *)&df[Interface], "----- FATFS RevID.%05u -----\r\n", _FATFS);
 800e82c:	79fb      	ldrb	r3, [r7, #7]
 800e82e:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e832:	fb02 f303 	mul.w	r3, r2, r3
 800e836:	4a92      	ldr	r2, [pc, #584]	; (800ea80 <ESTTC_ProcessData+0x3298>)
 800e838:	4413      	add	r3, r2
 800e83a:	f647 5214 	movw	r2, #32020	; 0x7d14
 800e83e:	4991      	ldr	r1, [pc, #580]	; (800ea84 <ESTTC_ProcessData+0x329c>)
 800e840:	4618      	mov	r0, r3
 800e842:	f008 fcfb 	bl	801723c <fiprintf>
                    fprintf((FILE *)&df[Interface], "--- Name ---    --- size ---\r\n" );
 800e846:	79fb      	ldrb	r3, [r7, #7]
 800e848:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e84c:	fb02 f303 	mul.w	r3, r2, r3
 800e850:	4a8b      	ldr	r2, [pc, #556]	; (800ea80 <ESTTC_ProcessData+0x3298>)
 800e852:	4413      	add	r3, r2
 800e854:	221e      	movs	r2, #30
 800e856:	2101      	movs	r1, #1
 800e858:	488b      	ldr	r0, [pc, #556]	; (800ea88 <ESTTC_ProcessData+0x32a0>)
 800e85a:	f7fc feff 	bl	800b65c <fwrite>
                    strcpy(txline[Interface], &begin[8]);
 800e85e:	79fb      	ldrb	r3, [r7, #7]
 800e860:	021b      	lsls	r3, r3, #8
 800e862:	4a8a      	ldr	r2, [pc, #552]	; (800ea8c <ESTTC_ProcessData+0x32a4>)
 800e864:	441a      	add	r2, r3
 800e866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e868:	3308      	adds	r3, #8
 800e86a:	4619      	mov	r1, r3
 800e86c:	4610      	mov	r0, r2
 800e86e:	f009 fc50 	bl	8018112 <strcpy>
                    j = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	673b      	str	r3, [r7, #112]	; 0x70
                    if (FR_OK != (fr = f_findfirst(&dd[Interface], &fno[Interface], "", txline[Interface])))
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	f44f 7209 	mov.w	r2, #548	; 0x224
 800e87c:	fb02 f303 	mul.w	r3, r2, r3
 800e880:	4a83      	ldr	r2, [pc, #524]	; (800ea90 <ESTTC_ProcessData+0x32a8>)
 800e882:	1898      	adds	r0, r3, r2
 800e884:	79fa      	ldrb	r2, [r7, #7]
 800e886:	4613      	mov	r3, r2
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	4413      	add	r3, r2
 800e88c:	00db      	lsls	r3, r3, #3
 800e88e:	4a81      	ldr	r2, [pc, #516]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e890:	1899      	adds	r1, r3, r2
 800e892:	79fb      	ldrb	r3, [r7, #7]
 800e894:	021b      	lsls	r3, r3, #8
 800e896:	4a7d      	ldr	r2, [pc, #500]	; (800ea8c <ESTTC_ProcessData+0x32a4>)
 800e898:	4413      	add	r3, r2
 800e89a:	4a7f      	ldr	r2, [pc, #508]	; (800ea98 <ESTTC_ProcessData+0x32b0>)
 800e89c:	f005 fbec 	bl	8014078 <f_findfirst>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800e8a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d007      	beq.n	800e8be <ESTTC_ProcessData+0x30d6>
                    {
                      fprintf(ComInterface, "ERR+LFF(%u)\r", fr);
 800e8ae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	4979      	ldr	r1, [pc, #484]	; (800ea9c <ESTTC_ProcessData+0x32b4>)
 800e8b6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e8b8:	f008 fcc0 	bl	801723c <fiprintf>
                      break;
 800e8bc:	e0d9      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    }
                    do {
                      if (strlen(fno[Interface].fname) == 0) break;
 800e8be:	79fa      	ldrb	r2, [r7, #7]
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	005b      	lsls	r3, r3, #1
 800e8c4:	4413      	add	r3, r2
 800e8c6:	00db      	lsls	r3, r3, #3
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	4a72      	ldr	r2, [pc, #456]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e8cc:	4413      	add	r3, r2
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f000 8091 	beq.w	800e9fa <ESTTC_ProcessData+0x3212>
                      j++;
 800e8d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8da:	3301      	adds	r3, #1
 800e8dc:	673b      	str	r3, [r7, #112]	; 0x70

                      if( fno[Interface].fsize < 0xFFFF )
 800e8de:	79fa      	ldrb	r2, [r7, #7]
 800e8e0:	496c      	ldr	r1, [pc, #432]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	005b      	lsls	r3, r3, #1
 800e8e6:	4413      	add	r3, r2
 800e8e8:	00db      	lsls	r3, r3, #3
 800e8ea:	440b      	add	r3, r1
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d81a      	bhi.n	800e92c <ESTTC_ProcessData+0x3144>
                      {
                          sprintf(rxline[Interface], "%13s   %u B\n", fno[Interface].fname, (uint16_t)fno[Interface].fsize);
 800e8f6:	79fb      	ldrb	r3, [r7, #7]
 800e8f8:	021b      	lsls	r3, r3, #8
 800e8fa:	4a69      	ldr	r2, [pc, #420]	; (800eaa0 <ESTTC_ProcessData+0x32b8>)
 800e8fc:	1898      	adds	r0, r3, r2
 800e8fe:	79fa      	ldrb	r2, [r7, #7]
 800e900:	4613      	mov	r3, r2
 800e902:	005b      	lsls	r3, r3, #1
 800e904:	4413      	add	r3, r2
 800e906:	00db      	lsls	r3, r3, #3
 800e908:	3308      	adds	r3, #8
 800e90a:	4a62      	ldr	r2, [pc, #392]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e90c:	4413      	add	r3, r2
 800e90e:	1c59      	adds	r1, r3, #1
 800e910:	79fa      	ldrb	r2, [r7, #7]
 800e912:	4c60      	ldr	r4, [pc, #384]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e914:	4613      	mov	r3, r2
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	4413      	add	r3, r2
 800e91a:	00db      	lsls	r3, r3, #3
 800e91c:	4423      	add	r3, r4
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	b29b      	uxth	r3, r3
 800e922:	460a      	mov	r2, r1
 800e924:	495f      	ldr	r1, [pc, #380]	; (800eaa4 <ESTTC_ProcessData+0x32bc>)
 800e926:	f009 fb63 	bl	8017ff0 <siprintf>
 800e92a:	e041      	b.n	800e9b0 <ESTTC_ProcessData+0x31c8>
                      }else if( fno[Interface].fsize < 0x3FFFFF )
 800e92c:	79fa      	ldrb	r2, [r7, #7]
 800e92e:	4959      	ldr	r1, [pc, #356]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e930:	4613      	mov	r3, r2
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	4413      	add	r3, r2
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	440b      	add	r3, r1
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a5a      	ldr	r2, [pc, #360]	; (800eaa8 <ESTTC_ProcessData+0x32c0>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d81b      	bhi.n	800e97a <ESTTC_ProcessData+0x3192>
                      {
                          sprintf(rxline[Interface], "%13s   ~%u kB\n", fno[Interface].fname, (uint16_t)(fno[Interface].fsize>>10));
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	021b      	lsls	r3, r3, #8
 800e946:	4a56      	ldr	r2, [pc, #344]	; (800eaa0 <ESTTC_ProcessData+0x32b8>)
 800e948:	1898      	adds	r0, r3, r2
 800e94a:	79fa      	ldrb	r2, [r7, #7]
 800e94c:	4613      	mov	r3, r2
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	4413      	add	r3, r2
 800e952:	00db      	lsls	r3, r3, #3
 800e954:	3308      	adds	r3, #8
 800e956:	4a4f      	ldr	r2, [pc, #316]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e958:	4413      	add	r3, r2
 800e95a:	1c59      	adds	r1, r3, #1
 800e95c:	79fa      	ldrb	r2, [r7, #7]
 800e95e:	4c4d      	ldr	r4, [pc, #308]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e960:	4613      	mov	r3, r2
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	4413      	add	r3, r2
 800e966:	00db      	lsls	r3, r3, #3
 800e968:	4423      	add	r3, r4
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	0a9b      	lsrs	r3, r3, #10
 800e96e:	b29b      	uxth	r3, r3
 800e970:	460a      	mov	r2, r1
 800e972:	494e      	ldr	r1, [pc, #312]	; (800eaac <ESTTC_ProcessData+0x32c4>)
 800e974:	f009 fb3c 	bl	8017ff0 <siprintf>
 800e978:	e01a      	b.n	800e9b0 <ESTTC_ProcessData+0x31c8>
                      }else
                      {
                          sprintf(rxline[Interface], "%13s   ~%u MB\n", fno[Interface].fname, (uint16_t)(fno[Interface].fsize>>20));
 800e97a:	79fb      	ldrb	r3, [r7, #7]
 800e97c:	021b      	lsls	r3, r3, #8
 800e97e:	4a48      	ldr	r2, [pc, #288]	; (800eaa0 <ESTTC_ProcessData+0x32b8>)
 800e980:	1898      	adds	r0, r3, r2
 800e982:	79fa      	ldrb	r2, [r7, #7]
 800e984:	4613      	mov	r3, r2
 800e986:	005b      	lsls	r3, r3, #1
 800e988:	4413      	add	r3, r2
 800e98a:	00db      	lsls	r3, r3, #3
 800e98c:	3308      	adds	r3, #8
 800e98e:	4a41      	ldr	r2, [pc, #260]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e990:	4413      	add	r3, r2
 800e992:	1c59      	adds	r1, r3, #1
 800e994:	79fa      	ldrb	r2, [r7, #7]
 800e996:	4c3f      	ldr	r4, [pc, #252]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e998:	4613      	mov	r3, r2
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	4413      	add	r3, r2
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	4423      	add	r3, r4
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	0d1b      	lsrs	r3, r3, #20
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	460a      	mov	r2, r1
 800e9aa:	4941      	ldr	r1, [pc, #260]	; (800eab0 <ESTTC_ProcessData+0x32c8>)
 800e9ac:	f009 fb20 	bl	8017ff0 <siprintf>
                      }

                      f_puts(rxline[Interface], &df[Interface]);
 800e9b0:	79fb      	ldrb	r3, [r7, #7]
 800e9b2:	021b      	lsls	r3, r3, #8
 800e9b4:	4a3a      	ldr	r2, [pc, #232]	; (800eaa0 <ESTTC_ProcessData+0x32b8>)
 800e9b6:	441a      	add	r2, r3
 800e9b8:	79fb      	ldrb	r3, [r7, #7]
 800e9ba:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800e9be:	fb01 f303 	mul.w	r3, r1, r3
 800e9c2:	492f      	ldr	r1, [pc, #188]	; (800ea80 <ESTTC_ProcessData+0x3298>)
 800e9c4:	440b      	add	r3, r1
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	f005 fd12 	bl	80143f2 <f_puts>
                    } while (FR_OK == f_findnext(&dd[Interface], &fno[Interface]));
 800e9ce:	79fb      	ldrb	r3, [r7, #7]
 800e9d0:	f44f 7209 	mov.w	r2, #548	; 0x224
 800e9d4:	fb02 f303 	mul.w	r3, r2, r3
 800e9d8:	4a2d      	ldr	r2, [pc, #180]	; (800ea90 <ESTTC_ProcessData+0x32a8>)
 800e9da:	1898      	adds	r0, r3, r2
 800e9dc:	79fa      	ldrb	r2, [r7, #7]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	005b      	lsls	r3, r3, #1
 800e9e2:	4413      	add	r3, r2
 800e9e4:	00db      	lsls	r3, r3, #3
 800e9e6:	4a2b      	ldr	r2, [pc, #172]	; (800ea94 <ESTTC_ProcessData+0x32ac>)
 800e9e8:	4413      	add	r3, r2
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	f005 fb1b 	bl	8014026 <f_findnext>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f43f af63 	beq.w	800e8be <ESTTC_ProcessData+0x30d6>
 800e9f8:	e000      	b.n	800e9fc <ESTTC_ProcessData+0x3214>
                      if (strlen(fno[Interface].fname) == 0) break;
 800e9fa:	bf00      	nop
                    fprintf((FILE *)&df[Interface], "-----------------------------\n         TOTAL FILES %u\n", (uint16_t)j);
 800e9fc:	79fb      	ldrb	r3, [r7, #7]
 800e9fe:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800ea02:	fb02 f303 	mul.w	r3, r2, r3
 800ea06:	4a1e      	ldr	r2, [pc, #120]	; (800ea80 <ESTTC_ProcessData+0x3298>)
 800ea08:	4413      	add	r3, r2
 800ea0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ea0c:	b292      	uxth	r2, r2
 800ea0e:	4929      	ldr	r1, [pc, #164]	; (800eab4 <ESTTC_ProcessData+0x32cc>)
 800ea10:	4618      	mov	r0, r3
 800ea12:	f008 fc13 	bl	801723c <fiprintf>
                    f_close(&df[Interface]);
 800ea16:	79fb      	ldrb	r3, [r7, #7]
 800ea18:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800ea1c:	fb02 f303 	mul.w	r3, r2, r3
 800ea20:	4a17      	ldr	r2, [pc, #92]	; (800ea80 <ESTTC_ProcessData+0x3298>)
 800ea22:	4413      	add	r3, r2
 800ea24:	4618      	mov	r0, r3
 800ea26:	f004 ff29 	bl	801387c <f_close>
                    fprintf(ComInterface, "OK\r");
 800ea2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea2c:	2203      	movs	r2, #3
 800ea2e:	2101      	movs	r1, #1
 800ea30:	4821      	ldr	r0, [pc, #132]	; (800eab8 <ESTTC_ProcessData+0x32d0>)
 800ea32:	f7fc fe13 	bl	800b65c <fwrite>
                    break;
 800ea36:	e01c      	b.n	800ea72 <ESTTC_ProcessData+0x328a>

                  default: // Unknown command
                    fprintf(ComInterface, "ERR+UNC:%s\r", &begin[7]);
 800ea38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea3a:	3307      	adds	r3, #7
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	491f      	ldr	r1, [pc, #124]	; (800eabc <ESTTC_ProcessData+0x32d4>)
 800ea40:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ea42:	f008 fbfb 	bl	801723c <fiprintf>
                    break;
 800ea46:	e014      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                }
              }
            }
          }
          else
            fprintf(ComInterface, "ERR cmd\r");
 800ea48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea4a:	2208      	movs	r2, #8
 800ea4c:	2101      	movs	r1, #1
 800ea4e:	481c      	ldr	r0, [pc, #112]	; (800eac0 <ESTTC_ProcessData+0x32d8>)
 800ea50:	f7fc fe04 	bl	800b65c <fwrite>
 800ea54:	e00d      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
        }else{
            fprintf(ComInterface, "ERR - Wrong Length!\r");
 800ea56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea58:	2214      	movs	r2, #20
 800ea5a:	2101      	movs	r1, #1
 800ea5c:	4819      	ldr	r0, [pc, #100]	; (800eac4 <ESTTC_ProcessData+0x32dc>)
 800ea5e:	f7fc fdfd 	bl	800b65c <fwrite>
 800ea62:	e006      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                  break;
 800ea64:	bf00      	nop
 800ea66:	e004      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
              }
 800ea68:	bf00      	nop
 800ea6a:	e002      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    break;
 800ea6c:	bf00      	nop
 800ea6e:	e000      	b.n	800ea72 <ESTTC_ProcessData+0x328a>
                    break;
 800ea70:	bf00      	nop
        }
      }
    }

    return ProcessedPacket;
 800ea72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3778      	adds	r7, #120	; 0x78
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	20008518 	.word	0x20008518
 800ea84:	0801b868 	.word	0x0801b868
 800ea88:	0801b888 	.word	0x0801b888
 800ea8c:	20000464 	.word	0x20000464
 800ea90:	20008b9c 	.word	0x20008b9c
 800ea94:	20000a7c 	.word	0x20000a7c
 800ea98:	0801b8a8 	.word	0x0801b8a8
 800ea9c:	0801b8ac 	.word	0x0801b8ac
 800eaa0:	20000764 	.word	0x20000764
 800eaa4:	0801b8bc 	.word	0x0801b8bc
 800eaa8:	003ffffe 	.word	0x003ffffe
 800eaac:	0801b8cc 	.word	0x0801b8cc
 800eab0:	0801b8dc 	.word	0x0801b8dc
 800eab4:	0801b8ec 	.word	0x0801b8ec
 800eab8:	0801b36c 	.word	0x0801b36c
 800eabc:	0801b924 	.word	0x0801b924
 800eac0:	0801b930 	.word	0x0801b930
 800eac4:	0801b93c 	.word	0x0801b93c

0800eac8 <ESTTC_getchar>:

int ESTTC_getchar(ESTTC_InterfacesEnum Interface)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	4603      	mov	r3, r0
 800ead0:	71fb      	strb	r3, [r7, #7]
	int ch = -1;
 800ead2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ead6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ead8:	b672      	cpsid	i
}
 800eada:	bf00      	nop

	__disable_interrupt();

	if(RxBuffTail[Interface] != RxBuffHead[Interface])
 800eadc:	79fb      	ldrb	r3, [r7, #7]
 800eade:	4a18      	ldr	r2, [pc, #96]	; (800eb40 <ESTTC_getchar+0x78>)
 800eae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eae4:	79fb      	ldrb	r3, [r7, #7]
 800eae6:	4917      	ldr	r1, [pc, #92]	; (800eb44 <ESTTC_getchar+0x7c>)
 800eae8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d01d      	beq.n	800eb2c <ESTTC_getchar+0x64>
	{
		ch = (BYTE)RxBuffer[Interface][RxBuffTail[Interface]];
 800eaf0:	79fa      	ldrb	r2, [r7, #7]
 800eaf2:	79fb      	ldrb	r3, [r7, #7]
 800eaf4:	4912      	ldr	r1, [pc, #72]	; (800eb40 <ESTTC_getchar+0x78>)
 800eaf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eafa:	4913      	ldr	r1, [pc, #76]	; (800eb48 <ESTTC_getchar+0x80>)
 800eafc:	0212      	lsls	r2, r2, #8
 800eafe:	440a      	add	r2, r1
 800eb00:	4413      	add	r3, r2
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	60fb      	str	r3, [r7, #12]
		RxBuffTail[Interface] = (RxBuffTail[Interface] + 1) % UART_BUFFER_SIZE;
 800eb08:	79fb      	ldrb	r3, [r7, #7]
 800eb0a:	4a0d      	ldr	r2, [pc, #52]	; (800eb40 <ESTTC_getchar+0x78>)
 800eb0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb10:	1c5a      	adds	r2, r3, #1
 800eb12:	79fb      	ldrb	r3, [r7, #7]
 800eb14:	b2d2      	uxtb	r2, r2
 800eb16:	490a      	ldr	r1, [pc, #40]	; (800eb40 <ESTTC_getchar+0x78>)
 800eb18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		RxBuffLen[Interface]--;
 800eb1c:	79fb      	ldrb	r3, [r7, #7]
 800eb1e:	4a0b      	ldr	r2, [pc, #44]	; (800eb4c <ESTTC_getchar+0x84>)
 800eb20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eb24:	3a01      	subs	r2, #1
 800eb26:	4909      	ldr	r1, [pc, #36]	; (800eb4c <ESTTC_getchar+0x84>)
 800eb28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("cpsie i" : : : "memory");
 800eb2c:	b662      	cpsie	i
}
 800eb2e:	bf00      	nop
	}
	__enable_interrupt();

	return ch;
 800eb30:	68fb      	ldr	r3, [r7, #12]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	20009508 	.word	0x20009508
 800eb44:	20009514 	.word	0x20009514
 800eb48:	20009208 	.word	0x20009208
 800eb4c:	2000850c 	.word	0x2000850c

0800eb50 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
    if( huart == &huart1 )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a16      	ldr	r2, [pc, #88]	; (800ebb4 <HAL_UART_ErrorCallback+0x64>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d109      	bne.n	800eb74 <HAL_UART_ErrorCallback+0x24>
    {
        MX_USART1_UART_Init();
 800eb60:	f000 fed8 	bl	800f914 <MX_USART1_UART_Init>
        HAL_UART_Receive_IT((UART_HandleTypeDef*)COMM, (uint8_t *)&rx_data_dummy, 1);
 800eb64:	4b14      	ldr	r3, [pc, #80]	; (800ebb8 <HAL_UART_ErrorCallback+0x68>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	4914      	ldr	r1, [pc, #80]	; (800ebbc <HAL_UART_ErrorCallback+0x6c>)
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fa f8d7 	bl	8008d20 <HAL_UART_Receive_IT>
    }else if( huart == &huart6 )
    {
        MX_USART6_UART_Init();
        HAL_UART_Receive_IT((UART_HandleTypeDef*)SYSCON, (uint8_t *)&rx_data_dummy, 1);
    }
}
 800eb72:	e01a      	b.n	800ebaa <HAL_UART_ErrorCallback+0x5a>
    }else if( huart == &huart4 )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a12      	ldr	r2, [pc, #72]	; (800ebc0 <HAL_UART_ErrorCallback+0x70>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d109      	bne.n	800eb90 <HAL_UART_ErrorCallback+0x40>
        MX_UART4_Init();
 800eb7c:	f000 fea0 	bl	800f8c0 <MX_UART4_Init>
        HAL_UART_Receive_IT((UART_HandleTypeDef*)PAYLOAD, (uint8_t *)&rx_data_dummy, 1);
 800eb80:	4b10      	ldr	r3, [pc, #64]	; (800ebc4 <HAL_UART_ErrorCallback+0x74>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2201      	movs	r2, #1
 800eb86:	490d      	ldr	r1, [pc, #52]	; (800ebbc <HAL_UART_ErrorCallback+0x6c>)
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fa f8c9 	bl	8008d20 <HAL_UART_Receive_IT>
}
 800eb8e:	e00c      	b.n	800ebaa <HAL_UART_ErrorCallback+0x5a>
    }else if( huart == &huart6 )
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a0d      	ldr	r2, [pc, #52]	; (800ebc8 <HAL_UART_ErrorCallback+0x78>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d108      	bne.n	800ebaa <HAL_UART_ErrorCallback+0x5a>
        MX_USART6_UART_Init();
 800eb98:	f000 fee6 	bl	800f968 <MX_USART6_UART_Init>
        HAL_UART_Receive_IT((UART_HandleTypeDef*)SYSCON, (uint8_t *)&rx_data_dummy, 1);
 800eb9c:	4b0b      	ldr	r3, [pc, #44]	; (800ebcc <HAL_UART_ErrorCallback+0x7c>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2201      	movs	r2, #1
 800eba2:	4906      	ldr	r1, [pc, #24]	; (800ebbc <HAL_UART_ErrorCallback+0x6c>)
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fa f8bb 	bl	8008d20 <HAL_UART_Receive_IT>
}
 800ebaa:	bf00      	nop
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	2000986c 	.word	0x2000986c
 800ebb8:	20000000 	.word	0x20000000
 800ebbc:	20000acc 	.word	0x20000acc
 800ebc0:	20009a08 	.word	0x20009a08
 800ebc4:	20000004 	.word	0x20000004
 800ebc8:	200099c8 	.word	0x200099c8
 800ebcc:	20000008 	.word	0x20000008

0800ebd0 <getbyte>:
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* INTERNAL (STATIC) ROUTINES DEFINITION
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
static int getbyte(uint32_t tmt_ms, ESTTC_InterfacesEnum Interface)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	70fb      	strb	r3, [r7, #3]
  int ch;

  if ((ch = ESTTC_getchar(Interface)) != -1) return ch;
 800ebdc:	78fb      	ldrb	r3, [r7, #3]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7ff ff72 	bl	800eac8 <ESTTC_getchar>
 800ebe4:	60f8      	str	r0, [r7, #12]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebec:	d001      	beq.n	800ebf2 <getbyte+0x22>
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	e018      	b.n	800ec24 <getbyte+0x54>

  for (uint32_t i = 0; i < tmt_ms; i++)
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	60bb      	str	r3, [r7, #8]
 800ebf6:	e00e      	b.n	800ec16 <getbyte+0x46>
  {
    osDelay(1);
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	f005 fd30 	bl	801465e <osDelay>
    if ((ch = ESTTC_getchar(Interface)) != -1) break;
 800ebfe:	78fb      	ldrb	r3, [r7, #3]
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7ff ff61 	bl	800eac8 <ESTTC_getchar>
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec0e:	d107      	bne.n	800ec20 <getbyte+0x50>
  for (uint32_t i = 0; i < tmt_ms; i++)
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	3301      	adds	r3, #1
 800ec14:	60bb      	str	r3, [r7, #8]
 800ec16:	68ba      	ldr	r2, [r7, #8]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d3ec      	bcc.n	800ebf8 <getbyte+0x28>
 800ec1e:	e000      	b.n	800ec22 <getbyte+0x52>
    if ((ch = ESTTC_getchar(Interface)) != -1) break;
 800ec20:	bf00      	nop
  }
  return ch;
 800ec22:	68fb      	ldr	r3, [r7, #12]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <GetPhrase>:

static uint32_t GetPhrase(char *dst, uint32_t len, char term, ESTTC_InterfacesEnum Interface)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	4611      	mov	r1, r2
 800ec38:	461a      	mov	r2, r3
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	71fb      	strb	r3, [r7, #7]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	71bb      	strb	r3, [r7, #6]
  int ch;

  if ((dst == NULL) || (len == 0)) return 0;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d002      	beq.n	800ec4e <GetPhrase+0x22>
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d12f      	bne.n	800ecae <GetPhrase+0x82>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	e037      	b.n	800ecc2 <GetPhrase+0x96>

  while((ch = ESTTC_getchar(Interface)) != -1 )
  {
      dst[pack_data_position[Interface]] = (BYTE)ch;
 800ec52:	79bb      	ldrb	r3, [r7, #6]
 800ec54:	4a1d      	ldr	r2, [pc, #116]	; (800eccc <GetPhrase+0xa0>)
 800ec56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	4413      	add	r3, r2
 800ec60:	697a      	ldr	r2, [r7, #20]
 800ec62:	b2d2      	uxtb	r2, r2
 800ec64:	701a      	strb	r2, [r3, #0]

      pack_data_position[Interface] = (pack_data_position[Interface] + 1) % LINE_BUFFER_SIZE;
 800ec66:	79bb      	ldrb	r3, [r7, #6]
 800ec68:	4a18      	ldr	r2, [pc, #96]	; (800eccc <GetPhrase+0xa0>)
 800ec6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	425a      	negs	r2, r3
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	b2d2      	uxtb	r2, r2
 800ec76:	bf58      	it	pl
 800ec78:	4253      	negpl	r3, r2
 800ec7a:	79ba      	ldrb	r2, [r7, #6]
 800ec7c:	b299      	uxth	r1, r3
 800ec7e:	4b13      	ldr	r3, [pc, #76]	; (800eccc <GetPhrase+0xa0>)
 800ec80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

      if(term == (BYTE)ch)
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	79fa      	ldrb	r2, [r7, #7]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d10f      	bne.n	800ecae <GetPhrase+0x82>
      {
          dst[pack_data_position[Interface]-1] = 0;
 800ec8e:	79bb      	ldrb	r3, [r7, #6]
 800ec90:	4a0e      	ldr	r2, [pc, #56]	; (800eccc <GetPhrase+0xa0>)
 800ec92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	701a      	strb	r2, [r3, #0]
          pack_data_position[Interface] = 0;
 800eca0:	79bb      	ldrb	r3, [r7, #6]
 800eca2:	4a0a      	ldr	r2, [pc, #40]	; (800eccc <GetPhrase+0xa0>)
 800eca4:	2100      	movs	r1, #0
 800eca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          return 1;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e009      	b.n	800ecc2 <GetPhrase+0x96>
  while((ch = ESTTC_getchar(Interface)) != -1 )
 800ecae:	79bb      	ldrb	r3, [r7, #6]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7ff ff09 	bl	800eac8 <ESTTC_getchar>
 800ecb6:	6178      	str	r0, [r7, #20]
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecbe:	d1c8      	bne.n	800ec52 <GetPhrase+0x26>
      }
  }

  return 0;
 800ecc0:	2300      	movs	r3, #0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3718      	adds	r7, #24
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	20000ac4 	.word	0x20000ac4

0800ecd0 <HexToBin>:

static uint8_t HexToBin(uint8_t hb, uint8_t lb)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	460a      	mov	r2, r1
 800ecda:	71fb      	strb	r3, [r7, #7]
 800ecdc:	4613      	mov	r3, r2
 800ecde:	71bb      	strb	r3, [r7, #6]
  uint8_t thb = hb, tlb = lb;
 800ece0:	79fb      	ldrb	r3, [r7, #7]
 800ece2:	73fb      	strb	r3, [r7, #15]
 800ece4:	79bb      	ldrb	r3, [r7, #6]
 800ece6:	73bb      	strb	r3, [r7, #14]

  if (thb > '9') thb += 9;
 800ece8:	7bfb      	ldrb	r3, [r7, #15]
 800ecea:	2b39      	cmp	r3, #57	; 0x39
 800ecec:	d902      	bls.n	800ecf4 <HexToBin+0x24>
 800ecee:	7bfb      	ldrb	r3, [r7, #15]
 800ecf0:	3309      	adds	r3, #9
 800ecf2:	73fb      	strb	r3, [r7, #15]
  if (tlb > '9') tlb += 9;
 800ecf4:	7bbb      	ldrb	r3, [r7, #14]
 800ecf6:	2b39      	cmp	r3, #57	; 0x39
 800ecf8:	d902      	bls.n	800ed00 <HexToBin+0x30>
 800ecfa:	7bbb      	ldrb	r3, [r7, #14]
 800ecfc:	3309      	adds	r3, #9
 800ecfe:	73bb      	strb	r3, [r7, #14]

  return (thb << 4) + (tlb & 0x0f);
 800ed00:	7bfb      	ldrb	r3, [r7, #15]
 800ed02:	011b      	lsls	r3, r3, #4
 800ed04:	b2da      	uxtb	r2, r3
 800ed06:	7bbb      	ldrb	r3, [r7, #14]
 800ed08:	f003 030f 	and.w	r3, r3, #15
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	4413      	add	r3, r2
 800ed10:	b2db      	uxtb	r3, r3
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3714      	adds	r7, #20
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr
	...

0800ed20 <FLASH_PatternCheck>:

static uint8_t FLASH_PatternCheck(uint32_t addr, uint8_t pattern, uint32_t len)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b087      	sub	sp, #28
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	607a      	str	r2, [r7, #4]
 800ed2c:	72fb      	strb	r3, [r7, #11]
  uint32_t i;

  if (addr < FLASH_MIN_ADDR) return HAL_ERROR;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	4a13      	ldr	r2, [pc, #76]	; (800ed80 <FLASH_PatternCheck+0x60>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d801      	bhi.n	800ed3a <FLASH_PatternCheck+0x1a>
 800ed36:	2301      	movs	r3, #1
 800ed38:	e01c      	b.n	800ed74 <FLASH_PatternCheck+0x54>
  if ((addr + len) > (FLASH_MIN_ADDR+FLASH_SIZE)) return HAL_ERROR;
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4413      	add	r3, r2
 800ed40:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800ed44:	d901      	bls.n	800ed4a <FLASH_PatternCheck+0x2a>
 800ed46:	2301      	movs	r3, #1
 800ed48:	e014      	b.n	800ed74 <FLASH_PatternCheck+0x54>

  for (i = addr; i < addr+len; i++)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	617b      	str	r3, [r7, #20]
 800ed4e:	e00a      	b.n	800ed66 <FLASH_PatternCheck+0x46>
  {
    if (pattern != *((uint8_t*)i))
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	7afa      	ldrb	r2, [r7, #11]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d002      	beq.n	800ed60 <FLASH_PatternCheck+0x40>
    {
      return i;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	e009      	b.n	800ed74 <FLASH_PatternCheck+0x54>
  for (i = addr; i < addr+len; i++)
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	3301      	adds	r3, #1
 800ed64:	617b      	str	r3, [r7, #20]
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	697a      	ldr	r2, [r7, #20]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d3ee      	bcc.n	800ed50 <FLASH_PatternCheck+0x30>
    }
  }

  return HAL_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	371c      	adds	r7, #28
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	0803ffff 	.word	0x0803ffff

0800ed84 <FLASH_Write>:

static uint8_t FLASH_Write(uint8_t *src, uint32_t addr, uint32_t len)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b088      	sub	sp, #32
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
  if ((src == NULL)||(addr < FLASH_MIN_ADDR)||((addr + len) > (FLASH_MIN_ADDR+FLASH_SIZE)))
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d009      	beq.n	800edaa <FLASH_Write+0x26>
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	4a1c      	ldr	r2, [pc, #112]	; (800ee0c <FLASH_Write+0x88>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d905      	bls.n	800edaa <FLASH_Write+0x26>
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4413      	add	r3, r2
 800eda4:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800eda8:	d901      	bls.n	800edae <FLASH_Write+0x2a>
    return HAL_ERROR;
 800edaa:	2301      	movs	r3, #1
 800edac:	e029      	b.n	800ee02 <FLASH_Write+0x7e>

  HAL_StatusTypeDef res = HAL_OK;
 800edae:	2300      	movs	r3, #0
 800edb0:	77fb      	strb	r3, [r7, #31]
  uint32_t prog_size = FLASH_TYPEPROGRAM_DOUBLEWORD;
 800edb2:	2303      	movs	r3, #3
 800edb4:	617b      	str	r3, [r7, #20]
  uint32_t addr_inc = sizeof(uint64_t);
 800edb6:	2308      	movs	r3, #8
 800edb8:	613b      	str	r3, [r7, #16]

  {
    prog_size = FLASH_TYPEPROGRAM_BYTE;
 800edba:	2300      	movs	r3, #0
 800edbc:	617b      	str	r3, [r7, #20]
    addr_inc = sizeof(uint8_t);
 800edbe:	2301      	movs	r3, #1
 800edc0:	613b      	str	r3, [r7, #16]
  }

  for (uint32_t i = 0; i < len; i += addr_inc)
 800edc2:	2300      	movs	r3, #0
 800edc4:	61bb      	str	r3, [r7, #24]
 800edc6:	e015      	b.n	800edf4 <FLASH_Write+0x70>
  {
    res = HAL_FLASH_Program(prog_size, addr+i, src[i]);
 800edc8:	68ba      	ldr	r2, [r7, #8]
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	18d1      	adds	r1, r2, r3
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	4413      	add	r3, r2
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	f04f 0300 	mov.w	r3, #0
 800eddc:	6978      	ldr	r0, [r7, #20]
 800edde:	f7f3 fad1 	bl	8002384 <HAL_FLASH_Program>
 800ede2:	4603      	mov	r3, r0
 800ede4:	77fb      	strb	r3, [r7, #31]
    if (res != HAL_OK) break;
 800ede6:	7ffb      	ldrb	r3, [r7, #31]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d108      	bne.n	800edfe <FLASH_Write+0x7a>
  for (uint32_t i = 0; i < len; i += addr_inc)
 800edec:	69ba      	ldr	r2, [r7, #24]
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	4413      	add	r3, r2
 800edf2:	61bb      	str	r3, [r7, #24]
 800edf4:	69ba      	ldr	r2, [r7, #24]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d3e5      	bcc.n	800edc8 <FLASH_Write+0x44>
 800edfc:	e000      	b.n	800ee00 <FLASH_Write+0x7c>
    if (res != HAL_OK) break;
 800edfe:	bf00      	nop
  }

  return res;
 800ee00:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3720      	adds	r7, #32
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	0803ffff 	.word	0x0803ffff

0800ee10 <APP_InitCdCardFiles>:

void APP_InitCdCardFiles(void)
{
 800ee10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee14:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800ee18:	af08      	add	r7, sp, #32
    uint32_t i, j;
    FRESULT appl_fd_result = FR_INVALID_PARAMETER;
 800ee1a:	2313      	movs	r3, #19
 800ee1c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
    FIL df;

    if (FR_OK == (appl_fd_result = f_mount(&SD_Fs, "0", 1)))
 800ee20:	2201      	movs	r2, #1
 800ee22:	495c      	ldr	r1, [pc, #368]	; (800ef94 <APP_InitCdCardFiles+0x184>)
 800ee24:	485c      	ldr	r0, [pc, #368]	; (800ef98 <APP_InitCdCardFiles+0x188>)
 800ee26:	f003 fe37 	bl	8012a98 <f_mount>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 800ee30:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d107      	bne.n	800ee48 <APP_InitCdCardFiles+0x38>
      fprintf(SYSCON, "SD card mounted OK.\r");
 800ee38:	4b58      	ldr	r3, [pc, #352]	; (800ef9c <APP_InitCdCardFiles+0x18c>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2214      	movs	r2, #20
 800ee3e:	2101      	movs	r1, #1
 800ee40:	4857      	ldr	r0, [pc, #348]	; (800efa0 <APP_InitCdCardFiles+0x190>)
 800ee42:	f7fc fc0b 	bl	800b65c <fwrite>
 800ee46:	e007      	b.n	800ee58 <APP_InitCdCardFiles+0x48>
    else
      fprintf(SYSCON, "SD card fail err=%u.\r", appl_fd_result);
 800ee48:	4b54      	ldr	r3, [pc, #336]	; (800ef9c <APP_InitCdCardFiles+0x18c>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 800ee50:	4954      	ldr	r1, [pc, #336]	; (800efa4 <APP_InitCdCardFiles+0x194>)
 800ee52:	4618      	mov	r0, r3
 800ee54:	f008 f9f2 	bl	801723c <fiprintf>

    HAL_RTC_GetTime(&hrtc, &sTime, calendar_format);
 800ee58:	4b53      	ldr	r3, [pc, #332]	; (800efa8 <APP_InitCdCardFiles+0x198>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	4953      	ldr	r1, [pc, #332]	; (800efac <APP_InitCdCardFiles+0x19c>)
 800ee60:	4853      	ldr	r0, [pc, #332]	; (800efb0 <APP_InitCdCardFiles+0x1a0>)
 800ee62:	f7f6 fc31 	bl	80056c8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, calendar_format);
 800ee66:	4b50      	ldr	r3, [pc, #320]	; (800efa8 <APP_InitCdCardFiles+0x198>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	4951      	ldr	r1, [pc, #324]	; (800efb4 <APP_InitCdCardFiles+0x1a4>)
 800ee6e:	4850      	ldr	r0, [pc, #320]	; (800efb0 <APP_InitCdCardFiles+0x1a0>)
 800ee70:	f7f6 fd3d 	bl	80058ee <HAL_RTC_GetDate>

    appl_fd_result = f_open(&df, "0:/sys.log", FA_WRITE | FA_READ | FA_OPEN_ALWAYS /*| FA_OPEN_APPEND*/);   //VMI /*| FA_OPEN_APPEND*/
 800ee74:	f107 0308 	add.w	r3, r7, #8
 800ee78:	2213      	movs	r2, #19
 800ee7a:	494f      	ldr	r1, [pc, #316]	; (800efb8 <APP_InitCdCardFiles+0x1a8>)
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f003 fe73 	bl	8012b68 <f_open>
 800ee82:	4603      	mov	r3, r0
 800ee84:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f


    if( FR_OK == appl_fd_result )
 800ee88:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d17b      	bne.n	800ef88 <APP_InitCdCardFiles+0x178>
    {
        appl_fd_result = f_lseek(&df, df.fsize);
 800ee90:	f107 0308 	add.w	r3, r7, #8
 800ee94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ee98:	f107 0308 	add.w	r3, r7, #8
 800ee9c:	4611      	mov	r1, r2
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f004 fd1c 	bl	80138dc <f_lseek>
 800eea4:	4603      	mov	r3, r0
 800eea6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

        if( FR_OK == appl_fd_result )
 800eeaa:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d162      	bne.n	800ef78 <APP_InitCdCardFiles+0x168>
        {
            if( FR_OK == appl_fd_result )
 800eeb2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d158      	bne.n	800ef6c <APP_InitCdCardFiles+0x15c>
            {
                i = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 800eeba:	2100      	movs	r1, #0
 800eebc:	483c      	ldr	r0, [pc, #240]	; (800efb0 <APP_InitCdCardFiles+0x1a0>)
 800eebe:	f7f6 fe0f 	bl	8005ae0 <HAL_RTCEx_BKUPRead>
 800eec2:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
                j = *((__IO uint32_t*)MAILBOX_ADDRESS);
 800eec6:	4b3d      	ldr	r3, [pc, #244]	; (800efbc <APP_InitCdCardFiles+0x1ac>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
                        sDate.Year, sDate.Month, sDate.Date,
 800eece:	4b39      	ldr	r3, [pc, #228]	; (800efb4 <APP_InitCdCardFiles+0x1a4>)
 800eed0:	78db      	ldrb	r3, [r3, #3]
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
 800eed2:	469c      	mov	ip, r3
                        sDate.Year, sDate.Month, sDate.Date,
 800eed4:	4b37      	ldr	r3, [pc, #220]	; (800efb4 <APP_InitCdCardFiles+0x1a4>)
 800eed6:	785b      	ldrb	r3, [r3, #1]
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
 800eed8:	469e      	mov	lr, r3
                        sDate.Year, sDate.Month, sDate.Date,
 800eeda:	4b36      	ldr	r3, [pc, #216]	; (800efb4 <APP_InitCdCardFiles+0x1a4>)
 800eedc:	789b      	ldrb	r3, [r3, #2]
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
 800eede:	461a      	mov	r2, r3
                        sTime.Hours, sTime.Minutes, sTime.Seconds,
 800eee0:	4b32      	ldr	r3, [pc, #200]	; (800efac <APP_InitCdCardFiles+0x19c>)
 800eee2:	781b      	ldrb	r3, [r3, #0]
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
 800eee4:	4619      	mov	r1, r3
                        sTime.Hours, sTime.Minutes, sTime.Seconds,
 800eee6:	4b31      	ldr	r3, [pc, #196]	; (800efac <APP_InitCdCardFiles+0x19c>)
 800eee8:	785b      	ldrb	r3, [r3, #1]
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
 800eeea:	461c      	mov	r4, r3
                        sTime.Hours, sTime.Minutes, sTime.Seconds,
 800eeec:	4b2f      	ldr	r3, [pc, #188]	; (800efac <APP_InitCdCardFiles+0x19c>)
 800eeee:	789b      	ldrb	r3, [r3, #2]
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
 800eef0:	461d      	mov	r5, r3
                        (uint16_t)(i >> 16),(uint16_t)(i),
 800eef2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800eef6:	0c1b      	lsrs	r3, r3, #16
 800eef8:	b29b      	uxth	r3, r3
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
 800eefa:	461e      	mov	r6, r3
                        (uint16_t)(i >> 16),(uint16_t)(i),
 800eefc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ef00:	b29b      	uxth	r3, r3
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
 800ef02:	607b      	str	r3, [r7, #4]
                        (uint16_t)(j >> 16),(uint16_t)(j));
 800ef04:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800ef08:	0c1b      	lsrs	r3, r3, #16
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 800ef10:	b280      	uxth	r0, r0
                fprintf((FILE *)&df, ">%4d/%02d/%02d %2d:%02d:%02d > RTC_REG=%04X%04X MAILBOX_REG=%04X%04X ",
 800ef12:	f107 0808 	add.w	r8, r7, #8
 800ef16:	9007      	str	r0, [sp, #28]
 800ef18:	9306      	str	r3, [sp, #24]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	9305      	str	r3, [sp, #20]
 800ef1e:	9604      	str	r6, [sp, #16]
 800ef20:	9503      	str	r5, [sp, #12]
 800ef22:	9402      	str	r4, [sp, #8]
 800ef24:	9101      	str	r1, [sp, #4]
 800ef26:	9200      	str	r2, [sp, #0]
 800ef28:	4673      	mov	r3, lr
 800ef2a:	4662      	mov	r2, ip
 800ef2c:	4924      	ldr	r1, [pc, #144]	; (800efc0 <APP_InitCdCardFiles+0x1b0>)
 800ef2e:	4640      	mov	r0, r8
 800ef30:	f008 f984 	bl	801723c <fiprintf>
                if (*((__IO uint32_t*)MAILBOX_ADDRESS) == MAILBOX_VAL_APPL)
 800ef34:	4b21      	ldr	r3, [pc, #132]	; (800efbc <APP_InitCdCardFiles+0x1ac>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a22      	ldr	r2, [pc, #136]	; (800efc4 <APP_InitCdCardFiles+0x1b4>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d10b      	bne.n	800ef56 <APP_InitCdCardFiles+0x146>
                {
                    fprintf((FILE *)&df, "SW version: Appl %d.%02d <%s %s>\r",
 800ef3e:	f107 0008 	add.w	r0, r7, #8
 800ef42:	4b21      	ldr	r3, [pc, #132]	; (800efc8 <APP_InitCdCardFiles+0x1b8>)
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	4b21      	ldr	r3, [pc, #132]	; (800efcc <APP_InitCdCardFiles+0x1bc>)
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	2325      	movs	r3, #37	; 0x25
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	4920      	ldr	r1, [pc, #128]	; (800efd0 <APP_InitCdCardFiles+0x1c0>)
 800ef50:	f008 f974 	bl	801723c <fiprintf>
 800ef54:	e00a      	b.n	800ef6c <APP_InitCdCardFiles+0x15c>
                          verFW_MAJOR_REV_NB, verFW_MINOR_REV_NB, __DATE__, __TIME__);
                }
                else
                {
                  fprintf((FILE *)&df, "SW version: Boot %d.%02d <%s %s>\r",
 800ef56:	f107 0008 	add.w	r0, r7, #8
 800ef5a:	4b1b      	ldr	r3, [pc, #108]	; (800efc8 <APP_InitCdCardFiles+0x1b8>)
 800ef5c:	9301      	str	r3, [sp, #4]
 800ef5e:	4b1b      	ldr	r3, [pc, #108]	; (800efcc <APP_InitCdCardFiles+0x1bc>)
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	2325      	movs	r3, #37	; 0x25
 800ef64:	2200      	movs	r2, #0
 800ef66:	491b      	ldr	r1, [pc, #108]	; (800efd4 <APP_InitCdCardFiles+0x1c4>)
 800ef68:	f008 f968 	bl	801723c <fiprintf>
                          verFW_MAJOR_REV_NB, verFW_MINOR_REV_NB, __DATE__, __TIME__);
                }
            }
            f_close(&df);
 800ef6c:	f107 0308 	add.w	r3, r7, #8
 800ef70:	4618      	mov	r0, r3
 800ef72:	f004 fc83 	bl	801387c <f_close>
        }else{
          fprintf(SYSCON, "ERR+SYS.LOG(%u)\r", (uint16_t)appl_fd_result);
        }
    }
}
 800ef76:	e007      	b.n	800ef88 <APP_InitCdCardFiles+0x178>
          fprintf(SYSCON, "ERR+SYS.LOG(%u)\r", (uint16_t)appl_fd_result);
 800ef78:	4b08      	ldr	r3, [pc, #32]	; (800ef9c <APP_InitCdCardFiles+0x18c>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 800ef80:	4915      	ldr	r1, [pc, #84]	; (800efd8 <APP_InitCdCardFiles+0x1c8>)
 800ef82:	4618      	mov	r0, r3
 800ef84:	f008 f95a 	bl	801723c <fiprintf>
}
 800ef88:	bf00      	nop
 800ef8a:	f507 7710 	add.w	r7, r7, #576	; 0x240
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef94:	0801b954 	.word	0x0801b954
 800ef98:	20000230 	.word	0x20000230
 800ef9c:	20000008 	.word	0x20000008
 800efa0:	0801b958 	.word	0x0801b958
 800efa4:	0801b970 	.word	0x0801b970
 800efa8:	200084e0 	.word	0x200084e0
 800efac:	200096d8 	.word	0x200096d8
 800efb0:	200098b0 	.word	0x200098b0
 800efb4:	200098ac 	.word	0x200098ac
 800efb8:	0801b988 	.word	0x0801b988
 800efbc:	40002854 	.word	0x40002854
 800efc0:	0801b994 	.word	0x0801b994
 800efc4:	a552a552 	.word	0xa552a552
 800efc8:	0801b2f0 	.word	0x0801b2f0
 800efcc:	0801b2fc 	.word	0x0801b2fc
 800efd0:	0801b9dc 	.word	0x0801b9dc
 800efd4:	0801ba00 	.word	0x0801ba00
 800efd8:	0801ba24 	.word	0x0801ba24

0800efdc <SystemClock_Config>:
*/

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b0a0      	sub	sp, #128	; 0x80
 800efe0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800efe2:	2300      	movs	r3, #0
 800efe4:	60bb      	str	r3, [r7, #8]
 800efe6:	4b3b      	ldr	r3, [pc, #236]	; (800f0d4 <SystemClock_Config+0xf8>)
 800efe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efea:	4a3a      	ldr	r2, [pc, #232]	; (800f0d4 <SystemClock_Config+0xf8>)
 800efec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eff0:	6413      	str	r3, [r2, #64]	; 0x40
 800eff2:	4b38      	ldr	r3, [pc, #224]	; (800f0d4 <SystemClock_Config+0xf8>)
 800eff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800effa:	60bb      	str	r3, [r7, #8]
 800effc:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800effe:	2300      	movs	r3, #0
 800f000:	607b      	str	r3, [r7, #4]
 800f002:	4b35      	ldr	r3, [pc, #212]	; (800f0d8 <SystemClock_Config+0xfc>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f00a:	4a33      	ldr	r2, [pc, #204]	; (800f0d8 <SystemClock_Config+0xfc>)
 800f00c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f010:	6013      	str	r3, [r2, #0]
 800f012:	4b31      	ldr	r3, [pc, #196]	; (800f0d8 <SystemClock_Config+0xfc>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f01a:	607b      	str	r3, [r7, #4]
 800f01c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800f01e:	2305      	movs	r3, #5
 800f020:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f026:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800f028:	2301      	movs	r3, #1
 800f02a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f02c:	2302      	movs	r3, #2
 800f02e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f030:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f034:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800f036:	2310      	movs	r3, #16
 800f038:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 800f03a:	23c0      	movs	r3, #192	; 0xc0
 800f03c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f03e:	2302      	movs	r3, #2
 800f040:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800f042:	2304      	movs	r3, #4
 800f044:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f046:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7f5 fb70 	bl	8004730 <HAL_RCC_OscConfig>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d001      	beq.n	800f05a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800f056:	f7f2 fa61 	bl	800151c <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f05a:	230f      	movs	r3, #15
 800f05c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f05e:	2302      	movs	r3, #2
 800f060:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f062:	2300      	movs	r3, #0
 800f064:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f066:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f06a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f06c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f070:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800f072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f076:	2103      	movs	r1, #3
 800f078:	4618      	mov	r0, r3
 800f07a:	f7f5 fdb3 	bl	8004be4 <HAL_RCC_ClockConfig>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d001      	beq.n	800f088 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800f084:	f7f2 fa4a 	bl	800151c <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800f088:	2320      	movs	r3, #32
 800f08a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800f08c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f090:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f092:	f107 030c 	add.w	r3, r7, #12
 800f096:	4618      	mov	r0, r3
 800f098:	f7f5 ffb8 	bl	800500c <HAL_RCCEx_PeriphCLKConfig>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800f0a2:	f7f2 fa3b 	bl	800151c <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f0a6:	f7f5 ff2f 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	4a0b      	ldr	r2, [pc, #44]	; (800f0dc <SystemClock_Config+0x100>)
 800f0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b2:	099b      	lsrs	r3, r3, #6
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7f2 ff8a 	bl	8001fce <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800f0ba:	2004      	movs	r0, #4
 800f0bc:	f7f2 ff94 	bl	8001fe8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	210f      	movs	r1, #15
 800f0c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0c8:	f7f2 ff57 	bl	8001f7a <HAL_NVIC_SetPriority>
}
 800f0cc:	bf00      	nop
 800f0ce:	3780      	adds	r7, #128	; 0x80
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	40023800 	.word	0x40023800
 800f0d8:	40007000 	.word	0x40007000
 800f0dc:	10624dd3 	.word	0x10624dd3

0800f0e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b08e      	sub	sp, #56	; 0x38
 800f0e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	623b      	str	r3, [r7, #32]
 800f0ea:	4bb2      	ldr	r3, [pc, #712]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0ee:	4ab1      	ldr	r2, [pc, #708]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f0f0:	f043 0310 	orr.w	r3, r3, #16
 800f0f4:	6313      	str	r3, [r2, #48]	; 0x30
 800f0f6:	4baf      	ldr	r3, [pc, #700]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0fa:	f003 0310 	and.w	r3, r3, #16
 800f0fe:	623b      	str	r3, [r7, #32]
 800f100:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800f102:	2300      	movs	r3, #0
 800f104:	61fb      	str	r3, [r7, #28]
 800f106:	4bab      	ldr	r3, [pc, #684]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f10a:	4aaa      	ldr	r2, [pc, #680]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f10c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f110:	6313      	str	r3, [r2, #48]	; 0x30
 800f112:	4ba8      	ldr	r3, [pc, #672]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f11a:	61fb      	str	r3, [r7, #28]
 800f11c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f11e:	2300      	movs	r3, #0
 800f120:	61bb      	str	r3, [r7, #24]
 800f122:	4ba4      	ldr	r3, [pc, #656]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f126:	4aa3      	ldr	r2, [pc, #652]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f128:	f043 0304 	orr.w	r3, r3, #4
 800f12c:	6313      	str	r3, [r2, #48]	; 0x30
 800f12e:	4ba1      	ldr	r3, [pc, #644]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f132:	f003 0304 	and.w	r3, r3, #4
 800f136:	61bb      	str	r3, [r7, #24]
 800f138:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800f13a:	2300      	movs	r3, #0
 800f13c:	617b      	str	r3, [r7, #20]
 800f13e:	4b9d      	ldr	r3, [pc, #628]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f142:	4a9c      	ldr	r2, [pc, #624]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f144:	f043 0320 	orr.w	r3, r3, #32
 800f148:	6313      	str	r3, [r2, #48]	; 0x30
 800f14a:	4b9a      	ldr	r3, [pc, #616]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f14e:	f003 0320 	and.w	r3, r3, #32
 800f152:	617b      	str	r3, [r7, #20]
 800f154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f156:	2300      	movs	r3, #0
 800f158:	613b      	str	r3, [r7, #16]
 800f15a:	4b96      	ldr	r3, [pc, #600]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f15e:	4a95      	ldr	r2, [pc, #596]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f164:	6313      	str	r3, [r2, #48]	; 0x30
 800f166:	4b93      	ldr	r3, [pc, #588]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f16e:	613b      	str	r3, [r7, #16]
 800f170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f172:	2300      	movs	r3, #0
 800f174:	60fb      	str	r3, [r7, #12]
 800f176:	4b8f      	ldr	r3, [pc, #572]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f17a:	4a8e      	ldr	r2, [pc, #568]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f17c:	f043 0301 	orr.w	r3, r3, #1
 800f180:	6313      	str	r3, [r2, #48]	; 0x30
 800f182:	4b8c      	ldr	r3, [pc, #560]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	60fb      	str	r3, [r7, #12]
 800f18c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f18e:	2300      	movs	r3, #0
 800f190:	60bb      	str	r3, [r7, #8]
 800f192:	4b88      	ldr	r3, [pc, #544]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f196:	4a87      	ldr	r2, [pc, #540]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f198:	f043 0302 	orr.w	r3, r3, #2
 800f19c:	6313      	str	r3, [r2, #48]	; 0x30
 800f19e:	4b85      	ldr	r3, [pc, #532]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a2:	f003 0302 	and.w	r3, r3, #2
 800f1a6:	60bb      	str	r3, [r7, #8]
 800f1a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	607b      	str	r3, [r7, #4]
 800f1ae:	4b81      	ldr	r3, [pc, #516]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1b2:	4a80      	ldr	r2, [pc, #512]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1b8:	6313      	str	r3, [r2, #48]	; 0x30
 800f1ba:	4b7e      	ldr	r3, [pc, #504]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1c2:	607b      	str	r3, [r7, #4]
 800f1c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	603b      	str	r3, [r7, #0]
 800f1ca:	4b7a      	ldr	r3, [pc, #488]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ce:	4a79      	ldr	r2, [pc, #484]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f1d0:	f043 0308 	orr.w	r3, r3, #8
 800f1d4:	6313      	str	r3, [r2, #48]	; 0x30
 800f1d6:	4b77      	ldr	r3, [pc, #476]	; (800f3b4 <MX_GPIO_Init+0x2d4>)
 800f1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1da:	f003 0308 	and.w	r3, r3, #8
 800f1de:	603b      	str	r3, [r7, #0]
 800f1e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAN4_VGY_GPIO_Port, PAN4_VGY_Pin, GPIO_PIN_RESET);
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2104      	movs	r1, #4
 800f1e6:	4874      	ldr	r0, [pc, #464]	; (800f3b8 <MX_GPIO_Init+0x2d8>)
 800f1e8:	f7f3 fe92 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin, GPIO_PIN_SET);
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f242 0130 	movw	r1, #8240	; 0x2030
 800f1f2:	4872      	ldr	r0, [pc, #456]	; (800f3bc <MX_GPIO_Init+0x2dc>)
 800f1f4:	f7f3 fe8c 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	f640 61ff 	movw	r1, #3839	; 0xeff
 800f1fe:	4870      	ldr	r0, [pc, #448]	; (800f3c0 <MX_GPIO_Init+0x2e0>)
 800f200:	f7f3 fe86 	bl	8002f10 <HAL_GPIO_WritePin>
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBAND_CS_GPIO_Port, SBAND_CS_Pin, GPIO_PIN_RESET);
 800f204:	2200      	movs	r2, #0
 800f206:	2140      	movs	r1, #64	; 0x40
 800f208:	486e      	ldr	r0, [pc, #440]	; (800f3c4 <MX_GPIO_Init+0x2e4>)
 800f20a:	f7f3 fe81 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 800f20e:	2200      	movs	r2, #0
 800f210:	f24e 217c 	movw	r1, #57980	; 0xe27c
 800f214:	486c      	ldr	r0, [pc, #432]	; (800f3c8 <MX_GPIO_Init+0x2e8>)
 800f216:	f7f3 fe7b 	bl	8002f10 <HAL_GPIO_WritePin>
  // Turn-off the second MAG sensor due lack of I2C arbitration MAG1/MAG2
  HAL_GPIO_WritePin(GPIOH, MAG1_EN_Pin|MAG2_EN_Pin, GPIO_PIN_SET);
#endif

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800f21a:	2201      	movs	r2, #1
 800f21c:	2110      	movs	r1, #16
 800f21e:	486b      	ldr	r0, [pc, #428]	; (800f3cc <MX_GPIO_Init+0x2ec>)
 800f220:	f7f3 fe76 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 800f224:	2200      	movs	r2, #0
 800f226:	21e6      	movs	r1, #230	; 0xe6
 800f228:	4869      	ldr	r0, [pc, #420]	; (800f3d0 <MX_GPIO_Init+0x2f0>)
 800f22a:	f7f3 fe71 	bl	8002f10 <HAL_GPIO_WritePin>
                          |PAN3_VGY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 800f22e:	2200      	movs	r2, #0
 800f230:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800f234:	4867      	ldr	r0, [pc, #412]	; (800f3d4 <MX_GPIO_Init+0x2f4>)
 800f236:	f7f3 fe6b 	bl	8002f10 <HAL_GPIO_WritePin>
                          |OBC_OUT2_Pin|OBC_OUT1_Pin, GPIO_PIN_RESET);

  /* Camera power supply disable by default */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT1_Pin, GPIO_PIN_RESET);
 800f23a:	2200      	movs	r2, #0
 800f23c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f240:	4864      	ldr	r0, [pc, #400]	; (800f3d4 <MX_GPIO_Init+0x2f4>)
 800f242:	f7f3 fe65 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_EN_Pin|OBC_OUT4_Pin, GPIO_PIN_RESET);
 800f246:	2200      	movs	r2, #0
 800f248:	2148      	movs	r1, #72	; 0x48
 800f24a:	4863      	ldr	r0, [pc, #396]	; (800f3d8 <MX_GPIO_Init+0x2f8>)
 800f24c:	f7f3 fe60 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PAN4_VGY_Pin */
  GPIO_InitStruct.Pin = PAN4_VGY_Pin;
 800f250:	2304      	movs	r3, #4
 800f252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800f254:	2311      	movs	r3, #17
 800f256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f258:	2300      	movs	r3, #0
 800f25a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f25c:	2300      	movs	r3, #0
 800f25e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN4_VGY_GPIO_Port, &GPIO_InitStruct);
 800f260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f264:	4619      	mov	r1, r3
 800f266:	4854      	ldr	r0, [pc, #336]	; (800f3b8 <MX_GPIO_Init+0x2d8>)
 800f268:	f7f3 fb82 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IRQ_Pin */
  GPIO_InitStruct.Pin = M2_IRQ_Pin;
 800f26c:	2340      	movs	r3, #64	; 0x40
 800f26e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f270:	4b5a      	ldr	r3, [pc, #360]	; (800f3dc <MX_GPIO_Init+0x2fc>)
 800f272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f274:	2300      	movs	r3, #0
 800f276:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_IRQ_GPIO_Port, &GPIO_InitStruct);
 800f278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f27c:	4619      	mov	r1, r3
 800f27e:	484e      	ldr	r0, [pc, #312]	; (800f3b8 <MX_GPIO_Init+0x2d8>)
 800f280:	f7f3 fb76 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IRQ_Pin */
  GPIO_InitStruct.Pin = M1_IRQ_Pin;
 800f284:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f28a:	4b54      	ldr	r3, [pc, #336]	; (800f3dc <MX_GPIO_Init+0x2fc>)
 800f28c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f28e:	2300      	movs	r3, #0
 800f290:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800f292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f296:	4619      	mov	r1, r3
 800f298:	4849      	ldr	r0, [pc, #292]	; (800f3c0 <MX_GPIO_Init+0x2e0>)
 800f29a:	f7f3 fb69 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS2_Pin LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin;
 800f29e:	f242 0330 	movw	r3, #8240	; 0x2030
 800f2a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f2b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	4841      	ldr	r0, [pc, #260]	; (800f3bc <MX_GPIO_Init+0x2dc>)
 800f2b8:	f7f3 fb5a 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS1_Pin PAN6_CS2_Pin PAN6_CS1_Pin PAN1_CS2_Pin
                           PAN1_CS1_Pin PAN2_CS2_Pin PAN2_CS1_Pin PAN3_CS2_Pin
                           PAN3_CS1_Pin PAN4_CS2_Pin PAN4_CS1_Pin */
  GPIO_InitStruct.Pin = PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 800f2bc:	f640 63ff 	movw	r3, #3839	; 0xeff
 800f2c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f2ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2d2:	4619      	mov	r1, r3
 800f2d4:	483a      	ldr	r0, [pc, #232]	; (800f3c0 <MX_GPIO_Init+0x2e0>)
 800f2d6:	f7f3 fb4b 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_CS_Pin */
  GPIO_InitStruct.Pin = SBAND_CS_Pin;
 800f2da:	2340      	movs	r3, #64	; 0x40
 800f2dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f2de:	2301      	movs	r3, #1
 800f2e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SBAND_CS_GPIO_Port, &GPIO_InitStruct);
 800f2ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	4834      	ldr	r0, [pc, #208]	; (800f3c4 <MX_GPIO_Init+0x2e4>)
 800f2f2:	f7f3 fb3d 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_IRQ_Pin */
  GPIO_InitStruct.Pin = SBAND_IRQ_Pin;
 800f2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f2fc:	4b37      	ldr	r3, [pc, #220]	; (800f3dc <MX_GPIO_Init+0x2fc>)
 800f2fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f300:	2300      	movs	r3, #0
 800f302:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SBAND_IRQ_GPIO_Port, &GPIO_InitStruct);
 800f304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f308:	4619      	mov	r1, r3
 800f30a:	482e      	ldr	r0, [pc, #184]	; (800f3c4 <MX_GPIO_Init+0x2e4>)
 800f30c:	f7f3 fb30 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_DIR1_Pin PAN5_DIR2_Pin PAN6_DIR1_Pin PAN6_DIR2_Pin
                           ACC1_EN_Pin ACC2_EN_Pin MAG1_EN_Pin MAG2_EN_Pin
                           PAN4_DIR2_Pin */
  GPIO_InitStruct.Pin = PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 800f310:	f24e 033c 	movw	r3, #57404	; 0xe03c
 800f314:	627b      	str	r3, [r7, #36]	; 0x24
                          |MAG1_EN_Pin|MAG2_EN_Pin
                          |PAN4_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f316:	2301      	movs	r3, #1
 800f318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f31a:	2300      	movs	r3, #0
 800f31c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f31e:	2300      	movs	r3, #0
 800f320:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f326:	4619      	mov	r1, r3
 800f328:	4827      	ldr	r0, [pc, #156]	; (800f3c8 <MX_GPIO_Init+0x2e8>)
 800f32a:	f7f3 fb21 	bl	8002970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACC1_EN_Pin|ACC2_EN_Pin;
 800f32e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800f332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800f334:	2311      	movs	r3, #17
 800f336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f338:	2300      	movs	r3, #0
 800f33a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f33c:	2300      	movs	r3, #0
 800f33e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f344:	4619      	mov	r1, r3
 800f346:	4820      	ldr	r0, [pc, #128]	; (800f3c8 <MX_GPIO_Init+0x2e8>)
 800f348:	f7f3 fb12 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800f34c:	2310      	movs	r3, #16
 800f34e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f350:	2301      	movs	r3, #1
 800f352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f354:	2300      	movs	r3, #0
 800f356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f358:	2300      	movs	r3, #0
 800f35a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800f35c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f360:	4619      	mov	r1, r3
 800f362:	481a      	ldr	r0, [pc, #104]	; (800f3cc <MX_GPIO_Init+0x2ec>)
 800f364:	f7f3 fb04 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_VGY_Pin PAN6_VGY_Pin PAN1_VGY_Pin PAN2_VGY_Pin
                           PAN3_VGY_Pin */
  GPIO_InitStruct.Pin = PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 800f368:	23e6      	movs	r3, #230	; 0xe6
 800f36a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN3_VGY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800f36c:	2311      	movs	r3, #17
 800f36e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f370:	2300      	movs	r3, #0
 800f372:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f374:	2300      	movs	r3, #0
 800f376:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f37c:	4619      	mov	r1, r3
 800f37e:	4814      	ldr	r0, [pc, #80]	; (800f3d0 <MX_GPIO_Init+0x2f0>)
 800f380:	f7f3 faf6 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : OBC_OUT5_Pin PAN4_DIR1_Pin FLASH_NCS_Pin OBC_OUT3_Pin
                           OBC_OUT2_Pin OBC_OUT1_Pin */
  GPIO_InitStruct.Pin = OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 800f384:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 800f388:	627b      	str	r3, [r7, #36]	; 0x24
                          |OBC_OUT2_Pin|OBC_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f38a:	2301      	movs	r3, #1
 800f38c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f38e:	2300      	movs	r3, #0
 800f390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f392:	2300      	movs	r3, #0
 800f394:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f39a:	4619      	mov	r1, r3
 800f39c:	480d      	ldr	r0, [pc, #52]	; (800f3d4 <MX_GPIO_Init+0x2f4>)
 800f39e:	f7f3 fae7 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_EN_Pin OBC_OUT4_Pin */
  GPIO_InitStruct.Pin = SD_EN_Pin|OBC_OUT4_Pin;
 800f3a2:	2348      	movs	r3, #72	; 0x48
 800f3a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	e016      	b.n	800f3e0 <MX_GPIO_Init+0x300>
 800f3b2:	bf00      	nop
 800f3b4:	40023800 	.word	0x40023800
 800f3b8:	40021000 	.word	0x40021000
 800f3bc:	40020800 	.word	0x40020800
 800f3c0:	40022000 	.word	0x40022000
 800f3c4:	40021400 	.word	0x40021400
 800f3c8:	40021c00 	.word	0x40021c00
 800f3cc:	40020000 	.word	0x40020000
 800f3d0:	40020400 	.word	0x40020400
 800f3d4:	40021800 	.word	0x40021800
 800f3d8:	40020c00 	.word	0x40020c00
 800f3dc:	10110000 	.word	0x10110000
 800f3e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	4809      	ldr	r0, [pc, #36]	; (800f410 <MX_GPIO_Init+0x330>)
 800f3ea:	f7f3 fac1 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 800f3ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 800f3fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f400:	4619      	mov	r1, r3
 800f402:	4804      	ldr	r0, [pc, #16]	; (800f414 <MX_GPIO_Init+0x334>)
 800f404:	f7f3 fab4 	bl	8002970 <HAL_GPIO_Init>

}
 800f408:	bf00      	nop
 800f40a:	3738      	adds	r7, #56	; 0x38
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	40020c00 	.word	0x40020c00
 800f414:	40021800 	.word	0x40021800

0800f418 <MX_ADC1_Init>:

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	af00      	add	r7, sp, #0
  /*Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)*/
  hadc1.Instance = ADC1;
 800f41c:	4b18      	ldr	r3, [pc, #96]	; (800f480 <MX_ADC1_Init+0x68>)
 800f41e:	4a19      	ldr	r2, [pc, #100]	; (800f484 <MX_ADC1_Init+0x6c>)
 800f420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800f422:	4b17      	ldr	r3, [pc, #92]	; (800f480 <MX_ADC1_Init+0x68>)
 800f424:	2200      	movs	r2, #0
 800f426:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f428:	4b15      	ldr	r3, [pc, #84]	; (800f480 <MX_ADC1_Init+0x68>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800f42e:	4b14      	ldr	r3, [pc, #80]	; (800f480 <MX_ADC1_Init+0x68>)
 800f430:	2200      	movs	r2, #0
 800f432:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800f434:	4b12      	ldr	r3, [pc, #72]	; (800f480 <MX_ADC1_Init+0x68>)
 800f436:	2200      	movs	r2, #0
 800f438:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f43a:	4b11      	ldr	r3, [pc, #68]	; (800f480 <MX_ADC1_Init+0x68>)
 800f43c:	2200      	movs	r2, #0
 800f43e:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f440:	4b0f      	ldr	r3, [pc, #60]	; (800f480 <MX_ADC1_Init+0x68>)
 800f442:	2200      	movs	r2, #0
 800f444:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f446:	4b0e      	ldr	r3, [pc, #56]	; (800f480 <MX_ADC1_Init+0x68>)
 800f448:	4a0f      	ldr	r2, [pc, #60]	; (800f488 <MX_ADC1_Init+0x70>)
 800f44a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f44c:	4b0c      	ldr	r3, [pc, #48]	; (800f480 <MX_ADC1_Init+0x68>)
 800f44e:	2200      	movs	r2, #0
 800f450:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800f452:	4b0b      	ldr	r3, [pc, #44]	; (800f480 <MX_ADC1_Init+0x68>)
 800f454:	2201      	movs	r2, #1
 800f456:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800f458:	4b09      	ldr	r3, [pc, #36]	; (800f480 <MX_ADC1_Init+0x68>)
 800f45a:	2200      	movs	r2, #0
 800f45c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f45e:	4b08      	ldr	r3, [pc, #32]	; (800f480 <MX_ADC1_Init+0x68>)
 800f460:	2201      	movs	r2, #1
 800f462:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f464:	4806      	ldr	r0, [pc, #24]	; (800f480 <MX_ADC1_Init+0x68>)
 800f466:	f7f2 f8d9 	bl	800161c <HAL_ADC_Init>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d001      	beq.n	800f474 <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 800f470:	f7f2 f854 	bl	800151c <Error_Handler>
  }
  HAL_ADC_Stop(&hadc1);
 800f474:	4802      	ldr	r0, [pc, #8]	; (800f480 <MX_ADC1_Init+0x68>)
 800f476:	f7f2 f9bb 	bl	80017f0 <HAL_ADC_Stop>
}
 800f47a:	bf00      	nop
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	20009824 	.word	0x20009824
 800f484:	40012000 	.word	0x40012000
 800f488:	0f000001 	.word	0x0f000001

0800f48c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b088      	sub	sp, #32
 800f490:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef Timing;

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800f492:	4b28      	ldr	r3, [pc, #160]	; (800f534 <MX_FMC_Init+0xa8>)
 800f494:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800f498:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800f49a:	4b26      	ldr	r3, [pc, #152]	; (800f534 <MX_FMC_Init+0xa8>)
 800f49c:	4a26      	ldr	r2, [pc, #152]	; (800f538 <MX_FMC_Init+0xac>)
 800f49e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800f4a0:	4b24      	ldr	r3, [pc, #144]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800f4a6:	4b23      	ldr	r3, [pc, #140]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800f4ac:	4b21      	ldr	r3, [pc, #132]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800f4b2:	4b20      	ldr	r3, [pc, #128]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4b4:	2210      	movs	r2, #16
 800f4b6:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800f4b8:	4b1e      	ldr	r3, [pc, #120]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800f4be:	4b1d      	ldr	r3, [pc, #116]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 800f4c4:	4b1b      	ldr	r3, [pc, #108]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800f4ca:	4b1a      	ldr	r3, [pc, #104]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800f4d0:	4b18      	ldr	r3, [pc, #96]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800f4d6:	4b17      	ldr	r3, [pc, #92]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4d8:	2200      	movs	r2, #0
 800f4da:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800f4dc:	4b15      	ldr	r3, [pc, #84]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4de:	2200      	movs	r2, #0
 800f4e0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800f4e2:	4b14      	ldr	r3, [pc, #80]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800f4e8:	4b12      	ldr	r3, [pc, #72]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800f4ee:	4b11      	ldr	r3, [pc, #68]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800f4f4:	4b0f      	ldr	r3, [pc, #60]	; (800f534 <MX_FMC_Init+0xa8>)
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800f4fa:	230f      	movs	r3, #15
 800f4fc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800f4fe:	230f      	movs	r3, #15
 800f500:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800f502:	23ff      	movs	r3, #255	; 0xff
 800f504:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800f506:	230f      	movs	r3, #15
 800f508:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800f50a:	2310      	movs	r3, #16
 800f50c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800f50e:	2311      	movs	r3, #17
 800f510:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800f512:	2300      	movs	r3, #0
 800f514:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800f516:	1d3b      	adds	r3, r7, #4
 800f518:	2200      	movs	r2, #0
 800f51a:	4619      	mov	r1, r3
 800f51c:	4805      	ldr	r0, [pc, #20]	; (800f534 <MX_FMC_Init+0xa8>)
 800f51e:	f7f8 fab2 	bl	8007a86 <HAL_SRAM_Init>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <MX_FMC_Init+0xa0>
  {
    Error_Handler();
 800f528:	f7f1 fff8 	bl	800151c <Error_Handler>
  }

}
 800f52c:	bf00      	nop
 800f52e:	3720      	adds	r7, #32
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	200097d4 	.word	0x200097d4
 800f538:	a0000104 	.word	0xa0000104

0800f53c <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800f540:	4b12      	ldr	r3, [pc, #72]	; (800f58c <MX_I2C1_Init+0x50>)
 800f542:	4a13      	ldr	r2, [pc, #76]	; (800f590 <MX_I2C1_Init+0x54>)
 800f544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800f546:	4b11      	ldr	r3, [pc, #68]	; (800f58c <MX_I2C1_Init+0x50>)
 800f548:	4a12      	ldr	r2, [pc, #72]	; (800f594 <MX_I2C1_Init+0x58>)
 800f54a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f54c:	4b0f      	ldr	r3, [pc, #60]	; (800f58c <MX_I2C1_Init+0x50>)
 800f54e:	2200      	movs	r2, #0
 800f550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800f552:	4b0e      	ldr	r3, [pc, #56]	; (800f58c <MX_I2C1_Init+0x50>)
 800f554:	2200      	movs	r2, #0
 800f556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f558:	4b0c      	ldr	r3, [pc, #48]	; (800f58c <MX_I2C1_Init+0x50>)
 800f55a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f55e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f560:	4b0a      	ldr	r3, [pc, #40]	; (800f58c <MX_I2C1_Init+0x50>)
 800f562:	2200      	movs	r2, #0
 800f564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800f566:	4b09      	ldr	r3, [pc, #36]	; (800f58c <MX_I2C1_Init+0x50>)
 800f568:	2200      	movs	r2, #0
 800f56a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f56c:	4b07      	ldr	r3, [pc, #28]	; (800f58c <MX_I2C1_Init+0x50>)
 800f56e:	2200      	movs	r2, #0
 800f570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f572:	4b06      	ldr	r3, [pc, #24]	; (800f58c <MX_I2C1_Init+0x50>)
 800f574:	2200      	movs	r2, #0
 800f576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f578:	4804      	ldr	r0, [pc, #16]	; (800f58c <MX_I2C1_Init+0x50>)
 800f57a:	f7f3 fce3 	bl	8002f44 <HAL_I2C_Init>
 800f57e:	4603      	mov	r3, r0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d001      	beq.n	800f588 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800f584:	f7f1 ffca 	bl	800151c <Error_Handler>
  }

}
 800f588:	bf00      	nop
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	20009684 	.word	0x20009684
 800f590:	40005400 	.word	0x40005400
 800f594:	00061a80 	.word	0x00061a80

0800f598 <MX_I2C2_Init>:

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800f59c:	4b12      	ldr	r3, [pc, #72]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f59e:	4a13      	ldr	r2, [pc, #76]	; (800f5ec <MX_I2C2_Init+0x54>)
 800f5a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800f5a2:	4b11      	ldr	r3, [pc, #68]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f5a4:	4a12      	ldr	r2, [pc, #72]	; (800f5f0 <MX_I2C2_Init+0x58>)
 800f5a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f5a8:	4b0f      	ldr	r3, [pc, #60]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800f5ae:	4b0e      	ldr	r3, [pc, #56]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f5b4:	4b0c      	ldr	r3, [pc, #48]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f5b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f5ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f5bc:	4b0a      	ldr	r3, [pc, #40]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f5be:	2200      	movs	r2, #0
 800f5c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800f5c2:	4b09      	ldr	r3, [pc, #36]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f5c8:	4b07      	ldr	r3, [pc, #28]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f5ce:	4b06      	ldr	r3, [pc, #24]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800f5d4:	4804      	ldr	r0, [pc, #16]	; (800f5e8 <MX_I2C2_Init+0x50>)
 800f5d6:	f7f3 fcb5 	bl	8002f44 <HAL_I2C_Init>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d001      	beq.n	800f5e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800f5e0:	f7f1 ff9c 	bl	800151c <Error_Handler>
  }

}
 800f5e4:	bf00      	nop
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	200096ec 	.word	0x200096ec
 800f5ec:	40005800 	.word	0x40005800
 800f5f0:	000186a0 	.word	0x000186a0

0800f5f4 <MX_I2C3_Init>:

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800f5f8:	4b12      	ldr	r3, [pc, #72]	; (800f644 <MX_I2C3_Init+0x50>)
 800f5fa:	4a13      	ldr	r2, [pc, #76]	; (800f648 <MX_I2C3_Init+0x54>)
 800f5fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800f5fe:	4b11      	ldr	r3, [pc, #68]	; (800f644 <MX_I2C3_Init+0x50>)
 800f600:	4a12      	ldr	r2, [pc, #72]	; (800f64c <MX_I2C3_Init+0x58>)
 800f602:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f604:	4b0f      	ldr	r3, [pc, #60]	; (800f644 <MX_I2C3_Init+0x50>)
 800f606:	2200      	movs	r2, #0
 800f608:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800f60a:	4b0e      	ldr	r3, [pc, #56]	; (800f644 <MX_I2C3_Init+0x50>)
 800f60c:	2200      	movs	r2, #0
 800f60e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f610:	4b0c      	ldr	r3, [pc, #48]	; (800f644 <MX_I2C3_Init+0x50>)
 800f612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f616:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f618:	4b0a      	ldr	r3, [pc, #40]	; (800f644 <MX_I2C3_Init+0x50>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800f61e:	4b09      	ldr	r3, [pc, #36]	; (800f644 <MX_I2C3_Init+0x50>)
 800f620:	2200      	movs	r2, #0
 800f622:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f624:	4b07      	ldr	r3, [pc, #28]	; (800f644 <MX_I2C3_Init+0x50>)
 800f626:	2200      	movs	r2, #0
 800f628:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f62a:	4b06      	ldr	r3, [pc, #24]	; (800f644 <MX_I2C3_Init+0x50>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800f630:	4804      	ldr	r0, [pc, #16]	; (800f644 <MX_I2C3_Init+0x50>)
 800f632:	f7f3 fc87 	bl	8002f44 <HAL_I2C_Init>
 800f636:	4603      	mov	r3, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800f63c:	f7f1 ff6e 	bl	800151c <Error_Handler>
  }

}
 800f640:	bf00      	nop
 800f642:	bd80      	pop	{r7, pc}
 800f644:	20009580 	.word	0x20009580
 800f648:	40005c00 	.word	0x40005c00
 800f64c:	00061a80 	.word	0x00061a80

0800f650 <MX_SDIO_SD_Init>:

/* SDIO init function */
void MX_SDIO_SD_Init(void)
{
 800f650:	b480      	push	{r7}
 800f652:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800f654:	4b0c      	ldr	r3, [pc, #48]	; (800f688 <MX_SDIO_SD_Init+0x38>)
 800f656:	4a0d      	ldr	r2, [pc, #52]	; (800f68c <MX_SDIO_SD_Init+0x3c>)
 800f658:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800f65a:	4b0b      	ldr	r3, [pc, #44]	; (800f688 <MX_SDIO_SD_Init+0x38>)
 800f65c:	2200      	movs	r2, #0
 800f65e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800f660:	4b09      	ldr	r3, [pc, #36]	; (800f688 <MX_SDIO_SD_Init+0x38>)
 800f662:	2200      	movs	r2, #0
 800f664:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800f666:	4b08      	ldr	r3, [pc, #32]	; (800f688 <MX_SDIO_SD_Init+0x38>)
 800f668:	2200      	movs	r2, #0
 800f66a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800f66c:	4b06      	ldr	r3, [pc, #24]	; (800f688 <MX_SDIO_SD_Init+0x38>)
 800f66e:	2200      	movs	r2, #0
 800f670:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800f672:	4b05      	ldr	r3, [pc, #20]	; (800f688 <MX_SDIO_SD_Init+0x38>)
 800f674:	2200      	movs	r2, #0
 800f676:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = SDIO_TRANSFER_CLK_DIV;
 800f678:	4b03      	ldr	r3, [pc, #12]	; (800f688 <MX_SDIO_SD_Init+0x38>)
 800f67a:	2203      	movs	r2, #3
 800f67c:	619a      	str	r2, [r3, #24]

}
 800f67e:	bf00      	nop
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr
 800f688:	20009944 	.word	0x20009944
 800f68c:	40012c00 	.word	0x40012c00

0800f690 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800f694:	4b17      	ldr	r3, [pc, #92]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f696:	4a18      	ldr	r2, [pc, #96]	; (800f6f8 <MX_SPI1_Init+0x68>)
 800f698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800f69a:	4b16      	ldr	r3, [pc, #88]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f69c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f6a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800f6a2:	4b14      	ldr	r3, [pc, #80]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800f6a8:	4b12      	ldr	r3, [pc, #72]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f6ae:	4b11      	ldr	r3, [pc, #68]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800f6b4:	4b0f      	ldr	r3, [pc, #60]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800f6ba:	4b0e      	ldr	r3, [pc, #56]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800f6c2:	4b0c      	ldr	r3, [pc, #48]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6c4:	2218      	movs	r2, #24
 800f6c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f6c8:	4b0a      	ldr	r3, [pc, #40]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800f6ce:	4b09      	ldr	r3, [pc, #36]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6d4:	4b07      	ldr	r3, [pc, #28]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800f6da:	4b06      	ldr	r3, [pc, #24]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6dc:	220a      	movs	r2, #10
 800f6de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800f6e0:	4804      	ldr	r0, [pc, #16]	; (800f6f4 <MX_SPI1_Init+0x64>)
 800f6e2:	f7f7 fe00 	bl	80072e6 <HAL_SPI_Init>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d001      	beq.n	800f6f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800f6ec:	f7f1 ff16 	bl	800151c <Error_Handler>
  }

}
 800f6f0:	bf00      	nop
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	20009a48 	.word	0x20009a48
 800f6f8:	40013000 	.word	0x40013000

0800f6fc <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800f700:	4b18      	ldr	r3, [pc, #96]	; (800f764 <MX_SPI2_Init+0x68>)
 800f702:	4a19      	ldr	r2, [pc, #100]	; (800f768 <MX_SPI2_Init+0x6c>)
 800f704:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800f706:	4b17      	ldr	r3, [pc, #92]	; (800f764 <MX_SPI2_Init+0x68>)
 800f708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f70c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800f70e:	4b15      	ldr	r3, [pc, #84]	; (800f764 <MX_SPI2_Init+0x68>)
 800f710:	2200      	movs	r2, #0
 800f712:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800f714:	4b13      	ldr	r3, [pc, #76]	; (800f764 <MX_SPI2_Init+0x68>)
 800f716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f71a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800f71c:	4b11      	ldr	r3, [pc, #68]	; (800f764 <MX_SPI2_Init+0x68>)
 800f71e:	2202      	movs	r2, #2
 800f720:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f722:	4b10      	ldr	r3, [pc, #64]	; (800f764 <MX_SPI2_Init+0x68>)
 800f724:	2201      	movs	r2, #1
 800f726:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800f728:	4b0e      	ldr	r3, [pc, #56]	; (800f764 <MX_SPI2_Init+0x68>)
 800f72a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f72e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800f730:	4b0c      	ldr	r3, [pc, #48]	; (800f764 <MX_SPI2_Init+0x68>)
 800f732:	2230      	movs	r2, #48	; 0x30
 800f734:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f736:	4b0b      	ldr	r3, [pc, #44]	; (800f764 <MX_SPI2_Init+0x68>)
 800f738:	2200      	movs	r2, #0
 800f73a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800f73c:	4b09      	ldr	r3, [pc, #36]	; (800f764 <MX_SPI2_Init+0x68>)
 800f73e:	2200      	movs	r2, #0
 800f740:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f742:	4b08      	ldr	r3, [pc, #32]	; (800f764 <MX_SPI2_Init+0x68>)
 800f744:	2200      	movs	r2, #0
 800f746:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800f748:	4b06      	ldr	r3, [pc, #24]	; (800f764 <MX_SPI2_Init+0x68>)
 800f74a:	2207      	movs	r2, #7
 800f74c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800f74e:	4805      	ldr	r0, [pc, #20]	; (800f764 <MX_SPI2_Init+0x68>)
 800f750:	f7f7 fdc9 	bl	80072e6 <HAL_SPI_Init>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d001      	beq.n	800f75e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800f75a:	f7f1 fedf 	bl	800151c <Error_Handler>
  }

}
 800f75e:	bf00      	nop
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	200095d4 	.word	0x200095d4
 800f768:	40003800 	.word	0x40003800

0800f76c <MX_SPI6_Init>:

}*/

/* SPI6 init function */
void MX_SPI6_Init(void)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 800f770:	4b17      	ldr	r3, [pc, #92]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f772:	4a18      	ldr	r2, [pc, #96]	; (800f7d4 <MX_SPI6_Init+0x68>)
 800f774:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800f776:	4b16      	ldr	r3, [pc, #88]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f77c:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800f77e:	4b14      	ldr	r3, [pc, #80]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f780:	2200      	movs	r2, #0
 800f782:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 800f784:	4b12      	ldr	r3, [pc, #72]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f786:	2200      	movs	r2, #0
 800f788:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f78a:	4b11      	ldr	r3, [pc, #68]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f78c:	2200      	movs	r2, #0
 800f78e:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800f790:	4b0f      	ldr	r3, [pc, #60]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f792:	2200      	movs	r2, #0
 800f794:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800f796:	4b0e      	ldr	r3, [pc, #56]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f79c:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f79e:	4b0c      	ldr	r3, [pc, #48]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f7a4:	4b0a      	ldr	r3, [pc, #40]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800f7aa:	4b09      	ldr	r3, [pc, #36]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f7b0:	4b07      	ldr	r3, [pc, #28]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 800f7b6:	4b06      	ldr	r3, [pc, #24]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f7b8:	220a      	movs	r2, #10
 800f7ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800f7bc:	4804      	ldr	r0, [pc, #16]	; (800f7d0 <MX_SPI6_Init+0x64>)
 800f7be:	f7f7 fd92 	bl	80072e6 <HAL_SPI_Init>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d001      	beq.n	800f7cc <MX_SPI6_Init+0x60>
  {
    Error_Handler();
 800f7c8:	f7f1 fea8 	bl	800151c <Error_Handler>
  }

}
 800f7cc:	bf00      	nop
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	20009740 	.word	0x20009740
 800f7d4:	40015400 	.word	0x40015400

0800f7d8 <MX_TIM5_Init>:

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b08e      	sub	sp, #56	; 0x38
 800f7dc:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 800f7de:	4b36      	ldr	r3, [pc, #216]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f7e0:	4a36      	ldr	r2, [pc, #216]	; (800f8bc <MX_TIM5_Init+0xe4>)
 800f7e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f7e4:	4b34      	ldr	r3, [pc, #208]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7ea:	4b33      	ldr	r3, [pc, #204]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800f7f0:	4b31      	ldr	r3, [pc, #196]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f7f6:	4b30      	ldr	r3, [pc, #192]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f7fc:	482e      	ldr	r0, [pc, #184]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f7fe:	f7f8 f986 	bl	8007b0e <HAL_TIM_Base_Init>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d001      	beq.n	800f80c <MX_TIM5_Init+0x34>
  {
    Error_Handler();
 800f808:	f7f1 fe88 	bl	800151c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f80c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f810:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f816:	4619      	mov	r1, r3
 800f818:	4827      	ldr	r0, [pc, #156]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f81a:	f7f8 fc4d 	bl	80080b8 <HAL_TIM_ConfigClockSource>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d001      	beq.n	800f828 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 800f824:	f7f1 fe7a 	bl	800151c <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f828:	4823      	ldr	r0, [pc, #140]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f82a:	f7f8 f9b6 	bl	8007b9a <HAL_TIM_PWM_Init>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d001      	beq.n	800f838 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 800f834:	f7f1 fe72 	bl	800151c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f838:	2300      	movs	r3, #0
 800f83a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f83c:	2300      	movs	r3, #0
 800f83e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f840:	f107 0320 	add.w	r3, r7, #32
 800f844:	4619      	mov	r1, r3
 800f846:	481c      	ldr	r0, [pc, #112]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f848:	f7f9 f885 	bl	8008956 <HAL_TIMEx_MasterConfigSynchronization>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d001      	beq.n	800f856 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800f852:	f7f1 fe63 	bl	800151c <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f856:	2360      	movs	r3, #96	; 0x60
 800f858:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f85a:	2300      	movs	r3, #0
 800f85c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f85e:	2300      	movs	r3, #0
 800f860:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f862:	2300      	movs	r3, #0
 800f864:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f866:	1d3b      	adds	r3, r7, #4
 800f868:	2200      	movs	r2, #0
 800f86a:	4619      	mov	r1, r3
 800f86c:	4812      	ldr	r0, [pc, #72]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f86e:	f7f8 fb5d 	bl	8007f2c <HAL_TIM_PWM_ConfigChannel>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <MX_TIM5_Init+0xa4>
  {
    Error_Handler();
 800f878:	f7f1 fe50 	bl	800151c <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f87c:	1d3b      	adds	r3, r7, #4
 800f87e:	2204      	movs	r2, #4
 800f880:	4619      	mov	r1, r3
 800f882:	480d      	ldr	r0, [pc, #52]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f884:	f7f8 fb52 	bl	8007f2c <HAL_TIM_PWM_ConfigChannel>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <MX_TIM5_Init+0xba>
  {
    Error_Handler();
 800f88e:	f7f1 fe45 	bl	800151c <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f892:	1d3b      	adds	r3, r7, #4
 800f894:	2208      	movs	r2, #8
 800f896:	4619      	mov	r1, r3
 800f898:	4807      	ldr	r0, [pc, #28]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f89a:	f7f8 fb47 	bl	8007f2c <HAL_TIM_PWM_ConfigChannel>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d001      	beq.n	800f8a8 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 800f8a4:	f7f1 fe3a 	bl	800151c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim5);
 800f8a8:	4803      	ldr	r0, [pc, #12]	; (800f8b8 <MX_TIM5_Init+0xe0>)
 800f8aa:	f000 fd71 	bl	8010390 <HAL_TIM_MspPostInit>

}
 800f8ae:	bf00      	nop
 800f8b0:	3738      	adds	r7, #56	; 0x38
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	20009798 	.word	0x20009798
 800f8bc:	40000c00 	.word	0x40000c00

0800f8c0 <MX_UART4_Init>:

/* UART4 init function */
void MX_UART4_Init(void)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800f8c4:	4b11      	ldr	r3, [pc, #68]	; (800f90c <MX_UART4_Init+0x4c>)
 800f8c6:	4a12      	ldr	r2, [pc, #72]	; (800f910 <MX_UART4_Init+0x50>)
 800f8c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800f8ca:	4b10      	ldr	r3, [pc, #64]	; (800f90c <MX_UART4_Init+0x4c>)
 800f8cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f8d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800f8d2:	4b0e      	ldr	r3, [pc, #56]	; (800f90c <MX_UART4_Init+0x4c>)
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800f8d8:	4b0c      	ldr	r3, [pc, #48]	; (800f90c <MX_UART4_Init+0x4c>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800f8de:	4b0b      	ldr	r3, [pc, #44]	; (800f90c <MX_UART4_Init+0x4c>)
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800f8e4:	4b09      	ldr	r3, [pc, #36]	; (800f90c <MX_UART4_Init+0x4c>)
 800f8e6:	220c      	movs	r2, #12
 800f8e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f8ea:	4b08      	ldr	r3, [pc, #32]	; (800f90c <MX_UART4_Init+0x4c>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800f8f0:	4b06      	ldr	r3, [pc, #24]	; (800f90c <MX_UART4_Init+0x4c>)
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800f8f6:	4805      	ldr	r0, [pc, #20]	; (800f90c <MX_UART4_Init+0x4c>)
 800f8f8:	f7f9 f886 	bl	8008a08 <HAL_UART_Init>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800f902:	f7f1 fe0b 	bl	800151c <Error_Handler>
  }

}
 800f906:	bf00      	nop
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	20009a08 	.word	0x20009a08
 800f910:	40004c00 	.word	0x40004c00

0800f914 <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800f918:	4b11      	ldr	r3, [pc, #68]	; (800f960 <MX_USART1_UART_Init+0x4c>)
 800f91a:	4a12      	ldr	r2, [pc, #72]	; (800f964 <MX_USART1_UART_Init+0x50>)
 800f91c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800f91e:	4b10      	ldr	r3, [pc, #64]	; (800f960 <MX_USART1_UART_Init+0x4c>)
 800f920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800f926:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <MX_USART1_UART_Init+0x4c>)
 800f928:	2200      	movs	r2, #0
 800f92a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800f92c:	4b0c      	ldr	r3, [pc, #48]	; (800f960 <MX_USART1_UART_Init+0x4c>)
 800f92e:	2200      	movs	r2, #0
 800f930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800f932:	4b0b      	ldr	r3, [pc, #44]	; (800f960 <MX_USART1_UART_Init+0x4c>)
 800f934:	2200      	movs	r2, #0
 800f936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800f938:	4b09      	ldr	r3, [pc, #36]	; (800f960 <MX_USART1_UART_Init+0x4c>)
 800f93a:	220c      	movs	r2, #12
 800f93c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f93e:	4b08      	ldr	r3, [pc, #32]	; (800f960 <MX_USART1_UART_Init+0x4c>)
 800f940:	2200      	movs	r2, #0
 800f942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800f944:	4b06      	ldr	r3, [pc, #24]	; (800f960 <MX_USART1_UART_Init+0x4c>)
 800f946:	2200      	movs	r2, #0
 800f948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800f94a:	4805      	ldr	r0, [pc, #20]	; (800f960 <MX_USART1_UART_Init+0x4c>)
 800f94c:	f7f9 f85c 	bl	8008a08 <HAL_UART_Init>
 800f950:	4603      	mov	r3, r0
 800f952:	2b00      	cmp	r3, #0
 800f954:	d001      	beq.n	800f95a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800f956:	f7f1 fde1 	bl	800151c <Error_Handler>
  }

}
 800f95a:	bf00      	nop
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	2000986c 	.word	0x2000986c
 800f964:	40011000 	.word	0x40011000

0800f968 <MX_USART6_UART_Init>:

/* USART6 init function */
void MX_USART6_UART_Init(void)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800f96c:	4b11      	ldr	r3, [pc, #68]	; (800f9b4 <MX_USART6_UART_Init+0x4c>)
 800f96e:	4a12      	ldr	r2, [pc, #72]	; (800f9b8 <MX_USART6_UART_Init+0x50>)
 800f970:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800f972:	4b10      	ldr	r3, [pc, #64]	; (800f9b4 <MX_USART6_UART_Init+0x4c>)
 800f974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f978:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800f97a:	4b0e      	ldr	r3, [pc, #56]	; (800f9b4 <MX_USART6_UART_Init+0x4c>)
 800f97c:	2200      	movs	r2, #0
 800f97e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800f980:	4b0c      	ldr	r3, [pc, #48]	; (800f9b4 <MX_USART6_UART_Init+0x4c>)
 800f982:	2200      	movs	r2, #0
 800f984:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800f986:	4b0b      	ldr	r3, [pc, #44]	; (800f9b4 <MX_USART6_UART_Init+0x4c>)
 800f988:	2200      	movs	r2, #0
 800f98a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800f98c:	4b09      	ldr	r3, [pc, #36]	; (800f9b4 <MX_USART6_UART_Init+0x4c>)
 800f98e:	220c      	movs	r2, #12
 800f990:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f992:	4b08      	ldr	r3, [pc, #32]	; (800f9b4 <MX_USART6_UART_Init+0x4c>)
 800f994:	2200      	movs	r2, #0
 800f996:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800f998:	4b06      	ldr	r3, [pc, #24]	; (800f9b4 <MX_USART6_UART_Init+0x4c>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800f99e:	4805      	ldr	r0, [pc, #20]	; (800f9b4 <MX_USART6_UART_Init+0x4c>)
 800f9a0:	f7f9 f832 	bl	8008a08 <HAL_UART_Init>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d001      	beq.n	800f9ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800f9aa:	f7f1 fdb7 	bl	800151c <Error_Handler>
  }

}
 800f9ae:	bf00      	nop
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	200099c8 	.word	0x200099c8
 800f9b8:	40011400 	.word	0x40011400

0800f9bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	607b      	str	r3, [r7, #4]
 800f9c6:	4b10      	ldr	r3, [pc, #64]	; (800fa08 <MX_DMA_Init+0x4c>)
 800f9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ca:	4a0f      	ldr	r2, [pc, #60]	; (800fa08 <MX_DMA_Init+0x4c>)
 800f9cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f9d0:	6313      	str	r3, [r2, #48]	; 0x30
 800f9d2:	4b0d      	ldr	r3, [pc, #52]	; (800fa08 <MX_DMA_Init+0x4c>)
 800f9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f9da:	607b      	str	r3, [r7, #4]
 800f9dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800f9de:	2200      	movs	r2, #0
 800f9e0:	2105      	movs	r1, #5
 800f9e2:	203b      	movs	r0, #59	; 0x3b
 800f9e4:	f7f2 fac9 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800f9e8:	203b      	movs	r0, #59	; 0x3b
 800f9ea:	f7f2 fae2 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	2105      	movs	r1, #5
 800f9f2:	2045      	movs	r0, #69	; 0x45
 800f9f4:	f7f2 fac1 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800f9f8:	2045      	movs	r0, #69	; 0x45
 800f9fa:	f7f2 fada 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

}
 800f9fe:	bf00      	nop
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	40023800 	.word	0x40023800

0800fa0c <MX_RTC_Init>:

/* RTC init function */
void MX_RTC_Init(void)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	af00      	add	r7, sp, #0

    /**Initialize RTC Only
    */
  hrtc.Instance = RTC;
 800fa10:	4b2e      	ldr	r3, [pc, #184]	; (800facc <MX_RTC_Init+0xc0>)
 800fa12:	4a2f      	ldr	r2, [pc, #188]	; (800fad0 <MX_RTC_Init+0xc4>)
 800fa14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800fa16:	4b2d      	ldr	r3, [pc, #180]	; (800facc <MX_RTC_Init+0xc0>)
 800fa18:	2200      	movs	r2, #0
 800fa1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800fa1c:	4b2b      	ldr	r3, [pc, #172]	; (800facc <MX_RTC_Init+0xc0>)
 800fa1e:	227f      	movs	r2, #127	; 0x7f
 800fa20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800fa22:	4b2a      	ldr	r3, [pc, #168]	; (800facc <MX_RTC_Init+0xc0>)
 800fa24:	22ff      	movs	r2, #255	; 0xff
 800fa26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800fa28:	4b28      	ldr	r3, [pc, #160]	; (800facc <MX_RTC_Init+0xc0>)
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800fa2e:	4b27      	ldr	r3, [pc, #156]	; (800facc <MX_RTC_Init+0xc0>)
 800fa30:	2200      	movs	r2, #0
 800fa32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800fa34:	4b25      	ldr	r3, [pc, #148]	; (800facc <MX_RTC_Init+0xc0>)
 800fa36:	2200      	movs	r2, #0
 800fa38:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800fa3a:	4824      	ldr	r0, [pc, #144]	; (800facc <MX_RTC_Init+0xc0>)
 800fa3c:	f7f5 fd04 	bl	8005448 <HAL_RTC_Init>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d001      	beq.n	800fa4a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800fa46:	f7f1 fd69 	bl	800151c <Error_Handler>
  }

    /**Initialize RTC and set the Time and Date
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	481f      	ldr	r0, [pc, #124]	; (800facc <MX_RTC_Init+0xc0>)
 800fa4e:	f7f6 f847 	bl	8005ae0 <HAL_RTCEx_BKUPRead>
 800fa52:	4603      	mov	r3, r0
 800fa54:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d034      	beq.n	800fac6 <MX_RTC_Init+0xba>
    sTime.Hours = 0x17;
 800fa5c:	4b1d      	ldr	r3, [pc, #116]	; (800fad4 <MX_RTC_Init+0xc8>)
 800fa5e:	2217      	movs	r2, #23
 800fa60:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0x0;
 800fa62:	4b1c      	ldr	r3, [pc, #112]	; (800fad4 <MX_RTC_Init+0xc8>)
 800fa64:	2200      	movs	r2, #0
 800fa66:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0x0;
 800fa68:	4b1a      	ldr	r3, [pc, #104]	; (800fad4 <MX_RTC_Init+0xc8>)
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800fa6e:	4b19      	ldr	r3, [pc, #100]	; (800fad4 <MX_RTC_Init+0xc8>)
 800fa70:	2200      	movs	r2, #0
 800fa72:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800fa74:	4b17      	ldr	r3, [pc, #92]	; (800fad4 <MX_RTC_Init+0xc8>)
 800fa76:	2200      	movs	r2, #0
 800fa78:	611a      	str	r2, [r3, #16]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	4915      	ldr	r1, [pc, #84]	; (800fad4 <MX_RTC_Init+0xc8>)
 800fa7e:	4813      	ldr	r0, [pc, #76]	; (800facc <MX_RTC_Init+0xc0>)
 800fa80:	f7f5 fd5d 	bl	800553e <HAL_RTC_SetTime>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d001      	beq.n	800fa8e <MX_RTC_Init+0x82>
    {
      Error_Handler();
 800fa8a:	f7f1 fd47 	bl	800151c <Error_Handler>
    }

    sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800fa8e:	4b12      	ldr	r3, [pc, #72]	; (800fad8 <MX_RTC_Init+0xcc>)
 800fa90:	2205      	movs	r2, #5
 800fa92:	701a      	strb	r2, [r3, #0]
    sDate.Month = RTC_MONTH_FEBRUARY;
 800fa94:	4b10      	ldr	r3, [pc, #64]	; (800fad8 <MX_RTC_Init+0xcc>)
 800fa96:	2202      	movs	r2, #2
 800fa98:	705a      	strb	r2, [r3, #1]
    sDate.Date = 0x9;
 800fa9a:	4b0f      	ldr	r3, [pc, #60]	; (800fad8 <MX_RTC_Init+0xcc>)
 800fa9c:	2209      	movs	r2, #9
 800fa9e:	709a      	strb	r2, [r3, #2]
    sDate.Year = 0x18;
 800faa0:	4b0d      	ldr	r3, [pc, #52]	; (800fad8 <MX_RTC_Init+0xcc>)
 800faa2:	2218      	movs	r2, #24
 800faa4:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800faa6:	2201      	movs	r2, #1
 800faa8:	490b      	ldr	r1, [pc, #44]	; (800fad8 <MX_RTC_Init+0xcc>)
 800faaa:	4808      	ldr	r0, [pc, #32]	; (800facc <MX_RTC_Init+0xc0>)
 800faac:	f7f5 fe6a 	bl	8005784 <HAL_RTC_SetDate>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d001      	beq.n	800faba <MX_RTC_Init+0xae>
    {
      Error_Handler();
 800fab6:	f7f1 fd31 	bl	800151c <Error_Handler>
    }

      HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 800faba:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800fabe:	2100      	movs	r1, #0
 800fac0:	4802      	ldr	r0, [pc, #8]	; (800facc <MX_RTC_Init+0xc0>)
 800fac2:	f7f5 fff3 	bl	8005aac <HAL_RTCEx_BKUPWrite>
  }

}
 800fac6:	bf00      	nop
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	200098b0 	.word	0x200098b0
 800fad0:	40002800 	.word	0x40002800
 800fad4:	200096d8 	.word	0x200096d8
 800fad8:	200098ac 	.word	0x200098ac

0800fadc <MX_WWDG_Init>:

/* WWDG init function */
void MX_WWDG_Init(void)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 800fae0:	4b0d      	ldr	r3, [pc, #52]	; (800fb18 <MX_WWDG_Init+0x3c>)
 800fae2:	4a0e      	ldr	r2, [pc, #56]	; (800fb1c <MX_WWDG_Init+0x40>)
 800fae4:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800fae6:	4b0c      	ldr	r3, [pc, #48]	; (800fb18 <MX_WWDG_Init+0x3c>)
 800fae8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800faec:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 800faee:	4b0a      	ldr	r3, [pc, #40]	; (800fb18 <MX_WWDG_Init+0x3c>)
 800faf0:	2240      	movs	r2, #64	; 0x40
 800faf2:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 800faf4:	4b08      	ldr	r3, [pc, #32]	; (800fb18 <MX_WWDG_Init+0x3c>)
 800faf6:	2240      	movs	r2, #64	; 0x40
 800faf8:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 800fafa:	4b07      	ldr	r3, [pc, #28]	; (800fb18 <MX_WWDG_Init+0x3c>)
 800fafc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb00:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800fb02:	4805      	ldr	r0, [pc, #20]	; (800fb18 <MX_WWDG_Init+0x3c>)
 800fb04:	f7f9 fd88 	bl	8009618 <HAL_WWDG_Init>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 800fb0e:	f7f1 fd05 	bl	800151c <Error_Handler>
  }

}
 800fb12:	bf00      	nop
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	20009930 	.word	0x20009930
 800fb1c:	40002c00 	.word	0x40002c00

0800fb20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fb26:	2300      	movs	r3, #0
 800fb28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fb2a:	f000 f89d 	bl	800fc68 <BSP_SD_IsDetected>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d001      	beq.n	800fb38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800fb34:	2301      	movs	r3, #1
 800fb36:	e012      	b.n	800fb5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800fb38:	480b      	ldr	r0, [pc, #44]	; (800fb68 <BSP_SD_Init+0x48>)
 800fb3a:	f7f5 ffe9 	bl	8005b10 <HAL_SD_Init>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 800fb42:	79fb      	ldrb	r3, [r7, #7]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d109      	bne.n	800fb5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800fb48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fb4c:	4806      	ldr	r0, [pc, #24]	; (800fb68 <BSP_SD_Init+0x48>)
 800fb4e:	f7f6 ff62 	bl	8006a16 <HAL_SD_ConfigWideBusOperation>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d001      	beq.n	800fb5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 800fb5c:	79fb      	ldrb	r3, [r7, #7]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	20009944 	.word	0x20009944

0800fb6c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b088      	sub	sp, #32
 800fb70:	af02      	add	r7, sp, #8
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]
 800fb78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state;

  __HAL_LOCK(&hsd);
 800fb7a:	4b0d      	ldr	r3, [pc, #52]	; (800fbb0 <BSP_SD_ReadBlocks+0x44>)
 800fb7c:	7f1b      	ldrb	r3, [r3, #28]
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d101      	bne.n	800fb86 <BSP_SD_ReadBlocks+0x1a>
 800fb82:	2302      	movs	r3, #2
 800fb84:	e010      	b.n	800fba8 <BSP_SD_ReadBlocks+0x3c>
 800fb86:	4b0a      	ldr	r3, [pc, #40]	; (800fbb0 <BSP_SD_ReadBlocks+0x44>)
 800fb88:	2201      	movs	r2, #1
 800fb8a:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	9300      	str	r3, [sp, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	68f9      	ldr	r1, [r7, #12]
 800fb96:	4806      	ldr	r0, [pc, #24]	; (800fbb0 <BSP_SD_ReadBlocks+0x44>)
 800fb98:	f7f6 f842 	bl	8005c20 <HAL_SD_ReadBlocks>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 800fba0:	4b03      	ldr	r3, [pc, #12]	; (800fbb0 <BSP_SD_ReadBlocks+0x44>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	771a      	strb	r2, [r3, #28]
  
  return sd_state;  
 800fba6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	20009944 	.word	0x20009944

0800fbb4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b088      	sub	sp, #32
 800fbb8:	af02      	add	r7, sp, #8
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]
 800fbc0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	75fb      	strb	r3, [r7, #23]

  __HAL_LOCK(&hsd);
 800fbc6:	4b0d      	ldr	r3, [pc, #52]	; (800fbfc <BSP_SD_WriteBlocks+0x48>)
 800fbc8:	7f1b      	ldrb	r3, [r3, #28]
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d101      	bne.n	800fbd2 <BSP_SD_WriteBlocks+0x1e>
 800fbce:	2302      	movs	r3, #2
 800fbd0:	e010      	b.n	800fbf4 <BSP_SD_WriteBlocks+0x40>
 800fbd2:	4b0a      	ldr	r3, [pc, #40]	; (800fbfc <BSP_SD_WriteBlocks+0x48>)
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	68f9      	ldr	r1, [r7, #12]
 800fbe2:	4806      	ldr	r0, [pc, #24]	; (800fbfc <BSP_SD_WriteBlocks+0x48>)
 800fbe4:	f7f6 f9b3 	bl	8005f4e <HAL_SD_WriteBlocks>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 800fbec:	4b03      	ldr	r3, [pc, #12]	; (800fbfc <BSP_SD_WriteBlocks+0x48>)
 800fbee:	2200      	movs	r2, #0
 800fbf0:	771a      	strb	r2, [r3, #28]

  return sd_state;  
 800fbf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3718      	adds	r7, #24
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	20009944 	.word	0x20009944

0800fc00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
  uint8_t sd_state;  

  __HAL_LOCK(&hsd);
 800fc06:	4b0e      	ldr	r3, [pc, #56]	; (800fc40 <BSP_SD_GetCardState+0x40>)
 800fc08:	7f1b      	ldrb	r3, [r3, #28]
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d101      	bne.n	800fc12 <BSP_SD_GetCardState+0x12>
 800fc0e:	2302      	movs	r3, #2
 800fc10:	e011      	b.n	800fc36 <BSP_SD_GetCardState+0x36>
 800fc12:	4b0b      	ldr	r3, [pc, #44]	; (800fc40 <BSP_SD_GetCardState+0x40>)
 800fc14:	2201      	movs	r2, #1
 800fc16:	771a      	strb	r2, [r3, #28]
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 800fc18:	4809      	ldr	r0, [pc, #36]	; (800fc40 <BSP_SD_GetCardState+0x40>)
 800fc1a:	f7f6 ff78 	bl	8006b0e <HAL_SD_GetCardState>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2b04      	cmp	r3, #4
 800fc22:	d102      	bne.n	800fc2a <BSP_SD_GetCardState+0x2a>
    sd_state = HAL_OK;
 800fc24:	2300      	movs	r3, #0
 800fc26:	71fb      	strb	r3, [r7, #7]
 800fc28:	e001      	b.n	800fc2e <BSP_SD_GetCardState+0x2e>
  else
    sd_state = HAL_ERROR;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	71fb      	strb	r3, [r7, #7]
  __HAL_UNLOCK(&hsd);
 800fc2e:	4b04      	ldr	r3, [pc, #16]	; (800fc40 <BSP_SD_GetCardState+0x40>)
 800fc30:	2200      	movs	r2, #0
 800fc32:	771a      	strb	r2, [r3, #28]
  
  return sd_state;
 800fc34:	79fb      	ldrb	r3, [r7, #7]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3708      	adds	r7, #8
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	20009944 	.word	0x20009944

0800fc44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc4c:	b672      	cpsid	i
}
 800fc4e:	bf00      	nop
  /* Get SD card Information */
    __disable_irq();
    HAL_SD_GetCardInfo(&hsd, CardInfo);
 800fc50:	6879      	ldr	r1, [r7, #4]
 800fc52:	4804      	ldr	r0, [pc, #16]	; (800fc64 <BSP_SD_GetCardInfo+0x20>)
 800fc54:	f7f6 feb3 	bl	80069be <HAL_SD_GetCardInfo>
  __ASM volatile ("cpsie i" : : : "memory");
 800fc58:	b662      	cpsie	i
}
 800fc5a:	bf00      	nop
    __enable_irq();
}
 800fc5c:	bf00      	nop
 800fc5e:	3708      	adds	r7, #8
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	20009944 	.word	0x20009944

0800fc68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fc6e:	2301      	movs	r3, #1
 800fc70:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800fc72:	79fb      	ldrb	r3, [r7, #7]
 800fc74:	b2db      	uxtb	r3, r3
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	370c      	adds	r7, #12
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr
	...

0800fc84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver((Diskio_drvTypeDef*)&SD_Driver, SD_Path);
 800fc88:	4904      	ldr	r1, [pc, #16]	; (800fc9c <MX_FATFS_Init+0x18>)
 800fc8a:	4805      	ldr	r0, [pc, #20]	; (800fca0 <MX_FATFS_Init+0x1c>)
 800fc8c:	f004 fc36 	bl	80144fc <FATFS_LinkDriver>
 800fc90:	4603      	mov	r3, r0
 800fc92:	461a      	mov	r2, r3
 800fc94:	4b03      	ldr	r3, [pc, #12]	; (800fca4 <MX_FATFS_Init+0x20>)
 800fc96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800fc98:	bf00      	nop
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	20009aa4 	.word	0x20009aa4
 800fca0:	0801ba38 	.word	0x0801ba38
 800fca4:	20009aa0 	.word	0x20009aa0

0800fca8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fcac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fcc2:	4b0b      	ldr	r3, [pc, #44]	; (800fcf0 <SD_initialize+0x38>)
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800fcc8:	f7ff ff2a 	bl	800fb20 <BSP_SD_Init>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d107      	bne.n	800fce2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fcd2:	4b07      	ldr	r3, [pc, #28]	; (800fcf0 <SD_initialize+0x38>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	f023 0301 	bic.w	r3, r3, #1
 800fcdc:	b2da      	uxtb	r2, r3
 800fcde:	4b04      	ldr	r3, [pc, #16]	; (800fcf0 <SD_initialize+0x38>)
 800fce0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fce2:	4b03      	ldr	r3, [pc, #12]	; (800fcf0 <SD_initialize+0x38>)
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	b2db      	uxtb	r3, r3
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	20000018 	.word	0x20000018

0800fcf4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	71fb      	strb	r3, [r7, #7]
  
  if(BSP_SD_GetCardState() != SD_TRANSFER_BUSY)
 800fcfe:	f7ff ff7f 	bl	800fc00 <BSP_SD_GetCardState>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d008      	beq.n	800fd1a <SD_status+0x26>
    Stat &= ~STA_BUSY;
 800fd08:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <SD_status+0x44>)
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	f023 0308 	bic.w	r3, r3, #8
 800fd12:	b2da      	uxtb	r2, r3
 800fd14:	4b08      	ldr	r3, [pc, #32]	; (800fd38 <SD_status+0x44>)
 800fd16:	701a      	strb	r2, [r3, #0]
 800fd18:	e007      	b.n	800fd2a <SD_status+0x36>
  else
    Stat |= STA_BUSY;
 800fd1a:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <SD_status+0x44>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	f043 0308 	orr.w	r3, r3, #8
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	4b04      	ldr	r3, [pc, #16]	; (800fd38 <SD_status+0x44>)
 800fd28:	701a      	strb	r2, [r3, #0]
  
  return Stat;
 800fd2a:	4b03      	ldr	r3, [pc, #12]	; (800fd38 <SD_status+0x44>)
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	b2db      	uxtb	r3, r3
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	20000018 	.word	0x20000018

0800fd3c <SD_read>:
  */
    
#define MMC_RDWR_TRIES       20
#define MMC_STATUS_TRIES     500
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b086      	sub	sp, #24
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60b9      	str	r1, [r7, #8]
 800fd44:	607a      	str	r2, [r7, #4]
 800fd46:	603b      	str	r3, [r7, #0]
 800fd48:	4603      	mov	r3, r0
 800fd4a:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 800fd4c:	2314      	movs	r3, #20
 800fd4e:	617b      	str	r3, [r7, #20]

  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 800fd50:	e009      	b.n	800fd66 <SD_read+0x2a>
  {
    if (timeout-- == 0)
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	1e5a      	subs	r2, r3, #1
 800fd56:	617a      	str	r2, [r7, #20]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d101      	bne.n	800fd60 <SD_read+0x24>
    {
      return RES_ERROR;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	e020      	b.n	800fda2 <SD_read+0x66>
    }
    osDelay(1);
 800fd60:	2001      	movs	r0, #1
 800fd62:	f004 fc7c 	bl	801465e <osDelay>
  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 800fd66:	f241 3388 	movw	r3, #5000	; 0x1388
 800fd6a:	683a      	ldr	r2, [r7, #0]
 800fd6c:	6879      	ldr	r1, [r7, #4]
 800fd6e:	68b8      	ldr	r0, [r7, #8]
 800fd70:	f7ff fefc 	bl	800fb6c <BSP_SD_ReadBlocks>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d1eb      	bne.n	800fd52 <SD_read+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 800fd7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fd7e:	617b      	str	r3, [r7, #20]
  while (BSP_SD_GetCardState() != HAL_OK)
 800fd80:	e009      	b.n	800fd96 <SD_read+0x5a>
  {
    if (timeout-- == 0)
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	1e5a      	subs	r2, r3, #1
 800fd86:	617a      	str	r2, [r7, #20]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d101      	bne.n	800fd90 <SD_read+0x54>
    {
      return RES_ERROR;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	e008      	b.n	800fda2 <SD_read+0x66>
    }
    osDelay(1);
 800fd90:	2001      	movs	r0, #1
 800fd92:	f004 fc64 	bl	801465e <osDelay>
  while (BSP_SD_GetCardState() != HAL_OK)
 800fd96:	f7ff ff33 	bl	800fc00 <BSP_SD_GetCardState>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d1f0      	bne.n	800fd82 <SD_read+0x46>
  }
  return RES_OK;
 800fda0:	2300      	movs	r3, #0
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3718      	adds	r7, #24
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}

0800fdaa <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fdaa:	b580      	push	{r7, lr}
 800fdac:	b086      	sub	sp, #24
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	60b9      	str	r1, [r7, #8]
 800fdb2:	607a      	str	r2, [r7, #4]
 800fdb4:	603b      	str	r3, [r7, #0]
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 800fdba:	2314      	movs	r3, #20
 800fdbc:	617b      	str	r3, [r7, #20]

  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 800fdbe:	e009      	b.n	800fdd4 <SD_write+0x2a>
  {
    if (timeout-- == 0)
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	1e5a      	subs	r2, r3, #1
 800fdc4:	617a      	str	r2, [r7, #20]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d101      	bne.n	800fdce <SD_write+0x24>
    {
      return RES_ERROR;
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e020      	b.n	800fe10 <SD_write+0x66>
    }
    osDelay(1);
 800fdce:	2001      	movs	r0, #1
 800fdd0:	f004 fc45 	bl	801465e <osDelay>
  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 800fdd4:	f241 3388 	movw	r3, #5000	; 0x1388
 800fdd8:	683a      	ldr	r2, [r7, #0]
 800fdda:	6879      	ldr	r1, [r7, #4]
 800fddc:	68b8      	ldr	r0, [r7, #8]
 800fdde:	f7ff fee9 	bl	800fbb4 <BSP_SD_WriteBlocks>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1eb      	bne.n	800fdc0 <SD_write+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 800fde8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fdec:	617b      	str	r3, [r7, #20]
  while(BSP_SD_GetCardState() != HAL_OK)
 800fdee:	e009      	b.n	800fe04 <SD_write+0x5a>
  {
    if (timeout-- == 0)
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	1e5a      	subs	r2, r3, #1
 800fdf4:	617a      	str	r2, [r7, #20]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d101      	bne.n	800fdfe <SD_write+0x54>
    {
      return RES_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	e008      	b.n	800fe10 <SD_write+0x66>
    }
    osDelay(1);
 800fdfe:	2001      	movs	r0, #1
 800fe00:	f004 fc2d 	bl	801465e <osDelay>
  while(BSP_SD_GetCardState() != HAL_OK)
 800fe04:	f7ff fefc 	bl	800fc00 <BSP_SD_GetCardState>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1f0      	bne.n	800fdf0 <SD_write+0x46>
  }    
  return RES_OK;
 800fe0e:	2300      	movs	r3, #0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3718      	adds	r7, #24
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b08c      	sub	sp, #48	; 0x30
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	4603      	mov	r3, r0
 800fe20:	603a      	str	r2, [r7, #0]
 800fe22:	71fb      	strb	r3, [r7, #7]
 800fe24:	460b      	mov	r3, r1
 800fe26:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) 
 800fe2e:	4b24      	ldr	r3, [pc, #144]	; (800fec0 <SD_ioctl+0xa8>)
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	f003 0301 	and.w	r3, r3, #1
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d001      	beq.n	800fe40 <SD_ioctl+0x28>
    return RES_NOTRDY;
 800fe3c:	2303      	movs	r3, #3
 800fe3e:	e03b      	b.n	800feb8 <SD_ioctl+0xa0>
  
  switch (cmd)
 800fe40:	79bb      	ldrb	r3, [r7, #6]
 800fe42:	2b03      	cmp	r3, #3
 800fe44:	d833      	bhi.n	800feae <SD_ioctl+0x96>
 800fe46:	a201      	add	r2, pc, #4	; (adr r2, 800fe4c <SD_ioctl+0x34>)
 800fe48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe4c:	0800fe5d 	.word	0x0800fe5d
 800fe50:	0800fe65 	.word	0x0800fe65
 800fe54:	0800fe7d 	.word	0x0800fe7d
 800fe58:	0800fe97 	.word	0x0800fe97
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe62:	e027      	b.n	800feb4 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe64:	f107 030c 	add.w	r3, r7, #12
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7ff feeb 	bl	800fc44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fe6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fe74:	2300      	movs	r3, #0
 800fe76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe7a:	e01b      	b.n	800feb4 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe7c:	f107 030c 	add.w	r3, r7, #12
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7ff fedf 	bl	800fc44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fe86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe94:	e00e      	b.n	800feb4 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe96:	f107 030c 	add.w	r3, r7, #12
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7ff fed2 	bl	800fc44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800fea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fea6:	2300      	movs	r3, #0
 800fea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800feac:	e002      	b.n	800feb4 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800feae:	2304      	movs	r3, #4
 800feb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800feb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3730      	adds	r7, #48	; 0x30
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20000018 	.word	0x20000018

0800fec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800fec8:	2003      	movs	r0, #3
 800feca:	f7f2 f84b 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800fece:	2200      	movs	r2, #0
 800fed0:	2100      	movs	r1, #0
 800fed2:	f06f 000b 	mvn.w	r0, #11
 800fed6:	f7f2 f850 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800feda:	2200      	movs	r2, #0
 800fedc:	2100      	movs	r1, #0
 800fede:	f06f 000a 	mvn.w	r0, #10
 800fee2:	f7f2 f84a 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800fee6:	2200      	movs	r2, #0
 800fee8:	2100      	movs	r1, #0
 800feea:	f06f 0009 	mvn.w	r0, #9
 800feee:	f7f2 f844 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800fef2:	2200      	movs	r2, #0
 800fef4:	2100      	movs	r1, #0
 800fef6:	f06f 0004 	mvn.w	r0, #4
 800fefa:	f7f2 f83e 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800fefe:	2200      	movs	r2, #0
 800ff00:	2100      	movs	r1, #0
 800ff02:	f06f 0003 	mvn.w	r0, #3
 800ff06:	f7f2 f838 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	210f      	movs	r1, #15
 800ff0e:	f06f 0001 	mvn.w	r0, #1
 800ff12:	f7f2 f832 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800ff16:	2200      	movs	r2, #0
 800ff18:	210f      	movs	r1, #15
 800ff1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff1e:	f7f2 f82c 	bl	8001f7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ff22:	bf00      	nop
 800ff24:	bd80      	pop	{r7, pc}
	...

0800ff28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b088      	sub	sp, #32
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4a16      	ldr	r2, [pc, #88]	; (800ff90 <HAL_ADC_MspInit+0x68>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d125      	bne.n	800ff86 <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	60bb      	str	r3, [r7, #8]
 800ff3e:	4b15      	ldr	r3, [pc, #84]	; (800ff94 <HAL_ADC_MspInit+0x6c>)
 800ff40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff42:	4a14      	ldr	r2, [pc, #80]	; (800ff94 <HAL_ADC_MspInit+0x6c>)
 800ff44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ff48:	6453      	str	r3, [r2, #68]	; 0x44
 800ff4a:	4b12      	ldr	r3, [pc, #72]	; (800ff94 <HAL_ADC_MspInit+0x6c>)
 800ff4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff52:	60bb      	str	r3, [r7, #8]
 800ff54:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12 - PAN3
    PC3     ------> ADC1_IN13 - PAN4
    PA2     ------> ADC1_IN2 - PAN5
    PA3     ------> ADC1_IN3 - PAN6
    */
    GPIO_InitStruct.Pin = PAN1_AN_Pin|PAN2_AN_Pin|PAN3_AN_Pin|PAN4_AN_Pin;
 800ff56:	230f      	movs	r3, #15
 800ff58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ff62:	f107 030c 	add.w	r3, r7, #12
 800ff66:	4619      	mov	r1, r3
 800ff68:	480b      	ldr	r0, [pc, #44]	; (800ff98 <HAL_ADC_MspInit+0x70>)
 800ff6a:	f7f2 fd01 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PAN5_AN_Pin|PAN6_AN_Pin;
 800ff6e:	230c      	movs	r3, #12
 800ff70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ff72:	2303      	movs	r3, #3
 800ff74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff76:	2300      	movs	r3, #0
 800ff78:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff7a:	f107 030c 	add.w	r3, r7, #12
 800ff7e:	4619      	mov	r1, r3
 800ff80:	4806      	ldr	r0, [pc, #24]	; (800ff9c <HAL_ADC_MspInit+0x74>)
 800ff82:	f7f2 fcf5 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800ff86:	bf00      	nop
 800ff88:	3720      	adds	r7, #32
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	40012000 	.word	0x40012000
 800ff94:	40023800 	.word	0x40023800
 800ff98:	40020800 	.word	0x40020800
 800ff9c:	40020000 	.word	0x40020000

0800ffa0 <HAL_I2C_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b08a      	sub	sp, #40	; 0x28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a37      	ldr	r2, [pc, #220]	; (801008c <HAL_I2C_MspInit+0xec>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d11f      	bne.n	800fff2 <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 800ffb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ffb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ffb8:	2312      	movs	r3, #18
 800ffba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ffc0:	2303      	movs	r3, #3
 800ffc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ffc4:	2304      	movs	r3, #4
 800ffc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ffc8:	f107 0314 	add.w	r3, r7, #20
 800ffcc:	4619      	mov	r1, r3
 800ffce:	4830      	ldr	r0, [pc, #192]	; (8010090 <HAL_I2C_MspInit+0xf0>)
 800ffd0:	f7f2 fcce 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	613b      	str	r3, [r7, #16]
 800ffd8:	4b2e      	ldr	r3, [pc, #184]	; (8010094 <HAL_I2C_MspInit+0xf4>)
 800ffda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffdc:	4a2d      	ldr	r2, [pc, #180]	; (8010094 <HAL_I2C_MspInit+0xf4>)
 800ffde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ffe2:	6413      	str	r3, [r2, #64]	; 0x40
 800ffe4:	4b2b      	ldr	r3, [pc, #172]	; (8010094 <HAL_I2C_MspInit+0xf4>)
 800ffe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ffec:	613b      	str	r3, [r7, #16]
 800ffee:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800fff0:	e048      	b.n	8010084 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C2)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4a28      	ldr	r2, [pc, #160]	; (8010098 <HAL_I2C_MspInit+0xf8>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d11f      	bne.n	801003c <HAL_I2C_MspInit+0x9c>
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 800fffc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010002:	2312      	movs	r3, #18
 8010004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010006:	2301      	movs	r3, #1
 8010008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801000a:	2303      	movs	r3, #3
 801000c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801000e:	2304      	movs	r3, #4
 8010010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010012:	f107 0314 	add.w	r3, r7, #20
 8010016:	4619      	mov	r1, r3
 8010018:	481d      	ldr	r0, [pc, #116]	; (8010090 <HAL_I2C_MspInit+0xf0>)
 801001a:	f7f2 fca9 	bl	8002970 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801001e:	2300      	movs	r3, #0
 8010020:	60fb      	str	r3, [r7, #12]
 8010022:	4b1c      	ldr	r3, [pc, #112]	; (8010094 <HAL_I2C_MspInit+0xf4>)
 8010024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010026:	4a1b      	ldr	r2, [pc, #108]	; (8010094 <HAL_I2C_MspInit+0xf4>)
 8010028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801002c:	6413      	str	r3, [r2, #64]	; 0x40
 801002e:	4b19      	ldr	r3, [pc, #100]	; (8010094 <HAL_I2C_MspInit+0xf4>)
 8010030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010036:	60fb      	str	r3, [r7, #12]
 8010038:	68fb      	ldr	r3, [r7, #12]
}
 801003a:	e023      	b.n	8010084 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C3)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4a16      	ldr	r2, [pc, #88]	; (801009c <HAL_I2C_MspInit+0xfc>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d11e      	bne.n	8010084 <HAL_I2C_MspInit+0xe4>
    GPIO_InitStruct.Pin = PAY_SCL_Pin|PAY_SDA_Pin;
 8010046:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801004a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801004c:	2312      	movs	r3, #18
 801004e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010050:	2301      	movs	r3, #1
 8010052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010054:	2303      	movs	r3, #3
 8010056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8010058:	2304      	movs	r3, #4
 801005a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801005c:	f107 0314 	add.w	r3, r7, #20
 8010060:	4619      	mov	r1, r3
 8010062:	480f      	ldr	r0, [pc, #60]	; (80100a0 <HAL_I2C_MspInit+0x100>)
 8010064:	f7f2 fc84 	bl	8002970 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8010068:	2300      	movs	r3, #0
 801006a:	60bb      	str	r3, [r7, #8]
 801006c:	4b09      	ldr	r3, [pc, #36]	; (8010094 <HAL_I2C_MspInit+0xf4>)
 801006e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010070:	4a08      	ldr	r2, [pc, #32]	; (8010094 <HAL_I2C_MspInit+0xf4>)
 8010072:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010076:	6413      	str	r3, [r2, #64]	; 0x40
 8010078:	4b06      	ldr	r3, [pc, #24]	; (8010094 <HAL_I2C_MspInit+0xf4>)
 801007a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801007c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010080:	60bb      	str	r3, [r7, #8]
 8010082:	68bb      	ldr	r3, [r7, #8]
}
 8010084:	bf00      	nop
 8010086:	3728      	adds	r7, #40	; 0x28
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	40005400 	.word	0x40005400
 8010090:	40020400 	.word	0x40020400
 8010094:	40023800 	.word	0x40023800
 8010098:	40005800 	.word	0x40005800
 801009c:	40005c00 	.word	0x40005c00
 80100a0:	40021c00 	.word	0x40021c00

080100a4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C1)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a19      	ldr	r2, [pc, #100]	; (8010118 <HAL_I2C_MspDeInit+0x74>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d10b      	bne.n	80100ce <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80100b6:	4b19      	ldr	r3, [pc, #100]	; (801011c <HAL_I2C_MspDeInit+0x78>)
 80100b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ba:	4a18      	ldr	r2, [pc, #96]	; (801011c <HAL_I2C_MspDeInit+0x78>)
 80100bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80100c0:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, SYS_SCL_Pin|SYS_SDA_Pin);
 80100c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80100c6:	4816      	ldr	r0, [pc, #88]	; (8010120 <HAL_I2C_MspDeInit+0x7c>)
 80100c8:	f7f2 fdfe 	bl	8002cc8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80100cc:	e020      	b.n	8010110 <HAL_I2C_MspDeInit+0x6c>
  else if(hi2c->Instance==I2C2)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4a14      	ldr	r2, [pc, #80]	; (8010124 <HAL_I2C_MspDeInit+0x80>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d10b      	bne.n	80100f0 <HAL_I2C_MspDeInit+0x4c>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80100d8:	4b10      	ldr	r3, [pc, #64]	; (801011c <HAL_I2C_MspDeInit+0x78>)
 80100da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100dc:	4a0f      	ldr	r2, [pc, #60]	; (801011c <HAL_I2C_MspDeInit+0x78>)
 80100de:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80100e2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, SEN_SCL_Pin|SEN_SDA_Pin);
 80100e4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80100e8:	480d      	ldr	r0, [pc, #52]	; (8010120 <HAL_I2C_MspDeInit+0x7c>)
 80100ea:	f7f2 fded 	bl	8002cc8 <HAL_GPIO_DeInit>
}
 80100ee:	e00f      	b.n	8010110 <HAL_I2C_MspDeInit+0x6c>
  else if(hi2c->Instance==I2C3)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a0c      	ldr	r2, [pc, #48]	; (8010128 <HAL_I2C_MspDeInit+0x84>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d10a      	bne.n	8010110 <HAL_I2C_MspDeInit+0x6c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80100fa:	4b08      	ldr	r3, [pc, #32]	; (801011c <HAL_I2C_MspDeInit+0x78>)
 80100fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100fe:	4a07      	ldr	r2, [pc, #28]	; (801011c <HAL_I2C_MspDeInit+0x78>)
 8010100:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010104:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, PAY_SCL_Pin|PAY_SDA_Pin);
 8010106:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801010a:	4808      	ldr	r0, [pc, #32]	; (801012c <HAL_I2C_MspDeInit+0x88>)
 801010c:	f7f2 fddc 	bl	8002cc8 <HAL_GPIO_DeInit>
}
 8010110:	bf00      	nop
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	40005400 	.word	0x40005400
 801011c:	40023800 	.word	0x40023800
 8010120:	40020400 	.word	0x40020400
 8010124:	40005800 	.word	0x40005800
 8010128:	40005c00 	.word	0x40005c00
 801012c:	40021c00 	.word	0x40021c00

08010130 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a05      	ldr	r2, [pc, #20]	; (8010154 <HAL_RTC_MspInit+0x24>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d102      	bne.n	8010148 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8010142:	4b05      	ldr	r3, [pc, #20]	; (8010158 <HAL_RTC_MspInit+0x28>)
 8010144:	2201      	movs	r2, #1
 8010146:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8010148:	bf00      	nop
 801014a:	370c      	adds	r7, #12
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr
 8010154:	40002800 	.word	0x40002800
 8010158:	42470e3c 	.word	0x42470e3c

0801015c <HAL_SD_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b088      	sub	sp, #32
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4a1e      	ldr	r2, [pc, #120]	; (80101e4 <HAL_SD_MspInit+0x88>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d136      	bne.n	80101dc <HAL_SD_MspInit+0x80>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 801016e:	2300      	movs	r3, #0
 8010170:	60bb      	str	r3, [r7, #8]
 8010172:	4b1d      	ldr	r3, [pc, #116]	; (80101e8 <HAL_SD_MspInit+0x8c>)
 8010174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010176:	4a1c      	ldr	r2, [pc, #112]	; (80101e8 <HAL_SD_MspInit+0x8c>)
 8010178:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801017c:	6453      	str	r3, [r2, #68]	; 0x44
 801017e:	4b1a      	ldr	r3, [pc, #104]	; (80101e8 <HAL_SD_MspInit+0x8c>)
 8010180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010186:	60bb      	str	r3, [r7, #8]
 8010188:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801018a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 801018e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010190:	2302      	movs	r3, #2
 8010192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010194:	2300      	movs	r3, #0
 8010196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010198:	2303      	movs	r3, #3
 801019a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 801019c:	230c      	movs	r3, #12
 801019e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80101a0:	f107 030c 	add.w	r3, r7, #12
 80101a4:	4619      	mov	r1, r3
 80101a6:	4811      	ldr	r0, [pc, #68]	; (80101ec <HAL_SD_MspInit+0x90>)
 80101a8:	f7f2 fbe2 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80101ac:	2304      	movs	r3, #4
 80101ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101b0:	2302      	movs	r3, #2
 80101b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b4:	2300      	movs	r3, #0
 80101b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101b8:	2303      	movs	r3, #3
 80101ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80101bc:	230c      	movs	r3, #12
 80101be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80101c0:	f107 030c 	add.w	r3, r7, #12
 80101c4:	4619      	mov	r1, r3
 80101c6:	480a      	ldr	r0, [pc, #40]	; (80101f0 <HAL_SD_MspInit+0x94>)
 80101c8:	f7f2 fbd2 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, USER_INT_PRIORITY, 0);
 80101cc:	2200      	movs	r2, #0
 80101ce:	2106      	movs	r1, #6
 80101d0:	2031      	movs	r0, #49	; 0x31
 80101d2:	f7f1 fed2 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80101d6:	2031      	movs	r0, #49	; 0x31
 80101d8:	f7f1 feeb 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80101dc:	bf00      	nop
 80101de:	3720      	adds	r7, #32
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	40012c00 	.word	0x40012c00
 80101e8:	40023800 	.word	0x40023800
 80101ec:	40020800 	.word	0x40020800
 80101f0:	40020c00 	.word	0x40020c00

080101f4 <HAL_SPI_MspInit>:
  /* USER CODE END SDIO_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b08c      	sub	sp, #48	; 0x30
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4a49      	ldr	r2, [pc, #292]	; (8010328 <HAL_SPI_MspInit+0x134>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d11e      	bne.n	8010244 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8010206:	2300      	movs	r3, #0
 8010208:	61bb      	str	r3, [r7, #24]
 801020a:	4b48      	ldr	r3, [pc, #288]	; (801032c <HAL_SPI_MspInit+0x138>)
 801020c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801020e:	4a47      	ldr	r2, [pc, #284]	; (801032c <HAL_SPI_MspInit+0x138>)
 8010210:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010214:	6453      	str	r3, [r2, #68]	; 0x44
 8010216:	4b45      	ldr	r3, [pc, #276]	; (801032c <HAL_SPI_MspInit+0x138>)
 8010218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801021a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801021e:	61bb      	str	r3, [r7, #24]
 8010220:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8010222:	23e0      	movs	r3, #224	; 0xe0
 8010224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010226:	2302      	movs	r3, #2
 8010228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801022a:	2300      	movs	r3, #0
 801022c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801022e:	2303      	movs	r3, #3
 8010230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010232:	2305      	movs	r3, #5
 8010234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010236:	f107 031c 	add.w	r3, r7, #28
 801023a:	4619      	mov	r1, r3
 801023c:	483c      	ldr	r0, [pc, #240]	; (8010330 <HAL_SPI_MspInit+0x13c>)
 801023e:	f7f2 fb97 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8010242:	e06d      	b.n	8010320 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a3a      	ldr	r2, [pc, #232]	; (8010334 <HAL_SPI_MspInit+0x140>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d11f      	bne.n	801028e <HAL_SPI_MspInit+0x9a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 801024e:	2300      	movs	r3, #0
 8010250:	617b      	str	r3, [r7, #20]
 8010252:	4b36      	ldr	r3, [pc, #216]	; (801032c <HAL_SPI_MspInit+0x138>)
 8010254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010256:	4a35      	ldr	r2, [pc, #212]	; (801032c <HAL_SPI_MspInit+0x138>)
 8010258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801025c:	6413      	str	r3, [r2, #64]	; 0x40
 801025e:	4b33      	ldr	r3, [pc, #204]	; (801032c <HAL_SPI_MspInit+0x138>)
 8010260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010266:	617b      	str	r3, [r7, #20]
 8010268:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PAN_SCK_Pin|PAN_MISO_Pin|PAN_MOSI_Pin;
 801026a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 801026e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010270:	2302      	movs	r3, #2
 8010272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010274:	2300      	movs	r3, #0
 8010276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010278:	2303      	movs	r3, #3
 801027a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801027c:	2305      	movs	r3, #5
 801027e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010280:	f107 031c 	add.w	r3, r7, #28
 8010284:	4619      	mov	r1, r3
 8010286:	482c      	ldr	r0, [pc, #176]	; (8010338 <HAL_SPI_MspInit+0x144>)
 8010288:	f7f2 fb72 	bl	8002970 <HAL_GPIO_Init>
}
 801028c:	e048      	b.n	8010320 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI5)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	4a2a      	ldr	r2, [pc, #168]	; (801033c <HAL_SPI_MspInit+0x148>)
 8010294:	4293      	cmp	r3, r2
 8010296:	d11f      	bne.n	80102d8 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8010298:	2300      	movs	r3, #0
 801029a:	613b      	str	r3, [r7, #16]
 801029c:	4b23      	ldr	r3, [pc, #140]	; (801032c <HAL_SPI_MspInit+0x138>)
 801029e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102a0:	4a22      	ldr	r2, [pc, #136]	; (801032c <HAL_SPI_MspInit+0x138>)
 80102a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102a6:	6453      	str	r3, [r2, #68]	; 0x44
 80102a8:	4b20      	ldr	r3, [pc, #128]	; (801032c <HAL_SPI_MspInit+0x138>)
 80102aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80102b0:	613b      	str	r3, [r7, #16]
 80102b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SBAND_SCK_Pin|SBAND_MISO_Pin|SBAND_MOSI_Pin;
 80102b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80102b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102ba:	2302      	movs	r3, #2
 80102bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102be:	2300      	movs	r3, #0
 80102c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80102c2:	2303      	movs	r3, #3
 80102c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80102c6:	2305      	movs	r3, #5
 80102c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80102ca:	f107 031c 	add.w	r3, r7, #28
 80102ce:	4619      	mov	r1, r3
 80102d0:	481b      	ldr	r0, [pc, #108]	; (8010340 <HAL_SPI_MspInit+0x14c>)
 80102d2:	f7f2 fb4d 	bl	8002970 <HAL_GPIO_Init>
}
 80102d6:	e023      	b.n	8010320 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI6)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a19      	ldr	r2, [pc, #100]	; (8010344 <HAL_SPI_MspInit+0x150>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d11e      	bne.n	8010320 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80102e2:	2300      	movs	r3, #0
 80102e4:	60fb      	str	r3, [r7, #12]
 80102e6:	4b11      	ldr	r3, [pc, #68]	; (801032c <HAL_SPI_MspInit+0x138>)
 80102e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102ea:	4a10      	ldr	r2, [pc, #64]	; (801032c <HAL_SPI_MspInit+0x138>)
 80102ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80102f0:	6453      	str	r3, [r2, #68]	; 0x44
 80102f2:	4b0e      	ldr	r3, [pc, #56]	; (801032c <HAL_SPI_MspInit+0x138>)
 80102f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80102fa:	60fb      	str	r3, [r7, #12]
 80102fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FLASH_MISO_Pin|FLASH_SCK_Pin|FLASH_MOSI_Pin;
 80102fe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8010302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010304:	2302      	movs	r3, #2
 8010306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010308:	2300      	movs	r3, #0
 801030a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801030c:	2303      	movs	r3, #3
 801030e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8010310:	2305      	movs	r3, #5
 8010312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010314:	f107 031c 	add.w	r3, r7, #28
 8010318:	4619      	mov	r1, r3
 801031a:	480b      	ldr	r0, [pc, #44]	; (8010348 <HAL_SPI_MspInit+0x154>)
 801031c:	f7f2 fb28 	bl	8002970 <HAL_GPIO_Init>
}
 8010320:	bf00      	nop
 8010322:	3730      	adds	r7, #48	; 0x30
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	40013000 	.word	0x40013000
 801032c:	40023800 	.word	0x40023800
 8010330:	40020000 	.word	0x40020000
 8010334:	40003800 	.word	0x40003800
 8010338:	40020400 	.word	0x40020400
 801033c:	40015000 	.word	0x40015000
 8010340:	40021400 	.word	0x40021400
 8010344:	40015400 	.word	0x40015400
 8010348:	40021800 	.word	0x40021800

0801034c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801034c:	b480      	push	{r7}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM5)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a0b      	ldr	r2, [pc, #44]	; (8010388 <HAL_TIM_Base_MspInit+0x3c>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d10d      	bne.n	801037a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 801035e:	2300      	movs	r3, #0
 8010360:	60fb      	str	r3, [r7, #12]
 8010362:	4b0a      	ldr	r3, [pc, #40]	; (801038c <HAL_TIM_Base_MspInit+0x40>)
 8010364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010366:	4a09      	ldr	r2, [pc, #36]	; (801038c <HAL_TIM_Base_MspInit+0x40>)
 8010368:	f043 0308 	orr.w	r3, r3, #8
 801036c:	6413      	str	r3, [r2, #64]	; 0x40
 801036e:	4b07      	ldr	r3, [pc, #28]	; (801038c <HAL_TIM_Base_MspInit+0x40>)
 8010370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010372:	f003 0308 	and.w	r3, r3, #8
 8010376:	60fb      	str	r3, [r7, #12]
 8010378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 801037a:	bf00      	nop
 801037c:	3714      	adds	r7, #20
 801037e:	46bd      	mov	sp, r7
 8010380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010384:	4770      	bx	lr
 8010386:	bf00      	nop
 8010388:	40000c00 	.word	0x40000c00
 801038c:	40023800 	.word	0x40023800

08010390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b088      	sub	sp, #32
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4a0b      	ldr	r2, [pc, #44]	; (80103cc <HAL_TIM_MspPostInit+0x3c>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	d110      	bne.n	80103c4 <HAL_TIM_MspPostInit+0x34>
    /**TIM5 GPIO Configuration    
    PH10     ------> TIM5_CH1
    PH11     ------> TIM5_CH2
    PH12     ------> TIM5_CH3 
    */
    GPIO_InitStruct.Pin = PAN4_PWM_Pin|PAN5_PWM_Pin|PAN6_PWM_Pin;
 80103a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80103a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103a8:	2302      	movs	r3, #2
 80103aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103ac:	2300      	movs	r3, #0
 80103ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103b0:	2300      	movs	r3, #0
 80103b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80103b4:	2302      	movs	r3, #2
 80103b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80103b8:	f107 030c 	add.w	r3, r7, #12
 80103bc:	4619      	mov	r1, r3
 80103be:	4804      	ldr	r0, [pc, #16]	; (80103d0 <HAL_TIM_MspPostInit+0x40>)
 80103c0:	f7f2 fad6 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80103c4:	bf00      	nop
 80103c6:	3720      	adds	r7, #32
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	40000c00 	.word	0x40000c00
 80103d0:	40021c00 	.word	0x40021c00

080103d4 <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b08a      	sub	sp, #40	; 0x28
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a42      	ldr	r2, [pc, #264]	; (80104ec <HAL_UART_MspInit+0x118>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d126      	bne.n	8010434 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80103e6:	2300      	movs	r3, #0
 80103e8:	613b      	str	r3, [r7, #16]
 80103ea:	4b41      	ldr	r3, [pc, #260]	; (80104f0 <HAL_UART_MspInit+0x11c>)
 80103ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ee:	4a40      	ldr	r2, [pc, #256]	; (80104f0 <HAL_UART_MspInit+0x11c>)
 80103f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103f4:	6413      	str	r3, [r2, #64]	; 0x40
 80103f6:	4b3e      	ldr	r3, [pc, #248]	; (80104f0 <HAL_UART_MspInit+0x11c>)
 80103f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80103fe:	613b      	str	r3, [r7, #16]
 8010400:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010402:	2303      	movs	r3, #3
 8010404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010406:	2302      	movs	r3, #2
 8010408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801040a:	2301      	movs	r3, #1
 801040c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801040e:	2303      	movs	r3, #3
 8010410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8010412:	2308      	movs	r3, #8
 8010414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010416:	f107 0314 	add.w	r3, r7, #20
 801041a:	4619      	mov	r1, r3
 801041c:	4835      	ldr	r0, [pc, #212]	; (80104f4 <HAL_UART_MspInit+0x120>)
 801041e:	f7f2 faa7 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, USER_INT_PRIORITY, 0);
 8010422:	2200      	movs	r2, #0
 8010424:	2106      	movs	r1, #6
 8010426:	2034      	movs	r0, #52	; 0x34
 8010428:	f7f1 fda7 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 801042c:	2034      	movs	r0, #52	; 0x34
 801042e:	f7f1 fdc0 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8010432:	e057      	b.n	80104e4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART1)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	4a2f      	ldr	r2, [pc, #188]	; (80104f8 <HAL_UART_MspInit+0x124>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d127      	bne.n	801048e <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 801043e:	2300      	movs	r3, #0
 8010440:	60fb      	str	r3, [r7, #12]
 8010442:	4b2b      	ldr	r3, [pc, #172]	; (80104f0 <HAL_UART_MspInit+0x11c>)
 8010444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010446:	4a2a      	ldr	r2, [pc, #168]	; (80104f0 <HAL_UART_MspInit+0x11c>)
 8010448:	f043 0310 	orr.w	r3, r3, #16
 801044c:	6453      	str	r3, [r2, #68]	; 0x44
 801044e:	4b28      	ldr	r3, [pc, #160]	; (80104f0 <HAL_UART_MspInit+0x11c>)
 8010450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010452:	f003 0310 	and.w	r3, r3, #16
 8010456:	60fb      	str	r3, [r7, #12]
 8010458:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801045a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801045e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010460:	2302      	movs	r3, #2
 8010462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010464:	2301      	movs	r3, #1
 8010466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010468:	2303      	movs	r3, #3
 801046a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801046c:	2307      	movs	r3, #7
 801046e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010470:	f107 0314 	add.w	r3, r7, #20
 8010474:	4619      	mov	r1, r3
 8010476:	481f      	ldr	r0, [pc, #124]	; (80104f4 <HAL_UART_MspInit+0x120>)
 8010478:	f7f2 fa7a 	bl	8002970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, USER_INT_PRIORITY, 0);
 801047c:	2200      	movs	r2, #0
 801047e:	2106      	movs	r1, #6
 8010480:	2025      	movs	r0, #37	; 0x25
 8010482:	f7f1 fd7a 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);    
 8010486:	2025      	movs	r0, #37	; 0x25
 8010488:	f7f1 fd93 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
}
 801048c:	e02a      	b.n	80104e4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART6)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4a1a      	ldr	r2, [pc, #104]	; (80104fc <HAL_UART_MspInit+0x128>)
 8010494:	4293      	cmp	r3, r2
 8010496:	d125      	bne.n	80104e4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART6_CLK_ENABLE();
 8010498:	2300      	movs	r3, #0
 801049a:	60bb      	str	r3, [r7, #8]
 801049c:	4b14      	ldr	r3, [pc, #80]	; (80104f0 <HAL_UART_MspInit+0x11c>)
 801049e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104a0:	4a13      	ldr	r2, [pc, #76]	; (80104f0 <HAL_UART_MspInit+0x11c>)
 80104a2:	f043 0320 	orr.w	r3, r3, #32
 80104a6:	6453      	str	r3, [r2, #68]	; 0x44
 80104a8:	4b11      	ldr	r3, [pc, #68]	; (80104f0 <HAL_UART_MspInit+0x11c>)
 80104aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104ac:	f003 0320 	and.w	r3, r3, #32
 80104b0:	60bb      	str	r3, [r7, #8]
 80104b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PAY_TX_Pin|PAY_RX_Pin;
 80104b4:	23c0      	movs	r3, #192	; 0xc0
 80104b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104b8:	2302      	movs	r3, #2
 80104ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80104bc:	2301      	movs	r3, #1
 80104be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104c0:	2303      	movs	r3, #3
 80104c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80104c4:	2308      	movs	r3, #8
 80104c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80104c8:	f107 0314 	add.w	r3, r7, #20
 80104cc:	4619      	mov	r1, r3
 80104ce:	480c      	ldr	r0, [pc, #48]	; (8010500 <HAL_UART_MspInit+0x12c>)
 80104d0:	f7f2 fa4e 	bl	8002970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, USER_INT_PRIORITY, 0);
 80104d4:	2200      	movs	r2, #0
 80104d6:	2106      	movs	r1, #6
 80104d8:	2047      	movs	r0, #71	; 0x47
 80104da:	f7f1 fd4e 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80104de:	2047      	movs	r0, #71	; 0x47
 80104e0:	f7f1 fd67 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
}
 80104e4:	bf00      	nop
 80104e6:	3728      	adds	r7, #40	; 0x28
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	40004c00 	.word	0x40004c00
 80104f0:	40023800 	.word	0x40023800
 80104f4:	40020000 	.word	0x40020000
 80104f8:	40011000 	.word	0x40011000
 80104fc:	40011400 	.word	0x40011400
 8010500:	40020800 	.word	0x40020800

08010504 <HAL_WWDG_MspInit>:
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]

  if(hwwdg->Instance==WWDG)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4a0b      	ldr	r2, [pc, #44]	; (8010540 <HAL_WWDG_MspInit+0x3c>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d10d      	bne.n	8010532 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8010516:	2300      	movs	r3, #0
 8010518:	60fb      	str	r3, [r7, #12]
 801051a:	4b0a      	ldr	r3, [pc, #40]	; (8010544 <HAL_WWDG_MspInit+0x40>)
 801051c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801051e:	4a09      	ldr	r2, [pc, #36]	; (8010544 <HAL_WWDG_MspInit+0x40>)
 8010520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010524:	6413      	str	r3, [r2, #64]	; 0x40
 8010526:	4b07      	ldr	r3, [pc, #28]	; (8010544 <HAL_WWDG_MspInit+0x40>)
 8010528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801052a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801052e:	60fb      	str	r3, [r7, #12]
 8010530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8010532:	bf00      	nop
 8010534:	3714      	adds	r7, #20
 8010536:	46bd      	mov	sp, r7
 8010538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053c:	4770      	bx	lr
 801053e:	bf00      	nop
 8010540:	40002c00 	.word	0x40002c00
 8010544:	40023800 	.word	0x40023800

08010548 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8010548:	b580      	push	{r7, lr}
 801054a:	b086      	sub	sp, #24
 801054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 801054e:	4b2c      	ldr	r3, [pc, #176]	; (8010600 <HAL_FMC_MspInit+0xb8>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d150      	bne.n	80105f8 <HAL_FMC_MspInit+0xb0>
    return;
  }
  FMC_Initialized = 1;
 8010556:	4b2a      	ldr	r3, [pc, #168]	; (8010600 <HAL_FMC_MspInit+0xb8>)
 8010558:	2201      	movs	r2, #1
 801055a:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 801055c:	2300      	movs	r3, #0
 801055e:	603b      	str	r3, [r7, #0]
 8010560:	4b28      	ldr	r3, [pc, #160]	; (8010604 <HAL_FMC_MspInit+0xbc>)
 8010562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010564:	4a27      	ldr	r2, [pc, #156]	; (8010604 <HAL_FMC_MspInit+0xbc>)
 8010566:	f043 0301 	orr.w	r3, r3, #1
 801056a:	6393      	str	r3, [r2, #56]	; 0x38
 801056c:	4b25      	ldr	r3, [pc, #148]	; (8010604 <HAL_FMC_MspInit+0xbc>)
 801056e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010570:	f003 0301 	and.w	r3, r3, #1
 8010574:	603b      	str	r3, [r7, #0]
 8010576:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
 8010578:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 801057c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801057e:	2302      	movs	r3, #2
 8010580:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010582:	2300      	movs	r3, #0
 8010584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010586:	2303      	movs	r3, #3
 8010588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801058a:	230c      	movs	r3, #12
 801058c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801058e:	1d3b      	adds	r3, r7, #4
 8010590:	4619      	mov	r1, r3
 8010592:	481d      	ldr	r0, [pc, #116]	; (8010608 <HAL_FMC_MspInit+0xc0>)
 8010594:	f7f2 f9ec 	bl	8002970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8010598:	f24f 033f 	movw	r3, #61503	; 0xf03f
 801059c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801059e:	2302      	movs	r3, #2
 80105a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105a6:	2303      	movs	r3, #3
 80105a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80105aa:	230c      	movs	r3, #12
 80105ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80105ae:	1d3b      	adds	r3, r7, #4
 80105b0:	4619      	mov	r1, r3
 80105b2:	4816      	ldr	r0, [pc, #88]	; (801060c <HAL_FMC_MspInit+0xc4>)
 80105b4:	f7f2 f9dc 	bl	8002970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80105b8:	233f      	movs	r3, #63	; 0x3f
 80105ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105bc:	2302      	movs	r3, #2
 80105be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105c0:	2300      	movs	r3, #0
 80105c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105c4:	2303      	movs	r3, #3
 80105c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80105c8:	230c      	movs	r3, #12
 80105ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80105cc:	1d3b      	adds	r3, r7, #4
 80105ce:	4619      	mov	r1, r3
 80105d0:	480f      	ldr	r0, [pc, #60]	; (8010610 <HAL_FMC_MspInit+0xc8>)
 80105d2:	f7f2 f9cd 	bl	8002970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80105d6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80105da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105dc:	2302      	movs	r3, #2
 80105de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105e0:	2300      	movs	r3, #0
 80105e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105e4:	2303      	movs	r3, #3
 80105e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80105e8:	230c      	movs	r3, #12
 80105ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80105ec:	1d3b      	adds	r3, r7, #4
 80105ee:	4619      	mov	r1, r3
 80105f0:	4808      	ldr	r0, [pc, #32]	; (8010614 <HAL_FMC_MspInit+0xcc>)
 80105f2:	f7f2 f9bd 	bl	8002970 <HAL_GPIO_Init>
 80105f6:	e000      	b.n	80105fa <HAL_FMC_MspInit+0xb2>
    return;
 80105f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80105fa:	3718      	adds	r7, #24
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	20000ad0 	.word	0x20000ad0
 8010604:	40023800 	.word	0x40023800
 8010608:	40021000 	.word	0x40021000
 801060c:	40021400 	.word	0x40021400
 8010610:	40021800 	.word	0x40021800
 8010614:	40020c00 	.word	0x40020c00

08010618 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8010620:	f7ff ff92 	bl	8010548 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8010624:	bf00      	nop
 8010626:	3708      	adds	r7, #8
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b08c      	sub	sp, #48	; 0x30
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8010634:	2300      	movs	r3, #0
 8010636:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 801063c:	2200      	movs	r2, #0
 801063e:	6879      	ldr	r1, [r7, #4]
 8010640:	2019      	movs	r0, #25
 8010642:	f7f1 fc9a 	bl	8001f7a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8010646:	2019      	movs	r0, #25
 8010648:	f7f1 fcb3 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801064c:	2300      	movs	r3, #0
 801064e:	60fb      	str	r3, [r7, #12]
 8010650:	4b1f      	ldr	r3, [pc, #124]	; (80106d0 <HAL_InitTick+0xa4>)
 8010652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010654:	4a1e      	ldr	r2, [pc, #120]	; (80106d0 <HAL_InitTick+0xa4>)
 8010656:	f043 0301 	orr.w	r3, r3, #1
 801065a:	6453      	str	r3, [r2, #68]	; 0x44
 801065c:	4b1c      	ldr	r3, [pc, #112]	; (80106d0 <HAL_InitTick+0xa4>)
 801065e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010660:	f003 0301 	and.w	r3, r3, #1
 8010664:	60fb      	str	r3, [r7, #12]
 8010666:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010668:	f107 0210 	add.w	r2, r7, #16
 801066c:	f107 0314 	add.w	r3, r7, #20
 8010670:	4611      	mov	r1, r2
 8010672:	4618      	mov	r0, r3
 8010674:	f7f4 fc98 	bl	8004fa8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8010678:	f7f4 fc74 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 801067c:	4603      	mov	r3, r0
 801067e:	005b      	lsls	r3, r3, #1
 8010680:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010684:	4a13      	ldr	r2, [pc, #76]	; (80106d4 <HAL_InitTick+0xa8>)
 8010686:	fba2 2303 	umull	r2, r3, r2, r3
 801068a:	0c9b      	lsrs	r3, r3, #18
 801068c:	3b01      	subs	r3, #1
 801068e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8010690:	4b11      	ldr	r3, [pc, #68]	; (80106d8 <HAL_InitTick+0xac>)
 8010692:	4a12      	ldr	r2, [pc, #72]	; (80106dc <HAL_InitTick+0xb0>)
 8010694:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8010696:	4b10      	ldr	r3, [pc, #64]	; (80106d8 <HAL_InitTick+0xac>)
 8010698:	f240 32e7 	movw	r2, #999	; 0x3e7
 801069c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801069e:	4a0e      	ldr	r2, [pc, #56]	; (80106d8 <HAL_InitTick+0xac>)
 80106a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80106a4:	4b0c      	ldr	r3, [pc, #48]	; (80106d8 <HAL_InitTick+0xac>)
 80106a6:	2200      	movs	r2, #0
 80106a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80106aa:	4b0b      	ldr	r3, [pc, #44]	; (80106d8 <HAL_InitTick+0xac>)
 80106ac:	2200      	movs	r2, #0
 80106ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80106b0:	4809      	ldr	r0, [pc, #36]	; (80106d8 <HAL_InitTick+0xac>)
 80106b2:	f7f7 fa2c 	bl	8007b0e <HAL_TIM_Base_Init>
 80106b6:	4603      	mov	r3, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d104      	bne.n	80106c6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80106bc:	4806      	ldr	r0, [pc, #24]	; (80106d8 <HAL_InitTick+0xac>)
 80106be:	f7f7 fa51 	bl	8007b64 <HAL_TIM_Base_Start_IT>
 80106c2:	4603      	mov	r3, r0
 80106c4:	e000      	b.n	80106c8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80106c6:	2301      	movs	r3, #1
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3730      	adds	r7, #48	; 0x30
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}
 80106d0:	40023800 	.word	0x40023800
 80106d4:	431bde83 	.word	0x431bde83
 80106d8:	20009aa8 	.word	0x20009aa8
 80106dc:	40010000 	.word	0x40010000

080106e0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80106e0:	b480      	push	{r7}
 80106e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80106e4:	bf00      	nop
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr
	...

080106f0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  *((__IO uint32_t*)MAILBOX_ADDRESS) = MAILBOX_VAL_HARD;
 80106f4:	4b03      	ldr	r3, [pc, #12]	; (8010704 <HardFault_Handler+0x14>)
 80106f6:	4a04      	ldr	r2, [pc, #16]	; (8010708 <HardFault_Handler+0x18>)
 80106f8:	601a      	str	r2, [r3, #0]
  MX_WWDG_Init();
 80106fa:	f7ff f9ef 	bl	800fadc <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	Error_Handler();
 80106fe:	f7f0 ff0d 	bl	800151c <Error_Handler>
 8010702:	e7fc      	b.n	80106fe <HardFault_Handler+0xe>
 8010704:	40002854 	.word	0x40002854
 8010708:	0bad0bad 	.word	0x0bad0bad

0801070c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 801070c:	b480      	push	{r7}
 801070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010710:	e7fe      	b.n	8010710 <MemManage_Handler+0x4>

08010712 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8010712:	b480      	push	{r7}
 8010714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010716:	e7fe      	b.n	8010716 <BusFault_Handler+0x4>

08010718 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8010718:	b480      	push	{r7}
 801071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801071c:	e7fe      	b.n	801071c <UsageFault_Handler+0x4>

0801071e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 801071e:	b480      	push	{r7}
 8010720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010722:	bf00      	nop
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr

0801072c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8010730:	f004 f861 	bl	80147f6 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010734:	bf00      	nop
 8010736:	bd80      	pop	{r7, pc}

08010738 <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 801073c:	4802      	ldr	r0, [pc, #8]	; (8010748 <SDIO_IRQHandler+0x10>)
 801073e:	f7f5 fd87 	bl	8006250 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8010742:	bf00      	nop
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	20009944 	.word	0x20009944

0801074c <USART1_IRQHandler>:

void  USART1_IRQHandler(void)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8010750:	4802      	ldr	r0, [pc, #8]	; (801075c <USART1_IRQHandler+0x10>)
 8010752:	f7f8 fb33 	bl	8008dbc <HAL_UART_IRQHandler>
}
 8010756:	bf00      	nop
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	2000986c 	.word	0x2000986c

08010760 <CUSTOM_UART_Receive_IT_1>:

void CUSTOM_UART_Receive_IT_1(void)
{
 8010760:	b480      	push	{r7}
 8010762:	b083      	sub	sp, #12
 8010764:	af00      	add	r7, sp, #0
    uint16_t data;
    uint16_t stat;

    stat = huart1.Instance->SR;
 8010766:	4b16      	ldr	r3, [pc, #88]	; (80107c0 <CUSTOM_UART_Receive_IT_1+0x60>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	80fb      	strh	r3, [r7, #6]
    if(stat & UART_FLAG_RXNE)
 801076e:	88fb      	ldrh	r3, [r7, #6]
 8010770:	f003 0320 	and.w	r3, r3, #32
 8010774:	2b00      	cmp	r3, #0
 8010776:	d01c      	beq.n	80107b2 <CUSTOM_UART_Receive_IT_1+0x52>
    {
        data = huart1.Instance->DR;
 8010778:	4b11      	ldr	r3, [pc, #68]	; (80107c0 <CUSTOM_UART_Receive_IT_1+0x60>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	80bb      	strh	r3, [r7, #4]
        if (((RxBuffHead[ESTTC_COMM_INTEFACE] + 1) % UART_BUFFER_SIZE) != RxBuffTail[ESTTC_COMM_INTEFACE])
 8010780:	4b10      	ldr	r3, [pc, #64]	; (80107c4 <CUSTOM_UART_Receive_IT_1+0x64>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	3301      	adds	r3, #1
 8010786:	b2da      	uxtb	r2, r3
 8010788:	4b0f      	ldr	r3, [pc, #60]	; (80107c8 <CUSTOM_UART_Receive_IT_1+0x68>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	429a      	cmp	r2, r3
 801078e:	d010      	beq.n	80107b2 <CUSTOM_UART_Receive_IT_1+0x52>
        {
          RxBuffer[ESTTC_COMM_INTEFACE][RxBuffHead[ESTTC_COMM_INTEFACE]] = data;
 8010790:	4b0c      	ldr	r3, [pc, #48]	; (80107c4 <CUSTOM_UART_Receive_IT_1+0x64>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	88ba      	ldrh	r2, [r7, #4]
 8010796:	b2d1      	uxtb	r1, r2
 8010798:	4a0c      	ldr	r2, [pc, #48]	; (80107cc <CUSTOM_UART_Receive_IT_1+0x6c>)
 801079a:	54d1      	strb	r1, [r2, r3]
          RxBuffHead[ESTTC_COMM_INTEFACE] = (RxBuffHead[ESTTC_COMM_INTEFACE] + 1) % UART_BUFFER_SIZE;
 801079c:	4b09      	ldr	r3, [pc, #36]	; (80107c4 <CUSTOM_UART_Receive_IT_1+0x64>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	3301      	adds	r3, #1
 80107a2:	b2db      	uxtb	r3, r3
 80107a4:	4a07      	ldr	r2, [pc, #28]	; (80107c4 <CUSTOM_UART_Receive_IT_1+0x64>)
 80107a6:	6013      	str	r3, [r2, #0]
          RxBuffLen[ESTTC_COMM_INTEFACE] ++;
 80107a8:	4b09      	ldr	r3, [pc, #36]	; (80107d0 <CUSTOM_UART_Receive_IT_1+0x70>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	3301      	adds	r3, #1
 80107ae:	4a08      	ldr	r2, [pc, #32]	; (80107d0 <CUSTOM_UART_Receive_IT_1+0x70>)
 80107b0:	6013      	str	r3, [r2, #0]
        }
    }
}
 80107b2:	bf00      	nop
 80107b4:	370c      	adds	r7, #12
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	2000986c 	.word	0x2000986c
 80107c4:	20009514 	.word	0x20009514
 80107c8:	20009508 	.word	0x20009508
 80107cc:	20009208 	.word	0x20009208
 80107d0:	2000850c 	.word	0x2000850c

080107d4 <UART4_IRQHandler>:

/**
* @brief This function handles UART4 global interrupt.
*/
void  UART4_IRQHandler(void)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 80107d8:	4802      	ldr	r0, [pc, #8]	; (80107e4 <UART4_IRQHandler+0x10>)
 80107da:	f7f8 faef 	bl	8008dbc <HAL_UART_IRQHandler>
}
 80107de:	bf00      	nop
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	20009a08 	.word	0x20009a08

080107e8 <CUSTOM_UART_Receive_IT_4>:

void CUSTOM_UART_Receive_IT_4(void)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
    uint16_t data;
    uint16_t stat;

    stat = huart4.Instance->SR;
 80107ee:	4b17      	ldr	r3, [pc, #92]	; (801084c <CUSTOM_UART_Receive_IT_4+0x64>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	80fb      	strh	r3, [r7, #6]
    if(stat & UART_FLAG_RXNE)
 80107f6:	88fb      	ldrh	r3, [r7, #6]
 80107f8:	f003 0320 	and.w	r3, r3, #32
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d01f      	beq.n	8010840 <CUSTOM_UART_Receive_IT_4+0x58>
    {
        data = huart4.Instance->DR;
 8010800:	4b12      	ldr	r3, [pc, #72]	; (801084c <CUSTOM_UART_Receive_IT_4+0x64>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	80bb      	strh	r3, [r7, #4]
        if (((RxBuffHead[ESTTC_PAYLOAD_INTEFACE] + 1) % UART_BUFFER_SIZE) != RxBuffTail[ESTTC_PAYLOAD_INTEFACE])
 8010808:	4b11      	ldr	r3, [pc, #68]	; (8010850 <CUSTOM_UART_Receive_IT_4+0x68>)
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	3301      	adds	r3, #1
 801080e:	b2da      	uxtb	r2, r3
 8010810:	4b10      	ldr	r3, [pc, #64]	; (8010854 <CUSTOM_UART_Receive_IT_4+0x6c>)
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	429a      	cmp	r2, r3
 8010816:	d013      	beq.n	8010840 <CUSTOM_UART_Receive_IT_4+0x58>
        {
          RxBuffer[ESTTC_PAYLOAD_INTEFACE][RxBuffHead[ESTTC_PAYLOAD_INTEFACE]] = data;
 8010818:	4b0d      	ldr	r3, [pc, #52]	; (8010850 <CUSTOM_UART_Receive_IT_4+0x68>)
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	88ba      	ldrh	r2, [r7, #4]
 801081e:	b2d1      	uxtb	r1, r2
 8010820:	4a0d      	ldr	r2, [pc, #52]	; (8010858 <CUSTOM_UART_Receive_IT_4+0x70>)
 8010822:	4413      	add	r3, r2
 8010824:	460a      	mov	r2, r1
 8010826:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          RxBuffHead[ESTTC_PAYLOAD_INTEFACE] = (RxBuffHead[ESTTC_PAYLOAD_INTEFACE] + 1) % UART_BUFFER_SIZE;
 801082a:	4b09      	ldr	r3, [pc, #36]	; (8010850 <CUSTOM_UART_Receive_IT_4+0x68>)
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	3301      	adds	r3, #1
 8010830:	b2db      	uxtb	r3, r3
 8010832:	4a07      	ldr	r2, [pc, #28]	; (8010850 <CUSTOM_UART_Receive_IT_4+0x68>)
 8010834:	6053      	str	r3, [r2, #4]
          RxBuffLen[ESTTC_PAYLOAD_INTEFACE] ++;
 8010836:	4b09      	ldr	r3, [pc, #36]	; (801085c <CUSTOM_UART_Receive_IT_4+0x74>)
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	3301      	adds	r3, #1
 801083c:	4a07      	ldr	r2, [pc, #28]	; (801085c <CUSTOM_UART_Receive_IT_4+0x74>)
 801083e:	6053      	str	r3, [r2, #4]
        }
    }
}
 8010840:	bf00      	nop
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr
 801084c:	20009a08 	.word	0x20009a08
 8010850:	20009514 	.word	0x20009514
 8010854:	20009508 	.word	0x20009508
 8010858:	20009208 	.word	0x20009208
 801085c:	2000850c 	.word	0x2000850c

08010860 <USART6_IRQHandler>:
void  USART6_IRQHandler(void)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart6);
 8010864:	4802      	ldr	r0, [pc, #8]	; (8010870 <USART6_IRQHandler+0x10>)
 8010866:	f7f8 faa9 	bl	8008dbc <HAL_UART_IRQHandler>
}
 801086a:	bf00      	nop
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	200099c8 	.word	0x200099c8

08010874 <CUSTOM_UART_Receive_IT_6>:

void CUSTOM_UART_Receive_IT_6(void)
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
    uint16_t data;
    uint16_t stat;

    stat = huart6.Instance->SR;
 801087a:	4b17      	ldr	r3, [pc, #92]	; (80108d8 <CUSTOM_UART_Receive_IT_6+0x64>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	80fb      	strh	r3, [r7, #6]
    if(stat & UART_FLAG_RXNE)
 8010882:	88fb      	ldrh	r3, [r7, #6]
 8010884:	f003 0320 	and.w	r3, r3, #32
 8010888:	2b00      	cmp	r3, #0
 801088a:	d01f      	beq.n	80108cc <CUSTOM_UART_Receive_IT_6+0x58>
    {
        data = huart6.Instance->DR;
 801088c:	4b12      	ldr	r3, [pc, #72]	; (80108d8 <CUSTOM_UART_Receive_IT_6+0x64>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	80bb      	strh	r3, [r7, #4]
        if (((RxBuffHead[ESTTC_SYSCOMM_INTEFACE] + 1) % UART_BUFFER_SIZE) != RxBuffTail[ESTTC_SYSCOMM_INTEFACE])
 8010894:	4b11      	ldr	r3, [pc, #68]	; (80108dc <CUSTOM_UART_Receive_IT_6+0x68>)
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	3301      	adds	r3, #1
 801089a:	b2da      	uxtb	r2, r3
 801089c:	4b10      	ldr	r3, [pc, #64]	; (80108e0 <CUSTOM_UART_Receive_IT_6+0x6c>)
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d013      	beq.n	80108cc <CUSTOM_UART_Receive_IT_6+0x58>
        {
          RxBuffer[ESTTC_SYSCOMM_INTEFACE][RxBuffHead[ESTTC_SYSCOMM_INTEFACE]] = data;
 80108a4:	4b0d      	ldr	r3, [pc, #52]	; (80108dc <CUSTOM_UART_Receive_IT_6+0x68>)
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	88ba      	ldrh	r2, [r7, #4]
 80108aa:	b2d1      	uxtb	r1, r2
 80108ac:	4a0d      	ldr	r2, [pc, #52]	; (80108e4 <CUSTOM_UART_Receive_IT_6+0x70>)
 80108ae:	4413      	add	r3, r2
 80108b0:	460a      	mov	r2, r1
 80108b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          RxBuffHead[ESTTC_SYSCOMM_INTEFACE] = (RxBuffHead[ESTTC_SYSCOMM_INTEFACE] + 1) % UART_BUFFER_SIZE;
 80108b6:	4b09      	ldr	r3, [pc, #36]	; (80108dc <CUSTOM_UART_Receive_IT_6+0x68>)
 80108b8:	689b      	ldr	r3, [r3, #8]
 80108ba:	3301      	adds	r3, #1
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	4a07      	ldr	r2, [pc, #28]	; (80108dc <CUSTOM_UART_Receive_IT_6+0x68>)
 80108c0:	6093      	str	r3, [r2, #8]
          RxBuffLen[ESTTC_SYSCOMM_INTEFACE] ++;
 80108c2:	4b09      	ldr	r3, [pc, #36]	; (80108e8 <CUSTOM_UART_Receive_IT_6+0x74>)
 80108c4:	689b      	ldr	r3, [r3, #8]
 80108c6:	3301      	adds	r3, #1
 80108c8:	4a07      	ldr	r2, [pc, #28]	; (80108e8 <CUSTOM_UART_Receive_IT_6+0x74>)
 80108ca:	6093      	str	r3, [r2, #8]
        }
    }
}
 80108cc:	bf00      	nop
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	200099c8 	.word	0x200099c8
 80108dc:	20009514 	.word	0x20009514
 80108e0:	20009508 	.word	0x20009508
 80108e4:	20009208 	.word	0x20009208
 80108e8:	2000850c 	.word	0x2000850c

080108ec <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80108f0:	4802      	ldr	r0, [pc, #8]	; (80108fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80108f2:	f7f7 fa13 	bl	8007d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80108f6:	bf00      	nop
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	20009aa8 	.word	0x20009aa8

08010900 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8010904:	4802      	ldr	r0, [pc, #8]	; (8010910 <DMA2_Stream3_IRQHandler+0x10>)
 8010906:	f7f1 fbad 	bl	8002064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 801090a:	bf00      	nop
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	20009520 	.word	0x20009520

08010914 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8010918:	4802      	ldr	r0, [pc, #8]	; (8010924 <DMA2_Stream6_IRQHandler+0x10>)
 801091a:	f7f1 fba3 	bl	8002064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 801091e:	bf00      	nop
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	200098d0 	.word	0x200098d0

08010928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010928:	b480      	push	{r7}
 801092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801092c:	4b16      	ldr	r3, [pc, #88]	; (8010988 <SystemInit+0x60>)
 801092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010932:	4a15      	ldr	r2, [pc, #84]	; (8010988 <SystemInit+0x60>)
 8010934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801093c:	4b13      	ldr	r3, [pc, #76]	; (801098c <SystemInit+0x64>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a12      	ldr	r2, [pc, #72]	; (801098c <SystemInit+0x64>)
 8010942:	f043 0301 	orr.w	r3, r3, #1
 8010946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010948:	4b10      	ldr	r3, [pc, #64]	; (801098c <SystemInit+0x64>)
 801094a:	2200      	movs	r2, #0
 801094c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801094e:	4b0f      	ldr	r3, [pc, #60]	; (801098c <SystemInit+0x64>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4a0e      	ldr	r2, [pc, #56]	; (801098c <SystemInit+0x64>)
 8010954:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801095c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801095e:	4b0b      	ldr	r3, [pc, #44]	; (801098c <SystemInit+0x64>)
 8010960:	4a0b      	ldr	r2, [pc, #44]	; (8010990 <SystemInit+0x68>)
 8010962:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010964:	4b09      	ldr	r3, [pc, #36]	; (801098c <SystemInit+0x64>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	4a08      	ldr	r2, [pc, #32]	; (801098c <SystemInit+0x64>)
 801096a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801096e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010970:	4b06      	ldr	r3, [pc, #24]	; (801098c <SystemInit+0x64>)
 8010972:	2200      	movs	r2, #0
 8010974:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010976:	4b04      	ldr	r3, [pc, #16]	; (8010988 <SystemInit+0x60>)
 8010978:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801097c:	609a      	str	r2, [r3, #8]
#endif
}
 801097e:	bf00      	nop
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr
 8010988:	e000ed00 	.word	0xe000ed00
 801098c:	40023800 	.word	0x40023800
 8010990:	24003010 	.word	0x24003010

08010994 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801099e:	79fb      	ldrb	r3, [r7, #7]
 80109a0:	4a08      	ldr	r2, [pc, #32]	; (80109c4 <disk_status+0x30>)
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4413      	add	r3, r2
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	79fa      	ldrb	r2, [r7, #7]
 80109ac:	4905      	ldr	r1, [pc, #20]	; (80109c4 <disk_status+0x30>)
 80109ae:	440a      	add	r2, r1
 80109b0:	7a12      	ldrb	r2, [r2, #8]
 80109b2:	4610      	mov	r0, r2
 80109b4:	4798      	blx	r3
 80109b6:	4603      	mov	r3, r0
 80109b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80109ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3710      	adds	r7, #16
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	20000b40 	.word	0x20000b40

080109c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	4603      	mov	r3, r0
 80109d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80109d2:	2300      	movs	r3, #0
 80109d4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80109d6:	79fb      	ldrb	r3, [r7, #7]
 80109d8:	4a0d      	ldr	r2, [pc, #52]	; (8010a10 <disk_initialize+0x48>)
 80109da:	5cd3      	ldrb	r3, [r2, r3]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d111      	bne.n	8010a04 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80109e0:	79fb      	ldrb	r3, [r7, #7]
 80109e2:	4a0b      	ldr	r2, [pc, #44]	; (8010a10 <disk_initialize+0x48>)
 80109e4:	2101      	movs	r1, #1
 80109e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80109e8:	79fb      	ldrb	r3, [r7, #7]
 80109ea:	4a09      	ldr	r2, [pc, #36]	; (8010a10 <disk_initialize+0x48>)
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4413      	add	r3, r2
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	79fa      	ldrb	r2, [r7, #7]
 80109f6:	4906      	ldr	r1, [pc, #24]	; (8010a10 <disk_initialize+0x48>)
 80109f8:	440a      	add	r2, r1
 80109fa:	7a12      	ldrb	r2, [r2, #8]
 80109fc:	4610      	mov	r0, r2
 80109fe:	4798      	blx	r3
 8010a00:	4603      	mov	r3, r0
 8010a02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	20000b40 	.word	0x20000b40

08010a14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010a14:	b590      	push	{r4, r7, lr}
 8010a16:	b087      	sub	sp, #28
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60b9      	str	r1, [r7, #8]
 8010a1c:	607a      	str	r2, [r7, #4]
 8010a1e:	603b      	str	r3, [r7, #0]
 8010a20:	4603      	mov	r3, r0
 8010a22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
 8010a26:	4a0a      	ldr	r2, [pc, #40]	; (8010a50 <disk_read+0x3c>)
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	4413      	add	r3, r2
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	689c      	ldr	r4, [r3, #8]
 8010a30:	7bfb      	ldrb	r3, [r7, #15]
 8010a32:	4a07      	ldr	r2, [pc, #28]	; (8010a50 <disk_read+0x3c>)
 8010a34:	4413      	add	r3, r2
 8010a36:	7a18      	ldrb	r0, [r3, #8]
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	687a      	ldr	r2, [r7, #4]
 8010a3c:	68b9      	ldr	r1, [r7, #8]
 8010a3e:	47a0      	blx	r4
 8010a40:	4603      	mov	r3, r0
 8010a42:	75fb      	strb	r3, [r7, #23]
  return res;
 8010a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	371c      	adds	r7, #28
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd90      	pop	{r4, r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	20000b40 	.word	0x20000b40

08010a54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010a54:	b590      	push	{r4, r7, lr}
 8010a56:	b087      	sub	sp, #28
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	60b9      	str	r1, [r7, #8]
 8010a5c:	607a      	str	r2, [r7, #4]
 8010a5e:	603b      	str	r3, [r7, #0]
 8010a60:	4603      	mov	r3, r0
 8010a62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010a64:	7bfb      	ldrb	r3, [r7, #15]
 8010a66:	4a0a      	ldr	r2, [pc, #40]	; (8010a90 <disk_write+0x3c>)
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	4413      	add	r3, r2
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	68dc      	ldr	r4, [r3, #12]
 8010a70:	7bfb      	ldrb	r3, [r7, #15]
 8010a72:	4a07      	ldr	r2, [pc, #28]	; (8010a90 <disk_write+0x3c>)
 8010a74:	4413      	add	r3, r2
 8010a76:	7a18      	ldrb	r0, [r3, #8]
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	68b9      	ldr	r1, [r7, #8]
 8010a7e:	47a0      	blx	r4
 8010a80:	4603      	mov	r3, r0
 8010a82:	75fb      	strb	r3, [r7, #23]
  return res;
 8010a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	371c      	adds	r7, #28
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd90      	pop	{r4, r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	20000b40 	.word	0x20000b40

08010a94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	603a      	str	r2, [r7, #0]
 8010a9e:	71fb      	strb	r3, [r7, #7]
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010aa4:	79fb      	ldrb	r3, [r7, #7]
 8010aa6:	4a09      	ldr	r2, [pc, #36]	; (8010acc <disk_ioctl+0x38>)
 8010aa8:	009b      	lsls	r3, r3, #2
 8010aaa:	4413      	add	r3, r2
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	691b      	ldr	r3, [r3, #16]
 8010ab0:	79fa      	ldrb	r2, [r7, #7]
 8010ab2:	4906      	ldr	r1, [pc, #24]	; (8010acc <disk_ioctl+0x38>)
 8010ab4:	440a      	add	r2, r1
 8010ab6:	7a10      	ldrb	r0, [r2, #8]
 8010ab8:	79b9      	ldrb	r1, [r7, #6]
 8010aba:	683a      	ldr	r2, [r7, #0]
 8010abc:	4798      	blx	r3
 8010abe:	4603      	mov	r3, r0
 8010ac0:	73fb      	strb	r3, [r7, #15]
  return res;
 8010ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3710      	adds	r7, #16
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	20000b40 	.word	0x20000b40

08010ad0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010ad0:	b480      	push	{r7}
 8010ad2:	b087      	sub	sp, #28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	60b9      	str	r1, [r7, #8]
 8010ada:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8010ae4:	e007      	b.n	8010af6 <mem_cpy+0x26>
		*d++ = *s++;
 8010ae6:	693a      	ldr	r2, [r7, #16]
 8010ae8:	1c53      	adds	r3, r2, #1
 8010aea:	613b      	str	r3, [r7, #16]
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	1c59      	adds	r1, r3, #1
 8010af0:	6179      	str	r1, [r7, #20]
 8010af2:	7812      	ldrb	r2, [r2, #0]
 8010af4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	1e5a      	subs	r2, r3, #1
 8010afa:	607a      	str	r2, [r7, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d1f2      	bne.n	8010ae6 <mem_cpy+0x16>
}
 8010b00:	bf00      	nop
 8010b02:	bf00      	nop
 8010b04:	371c      	adds	r7, #28
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr

08010b0e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010b0e:	b480      	push	{r7}
 8010b10:	b087      	sub	sp, #28
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	60f8      	str	r0, [r7, #12]
 8010b16:	60b9      	str	r1, [r7, #8]
 8010b18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8010b1e:	e005      	b.n	8010b2c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	1c5a      	adds	r2, r3, #1
 8010b24:	617a      	str	r2, [r7, #20]
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	b2d2      	uxtb	r2, r2
 8010b2a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	1e5a      	subs	r2, r3, #1
 8010b30:	607a      	str	r2, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d1f4      	bne.n	8010b20 <mem_set+0x12>
}
 8010b36:	bf00      	nop
 8010b38:	bf00      	nop
 8010b3a:	371c      	adds	r7, #28
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr

08010b44 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8010b44:	b480      	push	{r7}
 8010b46:	b089      	sub	sp, #36	; 0x24
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	61fb      	str	r3, [r7, #28]
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8010b5c:	bf00      	nop
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	1e5a      	subs	r2, r3, #1
 8010b62:	607a      	str	r2, [r7, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d00d      	beq.n	8010b84 <mem_cmp+0x40>
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	1c5a      	adds	r2, r3, #1
 8010b6c:	61fa      	str	r2, [r7, #28]
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	4619      	mov	r1, r3
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	1c5a      	adds	r2, r3, #1
 8010b76:	61ba      	str	r2, [r7, #24]
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	1acb      	subs	r3, r1, r3
 8010b7c:	617b      	str	r3, [r7, #20]
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d0ec      	beq.n	8010b5e <mem_cmp+0x1a>
	return r;
 8010b84:	697b      	ldr	r3, [r7, #20]
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3724      	adds	r7, #36	; 0x24
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr

08010b92 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8010b92:	b480      	push	{r7}
 8010b94:	b083      	sub	sp, #12
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
 8010b9a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010b9c:	e002      	b.n	8010ba4 <chk_chr+0x12>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	607b      	str	r3, [r7, #4]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d005      	beq.n	8010bb8 <chk_chr+0x26>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d1f2      	bne.n	8010b9e <chk_chr+0xc>
	return *str;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	781b      	ldrb	r3, [r3, #0]
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f003 fcc9 	bl	801456e <ff_req_grant>
 8010bdc:	4603      	mov	r3, r0
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8010be6:	b580      	push	{r7, lr}
 8010be8:	b082      	sub	sp, #8
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
 8010bee:	460b      	mov	r3, r1
 8010bf0:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d011      	beq.n	8010c1c <unlock_fs+0x36>
 8010bf8:	78fb      	ldrb	r3, [r7, #3]
 8010bfa:	2b0c      	cmp	r3, #12
 8010bfc:	d00e      	beq.n	8010c1c <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8010bfe:	78fb      	ldrb	r3, [r7, #3]
 8010c00:	2b0b      	cmp	r3, #11
 8010c02:	d00b      	beq.n	8010c1c <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 8010c04:	78fb      	ldrb	r3, [r7, #3]
 8010c06:	2b09      	cmp	r3, #9
 8010c08:	d008      	beq.n	8010c1c <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8010c0a:	78fb      	ldrb	r3, [r7, #3]
 8010c0c:	2b0f      	cmp	r3, #15
 8010c0e:	d005      	beq.n	8010c1c <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010c16:	4618      	mov	r0, r3
 8010c18:	f003 fcbe 	bl	8014598 <ff_rel_grant>
	}
}
 8010c1c:	bf00      	nop
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b085      	sub	sp, #20
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010c2e:	2300      	movs	r3, #0
 8010c30:	60bb      	str	r3, [r7, #8]
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	60fb      	str	r3, [r7, #12]
 8010c36:	e038      	b.n	8010caa <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8010c38:	4930      	ldr	r1, [pc, #192]	; (8010cfc <chk_lock+0xd8>)
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	005b      	lsls	r3, r3, #1
 8010c40:	4413      	add	r3, r2
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	440b      	add	r3, r1
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d029      	beq.n	8010ca0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8010c4c:	492b      	ldr	r1, [pc, #172]	; (8010cfc <chk_lock+0xd8>)
 8010c4e:	68fa      	ldr	r2, [r7, #12]
 8010c50:	4613      	mov	r3, r2
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	4413      	add	r3, r2
 8010c56:	009b      	lsls	r3, r3, #2
 8010c58:	440b      	add	r3, r1
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d11e      	bne.n	8010ca4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8010c66:	4925      	ldr	r1, [pc, #148]	; (8010cfc <chk_lock+0xd8>)
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	4413      	add	r3, r2
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	440b      	add	r3, r1
 8010c74:	3304      	adds	r3, #4
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d110      	bne.n	8010ca4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8010c82:	491e      	ldr	r1, [pc, #120]	; (8010cfc <chk_lock+0xd8>)
 8010c84:	68fa      	ldr	r2, [r7, #12]
 8010c86:	4613      	mov	r3, r2
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	4413      	add	r3, r2
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	440b      	add	r3, r1
 8010c90:	3308      	adds	r3, #8
 8010c92:	881a      	ldrh	r2, [r3, #0]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d102      	bne.n	8010ca4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8010c9e:	e007      	b.n	8010cb0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	60fb      	str	r3, [r7, #12]
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2b07      	cmp	r3, #7
 8010cae:	d9c3      	bls.n	8010c38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2b08      	cmp	r3, #8
 8010cb4:	d109      	bne.n	8010cca <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d102      	bne.n	8010cc2 <chk_lock+0x9e>
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d101      	bne.n	8010cc6 <chk_lock+0xa2>
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	e013      	b.n	8010cee <chk_lock+0xca>
 8010cc6:	2312      	movs	r3, #18
 8010cc8:	e011      	b.n	8010cee <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10b      	bne.n	8010ce8 <chk_lock+0xc4>
 8010cd0:	490a      	ldr	r1, [pc, #40]	; (8010cfc <chk_lock+0xd8>)
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	005b      	lsls	r3, r3, #1
 8010cd8:	4413      	add	r3, r2
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	440b      	add	r3, r1
 8010cde:	330a      	adds	r3, #10
 8010ce0:	881b      	ldrh	r3, [r3, #0]
 8010ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ce6:	d101      	bne.n	8010cec <chk_lock+0xc8>
 8010ce8:	2310      	movs	r3, #16
 8010cea:	e000      	b.n	8010cee <chk_lock+0xca>
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	20000ae0 	.word	0x20000ae0

08010d00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010d06:	2300      	movs	r3, #0
 8010d08:	607b      	str	r3, [r7, #4]
 8010d0a:	e002      	b.n	8010d12 <enq_lock+0x12>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	3301      	adds	r3, #1
 8010d10:	607b      	str	r3, [r7, #4]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2b07      	cmp	r3, #7
 8010d16:	d809      	bhi.n	8010d2c <enq_lock+0x2c>
 8010d18:	490a      	ldr	r1, [pc, #40]	; (8010d44 <enq_lock+0x44>)
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	4613      	mov	r3, r2
 8010d1e:	005b      	lsls	r3, r3, #1
 8010d20:	4413      	add	r3, r2
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	440b      	add	r3, r1
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d1ef      	bne.n	8010d0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2b08      	cmp	r3, #8
 8010d30:	bf14      	ite	ne
 8010d32:	2301      	movne	r3, #1
 8010d34:	2300      	moveq	r3, #0
 8010d36:	b2db      	uxtb	r3, r3
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	370c      	adds	r7, #12
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr
 8010d44:	20000ae0 	.word	0x20000ae0

08010d48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010d52:	2300      	movs	r3, #0
 8010d54:	60fb      	str	r3, [r7, #12]
 8010d56:	e02b      	b.n	8010db0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8010d58:	4956      	ldr	r1, [pc, #344]	; (8010eb4 <inc_lock+0x16c>)
 8010d5a:	68fa      	ldr	r2, [r7, #12]
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	005b      	lsls	r3, r3, #1
 8010d60:	4413      	add	r3, r2
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	440b      	add	r3, r1
 8010d66:	681a      	ldr	r2, [r3, #0]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d11b      	bne.n	8010daa <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8010d72:	4950      	ldr	r1, [pc, #320]	; (8010eb4 <inc_lock+0x16c>)
 8010d74:	68fa      	ldr	r2, [r7, #12]
 8010d76:	4613      	mov	r3, r2
 8010d78:	005b      	lsls	r3, r3, #1
 8010d7a:	4413      	add	r3, r2
 8010d7c:	009b      	lsls	r3, r3, #2
 8010d7e:	440b      	add	r3, r1
 8010d80:	3304      	adds	r3, #4
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d10d      	bne.n	8010daa <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8010d8e:	4949      	ldr	r1, [pc, #292]	; (8010eb4 <inc_lock+0x16c>)
 8010d90:	68fa      	ldr	r2, [r7, #12]
 8010d92:	4613      	mov	r3, r2
 8010d94:	005b      	lsls	r3, r3, #1
 8010d96:	4413      	add	r3, r2
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	440b      	add	r3, r1
 8010d9c:	3308      	adds	r3, #8
 8010d9e:	881a      	ldrh	r2, [r3, #0]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d006      	beq.n	8010db8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	3301      	adds	r3, #1
 8010dae:	60fb      	str	r3, [r7, #12]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2b07      	cmp	r3, #7
 8010db4:	d9d0      	bls.n	8010d58 <inc_lock+0x10>
 8010db6:	e000      	b.n	8010dba <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8010db8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2b08      	cmp	r3, #8
 8010dbe:	d145      	bne.n	8010e4c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	60fb      	str	r3, [r7, #12]
 8010dc4:	e002      	b.n	8010dcc <inc_lock+0x84>
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	60fb      	str	r3, [r7, #12]
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2b07      	cmp	r3, #7
 8010dd0:	d809      	bhi.n	8010de6 <inc_lock+0x9e>
 8010dd2:	4938      	ldr	r1, [pc, #224]	; (8010eb4 <inc_lock+0x16c>)
 8010dd4:	68fa      	ldr	r2, [r7, #12]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	4413      	add	r3, r2
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	440b      	add	r3, r1
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d1ef      	bne.n	8010dc6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2b08      	cmp	r3, #8
 8010dea:	d101      	bne.n	8010df0 <inc_lock+0xa8>
 8010dec:	2300      	movs	r3, #0
 8010dee:	e05a      	b.n	8010ea6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8010df6:	482f      	ldr	r0, [pc, #188]	; (8010eb4 <inc_lock+0x16c>)
 8010df8:	68fa      	ldr	r2, [r7, #12]
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	4413      	add	r3, r2
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	4403      	add	r3, r0
 8010e04:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8010e0c:	4829      	ldr	r0, [pc, #164]	; (8010eb4 <inc_lock+0x16c>)
 8010e0e:	68fa      	ldr	r2, [r7, #12]
 8010e10:	4613      	mov	r3, r2
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	4413      	add	r3, r2
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	4403      	add	r3, r0
 8010e1a:	3304      	adds	r3, #4
 8010e1c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8010e24:	4923      	ldr	r1, [pc, #140]	; (8010eb4 <inc_lock+0x16c>)
 8010e26:	68fa      	ldr	r2, [r7, #12]
 8010e28:	4613      	mov	r3, r2
 8010e2a:	005b      	lsls	r3, r3, #1
 8010e2c:	4413      	add	r3, r2
 8010e2e:	009b      	lsls	r3, r3, #2
 8010e30:	440b      	add	r3, r1
 8010e32:	3308      	adds	r3, #8
 8010e34:	4602      	mov	r2, r0
 8010e36:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8010e38:	491e      	ldr	r1, [pc, #120]	; (8010eb4 <inc_lock+0x16c>)
 8010e3a:	68fa      	ldr	r2, [r7, #12]
 8010e3c:	4613      	mov	r3, r2
 8010e3e:	005b      	lsls	r3, r3, #1
 8010e40:	4413      	add	r3, r2
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	440b      	add	r3, r1
 8010e46:	330a      	adds	r3, #10
 8010e48:	2200      	movs	r2, #0
 8010e4a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d00c      	beq.n	8010e6c <inc_lock+0x124>
 8010e52:	4918      	ldr	r1, [pc, #96]	; (8010eb4 <inc_lock+0x16c>)
 8010e54:	68fa      	ldr	r2, [r7, #12]
 8010e56:	4613      	mov	r3, r2
 8010e58:	005b      	lsls	r3, r3, #1
 8010e5a:	4413      	add	r3, r2
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	440b      	add	r3, r1
 8010e60:	330a      	adds	r3, #10
 8010e62:	881b      	ldrh	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d001      	beq.n	8010e6c <inc_lock+0x124>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	e01c      	b.n	8010ea6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d10b      	bne.n	8010e8a <inc_lock+0x142>
 8010e72:	4910      	ldr	r1, [pc, #64]	; (8010eb4 <inc_lock+0x16c>)
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	4613      	mov	r3, r2
 8010e78:	005b      	lsls	r3, r3, #1
 8010e7a:	4413      	add	r3, r2
 8010e7c:	009b      	lsls	r3, r3, #2
 8010e7e:	440b      	add	r3, r1
 8010e80:	330a      	adds	r3, #10
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	3301      	adds	r3, #1
 8010e86:	b299      	uxth	r1, r3
 8010e88:	e001      	b.n	8010e8e <inc_lock+0x146>
 8010e8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010e8e:	4809      	ldr	r0, [pc, #36]	; (8010eb4 <inc_lock+0x16c>)
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	4613      	mov	r3, r2
 8010e94:	005b      	lsls	r3, r3, #1
 8010e96:	4413      	add	r3, r2
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	4403      	add	r3, r0
 8010e9c:	330a      	adds	r3, #10
 8010e9e:	460a      	mov	r2, r1
 8010ea0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	3301      	adds	r3, #1
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3714      	adds	r7, #20
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr
 8010eb2:	bf00      	nop
 8010eb4:	20000ae0 	.word	0x20000ae0

08010eb8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	3b01      	subs	r3, #1
 8010ec4:	607b      	str	r3, [r7, #4]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2b07      	cmp	r3, #7
 8010eca:	d82e      	bhi.n	8010f2a <dec_lock+0x72>
		n = Files[i].ctr;
 8010ecc:	491b      	ldr	r1, [pc, #108]	; (8010f3c <dec_lock+0x84>)
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	4413      	add	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	440b      	add	r3, r1
 8010eda:	330a      	adds	r3, #10
 8010edc:	881b      	ldrh	r3, [r3, #0]
 8010ede:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010ee0:	89fb      	ldrh	r3, [r7, #14]
 8010ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ee6:	d101      	bne.n	8010eec <dec_lock+0x34>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8010eec:	89fb      	ldrh	r3, [r7, #14]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d002      	beq.n	8010ef8 <dec_lock+0x40>
 8010ef2:	89fb      	ldrh	r3, [r7, #14]
 8010ef4:	3b01      	subs	r3, #1
 8010ef6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010ef8:	4910      	ldr	r1, [pc, #64]	; (8010f3c <dec_lock+0x84>)
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	4613      	mov	r3, r2
 8010efe:	005b      	lsls	r3, r3, #1
 8010f00:	4413      	add	r3, r2
 8010f02:	009b      	lsls	r3, r3, #2
 8010f04:	440b      	add	r3, r1
 8010f06:	330a      	adds	r3, #10
 8010f08:	89fa      	ldrh	r2, [r7, #14]
 8010f0a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010f0c:	89fb      	ldrh	r3, [r7, #14]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d108      	bne.n	8010f24 <dec_lock+0x6c>
 8010f12:	490a      	ldr	r1, [pc, #40]	; (8010f3c <dec_lock+0x84>)
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	4613      	mov	r3, r2
 8010f18:	005b      	lsls	r3, r3, #1
 8010f1a:	4413      	add	r3, r2
 8010f1c:	009b      	lsls	r3, r3, #2
 8010f1e:	440b      	add	r3, r1
 8010f20:	2200      	movs	r2, #0
 8010f22:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010f24:	2300      	movs	r3, #0
 8010f26:	737b      	strb	r3, [r7, #13]
 8010f28:	e001      	b.n	8010f2e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010f2a:	2302      	movs	r3, #2
 8010f2c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010f2e:	7b7b      	ldrb	r3, [r7, #13]
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3714      	adds	r7, #20
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr
 8010f3c:	20000ae0 	.word	0x20000ae0

08010f40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010f48:	2300      	movs	r3, #0
 8010f4a:	60fb      	str	r3, [r7, #12]
 8010f4c:	e016      	b.n	8010f7c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010f4e:	4910      	ldr	r1, [pc, #64]	; (8010f90 <clear_lock+0x50>)
 8010f50:	68fa      	ldr	r2, [r7, #12]
 8010f52:	4613      	mov	r3, r2
 8010f54:	005b      	lsls	r3, r3, #1
 8010f56:	4413      	add	r3, r2
 8010f58:	009b      	lsls	r3, r3, #2
 8010f5a:	440b      	add	r3, r1
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d108      	bne.n	8010f76 <clear_lock+0x36>
 8010f64:	490a      	ldr	r1, [pc, #40]	; (8010f90 <clear_lock+0x50>)
 8010f66:	68fa      	ldr	r2, [r7, #12]
 8010f68:	4613      	mov	r3, r2
 8010f6a:	005b      	lsls	r3, r3, #1
 8010f6c:	4413      	add	r3, r2
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	440b      	add	r3, r1
 8010f72:	2200      	movs	r2, #0
 8010f74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	60fb      	str	r3, [r7, #12]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2b07      	cmp	r3, #7
 8010f80:	d9e5      	bls.n	8010f4e <clear_lock+0xe>
	}
}
 8010f82:	bf00      	nop
 8010f84:	bf00      	nop
 8010f86:	3714      	adds	r7, #20
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr
 8010f90:	20000ae0 	.word	0x20000ae0

08010f94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b086      	sub	sp, #24
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d038      	beq.n	801101c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8010fb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010fb8:	6879      	ldr	r1, [r7, #4]
 8010fba:	2301      	movs	r3, #1
 8010fbc:	697a      	ldr	r2, [r7, #20]
 8010fbe:	f7ff fd49 	bl	8010a54 <disk_write>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d002      	beq.n	8010fce <sync_window+0x3a>
			res = FR_DISK_ERR;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	73fb      	strb	r3, [r7, #15]
 8010fcc:	e026      	b.n	801101c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010fdc:	697a      	ldr	r2, [r7, #20]
 8010fde:	1ad2      	subs	r2, r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d218      	bcs.n	801101c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8010ff0:	613b      	str	r3, [r7, #16]
 8010ff2:	e010      	b.n	8011016 <sync_window+0x82>
					wsect += fs->fsize;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010ffa:	697a      	ldr	r2, [r7, #20]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011006:	6879      	ldr	r1, [r7, #4]
 8011008:	2301      	movs	r3, #1
 801100a:	697a      	ldr	r2, [r7, #20]
 801100c:	f7ff fd22 	bl	8010a54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	3b01      	subs	r3, #1
 8011014:	613b      	str	r3, [r7, #16]
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	2b01      	cmp	r3, #1
 801101a:	d8eb      	bhi.n	8010ff4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 801101c:	7bfb      	ldrb	r3, [r7, #15]
}
 801101e:	4618      	mov	r0, r3
 8011020:	3718      	adds	r7, #24
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8011026:	b580      	push	{r7, lr}
 8011028:	b084      	sub	sp, #16
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
 801102e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011030:	2300      	movs	r3, #0
 8011032:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 801103a:	683a      	ldr	r2, [r7, #0]
 801103c:	429a      	cmp	r2, r3
 801103e:	d01b      	beq.n	8011078 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f7ff ffa7 	bl	8010f94 <sync_window>
 8011046:	4603      	mov	r3, r0
 8011048:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801104a:	7bfb      	ldrb	r3, [r7, #15]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d113      	bne.n	8011078 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011056:	6879      	ldr	r1, [r7, #4]
 8011058:	2301      	movs	r3, #1
 801105a:	683a      	ldr	r2, [r7, #0]
 801105c:	f7ff fcda 	bl	8010a14 <disk_read>
 8011060:	4603      	mov	r3, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d004      	beq.n	8011070 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801106a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801106c:	2301      	movs	r3, #1
 801106e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	683a      	ldr	r2, [r7, #0]
 8011074:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 8011078:	7bfb      	ldrb	r3, [r7, #15]
}
 801107a:	4618      	mov	r0, r3
 801107c:	3710      	adds	r7, #16
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}

08011082 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8011082:	b580      	push	{r7, lr}
 8011084:	b084      	sub	sp, #16
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f7ff ff82 	bl	8010f94 <sync_window>
 8011090:	4603      	mov	r3, r0
 8011092:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011094:	7bfb      	ldrb	r3, [r7, #15]
 8011096:	2b00      	cmp	r3, #0
 8011098:	f040 809b 	bne.w	80111d2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80110a2:	2b03      	cmp	r3, #3
 80110a4:	f040 8088 	bne.w	80111b8 <sync_fs+0x136>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	f040 8082 	bne.w	80111b8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80110ba:	2100      	movs	r1, #0
 80110bc:	4618      	mov	r0, r3
 80110be:	f7ff fd26 	bl	8010b0e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2255      	movs	r2, #85	; 0x55
 80110c6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	22aa      	movs	r2, #170	; 0xaa
 80110ce:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2252      	movs	r2, #82	; 0x52
 80110d6:	701a      	strb	r2, [r3, #0]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2252      	movs	r2, #82	; 0x52
 80110dc:	705a      	strb	r2, [r3, #1]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2261      	movs	r2, #97	; 0x61
 80110e2:	709a      	strb	r2, [r3, #2]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2241      	movs	r2, #65	; 0x41
 80110e8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2272      	movs	r2, #114	; 0x72
 80110ee:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2272      	movs	r2, #114	; 0x72
 80110f6:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2241      	movs	r2, #65	; 0x41
 80110fe:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2261      	movs	r2, #97	; 0x61
 8011106:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011110:	b2da      	uxtb	r2, r3
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801111e:	b29b      	uxth	r3, r3
 8011120:	0a1b      	lsrs	r3, r3, #8
 8011122:	b29b      	uxth	r3, r3
 8011124:	b2da      	uxtb	r2, r3
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011132:	0c1b      	lsrs	r3, r3, #16
 8011134:	b2da      	uxtb	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011142:	0e1b      	lsrs	r3, r3, #24
 8011144:	b2da      	uxtb	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011152:	b2da      	uxtb	r2, r3
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011160:	b29b      	uxth	r3, r3
 8011162:	0a1b      	lsrs	r3, r3, #8
 8011164:	b29b      	uxth	r3, r3
 8011166:	b2da      	uxtb	r2, r3
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011174:	0c1b      	lsrs	r3, r3, #16
 8011176:	b2da      	uxtb	r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011184:	0e1b      	lsrs	r3, r3, #24
 8011186:	b2da      	uxtb	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011194:	1c5a      	adds	r2, r3, #1
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80111a2:	6879      	ldr	r1, [r7, #4]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80111aa:	2301      	movs	r3, #1
 80111ac:	f7ff fc52 	bl	8010a54 <disk_write>
			fs->fsi_flag = 0;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2200      	movs	r2, #0
 80111b4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80111be:	2200      	movs	r2, #0
 80111c0:	2100      	movs	r1, #0
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff fc66 	bl	8010a94 <disk_ioctl>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d001      	beq.n	80111d2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80111ce:	2301      	movs	r3, #1
 80111d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80111d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	3b02      	subs	r3, #2
 80111ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80111f2:	3b02      	subs	r3, #2
 80111f4:	683a      	ldr	r2, [r7, #0]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	d301      	bcc.n	80111fe <clust2sect+0x22>
 80111fa:	2300      	movs	r3, #0
 80111fc:	e00a      	b.n	8011214 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011204:	461a      	mov	r2, r3
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	fb03 f202 	mul.w	r2, r3, r2
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8011212:	4413      	add	r3, r2
}
 8011214:	4618      	mov	r0, r3
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b086      	sub	sp, #24
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	2b01      	cmp	r3, #1
 801122e:	d905      	bls.n	801123c <get_fat+0x1c>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011236:	683a      	ldr	r2, [r7, #0]
 8011238:	429a      	cmp	r2, r3
 801123a:	d302      	bcc.n	8011242 <get_fat+0x22>
		val = 1;	/* Internal error */
 801123c:	2301      	movs	r3, #1
 801123e:	617b      	str	r3, [r7, #20]
 8011240:	e0a3      	b.n	801138a <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011246:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801124e:	2b03      	cmp	r3, #3
 8011250:	d068      	beq.n	8011324 <get_fat+0x104>
 8011252:	2b03      	cmp	r3, #3
 8011254:	f300 808f 	bgt.w	8011376 <get_fat+0x156>
 8011258:	2b01      	cmp	r3, #1
 801125a:	d002      	beq.n	8011262 <get_fat+0x42>
 801125c:	2b02      	cmp	r3, #2
 801125e:	d040      	beq.n	80112e2 <get_fat+0xc2>
 8011260:	e089      	b.n	8011376 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	60fb      	str	r3, [r7, #12]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	085b      	lsrs	r3, r3, #1
 801126a:	68fa      	ldr	r2, [r7, #12]
 801126c:	4413      	add	r3, r2
 801126e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	0a5b      	lsrs	r3, r3, #9
 801127a:	4413      	add	r3, r2
 801127c:	4619      	mov	r1, r3
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7ff fed1 	bl	8011026 <move_window>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d178      	bne.n	801137c <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	1c5a      	adds	r2, r3, #1
 801128e:	60fa      	str	r2, [r7, #12]
 8011290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	5cd3      	ldrb	r3, [r2, r3]
 8011298:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	0a5b      	lsrs	r3, r3, #9
 80112a4:	4413      	add	r3, r2
 80112a6:	4619      	mov	r1, r3
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f7ff febc 	bl	8011026 <move_window>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d165      	bne.n	8011380 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	5cd3      	ldrb	r3, [r2, r3]
 80112be:	021b      	lsls	r3, r3, #8
 80112c0:	461a      	mov	r2, r3
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	4313      	orrs	r3, r2
 80112c6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	f003 0301 	and.w	r3, r3, #1
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d002      	beq.n	80112d8 <get_fat+0xb8>
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	091b      	lsrs	r3, r3, #4
 80112d6:	e002      	b.n	80112de <get_fat+0xbe>
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80112de:	617b      	str	r3, [r7, #20]
			break;
 80112e0:	e053      	b.n	801138a <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	0a1b      	lsrs	r3, r3, #8
 80112ec:	4413      	add	r3, r2
 80112ee:	4619      	mov	r1, r3
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7ff fe98 	bl	8011026 <move_window>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d143      	bne.n	8011384 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	005b      	lsls	r3, r3, #1
 8011300:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	4413      	add	r3, r2
 8011308:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	3301      	adds	r3, #1
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	021b      	lsls	r3, r3, #8
 8011312:	b21a      	sxth	r2, r3
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	b21b      	sxth	r3, r3
 801131a:	4313      	orrs	r3, r2
 801131c:	b21b      	sxth	r3, r3
 801131e:	b29b      	uxth	r3, r3
 8011320:	617b      	str	r3, [r7, #20]
			break;
 8011322:	e032      	b.n	801138a <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	09db      	lsrs	r3, r3, #7
 801132e:	4413      	add	r3, r2
 8011330:	4619      	mov	r1, r3
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f7ff fe77 	bl	8011026 <move_window>
 8011338:	4603      	mov	r3, r0
 801133a:	2b00      	cmp	r3, #0
 801133c:	d124      	bne.n	8011388 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	009b      	lsls	r3, r3, #2
 8011342:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	4413      	add	r3, r2
 801134a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	3303      	adds	r3, #3
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	061a      	lsls	r2, r3, #24
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	3302      	adds	r3, #2
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	041b      	lsls	r3, r3, #16
 801135c:	4313      	orrs	r3, r2
 801135e:	693a      	ldr	r2, [r7, #16]
 8011360:	3201      	adds	r2, #1
 8011362:	7812      	ldrb	r2, [r2, #0]
 8011364:	0212      	lsls	r2, r2, #8
 8011366:	4313      	orrs	r3, r2
 8011368:	693a      	ldr	r2, [r7, #16]
 801136a:	7812      	ldrb	r2, [r2, #0]
 801136c:	4313      	orrs	r3, r2
 801136e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011372:	617b      	str	r3, [r7, #20]
			break;
 8011374:	e009      	b.n	801138a <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8011376:	2301      	movs	r3, #1
 8011378:	617b      	str	r3, [r7, #20]
 801137a:	e006      	b.n	801138a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801137c:	bf00      	nop
 801137e:	e004      	b.n	801138a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011380:	bf00      	nop
 8011382:	e002      	b.n	801138a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011384:	bf00      	nop
 8011386:	e000      	b.n	801138a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011388:	bf00      	nop
		}
	}

	return val;
 801138a:	697b      	ldr	r3, [r7, #20]
}
 801138c:	4618      	mov	r0, r3
 801138e:	3718      	adds	r7, #24
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b088      	sub	sp, #32
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d905      	bls.n	80113b2 <put_fat+0x1e>
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80113ac:	68ba      	ldr	r2, [r7, #8]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d302      	bcc.n	80113b8 <put_fat+0x24>
		res = FR_INT_ERR;
 80113b2:	2302      	movs	r3, #2
 80113b4:	77fb      	strb	r3, [r7, #31]
 80113b6:	e0f6      	b.n	80115a6 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80113be:	2b03      	cmp	r3, #3
 80113c0:	f000 809e 	beq.w	8011500 <put_fat+0x16c>
 80113c4:	2b03      	cmp	r3, #3
 80113c6:	f300 80e4 	bgt.w	8011592 <put_fat+0x1fe>
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d002      	beq.n	80113d4 <put_fat+0x40>
 80113ce:	2b02      	cmp	r3, #2
 80113d0:	d06f      	beq.n	80114b2 <put_fat+0x11e>
 80113d2:	e0de      	b.n	8011592 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	617b      	str	r3, [r7, #20]
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	085b      	lsrs	r3, r3, #1
 80113dc:	697a      	ldr	r2, [r7, #20]
 80113de:	4413      	add	r3, r2
 80113e0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	0a5b      	lsrs	r3, r3, #9
 80113ec:	4413      	add	r3, r2
 80113ee:	4619      	mov	r1, r3
 80113f0:	68f8      	ldr	r0, [r7, #12]
 80113f2:	f7ff fe18 	bl	8011026 <move_window>
 80113f6:	4603      	mov	r3, r0
 80113f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80113fa:	7ffb      	ldrb	r3, [r7, #31]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	f040 80cb 	bne.w	8011598 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	1c5a      	adds	r2, r3, #1
 8011406:	617a      	str	r2, [r7, #20]
 8011408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801140c:	68fa      	ldr	r2, [r7, #12]
 801140e:	4413      	add	r3, r2
 8011410:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	f003 0301 	and.w	r3, r3, #1
 8011418:	2b00      	cmp	r3, #0
 801141a:	d00d      	beq.n	8011438 <put_fat+0xa4>
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	b25b      	sxtb	r3, r3
 8011422:	f003 030f 	and.w	r3, r3, #15
 8011426:	b25a      	sxtb	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	b2db      	uxtb	r3, r3
 801142c:	011b      	lsls	r3, r3, #4
 801142e:	b25b      	sxtb	r3, r3
 8011430:	4313      	orrs	r3, r2
 8011432:	b25b      	sxtb	r3, r3
 8011434:	b2db      	uxtb	r3, r3
 8011436:	e001      	b.n	801143c <put_fat+0xa8>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	b2db      	uxtb	r3, r3
 801143c:	69ba      	ldr	r2, [r7, #24]
 801143e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2201      	movs	r2, #1
 8011444:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	0a5b      	lsrs	r3, r3, #9
 8011452:	4413      	add	r3, r2
 8011454:	4619      	mov	r1, r3
 8011456:	68f8      	ldr	r0, [r7, #12]
 8011458:	f7ff fde5 	bl	8011026 <move_window>
 801145c:	4603      	mov	r3, r0
 801145e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011460:	7ffb      	ldrb	r3, [r7, #31]
 8011462:	2b00      	cmp	r3, #0
 8011464:	f040 809a 	bne.w	801159c <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801146e:	68fa      	ldr	r2, [r7, #12]
 8011470:	4413      	add	r3, r2
 8011472:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	f003 0301 	and.w	r3, r3, #1
 801147a:	2b00      	cmp	r3, #0
 801147c:	d003      	beq.n	8011486 <put_fat+0xf2>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	091b      	lsrs	r3, r3, #4
 8011482:	b2db      	uxtb	r3, r3
 8011484:	e00e      	b.n	80114a4 <put_fat+0x110>
 8011486:	69bb      	ldr	r3, [r7, #24]
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	b25b      	sxtb	r3, r3
 801148c:	f023 030f 	bic.w	r3, r3, #15
 8011490:	b25a      	sxtb	r2, r3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	0a1b      	lsrs	r3, r3, #8
 8011496:	b25b      	sxtb	r3, r3
 8011498:	f003 030f 	and.w	r3, r3, #15
 801149c:	b25b      	sxtb	r3, r3
 801149e:	4313      	orrs	r3, r2
 80114a0:	b25b      	sxtb	r3, r3
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	69ba      	ldr	r2, [r7, #24]
 80114a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2201      	movs	r2, #1
 80114ac:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80114b0:	e079      	b.n	80115a6 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	0a1b      	lsrs	r3, r3, #8
 80114bc:	4413      	add	r3, r2
 80114be:	4619      	mov	r1, r3
 80114c0:	68f8      	ldr	r0, [r7, #12]
 80114c2:	f7ff fdb0 	bl	8011026 <move_window>
 80114c6:	4603      	mov	r3, r0
 80114c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80114ca:	7ffb      	ldrb	r3, [r7, #31]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d167      	bne.n	80115a0 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	005b      	lsls	r3, r3, #1
 80114d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80114d8:	68fa      	ldr	r2, [r7, #12]
 80114da:	4413      	add	r3, r2
 80114dc:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	701a      	strb	r2, [r3, #0]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	0a1b      	lsrs	r3, r3, #8
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	3301      	adds	r3, #1
 80114f2:	b2d2      	uxtb	r2, r2
 80114f4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	2201      	movs	r2, #1
 80114fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80114fe:	e052      	b.n	80115a6 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	09db      	lsrs	r3, r3, #7
 801150a:	4413      	add	r3, r2
 801150c:	4619      	mov	r1, r3
 801150e:	68f8      	ldr	r0, [r7, #12]
 8011510:	f7ff fd89 	bl	8011026 <move_window>
 8011514:	4603      	mov	r3, r0
 8011516:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011518:	7ffb      	ldrb	r3, [r7, #31]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d142      	bne.n	80115a4 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011526:	68fa      	ldr	r2, [r7, #12]
 8011528:	4413      	add	r3, r2
 801152a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	3303      	adds	r3, #3
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	061a      	lsls	r2, r3, #24
 8011534:	69bb      	ldr	r3, [r7, #24]
 8011536:	3302      	adds	r3, #2
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	041b      	lsls	r3, r3, #16
 801153c:	4313      	orrs	r3, r2
 801153e:	69ba      	ldr	r2, [r7, #24]
 8011540:	3201      	adds	r2, #1
 8011542:	7812      	ldrb	r2, [r2, #0]
 8011544:	0212      	lsls	r2, r2, #8
 8011546:	4313      	orrs	r3, r2
 8011548:	69ba      	ldr	r2, [r7, #24]
 801154a:	7812      	ldrb	r2, [r2, #0]
 801154c:	4313      	orrs	r3, r2
 801154e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011552:	687a      	ldr	r2, [r7, #4]
 8011554:	4313      	orrs	r3, r2
 8011556:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	b2da      	uxtb	r2, r3
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	701a      	strb	r2, [r3, #0]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	b29b      	uxth	r3, r3
 8011564:	0a1b      	lsrs	r3, r3, #8
 8011566:	b29a      	uxth	r2, r3
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	3301      	adds	r3, #1
 801156c:	b2d2      	uxtb	r2, r2
 801156e:	701a      	strb	r2, [r3, #0]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	0c1a      	lsrs	r2, r3, #16
 8011574:	69bb      	ldr	r3, [r7, #24]
 8011576:	3302      	adds	r3, #2
 8011578:	b2d2      	uxtb	r2, r2
 801157a:	701a      	strb	r2, [r3, #0]
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	0e1a      	lsrs	r2, r3, #24
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	3303      	adds	r3, #3
 8011584:	b2d2      	uxtb	r2, r2
 8011586:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2201      	movs	r2, #1
 801158c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8011590:	e009      	b.n	80115a6 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8011592:	2302      	movs	r3, #2
 8011594:	77fb      	strb	r3, [r7, #31]
 8011596:	e006      	b.n	80115a6 <put_fat+0x212>
			if (res != FR_OK) break;
 8011598:	bf00      	nop
 801159a:	e004      	b.n	80115a6 <put_fat+0x212>
			if (res != FR_OK) break;
 801159c:	bf00      	nop
 801159e:	e002      	b.n	80115a6 <put_fat+0x212>
			if (res != FR_OK) break;
 80115a0:	bf00      	nop
 80115a2:	e000      	b.n	80115a6 <put_fat+0x212>
			if (res != FR_OK) break;
 80115a4:	bf00      	nop
		}
	}

	return res;
 80115a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3720      	adds	r7, #32
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	2b01      	cmp	r3, #1
 80115be:	d905      	bls.n	80115cc <remove_chain+0x1c>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80115c6:	683a      	ldr	r2, [r7, #0]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d302      	bcc.n	80115d2 <remove_chain+0x22>
		res = FR_INT_ERR;
 80115cc:	2302      	movs	r3, #2
 80115ce:	73fb      	strb	r3, [r7, #15]
 80115d0:	e043      	b.n	801165a <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80115d2:	2300      	movs	r3, #0
 80115d4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80115d6:	e036      	b.n	8011646 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80115d8:	6839      	ldr	r1, [r7, #0]
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f7ff fe20 	bl	8011220 <get_fat>
 80115e0:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d035      	beq.n	8011654 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d102      	bne.n	80115f4 <remove_chain+0x44>
 80115ee:	2302      	movs	r3, #2
 80115f0:	73fb      	strb	r3, [r7, #15]
 80115f2:	e032      	b.n	801165a <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115fa:	d102      	bne.n	8011602 <remove_chain+0x52>
 80115fc:	2301      	movs	r3, #1
 80115fe:	73fb      	strb	r3, [r7, #15]
 8011600:	e02b      	b.n	801165a <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8011602:	2200      	movs	r2, #0
 8011604:	6839      	ldr	r1, [r7, #0]
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7ff fec4 	bl	8011394 <put_fat>
 801160c:	4603      	mov	r3, r0
 801160e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8011610:	7bfb      	ldrb	r3, [r7, #15]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d120      	bne.n	8011658 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801161c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011620:	d00f      	beq.n	8011642 <remove_chain+0x92>
				fs->free_clust++;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011628:	1c5a      	adds	r2, r3, #1
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8011636:	f043 0301 	orr.w	r3, r3, #1
 801163a:	b2da      	uxtb	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801164c:	683a      	ldr	r2, [r7, #0]
 801164e:	429a      	cmp	r2, r3
 8011650:	d3c2      	bcc.n	80115d8 <remove_chain+0x28>
 8011652:	e002      	b.n	801165a <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8011654:	bf00      	nop
 8011656:	e000      	b.n	801165a <remove_chain+0xaa>
			if (res != FR_OK) break;
 8011658:	bf00      	nop
		}
	}

	return res;
 801165a:	7bfb      	ldrb	r3, [r7, #15]
}
 801165c:	4618      	mov	r0, r3
 801165e:	3710      	adds	r7, #16
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b086      	sub	sp, #24
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d10f      	bne.n	8011694 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801167a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d005      	beq.n	801168e <create_chain+0x2a>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011688:	693a      	ldr	r2, [r7, #16]
 801168a:	429a      	cmp	r2, r3
 801168c:	d31c      	bcc.n	80116c8 <create_chain+0x64>
 801168e:	2301      	movs	r3, #1
 8011690:	613b      	str	r3, [r7, #16]
 8011692:	e019      	b.n	80116c8 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8011694:	6839      	ldr	r1, [r7, #0]
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7ff fdc2 	bl	8011220 <get_fat>
 801169c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	2b01      	cmp	r3, #1
 80116a2:	d801      	bhi.n	80116a8 <create_chain+0x44>
 80116a4:	2301      	movs	r3, #1
 80116a6:	e076      	b.n	8011796 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116ae:	d101      	bne.n	80116b4 <create_chain+0x50>
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	e070      	b.n	8011796 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80116ba:	68ba      	ldr	r2, [r7, #8]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d201      	bcs.n	80116c4 <create_chain+0x60>
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	e068      	b.n	8011796 <create_chain+0x132>
		scl = clst;
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	3301      	adds	r3, #1
 80116d0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80116d8:	697a      	ldr	r2, [r7, #20]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d307      	bcc.n	80116ee <create_chain+0x8a>
			ncl = 2;
 80116de:	2302      	movs	r3, #2
 80116e0:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d901      	bls.n	80116ee <create_chain+0x8a>
 80116ea:	2300      	movs	r3, #0
 80116ec:	e053      	b.n	8011796 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80116ee:	6979      	ldr	r1, [r7, #20]
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f7ff fd95 	bl	8011220 <get_fat>
 80116f6:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d00e      	beq.n	801171c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011704:	d002      	beq.n	801170c <create_chain+0xa8>
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	2b01      	cmp	r3, #1
 801170a:	d101      	bne.n	8011710 <create_chain+0xac>
			return cs;
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	e042      	b.n	8011796 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8011710:	697a      	ldr	r2, [r7, #20]
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	429a      	cmp	r2, r3
 8011716:	d1d9      	bne.n	80116cc <create_chain+0x68>
 8011718:	2300      	movs	r3, #0
 801171a:	e03c      	b.n	8011796 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 801171c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 801171e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8011722:	6979      	ldr	r1, [r7, #20]
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f7ff fe35 	bl	8011394 <put_fat>
 801172a:	4603      	mov	r3, r0
 801172c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 801172e:	7bfb      	ldrb	r3, [r7, #15]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d109      	bne.n	8011748 <create_chain+0xe4>
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d006      	beq.n	8011748 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 801173a:	697a      	ldr	r2, [r7, #20]
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f7ff fe28 	bl	8011394 <put_fat>
 8011744:	4603      	mov	r3, r0
 8011746:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8011748:	7bfb      	ldrb	r3, [r7, #15]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d11a      	bne.n	8011784 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	697a      	ldr	r2, [r7, #20]
 8011752:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801175c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011760:	d018      	beq.n	8011794 <create_chain+0x130>
			fs->free_clust--;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011768:	1e5a      	subs	r2, r3, #1
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8011776:	f043 0301 	orr.w	r3, r3, #1
 801177a:	b2da      	uxtb	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8011782:	e007      	b.n	8011794 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8011784:	7bfb      	ldrb	r3, [r7, #15]
 8011786:	2b01      	cmp	r3, #1
 8011788:	d102      	bne.n	8011790 <create_chain+0x12c>
 801178a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801178e:	e000      	b.n	8011792 <create_chain+0x12e>
 8011790:	2301      	movs	r3, #1
 8011792:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8011794:	697b      	ldr	r3, [r7, #20]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 801179e:	b480      	push	{r7}
 80117a0:	b087      	sub	sp, #28
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
 80117a6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80117ae:	3304      	adds	r3, #4
 80117b0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	0a5b      	lsrs	r3, r3, #9
 80117b6:	687a      	ldr	r2, [r7, #4]
 80117b8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80117bc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80117c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80117c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	1d1a      	adds	r2, r3, #4
 80117ca:	613a      	str	r2, [r7, #16]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d101      	bne.n	80117da <clmt_clust+0x3c>
 80117d6:	2300      	movs	r3, #0
 80117d8:	e010      	b.n	80117fc <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80117da:	697a      	ldr	r2, [r7, #20]
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d307      	bcc.n	80117f2 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80117e2:	697a      	ldr	r2, [r7, #20]
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	1ad3      	subs	r3, r2, r3
 80117e8:	617b      	str	r3, [r7, #20]
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	3304      	adds	r3, #4
 80117ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80117f0:	e7e9      	b.n	80117c6 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80117f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	4413      	add	r3, r2
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	371c      	adds	r7, #28
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr

08011808 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b086      	sub	sp, #24
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	b29a      	uxth	r2, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011822:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	2b01      	cmp	r3, #1
 8011828:	d007      	beq.n	801183a <dir_sdi+0x32>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011830:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011834:	697a      	ldr	r2, [r7, #20]
 8011836:	429a      	cmp	r2, r3
 8011838:	d301      	bcc.n	801183e <dir_sdi+0x36>
		return FR_INT_ERR;
 801183a:	2302      	movs	r3, #2
 801183c:	e074      	b.n	8011928 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d10c      	bne.n	801185e <dir_sdi+0x56>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801184a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801184e:	2b03      	cmp	r3, #3
 8011850:	d105      	bne.n	801185e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011858:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801185c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d111      	bne.n	8011888 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801186a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801186e:	461a      	mov	r2, r3
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	4293      	cmp	r3, r2
 8011874:	d301      	bcc.n	801187a <dir_sdi+0x72>
			return FR_INT_ERR;
 8011876:	2302      	movs	r3, #2
 8011878:	e056      	b.n	8011928 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011880:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8011884:	613b      	str	r3, [r7, #16]
 8011886:	e032      	b.n	80118ee <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801188e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011892:	011b      	lsls	r3, r3, #4
 8011894:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8011896:	e01e      	b.n	80118d6 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801189e:	6979      	ldr	r1, [r7, #20]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7ff fcbd 	bl	8011220 <get_fat>
 80118a6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118ae:	d101      	bne.n	80118b4 <dir_sdi+0xac>
 80118b0:	2301      	movs	r3, #1
 80118b2:	e039      	b.n	8011928 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	2b01      	cmp	r3, #1
 80118b8:	d907      	bls.n	80118ca <dir_sdi+0xc2>
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80118c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d301      	bcc.n	80118ce <dir_sdi+0xc6>
				return FR_INT_ERR;
 80118ca:	2302      	movs	r3, #2
 80118cc:	e02c      	b.n	8011928 <dir_sdi+0x120>
			idx -= ic;
 80118ce:	683a      	ldr	r2, [r7, #0]
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	1ad3      	subs	r3, r2, r3
 80118d4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80118d6:	683a      	ldr	r2, [r7, #0]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d2dc      	bcs.n	8011898 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80118e4:	6979      	ldr	r1, [r7, #20]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7ff fc78 	bl	80111dc <clust2sect>
 80118ec:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	697a      	ldr	r2, [r7, #20]
 80118f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d101      	bne.n	8011900 <dir_sdi+0xf8>
 80118fc:	2302      	movs	r3, #2
 80118fe:	e013      	b.n	8011928 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	091a      	lsrs	r2, r3, #4
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	441a      	add	r2, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011914:	461a      	mov	r2, r3
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	f003 030f 	and.w	r3, r3, #15
 801191c:	015b      	lsls	r3, r3, #5
 801191e:	441a      	add	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3718      	adds	r7, #24
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011930:	b590      	push	{r4, r7, lr}
 8011932:	b087      	sub	sp, #28
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8011940:	3301      	adds	r3, #1
 8011942:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	b29b      	uxth	r3, r3
 8011948:	2b00      	cmp	r3, #0
 801194a:	d004      	beq.n	8011956 <dir_next+0x26>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011952:	2b00      	cmp	r3, #0
 8011954:	d101      	bne.n	801195a <dir_next+0x2a>
		return FR_NO_FILE;
 8011956:	2304      	movs	r3, #4
 8011958:	e0dd      	b.n	8011b16 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f003 030f 	and.w	r3, r3, #15
 8011960:	2b00      	cmp	r3, #0
 8011962:	f040 80c6 	bne.w	8011af2 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801196c:	1c5a      	adds	r2, r3, #1
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801197a:	2b00      	cmp	r3, #0
 801197c:	d10b      	bne.n	8011996 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011984:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011988:	461a      	mov	r2, r3
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	4293      	cmp	r3, r2
 801198e:	f0c0 80b0 	bcc.w	8011af2 <dir_next+0x1c2>
				return FR_NO_FILE;
 8011992:	2304      	movs	r3, #4
 8011994:	e0bf      	b.n	8011b16 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	091b      	lsrs	r3, r3, #4
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80119a0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80119a4:	3a01      	subs	r2, #1
 80119a6:	4013      	ands	r3, r2
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f040 80a2 	bne.w	8011af2 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80119ba:	4619      	mov	r1, r3
 80119bc:	4610      	mov	r0, r2
 80119be:	f7ff fc2f 	bl	8011220 <get_fat>
 80119c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d801      	bhi.n	80119ce <dir_next+0x9e>
 80119ca:	2302      	movs	r3, #2
 80119cc:	e0a3      	b.n	8011b16 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119d4:	d101      	bne.n	80119da <dir_next+0xaa>
 80119d6:	2301      	movs	r3, #1
 80119d8:	e09d      	b.n	8011b16 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80119e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80119e4:	697a      	ldr	r2, [r7, #20]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d374      	bcc.n	8011ad4 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d101      	bne.n	80119f4 <dir_next+0xc4>
 80119f0:	2304      	movs	r3, #4
 80119f2:	e090      	b.n	8011b16 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011a00:	4619      	mov	r1, r3
 8011a02:	4610      	mov	r0, r2
 8011a04:	f7ff fe2e 	bl	8011664 <create_chain>
 8011a08:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d101      	bne.n	8011a14 <dir_next+0xe4>
 8011a10:	2307      	movs	r3, #7
 8011a12:	e080      	b.n	8011b16 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d101      	bne.n	8011a1e <dir_next+0xee>
 8011a1a:	2302      	movs	r3, #2
 8011a1c:	e07b      	b.n	8011b16 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a24:	d101      	bne.n	8011a2a <dir_next+0xfa>
 8011a26:	2301      	movs	r3, #1
 8011a28:	e075      	b.n	8011b16 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff faaf 	bl	8010f94 <sync_window>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d001      	beq.n	8011a40 <dir_next+0x110>
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	e06a      	b.n	8011b16 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7ff f85e 	bl	8010b0e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8011a5e:	6979      	ldr	r1, [r7, #20]
 8011a60:	4610      	mov	r0, r2
 8011a62:	f7ff fbbb 	bl	80111dc <clust2sect>
 8011a66:	4603      	mov	r3, r0
 8011a68:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	613b      	str	r3, [r7, #16]
 8011a70:	e01b      	b.n	8011aaa <dir_next+0x17a>
						dp->fs->wflag = 1;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a78:	2201      	movs	r2, #1
 8011a7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7ff fa85 	bl	8010f94 <sync_window>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d001      	beq.n	8011a94 <dir_next+0x164>
 8011a90:	2301      	movs	r3, #1
 8011a92:	e040      	b.n	8011b16 <dir_next+0x1e6>
						dp->fs->winsect++;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a9a:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8011a9e:	3201      	adds	r2, #1
 8011aa0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	613b      	str	r3, [r7, #16]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011ab0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d3da      	bcc.n	8011a72 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011ac2:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011acc:	693a      	ldr	r2, [r7, #16]
 8011ace:	1a8a      	subs	r2, r1, r2
 8011ad0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	697a      	ldr	r2, [r7, #20]
 8011ad8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011ae2:	6979      	ldr	r1, [r7, #20]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7ff fb79 	bl	80111dc <clust2sect>
 8011aea:	4602      	mov	r2, r0
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b02:	461a      	mov	r2, r3
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f003 030f 	and.w	r3, r3, #15
 8011b0a:	015b      	lsls	r3, r3, #5
 8011b0c:	441a      	add	r2, r3
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8011b14:	2300      	movs	r3, #0
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	371c      	adds	r7, #28
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd90      	pop	{r4, r7, pc}

08011b1e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b084      	sub	sp, #16
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
 8011b26:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8011b28:	2100      	movs	r1, #0
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7ff fe6c 	bl	8011808 <dir_sdi>
 8011b30:	4603      	mov	r3, r0
 8011b32:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011b34:	7bfb      	ldrb	r3, [r7, #15]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d131      	bne.n	8011b9e <dir_alloc+0x80>
		n = 0;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	4610      	mov	r0, r2
 8011b4e:	f7ff fa6a 	bl	8011026 <move_window>
 8011b52:	4603      	mov	r3, r0
 8011b54:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8011b56:	7bfb      	ldrb	r3, [r7, #15]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d11f      	bne.n	8011b9c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	2be5      	cmp	r3, #229	; 0xe5
 8011b66:	d005      	beq.n	8011b74 <dir_alloc+0x56>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d107      	bne.n	8011b84 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	3301      	adds	r3, #1
 8011b78:	60bb      	str	r3, [r7, #8]
 8011b7a:	68ba      	ldr	r2, [r7, #8]
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d102      	bne.n	8011b88 <dir_alloc+0x6a>
 8011b82:	e00c      	b.n	8011b9e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011b84:	2300      	movs	r3, #0
 8011b86:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8011b88:	2101      	movs	r1, #1
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f7ff fed0 	bl	8011930 <dir_next>
 8011b90:	4603      	mov	r3, r0
 8011b92:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8011b94:	7bfb      	ldrb	r3, [r7, #15]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d0d1      	beq.n	8011b3e <dir_alloc+0x20>
 8011b9a:	e000      	b.n	8011b9e <dir_alloc+0x80>
			if (res != FR_OK) break;
 8011b9c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011b9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ba0:	2b04      	cmp	r3, #4
 8011ba2:	d101      	bne.n	8011ba8 <dir_alloc+0x8a>
 8011ba4:	2307      	movs	r3, #7
 8011ba6:	73fb      	strb	r3, [r7, #15]
	return res;
 8011ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3710      	adds	r7, #16
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}

08011bb2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8011bb2:	b480      	push	{r7}
 8011bb4:	b085      	sub	sp, #20
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	6078      	str	r0, [r7, #4]
 8011bba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	331b      	adds	r3, #27
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	021b      	lsls	r3, r3, #8
 8011bc4:	b21a      	sxth	r2, r3
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	331a      	adds	r3, #26
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	b21b      	sxth	r3, r3
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	b21b      	sxth	r3, r3
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011bdc:	2b03      	cmp	r3, #3
 8011bde:	d10f      	bne.n	8011c00 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	3315      	adds	r3, #21
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	021b      	lsls	r3, r3, #8
 8011be8:	b21a      	sxth	r2, r3
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	3314      	adds	r3, #20
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	b21b      	sxth	r3, r3
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	b21b      	sxth	r3, r3
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	041b      	lsls	r3, r3, #16
 8011bfa:	68fa      	ldr	r2, [r7, #12]
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	60fb      	str	r3, [r7, #12]

	return cl;
 8011c00:	68fb      	ldr	r3, [r7, #12]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3714      	adds	r7, #20
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr

08011c0e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8011c0e:	b480      	push	{r7}
 8011c10:	b083      	sub	sp, #12
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	6078      	str	r0, [r7, #4]
 8011c16:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	331a      	adds	r3, #26
 8011c1c:	683a      	ldr	r2, [r7, #0]
 8011c1e:	b2d2      	uxtb	r2, r2
 8011c20:	701a      	strb	r2, [r3, #0]
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	0a1b      	lsrs	r3, r3, #8
 8011c28:	b29a      	uxth	r2, r3
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	331b      	adds	r3, #27
 8011c2e:	b2d2      	uxtb	r2, r2
 8011c30:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	0c1a      	lsrs	r2, r3, #16
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	3314      	adds	r3, #20
 8011c3a:	b2d2      	uxtb	r2, r2
 8011c3c:	701a      	strb	r2, [r3, #0]
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	0c1b      	lsrs	r3, r3, #16
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	0a1b      	lsrs	r3, r3, #8
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	3315      	adds	r3, #21
 8011c4c:	b2d2      	uxtb	r2, r2
 8011c4e:	701a      	strb	r2, [r3, #0]
}
 8011c50:	bf00      	nop
 8011c52:	370c      	adds	r7, #12
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr

08011c5c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b086      	sub	sp, #24
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011c64:	2100      	movs	r1, #0
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7ff fdce 	bl	8011808 <dir_sdi>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011c70:	7dfb      	ldrb	r3, [r7, #23]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d001      	beq.n	8011c7a <dir_find+0x1e>
 8011c76:	7dfb      	ldrb	r3, [r7, #23]
 8011c78:	e03b      	b.n	8011cf2 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011c86:	4619      	mov	r1, r3
 8011c88:	4610      	mov	r0, r2
 8011c8a:	f7ff f9cc 	bl	8011026 <move_window>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011c92:	7dfb      	ldrb	r3, [r7, #23]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d128      	bne.n	8011cea <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011c9e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011ca6:	7bfb      	ldrb	r3, [r7, #15]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d102      	bne.n	8011cb2 <dir_find+0x56>
 8011cac:	2304      	movs	r3, #4
 8011cae:	75fb      	strb	r3, [r7, #23]
 8011cb0:	e01e      	b.n	8011cf0 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	330b      	adds	r3, #11
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	f003 0308 	and.w	r3, r3, #8
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d10a      	bne.n	8011cd6 <dir_find+0x7a>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011cc6:	220b      	movs	r2, #11
 8011cc8:	4619      	mov	r1, r3
 8011cca:	6938      	ldr	r0, [r7, #16]
 8011ccc:	f7fe ff3a 	bl	8010b44 <mem_cmp>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00b      	beq.n	8011cee <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff fe29 	bl	8011930 <dir_next>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011ce2:	7dfb      	ldrb	r3, [r7, #23]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d0c8      	beq.n	8011c7a <dir_find+0x1e>
 8011ce8:	e002      	b.n	8011cf0 <dir_find+0x94>
		if (res != FR_OK) break;
 8011cea:	bf00      	nop
 8011cec:	e000      	b.n	8011cf0 <dir_find+0x94>
			break;
 8011cee:	bf00      	nop

	return res;
 8011cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3718      	adds	r7, #24
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011cfa:	b580      	push	{r7, lr}
 8011cfc:	b086      	sub	sp, #24
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	6078      	str	r0, [r7, #4]
 8011d02:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8011d04:	2304      	movs	r3, #4
 8011d06:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8011d08:	e03f      	b.n	8011d8a <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011d16:	4619      	mov	r1, r3
 8011d18:	4610      	mov	r0, r2
 8011d1a:	f7ff f984 	bl	8011026 <move_window>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d22:	7dfb      	ldrb	r3, [r7, #23]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d136      	bne.n	8011d96 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011d2e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011d36:	7bfb      	ldrb	r3, [r7, #15]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d102      	bne.n	8011d42 <dir_read+0x48>
 8011d3c:	2304      	movs	r3, #4
 8011d3e:	75fb      	strb	r3, [r7, #23]
 8011d40:	e02e      	b.n	8011da0 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	330b      	adds	r3, #11
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011d4c:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8011d4e:	7bfb      	ldrb	r3, [r7, #15]
 8011d50:	2be5      	cmp	r3, #229	; 0xe5
 8011d52:	d011      	beq.n	8011d78 <dir_read+0x7e>
 8011d54:	7bfb      	ldrb	r3, [r7, #15]
 8011d56:	2b2e      	cmp	r3, #46	; 0x2e
 8011d58:	d00e      	beq.n	8011d78 <dir_read+0x7e>
 8011d5a:	7bbb      	ldrb	r3, [r7, #14]
 8011d5c:	2b0f      	cmp	r3, #15
 8011d5e:	d00b      	beq.n	8011d78 <dir_read+0x7e>
 8011d60:	7bbb      	ldrb	r3, [r7, #14]
 8011d62:	f023 0320 	bic.w	r3, r3, #32
 8011d66:	2b08      	cmp	r3, #8
 8011d68:	bf0c      	ite	eq
 8011d6a:	2301      	moveq	r3, #1
 8011d6c:	2300      	movne	r3, #0
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	461a      	mov	r2, r3
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	4293      	cmp	r3, r2
 8011d76:	d010      	beq.n	8011d9a <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8011d78:	2100      	movs	r1, #0
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f7ff fdd8 	bl	8011930 <dir_next>
 8011d80:	4603      	mov	r3, r0
 8011d82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d84:	7dfb      	ldrb	r3, [r7, #23]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d109      	bne.n	8011d9e <dir_read+0xa4>
	while (dp->sect) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d1ba      	bne.n	8011d0a <dir_read+0x10>
 8011d94:	e004      	b.n	8011da0 <dir_read+0xa6>
		if (res != FR_OK) break;
 8011d96:	bf00      	nop
 8011d98:	e002      	b.n	8011da0 <dir_read+0xa6>
			break;
 8011d9a:	bf00      	nop
 8011d9c:	e000      	b.n	8011da0 <dir_read+0xa6>
		if (res != FR_OK) break;
 8011d9e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8011da0:	7dfb      	ldrb	r3, [r7, #23]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d003      	beq.n	8011dae <dir_read+0xb4>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2200      	movs	r2, #0
 8011daa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 8011dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3718      	adds	r7, #24
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011dc0:	2101      	movs	r1, #1
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7ff feab 	bl	8011b1e <dir_alloc>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8011dcc:	7bfb      	ldrb	r3, [r7, #15]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d126      	bne.n	8011e20 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011dde:	4619      	mov	r1, r3
 8011de0:	4610      	mov	r0, r2
 8011de2:	f7ff f920 	bl	8011026 <move_window>
 8011de6:	4603      	mov	r3, r0
 8011de8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011dea:	7bfb      	ldrb	r3, [r7, #15]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d117      	bne.n	8011e20 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011df6:	2220      	movs	r2, #32
 8011df8:	2100      	movs	r1, #0
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7fe fe87 	bl	8010b0e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011e0c:	220b      	movs	r2, #11
 8011e0e:	4619      	mov	r1, r3
 8011e10:	f7fe fe5e 	bl	8010ad0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8011e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3710      	adds	r7, #16
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011e2a:	b580      	push	{r7, lr}
 8011e2c:	b084      	sub	sp, #16
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8011e38:	4619      	mov	r1, r3
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f7ff fce4 	bl	8011808 <dir_sdi>
 8011e40:	4603      	mov	r3, r0
 8011e42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011e44:	7bfb      	ldrb	r3, [r7, #15]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d121      	bne.n	8011e8e <dir_remove+0x64>
		res = move_window(dp->fs, dp->sect);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011e56:	4619      	mov	r1, r3
 8011e58:	4610      	mov	r0, r2
 8011e5a:	f7ff f8e4 	bl	8011026 <move_window>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011e62:	7bfb      	ldrb	r3, [r7, #15]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d112      	bne.n	8011e8e <dir_remove+0x64>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011e6e:	2220      	movs	r2, #32
 8011e70:	2100      	movs	r1, #0
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7fe fe4b 	bl	8010b0e <mem_set>
			*dp->dir = DDEM;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011e7e:	22e5      	movs	r2, #229	; 0xe5
 8011e80:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e88:	2201      	movs	r2, #1
 8011e8a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}
#endif

	return res;
 8011e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	3710      	adds	r7, #16
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}

08011e98 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b087      	sub	sp, #28
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	3309      	adds	r3, #9
 8011ea6:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d05a      	beq.n	8011f68 <get_fileinfo+0xd0>
		dir = dp->dir;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011eb8:	60bb      	str	r3, [r7, #8]
		i = 0;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8011ebe:	e01c      	b.n	8011efa <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	1c5a      	adds	r2, r3, #1
 8011ec4:	617a      	str	r2, [r7, #20]
 8011ec6:	68ba      	ldr	r2, [r7, #8]
 8011ec8:	4413      	add	r3, r2
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8011ece:	7bfb      	ldrb	r3, [r7, #15]
 8011ed0:	2b20      	cmp	r3, #32
 8011ed2:	d100      	bne.n	8011ed6 <get_fileinfo+0x3e>
 8011ed4:	e011      	b.n	8011efa <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011ed6:	7bfb      	ldrb	r3, [r7, #15]
 8011ed8:	2b05      	cmp	r3, #5
 8011eda:	d101      	bne.n	8011ee0 <get_fileinfo+0x48>
 8011edc:	23e5      	movs	r3, #229	; 0xe5
 8011ede:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	2b09      	cmp	r3, #9
 8011ee4:	d104      	bne.n	8011ef0 <get_fileinfo+0x58>
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	1c5a      	adds	r2, r3, #1
 8011eea:	613a      	str	r2, [r7, #16]
 8011eec:	222e      	movs	r2, #46	; 0x2e
 8011eee:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	1c5a      	adds	r2, r3, #1
 8011ef4:	613a      	str	r2, [r7, #16]
 8011ef6:	7bfa      	ldrb	r2, [r7, #15]
 8011ef8:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	2b0a      	cmp	r3, #10
 8011efe:	d9df      	bls.n	8011ec0 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	7ada      	ldrb	r2, [r3, #11]
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	331f      	adds	r3, #31
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	061a      	lsls	r2, r3, #24
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	331e      	adds	r3, #30
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	041b      	lsls	r3, r3, #16
 8011f18:	4313      	orrs	r3, r2
 8011f1a:	68ba      	ldr	r2, [r7, #8]
 8011f1c:	321d      	adds	r2, #29
 8011f1e:	7812      	ldrb	r2, [r2, #0]
 8011f20:	0212      	lsls	r2, r2, #8
 8011f22:	4313      	orrs	r3, r2
 8011f24:	68ba      	ldr	r2, [r7, #8]
 8011f26:	321c      	adds	r2, #28
 8011f28:	7812      	ldrb	r2, [r2, #0]
 8011f2a:	431a      	orrs	r2, r3
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	3319      	adds	r3, #25
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	021b      	lsls	r3, r3, #8
 8011f38:	b21a      	sxth	r2, r3
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	3318      	adds	r3, #24
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	b21b      	sxth	r3, r3
 8011f42:	4313      	orrs	r3, r2
 8011f44:	b21b      	sxth	r3, r3
 8011f46:	b29a      	uxth	r2, r3
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	3317      	adds	r3, #23
 8011f50:	781b      	ldrb	r3, [r3, #0]
 8011f52:	021b      	lsls	r3, r3, #8
 8011f54:	b21a      	sxth	r2, r3
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	3316      	adds	r3, #22
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	b21b      	sxth	r3, r3
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	b21b      	sxth	r3, r3
 8011f62:	b29a      	uxth	r2, r3
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8011f6e:	bf00      	nop
 8011f70:	371c      	adds	r7, #28
 8011f72:	46bd      	mov	sp, r7
 8011f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f78:	4770      	bx	lr
	...

08011f7c <get_achar>:
#if _USE_FIND && _FS_MINIMIZE <= 1
static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b085      	sub	sp, #20
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
	WCHAR chr;

#if !_LFN_UNICODE
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	1c59      	adds	r1, r3, #1
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	6011      	str	r1, [r2, #0]
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011f92:	89fb      	ldrh	r3, [r7, #14]
 8011f94:	2b60      	cmp	r3, #96	; 0x60
 8011f96:	d905      	bls.n	8011fa4 <get_achar+0x28>
 8011f98:	89fb      	ldrh	r3, [r7, #14]
 8011f9a:	2b7a      	cmp	r3, #122	; 0x7a
 8011f9c:	d802      	bhi.n	8011fa4 <get_achar+0x28>
 8011f9e:	89fb      	ldrh	r3, [r7, #14]
 8011fa0:	3b20      	subs	r3, #32
 8011fa2:	81fb      	strh	r3, [r7, #14]
	if (IsDBCS1(chr) && IsDBCS2(**ptr))		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011fa4:	89fb      	ldrh	r3, [r7, #14]
 8011fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8011fa8:	d904      	bls.n	8011fb4 <get_achar+0x38>
 8011faa:	89fb      	ldrh	r3, [r7, #14]
 8011fac:	3b80      	subs	r3, #128	; 0x80
 8011fae:	4a05      	ldr	r2, [pc, #20]	; (8011fc4 <get_achar+0x48>)
 8011fb0:	5cd3      	ldrb	r3, [r2, r3]
 8011fb2:	81fb      	strh	r3, [r7, #14]
#endif
#else
	chr = ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
	return chr;
 8011fb4:	89fb      	ldrh	r3, [r7, #14]
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3714      	adds	r7, #20
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr
 8011fc2:	bf00      	nop
 8011fc4:	0801ba64 	.word	0x0801ba64

08011fc8 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b08a      	sub	sp, #40	; 0x28
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
 8011fd4:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8011fd6:	e009      	b.n	8011fec <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8011fd8:	f107 0308 	add.w	r3, r7, #8
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7ff ffcd 	bl	8011f7c <get_achar>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d101      	bne.n	8011fec <pattern_matching+0x24>
 8011fe8:	2300      	movs	r3, #0
 8011fea:	e064      	b.n	80120b6 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	1e5a      	subs	r2, r3, #1
 8011ff0:	607a      	str	r2, [r7, #4]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d1f0      	bne.n	8011fd8 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d104      	bne.n	8012008 <pattern_matching+0x40>
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d001      	beq.n	8012008 <pattern_matching+0x40>
 8012004:	2301      	movs	r3, #1
 8012006:	e056      	b.n	80120b6 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	617b      	str	r3, [r7, #20]
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	2b3f      	cmp	r3, #63	; 0x3f
 8012016:	d003      	beq.n	8012020 <pattern_matching+0x58>
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	2b2a      	cmp	r3, #42	; 0x2a
 801201e:	d126      	bne.n	801206e <pattern_matching+0xa6>
				nm = nx = 0;
 8012020:	2300      	movs	r3, #0
 8012022:	61fb      	str	r3, [r7, #28]
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	1c5a      	adds	r2, r3, #1
 801202c:	617a      	str	r2, [r7, #20]
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	2b3f      	cmp	r3, #63	; 0x3f
 8012032:	d103      	bne.n	801203c <pattern_matching+0x74>
 8012034:	6a3b      	ldr	r3, [r7, #32]
 8012036:	3301      	adds	r3, #1
 8012038:	623b      	str	r3, [r7, #32]
 801203a:	e001      	b.n	8012040 <pattern_matching+0x78>
 801203c:	2301      	movs	r3, #1
 801203e:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	2b3f      	cmp	r3, #63	; 0x3f
 8012046:	d0ef      	beq.n	8012028 <pattern_matching+0x60>
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	2b2a      	cmp	r3, #42	; 0x2a
 801204e:	d0eb      	beq.n	8012028 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8012050:	6978      	ldr	r0, [r7, #20]
 8012052:	6939      	ldr	r1, [r7, #16]
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	6a3a      	ldr	r2, [r7, #32]
 8012058:	f7ff ffb6 	bl	8011fc8 <pattern_matching>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	d001      	beq.n	8012066 <pattern_matching+0x9e>
 8012062:	2301      	movs	r3, #1
 8012064:	e027      	b.n	80120b6 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801206c:	e017      	b.n	801209e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 801206e:	f107 0314 	add.w	r3, r7, #20
 8012072:	4618      	mov	r0, r3
 8012074:	f7ff ff82 	bl	8011f7c <get_achar>
 8012078:	4603      	mov	r3, r0
 801207a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 801207c:	f107 0310 	add.w	r3, r7, #16
 8012080:	4618      	mov	r0, r3
 8012082:	f7ff ff7b 	bl	8011f7c <get_achar>
 8012086:	4603      	mov	r3, r0
 8012088:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 801208a:	8b7a      	ldrh	r2, [r7, #26]
 801208c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801208e:	429a      	cmp	r2, r3
 8012090:	d104      	bne.n	801209c <pattern_matching+0xd4>
			if (!pc) return 1;		/* Branch matched? (matched at end of both strings) */
 8012092:	8b7b      	ldrh	r3, [r7, #26]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d1bb      	bne.n	8012010 <pattern_matching+0x48>
 8012098:	2301      	movs	r3, #1
 801209a:	e00c      	b.n	80120b6 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 801209c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801209e:	f107 0308 	add.w	r3, r7, #8
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7ff ff6a 	bl	8011f7c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d002      	beq.n	80120b4 <pattern_matching+0xec>
 80120ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d1a9      	bne.n	8012008 <pattern_matching+0x40>

	return 0;
 80120b4:	2300      	movs	r3, #0
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3728      	adds	r7, #40	; 0x28
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
	...

080120c0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b088      	sub	sp, #32
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	60fb      	str	r3, [r7, #12]
 80120d0:	e002      	b.n	80120d8 <create_name+0x18>
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	3301      	adds	r3, #1
 80120d6:	60fb      	str	r3, [r7, #12]
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	2b2f      	cmp	r3, #47	; 0x2f
 80120de:	d0f8      	beq.n	80120d2 <create_name+0x12>
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	781b      	ldrb	r3, [r3, #0]
 80120e4:	2b5c      	cmp	r3, #92	; 0x5c
 80120e6:	d0f4      	beq.n	80120d2 <create_name+0x12>
	sfn = dp->fn;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80120ee:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80120f0:	220b      	movs	r2, #11
 80120f2:	2120      	movs	r1, #32
 80120f4:	68b8      	ldr	r0, [r7, #8]
 80120f6:	f7fe fd0a 	bl	8010b0e <mem_set>
	si = i = b = 0; ni = 8;
 80120fa:	2300      	movs	r3, #0
 80120fc:	77fb      	strb	r3, [r7, #31]
 80120fe:	2300      	movs	r3, #0
 8012100:	613b      	str	r3, [r7, #16]
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	617b      	str	r3, [r7, #20]
 8012106:	2308      	movs	r3, #8
 8012108:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	1c5a      	adds	r2, r3, #1
 801210e:	617a      	str	r2, [r7, #20]
 8012110:	68fa      	ldr	r2, [r7, #12]
 8012112:	4413      	add	r3, r2
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8012118:	7fbb      	ldrb	r3, [r7, #30]
 801211a:	2b20      	cmp	r3, #32
 801211c:	d953      	bls.n	80121c6 <create_name+0x106>
 801211e:	7fbb      	ldrb	r3, [r7, #30]
 8012120:	2b2f      	cmp	r3, #47	; 0x2f
 8012122:	d050      	beq.n	80121c6 <create_name+0x106>
 8012124:	7fbb      	ldrb	r3, [r7, #30]
 8012126:	2b5c      	cmp	r3, #92	; 0x5c
 8012128:	d04d      	beq.n	80121c6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 801212a:	7fbb      	ldrb	r3, [r7, #30]
 801212c:	2b2e      	cmp	r3, #46	; 0x2e
 801212e:	d003      	beq.n	8012138 <create_name+0x78>
 8012130:	693a      	ldr	r2, [r7, #16]
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	429a      	cmp	r2, r3
 8012136:	d30f      	bcc.n	8012158 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	2b08      	cmp	r3, #8
 801213c:	d102      	bne.n	8012144 <create_name+0x84>
 801213e:	7fbb      	ldrb	r3, [r7, #30]
 8012140:	2b2e      	cmp	r3, #46	; 0x2e
 8012142:	d001      	beq.n	8012148 <create_name+0x88>
 8012144:	2306      	movs	r3, #6
 8012146:	e073      	b.n	8012230 <create_name+0x170>
			i = 8; ni = 11;
 8012148:	2308      	movs	r3, #8
 801214a:	613b      	str	r3, [r7, #16]
 801214c:	230b      	movs	r3, #11
 801214e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8012150:	7ffb      	ldrb	r3, [r7, #31]
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	77fb      	strb	r3, [r7, #31]
 8012156:	e035      	b.n	80121c4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012158:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801215c:	2b00      	cmp	r3, #0
 801215e:	da08      	bge.n	8012172 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8012160:	7ffb      	ldrb	r3, [r7, #31]
 8012162:	f043 0303 	orr.w	r3, r3, #3
 8012166:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012168:	7fbb      	ldrb	r3, [r7, #30]
 801216a:	3b80      	subs	r3, #128	; 0x80
 801216c:	4a32      	ldr	r2, [pc, #200]	; (8012238 <create_name+0x178>)
 801216e:	5cd3      	ldrb	r3, [r2, r3]
 8012170:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8012172:	7fbb      	ldrb	r3, [r7, #30]
 8012174:	4619      	mov	r1, r3
 8012176:	4831      	ldr	r0, [pc, #196]	; (801223c <create_name+0x17c>)
 8012178:	f7fe fd0b 	bl	8010b92 <chk_chr>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	d001      	beq.n	8012186 <create_name+0xc6>
				return FR_INVALID_NAME;
 8012182:	2306      	movs	r3, #6
 8012184:	e054      	b.n	8012230 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8012186:	7fbb      	ldrb	r3, [r7, #30]
 8012188:	2b40      	cmp	r3, #64	; 0x40
 801218a:	d907      	bls.n	801219c <create_name+0xdc>
 801218c:	7fbb      	ldrb	r3, [r7, #30]
 801218e:	2b5a      	cmp	r3, #90	; 0x5a
 8012190:	d804      	bhi.n	801219c <create_name+0xdc>
				b |= 2;
 8012192:	7ffb      	ldrb	r3, [r7, #31]
 8012194:	f043 0302 	orr.w	r3, r3, #2
 8012198:	77fb      	strb	r3, [r7, #31]
 801219a:	e00c      	b.n	80121b6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 801219c:	7fbb      	ldrb	r3, [r7, #30]
 801219e:	2b60      	cmp	r3, #96	; 0x60
 80121a0:	d909      	bls.n	80121b6 <create_name+0xf6>
 80121a2:	7fbb      	ldrb	r3, [r7, #30]
 80121a4:	2b7a      	cmp	r3, #122	; 0x7a
 80121a6:	d806      	bhi.n	80121b6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80121a8:	7ffb      	ldrb	r3, [r7, #31]
 80121aa:	f043 0301 	orr.w	r3, r3, #1
 80121ae:	77fb      	strb	r3, [r7, #31]
 80121b0:	7fbb      	ldrb	r3, [r7, #30]
 80121b2:	3b20      	subs	r3, #32
 80121b4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	1c5a      	adds	r2, r3, #1
 80121ba:	613a      	str	r2, [r7, #16]
 80121bc:	68ba      	ldr	r2, [r7, #8]
 80121be:	4413      	add	r3, r2
 80121c0:	7fba      	ldrb	r2, [r7, #30]
 80121c2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80121c4:	e7a1      	b.n	801210a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	441a      	add	r2, r3
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80121d0:	7fbb      	ldrb	r3, [r7, #30]
 80121d2:	2b20      	cmp	r3, #32
 80121d4:	d801      	bhi.n	80121da <create_name+0x11a>
 80121d6:	2304      	movs	r3, #4
 80121d8:	e000      	b.n	80121dc <create_name+0x11c>
 80121da:	2300      	movs	r3, #0
 80121dc:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d101      	bne.n	80121e8 <create_name+0x128>
 80121e4:	2306      	movs	r3, #6
 80121e6:	e023      	b.n	8012230 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	2be5      	cmp	r3, #229	; 0xe5
 80121ee:	d102      	bne.n	80121f6 <create_name+0x136>
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2205      	movs	r2, #5
 80121f4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	2b08      	cmp	r3, #8
 80121fa:	d102      	bne.n	8012202 <create_name+0x142>
 80121fc:	7ffb      	ldrb	r3, [r7, #31]
 80121fe:	009b      	lsls	r3, r3, #2
 8012200:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8012202:	7ffb      	ldrb	r3, [r7, #31]
 8012204:	f003 0303 	and.w	r3, r3, #3
 8012208:	2b01      	cmp	r3, #1
 801220a:	d103      	bne.n	8012214 <create_name+0x154>
 801220c:	7fbb      	ldrb	r3, [r7, #30]
 801220e:	f043 0310 	orr.w	r3, r3, #16
 8012212:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8012214:	7ffb      	ldrb	r3, [r7, #31]
 8012216:	f003 030c 	and.w	r3, r3, #12
 801221a:	2b04      	cmp	r3, #4
 801221c:	d103      	bne.n	8012226 <create_name+0x166>
 801221e:	7fbb      	ldrb	r3, [r7, #30]
 8012220:	f043 0308 	orr.w	r3, r3, #8
 8012224:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	330b      	adds	r3, #11
 801222a:	7fba      	ldrb	r2, [r7, #30]
 801222c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801222e:	2300      	movs	r3, #0
#endif
}
 8012230:	4618      	mov	r0, r3
 8012232:	3720      	adds	r7, #32
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}
 8012238:	0801ba64 	.word	0x0801ba64
 801223c:	0801bae4 	.word	0x0801bae4

08012240 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	2b2f      	cmp	r3, #47	; 0x2f
 8012250:	d003      	beq.n	801225a <follow_path+0x1a>
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	2b5c      	cmp	r3, #92	; 0x5c
 8012258:	d102      	bne.n	8012260 <follow_path+0x20>
		path++;
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	3301      	adds	r3, #1
 801225e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	2b1f      	cmp	r3, #31
 801226e:	d80a      	bhi.n	8012286 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8012270:	2100      	movs	r1, #0
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f7ff fac8 	bl	8011808 <dir_sdi>
 8012278:	4603      	mov	r3, r0
 801227a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2200      	movs	r2, #0
 8012280:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8012284:	e045      	b.n	8012312 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012286:	463b      	mov	r3, r7
 8012288:	4619      	mov	r1, r3
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7ff ff18 	bl	80120c0 <create_name>
 8012290:	4603      	mov	r3, r0
 8012292:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8012294:	7bfb      	ldrb	r3, [r7, #15]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d136      	bne.n	8012308 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f7ff fcde 	bl	8011c5c <dir_find>
 80122a0:	4603      	mov	r3, r0
 80122a2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80122aa:	7adb      	ldrb	r3, [r3, #11]
 80122ac:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80122ae:	7bfb      	ldrb	r3, [r7, #15]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00a      	beq.n	80122ca <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80122b4:	7bfb      	ldrb	r3, [r7, #15]
 80122b6:	2b04      	cmp	r3, #4
 80122b8:	d128      	bne.n	801230c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80122ba:	7bbb      	ldrb	r3, [r7, #14]
 80122bc:	f003 0304 	and.w	r3, r3, #4
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d123      	bne.n	801230c <follow_path+0xcc>
 80122c4:	2305      	movs	r3, #5
 80122c6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80122c8:	e020      	b.n	801230c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80122ca:	7bbb      	ldrb	r3, [r7, #14]
 80122cc:	f003 0304 	and.w	r3, r3, #4
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d11d      	bne.n	8012310 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80122da:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	330b      	adds	r3, #11
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	f003 0310 	and.w	r3, r3, #16
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d102      	bne.n	80122f0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80122ea:	2305      	movs	r3, #5
 80122ec:	73fb      	strb	r3, [r7, #15]
 80122ee:	e010      	b.n	8012312 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122f6:	68b9      	ldr	r1, [r7, #8]
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7ff fc5a 	bl	8011bb2 <ld_clust>
 80122fe:	4602      	mov	r2, r0
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012306:	e7be      	b.n	8012286 <follow_path+0x46>
			if (res != FR_OK) break;
 8012308:	bf00      	nop
 801230a:	e002      	b.n	8012312 <follow_path+0xd2>
				break;
 801230c:	bf00      	nop
 801230e:	e000      	b.n	8012312 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012310:	bf00      	nop
		}
	}

	return res;
 8012312:	7bfb      	ldrb	r3, [r7, #15]
}
 8012314:	4618      	mov	r0, r3
 8012316:	3710      	adds	r7, #16
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801231c:	b480      	push	{r7}
 801231e:	b087      	sub	sp, #28
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012328:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d031      	beq.n	8012396 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	617b      	str	r3, [r7, #20]
 8012338:	e002      	b.n	8012340 <get_ldnumber+0x24>
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	3301      	adds	r3, #1
 801233e:	617b      	str	r3, [r7, #20]
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	2b20      	cmp	r3, #32
 8012346:	d903      	bls.n	8012350 <get_ldnumber+0x34>
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	2b3a      	cmp	r3, #58	; 0x3a
 801234e:	d1f4      	bne.n	801233a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	2b3a      	cmp	r3, #58	; 0x3a
 8012356:	d11c      	bne.n	8012392 <get_ldnumber+0x76>
			tp = *path;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	1c5a      	adds	r2, r3, #1
 8012362:	60fa      	str	r2, [r7, #12]
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	3b30      	subs	r3, #48	; 0x30
 8012368:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	2b09      	cmp	r3, #9
 801236e:	d80e      	bhi.n	801238e <get_ldnumber+0x72>
 8012370:	68fa      	ldr	r2, [r7, #12]
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	429a      	cmp	r2, r3
 8012376:	d10a      	bne.n	801238e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d107      	bne.n	801238e <get_ldnumber+0x72>
					vol = (int)i;
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	3301      	adds	r3, #1
 8012386:	617b      	str	r3, [r7, #20]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	697a      	ldr	r2, [r7, #20]
 801238c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	e002      	b.n	8012398 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012392:	2300      	movs	r3, #0
 8012394:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012396:	693b      	ldr	r3, [r7, #16]
}
 8012398:	4618      	mov	r0, r3
 801239a:	371c      	adds	r7, #28
 801239c:	46bd      	mov	sp, r7
 801239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a2:	4770      	bx	lr

080123a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2200      	movs	r2, #0
 80123b2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123bc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80123c0:	6839      	ldr	r1, [r7, #0]
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7fe fe2f 	bl	8011026 <move_window>
 80123c8:	4603      	mov	r3, r0
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d001      	beq.n	80123d2 <check_fs+0x2e>
		return 3;
 80123ce:	2303      	movs	r3, #3
 80123d0:	e04a      	b.n	8012468 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80123d8:	3301      	adds	r3, #1
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	021b      	lsls	r3, r3, #8
 80123de:	b21a      	sxth	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80123e6:	b21b      	sxth	r3, r3
 80123e8:	4313      	orrs	r3, r2
 80123ea:	b21b      	sxth	r3, r3
 80123ec:	4a20      	ldr	r2, [pc, #128]	; (8012470 <check_fs+0xcc>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d001      	beq.n	80123f6 <check_fs+0x52>
		return 2;
 80123f2:	2302      	movs	r3, #2
 80123f4:	e038      	b.n	8012468 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	3336      	adds	r3, #54	; 0x36
 80123fa:	3303      	adds	r3, #3
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	061a      	lsls	r2, r3, #24
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	3336      	adds	r3, #54	; 0x36
 8012404:	3302      	adds	r3, #2
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	041b      	lsls	r3, r3, #16
 801240a:	4313      	orrs	r3, r2
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	3236      	adds	r2, #54	; 0x36
 8012410:	3201      	adds	r2, #1
 8012412:	7812      	ldrb	r2, [r2, #0]
 8012414:	0212      	lsls	r2, r2, #8
 8012416:	4313      	orrs	r3, r2
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 801241e:	4313      	orrs	r3, r2
 8012420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012424:	4a13      	ldr	r2, [pc, #76]	; (8012474 <check_fs+0xd0>)
 8012426:	4293      	cmp	r3, r2
 8012428:	d101      	bne.n	801242e <check_fs+0x8a>
		return 0;
 801242a:	2300      	movs	r3, #0
 801242c:	e01c      	b.n	8012468 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	3352      	adds	r3, #82	; 0x52
 8012432:	3303      	adds	r3, #3
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	061a      	lsls	r2, r3, #24
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	3352      	adds	r3, #82	; 0x52
 801243c:	3302      	adds	r3, #2
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	041b      	lsls	r3, r3, #16
 8012442:	4313      	orrs	r3, r2
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	3252      	adds	r2, #82	; 0x52
 8012448:	3201      	adds	r2, #1
 801244a:	7812      	ldrb	r2, [r2, #0]
 801244c:	0212      	lsls	r2, r2, #8
 801244e:	4313      	orrs	r3, r2
 8012450:	687a      	ldr	r2, [r7, #4]
 8012452:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8012456:	4313      	orrs	r3, r2
 8012458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801245c:	4a05      	ldr	r2, [pc, #20]	; (8012474 <check_fs+0xd0>)
 801245e:	4293      	cmp	r3, r2
 8012460:	d101      	bne.n	8012466 <check_fs+0xc2>
		return 0;
 8012462:	2300      	movs	r3, #0
 8012464:	e000      	b.n	8012468 <check_fs+0xc4>

	return 1;
 8012466:	2301      	movs	r3, #1
}
 8012468:	4618      	mov	r0, r3
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	ffffaa55 	.word	0xffffaa55
 8012474:	00544146 	.word	0x00544146

08012478 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b096      	sub	sp, #88	; 0x58
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	4613      	mov	r3, r2
 8012484:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2200      	movs	r2, #0
 801248a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801248c:	68b8      	ldr	r0, [r7, #8]
 801248e:	f7ff ff45 	bl	801231c <get_ldnumber>
 8012492:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012496:	2b00      	cmp	r3, #0
 8012498:	da01      	bge.n	801249e <find_volume+0x26>
 801249a:	230b      	movs	r3, #11
 801249c:	e2b2      	b.n	8012a04 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801249e:	4aa2      	ldr	r2, [pc, #648]	; (8012728 <find_volume+0x2b0>)
 80124a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80124a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d101      	bne.n	80124b2 <find_volume+0x3a>
 80124ae:	230c      	movs	r3, #12
 80124b0:	e2a8      	b.n	8012a04 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 80124b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124b4:	f7fe fb88 	bl	8010bc8 <lock_fs>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d101      	bne.n	80124c2 <find_volume+0x4a>
 80124be:	230f      	movs	r3, #15
 80124c0:	e2a0      	b.n	8012a04 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124c6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80124c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d01b      	beq.n	801250a <find_volume+0x92>
		stat = disk_status(fs->drv);
 80124d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fe fa5b 	bl	8010994 <disk_status>
 80124de:	4603      	mov	r3, r0
 80124e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80124e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124e8:	f003 0301 	and.w	r3, r3, #1
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d10c      	bne.n	801250a <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80124f0:	79fb      	ldrb	r3, [r7, #7]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d007      	beq.n	8012506 <find_volume+0x8e>
 80124f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124fa:	f003 0304 	and.w	r3, r3, #4
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d001      	beq.n	8012506 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8012502:	230a      	movs	r3, #10
 8012504:	e27e      	b.n	8012a04 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 8012506:	2300      	movs	r3, #0
 8012508:	e27c      	b.n	8012a04 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250c:	2200      	movs	r2, #0
 801250e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012514:	b2da      	uxtb	r2, r3
 8012516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012518:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8012522:	4618      	mov	r0, r3
 8012524:	f7fe fa50 	bl	80109c8 <disk_initialize>
 8012528:	4603      	mov	r3, r0
 801252a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 801252e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012532:	f003 0301 	and.w	r3, r3, #1
 8012536:	2b00      	cmp	r3, #0
 8012538:	d001      	beq.n	801253e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801253a:	2303      	movs	r3, #3
 801253c:	e262      	b.n	8012a04 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 801253e:	79fb      	ldrb	r3, [r7, #7]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d007      	beq.n	8012554 <find_volume+0xdc>
 8012544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012548:	f003 0304 	and.w	r3, r3, #4
 801254c:	2b00      	cmp	r3, #0
 801254e:	d001      	beq.n	8012554 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8012550:	230a      	movs	r3, #10
 8012552:	e257      	b.n	8012a04 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8012554:	2300      	movs	r3, #0
 8012556:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8012558:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801255a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801255c:	f7ff ff22 	bl	80123a4 <check_fs>
 8012560:	4603      	mov	r3, r0
 8012562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8012566:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801256a:	2b01      	cmp	r3, #1
 801256c:	d155      	bne.n	801261a <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 801256e:	2300      	movs	r3, #0
 8012570:	643b      	str	r3, [r7, #64]	; 0x40
 8012572:	e029      	b.n	80125c8 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8012574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012578:	011b      	lsls	r3, r3, #4
 801257a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801257e:	4413      	add	r3, r2
 8012580:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8012582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012584:	3304      	adds	r3, #4
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d012      	beq.n	80125b2 <find_volume+0x13a>
 801258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258e:	330b      	adds	r3, #11
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	061a      	lsls	r2, r3, #24
 8012594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012596:	330a      	adds	r3, #10
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	041b      	lsls	r3, r3, #16
 801259c:	4313      	orrs	r3, r2
 801259e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125a0:	3209      	adds	r2, #9
 80125a2:	7812      	ldrb	r2, [r2, #0]
 80125a4:	0212      	lsls	r2, r2, #8
 80125a6:	4313      	orrs	r3, r2
 80125a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125aa:	3208      	adds	r2, #8
 80125ac:	7812      	ldrb	r2, [r2, #0]
 80125ae:	431a      	orrs	r2, r3
 80125b0:	e000      	b.n	80125b4 <find_volume+0x13c>
 80125b2:	2200      	movs	r2, #0
 80125b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125b6:	009b      	lsls	r3, r3, #2
 80125b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80125bc:	440b      	add	r3, r1
 80125be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80125c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c4:	3301      	adds	r3, #1
 80125c6:	643b      	str	r3, [r7, #64]	; 0x40
 80125c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ca:	2b03      	cmp	r3, #3
 80125cc:	d9d2      	bls.n	8012574 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80125ce:	2300      	movs	r3, #0
 80125d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80125d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d002      	beq.n	80125de <find_volume+0x166>
 80125d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125da:	3b01      	subs	r3, #1
 80125dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80125de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80125e6:	4413      	add	r3, r2
 80125e8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80125ec:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80125ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d005      	beq.n	8012600 <find_volume+0x188>
 80125f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125f8:	f7ff fed4 	bl	80123a4 <check_fs>
 80125fc:	4603      	mov	r3, r0
 80125fe:	e000      	b.n	8012602 <find_volume+0x18a>
 8012600:	2302      	movs	r3, #2
 8012602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8012606:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801260a:	2b00      	cmp	r3, #0
 801260c:	d005      	beq.n	801261a <find_volume+0x1a2>
 801260e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012610:	3301      	adds	r3, #1
 8012612:	643b      	str	r3, [r7, #64]	; 0x40
 8012614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012616:	2b03      	cmp	r3, #3
 8012618:	d9e1      	bls.n	80125de <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801261a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801261e:	2b03      	cmp	r3, #3
 8012620:	d101      	bne.n	8012626 <find_volume+0x1ae>
 8012622:	2301      	movs	r3, #1
 8012624:	e1ee      	b.n	8012a04 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8012626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801262a:	2b00      	cmp	r3, #0
 801262c:	d001      	beq.n	8012632 <find_volume+0x1ba>
 801262e:	230d      	movs	r3, #13
 8012630:	e1e8      	b.n	8012a04 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012634:	7b1b      	ldrb	r3, [r3, #12]
 8012636:	021b      	lsls	r3, r3, #8
 8012638:	b21a      	sxth	r2, r3
 801263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263c:	7adb      	ldrb	r3, [r3, #11]
 801263e:	b21b      	sxth	r3, r3
 8012640:	4313      	orrs	r3, r2
 8012642:	b21b      	sxth	r3, r3
 8012644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012648:	d001      	beq.n	801264e <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 801264a:	230d      	movs	r3, #13
 801264c:	e1da      	b.n	8012a04 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 801264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012650:	7ddb      	ldrb	r3, [r3, #23]
 8012652:	021b      	lsls	r3, r3, #8
 8012654:	b21a      	sxth	r2, r3
 8012656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012658:	7d9b      	ldrb	r3, [r3, #22]
 801265a:	b21b      	sxth	r3, r3
 801265c:	4313      	orrs	r3, r2
 801265e:	b21b      	sxth	r3, r3
 8012660:	b29b      	uxth	r3, r3
 8012662:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8012664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012666:	2b00      	cmp	r3, #0
 8012668:	d112      	bne.n	8012690 <find_volume+0x218>
 801266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012670:	061a      	lsls	r2, r3, #24
 8012672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012674:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012678:	041b      	lsls	r3, r3, #16
 801267a:	4313      	orrs	r3, r2
 801267c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801267e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8012682:	0212      	lsls	r2, r2, #8
 8012684:	4313      	orrs	r3, r2
 8012686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012688:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801268c:	4313      	orrs	r3, r2
 801268e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8012690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012694:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8012698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269a:	7c1a      	ldrb	r2, [r3, #16]
 801269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80126a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80126a8:	2b01      	cmp	r3, #1
 80126aa:	d006      	beq.n	80126ba <find_volume+0x242>
 80126ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ae:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80126b2:	2b02      	cmp	r3, #2
 80126b4:	d001      	beq.n	80126ba <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 80126b6:	230d      	movs	r3, #13
 80126b8:	e1a4      	b.n	8012a04 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80126ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126bc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80126c0:	461a      	mov	r2, r3
 80126c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126c4:	fb02 f303 	mul.w	r3, r2, r3
 80126c8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80126ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126cc:	7b5a      	ldrb	r2, [r3, #13]
 80126ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80126d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00a      	beq.n	80126f4 <find_volume+0x27c>
 80126de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80126e4:	461a      	mov	r2, r3
 80126e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80126ec:	3b01      	subs	r3, #1
 80126ee:	4013      	ands	r3, r2
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d001      	beq.n	80126f8 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 80126f4:	230d      	movs	r3, #13
 80126f6:	e185      	b.n	8012a04 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80126f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126fa:	7c9b      	ldrb	r3, [r3, #18]
 80126fc:	021b      	lsls	r3, r3, #8
 80126fe:	b21a      	sxth	r2, r3
 8012700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012702:	7c5b      	ldrb	r3, [r3, #17]
 8012704:	b21b      	sxth	r3, r3
 8012706:	4313      	orrs	r3, r2
 8012708:	b21b      	sxth	r3, r3
 801270a:	b29a      	uxth	r2, r3
 801270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8012712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012714:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8012718:	f003 030f 	and.w	r3, r3, #15
 801271c:	b29b      	uxth	r3, r3
 801271e:	2b00      	cmp	r3, #0
 8012720:	d004      	beq.n	801272c <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 8012722:	230d      	movs	r3, #13
 8012724:	e16e      	b.n	8012a04 <find_volume+0x58c>
 8012726:	bf00      	nop
 8012728:	20000ad8 	.word	0x20000ad8

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 801272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272e:	7d1b      	ldrb	r3, [r3, #20]
 8012730:	021b      	lsls	r3, r3, #8
 8012732:	b21a      	sxth	r2, r3
 8012734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012736:	7cdb      	ldrb	r3, [r3, #19]
 8012738:	b21b      	sxth	r3, r3
 801273a:	4313      	orrs	r3, r2
 801273c:	b21b      	sxth	r3, r3
 801273e:	b29b      	uxth	r3, r3
 8012740:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8012742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012744:	2b00      	cmp	r3, #0
 8012746:	d112      	bne.n	801276e <find_volume+0x2f6>
 8012748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801274e:	061a      	lsls	r2, r3, #24
 8012750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012752:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012756:	041b      	lsls	r3, r3, #16
 8012758:	4313      	orrs	r3, r2
 801275a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801275c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8012760:	0212      	lsls	r2, r2, #8
 8012762:	4313      	orrs	r3, r2
 8012764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012766:	f892 2020 	ldrb.w	r2, [r2, #32]
 801276a:	4313      	orrs	r3, r2
 801276c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	7bdb      	ldrb	r3, [r3, #15]
 8012772:	021b      	lsls	r3, r3, #8
 8012774:	b21a      	sxth	r2, r3
 8012776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012778:	7b9b      	ldrb	r3, [r3, #14]
 801277a:	b21b      	sxth	r3, r3
 801277c:	4313      	orrs	r3, r2
 801277e:	b21b      	sxth	r3, r3
 8012780:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8012782:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012784:	2b00      	cmp	r3, #0
 8012786:	d101      	bne.n	801278c <find_volume+0x314>
 8012788:	230d      	movs	r3, #13
 801278a:	e13b      	b.n	8012a04 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 801278c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801278e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012790:	4413      	add	r3, r2
 8012792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012794:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8012798:	0912      	lsrs	r2, r2, #4
 801279a:	b292      	uxth	r2, r2
 801279c:	4413      	add	r3, r2
 801279e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80127a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80127a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d201      	bcs.n	80127ac <find_volume+0x334>
 80127a8:	230d      	movs	r3, #13
 80127aa:	e12b      	b.n	8012a04 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80127ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80127ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b0:	1ad3      	subs	r3, r2, r3
 80127b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127b4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80127b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80127bc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80127be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d101      	bne.n	80127c8 <find_volume+0x350>
 80127c4:	230d      	movs	r3, #13
 80127c6:	e11d      	b.n	8012a04 <find_volume+0x58c>
	fmt = FS_FAT12;
 80127c8:	2301      	movs	r3, #1
 80127ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80127ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d902      	bls.n	80127de <find_volume+0x366>
 80127d8:	2302      	movs	r3, #2
 80127da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80127de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80127e4:	4293      	cmp	r3, r2
 80127e6:	d902      	bls.n	80127ee <find_volume+0x376>
 80127e8:	2303      	movs	r3, #3
 80127ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80127ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f0:	1c9a      	adds	r2, r3, #2
 80127f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80127f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127fc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8012800:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012804:	441a      	add	r2, r3
 8012806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012808:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 801280c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012810:	441a      	add	r2, r3
 8012812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012814:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8012818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801281c:	2b03      	cmp	r3, #3
 801281e:	d121      	bne.n	8012864 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8012820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012822:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8012826:	2b00      	cmp	r3, #0
 8012828:	d001      	beq.n	801282e <find_volume+0x3b6>
 801282a:	230d      	movs	r3, #13
 801282c:	e0ea      	b.n	8012a04 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 801282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012830:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012834:	061a      	lsls	r2, r3, #24
 8012836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012838:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801283c:	041b      	lsls	r3, r3, #16
 801283e:	4313      	orrs	r3, r2
 8012840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012842:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012846:	0212      	lsls	r2, r2, #8
 8012848:	4313      	orrs	r3, r2
 801284a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801284c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8012850:	431a      	orrs	r2, r3
 8012852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012854:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8012858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801285e:	009b      	lsls	r3, r3, #2
 8012860:	647b      	str	r3, [r7, #68]	; 0x44
 8012862:	e025      	b.n	80128b0 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8012864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012866:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801286a:	2b00      	cmp	r3, #0
 801286c:	d101      	bne.n	8012872 <find_volume+0x3fa>
 801286e:	230d      	movs	r3, #13
 8012870:	e0c8      	b.n	8012a04 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8012872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012874:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8012878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801287a:	441a      	add	r2, r3
 801287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012882:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012886:	2b02      	cmp	r3, #2
 8012888:	d104      	bne.n	8012894 <find_volume+0x41c>
 801288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012890:	005b      	lsls	r3, r3, #1
 8012892:	e00c      	b.n	80128ae <find_volume+0x436>
 8012894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012896:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801289a:	4613      	mov	r3, r2
 801289c:	005b      	lsls	r3, r3, #1
 801289e:	4413      	add	r3, r2
 80128a0:	085a      	lsrs	r2, r3, #1
 80128a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80128a8:	f003 0301 	and.w	r3, r3, #1
 80128ac:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80128ae:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80128b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80128b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80128bc:	0a5b      	lsrs	r3, r3, #9
 80128be:	429a      	cmp	r2, r3
 80128c0:	d201      	bcs.n	80128c6 <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 80128c2:	230d      	movs	r3, #13
 80128c4:	e09e      	b.n	8012a04 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80128c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80128d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80128d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80128dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128de:	2280      	movs	r2, #128	; 0x80
 80128e0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80128e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128e8:	2b03      	cmp	r3, #3
 80128ea:	d177      	bne.n	80129dc <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80128ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128f2:	021b      	lsls	r3, r3, #8
 80128f4:	b21a      	sxth	r2, r3
 80128f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80128fc:	b21b      	sxth	r3, r3
 80128fe:	4313      	orrs	r3, r2
 8012900:	b21b      	sxth	r3, r3
 8012902:	2b01      	cmp	r3, #1
 8012904:	d16a      	bne.n	80129dc <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 8012906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012908:	3301      	adds	r3, #1
 801290a:	4619      	mov	r1, r3
 801290c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801290e:	f7fe fb8a 	bl	8011026 <move_window>
 8012912:	4603      	mov	r3, r0
 8012914:	2b00      	cmp	r3, #0
 8012916:	d161      	bne.n	80129dc <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 8012918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291a:	2200      	movs	r2, #0
 801291c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012922:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8012926:	021b      	lsls	r3, r3, #8
 8012928:	b21a      	sxth	r2, r3
 801292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8012930:	b21b      	sxth	r3, r3
 8012932:	4313      	orrs	r3, r2
 8012934:	b21b      	sxth	r3, r3
 8012936:	4a35      	ldr	r2, [pc, #212]	; (8012a0c <find_volume+0x594>)
 8012938:	4293      	cmp	r3, r2
 801293a:	d14f      	bne.n	80129dc <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 801293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801293e:	78db      	ldrb	r3, [r3, #3]
 8012940:	061a      	lsls	r2, r3, #24
 8012942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012944:	789b      	ldrb	r3, [r3, #2]
 8012946:	041b      	lsls	r3, r3, #16
 8012948:	4313      	orrs	r3, r2
 801294a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801294c:	7852      	ldrb	r2, [r2, #1]
 801294e:	0212      	lsls	r2, r2, #8
 8012950:	4313      	orrs	r3, r2
 8012952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012954:	7812      	ldrb	r2, [r2, #0]
 8012956:	4313      	orrs	r3, r2
 8012958:	4a2d      	ldr	r2, [pc, #180]	; (8012a10 <find_volume+0x598>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d13e      	bne.n	80129dc <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 801295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012960:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8012964:	061a      	lsls	r2, r3, #24
 8012966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012968:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 801296c:	041b      	lsls	r3, r3, #16
 801296e:	4313      	orrs	r3, r2
 8012970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012972:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8012976:	0212      	lsls	r2, r2, #8
 8012978:	4313      	orrs	r3, r2
 801297a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801297c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8012980:	4313      	orrs	r3, r2
 8012982:	4a24      	ldr	r2, [pc, #144]	; (8012a14 <find_volume+0x59c>)
 8012984:	4293      	cmp	r3, r2
 8012986:	d129      	bne.n	80129dc <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8012988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 801298e:	061a      	lsls	r2, r3, #24
 8012990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012992:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8012996:	041b      	lsls	r3, r3, #16
 8012998:	4313      	orrs	r3, r2
 801299a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801299c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80129a0:	0212      	lsls	r2, r2, #8
 80129a2:	4313      	orrs	r3, r2
 80129a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129a6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80129aa:	431a      	orrs	r2, r3
 80129ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80129b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80129b8:	061a      	lsls	r2, r3, #24
 80129ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129bc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80129c0:	041b      	lsls	r3, r3, #16
 80129c2:	4313      	orrs	r3, r2
 80129c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129c6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80129ca:	0212      	lsls	r2, r2, #8
 80129cc:	4313      	orrs	r3, r2
 80129ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129d0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80129d4:	431a      	orrs	r2, r3
 80129d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80129dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80129e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80129e6:	4b0c      	ldr	r3, [pc, #48]	; (8012a18 <find_volume+0x5a0>)
 80129e8:	881b      	ldrh	r3, [r3, #0]
 80129ea:	3301      	adds	r3, #1
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	4b0a      	ldr	r3, [pc, #40]	; (8012a18 <find_volume+0x5a0>)
 80129f0:	801a      	strh	r2, [r3, #0]
 80129f2:	4b09      	ldr	r3, [pc, #36]	; (8012a18 <find_volume+0x5a0>)
 80129f4:	881a      	ldrh	r2, [r3, #0]
 80129f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80129fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80129fe:	f7fe fa9f 	bl	8010f40 <clear_lock>
#endif

	return FR_OK;
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3758      	adds	r7, #88	; 0x58
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	ffffaa55 	.word	0xffffaa55
 8012a10:	41615252 	.word	0x41615252
 8012a14:	61417272 	.word	0x61417272
 8012a18:	20000adc 	.word	0x20000adc

08012a1c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d022      	beq.n	8012a74 <validate+0x58>
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d01d      	beq.n	8012a74 <validate+0x58>
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d016      	beq.n	8012a74 <validate+0x58>
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a4c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d10c      	bne.n	8012a74 <validate+0x58>
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a60:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fd ff95 	bl	8010994 <disk_status>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	f003 0301 	and.w	r3, r3, #1
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d001      	beq.n	8012a78 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8012a74:	2309      	movs	r3, #9
 8012a76:	e00b      	b.n	8012a90 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7fe f8a2 	bl	8010bc8 <lock_fs>
 8012a84:	4603      	mov	r3, r0
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d101      	bne.n	8012a8e <validate+0x72>
 8012a8a:	230f      	movs	r3, #15
 8012a8c:	e000      	b.n	8012a90 <validate+0x74>

	return FR_OK;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3710      	adds	r7, #16
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b088      	sub	sp, #32
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8012aaa:	f107 0310 	add.w	r3, r7, #16
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7ff fc34 	bl	801231c <get_ldnumber>
 8012ab4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012ab6:	69fb      	ldr	r3, [r7, #28]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	da01      	bge.n	8012ac0 <f_mount+0x28>
 8012abc:	230b      	movs	r3, #11
 8012abe:	e04c      	b.n	8012b5a <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012ac0:	4a28      	ldr	r2, [pc, #160]	; (8012b64 <f_mount+0xcc>)
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ac8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012aca:	69bb      	ldr	r3, [r7, #24]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d011      	beq.n	8012af4 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8012ad0:	69b8      	ldr	r0, [r7, #24]
 8012ad2:	f7fe fa35 	bl	8010f40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8012ad6:	69bb      	ldr	r3, [r7, #24]
 8012ad8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012adc:	4618      	mov	r0, r3
 8012ade:	f001 fd3a 	bl	8014556 <ff_del_syncobj>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d101      	bne.n	8012aec <f_mount+0x54>
 8012ae8:	2302      	movs	r3, #2
 8012aea:	e036      	b.n	8012b5a <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	2200      	movs	r2, #0
 8012af0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d011      	beq.n	8012b1e <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	b2da      	uxtb	r2, r3
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	4610      	mov	r0, r2
 8012b10:	f001 fd03 	bl	801451a <ff_cre_syncobj>
 8012b14:	4603      	mov	r3, r0
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d101      	bne.n	8012b1e <f_mount+0x86>
 8012b1a:	2302      	movs	r3, #2
 8012b1c:	e01d      	b.n	8012b5a <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	4910      	ldr	r1, [pc, #64]	; (8012b64 <f_mount+0xcc>)
 8012b22:	69fb      	ldr	r3, [r7, #28]
 8012b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d002      	beq.n	8012b34 <f_mount+0x9c>
 8012b2e:	79fb      	ldrb	r3, [r7, #7]
 8012b30:	2b01      	cmp	r3, #1
 8012b32:	d001      	beq.n	8012b38 <f_mount+0xa0>
 8012b34:	2300      	movs	r3, #0
 8012b36:	e010      	b.n	8012b5a <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8012b38:	f107 0108 	add.w	r1, r7, #8
 8012b3c:	f107 030c 	add.w	r3, r7, #12
 8012b40:	2200      	movs	r2, #0
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7ff fc98 	bl	8012478 <find_volume>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	7dfa      	ldrb	r2, [r7, #23]
 8012b50:	4611      	mov	r1, r2
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fe f847 	bl	8010be6 <unlock_fs>
 8012b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3720      	adds	r7, #32
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	20000ad8 	.word	0x20000ad8

08012b68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	f107 030c 	add.w	r3, r7, #12
 8012b74:	6018      	str	r0, [r3, #0]
 8012b76:	f107 0308 	add.w	r3, r7, #8
 8012b7a:	6019      	str	r1, [r3, #0]
 8012b7c:	1dfb      	adds	r3, r7, #7
 8012b7e:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8012b80:	f107 030c 	add.w	r3, r7, #12
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d101      	bne.n	8012b8e <f_open+0x26>
 8012b8a:	2309      	movs	r3, #9
 8012b8c:	e1fc      	b.n	8012f88 <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 8012b8e:	f107 030c 	add.w	r3, r7, #12
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	2200      	movs	r2, #0
 8012b96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8012b9a:	1dfb      	adds	r3, r7, #7
 8012b9c:	1dfa      	adds	r2, r7, #7
 8012b9e:	7812      	ldrb	r2, [r2, #0]
 8012ba0:	f002 021f 	and.w	r2, r2, #31
 8012ba4:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8012ba6:	1dfb      	adds	r3, r7, #7
 8012ba8:	781b      	ldrb	r3, [r3, #0]
 8012baa:	f023 0301 	bic.w	r3, r3, #1
 8012bae:	b2da      	uxtb	r2, r3
 8012bb0:	f107 0108 	add.w	r1, r7, #8
 8012bb4:	f107 031c 	add.w	r3, r7, #28
 8012bb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7ff fc5b 	bl	8012478 <find_volume>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8012bc8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	f040 81cf 	bne.w	8012f70 <f_open+0x408>
		INIT_BUF(dj);
 8012bd2:	f107 031c 	add.w	r3, r7, #28
 8012bd6:	f107 0210 	add.w	r2, r7, #16
 8012bda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8012bde:	f107 0308 	add.w	r3, r7, #8
 8012be2:	681a      	ldr	r2, [r3, #0]
 8012be4:	f107 031c 	add.w	r3, r7, #28
 8012be8:	4611      	mov	r1, r2
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7ff fb28 	bl	8012240 <follow_path>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8012bf6:	f107 031c 	add.w	r3, r7, #28
 8012bfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012bfe:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012c02:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d11a      	bne.n	8012c40 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8012c0a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d103      	bne.n	8012c1a <f_open+0xb2>
				res = FR_INVALID_NAME;
 8012c12:	2306      	movs	r3, #6
 8012c14:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012c18:	e012      	b.n	8012c40 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c1a:	1dfb      	adds	r3, r7, #7
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	f023 0301 	bic.w	r3, r3, #1
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	bf14      	ite	ne
 8012c26:	2301      	movne	r3, #1
 8012c28:	2300      	moveq	r3, #0
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	f107 031c 	add.w	r3, r7, #28
 8012c32:	4611      	mov	r1, r2
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7fd fff5 	bl	8010c24 <chk_lock>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012c40:	1dfb      	adds	r3, r7, #7
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	f003 031c 	and.w	r3, r3, #28
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	f000 80cc 	beq.w	8012de6 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8012c4e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d01f      	beq.n	8012c96 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8012c56:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012c5a:	2b04      	cmp	r3, #4
 8012c5c:	d10e      	bne.n	8012c7c <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012c5e:	f7fe f84f 	bl	8010d00 <enq_lock>
 8012c62:	4603      	mov	r3, r0
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d006      	beq.n	8012c76 <f_open+0x10e>
 8012c68:	f107 031c 	add.w	r3, r7, #28
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7ff f8a3 	bl	8011db8 <dir_register>
 8012c72:	4603      	mov	r3, r0
 8012c74:	e000      	b.n	8012c78 <f_open+0x110>
 8012c76:	2312      	movs	r3, #18
 8012c78:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012c7c:	1dfb      	adds	r3, r7, #7
 8012c7e:	1dfa      	adds	r2, r7, #7
 8012c80:	7812      	ldrb	r2, [r2, #0]
 8012c82:	f042 0208 	orr.w	r2, r2, #8
 8012c86:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8012c88:	f107 031c 	add.w	r3, r7, #28
 8012c8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012c90:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8012c94:	e014      	b.n	8012cc0 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012c96:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012c9a:	330b      	adds	r3, #11
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	f003 0311 	and.w	r3, r3, #17
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d003      	beq.n	8012cae <f_open+0x146>
					res = FR_DENIED;
 8012ca6:	2307      	movs	r3, #7
 8012ca8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012cac:	e008      	b.n	8012cc0 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8012cae:	1dfb      	adds	r3, r7, #7
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	f003 0304 	and.w	r3, r3, #4
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d002      	beq.n	8012cc0 <f_open+0x158>
						res = FR_EXIST;
 8012cba:	2308      	movs	r3, #8
 8012cbc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012cc0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	f040 80af 	bne.w	8012e28 <f_open+0x2c0>
 8012cca:	1dfb      	adds	r3, r7, #7
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	f003 0308 	and.w	r3, r3, #8
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	f000 80a8 	beq.w	8012e28 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8012cd8:	f7fc ffe6 	bl	800fca8 <get_fattime>
 8012cdc:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8012ce0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012ce4:	330e      	adds	r3, #14
 8012ce6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8012cea:	b2d2      	uxtb	r2, r2
 8012cec:	701a      	strb	r2, [r3, #0]
 8012cee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012cf2:	b29b      	uxth	r3, r3
 8012cf4:	0a1b      	lsrs	r3, r3, #8
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012cfc:	330f      	adds	r3, #15
 8012cfe:	b2d2      	uxtb	r2, r2
 8012d00:	701a      	strb	r2, [r3, #0]
 8012d02:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012d06:	0c1a      	lsrs	r2, r3, #16
 8012d08:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012d0c:	3310      	adds	r3, #16
 8012d0e:	b2d2      	uxtb	r2, r2
 8012d10:	701a      	strb	r2, [r3, #0]
 8012d12:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012d16:	0e1a      	lsrs	r2, r3, #24
 8012d18:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012d1c:	3311      	adds	r3, #17
 8012d1e:	b2d2      	uxtb	r2, r2
 8012d20:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8012d22:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012d26:	330b      	adds	r3, #11
 8012d28:	2200      	movs	r2, #0
 8012d2a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8012d2c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012d30:	331c      	adds	r3, #28
 8012d32:	2200      	movs	r2, #0
 8012d34:	701a      	strb	r2, [r3, #0]
 8012d36:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012d3a:	331d      	adds	r3, #29
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	701a      	strb	r2, [r3, #0]
 8012d40:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012d44:	331e      	adds	r3, #30
 8012d46:	2200      	movs	r2, #0
 8012d48:	701a      	strb	r2, [r3, #0]
 8012d4a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012d4e:	331f      	adds	r3, #31
 8012d50:	2200      	movs	r2, #0
 8012d52:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8012d54:	f107 031c 	add.w	r3, r7, #28
 8012d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d5c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7fe ff26 	bl	8011bb2 <ld_clust>
 8012d66:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8012d6a:	2100      	movs	r1, #0
 8012d6c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8012d70:	f7fe ff4d 	bl	8011c0e <st_clust>
				dj.fs->wflag = 1;
 8012d74:	f107 031c 	add.w	r3, r7, #28
 8012d78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8012d82:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d04e      	beq.n	8012e28 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8012d8a:	f107 031c 	add.w	r3, r7, #28
 8012d8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d92:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8012d96:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8012d9a:	f107 031c 	add.w	r3, r7, #28
 8012d9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012da2:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7fe fc02 	bl	80115b0 <remove_chain>
 8012dac:	4603      	mov	r3, r0
 8012dae:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8012db2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d136      	bne.n	8012e28 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8012dba:	f107 031c 	add.w	r3, r7, #28
 8012dbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012dc2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8012dc6:	3a01      	subs	r2, #1
 8012dc8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8012dcc:	f107 031c 	add.w	r3, r7, #28
 8012dd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012dd4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7fe f924 	bl	8011026 <move_window>
 8012dde:	4603      	mov	r3, r0
 8012de0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012de4:	e020      	b.n	8012e28 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8012de6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d11c      	bne.n	8012e28 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8012dee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012df2:	330b      	adds	r3, #11
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	f003 0310 	and.w	r3, r3, #16
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d003      	beq.n	8012e06 <f_open+0x29e>
					res = FR_NO_FILE;
 8012dfe:	2304      	movs	r3, #4
 8012e00:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012e04:	e010      	b.n	8012e28 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8012e06:	1dfb      	adds	r3, r7, #7
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	f003 0302 	and.w	r3, r3, #2
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d00a      	beq.n	8012e28 <f_open+0x2c0>
 8012e12:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012e16:	330b      	adds	r3, #11
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	f003 0301 	and.w	r3, r3, #1
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d002      	beq.n	8012e28 <f_open+0x2c0>
						res = FR_DENIED;
 8012e22:	2307      	movs	r3, #7
 8012e24:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8012e28:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d13d      	bne.n	8012eac <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012e30:	1dfb      	adds	r3, r7, #7
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	f003 0308 	and.w	r3, r3, #8
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d005      	beq.n	8012e48 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8012e3c:	1dfb      	adds	r3, r7, #7
 8012e3e:	1dfa      	adds	r2, r7, #7
 8012e40:	7812      	ldrb	r2, [r2, #0]
 8012e42:	f042 0220 	orr.w	r2, r2, #32
 8012e46:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8012e48:	f107 031c 	add.w	r3, r7, #28
 8012e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012e50:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8012e54:	f107 030c 	add.w	r3, r7, #12
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8012e5e:	f107 030c 	add.w	r3, r7, #12
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8012e68:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012e6c:	1dfb      	adds	r3, r7, #7
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	f023 0301 	bic.w	r3, r3, #1
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	bf14      	ite	ne
 8012e78:	2301      	movne	r3, #1
 8012e7a:	2300      	moveq	r3, #0
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	461a      	mov	r2, r3
 8012e80:	f107 031c 	add.w	r3, r7, #28
 8012e84:	4611      	mov	r1, r2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7fd ff5e 	bl	8010d48 <inc_lock>
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	f107 030c 	add.w	r3, r7, #12
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8012e98:	f107 030c 	add.w	r3, r7, #12
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d102      	bne.n	8012eac <f_open+0x344>
 8012ea6:	2302      	movs	r3, #2
 8012ea8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8012eac:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d15d      	bne.n	8012f70 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8012eb4:	f107 030c 	add.w	r3, r7, #12
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	1dfa      	adds	r2, r7, #7
 8012ebc:	7812      	ldrb	r2, [r2, #0]
 8012ebe:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8012ec2:	f107 030c 	add.w	r3, r7, #12
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8012ece:	f107 031c 	add.w	r3, r7, #28
 8012ed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012ed6:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7fe fe69 	bl	8011bb2 <ld_clust>
 8012ee0:	4602      	mov	r2, r0
 8012ee2:	f107 030c 	add.w	r3, r7, #12
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8012eec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012ef0:	331f      	adds	r3, #31
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	061a      	lsls	r2, r3, #24
 8012ef6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012efa:	331e      	adds	r3, #30
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	041b      	lsls	r3, r3, #16
 8012f00:	4313      	orrs	r3, r2
 8012f02:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8012f06:	321d      	adds	r2, #29
 8012f08:	7812      	ldrb	r2, [r2, #0]
 8012f0a:	0212      	lsls	r2, r2, #8
 8012f0c:	4313      	orrs	r3, r2
 8012f0e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8012f12:	321c      	adds	r2, #28
 8012f14:	7812      	ldrb	r2, [r2, #0]
 8012f16:	431a      	orrs	r2, r3
 8012f18:	f107 030c 	add.w	r3, r7, #12
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8012f22:	f107 030c 	add.w	r3, r7, #12
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8012f2e:	f107 030c 	add.w	r3, r7, #12
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2200      	movs	r2, #0
 8012f36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8012f3a:	f107 030c 	add.w	r3, r7, #12
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2200      	movs	r2, #0
 8012f42:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8012f46:	f107 031c 	add.w	r3, r7, #28
 8012f4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012f4e:	f107 030c 	add.w	r3, r7, #12
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8012f58:	f107 030c 	add.w	r3, r7, #12
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012f62:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8012f66:	f107 030c 	add.w	r3, r7, #12
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8012f70:	f107 031c 	add.w	r3, r7, #28
 8012f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012f78:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8012f7c:	4611      	mov	r1, r2
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fd fe31 	bl	8010be6 <unlock_fs>
 8012f84:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}

08012f92 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b08c      	sub	sp, #48	; 0x30
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	60f8      	str	r0, [r7, #12]
 8012f9a:	60b9      	str	r1, [r7, #8]
 8012f9c:	607a      	str	r2, [r7, #4]
 8012f9e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8012faa:	68f8      	ldr	r0, [r7, #12]
 8012fac:	f7ff fd36 	bl	8012a1c <validate>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8012fb4:	7ffb      	ldrb	r3, [r7, #31]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d009      	beq.n	8012fce <f_read+0x3c>
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012fc0:	7ffa      	ldrb	r2, [r7, #31]
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7fd fe0e 	bl	8010be6 <unlock_fs>
 8012fca:	7ffb      	ldrb	r3, [r7, #31]
 8012fcc:	e192      	b.n	80132f4 <f_read+0x362>
	if (fp->err)								/* Check error */
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d00d      	beq.n	8012ff4 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	4610      	mov	r0, r2
 8012fe8:	f7fd fdfd 	bl	8010be6 <unlock_fs>
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8012ff2:	e17f      	b.n	80132f4 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012ffa:	f003 0301 	and.w	r3, r3, #1
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d108      	bne.n	8013014 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013008:	2107      	movs	r1, #7
 801300a:	4618      	mov	r0, r3
 801300c:	f7fd fdeb 	bl	8010be6 <unlock_fs>
 8013010:	2307      	movs	r3, #7
 8013012:	e16f      	b.n	80132f4 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013020:	1ad3      	subs	r3, r2, r3
 8013022:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	69bb      	ldr	r3, [r7, #24]
 8013028:	429a      	cmp	r2, r3
 801302a:	f240 8157 	bls.w	80132dc <f_read+0x34a>
 801302e:	69bb      	ldr	r3, [r7, #24]
 8013030:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013032:	e153      	b.n	80132dc <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801303a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801303e:	2b00      	cmp	r3, #0
 8013040:	f040 811c 	bne.w	801327c <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801304a:	0a5b      	lsrs	r3, r3, #9
 801304c:	b2da      	uxtb	r2, r3
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013054:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8013058:	3b01      	subs	r3, #1
 801305a:	b2db      	uxtb	r3, r3
 801305c:	4013      	ands	r3, r2
 801305e:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8013060:	7dfb      	ldrb	r3, [r7, #23]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d147      	bne.n	80130f6 <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801306c:	2b00      	cmp	r3, #0
 801306e:	d104      	bne.n	801307a <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013078:	e018      	b.n	80130ac <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8013080:	2b00      	cmp	r3, #0
 8013082:	d008      	beq.n	8013096 <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801308a:	4619      	mov	r1, r3
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f7fe fb86 	bl	801179e <clmt_clust>
 8013092:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013094:	e00a      	b.n	80130ac <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80130a2:	4619      	mov	r1, r3
 80130a4:	4610      	mov	r0, r2
 80130a6:	f7fe f8bb 	bl	8011220 <get_fat>
 80130aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80130ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d80c      	bhi.n	80130cc <f_read+0x13a>
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2202      	movs	r2, #2
 80130b6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80130c0:	2102      	movs	r1, #2
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7fd fd8f 	bl	8010be6 <unlock_fs>
 80130c8:	2302      	movs	r3, #2
 80130ca:	e113      	b.n	80132f4 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80130cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130d2:	d10c      	bne.n	80130ee <f_read+0x15c>
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2201      	movs	r2, #1
 80130d8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80130e2:	2101      	movs	r1, #1
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7fd fd7e 	bl	8010be6 <unlock_fs>
 80130ea:	2301      	movs	r3, #1
 80130ec:	e102      	b.n	80132f4 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013102:	4619      	mov	r1, r3
 8013104:	4610      	mov	r0, r2
 8013106:	f7fe f869 	bl	80111dc <clust2sect>
 801310a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d10c      	bne.n	801312c <f_read+0x19a>
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2202      	movs	r2, #2
 8013116:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013120:	2102      	movs	r1, #2
 8013122:	4618      	mov	r0, r3
 8013124:	f7fd fd5f 	bl	8010be6 <unlock_fs>
 8013128:	2302      	movs	r3, #2
 801312a:	e0e3      	b.n	80132f4 <f_read+0x362>
			sect += csect;
 801312c:	7dfb      	ldrb	r3, [r7, #23]
 801312e:	693a      	ldr	r2, [r7, #16]
 8013130:	4413      	add	r3, r2
 8013132:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	0a5b      	lsrs	r3, r3, #9
 8013138:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 801313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313c:	2b00      	cmp	r3, #0
 801313e:	d04d      	beq.n	80131dc <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8013140:	7dfa      	ldrb	r2, [r7, #23]
 8013142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013144:	4413      	add	r3, r2
 8013146:	68fa      	ldr	r2, [r7, #12]
 8013148:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801314c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8013150:	4293      	cmp	r3, r2
 8013152:	d908      	bls.n	8013166 <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801315a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801315e:	461a      	mov	r2, r3
 8013160:	7dfb      	ldrb	r3, [r7, #23]
 8013162:	1ad3      	subs	r3, r2, r3
 8013164:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801316c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013172:	693a      	ldr	r2, [r7, #16]
 8013174:	6a39      	ldr	r1, [r7, #32]
 8013176:	f7fd fc4d 	bl	8010a14 <disk_read>
 801317a:	4603      	mov	r3, r0
 801317c:	2b00      	cmp	r3, #0
 801317e:	d00c      	beq.n	801319a <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2201      	movs	r2, #1
 8013184:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801318e:	2101      	movs	r1, #1
 8013190:	4618      	mov	r0, r3
 8013192:	f7fd fd28 	bl	8010be6 <unlock_fs>
 8013196:	2301      	movs	r3, #1
 8013198:	e0ac      	b.n	80132f4 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80131a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d015      	beq.n	80131d4 <f_read+0x242>
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d90d      	bls.n	80131d4 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	1ad3      	subs	r3, r2, r3
 80131c2:	025b      	lsls	r3, r3, #9
 80131c4:	6a3a      	ldr	r2, [r7, #32]
 80131c6:	4413      	add	r3, r2
 80131c8:	68f9      	ldr	r1, [r7, #12]
 80131ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7fd fc7e 	bl	8010ad0 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80131d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d6:	025b      	lsls	r3, r3, #9
 80131d8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80131da:	e069      	b.n	80132b0 <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80131e2:	693a      	ldr	r2, [r7, #16]
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d045      	beq.n	8013274 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80131ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d024      	beq.n	8013240 <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80131fc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013200:	68f9      	ldr	r1, [r7, #12]
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013208:	2301      	movs	r3, #1
 801320a:	f7fd fc23 	bl	8010a54 <disk_write>
 801320e:	4603      	mov	r3, r0
 8013210:	2b00      	cmp	r3, #0
 8013212:	d00c      	beq.n	801322e <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2201      	movs	r2, #1
 8013218:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013222:	2101      	movs	r1, #1
 8013224:	4618      	mov	r0, r3
 8013226:	f7fd fcde 	bl	8010be6 <unlock_fs>
 801322a:	2301      	movs	r3, #1
 801322c:	e062      	b.n	80132f4 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013238:	b2da      	uxtb	r2, r3
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013246:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801324a:	68f9      	ldr	r1, [r7, #12]
 801324c:	2301      	movs	r3, #1
 801324e:	693a      	ldr	r2, [r7, #16]
 8013250:	f7fd fbe0 	bl	8010a14 <disk_read>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d00c      	beq.n	8013274 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	2201      	movs	r2, #1
 801325e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013268:	2101      	movs	r1, #1
 801326a:	4618      	mov	r0, r3
 801326c:	f7fd fcbb 	bl	8010be6 <unlock_fs>
 8013270:	2301      	movs	r3, #1
 8013272:	e03f      	b.n	80132f4 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	693a      	ldr	r2, [r7, #16]
 8013278:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013286:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801328a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 801328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	429a      	cmp	r2, r3
 8013292:	d901      	bls.n	8013298 <f_read+0x306>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801329e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132a2:	68fa      	ldr	r2, [r7, #12]
 80132a4:	4413      	add	r3, r2
 80132a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132a8:	4619      	mov	r1, r3
 80132aa:	6a38      	ldr	r0, [r7, #32]
 80132ac:	f7fd fc10 	bl	8010ad0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80132b0:	6a3a      	ldr	r2, [r7, #32]
 80132b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b4:	4413      	add	r3, r2
 80132b6:	623b      	str	r3, [r7, #32]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80132be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c0:	441a      	add	r2, r3
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ce:	441a      	add	r2, r3
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	601a      	str	r2, [r3, #0]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d8:	1ad3      	subs	r3, r2, r3
 80132da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f47f aea8 	bne.w	8013034 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80132ea:	2100      	movs	r1, #0
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7fd fc7a 	bl	8010be6 <unlock_fs>
 80132f2:	2300      	movs	r3, #0
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3730      	adds	r7, #48	; 0x30
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}

080132fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b08a      	sub	sp, #40	; 0x28
 8013300:	af00      	add	r7, sp, #0
 8013302:	60f8      	str	r0, [r7, #12]
 8013304:	60b9      	str	r1, [r7, #8]
 8013306:	607a      	str	r2, [r7, #4]
 8013308:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	2200      	movs	r2, #0
 8013312:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8013314:	68f8      	ldr	r0, [r7, #12]
 8013316:	f7ff fb81 	bl	8012a1c <validate>
 801331a:	4603      	mov	r3, r0
 801331c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801331e:	7dfb      	ldrb	r3, [r7, #23]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d009      	beq.n	8013338 <f_write+0x3c>
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801332a:	7dfa      	ldrb	r2, [r7, #23]
 801332c:	4611      	mov	r1, r2
 801332e:	4618      	mov	r0, r3
 8013330:	f7fd fc59 	bl	8010be6 <unlock_fs>
 8013334:	7dfb      	ldrb	r3, [r7, #23]
 8013336:	e1d4      	b.n	80136e2 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 801333e:	2b00      	cmp	r3, #0
 8013340:	d00d      	beq.n	801335e <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 801334e:	4619      	mov	r1, r3
 8013350:	4610      	mov	r0, r2
 8013352:	f7fd fc48 	bl	8010be6 <unlock_fs>
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 801335c:	e1c1      	b.n	80136e2 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013364:	f003 0302 	and.w	r3, r3, #2
 8013368:	2b00      	cmp	r3, #0
 801336a:	d108      	bne.n	801337e <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013372:	2107      	movs	r1, #7
 8013374:	4618      	mov	r0, r3
 8013376:	f7fd fc36 	bl	8010be6 <unlock_fs>
 801337a:	2307      	movs	r3, #7
 801337c:	e1b1      	b.n	80136e2 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	441a      	add	r2, r3
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801338e:	429a      	cmp	r2, r3
 8013390:	f080 8182 	bcs.w	8013698 <f_write+0x39c>
 8013394:	2300      	movs	r3, #0
 8013396:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8013398:	e17e      	b.n	8013698 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80133a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	f040 813e 	bne.w	8013626 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80133b0:	0a5b      	lsrs	r3, r3, #9
 80133b2:	b2da      	uxtb	r2, r3
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80133ba:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80133be:	3b01      	subs	r3, #1
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	4013      	ands	r3, r2
 80133c4:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80133c6:	7dbb      	ldrb	r3, [r7, #22]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d15f      	bne.n	801348c <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d10f      	bne.n	80133f6 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80133dc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80133de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d121      	bne.n	8013428 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80133ea:	2100      	movs	r1, #0
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7fe f939 	bl	8011664 <create_chain>
 80133f2:	6278      	str	r0, [r7, #36]	; 0x24
 80133f4:	e018      	b.n	8013428 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d008      	beq.n	8013412 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013406:	4619      	mov	r1, r3
 8013408:	68f8      	ldr	r0, [r7, #12]
 801340a:	f7fe f9c8 	bl	801179e <clmt_clust>
 801340e:	6278      	str	r0, [r7, #36]	; 0x24
 8013410:	e00a      	b.n	8013428 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801341e:	4619      	mov	r1, r3
 8013420:	4610      	mov	r0, r2
 8013422:	f7fe f91f 	bl	8011664 <create_chain>
 8013426:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342a:	2b00      	cmp	r3, #0
 801342c:	f000 8139 	beq.w	80136a2 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8013430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013432:	2b01      	cmp	r3, #1
 8013434:	d10c      	bne.n	8013450 <f_write+0x154>
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2202      	movs	r2, #2
 801343a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013444:	2102      	movs	r1, #2
 8013446:	4618      	mov	r0, r3
 8013448:	f7fd fbcd 	bl	8010be6 <unlock_fs>
 801344c:	2302      	movs	r3, #2
 801344e:	e148      	b.n	80136e2 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8013450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013456:	d10c      	bne.n	8013472 <f_write+0x176>
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	2201      	movs	r2, #1
 801345c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013466:	2101      	movs	r1, #1
 8013468:	4618      	mov	r0, r3
 801346a:	f7fd fbbc 	bl	8010be6 <unlock_fs>
 801346e:	2301      	movs	r3, #1
 8013470:	e137      	b.n	80136e2 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013476:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013480:	2b00      	cmp	r3, #0
 8013482:	d103      	bne.n	801348c <f_write+0x190>
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013488:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013496:	2b00      	cmp	r3, #0
 8013498:	d024      	beq.n	80134e4 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80134a0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80134a4:	68f9      	ldr	r1, [r7, #12]
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80134ac:	2301      	movs	r3, #1
 80134ae:	f7fd fad1 	bl	8010a54 <disk_write>
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00c      	beq.n	80134d2 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2201      	movs	r2, #1
 80134bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80134c6:	2101      	movs	r1, #1
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7fd fb8c 	bl	8010be6 <unlock_fs>
 80134ce:	2301      	movs	r3, #1
 80134d0:	e107      	b.n	80136e2 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80134d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134dc:	b2da      	uxtb	r2, r3
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80134f0:	4619      	mov	r1, r3
 80134f2:	4610      	mov	r0, r2
 80134f4:	f7fd fe72 	bl	80111dc <clust2sect>
 80134f8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d10c      	bne.n	801351a <f_write+0x21e>
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	2202      	movs	r2, #2
 8013504:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801350e:	2102      	movs	r1, #2
 8013510:	4618      	mov	r0, r3
 8013512:	f7fd fb68 	bl	8010be6 <unlock_fs>
 8013516:	2302      	movs	r3, #2
 8013518:	e0e3      	b.n	80136e2 <f_write+0x3e6>
			sect += csect;
 801351a:	7dbb      	ldrb	r3, [r7, #22]
 801351c:	693a      	ldr	r2, [r7, #16]
 801351e:	4413      	add	r3, r2
 8013520:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	0a5b      	lsrs	r3, r3, #9
 8013526:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d04f      	beq.n	80135ce <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801352e:	7dba      	ldrb	r2, [r7, #22]
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	4413      	add	r3, r2
 8013534:	68fa      	ldr	r2, [r7, #12]
 8013536:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801353a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 801353e:	4293      	cmp	r3, r2
 8013540:	d908      	bls.n	8013554 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013548:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801354c:	461a      	mov	r2, r3
 801354e:	7dbb      	ldrb	r3, [r7, #22]
 8013550:	1ad3      	subs	r3, r2, r3
 8013552:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801355a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801355e:	69fb      	ldr	r3, [r7, #28]
 8013560:	693a      	ldr	r2, [r7, #16]
 8013562:	69b9      	ldr	r1, [r7, #24]
 8013564:	f7fd fa76 	bl	8010a54 <disk_write>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	d00c      	beq.n	8013588 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2201      	movs	r2, #1
 8013572:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801357c:	2101      	movs	r1, #1
 801357e:	4618      	mov	r0, r3
 8013580:	f7fd fb31 	bl	8010be6 <unlock_fs>
 8013584:	2301      	movs	r3, #1
 8013586:	e0ac      	b.n	80136e2 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	1ad3      	subs	r3, r2, r3
 8013592:	69fa      	ldr	r2, [r7, #28]
 8013594:	429a      	cmp	r2, r3
 8013596:	d916      	bls.n	80135c6 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8013598:	68f8      	ldr	r0, [r7, #12]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	1ad3      	subs	r3, r2, r3
 80135a4:	025b      	lsls	r3, r3, #9
 80135a6:	69ba      	ldr	r2, [r7, #24]
 80135a8:	4413      	add	r3, r2
 80135aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135ae:	4619      	mov	r1, r3
 80135b0:	f7fd fa8e 	bl	8010ad0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80135ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80135be:	b2da      	uxtb	r2, r3
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80135c6:	69fb      	ldr	r3, [r7, #28]
 80135c8:	025b      	lsls	r3, r3, #9
 80135ca:	623b      	str	r3, [r7, #32]
				continue;
 80135cc:	e04e      	b.n	801366c <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80135d4:	693a      	ldr	r2, [r7, #16]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d021      	beq.n	801361e <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d219      	bcs.n	801361e <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80135f0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80135f4:	68f9      	ldr	r1, [r7, #12]
 80135f6:	2301      	movs	r3, #1
 80135f8:	693a      	ldr	r2, [r7, #16]
 80135fa:	f7fd fa0b 	bl	8010a14 <disk_read>
 80135fe:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8013600:	2b00      	cmp	r3, #0
 8013602:	d00c      	beq.n	801361e <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2201      	movs	r2, #1
 8013608:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013612:	2101      	movs	r1, #1
 8013614:	4618      	mov	r0, r3
 8013616:	f7fd fae6 	bl	8010be6 <unlock_fs>
 801361a:	2301      	movs	r3, #1
 801361c:	e061      	b.n	80136e2 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	693a      	ldr	r2, [r7, #16]
 8013622:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801362c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013630:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013634:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8013636:	6a3a      	ldr	r2, [r7, #32]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	429a      	cmp	r2, r3
 801363c:	d901      	bls.n	8013642 <f_write+0x346>
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801364c:	68fa      	ldr	r2, [r7, #12]
 801364e:	4413      	add	r3, r2
 8013650:	6a3a      	ldr	r2, [r7, #32]
 8013652:	69b9      	ldr	r1, [r7, #24]
 8013654:	4618      	mov	r0, r3
 8013656:	f7fd fa3b 	bl	8010ad0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013664:	b2da      	uxtb	r2, r3
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 801366c:	69ba      	ldr	r2, [r7, #24]
 801366e:	6a3b      	ldr	r3, [r7, #32]
 8013670:	4413      	add	r3, r2
 8013672:	61bb      	str	r3, [r7, #24]
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801367a:	6a3b      	ldr	r3, [r7, #32]
 801367c:	441a      	add	r2, r3
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	681a      	ldr	r2, [r3, #0]
 8013688:	6a3b      	ldr	r3, [r7, #32]
 801368a:	441a      	add	r2, r3
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	601a      	str	r2, [r3, #0]
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	6a3b      	ldr	r3, [r7, #32]
 8013694:	1ad3      	subs	r3, r2, r3
 8013696:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2b00      	cmp	r3, #0
 801369c:	f47f ae7d 	bne.w	801339a <f_write+0x9e>
 80136a0:	e000      	b.n	80136a4 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80136a2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d905      	bls.n	80136c0 <f_write+0x3c4>
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80136c6:	f043 0320 	orr.w	r3, r3, #32
 80136ca:	b2da      	uxtb	r2, r3
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80136d8:	2100      	movs	r1, #0
 80136da:	4618      	mov	r0, r3
 80136dc:	f7fd fa83 	bl	8010be6 <unlock_fs>
 80136e0:	2300      	movs	r3, #0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3728      	adds	r7, #40	; 0x28
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}

080136ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80136ea:	b580      	push	{r7, lr}
 80136ec:	b086      	sub	sp, #24
 80136ee:	af00      	add	r7, sp, #0
 80136f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7ff f992 	bl	8012a1c <validate>
 80136f8:	4603      	mov	r3, r0
 80136fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80136fc:	7dfb      	ldrb	r3, [r7, #23]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	f040 80af 	bne.w	8013862 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801370a:	f003 0320 	and.w	r3, r3, #32
 801370e:	2b00      	cmp	r3, #0
 8013710:	f000 80a7 	beq.w	8013862 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801371e:	2b00      	cmp	r3, #0
 8013720:	d020      	beq.n	8013764 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013728:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801372c:	6879      	ldr	r1, [r7, #4]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013734:	2301      	movs	r3, #1
 8013736:	f7fd f98d 	bl	8010a54 <disk_write>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d008      	beq.n	8013752 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013746:	2101      	movs	r1, #1
 8013748:	4618      	mov	r0, r3
 801374a:	f7fd fa4c 	bl	8010be6 <unlock_fs>
 801374e:	2301      	movs	r3, #1
 8013750:	e090      	b.n	8013874 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801375c:	b2da      	uxtb	r2, r3
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8013770:	4619      	mov	r1, r3
 8013772:	4610      	mov	r0, r2
 8013774:	f7fd fc57 	bl	8011026 <move_window>
 8013778:	4603      	mov	r3, r0
 801377a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 801377c:	7dfb      	ldrb	r3, [r7, #23]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d16f      	bne.n	8013862 <f_sync+0x178>
				dir = fp->dir_ptr;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013788:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	330b      	adds	r3, #11
 801378e:	781a      	ldrb	r2, [r3, #0]
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	330b      	adds	r3, #11
 8013794:	f042 0220 	orr.w	r2, r2, #32
 8013798:	b2d2      	uxtb	r2, r2
 801379a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	331c      	adds	r3, #28
 80137a6:	b2d2      	uxtb	r2, r2
 80137a8:	701a      	strb	r2, [r3, #0]
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	0a1b      	lsrs	r3, r3, #8
 80137b4:	b29a      	uxth	r2, r3
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	331d      	adds	r3, #29
 80137ba:	b2d2      	uxtb	r2, r2
 80137bc:	701a      	strb	r2, [r3, #0]
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80137c4:	0c1a      	lsrs	r2, r3, #16
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	331e      	adds	r3, #30
 80137ca:	b2d2      	uxtb	r2, r2
 80137cc:	701a      	strb	r2, [r3, #0]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80137d4:	0e1a      	lsrs	r2, r3, #24
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	331f      	adds	r3, #31
 80137da:	b2d2      	uxtb	r2, r2
 80137dc:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80137e4:	4619      	mov	r1, r3
 80137e6:	6938      	ldr	r0, [r7, #16]
 80137e8:	f7fe fa11 	bl	8011c0e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80137ec:	f7fc fa5c 	bl	800fca8 <get_fattime>
 80137f0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	3316      	adds	r3, #22
 80137f6:	68fa      	ldr	r2, [r7, #12]
 80137f8:	b2d2      	uxtb	r2, r2
 80137fa:	701a      	strb	r2, [r3, #0]
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	b29b      	uxth	r3, r3
 8013800:	0a1b      	lsrs	r3, r3, #8
 8013802:	b29a      	uxth	r2, r3
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	3317      	adds	r3, #23
 8013808:	b2d2      	uxtb	r2, r2
 801380a:	701a      	strb	r2, [r3, #0]
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	0c1a      	lsrs	r2, r3, #16
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	3318      	adds	r3, #24
 8013814:	b2d2      	uxtb	r2, r2
 8013816:	701a      	strb	r2, [r3, #0]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	0e1a      	lsrs	r2, r3, #24
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	3319      	adds	r3, #25
 8013820:	b2d2      	uxtb	r2, r2
 8013822:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	3312      	adds	r3, #18
 8013828:	2200      	movs	r2, #0
 801382a:	701a      	strb	r2, [r3, #0]
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	3313      	adds	r3, #19
 8013830:	2200      	movs	r2, #0
 8013832:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801383a:	f023 0320 	bic.w	r3, r3, #32
 801383e:	b2da      	uxtb	r2, r3
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801384c:	2201      	movs	r2, #1
 801384e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013858:	4618      	mov	r0, r3
 801385a:	f7fd fc12 	bl	8011082 <sync_fs>
 801385e:	4603      	mov	r3, r0
 8013860:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013868:	7dfa      	ldrb	r2, [r7, #23]
 801386a:	4611      	mov	r1, r2
 801386c:	4618      	mov	r0, r3
 801386e:	f7fd f9ba 	bl	8010be6 <unlock_fs>
 8013872:	7dfb      	ldrb	r3, [r7, #23]
}
 8013874:	4618      	mov	r0, r3
 8013876:	3718      	adds	r7, #24
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f7ff ff30 	bl	80136ea <f_sync>
 801388a:	4603      	mov	r3, r0
 801388c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801388e:	7bfb      	ldrb	r3, [r7, #15]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d11e      	bne.n	80138d2 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7ff f8c1 	bl	8012a1c <validate>
 801389a:	4603      	mov	r3, r0
 801389c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801389e:	7bfb      	ldrb	r3, [r7, #15]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d116      	bne.n	80138d2 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80138aa:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7fd fb00 	bl	8010eb8 <dec_lock>
 80138b8:	4603      	mov	r3, r0
 80138ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80138bc:	7bfb      	ldrb	r3, [r7, #15]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d103      	bne.n	80138ca <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80138ca:	2100      	movs	r1, #0
 80138cc:	68b8      	ldr	r0, [r7, #8]
 80138ce:	f7fd f98a 	bl	8010be6 <unlock_fs>
#endif
		}
	}
	return res;
 80138d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3710      	adds	r7, #16
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}

080138dc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b090      	sub	sp, #64	; 0x40
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ff f898 	bl	8012a1c <validate>
 80138ec:	4603      	mov	r3, r0
 80138ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80138f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d00b      	beq.n	8013912 <f_lseek+0x36>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013900:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013904:	4611      	mov	r1, r2
 8013906:	4618      	mov	r0, r3
 8013908:	f7fd f96d 	bl	8010be6 <unlock_fs>
 801390c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013910:	e2af      	b.n	8013e72 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8013918:	2b00      	cmp	r3, #0
 801391a:	d00d      	beq.n	8013938 <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8013928:	4619      	mov	r1, r3
 801392a:	4610      	mov	r0, r2
 801392c:	f7fd f95b 	bl	8010be6 <unlock_fs>
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8013936:	e29c      	b.n	8013e72 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801393e:	2b00      	cmp	r3, #0
 8013940:	f000 8115 	beq.w	8013b6e <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801394a:	d172      	bne.n	8013a32 <f_lseek+0x156>
			tbl = fp->cltbl;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8013952:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013956:	1d1a      	adds	r2, r3, #4
 8013958:	627a      	str	r2, [r7, #36]	; 0x24
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	617b      	str	r3, [r7, #20]
 801395e:	2302      	movs	r3, #2
 8013960:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013968:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396c:	2b00      	cmp	r3, #0
 801396e:	d04f      	beq.n	8013a10 <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013972:	613b      	str	r3, [r7, #16]
 8013974:	2300      	movs	r3, #0
 8013976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397a:	3302      	adds	r3, #2
 801397c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013980:	60fb      	str	r3, [r7, #12]
 8013982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013984:	3301      	adds	r3, #1
 8013986:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801398e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013990:	4618      	mov	r0, r3
 8013992:	f7fd fc45 	bl	8011220 <get_fat>
 8013996:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8013998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399a:	2b01      	cmp	r3, #1
 801399c:	d80c      	bhi.n	80139b8 <f_lseek+0xdc>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2202      	movs	r2, #2
 80139a2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80139ac:	2102      	movs	r1, #2
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7fd f919 	bl	8010be6 <unlock_fs>
 80139b4:	2302      	movs	r3, #2
 80139b6:	e25c      	b.n	8013e72 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80139b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139be:	d10c      	bne.n	80139da <f_lseek+0xfe>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2201      	movs	r2, #1
 80139c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80139ce:	2101      	movs	r1, #1
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7fd f908 	bl	8010be6 <unlock_fs>
 80139d6:	2301      	movs	r3, #1
 80139d8:	e24b      	b.n	8013e72 <f_lseek+0x596>
					} while (cl == pcl + 1);
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	3301      	adds	r3, #1
 80139de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d0cc      	beq.n	801397e <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80139e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d809      	bhi.n	8013a00 <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 80139ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ee:	1d1a      	adds	r2, r3, #4
 80139f0:	627a      	str	r2, [r7, #36]	; 0x24
 80139f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139f4:	601a      	str	r2, [r3, #0]
 80139f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f8:	1d1a      	adds	r2, r3, #4
 80139fa:	627a      	str	r2, [r7, #36]	; 0x24
 80139fc:	693a      	ldr	r2, [r7, #16]
 80139fe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013a06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d3af      	bcc.n	8013970 <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8013a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a18:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8013a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	d803      	bhi.n	8013a2a <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 8013a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a24:	2200      	movs	r2, #0
 8013a26:	601a      	str	r2, [r3, #0]
 8013a28:	e218      	b.n	8013e5c <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013a2a:	2311      	movs	r3, #17
 8013a2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013a30:	e214      	b.n	8013e5c <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013a38:	683a      	ldr	r2, [r7, #0]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d903      	bls.n	8013a46 <f_lseek+0x16a>
				ofs = fp->fsize;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013a44:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	683a      	ldr	r2, [r7, #0]
 8013a4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	f000 8203 	beq.w	8013e5c <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	3b01      	subs	r3, #1
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f7fd fe9e 	bl	801179e <clmt_clust>
 8013a62:	4602      	mov	r2, r0
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013a76:	4619      	mov	r1, r3
 8013a78:	4610      	mov	r0, r2
 8013a7a:	f7fd fbaf 	bl	80111dc <clust2sect>
 8013a7e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8013a80:	69bb      	ldr	r3, [r7, #24]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d10c      	bne.n	8013aa0 <f_lseek+0x1c4>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2202      	movs	r2, #2
 8013a8a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013a94:	2102      	movs	r1, #2
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7fd f8a5 	bl	8010be6 <unlock_fs>
 8013a9c:	2302      	movs	r3, #2
 8013a9e:	e1e8      	b.n	8013e72 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	3b01      	subs	r3, #1
 8013aa4:	0a5b      	lsrs	r3, r3, #9
 8013aa6:	687a      	ldr	r2, [r7, #4]
 8013aa8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8013aac:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8013ab0:	3a01      	subs	r2, #1
 8013ab2:	4013      	ands	r3, r2
 8013ab4:	69ba      	ldr	r2, [r7, #24]
 8013ab6:	4413      	add	r3, r2
 8013ab8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	f000 81c9 	beq.w	8013e5c <f_lseek+0x580>
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013ad0:	69ba      	ldr	r2, [r7, #24]
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	f000 81c2 	beq.w	8013e5c <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d024      	beq.n	8013b30 <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013aec:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013af0:	6879      	ldr	r1, [r7, #4]
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013af8:	2301      	movs	r3, #1
 8013afa:	f7fc ffab 	bl	8010a54 <disk_write>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d00c      	beq.n	8013b1e <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2201      	movs	r2, #1
 8013b08:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013b12:	2101      	movs	r1, #1
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7fd f866 	bl	8010be6 <unlock_fs>
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	e1a9      	b.n	8013e72 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013b28:	b2da      	uxtb	r2, r3
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013b36:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013b3a:	6879      	ldr	r1, [r7, #4]
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	69ba      	ldr	r2, [r7, #24]
 8013b40:	f7fc ff68 	bl	8010a14 <disk_read>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d00c      	beq.n	8013b64 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013b58:	2101      	movs	r1, #1
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fd f843 	bl	8010be6 <unlock_fs>
 8013b60:	2301      	movs	r3, #1
 8013b62:	e186      	b.n	8013e72 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	69ba      	ldr	r2, [r7, #24]
 8013b68:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8013b6c:	e176      	b.n	8013e5c <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013b74:	683a      	ldr	r2, [r7, #0]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d90a      	bls.n	8013b90 <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013b80:	f003 0302 	and.w	r3, r3, #2
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d103      	bne.n	8013b90 <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013b8e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013b96:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ba0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	f000 80ea 	beq.w	8013d80 <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013bb2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8013bb6:	025b      	lsls	r3, r3, #9
 8013bb8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013bba:	6a3b      	ldr	r3, [r7, #32]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d01e      	beq.n	8013bfe <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	1e5a      	subs	r2, r3, #1
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8013bca:	6a3b      	ldr	r3, [r7, #32]
 8013bcc:	1e59      	subs	r1, r3, #1
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d312      	bcc.n	8013bfe <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8013bd8:	6a3b      	ldr	r3, [r7, #32]
 8013bda:	1e5a      	subs	r2, r3, #1
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	425b      	negs	r3, r3
 8013be0:	401a      	ands	r2, r3
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013bee:	683a      	ldr	r2, [r7, #0]
 8013bf0:	1ad3      	subs	r3, r2, r3
 8013bf2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8013bfc:	e037      	b.n	8013c6e <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013c04:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d12c      	bne.n	8013c66 <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c12:	2100      	movs	r1, #0
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fd fd25 	bl	8011664 <create_chain>
 8013c1a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8013c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d10c      	bne.n	8013c3c <f_lseek+0x360>
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	2202      	movs	r2, #2
 8013c26:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c30:	2102      	movs	r1, #2
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fc ffd7 	bl	8010be6 <unlock_fs>
 8013c38:	2302      	movs	r3, #2
 8013c3a:	e11a      	b.n	8013e72 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8013c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c42:	d10c      	bne.n	8013c5e <f_lseek+0x382>
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2201      	movs	r2, #1
 8013c48:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c52:	2101      	movs	r1, #1
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7fc ffc6 	bl	8010be6 <unlock_fs>
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	e109      	b.n	8013e72 <f_lseek+0x596>
					fp->sclust = clst;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8013c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f000 8085 	beq.w	8013d80 <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 8013c76:	e055      	b.n	8013d24 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013c7e:	f003 0302 	and.w	r3, r3, #2
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d00d      	beq.n	8013ca2 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7fd fce8 	bl	8011664 <create_chain>
 8013c94:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8013c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d10a      	bne.n	8013cb2 <f_lseek+0x3d6>
							ofs = bcs; break;
 8013c9c:	69fb      	ldr	r3, [r7, #28]
 8013c9e:	603b      	str	r3, [r7, #0]
 8013ca0:	e044      	b.n	8013d2c <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fd fab8 	bl	8011220 <get_fat>
 8013cb0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8013cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cb8:	d10c      	bne.n	8013cd4 <f_lseek+0x3f8>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013cc8:	2101      	movs	r1, #1
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7fc ff8b 	bl	8010be6 <unlock_fs>
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e0ce      	b.n	8013e72 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8013cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d907      	bls.n	8013cea <f_lseek+0x40e>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013ce0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d30c      	bcc.n	8013d04 <f_lseek+0x428>
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2202      	movs	r2, #2
 8013cee:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013cf8:	2102      	movs	r1, #2
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fc ff73 	bl	8010be6 <unlock_fs>
 8013d00:	2302      	movs	r3, #2
 8013d02:	e0b6      	b.n	8013e72 <f_lseek+0x596>
					fp->clust = clst;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	441a      	add	r2, r3
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8013d1c:	683a      	ldr	r2, [r7, #0]
 8013d1e:	69fb      	ldr	r3, [r7, #28]
 8013d20:	1ad3      	subs	r3, r2, r3
 8013d22:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8013d24:	683a      	ldr	r2, [r7, #0]
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d8a5      	bhi.n	8013c78 <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	441a      	add	r2, r3
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d01c      	beq.n	8013d80 <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fd fa44 	bl	80111dc <clust2sect>
 8013d54:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8013d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d10c      	bne.n	8013d76 <f_lseek+0x49a>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2202      	movs	r2, #2
 8013d60:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013d6a:	2102      	movs	r1, #2
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7fc ff3a 	bl	8010be6 <unlock_fs>
 8013d72:	2302      	movs	r3, #2
 8013d74:	e07d      	b.n	8013e72 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	0a5b      	lsrs	r3, r3, #9
 8013d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d7c:	4413      	add	r3, r2
 8013d7e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d04f      	beq.n	8013e2e <f_lseek+0x552>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d049      	beq.n	8013e2e <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d024      	beq.n	8013df2 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013dae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013db2:	6879      	ldr	r1, [r7, #4]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013dba:	2301      	movs	r3, #1
 8013dbc:	f7fc fe4a 	bl	8010a54 <disk_write>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d00c      	beq.n	8013de0 <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2201      	movs	r2, #1
 8013dca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7fc ff05 	bl	8010be6 <unlock_fs>
 8013ddc:	2301      	movs	r3, #1
 8013dde:	e048      	b.n	8013e72 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013dea:	b2da      	uxtb	r2, r3
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013df8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013dfc:	6879      	ldr	r1, [r7, #4]
 8013dfe:	2301      	movs	r3, #1
 8013e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e02:	f7fc fe07 	bl	8010a14 <disk_read>
 8013e06:	4603      	mov	r3, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d00c      	beq.n	8013e26 <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2201      	movs	r2, #1
 8013e10:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013e1a:	2101      	movs	r1, #1
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7fc fee2 	bl	8010be6 <unlock_fs>
 8013e22:	2301      	movs	r3, #1
 8013e24:	e025      	b.n	8013e72 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d90e      	bls.n	8013e5c <f_lseek+0x580>
			fp->fsize = fp->fptr;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8013e50:	f043 0320 	orr.w	r3, r3, #32
 8013e54:	b2da      	uxtb	r2, r3
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013e62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013e66:	4611      	mov	r1, r2
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7fc febc 	bl	8010be6 <unlock_fs>
 8013e6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3740      	adds	r7, #64	; 0x40
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}

08013e7a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013e7a:	b580      	push	{r7, lr}
 8013e7c:	b088      	sub	sp, #32
 8013e7e:	af00      	add	r7, sp, #0
 8013e80:	6078      	str	r0, [r7, #4]
 8013e82:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d101      	bne.n	8013e8e <f_opendir+0x14>
 8013e8a:	2309      	movs	r3, #9
 8013e8c:	e079      	b.n	8013f82 <f_opendir+0x108>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8013e8e:	4639      	mov	r1, r7
 8013e90:	f107 0318 	add.w	r3, r7, #24
 8013e94:	2200      	movs	r2, #0
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7fe faee 	bl	8012478 <find_volume>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8013ea0:	7ffb      	ldrb	r3, [r7, #31]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d15f      	bne.n	8013f66 <f_opendir+0xec>
		dp->fs = fs;
 8013ea6:	69ba      	ldr	r2, [r7, #24]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f107 020c 	add.w	r2, r7, #12
 8013eb4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	4619      	mov	r1, r3
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f7fe f9bf 	bl	8012240 <follow_path>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8013ec6:	7ffb      	ldrb	r3, [r7, #31]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d147      	bne.n	8013f5c <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d017      	beq.n	8013f06 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013edc:	330b      	adds	r3, #11
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	f003 0310 	and.w	r3, r3, #16
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d00c      	beq.n	8013f02 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8013ee8:	69ba      	ldr	r2, [r7, #24]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	4610      	mov	r0, r2
 8013ef4:	f7fd fe5d 	bl	8011bb2 <ld_clust>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8013f00:	e001      	b.n	8013f06 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8013f02:	2305      	movs	r3, #5
 8013f04:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8013f06:	7ffb      	ldrb	r3, [r7, #31]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d127      	bne.n	8013f5c <f_opendir+0xe2>
				dp->id = fs->id;
 8013f0c:	69bb      	ldr	r3, [r7, #24]
 8013f0e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013f18:	2100      	movs	r1, #0
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f7fd fc74 	bl	8011808 <dir_sdi>
 8013f20:	4603      	mov	r3, r0
 8013f22:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8013f24:	7ffb      	ldrb	r3, [r7, #31]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d118      	bne.n	8013f5c <f_opendir+0xe2>
					if (dp->sclust) {
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d00f      	beq.n	8013f54 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013f34:	2100      	movs	r1, #0
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7fc ff06 	bl	8010d48 <inc_lock>
 8013f3c:	4602      	mov	r2, r0
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d106      	bne.n	8013f5c <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8013f4e:	2312      	movs	r3, #18
 8013f50:	77fb      	strb	r3, [r7, #31]
 8013f52:	e003      	b.n	8013f5c <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2200      	movs	r2, #0
 8013f58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013f5c:	7ffb      	ldrb	r3, [r7, #31]
 8013f5e:	2b04      	cmp	r3, #4
 8013f60:	d101      	bne.n	8013f66 <f_opendir+0xec>
 8013f62:	2305      	movs	r3, #5
 8013f64:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8013f66:	7ffb      	ldrb	r3, [r7, #31]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d003      	beq.n	8013f74 <f_opendir+0xfa>
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8013f74:	69bb      	ldr	r3, [r7, #24]
 8013f76:	7ffa      	ldrb	r2, [r7, #31]
 8013f78:	4611      	mov	r1, r2
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7fc fe33 	bl	8010be6 <unlock_fs>
 8013f80:	7ffb      	ldrb	r3, [r7, #31]
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3720      	adds	r7, #32
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}

08013f8a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013f8a:	b580      	push	{r7, lr}
 8013f8c:	b086      	sub	sp, #24
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
 8013f92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f7fe fd41 	bl	8012a1c <validate>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013f9e:	7dfb      	ldrb	r3, [r7, #23]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d133      	bne.n	801400c <f_readdir+0x82>
		if (!fno) {
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d106      	bne.n	8013fb8 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013faa:	2100      	movs	r1, #0
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f7fd fc2b 	bl	8011808 <dir_sdi>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	75fb      	strb	r3, [r7, #23]
 8013fb6:	e029      	b.n	801400c <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f107 0208 	add.w	r2, r7, #8
 8013fbe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8013fc2:	2100      	movs	r1, #0
 8013fc4:	6878      	ldr	r0, [r7, #4]
 8013fc6:	f7fd fe98 	bl	8011cfa <dir_read>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8013fce:	7dfb      	ldrb	r3, [r7, #23]
 8013fd0:	2b04      	cmp	r3, #4
 8013fd2:	d105      	bne.n	8013fe0 <f_readdir+0x56>
				dp->sect = 0;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 8013fdc:	2300      	movs	r3, #0
 8013fde:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8013fe0:	7dfb      	ldrb	r3, [r7, #23]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d112      	bne.n	801400c <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013fe6:	6839      	ldr	r1, [r7, #0]
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f7fd ff55 	bl	8011e98 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013fee:	2100      	movs	r1, #0
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f7fd fc9d 	bl	8011930 <dir_next>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8013ffa:	7dfb      	ldrb	r3, [r7, #23]
 8013ffc:	2b04      	cmp	r3, #4
 8013ffe:	d105      	bne.n	801400c <f_readdir+0x82>
					dp->sect = 0;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2200      	movs	r2, #0
 8014004:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8014008:	2300      	movs	r3, #0
 801400a:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014012:	7dfa      	ldrb	r2, [r7, #23]
 8014014:	4611      	mov	r1, r2
 8014016:	4618      	mov	r0, r3
 8014018:	f7fc fde5 	bl	8010be6 <unlock_fs>
 801401c:	7dfb      	ldrb	r3, [r7, #23]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3718      	adds	r7, #24
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}

08014026 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8014026:	b580      	push	{r7, lr}
 8014028:	b084      	sub	sp, #16
 801402a:	af00      	add	r7, sp, #0
 801402c:	6078      	str	r0, [r7, #4]
 801402e:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8014030:	6839      	ldr	r1, [r7, #0]
 8014032:	6878      	ldr	r0, [r7, #4]
 8014034:	f7ff ffa9 	bl	8013f8a <f_readdir>
 8014038:	4603      	mov	r3, r0
 801403a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801403c:	7bfb      	ldrb	r3, [r7, #15]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d115      	bne.n	801406e <f_findnext+0x48>
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d012      	beq.n	801406e <f_findnext+0x48>
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	7a5b      	ldrb	r3, [r3, #9]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d00e      	beq.n	801406e <f_findnext+0x48>
#if _USE_LFN
		if (fno->lfname && pattern_matching(dp->pat, fno->lfname, 0, 0)) break;	/* Test for LFN if exist */
#endif
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	f103 0109 	add.w	r1, r3, #9
 801405c:	2300      	movs	r3, #0
 801405e:	2200      	movs	r2, #0
 8014060:	f7fd ffb2 	bl	8011fc8 <pattern_matching>
 8014064:	4603      	mov	r3, r0
 8014066:	2b00      	cmp	r3, #0
 8014068:	d100      	bne.n	801406c <f_findnext+0x46>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801406a:	e7e1      	b.n	8014030 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
 801406c:	bf00      	nop
	}
	return res;
 801406e:	7bfb      	ldrb	r3, [r7, #15]

}
 8014070:	4618      	mov	r0, r3
 8014072:	3710      	adds	r7, #16
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b086      	sub	sp, #24
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
 8014084:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	683a      	ldr	r2, [r7, #0]
 801408a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	res = f_opendir(dp, path);		/* Open the target directory */
 801408e:	6879      	ldr	r1, [r7, #4]
 8014090:	68f8      	ldr	r0, [r7, #12]
 8014092:	f7ff fef2 	bl	8013e7a <f_opendir>
 8014096:	4603      	mov	r3, r0
 8014098:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK)
 801409a:	7dfb      	ldrb	r3, [r7, #23]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d105      	bne.n	80140ac <f_findfirst+0x34>
		res = f_findnext(dp, fno);	/* Find the first item */
 80140a0:	68b9      	ldr	r1, [r7, #8]
 80140a2:	68f8      	ldr	r0, [r7, #12]
 80140a4:	f7ff ffbf 	bl	8014026 <f_findnext>
 80140a8:	4603      	mov	r3, r0
 80140aa:	75fb      	strb	r3, [r7, #23]
	return res;
 80140ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3718      	adds	r7, #24
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}

080140b6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80140b6:	b580      	push	{r7, lr}
 80140b8:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80140bc:	af00      	add	r7, sp, #0
 80140be:	1d3b      	adds	r3, r7, #4
 80140c0:	6018      	str	r0, [r3, #0]
 80140c2:	463b      	mov	r3, r7
 80140c4:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 80140c6:	1d39      	adds	r1, r7, #4
 80140c8:	f107 0318 	add.w	r3, r7, #24
 80140cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80140d0:	2200      	movs	r2, #0
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fe f9d0 	bl	8012478 <find_volume>
 80140d8:	4603      	mov	r3, r0
 80140da:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 80140de:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d129      	bne.n	801413a <f_stat+0x84>
		INIT_BUF(dj);
 80140e6:	f107 0318 	add.w	r3, r7, #24
 80140ea:	f107 020c 	add.w	r2, r7, #12
 80140ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80140f2:	1d3b      	adds	r3, r7, #4
 80140f4:	681a      	ldr	r2, [r3, #0]
 80140f6:	f107 0318 	add.w	r3, r7, #24
 80140fa:	4611      	mov	r1, r2
 80140fc:	4618      	mov	r0, r3
 80140fe:	f7fe f89f 	bl	8012240 <follow_path>
 8014102:	4603      	mov	r3, r0
 8014104:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8014108:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 801410c:	2b00      	cmp	r3, #0
 801410e:	d114      	bne.n	801413a <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 8014110:	f107 0318 	add.w	r3, r7, #24
 8014114:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014118:	2b00      	cmp	r3, #0
 801411a:	d00b      	beq.n	8014134 <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 801411c:	463b      	mov	r3, r7
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d00a      	beq.n	801413a <f_stat+0x84>
 8014124:	463b      	mov	r3, r7
 8014126:	f107 0218 	add.w	r2, r7, #24
 801412a:	6819      	ldr	r1, [r3, #0]
 801412c:	4610      	mov	r0, r2
 801412e:	f7fd feb3 	bl	8011e98 <get_fileinfo>
 8014132:	e002      	b.n	801413a <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8014134:	2306      	movs	r3, #6
 8014136:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 801413a:	f107 0318 	add.w	r3, r7, #24
 801413e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014142:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 8014146:	4611      	mov	r1, r2
 8014148:	4618      	mov	r0, r3
 801414a:	f7fc fd4c 	bl	8010be6 <unlock_fs>
 801414e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8014152:	4618      	mov	r0, r3
 8014154:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8014162:	af00      	add	r7, sp, #0
 8014164:	1d3b      	adds	r3, r7, #4
 8014166:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 8014168:	2300      	movs	r3, #0
 801416a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 801416e:	1d39      	adds	r1, r7, #4
 8014170:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8014174:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014178:	2201      	movs	r2, #1
 801417a:	4618      	mov	r0, r3
 801417c:	f7fe f97c 	bl	8012478 <find_volume>
 8014180:	4603      	mov	r3, r0
 8014182:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	if (res == FR_OK) {
 8014186:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 801418a:	2b00      	cmp	r3, #0
 801418c:	f040 80b8 	bne.w	8014300 <f_unlink+0x1a4>
		INIT_BUF(dj);
 8014190:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8014194:	f107 0208 	add.w	r2, r7, #8
 8014198:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);		/* Follow the file path */
 801419c:	1d3b      	adds	r3, r7, #4
 801419e:	681a      	ldr	r2, [r3, #0]
 80141a0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80141a4:	4611      	mov	r1, r2
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7fe f84a 	bl	8012240 <follow_path>
 80141ac:	4603      	mov	r3, r0
 80141ae:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 80141b2:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d108      	bne.n	80141cc <f_unlink+0x70>
 80141ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80141be:	2102      	movs	r1, #2
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7fc fd2f 	bl	8010c24 <chk_lock>
 80141c6:	4603      	mov	r3, r0
 80141c8:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80141cc:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	f040 8095 	bne.w	8014300 <f_unlink+0x1a4>
			dir = dj.dir;
 80141d6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80141da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80141de:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
			if (!dir) {
 80141e2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d103      	bne.n	80141f2 <f_unlink+0x96>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80141ea:	2306      	movs	r3, #6
 80141ec:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 80141f0:	e00a      	b.n	8014208 <f_unlink+0xac>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 80141f2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80141f6:	330b      	adds	r3, #11
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	f003 0301 	and.w	r3, r3, #1
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d002      	beq.n	8014208 <f_unlink+0xac>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014202:	2307      	movs	r3, #7
 8014204:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
			}
			if (res == FR_OK) {
 8014208:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 801420c:	2b00      	cmp	r3, #0
 801420e:	d149      	bne.n	80142a4 <f_unlink+0x148>
				dclst = ld_clust(dj.fs, dir);
 8014210:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8014214:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014218:	f8d7 145c 	ldr.w	r1, [r7, #1116]	; 0x45c
 801421c:	4618      	mov	r0, r3
 801421e:	f7fd fcc8 	bl	8011bb2 <ld_clust>
 8014222:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 8014226:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 801422a:	2b00      	cmp	r3, #0
 801422c:	d03a      	beq.n	80142a4 <f_unlink+0x148>
 801422e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8014232:	330b      	adds	r3, #11
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	f003 0310 	and.w	r3, r3, #16
 801423a:	2b00      	cmp	r3, #0
 801423c:	d032      	beq.n	80142a4 <f_unlink+0x148>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 801423e:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8014242:	f107 0314 	add.w	r3, r7, #20
 8014246:	f44f 7209 	mov.w	r2, #548	; 0x224
 801424a:	4618      	mov	r0, r3
 801424c:	f7fc fc40 	bl	8010ad0 <mem_cpy>
						sdj.sclust = dclst;
 8014250:	f107 0314 	add.w	r3, r7, #20
 8014254:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8014258:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
						res = dir_sdi(&sdj, 2);
 801425c:	f107 0314 	add.w	r3, r7, #20
 8014260:	2102      	movs	r1, #2
 8014262:	4618      	mov	r0, r3
 8014264:	f7fd fad0 	bl	8011808 <dir_sdi>
 8014268:	4603      	mov	r3, r0
 801426a:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
						if (res == FR_OK) {
 801426e:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 8014272:	2b00      	cmp	r3, #0
 8014274:	d116      	bne.n	80142a4 <f_unlink+0x148>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8014276:	f107 0314 	add.w	r3, r7, #20
 801427a:	2100      	movs	r1, #0
 801427c:	4618      	mov	r0, r3
 801427e:	f7fd fd3c 	bl	8011cfa <dir_read>
 8014282:	4603      	mov	r3, r0
 8014284:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8014288:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 801428c:	2b00      	cmp	r3, #0
 801428e:	d102      	bne.n	8014296 <f_unlink+0x13a>
 8014290:	2307      	movs	r3, #7
 8014292:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 8014296:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 801429a:	2b04      	cmp	r3, #4
 801429c:	d102      	bne.n	80142a4 <f_unlink+0x148>
 801429e:	2300      	movs	r3, #0
 80142a0:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
						}
					}
				}
			}
			if (res == FR_OK) {
 80142a4:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d129      	bne.n	8014300 <f_unlink+0x1a4>
				res = dir_remove(&dj);		/* Remove the directory entry */
 80142ac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fd fdba 	bl	8011e2a <dir_remove>
 80142b6:	4603      	mov	r3, r0
 80142b8:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 80142bc:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d10f      	bne.n	80142e4 <f_unlink+0x188>
 80142c4:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d00b      	beq.n	80142e4 <f_unlink+0x188>
					res = remove_chain(dj.fs, dclst);
 80142cc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80142d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80142d4:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 80142d8:	4618      	mov	r0, r3
 80142da:	f7fd f969 	bl	80115b0 <remove_chain>
 80142de:	4603      	mov	r3, r0
 80142e0:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
				if (res == FR_OK) res = sync_fs(dj.fs);
 80142e4:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d109      	bne.n	8014300 <f_unlink+0x1a4>
 80142ec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80142f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fc fec4 	bl	8011082 <sync_fs>
 80142fa:	4603      	mov	r3, r0
 80142fc:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8014300:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8014304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014308:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 801430c:	4611      	mov	r1, r2
 801430e:	4618      	mov	r0, r3
 8014310:	f7fc fc69 	bl	8010be6 <unlock_fs>
 8014314:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
}
 8014318:	4618      	mov	r0, r3
 801431a:	f507 678d 	add.w	r7, r7, #1128	; 0x468
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}

08014322 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8014322:	b580      	push	{r7, lr}
 8014324:	b084      	sub	sp, #16
 8014326:	af00      	add	r7, sp, #0
 8014328:	6078      	str	r0, [r7, #4]
 801432a:	460b      	mov	r3, r1
 801432c:	70fb      	strb	r3, [r7, #3]


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');

	i = pb->idx;	/* Buffer write index (-1:error) */
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2b00      	cmp	r3, #0
 8014338:	db25      	blt.n	8014386 <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	1c5a      	adds	r2, r3, #1
 801433e:	60fa      	str	r2, [r7, #12]
 8014340:	687a      	ldr	r2, [r7, #4]
 8014342:	4413      	add	r3, r2
 8014344:	78fa      	ldrb	r2, [r7, #3]
 8014346:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2b3c      	cmp	r3, #60	; 0x3c
 801434c:	dd12      	ble.n	8014374 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6818      	ldr	r0, [r3, #0]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f103 010c 	add.w	r1, r3, #12
 8014358:	68fa      	ldr	r2, [r7, #12]
 801435a:	f107 0308 	add.w	r3, r7, #8
 801435e:	f7fe ffcd 	bl	80132fc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8014362:	68ba      	ldr	r2, [r7, #8]
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	429a      	cmp	r2, r3
 8014368:	d101      	bne.n	801436e <putc_bfd+0x4c>
 801436a:	2300      	movs	r3, #0
 801436c:	e001      	b.n	8014372 <putc_bfd+0x50>
 801436e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014372:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	68fa      	ldr	r2, [r7, #12]
 8014378:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	689b      	ldr	r3, [r3, #8]
 801437e:	1c5a      	adds	r2, r3, #1
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	609a      	str	r2, [r3, #8]
 8014384:	e000      	b.n	8014388 <putc_bfd+0x66>
	if (i < 0) return;
 8014386:	bf00      	nop
}
 8014388:	3710      	adds	r7, #16
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}

0801438e <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 801438e:	b590      	push	{r4, r7, lr}
 8014390:	b097      	sub	sp, #92	; 0x5c
 8014392:	af00      	add	r7, sp, #0
 8014394:	4603      	mov	r3, r0
 8014396:	6039      	str	r1, [r7, #0]
 8014398:	71fb      	strb	r3, [r7, #7]
	putbuff pb;
	UINT nw;


	pb.fp = fp;			/* Initialize output buffer */
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 801439e:	2300      	movs	r3, #0
 80143a0:	613b      	str	r3, [r7, #16]
 80143a2:	693b      	ldr	r3, [r7, #16]
 80143a4:	617b      	str	r3, [r7, #20]

	putc_bfd(&pb, c);	/* Put a character */
 80143a6:	79fa      	ldrb	r2, [r7, #7]
 80143a8:	f107 030c 	add.w	r3, r7, #12
 80143ac:	4611      	mov	r1, r2
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7ff ffb7 	bl	8014322 <putc_bfd>

	if (   pb.idx >= 0	/* Flush buffered characters to the file */
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	db15      	blt.n	80143e6 <f_putc+0x58>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80143ba:	68f8      	ldr	r0, [r7, #12]
 80143bc:	693b      	ldr	r3, [r7, #16]
 80143be:	461c      	mov	r4, r3
 80143c0:	f107 0208 	add.w	r2, r7, #8
 80143c4:	f107 030c 	add.w	r3, r7, #12
 80143c8:	f103 010c 	add.w	r1, r3, #12
 80143cc:	4613      	mov	r3, r2
 80143ce:	4622      	mov	r2, r4
 80143d0:	f7fe ff94 	bl	80132fc <f_write>
 80143d4:	4603      	mov	r3, r0
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d105      	bne.n	80143e6 <f_putc+0x58>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	68ba      	ldr	r2, [r7, #8]
 80143de:	4293      	cmp	r3, r2
 80143e0:	d101      	bne.n	80143e6 <f_putc+0x58>
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	e001      	b.n	80143ea <f_putc+0x5c>
	return EOF;
 80143e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	375c      	adds	r7, #92	; 0x5c
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd90      	pop	{r4, r7, pc}

080143f2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80143f2:	b590      	push	{r4, r7, lr}
 80143f4:	b097      	sub	sp, #92	; 0x5c
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
 80143fa:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8014400:	2300      	movs	r3, #0
 8014402:	613b      	str	r3, [r7, #16]
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8014408:	e009      	b.n	801441e <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	1c5a      	adds	r2, r3, #1
 801440e:	607a      	str	r2, [r7, #4]
 8014410:	781a      	ldrb	r2, [r3, #0]
 8014412:	f107 030c 	add.w	r3, r7, #12
 8014416:	4611      	mov	r1, r2
 8014418:	4618      	mov	r0, r3
 801441a:	f7ff ff82 	bl	8014322 <putc_bfd>
	while (*str)			/* Put the string */
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d1f1      	bne.n	801440a <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	2b00      	cmp	r3, #0
 801442a:	db15      	blt.n	8014458 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 801442c:	68f8      	ldr	r0, [r7, #12]
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	461c      	mov	r4, r3
 8014432:	f107 0208 	add.w	r2, r7, #8
 8014436:	f107 030c 	add.w	r3, r7, #12
 801443a:	f103 010c 	add.w	r1, r3, #12
 801443e:	4613      	mov	r3, r2
 8014440:	4622      	mov	r2, r4
 8014442:	f7fe ff5b 	bl	80132fc <f_write>
 8014446:	4603      	mov	r3, r0
 8014448:	2b00      	cmp	r3, #0
 801444a:	d105      	bne.n	8014458 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	68ba      	ldr	r2, [r7, #8]
 8014450:	4293      	cmp	r3, r2
 8014452:	d101      	bne.n	8014458 <f_puts+0x66>
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	e001      	b.n	801445c <f_puts+0x6a>
	return EOF;
 8014458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801445c:	4618      	mov	r0, r3
 801445e:	375c      	adds	r7, #92	; 0x5c
 8014460:	46bd      	mov	sp, r7
 8014462:	bd90      	pop	{r4, r7, pc}

08014464 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014464:	b480      	push	{r7}
 8014466:	b087      	sub	sp, #28
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	4613      	mov	r3, r2
 8014470:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014472:	2301      	movs	r3, #1
 8014474:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014476:	2300      	movs	r3, #0
 8014478:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 801447a:	4b1f      	ldr	r3, [pc, #124]	; (80144f8 <FATFS_LinkDriverEx+0x94>)
 801447c:	7a5b      	ldrb	r3, [r3, #9]
 801447e:	b2db      	uxtb	r3, r3
 8014480:	2b01      	cmp	r3, #1
 8014482:	d831      	bhi.n	80144e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014484:	4b1c      	ldr	r3, [pc, #112]	; (80144f8 <FATFS_LinkDriverEx+0x94>)
 8014486:	7a5b      	ldrb	r3, [r3, #9]
 8014488:	b2db      	uxtb	r3, r3
 801448a:	461a      	mov	r2, r3
 801448c:	4b1a      	ldr	r3, [pc, #104]	; (80144f8 <FATFS_LinkDriverEx+0x94>)
 801448e:	2100      	movs	r1, #0
 8014490:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8014492:	4b19      	ldr	r3, [pc, #100]	; (80144f8 <FATFS_LinkDriverEx+0x94>)
 8014494:	7a5b      	ldrb	r3, [r3, #9]
 8014496:	b2db      	uxtb	r3, r3
 8014498:	4a17      	ldr	r2, [pc, #92]	; (80144f8 <FATFS_LinkDriverEx+0x94>)
 801449a:	009b      	lsls	r3, r3, #2
 801449c:	4413      	add	r3, r2
 801449e:	68fa      	ldr	r2, [r7, #12]
 80144a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80144a2:	4b15      	ldr	r3, [pc, #84]	; (80144f8 <FATFS_LinkDriverEx+0x94>)
 80144a4:	7a5b      	ldrb	r3, [r3, #9]
 80144a6:	b2db      	uxtb	r3, r3
 80144a8:	461a      	mov	r2, r3
 80144aa:	4b13      	ldr	r3, [pc, #76]	; (80144f8 <FATFS_LinkDriverEx+0x94>)
 80144ac:	4413      	add	r3, r2
 80144ae:	79fa      	ldrb	r2, [r7, #7]
 80144b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80144b2:	4b11      	ldr	r3, [pc, #68]	; (80144f8 <FATFS_LinkDriverEx+0x94>)
 80144b4:	7a5b      	ldrb	r3, [r3, #9]
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	1c5a      	adds	r2, r3, #1
 80144ba:	b2d1      	uxtb	r1, r2
 80144bc:	4a0e      	ldr	r2, [pc, #56]	; (80144f8 <FATFS_LinkDriverEx+0x94>)
 80144be:	7251      	strb	r1, [r2, #9]
 80144c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80144c2:	7dbb      	ldrb	r3, [r7, #22]
 80144c4:	3330      	adds	r3, #48	; 0x30
 80144c6:	b2da      	uxtb	r2, r3
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	3301      	adds	r3, #1
 80144d0:	223a      	movs	r2, #58	; 0x3a
 80144d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	3302      	adds	r3, #2
 80144d8:	222f      	movs	r2, #47	; 0x2f
 80144da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	3303      	adds	r3, #3
 80144e0:	2200      	movs	r2, #0
 80144e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80144e4:	2300      	movs	r3, #0
 80144e6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80144e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	371c      	adds	r7, #28
 80144ee:	46bd      	mov	sp, r7
 80144f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f4:	4770      	bx	lr
 80144f6:	bf00      	nop
 80144f8:	20000b40 	.word	0x20000b40

080144fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014506:	2200      	movs	r2, #0
 8014508:	6839      	ldr	r1, [r7, #0]
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f7ff ffaa 	bl	8014464 <FATFS_LinkDriverEx>
 8014510:	4603      	mov	r3, r0
}
 8014512:	4618      	mov	r0, r3
 8014514:	3708      	adds	r7, #8
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}

0801451a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801451a:	b580      	push	{r7, lr}
 801451c:	b084      	sub	sp, #16
 801451e:	af00      	add	r7, sp, #0
 8014520:	4603      	mov	r3, r0
 8014522:	6039      	str	r1, [r7, #0]
 8014524:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8014526:	2300      	movs	r3, #0
 8014528:	60bb      	str	r3, [r7, #8]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 801452a:	f107 0308 	add.w	r3, r7, #8
 801452e:	2101      	movs	r1, #1
 8014530:	4618      	mov	r0, r3
 8014532:	f000 f8a8 	bl	8014686 <osSemaphoreCreate>
 8014536:	4602      	mov	r2, r0
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2b00      	cmp	r3, #0
 8014542:	bf14      	ite	ne
 8014544:	2301      	movne	r3, #1
 8014546:	2300      	moveq	r3, #0
 8014548:	b2db      	uxtb	r3, r3
 801454a:	60fb      	str	r3, [r7, #12]
  
  return ret;
 801454c:	68fb      	ldr	r3, [r7, #12]
}
 801454e:	4618      	mov	r0, r3
 8014550:	3710      	adds	r7, #16
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}

08014556 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014556:	b580      	push	{r7, lr}
 8014558:	b082      	sub	sp, #8
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f000 f936 	bl	80147d0 <osSemaphoreDelete>
  return 1;
 8014564:	2301      	movs	r3, #1
}
 8014566:	4618      	mov	r0, r3
 8014568:	3708      	adds	r7, #8
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}

0801456e <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801456e:	b580      	push	{r7, lr}
 8014570:	b084      	sub	sp, #16
 8014572:	af00      	add	r7, sp, #0
 8014574:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014576:	2300      	movs	r3, #0
 8014578:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801457a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801457e:	6878      	ldr	r0, [r7, #4]
 8014580:	f000 f8a0 	bl	80146c4 <osSemaphoreWait>
 8014584:	4603      	mov	r3, r0
 8014586:	2b00      	cmp	r3, #0
 8014588:	d101      	bne.n	801458e <ff_req_grant+0x20>
  {
    ret = 1;
 801458a:	2301      	movs	r3, #1
 801458c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 801458e:	68fb      	ldr	r3, [r7, #12]
}
 8014590:	4618      	mov	r0, r3
 8014592:	3710      	adds	r7, #16
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f000 f8df 	bl	8014764 <osSemaphoreRelease>
}
 80145a6:	bf00      	nop
 80145a8:	3708      	adds	r7, #8
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}

080145ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80145ae:	b480      	push	{r7}
 80145b0:	b085      	sub	sp, #20
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	4603      	mov	r3, r0
 80145b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80145b8:	2300      	movs	r3, #0
 80145ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80145bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80145c0:	2b84      	cmp	r3, #132	; 0x84
 80145c2:	d005      	beq.n	80145d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80145c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	4413      	add	r3, r2
 80145cc:	3303      	adds	r3, #3
 80145ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80145d0:	68fb      	ldr	r3, [r7, #12]
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3714      	adds	r7, #20
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr

080145de <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80145de:	b480      	push	{r7}
 80145e0:	b083      	sub	sp, #12
 80145e2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80145e4:	f3ef 8305 	mrs	r3, IPSR
 80145e8:	607b      	str	r3, [r7, #4]
  return(result);
 80145ea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	bf14      	ite	ne
 80145f0:	2301      	movne	r3, #1
 80145f2:	2300      	moveq	r3, #0
 80145f4:	b2db      	uxtb	r3, r3
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	370c      	adds	r7, #12
 80145fa:	46bd      	mov	sp, r7
 80145fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014600:	4770      	bx	lr

08014602 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014602:	b580      	push	{r7, lr}
 8014604:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014606:	f001 f955 	bl	80158b4 <vTaskStartScheduler>
  
  return osOK;
 801460a:	2300      	movs	r3, #0
}
 801460c:	4618      	mov	r0, r3
 801460e:	bd80      	pop	{r7, pc}

08014610 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014612:	b087      	sub	sp, #28
 8014614:	af02      	add	r7, sp, #8
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	685c      	ldr	r4, [r3, #4]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014626:	b29e      	uxth	r6, r3
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801462e:	4618      	mov	r0, r3
 8014630:	f7ff ffbd 	bl	80145ae <makeFreeRtosPriority>
 8014634:	4602      	mov	r2, r0
 8014636:	f107 030c 	add.w	r3, r7, #12
 801463a:	9301      	str	r3, [sp, #4]
 801463c:	9200      	str	r2, [sp, #0]
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	4632      	mov	r2, r6
 8014642:	4629      	mov	r1, r5
 8014644:	4620      	mov	r0, r4
 8014646:	f000 ffcb 	bl	80155e0 <xTaskCreate>
 801464a:	4603      	mov	r3, r0
 801464c:	2b01      	cmp	r3, #1
 801464e:	d001      	beq.n	8014654 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8014650:	2300      	movs	r3, #0
 8014652:	e000      	b.n	8014656 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8014654:	68fb      	ldr	r3, [r7, #12]
}
 8014656:	4618      	mov	r0, r3
 8014658:	3714      	adds	r7, #20
 801465a:	46bd      	mov	sp, r7
 801465c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801465e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801465e:	b580      	push	{r7, lr}
 8014660:	b084      	sub	sp, #16
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d001      	beq.n	8014674 <osDelay+0x16>
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	e000      	b.n	8014676 <osDelay+0x18>
 8014674:	2301      	movs	r3, #1
 8014676:	4618      	mov	r0, r3
 8014678:	f001 f8e8 	bl	801584c <vTaskDelay>
  
  return osOK;
 801467c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801467e:	4618      	mov	r0, r3
 8014680:	3710      	adds	r7, #16
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}

08014686 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014686:	b580      	push	{r7, lr}
 8014688:	b084      	sub	sp, #16
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
 801468e:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	2b01      	cmp	r3, #1
 8014694:	d110      	bne.n	80146b8 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8014696:	2203      	movs	r2, #3
 8014698:	2100      	movs	r1, #0
 801469a:	2001      	movs	r0, #1
 801469c:	f000 f9d2 	bl	8014a44 <xQueueGenericCreate>
 80146a0:	60f8      	str	r0, [r7, #12]
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d005      	beq.n	80146b4 <osSemaphoreCreate+0x2e>
 80146a8:	2300      	movs	r3, #0
 80146aa:	2200      	movs	r2, #0
 80146ac:	2100      	movs	r1, #0
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	f000 fa26 	bl	8014b00 <xQueueGenericSend>
    return sema;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	e000      	b.n	80146ba <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80146b8:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3710      	adds	r7, #16
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
	...

080146c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80146ce:	2300      	movs	r3, #0
 80146d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d101      	bne.n	80146dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80146d8:	2380      	movs	r3, #128	; 0x80
 80146da:	e03c      	b.n	8014756 <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 80146dc:	2300      	movs	r3, #0
 80146de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146e6:	d103      	bne.n	80146f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80146e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146ec:	60fb      	str	r3, [r7, #12]
 80146ee:	e009      	b.n	8014704 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d006      	beq.n	8014704 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d101      	bne.n	8014704 <osSemaphoreWait+0x40>
      ticks = 1;
 8014700:	2301      	movs	r3, #1
 8014702:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014704:	f7ff ff6b 	bl	80145de <inHandlerMode>
 8014708:	4603      	mov	r3, r0
 801470a:	2b00      	cmp	r3, #0
 801470c:	d017      	beq.n	801473e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801470e:	f107 0308 	add.w	r3, r7, #8
 8014712:	461a      	mov	r2, r3
 8014714:	2100      	movs	r1, #0
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f000 fd2c 	bl	8015174 <xQueueReceiveFromISR>
 801471c:	4603      	mov	r3, r0
 801471e:	2b01      	cmp	r3, #1
 8014720:	d001      	beq.n	8014726 <osSemaphoreWait+0x62>
      return osErrorOS;
 8014722:	23ff      	movs	r3, #255	; 0xff
 8014724:	e017      	b.n	8014756 <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d013      	beq.n	8014754 <osSemaphoreWait+0x90>
 801472c:	4b0c      	ldr	r3, [pc, #48]	; (8014760 <osSemaphoreWait+0x9c>)
 801472e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014732:	601a      	str	r2, [r3, #0]
 8014734:	f3bf 8f4f 	dsb	sy
 8014738:	f3bf 8f6f 	isb	sy
 801473c:	e00a      	b.n	8014754 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801473e:	2300      	movs	r3, #0
 8014740:	68fa      	ldr	r2, [r7, #12]
 8014742:	2100      	movs	r1, #0
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f000 fbff 	bl	8014f48 <xQueueGenericReceive>
 801474a:	4603      	mov	r3, r0
 801474c:	2b01      	cmp	r3, #1
 801474e:	d001      	beq.n	8014754 <osSemaphoreWait+0x90>
    return osErrorOS;
 8014750:	23ff      	movs	r3, #255	; 0xff
 8014752:	e000      	b.n	8014756 <osSemaphoreWait+0x92>
  }
  
  return osOK;
 8014754:	2300      	movs	r3, #0
}
 8014756:	4618      	mov	r0, r3
 8014758:	3710      	adds	r7, #16
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}
 801475e:	bf00      	nop
 8014760:	e000ed04 	.word	0xe000ed04

08014764 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801476c:	2300      	movs	r3, #0
 801476e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014770:	2300      	movs	r3, #0
 8014772:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014774:	f7ff ff33 	bl	80145de <inHandlerMode>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d016      	beq.n	80147ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801477e:	f107 0308 	add.w	r3, r7, #8
 8014782:	4619      	mov	r1, r3
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f000 fb51 	bl	8014e2c <xQueueGiveFromISR>
 801478a:	4603      	mov	r3, r0
 801478c:	2b01      	cmp	r3, #1
 801478e:	d001      	beq.n	8014794 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014790:	23ff      	movs	r3, #255	; 0xff
 8014792:	e017      	b.n	80147c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d013      	beq.n	80147c2 <osSemaphoreRelease+0x5e>
 801479a:	4b0c      	ldr	r3, [pc, #48]	; (80147cc <osSemaphoreRelease+0x68>)
 801479c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147a0:	601a      	str	r2, [r3, #0]
 80147a2:	f3bf 8f4f 	dsb	sy
 80147a6:	f3bf 8f6f 	isb	sy
 80147aa:	e00a      	b.n	80147c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80147ac:	2300      	movs	r3, #0
 80147ae:	2200      	movs	r2, #0
 80147b0:	2100      	movs	r1, #0
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f000 f9a4 	bl	8014b00 <xQueueGenericSend>
 80147b8:	4603      	mov	r3, r0
 80147ba:	2b01      	cmp	r3, #1
 80147bc:	d001      	beq.n	80147c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80147be:	23ff      	movs	r3, #255	; 0xff
 80147c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80147c2:	68fb      	ldr	r3, [r7, #12]
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3710      	adds	r7, #16
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	e000ed04 	.word	0xe000ed04

080147d0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80147d8:	f7ff ff01 	bl	80145de <inHandlerMode>
 80147dc:	4603      	mov	r3, r0
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d001      	beq.n	80147e6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80147e2:	2382      	movs	r3, #130	; 0x82
 80147e4:	e003      	b.n	80147ee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f000 fd44 	bl	8015274 <vQueueDelete>

  return osOK; 
 80147ec:	2300      	movs	r3, #0
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	3708      	adds	r7, #8
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}

080147f6 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80147f6:	b580      	push	{r7, lr}
 80147f8:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80147fa:	f001 fc89 	bl	8016110 <xTaskGetSchedulerState>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b01      	cmp	r3, #1
 8014802:	d001      	beq.n	8014808 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8014804:	f002 fa88 	bl	8016d18 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8014808:	bf00      	nop
 801480a:	bd80      	pop	{r7, pc}

0801480c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801480c:	b480      	push	{r7}
 801480e:	b083      	sub	sp, #12
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f103 0208 	add.w	r2, r3, #8
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014824:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f103 0208 	add.w	r2, r3, #8
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f103 0208 	add.w	r2, r3, #8
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2200      	movs	r2, #0
 801483e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014840:	bf00      	nop
 8014842:	370c      	adds	r7, #12
 8014844:	46bd      	mov	sp, r7
 8014846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484a:	4770      	bx	lr

0801484c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801484c:	b480      	push	{r7}
 801484e:	b083      	sub	sp, #12
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2200      	movs	r2, #0
 8014858:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801485a:	bf00      	nop
 801485c:	370c      	adds	r7, #12
 801485e:	46bd      	mov	sp, r7
 8014860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014864:	4770      	bx	lr

08014866 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014866:	b480      	push	{r7}
 8014868:	b085      	sub	sp, #20
 801486a:	af00      	add	r7, sp, #0
 801486c:	6078      	str	r0, [r7, #4]
 801486e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	685b      	ldr	r3, [r3, #4]
 8014874:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	68fa      	ldr	r2, [r7, #12]
 801487a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	689a      	ldr	r2, [r3, #8]
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	689b      	ldr	r3, [r3, #8]
 8014888:	683a      	ldr	r2, [r7, #0]
 801488a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	683a      	ldr	r2, [r7, #0]
 8014890:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	687a      	ldr	r2, [r7, #4]
 8014896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	1c5a      	adds	r2, r3, #1
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	601a      	str	r2, [r3, #0]
}
 80148a2:	bf00      	nop
 80148a4:	3714      	adds	r7, #20
 80148a6:	46bd      	mov	sp, r7
 80148a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ac:	4770      	bx	lr

080148ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80148ae:	b480      	push	{r7}
 80148b0:	b085      	sub	sp, #20
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	6078      	str	r0, [r7, #4]
 80148b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148c4:	d103      	bne.n	80148ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	691b      	ldr	r3, [r3, #16]
 80148ca:	60fb      	str	r3, [r7, #12]
 80148cc:	e00c      	b.n	80148e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	3308      	adds	r3, #8
 80148d2:	60fb      	str	r3, [r7, #12]
 80148d4:	e002      	b.n	80148dc <vListInsert+0x2e>
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	60fb      	str	r3, [r7, #12]
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	68ba      	ldr	r2, [r7, #8]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d2f6      	bcs.n	80148d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	685a      	ldr	r2, [r3, #4]
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	683a      	ldr	r2, [r7, #0]
 80148f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	68fa      	ldr	r2, [r7, #12]
 80148fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	683a      	ldr	r2, [r7, #0]
 8014902:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	687a      	ldr	r2, [r7, #4]
 8014908:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	1c5a      	adds	r2, r3, #1
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	601a      	str	r2, [r3, #0]
}
 8014914:	bf00      	nop
 8014916:	3714      	adds	r7, #20
 8014918:	46bd      	mov	sp, r7
 801491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491e:	4770      	bx	lr

08014920 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014920:	b480      	push	{r7}
 8014922:	b085      	sub	sp, #20
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	691b      	ldr	r3, [r3, #16]
 801492c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	6892      	ldr	r2, [r2, #8]
 8014936:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	689b      	ldr	r3, [r3, #8]
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	6852      	ldr	r2, [r2, #4]
 8014940:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	685b      	ldr	r3, [r3, #4]
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	429a      	cmp	r2, r3
 801494a:	d103      	bne.n	8014954 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	689a      	ldr	r2, [r3, #8]
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	2200      	movs	r2, #0
 8014958:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	1e5a      	subs	r2, r3, #1
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	681b      	ldr	r3, [r3, #0]
}
 8014968:	4618      	mov	r0, r3
 801496a:	3714      	adds	r7, #20
 801496c:	46bd      	mov	sp, r7
 801496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014972:	4770      	bx	lr

08014974 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b084      	sub	sp, #16
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d10a      	bne.n	801499e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801498c:	f383 8811 	msr	BASEPRI, r3
 8014990:	f3bf 8f6f 	isb	sy
 8014994:	f3bf 8f4f 	dsb	sy
 8014998:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 801499a:	bf00      	nop
 801499c:	e7fe      	b.n	801499c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801499e:	f002 f929 	bl	8016bf4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149aa:	68f9      	ldr	r1, [r7, #12]
 80149ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80149ae:	fb01 f303 	mul.w	r3, r1, r3
 80149b2:	441a      	add	r2, r3
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	2200      	movs	r2, #0
 80149bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	681a      	ldr	r2, [r3, #0]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149ce:	3b01      	subs	r3, #1
 80149d0:	68f9      	ldr	r1, [r7, #12]
 80149d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80149d4:	fb01 f303 	mul.w	r3, r1, r3
 80149d8:	441a      	add	r2, r3
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	22ff      	movs	r2, #255	; 0xff
 80149e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	22ff      	movs	r2, #255	; 0xff
 80149ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d114      	bne.n	8014a1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	691b      	ldr	r3, [r3, #16]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d01a      	beq.n	8014a32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	3310      	adds	r3, #16
 8014a00:	4618      	mov	r0, r3
 8014a02:	f001 f9c9 	bl	8015d98 <xTaskRemoveFromEventList>
 8014a06:	4603      	mov	r3, r0
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d012      	beq.n	8014a32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014a0c:	4b0c      	ldr	r3, [pc, #48]	; (8014a40 <xQueueGenericReset+0xcc>)
 8014a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a12:	601a      	str	r2, [r3, #0]
 8014a14:	f3bf 8f4f 	dsb	sy
 8014a18:	f3bf 8f6f 	isb	sy
 8014a1c:	e009      	b.n	8014a32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	3310      	adds	r3, #16
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7ff fef2 	bl	801480c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	3324      	adds	r3, #36	; 0x24
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7ff feed 	bl	801480c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014a32:	f002 f90f 	bl	8016c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014a36:	2301      	movs	r3, #1
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3710      	adds	r7, #16
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	e000ed04 	.word	0xe000ed04

08014a44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b08a      	sub	sp, #40	; 0x28
 8014a48:	af02      	add	r7, sp, #8
 8014a4a:	60f8      	str	r0, [r7, #12]
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	4613      	mov	r3, r2
 8014a50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d10a      	bne.n	8014a6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8014a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a5c:	f383 8811 	msr	BASEPRI, r3
 8014a60:	f3bf 8f6f 	isb	sy
 8014a64:	f3bf 8f4f 	dsb	sy
 8014a68:	613b      	str	r3, [r7, #16]
}
 8014a6a:	bf00      	nop
 8014a6c:	e7fe      	b.n	8014a6c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d102      	bne.n	8014a7a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014a74:	2300      	movs	r3, #0
 8014a76:	61fb      	str	r3, [r7, #28]
 8014a78:	e004      	b.n	8014a84 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	68ba      	ldr	r2, [r7, #8]
 8014a7e:	fb02 f303 	mul.w	r3, r2, r3
 8014a82:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8014a84:	69fb      	ldr	r3, [r7, #28]
 8014a86:	3350      	adds	r3, #80	; 0x50
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f002 f9cd 	bl	8016e28 <pvPortMalloc>
 8014a8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d00b      	beq.n	8014aae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8014a96:	69bb      	ldr	r3, [r7, #24]
 8014a98:	3350      	adds	r3, #80	; 0x50
 8014a9a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014a9c:	79fa      	ldrb	r2, [r7, #7]
 8014a9e:	69bb      	ldr	r3, [r7, #24]
 8014aa0:	9300      	str	r3, [sp, #0]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	697a      	ldr	r2, [r7, #20]
 8014aa6:	68b9      	ldr	r1, [r7, #8]
 8014aa8:	68f8      	ldr	r0, [r7, #12]
 8014aaa:	f000 f805 	bl	8014ab8 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8014aae:	69bb      	ldr	r3, [r7, #24]
	}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3720      	adds	r7, #32
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}

08014ab8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
 8014ac4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d103      	bne.n	8014ad4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014acc:	69bb      	ldr	r3, [r7, #24]
 8014ace:	69ba      	ldr	r2, [r7, #24]
 8014ad0:	601a      	str	r2, [r3, #0]
 8014ad2:	e002      	b.n	8014ada <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014ad4:	69bb      	ldr	r3, [r7, #24]
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014ada:	69bb      	ldr	r3, [r7, #24]
 8014adc:	68fa      	ldr	r2, [r7, #12]
 8014ade:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014ae0:	69bb      	ldr	r3, [r7, #24]
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014ae6:	2101      	movs	r1, #1
 8014ae8:	69b8      	ldr	r0, [r7, #24]
 8014aea:	f7ff ff43 	bl	8014974 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014aee:	69bb      	ldr	r3, [r7, #24]
 8014af0:	78fa      	ldrb	r2, [r7, #3]
 8014af2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014af6:	bf00      	nop
 8014af8:	3710      	adds	r7, #16
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
	...

08014b00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b08e      	sub	sp, #56	; 0x38
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
 8014b0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d10a      	bne.n	8014b32 <xQueueGenericSend+0x32>
	__asm volatile
 8014b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b20:	f383 8811 	msr	BASEPRI, r3
 8014b24:	f3bf 8f6f 	isb	sy
 8014b28:	f3bf 8f4f 	dsb	sy
 8014b2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014b2e:	bf00      	nop
 8014b30:	e7fe      	b.n	8014b30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d103      	bne.n	8014b40 <xQueueGenericSend+0x40>
 8014b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d101      	bne.n	8014b44 <xQueueGenericSend+0x44>
 8014b40:	2301      	movs	r3, #1
 8014b42:	e000      	b.n	8014b46 <xQueueGenericSend+0x46>
 8014b44:	2300      	movs	r3, #0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d10a      	bne.n	8014b60 <xQueueGenericSend+0x60>
	__asm volatile
 8014b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014b5c:	bf00      	nop
 8014b5e:	e7fe      	b.n	8014b5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	2b02      	cmp	r3, #2
 8014b64:	d103      	bne.n	8014b6e <xQueueGenericSend+0x6e>
 8014b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b6a:	2b01      	cmp	r3, #1
 8014b6c:	d101      	bne.n	8014b72 <xQueueGenericSend+0x72>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	e000      	b.n	8014b74 <xQueueGenericSend+0x74>
 8014b72:	2300      	movs	r3, #0
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d10a      	bne.n	8014b8e <xQueueGenericSend+0x8e>
	__asm volatile
 8014b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b7c:	f383 8811 	msr	BASEPRI, r3
 8014b80:	f3bf 8f6f 	isb	sy
 8014b84:	f3bf 8f4f 	dsb	sy
 8014b88:	623b      	str	r3, [r7, #32]
}
 8014b8a:	bf00      	nop
 8014b8c:	e7fe      	b.n	8014b8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014b8e:	f001 fabf 	bl	8016110 <xTaskGetSchedulerState>
 8014b92:	4603      	mov	r3, r0
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d102      	bne.n	8014b9e <xQueueGenericSend+0x9e>
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d101      	bne.n	8014ba2 <xQueueGenericSend+0xa2>
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	e000      	b.n	8014ba4 <xQueueGenericSend+0xa4>
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d10a      	bne.n	8014bbe <xQueueGenericSend+0xbe>
	__asm volatile
 8014ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bac:	f383 8811 	msr	BASEPRI, r3
 8014bb0:	f3bf 8f6f 	isb	sy
 8014bb4:	f3bf 8f4f 	dsb	sy
 8014bb8:	61fb      	str	r3, [r7, #28]
}
 8014bba:	bf00      	nop
 8014bbc:	e7fe      	b.n	8014bbc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014bbe:	f002 f819 	bl	8016bf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d302      	bcc.n	8014bd4 <xQueueGenericSend+0xd4>
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	2b02      	cmp	r3, #2
 8014bd2:	d129      	bne.n	8014c28 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014bd4:	683a      	ldr	r2, [r7, #0]
 8014bd6:	68b9      	ldr	r1, [r7, #8]
 8014bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bda:	f000 fb69 	bl	80152b0 <prvCopyDataToQueue>
 8014bde:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d010      	beq.n	8014c0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bea:	3324      	adds	r3, #36	; 0x24
 8014bec:	4618      	mov	r0, r3
 8014bee:	f001 f8d3 	bl	8015d98 <xTaskRemoveFromEventList>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d013      	beq.n	8014c20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014bf8:	4b3f      	ldr	r3, [pc, #252]	; (8014cf8 <xQueueGenericSend+0x1f8>)
 8014bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bfe:	601a      	str	r2, [r3, #0]
 8014c00:	f3bf 8f4f 	dsb	sy
 8014c04:	f3bf 8f6f 	isb	sy
 8014c08:	e00a      	b.n	8014c20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d007      	beq.n	8014c20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014c10:	4b39      	ldr	r3, [pc, #228]	; (8014cf8 <xQueueGenericSend+0x1f8>)
 8014c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c16:	601a      	str	r2, [r3, #0]
 8014c18:	f3bf 8f4f 	dsb	sy
 8014c1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014c20:	f002 f818 	bl	8016c54 <vPortExitCritical>
				return pdPASS;
 8014c24:	2301      	movs	r3, #1
 8014c26:	e063      	b.n	8014cf0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d103      	bne.n	8014c36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014c2e:	f002 f811 	bl	8016c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014c32:	2300      	movs	r3, #0
 8014c34:	e05c      	b.n	8014cf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d106      	bne.n	8014c4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8014c3c:	f107 0314 	add.w	r3, r7, #20
 8014c40:	4618      	mov	r0, r3
 8014c42:	f001 f90b 	bl	8015e5c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014c46:	2301      	movs	r3, #1
 8014c48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014c4a:	f002 f803 	bl	8016c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014c4e:	f000 fe7f 	bl	8015950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014c52:	f001 ffcf 	bl	8016bf4 <vPortEnterCritical>
 8014c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c5c:	b25b      	sxtb	r3, r3
 8014c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014c62:	d103      	bne.n	8014c6c <xQueueGenericSend+0x16c>
 8014c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c66:	2200      	movs	r2, #0
 8014c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014c72:	b25b      	sxtb	r3, r3
 8014c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014c78:	d103      	bne.n	8014c82 <xQueueGenericSend+0x182>
 8014c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014c82:	f001 ffe7 	bl	8016c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014c86:	1d3a      	adds	r2, r7, #4
 8014c88:	f107 0314 	add.w	r3, r7, #20
 8014c8c:	4611      	mov	r1, r2
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f001 f908 	bl	8015ea4 <xTaskCheckForTimeOut>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d124      	bne.n	8014ce4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c9c:	f000 fc00 	bl	80154a0 <prvIsQueueFull>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d018      	beq.n	8014cd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca8:	3310      	adds	r3, #16
 8014caa:	687a      	ldr	r2, [r7, #4]
 8014cac:	4611      	mov	r1, r2
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f001 f822 	bl	8015cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cb6:	f000 fb8b 	bl	80153d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014cba:	f000 fe57 	bl	801596c <xTaskResumeAll>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	f47f af7c 	bne.w	8014bbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014cc6:	4b0c      	ldr	r3, [pc, #48]	; (8014cf8 <xQueueGenericSend+0x1f8>)
 8014cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ccc:	601a      	str	r2, [r3, #0]
 8014cce:	f3bf 8f4f 	dsb	sy
 8014cd2:	f3bf 8f6f 	isb	sy
 8014cd6:	e772      	b.n	8014bbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cda:	f000 fb79 	bl	80153d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014cde:	f000 fe45 	bl	801596c <xTaskResumeAll>
 8014ce2:	e76c      	b.n	8014bbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ce6:	f000 fb73 	bl	80153d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014cea:	f000 fe3f 	bl	801596c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014cee:	2300      	movs	r3, #0
		}
	}
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3738      	adds	r7, #56	; 0x38
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	e000ed04 	.word	0xe000ed04

08014cfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b08e      	sub	sp, #56	; 0x38
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	60f8      	str	r0, [r7, #12]
 8014d04:	60b9      	str	r1, [r7, #8]
 8014d06:	607a      	str	r2, [r7, #4]
 8014d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d10a      	bne.n	8014d2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d18:	f383 8811 	msr	BASEPRI, r3
 8014d1c:	f3bf 8f6f 	isb	sy
 8014d20:	f3bf 8f4f 	dsb	sy
 8014d24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014d26:	bf00      	nop
 8014d28:	e7fe      	b.n	8014d28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d103      	bne.n	8014d38 <xQueueGenericSendFromISR+0x3c>
 8014d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d101      	bne.n	8014d3c <xQueueGenericSendFromISR+0x40>
 8014d38:	2301      	movs	r3, #1
 8014d3a:	e000      	b.n	8014d3e <xQueueGenericSendFromISR+0x42>
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d10a      	bne.n	8014d58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d46:	f383 8811 	msr	BASEPRI, r3
 8014d4a:	f3bf 8f6f 	isb	sy
 8014d4e:	f3bf 8f4f 	dsb	sy
 8014d52:	623b      	str	r3, [r7, #32]
}
 8014d54:	bf00      	nop
 8014d56:	e7fe      	b.n	8014d56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	2b02      	cmp	r3, #2
 8014d5c:	d103      	bne.n	8014d66 <xQueueGenericSendFromISR+0x6a>
 8014d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d101      	bne.n	8014d6a <xQueueGenericSendFromISR+0x6e>
 8014d66:	2301      	movs	r3, #1
 8014d68:	e000      	b.n	8014d6c <xQueueGenericSendFromISR+0x70>
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d10a      	bne.n	8014d86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d74:	f383 8811 	msr	BASEPRI, r3
 8014d78:	f3bf 8f6f 	isb	sy
 8014d7c:	f3bf 8f4f 	dsb	sy
 8014d80:	61fb      	str	r3, [r7, #28]
}
 8014d82:	bf00      	nop
 8014d84:	e7fe      	b.n	8014d84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014d86:	f002 f80f 	bl	8016da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8014d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d92:	f383 8811 	msr	BASEPRI, r3
 8014d96:	f3bf 8f6f 	isb	sy
 8014d9a:	f3bf 8f4f 	dsb	sy
 8014d9e:	61ba      	str	r2, [r7, #24]
 8014da0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014da2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d302      	bcc.n	8014db8 <xQueueGenericSendFromISR+0xbc>
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	2b02      	cmp	r3, #2
 8014db6:	d12c      	bne.n	8014e12 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014dc2:	683a      	ldr	r2, [r7, #0]
 8014dc4:	68b9      	ldr	r1, [r7, #8]
 8014dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dc8:	f000 fa72 	bl	80152b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014dcc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014dd4:	d112      	bne.n	8014dfc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d016      	beq.n	8014e0c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de0:	3324      	adds	r3, #36	; 0x24
 8014de2:	4618      	mov	r0, r3
 8014de4:	f000 ffd8 	bl	8015d98 <xTaskRemoveFromEventList>
 8014de8:	4603      	mov	r3, r0
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d00e      	beq.n	8014e0c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d00b      	beq.n	8014e0c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2201      	movs	r2, #1
 8014df8:	601a      	str	r2, [r3, #0]
 8014dfa:	e007      	b.n	8014e0c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014dfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014e00:	3301      	adds	r3, #1
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	b25a      	sxtb	r2, r3
 8014e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8014e10:	e001      	b.n	8014e16 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014e12:	2300      	movs	r3, #0
 8014e14:	637b      	str	r3, [r7, #52]	; 0x34
 8014e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e18:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 8014e20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3738      	adds	r7, #56	; 0x38
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b08e      	sub	sp, #56	; 0x38
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d10a      	bne.n	8014e56 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8014e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e44:	f383 8811 	msr	BASEPRI, r3
 8014e48:	f3bf 8f6f 	isb	sy
 8014e4c:	f3bf 8f4f 	dsb	sy
 8014e50:	623b      	str	r3, [r7, #32]
}
 8014e52:	bf00      	nop
 8014e54:	e7fe      	b.n	8014e54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d00a      	beq.n	8014e74 <xQueueGiveFromISR+0x48>
	__asm volatile
 8014e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e62:	f383 8811 	msr	BASEPRI, r3
 8014e66:	f3bf 8f6f 	isb	sy
 8014e6a:	f3bf 8f4f 	dsb	sy
 8014e6e:	61fb      	str	r3, [r7, #28]
}
 8014e70:	bf00      	nop
 8014e72:	e7fe      	b.n	8014e72 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8014e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d103      	bne.n	8014e84 <xQueueGiveFromISR+0x58>
 8014e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e7e:	685b      	ldr	r3, [r3, #4]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d101      	bne.n	8014e88 <xQueueGiveFromISR+0x5c>
 8014e84:	2301      	movs	r3, #1
 8014e86:	e000      	b.n	8014e8a <xQueueGiveFromISR+0x5e>
 8014e88:	2300      	movs	r3, #0
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d10a      	bne.n	8014ea4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8014e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e92:	f383 8811 	msr	BASEPRI, r3
 8014e96:	f3bf 8f6f 	isb	sy
 8014e9a:	f3bf 8f4f 	dsb	sy
 8014e9e:	61bb      	str	r3, [r7, #24]
}
 8014ea0:	bf00      	nop
 8014ea2:	e7fe      	b.n	8014ea2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ea4:	f001 ff80 	bl	8016da8 <vPortValidateInterruptPriority>
	__asm volatile
 8014ea8:	f3ef 8211 	mrs	r2, BASEPRI
 8014eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb0:	f383 8811 	msr	BASEPRI, r3
 8014eb4:	f3bf 8f6f 	isb	sy
 8014eb8:	f3bf 8f4f 	dsb	sy
 8014ebc:	617a      	str	r2, [r7, #20]
 8014ebe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014ec0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ec8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d22b      	bcs.n	8014f2c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8014ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ee0:	1c5a      	adds	r2, r3, #1
 8014ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014ee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014eee:	d112      	bne.n	8014f16 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d016      	beq.n	8014f26 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014efa:	3324      	adds	r3, #36	; 0x24
 8014efc:	4618      	mov	r0, r3
 8014efe:	f000 ff4b 	bl	8015d98 <xTaskRemoveFromEventList>
 8014f02:	4603      	mov	r3, r0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d00e      	beq.n	8014f26 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014f08:	683b      	ldr	r3, [r7, #0]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d00b      	beq.n	8014f26 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	2201      	movs	r2, #1
 8014f12:	601a      	str	r2, [r3, #0]
 8014f14:	e007      	b.n	8014f26 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	b2db      	uxtb	r3, r3
 8014f1e:	b25a      	sxtb	r2, r3
 8014f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014f26:	2301      	movs	r3, #1
 8014f28:	637b      	str	r3, [r7, #52]	; 0x34
 8014f2a:	e001      	b.n	8014f30 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8014f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f32:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	f383 8811 	msr	BASEPRI, r3
}
 8014f3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3738      	adds	r7, #56	; 0x38
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
	...

08014f48 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b08e      	sub	sp, #56	; 0x38
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	607a      	str	r2, [r7, #4]
 8014f54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014f56:	2300      	movs	r3, #0
 8014f58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d10a      	bne.n	8014f7a <xQueueGenericReceive+0x32>
	__asm volatile
 8014f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f68:	f383 8811 	msr	BASEPRI, r3
 8014f6c:	f3bf 8f6f 	isb	sy
 8014f70:	f3bf 8f4f 	dsb	sy
 8014f74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014f76:	bf00      	nop
 8014f78:	e7fe      	b.n	8014f78 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d103      	bne.n	8014f88 <xQueueGenericReceive+0x40>
 8014f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d101      	bne.n	8014f8c <xQueueGenericReceive+0x44>
 8014f88:	2301      	movs	r3, #1
 8014f8a:	e000      	b.n	8014f8e <xQueueGenericReceive+0x46>
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d10a      	bne.n	8014fa8 <xQueueGenericReceive+0x60>
	__asm volatile
 8014f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f96:	f383 8811 	msr	BASEPRI, r3
 8014f9a:	f3bf 8f6f 	isb	sy
 8014f9e:	f3bf 8f4f 	dsb	sy
 8014fa2:	623b      	str	r3, [r7, #32]
}
 8014fa4:	bf00      	nop
 8014fa6:	e7fe      	b.n	8014fa6 <xQueueGenericReceive+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014fa8:	f001 f8b2 	bl	8016110 <xTaskGetSchedulerState>
 8014fac:	4603      	mov	r3, r0
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d102      	bne.n	8014fb8 <xQueueGenericReceive+0x70>
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d101      	bne.n	8014fbc <xQueueGenericReceive+0x74>
 8014fb8:	2301      	movs	r3, #1
 8014fba:	e000      	b.n	8014fbe <xQueueGenericReceive+0x76>
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d10a      	bne.n	8014fd8 <xQueueGenericReceive+0x90>
	__asm volatile
 8014fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fc6:	f383 8811 	msr	BASEPRI, r3
 8014fca:	f3bf 8f6f 	isb	sy
 8014fce:	f3bf 8f4f 	dsb	sy
 8014fd2:	61fb      	str	r3, [r7, #28]
}
 8014fd4:	bf00      	nop
 8014fd6:	e7fe      	b.n	8014fd6 <xQueueGenericReceive+0x8e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8014fd8:	f001 fe0c 	bl	8016bf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fe0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d046      	beq.n	8015076 <xQueueGenericReceive+0x12e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8014fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fea:	68db      	ldr	r3, [r3, #12]
 8014fec:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014fee:	68b9      	ldr	r1, [r7, #8]
 8014ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ff2:	f000 f9c7 	bl	8015384 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d121      	bne.n	8015040 <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8014ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ffe:	1e5a      	subs	r2, r3, #1
 8015000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015002:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d104      	bne.n	8015016 <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801500c:	f001 f99a 	bl	8016344 <pvTaskIncrementMutexHeldCount>
 8015010:	4602      	mov	r2, r0
 8015012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015014:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015018:	691b      	ldr	r3, [r3, #16]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d027      	beq.n	801506e <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015020:	3310      	adds	r3, #16
 8015022:	4618      	mov	r0, r3
 8015024:	f000 feb8 	bl	8015d98 <xTaskRemoveFromEventList>
 8015028:	4603      	mov	r3, r0
 801502a:	2b00      	cmp	r3, #0
 801502c:	d01f      	beq.n	801506e <xQueueGenericReceive+0x126>
						{
							queueYIELD_IF_USING_PREEMPTION();
 801502e:	4b50      	ldr	r3, [pc, #320]	; (8015170 <xQueueGenericReceive+0x228>)
 8015030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015034:	601a      	str	r2, [r3, #0]
 8015036:	f3bf 8f4f 	dsb	sy
 801503a:	f3bf 8f6f 	isb	sy
 801503e:	e016      	b.n	801506e <xQueueGenericReceive+0x126>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8015040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015044:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801504a:	2b00      	cmp	r3, #0
 801504c:	d00f      	beq.n	801506e <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015050:	3324      	adds	r3, #36	; 0x24
 8015052:	4618      	mov	r0, r3
 8015054:	f000 fea0 	bl	8015d98 <xTaskRemoveFromEventList>
 8015058:	4603      	mov	r3, r0
 801505a:	2b00      	cmp	r3, #0
 801505c:	d007      	beq.n	801506e <xQueueGenericReceive+0x126>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 801505e:	4b44      	ldr	r3, [pc, #272]	; (8015170 <xQueueGenericReceive+0x228>)
 8015060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015064:	601a      	str	r2, [r3, #0]
 8015066:	f3bf 8f4f 	dsb	sy
 801506a:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 801506e:	f001 fdf1 	bl	8016c54 <vPortExitCritical>
				return pdPASS;
 8015072:	2301      	movs	r3, #1
 8015074:	e077      	b.n	8015166 <xQueueGenericReceive+0x21e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d103      	bne.n	8015084 <xQueueGenericReceive+0x13c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801507c:	f001 fdea 	bl	8016c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015080:	2300      	movs	r3, #0
 8015082:	e070      	b.n	8015166 <xQueueGenericReceive+0x21e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015086:	2b00      	cmp	r3, #0
 8015088:	d106      	bne.n	8015098 <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 801508a:	f107 0314 	add.w	r3, r7, #20
 801508e:	4618      	mov	r0, r3
 8015090:	f000 fee4 	bl	8015e5c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015094:	2301      	movs	r3, #1
 8015096:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015098:	f001 fddc 	bl	8016c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801509c:	f000 fc58 	bl	8015950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80150a0:	f001 fda8 	bl	8016bf4 <vPortEnterCritical>
 80150a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80150aa:	b25b      	sxtb	r3, r3
 80150ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150b0:	d103      	bne.n	80150ba <xQueueGenericReceive+0x172>
 80150b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b4:	2200      	movs	r2, #0
 80150b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80150ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80150c0:	b25b      	sxtb	r3, r3
 80150c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150c6:	d103      	bne.n	80150d0 <xQueueGenericReceive+0x188>
 80150c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ca:	2200      	movs	r2, #0
 80150cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80150d0:	f001 fdc0 	bl	8016c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80150d4:	1d3a      	adds	r2, r7, #4
 80150d6:	f107 0314 	add.w	r3, r7, #20
 80150da:	4611      	mov	r1, r2
 80150dc:	4618      	mov	r0, r3
 80150de:	f000 fee1 	bl	8015ea4 <xTaskCheckForTimeOut>
 80150e2:	4603      	mov	r3, r0
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d131      	bne.n	801514c <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80150e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150ea:	f000 f9c3 	bl	8015474 <prvIsQueueEmpty>
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d025      	beq.n	8015140 <xQueueGenericReceive+0x1f8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80150f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d108      	bne.n	801510e <xQueueGenericReceive+0x1c6>
					{
						taskENTER_CRITICAL();
 80150fc:	f001 fd7a 	bl	8016bf4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8015100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015102:	685b      	ldr	r3, [r3, #4]
 8015104:	4618      	mov	r0, r3
 8015106:	f001 f821 	bl	801614c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 801510a:	f001 fda3 	bl	8016c54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015110:	3324      	adds	r3, #36	; 0x24
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	4611      	mov	r1, r2
 8015116:	4618      	mov	r0, r3
 8015118:	f000 fdee 	bl	8015cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801511c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801511e:	f000 f957 	bl	80153d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015122:	f000 fc23 	bl	801596c <xTaskResumeAll>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	f47f af55 	bne.w	8014fd8 <xQueueGenericReceive+0x90>
				{
					portYIELD_WITHIN_API();
 801512e:	4b10      	ldr	r3, [pc, #64]	; (8015170 <xQueueGenericReceive+0x228>)
 8015130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015134:	601a      	str	r2, [r3, #0]
 8015136:	f3bf 8f4f 	dsb	sy
 801513a:	f3bf 8f6f 	isb	sy
 801513e:	e74b      	b.n	8014fd8 <xQueueGenericReceive+0x90>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015142:	f000 f945 	bl	80153d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015146:	f000 fc11 	bl	801596c <xTaskResumeAll>
 801514a:	e745      	b.n	8014fd8 <xQueueGenericReceive+0x90>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 801514c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801514e:	f000 f93f 	bl	80153d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015152:	f000 fc0b 	bl	801596c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015158:	f000 f98c 	bl	8015474 <prvIsQueueEmpty>
 801515c:	4603      	mov	r3, r0
 801515e:	2b00      	cmp	r3, #0
 8015160:	f43f af3a 	beq.w	8014fd8 <xQueueGenericReceive+0x90>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015164:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015166:	4618      	mov	r0, r3
 8015168:	3738      	adds	r7, #56	; 0x38
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}
 801516e:	bf00      	nop
 8015170:	e000ed04 	.word	0xe000ed04

08015174 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b08e      	sub	sp, #56	; 0x38
 8015178:	af00      	add	r7, sp, #0
 801517a:	60f8      	str	r0, [r7, #12]
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015186:	2b00      	cmp	r3, #0
 8015188:	d10a      	bne.n	80151a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801518e:	f383 8811 	msr	BASEPRI, r3
 8015192:	f3bf 8f6f 	isb	sy
 8015196:	f3bf 8f4f 	dsb	sy
 801519a:	623b      	str	r3, [r7, #32]
}
 801519c:	bf00      	nop
 801519e:	e7fe      	b.n	801519e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d103      	bne.n	80151ae <xQueueReceiveFromISR+0x3a>
 80151a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d101      	bne.n	80151b2 <xQueueReceiveFromISR+0x3e>
 80151ae:	2301      	movs	r3, #1
 80151b0:	e000      	b.n	80151b4 <xQueueReceiveFromISR+0x40>
 80151b2:	2300      	movs	r3, #0
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d10a      	bne.n	80151ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80151b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151bc:	f383 8811 	msr	BASEPRI, r3
 80151c0:	f3bf 8f6f 	isb	sy
 80151c4:	f3bf 8f4f 	dsb	sy
 80151c8:	61fb      	str	r3, [r7, #28]
}
 80151ca:	bf00      	nop
 80151cc:	e7fe      	b.n	80151cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80151ce:	f001 fdeb 	bl	8016da8 <vPortValidateInterruptPriority>
	__asm volatile
 80151d2:	f3ef 8211 	mrs	r2, BASEPRI
 80151d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151da:	f383 8811 	msr	BASEPRI, r3
 80151de:	f3bf 8f6f 	isb	sy
 80151e2:	f3bf 8f4f 	dsb	sy
 80151e6:	61ba      	str	r2, [r7, #24]
 80151e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80151ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80151ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80151ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80151f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d02f      	beq.n	801525a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80151fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015204:	68b9      	ldr	r1, [r7, #8]
 8015206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015208:	f000 f8bc 	bl	8015384 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 801520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801520e:	1e5a      	subs	r2, r3, #1
 8015210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015212:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015214:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801521c:	d112      	bne.n	8015244 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015220:	691b      	ldr	r3, [r3, #16]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d016      	beq.n	8015254 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015228:	3310      	adds	r3, #16
 801522a:	4618      	mov	r0, r3
 801522c:	f000 fdb4 	bl	8015d98 <xTaskRemoveFromEventList>
 8015230:	4603      	mov	r3, r0
 8015232:	2b00      	cmp	r3, #0
 8015234:	d00e      	beq.n	8015254 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d00b      	beq.n	8015254 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2201      	movs	r2, #1
 8015240:	601a      	str	r2, [r3, #0]
 8015242:	e007      	b.n	8015254 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015248:	3301      	adds	r3, #1
 801524a:	b2db      	uxtb	r3, r3
 801524c:	b25a      	sxtb	r2, r3
 801524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015254:	2301      	movs	r3, #1
 8015256:	637b      	str	r3, [r7, #52]	; 0x34
 8015258:	e001      	b.n	801525e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801525a:	2300      	movs	r3, #0
 801525c:	637b      	str	r3, [r7, #52]	; 0x34
 801525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015260:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015262:	693b      	ldr	r3, [r7, #16]
 8015264:	f383 8811 	msr	BASEPRI, r3
}
 8015268:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801526c:	4618      	mov	r0, r3
 801526e:	3738      	adds	r7, #56	; 0x38
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d10a      	bne.n	801529c <vQueueDelete+0x28>
	__asm volatile
 8015286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801528a:	f383 8811 	msr	BASEPRI, r3
 801528e:	f3bf 8f6f 	isb	sy
 8015292:	f3bf 8f4f 	dsb	sy
 8015296:	60bb      	str	r3, [r7, #8]
}
 8015298:	bf00      	nop
 801529a:	e7fe      	b.n	801529a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801529c:	68f8      	ldr	r0, [r7, #12]
 801529e:	f000 f941 	bl	8015524 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 80152a2:	68f8      	ldr	r0, [r7, #12]
 80152a4:	f001 fe84 	bl	8016fb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80152a8:	bf00      	nop
 80152aa:	3710      	adds	r7, #16
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b086      	sub	sp, #24
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	60f8      	str	r0, [r7, #12]
 80152b8:	60b9      	str	r1, [r7, #8]
 80152ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80152bc:	2300      	movs	r3, #0
 80152be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d10d      	bne.n	80152ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d14d      	bne.n	8015372 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	4618      	mov	r0, r3
 80152dc:	f000 ffac 	bl	8016238 <xTaskPriorityDisinherit>
 80152e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2200      	movs	r2, #0
 80152e6:	605a      	str	r2, [r3, #4]
 80152e8:	e043      	b.n	8015372 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d119      	bne.n	8015324 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	6898      	ldr	r0, [r3, #8]
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152f8:	461a      	mov	r2, r3
 80152fa:	68b9      	ldr	r1, [r7, #8]
 80152fc:	f001 ffe4 	bl	80172c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	689a      	ldr	r2, [r3, #8]
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015308:	441a      	add	r2, r3
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	689a      	ldr	r2, [r3, #8]
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	429a      	cmp	r2, r3
 8015318:	d32b      	bcc.n	8015372 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	681a      	ldr	r2, [r3, #0]
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	609a      	str	r2, [r3, #8]
 8015322:	e026      	b.n	8015372 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	68d8      	ldr	r0, [r3, #12]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801532c:	461a      	mov	r2, r3
 801532e:	68b9      	ldr	r1, [r7, #8]
 8015330:	f001 ffca 	bl	80172c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	68da      	ldr	r2, [r3, #12]
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801533c:	425b      	negs	r3, r3
 801533e:	441a      	add	r2, r3
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	68da      	ldr	r2, [r3, #12]
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	429a      	cmp	r2, r3
 801534e:	d207      	bcs.n	8015360 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	685a      	ldr	r2, [r3, #4]
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015358:	425b      	negs	r3, r3
 801535a:	441a      	add	r2, r3
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2b02      	cmp	r3, #2
 8015364:	d105      	bne.n	8015372 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015366:	693b      	ldr	r3, [r7, #16]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d002      	beq.n	8015372 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	3b01      	subs	r3, #1
 8015370:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8015372:	693b      	ldr	r3, [r7, #16]
 8015374:	1c5a      	adds	r2, r3, #1
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801537a:	697b      	ldr	r3, [r7, #20]
}
 801537c:	4618      	mov	r0, r3
 801537e:	3718      	adds	r7, #24
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b082      	sub	sp, #8
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015392:	2b00      	cmp	r3, #0
 8015394:	d018      	beq.n	80153c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	68da      	ldr	r2, [r3, #12]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801539e:	441a      	add	r2, r3
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	68da      	ldr	r2, [r3, #12]
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	429a      	cmp	r2, r3
 80153ae:	d303      	bcc.n	80153b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	681a      	ldr	r2, [r3, #0]
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	68d9      	ldr	r1, [r3, #12]
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153c0:	461a      	mov	r2, r3
 80153c2:	6838      	ldr	r0, [r7, #0]
 80153c4:	f001 ff80 	bl	80172c8 <memcpy>
	}
}
 80153c8:	bf00      	nop
 80153ca:	3708      	adds	r7, #8
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}

080153d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b084      	sub	sp, #16
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80153d8:	f001 fc0c 	bl	8016bf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80153e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153e4:	e011      	b.n	801540a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d012      	beq.n	8015414 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	3324      	adds	r3, #36	; 0x24
 80153f2:	4618      	mov	r0, r3
 80153f4:	f000 fcd0 	bl	8015d98 <xTaskRemoveFromEventList>
 80153f8:	4603      	mov	r3, r0
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d001      	beq.n	8015402 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80153fe:	f000 fdb1 	bl	8015f64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015402:	7bfb      	ldrb	r3, [r7, #15]
 8015404:	3b01      	subs	r3, #1
 8015406:	b2db      	uxtb	r3, r3
 8015408:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801540a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801540e:	2b00      	cmp	r3, #0
 8015410:	dce9      	bgt.n	80153e6 <prvUnlockQueue+0x16>
 8015412:	e000      	b.n	8015416 <prvUnlockQueue+0x46>
					break;
 8015414:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	22ff      	movs	r2, #255	; 0xff
 801541a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801541e:	f001 fc19 	bl	8016c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015422:	f001 fbe7 	bl	8016bf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801542c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801542e:	e011      	b.n	8015454 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	691b      	ldr	r3, [r3, #16]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d012      	beq.n	801545e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	3310      	adds	r3, #16
 801543c:	4618      	mov	r0, r3
 801543e:	f000 fcab 	bl	8015d98 <xTaskRemoveFromEventList>
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	d001      	beq.n	801544c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015448:	f000 fd8c 	bl	8015f64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801544c:	7bbb      	ldrb	r3, [r7, #14]
 801544e:	3b01      	subs	r3, #1
 8015450:	b2db      	uxtb	r3, r3
 8015452:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015458:	2b00      	cmp	r3, #0
 801545a:	dce9      	bgt.n	8015430 <prvUnlockQueue+0x60>
 801545c:	e000      	b.n	8015460 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801545e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	22ff      	movs	r2, #255	; 0xff
 8015464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015468:	f001 fbf4 	bl	8016c54 <vPortExitCritical>
}
 801546c:	bf00      	nop
 801546e:	3710      	adds	r7, #16
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}

08015474 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801547c:	f001 fbba 	bl	8016bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015484:	2b00      	cmp	r3, #0
 8015486:	d102      	bne.n	801548e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015488:	2301      	movs	r3, #1
 801548a:	60fb      	str	r3, [r7, #12]
 801548c:	e001      	b.n	8015492 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801548e:	2300      	movs	r3, #0
 8015490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015492:	f001 fbdf 	bl	8016c54 <vPortExitCritical>

	return xReturn;
 8015496:	68fb      	ldr	r3, [r7, #12]
}
 8015498:	4618      	mov	r0, r3
 801549a:	3710      	adds	r7, #16
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}

080154a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b084      	sub	sp, #16
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80154a8:	f001 fba4 	bl	8016bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d102      	bne.n	80154be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80154b8:	2301      	movs	r3, #1
 80154ba:	60fb      	str	r3, [r7, #12]
 80154bc:	e001      	b.n	80154c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80154be:	2300      	movs	r3, #0
 80154c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80154c2:	f001 fbc7 	bl	8016c54 <vPortExitCritical>

	return xReturn;
 80154c6:	68fb      	ldr	r3, [r7, #12]
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3710      	adds	r7, #16
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}

080154d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80154d0:	b480      	push	{r7}
 80154d2:	b085      	sub	sp, #20
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80154da:	2300      	movs	r3, #0
 80154dc:	60fb      	str	r3, [r7, #12]
 80154de:	e014      	b.n	801550a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80154e0:	4a0f      	ldr	r2, [pc, #60]	; (8015520 <vQueueAddToRegistry+0x50>)
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d10b      	bne.n	8015504 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80154ec:	490c      	ldr	r1, [pc, #48]	; (8015520 <vQueueAddToRegistry+0x50>)
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	683a      	ldr	r2, [r7, #0]
 80154f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80154f6:	4a0a      	ldr	r2, [pc, #40]	; (8015520 <vQueueAddToRegistry+0x50>)
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	00db      	lsls	r3, r3, #3
 80154fc:	4413      	add	r3, r2
 80154fe:	687a      	ldr	r2, [r7, #4]
 8015500:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015502:	e006      	b.n	8015512 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	3301      	adds	r3, #1
 8015508:	60fb      	str	r3, [r7, #12]
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2b07      	cmp	r3, #7
 801550e:	d9e7      	bls.n	80154e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015510:	bf00      	nop
 8015512:	bf00      	nop
 8015514:	3714      	adds	r7, #20
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr
 801551e:	bf00      	nop
 8015520:	20009ae4 	.word	0x20009ae4

08015524 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015524:	b480      	push	{r7}
 8015526:	b085      	sub	sp, #20
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801552c:	2300      	movs	r3, #0
 801552e:	60fb      	str	r3, [r7, #12]
 8015530:	e016      	b.n	8015560 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015532:	4a10      	ldr	r2, [pc, #64]	; (8015574 <vQueueUnregisterQueue+0x50>)
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	00db      	lsls	r3, r3, #3
 8015538:	4413      	add	r3, r2
 801553a:	685b      	ldr	r3, [r3, #4]
 801553c:	687a      	ldr	r2, [r7, #4]
 801553e:	429a      	cmp	r2, r3
 8015540:	d10b      	bne.n	801555a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015542:	4a0c      	ldr	r2, [pc, #48]	; (8015574 <vQueueUnregisterQueue+0x50>)
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	2100      	movs	r1, #0
 8015548:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801554c:	4a09      	ldr	r2, [pc, #36]	; (8015574 <vQueueUnregisterQueue+0x50>)
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	00db      	lsls	r3, r3, #3
 8015552:	4413      	add	r3, r2
 8015554:	2200      	movs	r2, #0
 8015556:	605a      	str	r2, [r3, #4]
				break;
 8015558:	e006      	b.n	8015568 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	3301      	adds	r3, #1
 801555e:	60fb      	str	r3, [r7, #12]
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	2b07      	cmp	r3, #7
 8015564:	d9e5      	bls.n	8015532 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015566:	bf00      	nop
 8015568:	bf00      	nop
 801556a:	3714      	adds	r7, #20
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr
 8015574:	20009ae4 	.word	0x20009ae4

08015578 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015578:	b580      	push	{r7, lr}
 801557a:	b086      	sub	sp, #24
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015588:	f001 fb34 	bl	8016bf4 <vPortEnterCritical>
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015592:	b25b      	sxtb	r3, r3
 8015594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015598:	d103      	bne.n	80155a2 <vQueueWaitForMessageRestricted+0x2a>
 801559a:	697b      	ldr	r3, [r7, #20]
 801559c:	2200      	movs	r2, #0
 801559e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80155a8:	b25b      	sxtb	r3, r3
 80155aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80155ae:	d103      	bne.n	80155b8 <vQueueWaitForMessageRestricted+0x40>
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	2200      	movs	r2, #0
 80155b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80155b8:	f001 fb4c 	bl	8016c54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d106      	bne.n	80155d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	3324      	adds	r3, #36	; 0x24
 80155c8:	687a      	ldr	r2, [r7, #4]
 80155ca:	68b9      	ldr	r1, [r7, #8]
 80155cc:	4618      	mov	r0, r3
 80155ce:	f000 fbb7 	bl	8015d40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80155d2:	6978      	ldr	r0, [r7, #20]
 80155d4:	f7ff fefc 	bl	80153d0 <prvUnlockQueue>
	}
 80155d8:	bf00      	nop
 80155da:	3718      	adds	r7, #24
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b08c      	sub	sp, #48	; 0x30
 80155e4:	af04      	add	r7, sp, #16
 80155e6:	60f8      	str	r0, [r7, #12]
 80155e8:	60b9      	str	r1, [r7, #8]
 80155ea:	603b      	str	r3, [r7, #0]
 80155ec:	4613      	mov	r3, r2
 80155ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155f0:	88fb      	ldrh	r3, [r7, #6]
 80155f2:	009b      	lsls	r3, r3, #2
 80155f4:	4618      	mov	r0, r3
 80155f6:	f001 fc17 	bl	8016e28 <pvPortMalloc>
 80155fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d00e      	beq.n	8015620 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8015602:	205c      	movs	r0, #92	; 0x5c
 8015604:	f001 fc10 	bl	8016e28 <pvPortMalloc>
 8015608:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801560a:	69fb      	ldr	r3, [r7, #28]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d003      	beq.n	8015618 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015610:	69fb      	ldr	r3, [r7, #28]
 8015612:	697a      	ldr	r2, [r7, #20]
 8015614:	631a      	str	r2, [r3, #48]	; 0x30
 8015616:	e005      	b.n	8015624 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015618:	6978      	ldr	r0, [r7, #20]
 801561a:	f001 fcc9 	bl	8016fb0 <vPortFree>
 801561e:	e001      	b.n	8015624 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015620:	2300      	movs	r3, #0
 8015622:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d013      	beq.n	8015652 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801562a:	88fa      	ldrh	r2, [r7, #6]
 801562c:	2300      	movs	r3, #0
 801562e:	9303      	str	r3, [sp, #12]
 8015630:	69fb      	ldr	r3, [r7, #28]
 8015632:	9302      	str	r3, [sp, #8]
 8015634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015636:	9301      	str	r3, [sp, #4]
 8015638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801563a:	9300      	str	r3, [sp, #0]
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	68b9      	ldr	r1, [r7, #8]
 8015640:	68f8      	ldr	r0, [r7, #12]
 8015642:	f000 f80e 	bl	8015662 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015646:	69f8      	ldr	r0, [r7, #28]
 8015648:	f000 f892 	bl	8015770 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801564c:	2301      	movs	r3, #1
 801564e:	61bb      	str	r3, [r7, #24]
 8015650:	e002      	b.n	8015658 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015656:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015658:	69bb      	ldr	r3, [r7, #24]
	}
 801565a:	4618      	mov	r0, r3
 801565c:	3720      	adds	r7, #32
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}

08015662 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b088      	sub	sp, #32
 8015666:	af00      	add	r7, sp, #0
 8015668:	60f8      	str	r0, [r7, #12]
 801566a:	60b9      	str	r1, [r7, #8]
 801566c:	607a      	str	r2, [r7, #4]
 801566e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015672:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	461a      	mov	r2, r3
 801567a:	21a5      	movs	r1, #165	; 0xa5
 801567c:	f001 fe32 	bl	80172e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8015680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801568a:	3b01      	subs	r3, #1
 801568c:	009b      	lsls	r3, r3, #2
 801568e:	4413      	add	r3, r2
 8015690:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8015692:	69bb      	ldr	r3, [r7, #24]
 8015694:	f023 0307 	bic.w	r3, r3, #7
 8015698:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801569a:	69bb      	ldr	r3, [r7, #24]
 801569c:	f003 0307 	and.w	r3, r3, #7
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d00a      	beq.n	80156ba <prvInitialiseNewTask+0x58>
	__asm volatile
 80156a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156a8:	f383 8811 	msr	BASEPRI, r3
 80156ac:	f3bf 8f6f 	isb	sy
 80156b0:	f3bf 8f4f 	dsb	sy
 80156b4:	617b      	str	r3, [r7, #20]
}
 80156b6:	bf00      	nop
 80156b8:	e7fe      	b.n	80156b8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80156ba:	2300      	movs	r3, #0
 80156bc:	61fb      	str	r3, [r7, #28]
 80156be:	e012      	b.n	80156e6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80156c0:	68ba      	ldr	r2, [r7, #8]
 80156c2:	69fb      	ldr	r3, [r7, #28]
 80156c4:	4413      	add	r3, r2
 80156c6:	7819      	ldrb	r1, [r3, #0]
 80156c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156ca:	69fb      	ldr	r3, [r7, #28]
 80156cc:	4413      	add	r3, r2
 80156ce:	3334      	adds	r3, #52	; 0x34
 80156d0:	460a      	mov	r2, r1
 80156d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80156d4:	68ba      	ldr	r2, [r7, #8]
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	4413      	add	r3, r2
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d006      	beq.n	80156ee <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	3301      	adds	r3, #1
 80156e4:	61fb      	str	r3, [r7, #28]
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	2b0f      	cmp	r3, #15
 80156ea:	d9e9      	bls.n	80156c0 <prvInitialiseNewTask+0x5e>
 80156ec:	e000      	b.n	80156f0 <prvInitialiseNewTask+0x8e>
		{
			break;
 80156ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80156f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f2:	2200      	movs	r2, #0
 80156f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80156f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156fa:	2b06      	cmp	r3, #6
 80156fc:	d901      	bls.n	8015702 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80156fe:	2306      	movs	r3, #6
 8015700:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015706:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801570a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801570c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015710:	2200      	movs	r2, #0
 8015712:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015716:	3304      	adds	r3, #4
 8015718:	4618      	mov	r0, r3
 801571a:	f7ff f897 	bl	801484c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015720:	3318      	adds	r3, #24
 8015722:	4618      	mov	r0, r3
 8015724:	f7ff f892 	bl	801484c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801572a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801572c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015730:	f1c3 0207 	rsb	r2, r3, #7
 8015734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015736:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801573a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801573c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015740:	2200      	movs	r2, #0
 8015742:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015746:	2200      	movs	r2, #0
 8015748:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801574c:	683a      	ldr	r2, [r7, #0]
 801574e:	68f9      	ldr	r1, [r7, #12]
 8015750:	69b8      	ldr	r0, [r7, #24]
 8015752:	f001 f943 	bl	80169dc <pxPortInitialiseStack>
 8015756:	4602      	mov	r2, r0
 8015758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801575e:	2b00      	cmp	r3, #0
 8015760:	d002      	beq.n	8015768 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015766:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015768:	bf00      	nop
 801576a:	3720      	adds	r7, #32
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}

08015770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015778:	f001 fa3c 	bl	8016bf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801577c:	4b2c      	ldr	r3, [pc, #176]	; (8015830 <prvAddNewTaskToReadyList+0xc0>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	3301      	adds	r3, #1
 8015782:	4a2b      	ldr	r2, [pc, #172]	; (8015830 <prvAddNewTaskToReadyList+0xc0>)
 8015784:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015786:	4b2b      	ldr	r3, [pc, #172]	; (8015834 <prvAddNewTaskToReadyList+0xc4>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d109      	bne.n	80157a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801578e:	4a29      	ldr	r2, [pc, #164]	; (8015834 <prvAddNewTaskToReadyList+0xc4>)
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015794:	4b26      	ldr	r3, [pc, #152]	; (8015830 <prvAddNewTaskToReadyList+0xc0>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2b01      	cmp	r3, #1
 801579a:	d110      	bne.n	80157be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801579c:	f000 fc06 	bl	8015fac <prvInitialiseTaskLists>
 80157a0:	e00d      	b.n	80157be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80157a2:	4b25      	ldr	r3, [pc, #148]	; (8015838 <prvAddNewTaskToReadyList+0xc8>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d109      	bne.n	80157be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80157aa:	4b22      	ldr	r3, [pc, #136]	; (8015834 <prvAddNewTaskToReadyList+0xc4>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157b4:	429a      	cmp	r2, r3
 80157b6:	d802      	bhi.n	80157be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80157b8:	4a1e      	ldr	r2, [pc, #120]	; (8015834 <prvAddNewTaskToReadyList+0xc4>)
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80157be:	4b1f      	ldr	r3, [pc, #124]	; (801583c <prvAddNewTaskToReadyList+0xcc>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	3301      	adds	r3, #1
 80157c4:	4a1d      	ldr	r2, [pc, #116]	; (801583c <prvAddNewTaskToReadyList+0xcc>)
 80157c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80157c8:	4b1c      	ldr	r3, [pc, #112]	; (801583c <prvAddNewTaskToReadyList+0xcc>)
 80157ca:	681a      	ldr	r2, [r3, #0]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157d4:	2201      	movs	r2, #1
 80157d6:	409a      	lsls	r2, r3
 80157d8:	4b19      	ldr	r3, [pc, #100]	; (8015840 <prvAddNewTaskToReadyList+0xd0>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4313      	orrs	r3, r2
 80157de:	4a18      	ldr	r2, [pc, #96]	; (8015840 <prvAddNewTaskToReadyList+0xd0>)
 80157e0:	6013      	str	r3, [r2, #0]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157e6:	4613      	mov	r3, r2
 80157e8:	009b      	lsls	r3, r3, #2
 80157ea:	4413      	add	r3, r2
 80157ec:	009b      	lsls	r3, r3, #2
 80157ee:	4a15      	ldr	r2, [pc, #84]	; (8015844 <prvAddNewTaskToReadyList+0xd4>)
 80157f0:	441a      	add	r2, r3
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	3304      	adds	r3, #4
 80157f6:	4619      	mov	r1, r3
 80157f8:	4610      	mov	r0, r2
 80157fa:	f7ff f834 	bl	8014866 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80157fe:	f001 fa29 	bl	8016c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015802:	4b0d      	ldr	r3, [pc, #52]	; (8015838 <prvAddNewTaskToReadyList+0xc8>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d00e      	beq.n	8015828 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801580a:	4b0a      	ldr	r3, [pc, #40]	; (8015834 <prvAddNewTaskToReadyList+0xc4>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015814:	429a      	cmp	r2, r3
 8015816:	d207      	bcs.n	8015828 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015818:	4b0b      	ldr	r3, [pc, #44]	; (8015848 <prvAddNewTaskToReadyList+0xd8>)
 801581a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801581e:	601a      	str	r2, [r3, #0]
 8015820:	f3bf 8f4f 	dsb	sy
 8015824:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015828:	bf00      	nop
 801582a:	3708      	adds	r7, #8
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}
 8015830:	20000c4c 	.word	0x20000c4c
 8015834:	20000b4c 	.word	0x20000b4c
 8015838:	20000c58 	.word	0x20000c58
 801583c:	20000c68 	.word	0x20000c68
 8015840:	20000c54 	.word	0x20000c54
 8015844:	20000b50 	.word	0x20000b50
 8015848:	e000ed04 	.word	0xe000ed04

0801584c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801584c:	b580      	push	{r7, lr}
 801584e:	b084      	sub	sp, #16
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015854:	2300      	movs	r3, #0
 8015856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d017      	beq.n	801588e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801585e:	4b13      	ldr	r3, [pc, #76]	; (80158ac <vTaskDelay+0x60>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d00a      	beq.n	801587c <vTaskDelay+0x30>
	__asm volatile
 8015866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801586a:	f383 8811 	msr	BASEPRI, r3
 801586e:	f3bf 8f6f 	isb	sy
 8015872:	f3bf 8f4f 	dsb	sy
 8015876:	60bb      	str	r3, [r7, #8]
}
 8015878:	bf00      	nop
 801587a:	e7fe      	b.n	801587a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801587c:	f000 f868 	bl	8015950 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015880:	2100      	movs	r1, #0
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f000 fd72 	bl	801636c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015888:	f000 f870 	bl	801596c <xTaskResumeAll>
 801588c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d107      	bne.n	80158a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015894:	4b06      	ldr	r3, [pc, #24]	; (80158b0 <vTaskDelay+0x64>)
 8015896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801589a:	601a      	str	r2, [r3, #0]
 801589c:	f3bf 8f4f 	dsb	sy
 80158a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80158a4:	bf00      	nop
 80158a6:	3710      	adds	r7, #16
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	20000c74 	.word	0x20000c74
 80158b0:	e000ed04 	.word	0xe000ed04

080158b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b086      	sub	sp, #24
 80158b8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80158ba:	4b1f      	ldr	r3, [pc, #124]	; (8015938 <vTaskStartScheduler+0x84>)
 80158bc:	9301      	str	r3, [sp, #4]
 80158be:	2300      	movs	r3, #0
 80158c0:	9300      	str	r3, [sp, #0]
 80158c2:	2300      	movs	r3, #0
 80158c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80158c8:	491c      	ldr	r1, [pc, #112]	; (801593c <vTaskStartScheduler+0x88>)
 80158ca:	481d      	ldr	r0, [pc, #116]	; (8015940 <vTaskStartScheduler+0x8c>)
 80158cc:	f7ff fe88 	bl	80155e0 <xTaskCreate>
 80158d0:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	d102      	bne.n	80158de <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 80158d8:	f000 fdae 	bl	8016438 <xTimerCreateTimerTask>
 80158dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	2b01      	cmp	r3, #1
 80158e2:	d116      	bne.n	8015912 <vTaskStartScheduler+0x5e>
	__asm volatile
 80158e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e8:	f383 8811 	msr	BASEPRI, r3
 80158ec:	f3bf 8f6f 	isb	sy
 80158f0:	f3bf 8f4f 	dsb	sy
 80158f4:	60bb      	str	r3, [r7, #8]
}
 80158f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80158f8:	4b12      	ldr	r3, [pc, #72]	; (8015944 <vTaskStartScheduler+0x90>)
 80158fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80158fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015900:	4b11      	ldr	r3, [pc, #68]	; (8015948 <vTaskStartScheduler+0x94>)
 8015902:	2201      	movs	r2, #1
 8015904:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8015906:	4b11      	ldr	r3, [pc, #68]	; (801594c <vTaskStartScheduler+0x98>)
 8015908:	2200      	movs	r2, #0
 801590a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801590c:	f001 f8e4 	bl	8016ad8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015910:	e00e      	b.n	8015930 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015918:	d10a      	bne.n	8015930 <vTaskStartScheduler+0x7c>
	__asm volatile
 801591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801591e:	f383 8811 	msr	BASEPRI, r3
 8015922:	f3bf 8f6f 	isb	sy
 8015926:	f3bf 8f4f 	dsb	sy
 801592a:	607b      	str	r3, [r7, #4]
}
 801592c:	bf00      	nop
 801592e:	e7fe      	b.n	801592e <vTaskStartScheduler+0x7a>
}
 8015930:	bf00      	nop
 8015932:	3710      	adds	r7, #16
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}
 8015938:	20000c70 	.word	0x20000c70
 801593c:	0801bb58 	.word	0x0801bb58
 8015940:	08015f7d 	.word	0x08015f7d
 8015944:	20000c6c 	.word	0x20000c6c
 8015948:	20000c58 	.word	0x20000c58
 801594c:	20000c50 	.word	0x20000c50

08015950 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015950:	b480      	push	{r7}
 8015952:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015954:	4b04      	ldr	r3, [pc, #16]	; (8015968 <vTaskSuspendAll+0x18>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	3301      	adds	r3, #1
 801595a:	4a03      	ldr	r2, [pc, #12]	; (8015968 <vTaskSuspendAll+0x18>)
 801595c:	6013      	str	r3, [r2, #0]
}
 801595e:	bf00      	nop
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr
 8015968:	20000c74 	.word	0x20000c74

0801596c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015972:	2300      	movs	r3, #0
 8015974:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015976:	2300      	movs	r3, #0
 8015978:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801597a:	4b41      	ldr	r3, [pc, #260]	; (8015a80 <xTaskResumeAll+0x114>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d10a      	bne.n	8015998 <xTaskResumeAll+0x2c>
	__asm volatile
 8015982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015986:	f383 8811 	msr	BASEPRI, r3
 801598a:	f3bf 8f6f 	isb	sy
 801598e:	f3bf 8f4f 	dsb	sy
 8015992:	603b      	str	r3, [r7, #0]
}
 8015994:	bf00      	nop
 8015996:	e7fe      	b.n	8015996 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015998:	f001 f92c 	bl	8016bf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801599c:	4b38      	ldr	r3, [pc, #224]	; (8015a80 <xTaskResumeAll+0x114>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	3b01      	subs	r3, #1
 80159a2:	4a37      	ldr	r2, [pc, #220]	; (8015a80 <xTaskResumeAll+0x114>)
 80159a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80159a6:	4b36      	ldr	r3, [pc, #216]	; (8015a80 <xTaskResumeAll+0x114>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d161      	bne.n	8015a72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80159ae:	4b35      	ldr	r3, [pc, #212]	; (8015a84 <xTaskResumeAll+0x118>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d05d      	beq.n	8015a72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80159b6:	e02e      	b.n	8015a16 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80159b8:	4b33      	ldr	r3, [pc, #204]	; (8015a88 <xTaskResumeAll+0x11c>)
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	68db      	ldr	r3, [r3, #12]
 80159be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	3318      	adds	r3, #24
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7fe ffab 	bl	8014920 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	3304      	adds	r3, #4
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7fe ffa6 	bl	8014920 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159d8:	2201      	movs	r2, #1
 80159da:	409a      	lsls	r2, r3
 80159dc:	4b2b      	ldr	r3, [pc, #172]	; (8015a8c <xTaskResumeAll+0x120>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4313      	orrs	r3, r2
 80159e2:	4a2a      	ldr	r2, [pc, #168]	; (8015a8c <xTaskResumeAll+0x120>)
 80159e4:	6013      	str	r3, [r2, #0]
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159ea:	4613      	mov	r3, r2
 80159ec:	009b      	lsls	r3, r3, #2
 80159ee:	4413      	add	r3, r2
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	4a27      	ldr	r2, [pc, #156]	; (8015a90 <xTaskResumeAll+0x124>)
 80159f4:	441a      	add	r2, r3
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	3304      	adds	r3, #4
 80159fa:	4619      	mov	r1, r3
 80159fc:	4610      	mov	r0, r2
 80159fe:	f7fe ff32 	bl	8014866 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a06:	4b23      	ldr	r3, [pc, #140]	; (8015a94 <xTaskResumeAll+0x128>)
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d302      	bcc.n	8015a16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8015a10:	4b21      	ldr	r3, [pc, #132]	; (8015a98 <xTaskResumeAll+0x12c>)
 8015a12:	2201      	movs	r2, #1
 8015a14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015a16:	4b1c      	ldr	r3, [pc, #112]	; (8015a88 <xTaskResumeAll+0x11c>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d1cc      	bne.n	80159b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d001      	beq.n	8015a28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015a24:	f000 fb4e 	bl	80160c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015a28:	4b1c      	ldr	r3, [pc, #112]	; (8015a9c <xTaskResumeAll+0x130>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d010      	beq.n	8015a56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015a34:	f000 f846 	bl	8015ac4 <xTaskIncrementTick>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d002      	beq.n	8015a44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8015a3e:	4b16      	ldr	r3, [pc, #88]	; (8015a98 <xTaskResumeAll+0x12c>)
 8015a40:	2201      	movs	r2, #1
 8015a42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	3b01      	subs	r3, #1
 8015a48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d1f1      	bne.n	8015a34 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8015a50:	4b12      	ldr	r3, [pc, #72]	; (8015a9c <xTaskResumeAll+0x130>)
 8015a52:	2200      	movs	r2, #0
 8015a54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015a56:	4b10      	ldr	r3, [pc, #64]	; (8015a98 <xTaskResumeAll+0x12c>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d009      	beq.n	8015a72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015a5e:	2301      	movs	r3, #1
 8015a60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015a62:	4b0f      	ldr	r3, [pc, #60]	; (8015aa0 <xTaskResumeAll+0x134>)
 8015a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a68:	601a      	str	r2, [r3, #0]
 8015a6a:	f3bf 8f4f 	dsb	sy
 8015a6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a72:	f001 f8ef 	bl	8016c54 <vPortExitCritical>

	return xAlreadyYielded;
 8015a76:	68bb      	ldr	r3, [r7, #8]
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3710      	adds	r7, #16
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	20000c74 	.word	0x20000c74
 8015a84:	20000c4c 	.word	0x20000c4c
 8015a88:	20000c0c 	.word	0x20000c0c
 8015a8c:	20000c54 	.word	0x20000c54
 8015a90:	20000b50 	.word	0x20000b50
 8015a94:	20000b4c 	.word	0x20000b4c
 8015a98:	20000c60 	.word	0x20000c60
 8015a9c:	20000c5c 	.word	0x20000c5c
 8015aa0:	e000ed04 	.word	0xe000ed04

08015aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b083      	sub	sp, #12
 8015aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015aaa:	4b05      	ldr	r3, [pc, #20]	; (8015ac0 <xTaskGetTickCount+0x1c>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015ab0:	687b      	ldr	r3, [r7, #4]
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	370c      	adds	r7, #12
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015abc:	4770      	bx	lr
 8015abe:	bf00      	nop
 8015ac0:	20000c50 	.word	0x20000c50

08015ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b086      	sub	sp, #24
 8015ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015aca:	2300      	movs	r3, #0
 8015acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ace:	4b51      	ldr	r3, [pc, #324]	; (8015c14 <xTaskIncrementTick+0x150>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	f040 808d 	bne.w	8015bf2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8015ad8:	4b4f      	ldr	r3, [pc, #316]	; (8015c18 <xTaskIncrementTick+0x154>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	3301      	adds	r3, #1
 8015ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015ae0:	4a4d      	ldr	r2, [pc, #308]	; (8015c18 <xTaskIncrementTick+0x154>)
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8015ae6:	693b      	ldr	r3, [r7, #16]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d120      	bne.n	8015b2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015aec:	4b4b      	ldr	r3, [pc, #300]	; (8015c1c <xTaskIncrementTick+0x158>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d00a      	beq.n	8015b0c <xTaskIncrementTick+0x48>
	__asm volatile
 8015af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015afa:	f383 8811 	msr	BASEPRI, r3
 8015afe:	f3bf 8f6f 	isb	sy
 8015b02:	f3bf 8f4f 	dsb	sy
 8015b06:	603b      	str	r3, [r7, #0]
}
 8015b08:	bf00      	nop
 8015b0a:	e7fe      	b.n	8015b0a <xTaskIncrementTick+0x46>
 8015b0c:	4b43      	ldr	r3, [pc, #268]	; (8015c1c <xTaskIncrementTick+0x158>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	60fb      	str	r3, [r7, #12]
 8015b12:	4b43      	ldr	r3, [pc, #268]	; (8015c20 <xTaskIncrementTick+0x15c>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	4a41      	ldr	r2, [pc, #260]	; (8015c1c <xTaskIncrementTick+0x158>)
 8015b18:	6013      	str	r3, [r2, #0]
 8015b1a:	4a41      	ldr	r2, [pc, #260]	; (8015c20 <xTaskIncrementTick+0x15c>)
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	6013      	str	r3, [r2, #0]
 8015b20:	4b40      	ldr	r3, [pc, #256]	; (8015c24 <xTaskIncrementTick+0x160>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	3301      	adds	r3, #1
 8015b26:	4a3f      	ldr	r2, [pc, #252]	; (8015c24 <xTaskIncrementTick+0x160>)
 8015b28:	6013      	str	r3, [r2, #0]
 8015b2a:	f000 facb 	bl	80160c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015b2e:	4b3e      	ldr	r3, [pc, #248]	; (8015c28 <xTaskIncrementTick+0x164>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	693a      	ldr	r2, [r7, #16]
 8015b34:	429a      	cmp	r2, r3
 8015b36:	d34d      	bcc.n	8015bd4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b38:	4b38      	ldr	r3, [pc, #224]	; (8015c1c <xTaskIncrementTick+0x158>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d101      	bne.n	8015b46 <xTaskIncrementTick+0x82>
 8015b42:	2301      	movs	r3, #1
 8015b44:	e000      	b.n	8015b48 <xTaskIncrementTick+0x84>
 8015b46:	2300      	movs	r3, #0
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d004      	beq.n	8015b56 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b4c:	4b36      	ldr	r3, [pc, #216]	; (8015c28 <xTaskIncrementTick+0x164>)
 8015b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b52:	601a      	str	r2, [r3, #0]
					break;
 8015b54:	e03e      	b.n	8015bd4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015b56:	4b31      	ldr	r3, [pc, #196]	; (8015c1c <xTaskIncrementTick+0x158>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	68db      	ldr	r3, [r3, #12]
 8015b5c:	68db      	ldr	r3, [r3, #12]
 8015b5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015b66:	693a      	ldr	r2, [r7, #16]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d203      	bcs.n	8015b76 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015b6e:	4a2e      	ldr	r2, [pc, #184]	; (8015c28 <xTaskIncrementTick+0x164>)
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	6013      	str	r3, [r2, #0]
						break;
 8015b74:	e02e      	b.n	8015bd4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	3304      	adds	r3, #4
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7fe fed0 	bl	8014920 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d004      	beq.n	8015b92 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	3318      	adds	r3, #24
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7fe fec7 	bl	8014920 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015b92:	68bb      	ldr	r3, [r7, #8]
 8015b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b96:	2201      	movs	r2, #1
 8015b98:	409a      	lsls	r2, r3
 8015b9a:	4b24      	ldr	r3, [pc, #144]	; (8015c2c <xTaskIncrementTick+0x168>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	4313      	orrs	r3, r2
 8015ba0:	4a22      	ldr	r2, [pc, #136]	; (8015c2c <xTaskIncrementTick+0x168>)
 8015ba2:	6013      	str	r3, [r2, #0]
 8015ba4:	68bb      	ldr	r3, [r7, #8]
 8015ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ba8:	4613      	mov	r3, r2
 8015baa:	009b      	lsls	r3, r3, #2
 8015bac:	4413      	add	r3, r2
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	4a1f      	ldr	r2, [pc, #124]	; (8015c30 <xTaskIncrementTick+0x16c>)
 8015bb2:	441a      	add	r2, r3
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	3304      	adds	r3, #4
 8015bb8:	4619      	mov	r1, r3
 8015bba:	4610      	mov	r0, r2
 8015bbc:	f7fe fe53 	bl	8014866 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bc4:	4b1b      	ldr	r3, [pc, #108]	; (8015c34 <xTaskIncrementTick+0x170>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d3b4      	bcc.n	8015b38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015bce:	2301      	movs	r3, #1
 8015bd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015bd2:	e7b1      	b.n	8015b38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015bd4:	4b17      	ldr	r3, [pc, #92]	; (8015c34 <xTaskIncrementTick+0x170>)
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bda:	4915      	ldr	r1, [pc, #84]	; (8015c30 <xTaskIncrementTick+0x16c>)
 8015bdc:	4613      	mov	r3, r2
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	4413      	add	r3, r2
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	440b      	add	r3, r1
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	2b01      	cmp	r3, #1
 8015bea:	d907      	bls.n	8015bfc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8015bec:	2301      	movs	r3, #1
 8015bee:	617b      	str	r3, [r7, #20]
 8015bf0:	e004      	b.n	8015bfc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015bf2:	4b11      	ldr	r3, [pc, #68]	; (8015c38 <xTaskIncrementTick+0x174>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	4a0f      	ldr	r2, [pc, #60]	; (8015c38 <xTaskIncrementTick+0x174>)
 8015bfa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015bfc:	4b0f      	ldr	r3, [pc, #60]	; (8015c3c <xTaskIncrementTick+0x178>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d001      	beq.n	8015c08 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8015c04:	2301      	movs	r3, #1
 8015c06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015c08:	697b      	ldr	r3, [r7, #20]
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	3718      	adds	r7, #24
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
 8015c12:	bf00      	nop
 8015c14:	20000c74 	.word	0x20000c74
 8015c18:	20000c50 	.word	0x20000c50
 8015c1c:	20000c04 	.word	0x20000c04
 8015c20:	20000c08 	.word	0x20000c08
 8015c24:	20000c64 	.word	0x20000c64
 8015c28:	20000c6c 	.word	0x20000c6c
 8015c2c:	20000c54 	.word	0x20000c54
 8015c30:	20000b50 	.word	0x20000b50
 8015c34:	20000b4c 	.word	0x20000b4c
 8015c38:	20000c5c 	.word	0x20000c5c
 8015c3c:	20000c60 	.word	0x20000c60

08015c40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015c40:	b480      	push	{r7}
 8015c42:	b087      	sub	sp, #28
 8015c44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015c46:	4b27      	ldr	r3, [pc, #156]	; (8015ce4 <vTaskSwitchContext+0xa4>)
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d003      	beq.n	8015c56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015c4e:	4b26      	ldr	r3, [pc, #152]	; (8015ce8 <vTaskSwitchContext+0xa8>)
 8015c50:	2201      	movs	r2, #1
 8015c52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015c54:	e03f      	b.n	8015cd6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8015c56:	4b24      	ldr	r3, [pc, #144]	; (8015ce8 <vTaskSwitchContext+0xa8>)
 8015c58:	2200      	movs	r2, #0
 8015c5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8015c5c:	4b23      	ldr	r3, [pc, #140]	; (8015cec <vTaskSwitchContext+0xac>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	fab3 f383 	clz	r3, r3
 8015c68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015c6a:	7afb      	ldrb	r3, [r7, #11]
 8015c6c:	f1c3 031f 	rsb	r3, r3, #31
 8015c70:	617b      	str	r3, [r7, #20]
 8015c72:	491f      	ldr	r1, [pc, #124]	; (8015cf0 <vTaskSwitchContext+0xb0>)
 8015c74:	697a      	ldr	r2, [r7, #20]
 8015c76:	4613      	mov	r3, r2
 8015c78:	009b      	lsls	r3, r3, #2
 8015c7a:	4413      	add	r3, r2
 8015c7c:	009b      	lsls	r3, r3, #2
 8015c7e:	440b      	add	r3, r1
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d10a      	bne.n	8015c9c <vTaskSwitchContext+0x5c>
	__asm volatile
 8015c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c8a:	f383 8811 	msr	BASEPRI, r3
 8015c8e:	f3bf 8f6f 	isb	sy
 8015c92:	f3bf 8f4f 	dsb	sy
 8015c96:	607b      	str	r3, [r7, #4]
}
 8015c98:	bf00      	nop
 8015c9a:	e7fe      	b.n	8015c9a <vTaskSwitchContext+0x5a>
 8015c9c:	697a      	ldr	r2, [r7, #20]
 8015c9e:	4613      	mov	r3, r2
 8015ca0:	009b      	lsls	r3, r3, #2
 8015ca2:	4413      	add	r3, r2
 8015ca4:	009b      	lsls	r3, r3, #2
 8015ca6:	4a12      	ldr	r2, [pc, #72]	; (8015cf0 <vTaskSwitchContext+0xb0>)
 8015ca8:	4413      	add	r3, r2
 8015caa:	613b      	str	r3, [r7, #16]
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	685a      	ldr	r2, [r3, #4]
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	605a      	str	r2, [r3, #4]
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	685a      	ldr	r2, [r3, #4]
 8015cba:	693b      	ldr	r3, [r7, #16]
 8015cbc:	3308      	adds	r3, #8
 8015cbe:	429a      	cmp	r2, r3
 8015cc0:	d104      	bne.n	8015ccc <vTaskSwitchContext+0x8c>
 8015cc2:	693b      	ldr	r3, [r7, #16]
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	685a      	ldr	r2, [r3, #4]
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	605a      	str	r2, [r3, #4]
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	68db      	ldr	r3, [r3, #12]
 8015cd2:	4a08      	ldr	r2, [pc, #32]	; (8015cf4 <vTaskSwitchContext+0xb4>)
 8015cd4:	6013      	str	r3, [r2, #0]
}
 8015cd6:	bf00      	nop
 8015cd8:	371c      	adds	r7, #28
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop
 8015ce4:	20000c74 	.word	0x20000c74
 8015ce8:	20000c60 	.word	0x20000c60
 8015cec:	20000c54 	.word	0x20000c54
 8015cf0:	20000b50 	.word	0x20000b50
 8015cf4:	20000b4c 	.word	0x20000b4c

08015cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b084      	sub	sp, #16
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
 8015d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d10a      	bne.n	8015d1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d0c:	f383 8811 	msr	BASEPRI, r3
 8015d10:	f3bf 8f6f 	isb	sy
 8015d14:	f3bf 8f4f 	dsb	sy
 8015d18:	60fb      	str	r3, [r7, #12]
}
 8015d1a:	bf00      	nop
 8015d1c:	e7fe      	b.n	8015d1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015d1e:	4b07      	ldr	r3, [pc, #28]	; (8015d3c <vTaskPlaceOnEventList+0x44>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	3318      	adds	r3, #24
 8015d24:	4619      	mov	r1, r3
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f7fe fdc1 	bl	80148ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015d2c:	2101      	movs	r1, #1
 8015d2e:	6838      	ldr	r0, [r7, #0]
 8015d30:	f000 fb1c 	bl	801636c <prvAddCurrentTaskToDelayedList>
}
 8015d34:	bf00      	nop
 8015d36:	3710      	adds	r7, #16
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	20000b4c 	.word	0x20000b4c

08015d40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b086      	sub	sp, #24
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	60f8      	str	r0, [r7, #12]
 8015d48:	60b9      	str	r1, [r7, #8]
 8015d4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d10a      	bne.n	8015d68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8015d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d56:	f383 8811 	msr	BASEPRI, r3
 8015d5a:	f3bf 8f6f 	isb	sy
 8015d5e:	f3bf 8f4f 	dsb	sy
 8015d62:	617b      	str	r3, [r7, #20]
}
 8015d64:	bf00      	nop
 8015d66:	e7fe      	b.n	8015d66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015d68:	4b0a      	ldr	r3, [pc, #40]	; (8015d94 <vTaskPlaceOnEventListRestricted+0x54>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	3318      	adds	r3, #24
 8015d6e:	4619      	mov	r1, r3
 8015d70:	68f8      	ldr	r0, [r7, #12]
 8015d72:	f7fe fd78 	bl	8014866 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d002      	beq.n	8015d82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8015d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015d82:	6879      	ldr	r1, [r7, #4]
 8015d84:	68b8      	ldr	r0, [r7, #8]
 8015d86:	f000 faf1 	bl	801636c <prvAddCurrentTaskToDelayedList>
	}
 8015d8a:	bf00      	nop
 8015d8c:	3718      	adds	r7, #24
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}
 8015d92:	bf00      	nop
 8015d94:	20000b4c 	.word	0x20000b4c

08015d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b086      	sub	sp, #24
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	68db      	ldr	r3, [r3, #12]
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d10a      	bne.n	8015dc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015db2:	f383 8811 	msr	BASEPRI, r3
 8015db6:	f3bf 8f6f 	isb	sy
 8015dba:	f3bf 8f4f 	dsb	sy
 8015dbe:	60fb      	str	r3, [r7, #12]
}
 8015dc0:	bf00      	nop
 8015dc2:	e7fe      	b.n	8015dc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	3318      	adds	r3, #24
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f7fe fda9 	bl	8014920 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015dce:	4b1d      	ldr	r3, [pc, #116]	; (8015e44 <xTaskRemoveFromEventList+0xac>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d11c      	bne.n	8015e10 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	3304      	adds	r3, #4
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7fe fda0 	bl	8014920 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015de4:	2201      	movs	r2, #1
 8015de6:	409a      	lsls	r2, r3
 8015de8:	4b17      	ldr	r3, [pc, #92]	; (8015e48 <xTaskRemoveFromEventList+0xb0>)
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	4313      	orrs	r3, r2
 8015dee:	4a16      	ldr	r2, [pc, #88]	; (8015e48 <xTaskRemoveFromEventList+0xb0>)
 8015df0:	6013      	str	r3, [r2, #0]
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015df6:	4613      	mov	r3, r2
 8015df8:	009b      	lsls	r3, r3, #2
 8015dfa:	4413      	add	r3, r2
 8015dfc:	009b      	lsls	r3, r3, #2
 8015dfe:	4a13      	ldr	r2, [pc, #76]	; (8015e4c <xTaskRemoveFromEventList+0xb4>)
 8015e00:	441a      	add	r2, r3
 8015e02:	693b      	ldr	r3, [r7, #16]
 8015e04:	3304      	adds	r3, #4
 8015e06:	4619      	mov	r1, r3
 8015e08:	4610      	mov	r0, r2
 8015e0a:	f7fe fd2c 	bl	8014866 <vListInsertEnd>
 8015e0e:	e005      	b.n	8015e1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015e10:	693b      	ldr	r3, [r7, #16]
 8015e12:	3318      	adds	r3, #24
 8015e14:	4619      	mov	r1, r3
 8015e16:	480e      	ldr	r0, [pc, #56]	; (8015e50 <xTaskRemoveFromEventList+0xb8>)
 8015e18:	f7fe fd25 	bl	8014866 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e20:	4b0c      	ldr	r3, [pc, #48]	; (8015e54 <xTaskRemoveFromEventList+0xbc>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e26:	429a      	cmp	r2, r3
 8015e28:	d905      	bls.n	8015e36 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015e2e:	4b0a      	ldr	r3, [pc, #40]	; (8015e58 <xTaskRemoveFromEventList+0xc0>)
 8015e30:	2201      	movs	r2, #1
 8015e32:	601a      	str	r2, [r3, #0]
 8015e34:	e001      	b.n	8015e3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8015e36:	2300      	movs	r3, #0
 8015e38:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8015e3a:	697b      	ldr	r3, [r7, #20]
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3718      	adds	r7, #24
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}
 8015e44:	20000c74 	.word	0x20000c74
 8015e48:	20000c54 	.word	0x20000c54
 8015e4c:	20000b50 	.word	0x20000b50
 8015e50:	20000c0c 	.word	0x20000c0c
 8015e54:	20000b4c 	.word	0x20000b4c
 8015e58:	20000c60 	.word	0x20000c60

08015e5c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	b085      	sub	sp, #20
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d10a      	bne.n	8015e80 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8015e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e6e:	f383 8811 	msr	BASEPRI, r3
 8015e72:	f3bf 8f6f 	isb	sy
 8015e76:	f3bf 8f4f 	dsb	sy
 8015e7a:	60fb      	str	r3, [r7, #12]
}
 8015e7c:	bf00      	nop
 8015e7e:	e7fe      	b.n	8015e7e <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015e80:	4b06      	ldr	r3, [pc, #24]	; (8015e9c <vTaskSetTimeOutState+0x40>)
 8015e82:	681a      	ldr	r2, [r3, #0]
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015e88:	4b05      	ldr	r3, [pc, #20]	; (8015ea0 <vTaskSetTimeOutState+0x44>)
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	605a      	str	r2, [r3, #4]
}
 8015e90:	bf00      	nop
 8015e92:	3714      	adds	r7, #20
 8015e94:	46bd      	mov	sp, r7
 8015e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9a:	4770      	bx	lr
 8015e9c:	20000c64 	.word	0x20000c64
 8015ea0:	20000c50 	.word	0x20000c50

08015ea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b086      	sub	sp, #24
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d10a      	bne.n	8015eca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb8:	f383 8811 	msr	BASEPRI, r3
 8015ebc:	f3bf 8f6f 	isb	sy
 8015ec0:	f3bf 8f4f 	dsb	sy
 8015ec4:	60fb      	str	r3, [r7, #12]
}
 8015ec6:	bf00      	nop
 8015ec8:	e7fe      	b.n	8015ec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d10a      	bne.n	8015ee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ed4:	f383 8811 	msr	BASEPRI, r3
 8015ed8:	f3bf 8f6f 	isb	sy
 8015edc:	f3bf 8f4f 	dsb	sy
 8015ee0:	60bb      	str	r3, [r7, #8]
}
 8015ee2:	bf00      	nop
 8015ee4:	e7fe      	b.n	8015ee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015ee6:	f000 fe85 	bl	8016bf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015eea:	4b1c      	ldr	r3, [pc, #112]	; (8015f5c <xTaskCheckForTimeOut+0xb8>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ef8:	d102      	bne.n	8015f00 <xTaskCheckForTimeOut+0x5c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015efa:	2300      	movs	r3, #0
 8015efc:	617b      	str	r3, [r7, #20]
 8015efe:	e026      	b.n	8015f4e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681a      	ldr	r2, [r3, #0]
 8015f04:	4b16      	ldr	r3, [pc, #88]	; (8015f60 <xTaskCheckForTimeOut+0xbc>)
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d007      	beq.n	8015f1c <xTaskCheckForTimeOut+0x78>
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	693a      	ldr	r2, [r7, #16]
 8015f12:	429a      	cmp	r2, r3
 8015f14:	d302      	bcc.n	8015f1c <xTaskCheckForTimeOut+0x78>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015f16:	2301      	movs	r3, #1
 8015f18:	617b      	str	r3, [r7, #20]
 8015f1a:	e018      	b.n	8015f4e <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	693a      	ldr	r2, [r7, #16]
 8015f22:	1ad2      	subs	r2, r2, r3
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	d20e      	bcs.n	8015f4a <xTaskCheckForTimeOut+0xa6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	681a      	ldr	r2, [r3, #0]
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	6859      	ldr	r1, [r3, #4]
 8015f34:	693b      	ldr	r3, [r7, #16]
 8015f36:	1acb      	subs	r3, r1, r3
 8015f38:	441a      	add	r2, r3
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f7ff ff8c 	bl	8015e5c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8015f44:	2300      	movs	r3, #0
 8015f46:	617b      	str	r3, [r7, #20]
 8015f48:	e001      	b.n	8015f4e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8015f4e:	f000 fe81 	bl	8016c54 <vPortExitCritical>

	return xReturn;
 8015f52:	697b      	ldr	r3, [r7, #20]
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	3718      	adds	r7, #24
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}
 8015f5c:	20000c50 	.word	0x20000c50
 8015f60:	20000c64 	.word	0x20000c64

08015f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015f64:	b480      	push	{r7}
 8015f66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015f68:	4b03      	ldr	r3, [pc, #12]	; (8015f78 <vTaskMissedYield+0x14>)
 8015f6a:	2201      	movs	r2, #1
 8015f6c:	601a      	str	r2, [r3, #0]
}
 8015f6e:	bf00      	nop
 8015f70:	46bd      	mov	sp, r7
 8015f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f76:	4770      	bx	lr
 8015f78:	20000c60 	.word	0x20000c60

08015f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b082      	sub	sp, #8
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015f84:	f000 f852 	bl	801602c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015f88:	4b06      	ldr	r3, [pc, #24]	; (8015fa4 <prvIdleTask+0x28>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	2b01      	cmp	r3, #1
 8015f8e:	d9f9      	bls.n	8015f84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015f90:	4b05      	ldr	r3, [pc, #20]	; (8015fa8 <prvIdleTask+0x2c>)
 8015f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f96:	601a      	str	r2, [r3, #0]
 8015f98:	f3bf 8f4f 	dsb	sy
 8015f9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015fa0:	e7f0      	b.n	8015f84 <prvIdleTask+0x8>
 8015fa2:	bf00      	nop
 8015fa4:	20000b50 	.word	0x20000b50
 8015fa8:	e000ed04 	.word	0xe000ed04

08015fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	607b      	str	r3, [r7, #4]
 8015fb6:	e00c      	b.n	8015fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	4613      	mov	r3, r2
 8015fbc:	009b      	lsls	r3, r3, #2
 8015fbe:	4413      	add	r3, r2
 8015fc0:	009b      	lsls	r3, r3, #2
 8015fc2:	4a12      	ldr	r2, [pc, #72]	; (801600c <prvInitialiseTaskLists+0x60>)
 8015fc4:	4413      	add	r3, r2
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7fe fc20 	bl	801480c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	3301      	adds	r3, #1
 8015fd0:	607b      	str	r3, [r7, #4]
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2b06      	cmp	r3, #6
 8015fd6:	d9ef      	bls.n	8015fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015fd8:	480d      	ldr	r0, [pc, #52]	; (8016010 <prvInitialiseTaskLists+0x64>)
 8015fda:	f7fe fc17 	bl	801480c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015fde:	480d      	ldr	r0, [pc, #52]	; (8016014 <prvInitialiseTaskLists+0x68>)
 8015fe0:	f7fe fc14 	bl	801480c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015fe4:	480c      	ldr	r0, [pc, #48]	; (8016018 <prvInitialiseTaskLists+0x6c>)
 8015fe6:	f7fe fc11 	bl	801480c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015fea:	480c      	ldr	r0, [pc, #48]	; (801601c <prvInitialiseTaskLists+0x70>)
 8015fec:	f7fe fc0e 	bl	801480c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015ff0:	480b      	ldr	r0, [pc, #44]	; (8016020 <prvInitialiseTaskLists+0x74>)
 8015ff2:	f7fe fc0b 	bl	801480c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015ff6:	4b0b      	ldr	r3, [pc, #44]	; (8016024 <prvInitialiseTaskLists+0x78>)
 8015ff8:	4a05      	ldr	r2, [pc, #20]	; (8016010 <prvInitialiseTaskLists+0x64>)
 8015ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015ffc:	4b0a      	ldr	r3, [pc, #40]	; (8016028 <prvInitialiseTaskLists+0x7c>)
 8015ffe:	4a05      	ldr	r2, [pc, #20]	; (8016014 <prvInitialiseTaskLists+0x68>)
 8016000:	601a      	str	r2, [r3, #0]
}
 8016002:	bf00      	nop
 8016004:	3708      	adds	r7, #8
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}
 801600a:	bf00      	nop
 801600c:	20000b50 	.word	0x20000b50
 8016010:	20000bdc 	.word	0x20000bdc
 8016014:	20000bf0 	.word	0x20000bf0
 8016018:	20000c0c 	.word	0x20000c0c
 801601c:	20000c20 	.word	0x20000c20
 8016020:	20000c38 	.word	0x20000c38
 8016024:	20000c04 	.word	0x20000c04
 8016028:	20000c08 	.word	0x20000c08

0801602c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b082      	sub	sp, #8
 8016030:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016032:	e028      	b.n	8016086 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8016034:	f7ff fc8c 	bl	8015950 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8016038:	4b17      	ldr	r3, [pc, #92]	; (8016098 <prvCheckTasksWaitingTermination+0x6c>)
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	2b00      	cmp	r3, #0
 801603e:	bf0c      	ite	eq
 8016040:	2301      	moveq	r3, #1
 8016042:	2300      	movne	r3, #0
 8016044:	b2db      	uxtb	r3, r3
 8016046:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8016048:	f7ff fc90 	bl	801596c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d119      	bne.n	8016086 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8016052:	f000 fdcf 	bl	8016bf4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8016056:	4b10      	ldr	r3, [pc, #64]	; (8016098 <prvCheckTasksWaitingTermination+0x6c>)
 8016058:	68db      	ldr	r3, [r3, #12]
 801605a:	68db      	ldr	r3, [r3, #12]
 801605c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	3304      	adds	r3, #4
 8016062:	4618      	mov	r0, r3
 8016064:	f7fe fc5c 	bl	8014920 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8016068:	4b0c      	ldr	r3, [pc, #48]	; (801609c <prvCheckTasksWaitingTermination+0x70>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	3b01      	subs	r3, #1
 801606e:	4a0b      	ldr	r2, [pc, #44]	; (801609c <prvCheckTasksWaitingTermination+0x70>)
 8016070:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8016072:	4b0b      	ldr	r3, [pc, #44]	; (80160a0 <prvCheckTasksWaitingTermination+0x74>)
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	3b01      	subs	r3, #1
 8016078:	4a09      	ldr	r2, [pc, #36]	; (80160a0 <prvCheckTasksWaitingTermination+0x74>)
 801607a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 801607c:	f000 fdea 	bl	8016c54 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8016080:	6838      	ldr	r0, [r7, #0]
 8016082:	f000 f80f 	bl	80160a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016086:	4b06      	ldr	r3, [pc, #24]	; (80160a0 <prvCheckTasksWaitingTermination+0x74>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d1d2      	bne.n	8016034 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801608e:	bf00      	nop
 8016090:	bf00      	nop
 8016092:	3708      	adds	r7, #8
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}
 8016098:	20000c20 	.word	0x20000c20
 801609c:	20000c4c 	.word	0x20000c4c
 80160a0:	20000c34 	.word	0x20000c34

080160a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160b0:	4618      	mov	r0, r3
 80160b2:	f000 ff7d 	bl	8016fb0 <vPortFree>
			vPortFree( pxTCB );
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f000 ff7a 	bl	8016fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80160bc:	bf00      	nop
 80160be:	3708      	adds	r7, #8
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80160c4:	b480      	push	{r7}
 80160c6:	b083      	sub	sp, #12
 80160c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80160ca:	4b0f      	ldr	r3, [pc, #60]	; (8016108 <prvResetNextTaskUnblockTime+0x44>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d101      	bne.n	80160d8 <prvResetNextTaskUnblockTime+0x14>
 80160d4:	2301      	movs	r3, #1
 80160d6:	e000      	b.n	80160da <prvResetNextTaskUnblockTime+0x16>
 80160d8:	2300      	movs	r3, #0
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d004      	beq.n	80160e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80160de:	4b0b      	ldr	r3, [pc, #44]	; (801610c <prvResetNextTaskUnblockTime+0x48>)
 80160e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80160e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80160e6:	e008      	b.n	80160fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80160e8:	4b07      	ldr	r3, [pc, #28]	; (8016108 <prvResetNextTaskUnblockTime+0x44>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	68db      	ldr	r3, [r3, #12]
 80160ee:	68db      	ldr	r3, [r3, #12]
 80160f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	4a05      	ldr	r2, [pc, #20]	; (801610c <prvResetNextTaskUnblockTime+0x48>)
 80160f8:	6013      	str	r3, [r2, #0]
}
 80160fa:	bf00      	nop
 80160fc:	370c      	adds	r7, #12
 80160fe:	46bd      	mov	sp, r7
 8016100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016104:	4770      	bx	lr
 8016106:	bf00      	nop
 8016108:	20000c04 	.word	0x20000c04
 801610c:	20000c6c 	.word	0x20000c6c

08016110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016110:	b480      	push	{r7}
 8016112:	b083      	sub	sp, #12
 8016114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016116:	4b0b      	ldr	r3, [pc, #44]	; (8016144 <xTaskGetSchedulerState+0x34>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d102      	bne.n	8016124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801611e:	2301      	movs	r3, #1
 8016120:	607b      	str	r3, [r7, #4]
 8016122:	e008      	b.n	8016136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016124:	4b08      	ldr	r3, [pc, #32]	; (8016148 <xTaskGetSchedulerState+0x38>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d102      	bne.n	8016132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801612c:	2302      	movs	r3, #2
 801612e:	607b      	str	r3, [r7, #4]
 8016130:	e001      	b.n	8016136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016132:	2300      	movs	r3, #0
 8016134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016136:	687b      	ldr	r3, [r7, #4]
	}
 8016138:	4618      	mov	r0, r3
 801613a:	370c      	adds	r7, #12
 801613c:	46bd      	mov	sp, r7
 801613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016142:	4770      	bx	lr
 8016144:	20000c58 	.word	0x20000c58
 8016148:	20000c74 	.word	0x20000c74

0801614c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801614c:	b580      	push	{r7, lr}
 801614e:	b084      	sub	sp, #16
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d062      	beq.n	8016224 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016162:	4b32      	ldr	r3, [pc, #200]	; (801622c <vTaskPriorityInherit+0xe0>)
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016168:	429a      	cmp	r2, r3
 801616a:	d25b      	bcs.n	8016224 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	699b      	ldr	r3, [r3, #24]
 8016170:	2b00      	cmp	r3, #0
 8016172:	db06      	blt.n	8016182 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016174:	4b2d      	ldr	r3, [pc, #180]	; (801622c <vTaskPriorityInherit+0xe0>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801617a:	f1c3 0207 	rsb	r2, r3, #7
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	6959      	ldr	r1, [r3, #20]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801618a:	4613      	mov	r3, r2
 801618c:	009b      	lsls	r3, r3, #2
 801618e:	4413      	add	r3, r2
 8016190:	009b      	lsls	r3, r3, #2
 8016192:	4a27      	ldr	r2, [pc, #156]	; (8016230 <vTaskPriorityInherit+0xe4>)
 8016194:	4413      	add	r3, r2
 8016196:	4299      	cmp	r1, r3
 8016198:	d101      	bne.n	801619e <vTaskPriorityInherit+0x52>
 801619a:	2301      	movs	r3, #1
 801619c:	e000      	b.n	80161a0 <vTaskPriorityInherit+0x54>
 801619e:	2300      	movs	r3, #0
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d03a      	beq.n	801621a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	3304      	adds	r3, #4
 80161a8:	4618      	mov	r0, r3
 80161aa:	f7fe fbb9 	bl	8014920 <uxListRemove>
 80161ae:	4603      	mov	r3, r0
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d115      	bne.n	80161e0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161b8:	491d      	ldr	r1, [pc, #116]	; (8016230 <vTaskPriorityInherit+0xe4>)
 80161ba:	4613      	mov	r3, r2
 80161bc:	009b      	lsls	r3, r3, #2
 80161be:	4413      	add	r3, r2
 80161c0:	009b      	lsls	r3, r3, #2
 80161c2:	440b      	add	r3, r1
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d10a      	bne.n	80161e0 <vTaskPriorityInherit+0x94>
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161ce:	2201      	movs	r2, #1
 80161d0:	fa02 f303 	lsl.w	r3, r2, r3
 80161d4:	43da      	mvns	r2, r3
 80161d6:	4b17      	ldr	r3, [pc, #92]	; (8016234 <vTaskPriorityInherit+0xe8>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	4013      	ands	r3, r2
 80161dc:	4a15      	ldr	r2, [pc, #84]	; (8016234 <vTaskPriorityInherit+0xe8>)
 80161de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80161e0:	4b12      	ldr	r3, [pc, #72]	; (801622c <vTaskPriorityInherit+0xe0>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161ee:	2201      	movs	r2, #1
 80161f0:	409a      	lsls	r2, r3
 80161f2:	4b10      	ldr	r3, [pc, #64]	; (8016234 <vTaskPriorityInherit+0xe8>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	4313      	orrs	r3, r2
 80161f8:	4a0e      	ldr	r2, [pc, #56]	; (8016234 <vTaskPriorityInherit+0xe8>)
 80161fa:	6013      	str	r3, [r2, #0]
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016200:	4613      	mov	r3, r2
 8016202:	009b      	lsls	r3, r3, #2
 8016204:	4413      	add	r3, r2
 8016206:	009b      	lsls	r3, r3, #2
 8016208:	4a09      	ldr	r2, [pc, #36]	; (8016230 <vTaskPriorityInherit+0xe4>)
 801620a:	441a      	add	r2, r3
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	3304      	adds	r3, #4
 8016210:	4619      	mov	r1, r3
 8016212:	4610      	mov	r0, r2
 8016214:	f7fe fb27 	bl	8014866 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016218:	e004      	b.n	8016224 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801621a:	4b04      	ldr	r3, [pc, #16]	; (801622c <vTaskPriorityInherit+0xe0>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8016224:	bf00      	nop
 8016226:	3710      	adds	r7, #16
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}
 801622c:	20000b4c 	.word	0x20000b4c
 8016230:	20000b50 	.word	0x20000b50
 8016234:	20000c54 	.word	0x20000c54

08016238 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016238:	b580      	push	{r7, lr}
 801623a:	b086      	sub	sp, #24
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016244:	2300      	movs	r3, #0
 8016246:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d06e      	beq.n	801632c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801624e:	4b3a      	ldr	r3, [pc, #232]	; (8016338 <xTaskPriorityDisinherit+0x100>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	693a      	ldr	r2, [r7, #16]
 8016254:	429a      	cmp	r2, r3
 8016256:	d00a      	beq.n	801626e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801625c:	f383 8811 	msr	BASEPRI, r3
 8016260:	f3bf 8f6f 	isb	sy
 8016264:	f3bf 8f4f 	dsb	sy
 8016268:	60fb      	str	r3, [r7, #12]
}
 801626a:	bf00      	nop
 801626c:	e7fe      	b.n	801626c <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 801626e:	693b      	ldr	r3, [r7, #16]
 8016270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016272:	2b00      	cmp	r3, #0
 8016274:	d10a      	bne.n	801628c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801627a:	f383 8811 	msr	BASEPRI, r3
 801627e:	f3bf 8f6f 	isb	sy
 8016282:	f3bf 8f4f 	dsb	sy
 8016286:	60bb      	str	r3, [r7, #8]
}
 8016288:	bf00      	nop
 801628a:	e7fe      	b.n	801628a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016290:	1e5a      	subs	r2, r3, #1
 8016292:	693b      	ldr	r3, [r7, #16]
 8016294:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016296:	693b      	ldr	r3, [r7, #16]
 8016298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801629a:	693b      	ldr	r3, [r7, #16]
 801629c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801629e:	429a      	cmp	r2, r3
 80162a0:	d044      	beq.n	801632c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d140      	bne.n	801632c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80162aa:	693b      	ldr	r3, [r7, #16]
 80162ac:	3304      	adds	r3, #4
 80162ae:	4618      	mov	r0, r3
 80162b0:	f7fe fb36 	bl	8014920 <uxListRemove>
 80162b4:	4603      	mov	r3, r0
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d115      	bne.n	80162e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80162ba:	693b      	ldr	r3, [r7, #16]
 80162bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162be:	491f      	ldr	r1, [pc, #124]	; (801633c <xTaskPriorityDisinherit+0x104>)
 80162c0:	4613      	mov	r3, r2
 80162c2:	009b      	lsls	r3, r3, #2
 80162c4:	4413      	add	r3, r2
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	440b      	add	r3, r1
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d10a      	bne.n	80162e6 <xTaskPriorityDisinherit+0xae>
 80162d0:	693b      	ldr	r3, [r7, #16]
 80162d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162d4:	2201      	movs	r2, #1
 80162d6:	fa02 f303 	lsl.w	r3, r2, r3
 80162da:	43da      	mvns	r2, r3
 80162dc:	4b18      	ldr	r3, [pc, #96]	; (8016340 <xTaskPriorityDisinherit+0x108>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	4013      	ands	r3, r2
 80162e2:	4a17      	ldr	r2, [pc, #92]	; (8016340 <xTaskPriorityDisinherit+0x108>)
 80162e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80162ea:	693b      	ldr	r3, [r7, #16]
 80162ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162f2:	f1c3 0207 	rsb	r2, r3, #7
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80162fa:	693b      	ldr	r3, [r7, #16]
 80162fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162fe:	2201      	movs	r2, #1
 8016300:	409a      	lsls	r2, r3
 8016302:	4b0f      	ldr	r3, [pc, #60]	; (8016340 <xTaskPriorityDisinherit+0x108>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	4313      	orrs	r3, r2
 8016308:	4a0d      	ldr	r2, [pc, #52]	; (8016340 <xTaskPriorityDisinherit+0x108>)
 801630a:	6013      	str	r3, [r2, #0]
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016310:	4613      	mov	r3, r2
 8016312:	009b      	lsls	r3, r3, #2
 8016314:	4413      	add	r3, r2
 8016316:	009b      	lsls	r3, r3, #2
 8016318:	4a08      	ldr	r2, [pc, #32]	; (801633c <xTaskPriorityDisinherit+0x104>)
 801631a:	441a      	add	r2, r3
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	3304      	adds	r3, #4
 8016320:	4619      	mov	r1, r3
 8016322:	4610      	mov	r0, r2
 8016324:	f7fe fa9f 	bl	8014866 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016328:	2301      	movs	r3, #1
 801632a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801632c:	697b      	ldr	r3, [r7, #20]
	}
 801632e:	4618      	mov	r0, r3
 8016330:	3718      	adds	r7, #24
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}
 8016336:	bf00      	nop
 8016338:	20000b4c 	.word	0x20000b4c
 801633c:	20000b50 	.word	0x20000b50
 8016340:	20000c54 	.word	0x20000c54

08016344 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8016344:	b480      	push	{r7}
 8016346:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016348:	4b07      	ldr	r3, [pc, #28]	; (8016368 <pvTaskIncrementMutexHeldCount+0x24>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d004      	beq.n	801635a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016350:	4b05      	ldr	r3, [pc, #20]	; (8016368 <pvTaskIncrementMutexHeldCount+0x24>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016356:	3201      	adds	r2, #1
 8016358:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801635a:	4b03      	ldr	r3, [pc, #12]	; (8016368 <pvTaskIncrementMutexHeldCount+0x24>)
 801635c:	681b      	ldr	r3, [r3, #0]
	}
 801635e:	4618      	mov	r0, r3
 8016360:	46bd      	mov	sp, r7
 8016362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016366:	4770      	bx	lr
 8016368:	20000b4c 	.word	0x20000b4c

0801636c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b084      	sub	sp, #16
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016376:	4b29      	ldr	r3, [pc, #164]	; (801641c <prvAddCurrentTaskToDelayedList+0xb0>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801637c:	4b28      	ldr	r3, [pc, #160]	; (8016420 <prvAddCurrentTaskToDelayedList+0xb4>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	3304      	adds	r3, #4
 8016382:	4618      	mov	r0, r3
 8016384:	f7fe facc 	bl	8014920 <uxListRemove>
 8016388:	4603      	mov	r3, r0
 801638a:	2b00      	cmp	r3, #0
 801638c:	d10b      	bne.n	80163a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801638e:	4b24      	ldr	r3, [pc, #144]	; (8016420 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016394:	2201      	movs	r2, #1
 8016396:	fa02 f303 	lsl.w	r3, r2, r3
 801639a:	43da      	mvns	r2, r3
 801639c:	4b21      	ldr	r3, [pc, #132]	; (8016424 <prvAddCurrentTaskToDelayedList+0xb8>)
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	4013      	ands	r3, r2
 80163a2:	4a20      	ldr	r2, [pc, #128]	; (8016424 <prvAddCurrentTaskToDelayedList+0xb8>)
 80163a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80163ac:	d10a      	bne.n	80163c4 <prvAddCurrentTaskToDelayedList+0x58>
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d007      	beq.n	80163c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80163b4:	4b1a      	ldr	r3, [pc, #104]	; (8016420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	3304      	adds	r3, #4
 80163ba:	4619      	mov	r1, r3
 80163bc:	481a      	ldr	r0, [pc, #104]	; (8016428 <prvAddCurrentTaskToDelayedList+0xbc>)
 80163be:	f7fe fa52 	bl	8014866 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80163c2:	e026      	b.n	8016412 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80163c4:	68fa      	ldr	r2, [r7, #12]
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	4413      	add	r3, r2
 80163ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80163cc:	4b14      	ldr	r3, [pc, #80]	; (8016420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	68ba      	ldr	r2, [r7, #8]
 80163d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80163d4:	68ba      	ldr	r2, [r7, #8]
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d209      	bcs.n	80163f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80163dc:	4b13      	ldr	r3, [pc, #76]	; (801642c <prvAddCurrentTaskToDelayedList+0xc0>)
 80163de:	681a      	ldr	r2, [r3, #0]
 80163e0:	4b0f      	ldr	r3, [pc, #60]	; (8016420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	3304      	adds	r3, #4
 80163e6:	4619      	mov	r1, r3
 80163e8:	4610      	mov	r0, r2
 80163ea:	f7fe fa60 	bl	80148ae <vListInsert>
}
 80163ee:	e010      	b.n	8016412 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80163f0:	4b0f      	ldr	r3, [pc, #60]	; (8016430 <prvAddCurrentTaskToDelayedList+0xc4>)
 80163f2:	681a      	ldr	r2, [r3, #0]
 80163f4:	4b0a      	ldr	r3, [pc, #40]	; (8016420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	3304      	adds	r3, #4
 80163fa:	4619      	mov	r1, r3
 80163fc:	4610      	mov	r0, r2
 80163fe:	f7fe fa56 	bl	80148ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016402:	4b0c      	ldr	r3, [pc, #48]	; (8016434 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	68ba      	ldr	r2, [r7, #8]
 8016408:	429a      	cmp	r2, r3
 801640a:	d202      	bcs.n	8016412 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801640c:	4a09      	ldr	r2, [pc, #36]	; (8016434 <prvAddCurrentTaskToDelayedList+0xc8>)
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	6013      	str	r3, [r2, #0]
}
 8016412:	bf00      	nop
 8016414:	3710      	adds	r7, #16
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	20000c50 	.word	0x20000c50
 8016420:	20000b4c 	.word	0x20000b4c
 8016424:	20000c54 	.word	0x20000c54
 8016428:	20000c38 	.word	0x20000c38
 801642c:	20000c08 	.word	0x20000c08
 8016430:	20000c04 	.word	0x20000c04
 8016434:	20000c6c 	.word	0x20000c6c

08016438 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 801643e:	2300      	movs	r3, #0
 8016440:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016442:	f000 fa95 	bl	8016970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016446:	4b11      	ldr	r3, [pc, #68]	; (801648c <xTimerCreateTimerTask+0x54>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d00b      	beq.n	8016466 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 801644e:	4b10      	ldr	r3, [pc, #64]	; (8016490 <xTimerCreateTimerTask+0x58>)
 8016450:	9301      	str	r3, [sp, #4]
 8016452:	2303      	movs	r3, #3
 8016454:	9300      	str	r3, [sp, #0]
 8016456:	2300      	movs	r3, #0
 8016458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801645c:	490d      	ldr	r1, [pc, #52]	; (8016494 <xTimerCreateTimerTask+0x5c>)
 801645e:	480e      	ldr	r0, [pc, #56]	; (8016498 <xTimerCreateTimerTask+0x60>)
 8016460:	f7ff f8be 	bl	80155e0 <xTaskCreate>
 8016464:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d10a      	bne.n	8016482 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 801646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016470:	f383 8811 	msr	BASEPRI, r3
 8016474:	f3bf 8f6f 	isb	sy
 8016478:	f3bf 8f4f 	dsb	sy
 801647c:	603b      	str	r3, [r7, #0]
}
 801647e:	bf00      	nop
 8016480:	e7fe      	b.n	8016480 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8016482:	687b      	ldr	r3, [r7, #4]
}
 8016484:	4618      	mov	r0, r3
 8016486:	3708      	adds	r7, #8
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}
 801648c:	20000ca8 	.word	0x20000ca8
 8016490:	20000cac 	.word	0x20000cac
 8016494:	0801bb60 	.word	0x0801bb60
 8016498:	080165b9 	.word	0x080165b9

0801649c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b08a      	sub	sp, #40	; 0x28
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	60f8      	str	r0, [r7, #12]
 80164a4:	60b9      	str	r1, [r7, #8]
 80164a6:	607a      	str	r2, [r7, #4]
 80164a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80164aa:	2300      	movs	r3, #0
 80164ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d10a      	bne.n	80164ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80164b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164b8:	f383 8811 	msr	BASEPRI, r3
 80164bc:	f3bf 8f6f 	isb	sy
 80164c0:	f3bf 8f4f 	dsb	sy
 80164c4:	623b      	str	r3, [r7, #32]
}
 80164c6:	bf00      	nop
 80164c8:	e7fe      	b.n	80164c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80164ca:	4b1a      	ldr	r3, [pc, #104]	; (8016534 <xTimerGenericCommand+0x98>)
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d02a      	beq.n	8016528 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80164de:	68bb      	ldr	r3, [r7, #8]
 80164e0:	2b05      	cmp	r3, #5
 80164e2:	dc18      	bgt.n	8016516 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80164e4:	f7ff fe14 	bl	8016110 <xTaskGetSchedulerState>
 80164e8:	4603      	mov	r3, r0
 80164ea:	2b02      	cmp	r3, #2
 80164ec:	d109      	bne.n	8016502 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80164ee:	4b11      	ldr	r3, [pc, #68]	; (8016534 <xTimerGenericCommand+0x98>)
 80164f0:	6818      	ldr	r0, [r3, #0]
 80164f2:	f107 0114 	add.w	r1, r7, #20
 80164f6:	2300      	movs	r3, #0
 80164f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164fa:	f7fe fb01 	bl	8014b00 <xQueueGenericSend>
 80164fe:	6278      	str	r0, [r7, #36]	; 0x24
 8016500:	e012      	b.n	8016528 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016502:	4b0c      	ldr	r3, [pc, #48]	; (8016534 <xTimerGenericCommand+0x98>)
 8016504:	6818      	ldr	r0, [r3, #0]
 8016506:	f107 0114 	add.w	r1, r7, #20
 801650a:	2300      	movs	r3, #0
 801650c:	2200      	movs	r2, #0
 801650e:	f7fe faf7 	bl	8014b00 <xQueueGenericSend>
 8016512:	6278      	str	r0, [r7, #36]	; 0x24
 8016514:	e008      	b.n	8016528 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016516:	4b07      	ldr	r3, [pc, #28]	; (8016534 <xTimerGenericCommand+0x98>)
 8016518:	6818      	ldr	r0, [r3, #0]
 801651a:	f107 0114 	add.w	r1, r7, #20
 801651e:	2300      	movs	r3, #0
 8016520:	683a      	ldr	r2, [r7, #0]
 8016522:	f7fe fbeb 	bl	8014cfc <xQueueGenericSendFromISR>
 8016526:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801652a:	4618      	mov	r0, r3
 801652c:	3728      	adds	r7, #40	; 0x28
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	20000ca8 	.word	0x20000ca8

08016538 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b088      	sub	sp, #32
 801653c:	af02      	add	r7, sp, #8
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016542:	4b1c      	ldr	r3, [pc, #112]	; (80165b4 <prvProcessExpiredTimer+0x7c>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	68db      	ldr	r3, [r3, #12]
 8016548:	68db      	ldr	r3, [r3, #12]
 801654a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801654c:	697b      	ldr	r3, [r7, #20]
 801654e:	3304      	adds	r3, #4
 8016550:	4618      	mov	r0, r3
 8016552:	f7fe f9e5 	bl	8014920 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	69db      	ldr	r3, [r3, #28]
 801655a:	2b01      	cmp	r3, #1
 801655c:	d122      	bne.n	80165a4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	699a      	ldr	r2, [r3, #24]
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	18d1      	adds	r1, r2, r3
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	683a      	ldr	r2, [r7, #0]
 801656a:	6978      	ldr	r0, [r7, #20]
 801656c:	f000 f8c8 	bl	8016700 <prvInsertTimerInActiveList>
 8016570:	4603      	mov	r3, r0
 8016572:	2b00      	cmp	r3, #0
 8016574:	d016      	beq.n	80165a4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016576:	2300      	movs	r3, #0
 8016578:	9300      	str	r3, [sp, #0]
 801657a:	2300      	movs	r3, #0
 801657c:	687a      	ldr	r2, [r7, #4]
 801657e:	2100      	movs	r1, #0
 8016580:	6978      	ldr	r0, [r7, #20]
 8016582:	f7ff ff8b 	bl	801649c <xTimerGenericCommand>
 8016586:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016588:	693b      	ldr	r3, [r7, #16]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d10a      	bne.n	80165a4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 801658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016592:	f383 8811 	msr	BASEPRI, r3
 8016596:	f3bf 8f6f 	isb	sy
 801659a:	f3bf 8f4f 	dsb	sy
 801659e:	60fb      	str	r3, [r7, #12]
}
 80165a0:	bf00      	nop
 80165a2:	e7fe      	b.n	80165a2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165a8:	6978      	ldr	r0, [r7, #20]
 80165aa:	4798      	blx	r3
}
 80165ac:	bf00      	nop
 80165ae:	3718      	adds	r7, #24
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}
 80165b4:	20000ca0 	.word	0x20000ca0

080165b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b084      	sub	sp, #16
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80165c0:	f107 0308 	add.w	r3, r7, #8
 80165c4:	4618      	mov	r0, r3
 80165c6:	f000 f857 	bl	8016678 <prvGetNextExpireTime>
 80165ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	4619      	mov	r1, r3
 80165d0:	68f8      	ldr	r0, [r7, #12]
 80165d2:	f000 f803 	bl	80165dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80165d6:	f000 f8d5 	bl	8016784 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80165da:	e7f1      	b.n	80165c0 <prvTimerTask+0x8>

080165dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b084      	sub	sp, #16
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
 80165e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80165e6:	f7ff f9b3 	bl	8015950 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80165ea:	f107 0308 	add.w	r3, r7, #8
 80165ee:	4618      	mov	r0, r3
 80165f0:	f000 f866 	bl	80166c0 <prvSampleTimeNow>
 80165f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80165f6:	68bb      	ldr	r3, [r7, #8]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d130      	bne.n	801665e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80165fc:	683b      	ldr	r3, [r7, #0]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d10a      	bne.n	8016618 <prvProcessTimerOrBlockTask+0x3c>
 8016602:	687a      	ldr	r2, [r7, #4]
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	429a      	cmp	r2, r3
 8016608:	d806      	bhi.n	8016618 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801660a:	f7ff f9af 	bl	801596c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801660e:	68f9      	ldr	r1, [r7, #12]
 8016610:	6878      	ldr	r0, [r7, #4]
 8016612:	f7ff ff91 	bl	8016538 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016616:	e024      	b.n	8016662 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d008      	beq.n	8016630 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801661e:	4b13      	ldr	r3, [pc, #76]	; (801666c <prvProcessTimerOrBlockTask+0x90>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	2b00      	cmp	r3, #0
 8016626:	bf0c      	ite	eq
 8016628:	2301      	moveq	r3, #1
 801662a:	2300      	movne	r3, #0
 801662c:	b2db      	uxtb	r3, r3
 801662e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016630:	4b0f      	ldr	r3, [pc, #60]	; (8016670 <prvProcessTimerOrBlockTask+0x94>)
 8016632:	6818      	ldr	r0, [r3, #0]
 8016634:	687a      	ldr	r2, [r7, #4]
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	1ad3      	subs	r3, r2, r3
 801663a:	683a      	ldr	r2, [r7, #0]
 801663c:	4619      	mov	r1, r3
 801663e:	f7fe ff9b 	bl	8015578 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8016642:	f7ff f993 	bl	801596c <xTaskResumeAll>
 8016646:	4603      	mov	r3, r0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d10a      	bne.n	8016662 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801664c:	4b09      	ldr	r3, [pc, #36]	; (8016674 <prvProcessTimerOrBlockTask+0x98>)
 801664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016652:	601a      	str	r2, [r3, #0]
 8016654:	f3bf 8f4f 	dsb	sy
 8016658:	f3bf 8f6f 	isb	sy
}
 801665c:	e001      	b.n	8016662 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801665e:	f7ff f985 	bl	801596c <xTaskResumeAll>
}
 8016662:	bf00      	nop
 8016664:	3710      	adds	r7, #16
 8016666:	46bd      	mov	sp, r7
 8016668:	bd80      	pop	{r7, pc}
 801666a:	bf00      	nop
 801666c:	20000ca4 	.word	0x20000ca4
 8016670:	20000ca8 	.word	0x20000ca8
 8016674:	e000ed04 	.word	0xe000ed04

08016678 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016678:	b480      	push	{r7}
 801667a:	b085      	sub	sp, #20
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016680:	4b0e      	ldr	r3, [pc, #56]	; (80166bc <prvGetNextExpireTime+0x44>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	2b00      	cmp	r3, #0
 8016688:	bf0c      	ite	eq
 801668a:	2301      	moveq	r3, #1
 801668c:	2300      	movne	r3, #0
 801668e:	b2db      	uxtb	r3, r3
 8016690:	461a      	mov	r2, r3
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d105      	bne.n	80166aa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801669e:	4b07      	ldr	r3, [pc, #28]	; (80166bc <prvGetNextExpireTime+0x44>)
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	68db      	ldr	r3, [r3, #12]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	60fb      	str	r3, [r7, #12]
 80166a8:	e001      	b.n	80166ae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80166aa:	2300      	movs	r3, #0
 80166ac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80166ae:	68fb      	ldr	r3, [r7, #12]
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	3714      	adds	r7, #20
 80166b4:	46bd      	mov	sp, r7
 80166b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ba:	4770      	bx	lr
 80166bc:	20000ca0 	.word	0x20000ca0

080166c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b084      	sub	sp, #16
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80166c8:	f7ff f9ec 	bl	8015aa4 <xTaskGetTickCount>
 80166cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80166ce:	4b0b      	ldr	r3, [pc, #44]	; (80166fc <prvSampleTimeNow+0x3c>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	68fa      	ldr	r2, [r7, #12]
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d205      	bcs.n	80166e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80166d8:	f000 f8e8 	bl	80168ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	2201      	movs	r2, #1
 80166e0:	601a      	str	r2, [r3, #0]
 80166e2:	e002      	b.n	80166ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2200      	movs	r2, #0
 80166e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80166ea:	4a04      	ldr	r2, [pc, #16]	; (80166fc <prvSampleTimeNow+0x3c>)
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80166f0:	68fb      	ldr	r3, [r7, #12]
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	3710      	adds	r7, #16
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
 80166fa:	bf00      	nop
 80166fc:	20000cb0 	.word	0x20000cb0

08016700 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b086      	sub	sp, #24
 8016704:	af00      	add	r7, sp, #0
 8016706:	60f8      	str	r0, [r7, #12]
 8016708:	60b9      	str	r1, [r7, #8]
 801670a:	607a      	str	r2, [r7, #4]
 801670c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801670e:	2300      	movs	r3, #0
 8016710:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	68ba      	ldr	r2, [r7, #8]
 8016716:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	68fa      	ldr	r2, [r7, #12]
 801671c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801671e:	68ba      	ldr	r2, [r7, #8]
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	429a      	cmp	r2, r3
 8016724:	d812      	bhi.n	801674c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016726:	687a      	ldr	r2, [r7, #4]
 8016728:	683b      	ldr	r3, [r7, #0]
 801672a:	1ad2      	subs	r2, r2, r3
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	699b      	ldr	r3, [r3, #24]
 8016730:	429a      	cmp	r2, r3
 8016732:	d302      	bcc.n	801673a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016734:	2301      	movs	r3, #1
 8016736:	617b      	str	r3, [r7, #20]
 8016738:	e01b      	b.n	8016772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801673a:	4b10      	ldr	r3, [pc, #64]	; (801677c <prvInsertTimerInActiveList+0x7c>)
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	3304      	adds	r3, #4
 8016742:	4619      	mov	r1, r3
 8016744:	4610      	mov	r0, r2
 8016746:	f7fe f8b2 	bl	80148ae <vListInsert>
 801674a:	e012      	b.n	8016772 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	429a      	cmp	r2, r3
 8016752:	d206      	bcs.n	8016762 <prvInsertTimerInActiveList+0x62>
 8016754:	68ba      	ldr	r2, [r7, #8]
 8016756:	683b      	ldr	r3, [r7, #0]
 8016758:	429a      	cmp	r2, r3
 801675a:	d302      	bcc.n	8016762 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801675c:	2301      	movs	r3, #1
 801675e:	617b      	str	r3, [r7, #20]
 8016760:	e007      	b.n	8016772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016762:	4b07      	ldr	r3, [pc, #28]	; (8016780 <prvInsertTimerInActiveList+0x80>)
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	3304      	adds	r3, #4
 801676a:	4619      	mov	r1, r3
 801676c:	4610      	mov	r0, r2
 801676e:	f7fe f89e 	bl	80148ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016772:	697b      	ldr	r3, [r7, #20]
}
 8016774:	4618      	mov	r0, r3
 8016776:	3718      	adds	r7, #24
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}
 801677c:	20000ca4 	.word	0x20000ca4
 8016780:	20000ca0 	.word	0x20000ca0

08016784 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b08c      	sub	sp, #48	; 0x30
 8016788:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801678a:	e07c      	b.n	8016886 <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	2b00      	cmp	r3, #0
 8016790:	db78      	blt.n	8016884 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8016796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016798:	695b      	ldr	r3, [r3, #20]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d004      	beq.n	80167a8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a0:	3304      	adds	r3, #4
 80167a2:	4618      	mov	r0, r3
 80167a4:	f7fe f8bc 	bl	8014920 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80167a8:	1d3b      	adds	r3, r7, #4
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7ff ff88 	bl	80166c0 <prvSampleTimeNow>
 80167b0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80167b2:	68bb      	ldr	r3, [r7, #8]
 80167b4:	2b09      	cmp	r3, #9
 80167b6:	d866      	bhi.n	8016886 <prvProcessReceivedCommands+0x102>
 80167b8:	a201      	add	r2, pc, #4	; (adr r2, 80167c0 <prvProcessReceivedCommands+0x3c>)
 80167ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167be:	bf00      	nop
 80167c0:	080167e9 	.word	0x080167e9
 80167c4:	080167e9 	.word	0x080167e9
 80167c8:	080167e9 	.word	0x080167e9
 80167cc:	08016887 	.word	0x08016887
 80167d0:	08016845 	.word	0x08016845
 80167d4:	0801687d 	.word	0x0801687d
 80167d8:	080167e9 	.word	0x080167e9
 80167dc:	080167e9 	.word	0x080167e9
 80167e0:	08016887 	.word	0x08016887
 80167e4:	08016845 	.word	0x08016845
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80167e8:	68fa      	ldr	r2, [r7, #12]
 80167ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ec:	699b      	ldr	r3, [r3, #24]
 80167ee:	18d1      	adds	r1, r2, r3
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	6a3a      	ldr	r2, [r7, #32]
 80167f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167f6:	f7ff ff83 	bl	8016700 <prvInsertTimerInActiveList>
 80167fa:	4603      	mov	r3, r0
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d042      	beq.n	8016886 <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016806:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8016808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801680a:	69db      	ldr	r3, [r3, #28]
 801680c:	2b01      	cmp	r3, #1
 801680e:	d13a      	bne.n	8016886 <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016810:	68fa      	ldr	r2, [r7, #12]
 8016812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016814:	699b      	ldr	r3, [r3, #24]
 8016816:	441a      	add	r2, r3
 8016818:	2300      	movs	r3, #0
 801681a:	9300      	str	r3, [sp, #0]
 801681c:	2300      	movs	r3, #0
 801681e:	2100      	movs	r1, #0
 8016820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016822:	f7ff fe3b 	bl	801649c <xTimerGenericCommand>
 8016826:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8016828:	69fb      	ldr	r3, [r7, #28]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d12b      	bne.n	8016886 <prvProcessReceivedCommands+0x102>
	__asm volatile
 801682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016832:	f383 8811 	msr	BASEPRI, r3
 8016836:	f3bf 8f6f 	isb	sy
 801683a:	f3bf 8f4f 	dsb	sy
 801683e:	61bb      	str	r3, [r7, #24]
}
 8016840:	bf00      	nop
 8016842:	e7fe      	b.n	8016842 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016844:	68fa      	ldr	r2, [r7, #12]
 8016846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016848:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801684c:	699b      	ldr	r3, [r3, #24]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d10a      	bne.n	8016868 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8016852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016856:	f383 8811 	msr	BASEPRI, r3
 801685a:	f3bf 8f6f 	isb	sy
 801685e:	f3bf 8f4f 	dsb	sy
 8016862:	617b      	str	r3, [r7, #20]
}
 8016864:	bf00      	nop
 8016866:	e7fe      	b.n	8016866 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801686a:	699a      	ldr	r2, [r3, #24]
 801686c:	6a3b      	ldr	r3, [r7, #32]
 801686e:	18d1      	adds	r1, r2, r3
 8016870:	6a3b      	ldr	r3, [r7, #32]
 8016872:	6a3a      	ldr	r2, [r7, #32]
 8016874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016876:	f7ff ff43 	bl	8016700 <prvInsertTimerInActiveList>
					break;
 801687a:	e004      	b.n	8016886 <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 801687c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801687e:	f000 fb97 	bl	8016fb0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016882:	e000      	b.n	8016886 <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016884:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016886:	4b08      	ldr	r3, [pc, #32]	; (80168a8 <prvProcessReceivedCommands+0x124>)
 8016888:	6818      	ldr	r0, [r3, #0]
 801688a:	f107 0108 	add.w	r1, r7, #8
 801688e:	2300      	movs	r3, #0
 8016890:	2200      	movs	r2, #0
 8016892:	f7fe fb59 	bl	8014f48 <xQueueGenericReceive>
 8016896:	4603      	mov	r3, r0
 8016898:	2b00      	cmp	r3, #0
 801689a:	f47f af77 	bne.w	801678c <prvProcessReceivedCommands+0x8>
	}
}
 801689e:	bf00      	nop
 80168a0:	bf00      	nop
 80168a2:	3728      	adds	r7, #40	; 0x28
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	20000ca8 	.word	0x20000ca8

080168ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b088      	sub	sp, #32
 80168b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80168b2:	e045      	b.n	8016940 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80168b4:	4b2c      	ldr	r3, [pc, #176]	; (8016968 <prvSwitchTimerLists+0xbc>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	68db      	ldr	r3, [r3, #12]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80168be:	4b2a      	ldr	r3, [pc, #168]	; (8016968 <prvSwitchTimerLists+0xbc>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	68db      	ldr	r3, [r3, #12]
 80168c4:	68db      	ldr	r3, [r3, #12]
 80168c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	3304      	adds	r3, #4
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7fe f827 	bl	8014920 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d6:	68f8      	ldr	r0, [r7, #12]
 80168d8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	69db      	ldr	r3, [r3, #28]
 80168de:	2b01      	cmp	r3, #1
 80168e0:	d12e      	bne.n	8016940 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	699b      	ldr	r3, [r3, #24]
 80168e6:	693a      	ldr	r2, [r7, #16]
 80168e8:	4413      	add	r3, r2
 80168ea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80168ec:	68ba      	ldr	r2, [r7, #8]
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	429a      	cmp	r2, r3
 80168f2:	d90e      	bls.n	8016912 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	68ba      	ldr	r2, [r7, #8]
 80168f8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	68fa      	ldr	r2, [r7, #12]
 80168fe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016900:	4b19      	ldr	r3, [pc, #100]	; (8016968 <prvSwitchTimerLists+0xbc>)
 8016902:	681a      	ldr	r2, [r3, #0]
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	3304      	adds	r3, #4
 8016908:	4619      	mov	r1, r3
 801690a:	4610      	mov	r0, r2
 801690c:	f7fd ffcf 	bl	80148ae <vListInsert>
 8016910:	e016      	b.n	8016940 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016912:	2300      	movs	r3, #0
 8016914:	9300      	str	r3, [sp, #0]
 8016916:	2300      	movs	r3, #0
 8016918:	693a      	ldr	r2, [r7, #16]
 801691a:	2100      	movs	r1, #0
 801691c:	68f8      	ldr	r0, [r7, #12]
 801691e:	f7ff fdbd 	bl	801649c <xTimerGenericCommand>
 8016922:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d10a      	bne.n	8016940 <prvSwitchTimerLists+0x94>
	__asm volatile
 801692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801692e:	f383 8811 	msr	BASEPRI, r3
 8016932:	f3bf 8f6f 	isb	sy
 8016936:	f3bf 8f4f 	dsb	sy
 801693a:	603b      	str	r3, [r7, #0]
}
 801693c:	bf00      	nop
 801693e:	e7fe      	b.n	801693e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016940:	4b09      	ldr	r3, [pc, #36]	; (8016968 <prvSwitchTimerLists+0xbc>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d1b4      	bne.n	80168b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801694a:	4b07      	ldr	r3, [pc, #28]	; (8016968 <prvSwitchTimerLists+0xbc>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016950:	4b06      	ldr	r3, [pc, #24]	; (801696c <prvSwitchTimerLists+0xc0>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	4a04      	ldr	r2, [pc, #16]	; (8016968 <prvSwitchTimerLists+0xbc>)
 8016956:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016958:	4a04      	ldr	r2, [pc, #16]	; (801696c <prvSwitchTimerLists+0xc0>)
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	6013      	str	r3, [r2, #0]
}
 801695e:	bf00      	nop
 8016960:	3718      	adds	r7, #24
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	20000ca0 	.word	0x20000ca0
 801696c:	20000ca4 	.word	0x20000ca4

08016970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016970:	b580      	push	{r7, lr}
 8016972:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016974:	f000 f93e 	bl	8016bf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016978:	4b12      	ldr	r3, [pc, #72]	; (80169c4 <prvCheckForValidListAndQueue+0x54>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d11d      	bne.n	80169bc <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8016980:	4811      	ldr	r0, [pc, #68]	; (80169c8 <prvCheckForValidListAndQueue+0x58>)
 8016982:	f7fd ff43 	bl	801480c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016986:	4811      	ldr	r0, [pc, #68]	; (80169cc <prvCheckForValidListAndQueue+0x5c>)
 8016988:	f7fd ff40 	bl	801480c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801698c:	4b10      	ldr	r3, [pc, #64]	; (80169d0 <prvCheckForValidListAndQueue+0x60>)
 801698e:	4a0e      	ldr	r2, [pc, #56]	; (80169c8 <prvCheckForValidListAndQueue+0x58>)
 8016990:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016992:	4b10      	ldr	r3, [pc, #64]	; (80169d4 <prvCheckForValidListAndQueue+0x64>)
 8016994:	4a0d      	ldr	r2, [pc, #52]	; (80169cc <prvCheckForValidListAndQueue+0x5c>)
 8016996:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8016998:	2200      	movs	r2, #0
 801699a:	210c      	movs	r1, #12
 801699c:	200a      	movs	r0, #10
 801699e:	f7fe f851 	bl	8014a44 <xQueueGenericCreate>
 80169a2:	4603      	mov	r3, r0
 80169a4:	4a07      	ldr	r2, [pc, #28]	; (80169c4 <prvCheckForValidListAndQueue+0x54>)
 80169a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80169a8:	4b06      	ldr	r3, [pc, #24]	; (80169c4 <prvCheckForValidListAndQueue+0x54>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d005      	beq.n	80169bc <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80169b0:	4b04      	ldr	r3, [pc, #16]	; (80169c4 <prvCheckForValidListAndQueue+0x54>)
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	4908      	ldr	r1, [pc, #32]	; (80169d8 <prvCheckForValidListAndQueue+0x68>)
 80169b6:	4618      	mov	r0, r3
 80169b8:	f7fe fd8a 	bl	80154d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80169bc:	f000 f94a 	bl	8016c54 <vPortExitCritical>
}
 80169c0:	bf00      	nop
 80169c2:	bd80      	pop	{r7, pc}
 80169c4:	20000ca8 	.word	0x20000ca8
 80169c8:	20000c78 	.word	0x20000c78
 80169cc:	20000c8c 	.word	0x20000c8c
 80169d0:	20000ca0 	.word	0x20000ca0
 80169d4:	20000ca4 	.word	0x20000ca4
 80169d8:	0801bb68 	.word	0x0801bb68

080169dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80169dc:	b480      	push	{r7}
 80169de:	b085      	sub	sp, #20
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	3b04      	subs	r3, #4
 80169ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80169f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	3b04      	subs	r3, #4
 80169fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80169fc:	68bb      	ldr	r3, [r7, #8]
 80169fe:	f023 0201 	bic.w	r2, r3, #1
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	3b04      	subs	r3, #4
 8016a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016a0c:	4a0c      	ldr	r2, [pc, #48]	; (8016a40 <pxPortInitialiseStack+0x64>)
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	3b14      	subs	r3, #20
 8016a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016a18:	687a      	ldr	r2, [r7, #4]
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	3b04      	subs	r3, #4
 8016a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	f06f 0202 	mvn.w	r2, #2
 8016a2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	3b20      	subs	r3, #32
 8016a30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016a32:	68fb      	ldr	r3, [r7, #12]
}
 8016a34:	4618      	mov	r0, r3
 8016a36:	3714      	adds	r7, #20
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3e:	4770      	bx	lr
 8016a40:	08016a45 	.word	0x08016a45

08016a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016a44:	b480      	push	{r7}
 8016a46:	b083      	sub	sp, #12
 8016a48:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016a4a:	4b0d      	ldr	r3, [pc, #52]	; (8016a80 <prvTaskExitError+0x3c>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a52:	d00a      	beq.n	8016a6a <prvTaskExitError+0x26>
	__asm volatile
 8016a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a58:	f383 8811 	msr	BASEPRI, r3
 8016a5c:	f3bf 8f6f 	isb	sy
 8016a60:	f3bf 8f4f 	dsb	sy
 8016a64:	607b      	str	r3, [r7, #4]
}
 8016a66:	bf00      	nop
 8016a68:	e7fe      	b.n	8016a68 <prvTaskExitError+0x24>
	__asm volatile
 8016a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a6e:	f383 8811 	msr	BASEPRI, r3
 8016a72:	f3bf 8f6f 	isb	sy
 8016a76:	f3bf 8f4f 	dsb	sy
 8016a7a:	603b      	str	r3, [r7, #0]
}
 8016a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 8016a7e:	e7fe      	b.n	8016a7e <prvTaskExitError+0x3a>
 8016a80:	20000020 	.word	0x20000020
	...

08016a90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016a90:	4b07      	ldr	r3, [pc, #28]	; (8016ab0 <pxCurrentTCBConst2>)
 8016a92:	6819      	ldr	r1, [r3, #0]
 8016a94:	6808      	ldr	r0, [r1, #0]
 8016a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a9a:	f380 8809 	msr	PSP, r0
 8016a9e:	f3bf 8f6f 	isb	sy
 8016aa2:	f04f 0000 	mov.w	r0, #0
 8016aa6:	f380 8811 	msr	BASEPRI, r0
 8016aaa:	4770      	bx	lr
 8016aac:	f3af 8000 	nop.w

08016ab0 <pxCurrentTCBConst2>:
 8016ab0:	20000b4c 	.word	0x20000b4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016ab4:	bf00      	nop
 8016ab6:	bf00      	nop

08016ab8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8016ab8:	4806      	ldr	r0, [pc, #24]	; (8016ad4 <prvPortStartFirstTask+0x1c>)
 8016aba:	6800      	ldr	r0, [r0, #0]
 8016abc:	6800      	ldr	r0, [r0, #0]
 8016abe:	f380 8808 	msr	MSP, r0
 8016ac2:	b662      	cpsie	i
 8016ac4:	b661      	cpsie	f
 8016ac6:	f3bf 8f4f 	dsb	sy
 8016aca:	f3bf 8f6f 	isb	sy
 8016ace:	df00      	svc	0
 8016ad0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016ad2:	bf00      	nop
 8016ad4:	e000ed08 	.word	0xe000ed08

08016ad8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b086      	sub	sp, #24
 8016adc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016ade:	4b3c      	ldr	r3, [pc, #240]	; (8016bd0 <xPortStartScheduler+0xf8>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	4a3c      	ldr	r2, [pc, #240]	; (8016bd4 <xPortStartScheduler+0xfc>)
 8016ae4:	4293      	cmp	r3, r2
 8016ae6:	d10a      	bne.n	8016afe <xPortStartScheduler+0x26>
	__asm volatile
 8016ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aec:	f383 8811 	msr	BASEPRI, r3
 8016af0:	f3bf 8f6f 	isb	sy
 8016af4:	f3bf 8f4f 	dsb	sy
 8016af8:	613b      	str	r3, [r7, #16]
}
 8016afa:	bf00      	nop
 8016afc:	e7fe      	b.n	8016afc <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016afe:	4b34      	ldr	r3, [pc, #208]	; (8016bd0 <xPortStartScheduler+0xf8>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	4a35      	ldr	r2, [pc, #212]	; (8016bd8 <xPortStartScheduler+0x100>)
 8016b04:	4293      	cmp	r3, r2
 8016b06:	d10a      	bne.n	8016b1e <xPortStartScheduler+0x46>
	__asm volatile
 8016b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b0c:	f383 8811 	msr	BASEPRI, r3
 8016b10:	f3bf 8f6f 	isb	sy
 8016b14:	f3bf 8f4f 	dsb	sy
 8016b18:	60fb      	str	r3, [r7, #12]
}
 8016b1a:	bf00      	nop
 8016b1c:	e7fe      	b.n	8016b1c <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016b1e:	4b2f      	ldr	r3, [pc, #188]	; (8016bdc <xPortStartScheduler+0x104>)
 8016b20:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016b22:	697b      	ldr	r3, [r7, #20]
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	b2db      	uxtb	r3, r3
 8016b28:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	22ff      	movs	r2, #255	; 0xff
 8016b2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	781b      	ldrb	r3, [r3, #0]
 8016b34:	b2db      	uxtb	r3, r3
 8016b36:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016b38:	79fb      	ldrb	r3, [r7, #7]
 8016b3a:	b2db      	uxtb	r3, r3
 8016b3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016b40:	b2da      	uxtb	r2, r3
 8016b42:	4b27      	ldr	r3, [pc, #156]	; (8016be0 <xPortStartScheduler+0x108>)
 8016b44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016b46:	4b27      	ldr	r3, [pc, #156]	; (8016be4 <xPortStartScheduler+0x10c>)
 8016b48:	2207      	movs	r2, #7
 8016b4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b4c:	e009      	b.n	8016b62 <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016b4e:	4b25      	ldr	r3, [pc, #148]	; (8016be4 <xPortStartScheduler+0x10c>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	3b01      	subs	r3, #1
 8016b54:	4a23      	ldr	r2, [pc, #140]	; (8016be4 <xPortStartScheduler+0x10c>)
 8016b56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016b58:	79fb      	ldrb	r3, [r7, #7]
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	005b      	lsls	r3, r3, #1
 8016b5e:	b2db      	uxtb	r3, r3
 8016b60:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b62:	79fb      	ldrb	r3, [r7, #7]
 8016b64:	b2db      	uxtb	r3, r3
 8016b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b6a:	2b80      	cmp	r3, #128	; 0x80
 8016b6c:	d0ef      	beq.n	8016b4e <xPortStartScheduler+0x76>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016b6e:	4b1d      	ldr	r3, [pc, #116]	; (8016be4 <xPortStartScheduler+0x10c>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	021b      	lsls	r3, r3, #8
 8016b74:	4a1b      	ldr	r2, [pc, #108]	; (8016be4 <xPortStartScheduler+0x10c>)
 8016b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016b78:	4b1a      	ldr	r3, [pc, #104]	; (8016be4 <xPortStartScheduler+0x10c>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016b80:	4a18      	ldr	r2, [pc, #96]	; (8016be4 <xPortStartScheduler+0x10c>)
 8016b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	b2da      	uxtb	r2, r3
 8016b88:	697b      	ldr	r3, [r7, #20]
 8016b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016b8c:	4b16      	ldr	r3, [pc, #88]	; (8016be8 <xPortStartScheduler+0x110>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	4a15      	ldr	r2, [pc, #84]	; (8016be8 <xPortStartScheduler+0x110>)
 8016b92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016b98:	4b13      	ldr	r3, [pc, #76]	; (8016be8 <xPortStartScheduler+0x110>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	4a12      	ldr	r2, [pc, #72]	; (8016be8 <xPortStartScheduler+0x110>)
 8016b9e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016ba4:	f000 f8da 	bl	8016d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016ba8:	4b10      	ldr	r3, [pc, #64]	; (8016bec <xPortStartScheduler+0x114>)
 8016baa:	2200      	movs	r2, #0
 8016bac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016bae:	f000 f8f1 	bl	8016d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016bb2:	4b0f      	ldr	r3, [pc, #60]	; (8016bf0 <xPortStartScheduler+0x118>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	4a0e      	ldr	r2, [pc, #56]	; (8016bf0 <xPortStartScheduler+0x118>)
 8016bb8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016bbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016bbe:	f7ff ff7b 	bl	8016ab8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8016bc2:	f7ff ff3f 	bl	8016a44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016bc6:	2300      	movs	r3, #0
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3718      	adds	r7, #24
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}
 8016bd0:	e000ed00 	.word	0xe000ed00
 8016bd4:	410fc271 	.word	0x410fc271
 8016bd8:	410fc270 	.word	0x410fc270
 8016bdc:	e000e400 	.word	0xe000e400
 8016be0:	20000cb4 	.word	0x20000cb4
 8016be4:	20000cb8 	.word	0x20000cb8
 8016be8:	e000ed20 	.word	0xe000ed20
 8016bec:	20000020 	.word	0x20000020
 8016bf0:	e000ef34 	.word	0xe000ef34

08016bf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016bf4:	b480      	push	{r7}
 8016bf6:	b083      	sub	sp, #12
 8016bf8:	af00      	add	r7, sp, #0
	__asm volatile
 8016bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bfe:	f383 8811 	msr	BASEPRI, r3
 8016c02:	f3bf 8f6f 	isb	sy
 8016c06:	f3bf 8f4f 	dsb	sy
 8016c0a:	607b      	str	r3, [r7, #4]
}
 8016c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016c0e:	4b0f      	ldr	r3, [pc, #60]	; (8016c4c <vPortEnterCritical+0x58>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	3301      	adds	r3, #1
 8016c14:	4a0d      	ldr	r2, [pc, #52]	; (8016c4c <vPortEnterCritical+0x58>)
 8016c16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016c18:	4b0c      	ldr	r3, [pc, #48]	; (8016c4c <vPortEnterCritical+0x58>)
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	2b01      	cmp	r3, #1
 8016c1e:	d10f      	bne.n	8016c40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016c20:	4b0b      	ldr	r3, [pc, #44]	; (8016c50 <vPortEnterCritical+0x5c>)
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	b2db      	uxtb	r3, r3
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d00a      	beq.n	8016c40 <vPortEnterCritical+0x4c>
	__asm volatile
 8016c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c2e:	f383 8811 	msr	BASEPRI, r3
 8016c32:	f3bf 8f6f 	isb	sy
 8016c36:	f3bf 8f4f 	dsb	sy
 8016c3a:	603b      	str	r3, [r7, #0]
}
 8016c3c:	bf00      	nop
 8016c3e:	e7fe      	b.n	8016c3e <vPortEnterCritical+0x4a>
	}
}
 8016c40:	bf00      	nop
 8016c42:	370c      	adds	r7, #12
 8016c44:	46bd      	mov	sp, r7
 8016c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4a:	4770      	bx	lr
 8016c4c:	20000020 	.word	0x20000020
 8016c50:	e000ed04 	.word	0xe000ed04

08016c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016c54:	b480      	push	{r7}
 8016c56:	b083      	sub	sp, #12
 8016c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016c5a:	4b12      	ldr	r3, [pc, #72]	; (8016ca4 <vPortExitCritical+0x50>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d10a      	bne.n	8016c78 <vPortExitCritical+0x24>
	__asm volatile
 8016c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c66:	f383 8811 	msr	BASEPRI, r3
 8016c6a:	f3bf 8f6f 	isb	sy
 8016c6e:	f3bf 8f4f 	dsb	sy
 8016c72:	607b      	str	r3, [r7, #4]
}
 8016c74:	bf00      	nop
 8016c76:	e7fe      	b.n	8016c76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016c78:	4b0a      	ldr	r3, [pc, #40]	; (8016ca4 <vPortExitCritical+0x50>)
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	3b01      	subs	r3, #1
 8016c7e:	4a09      	ldr	r2, [pc, #36]	; (8016ca4 <vPortExitCritical+0x50>)
 8016c80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016c82:	4b08      	ldr	r3, [pc, #32]	; (8016ca4 <vPortExitCritical+0x50>)
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d105      	bne.n	8016c96 <vPortExitCritical+0x42>
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	f383 8811 	msr	BASEPRI, r3
}
 8016c94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016c96:	bf00      	nop
 8016c98:	370c      	adds	r7, #12
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca0:	4770      	bx	lr
 8016ca2:	bf00      	nop
 8016ca4:	20000020 	.word	0x20000020
	...

08016cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016cb0:	f3ef 8009 	mrs	r0, PSP
 8016cb4:	f3bf 8f6f 	isb	sy
 8016cb8:	4b15      	ldr	r3, [pc, #84]	; (8016d10 <pxCurrentTCBConst>)
 8016cba:	681a      	ldr	r2, [r3, #0]
 8016cbc:	f01e 0f10 	tst.w	lr, #16
 8016cc0:	bf08      	it	eq
 8016cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cca:	6010      	str	r0, [r2, #0]
 8016ccc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8016cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016cd4:	f380 8811 	msr	BASEPRI, r0
 8016cd8:	f3bf 8f4f 	dsb	sy
 8016cdc:	f3bf 8f6f 	isb	sy
 8016ce0:	f7fe ffae 	bl	8015c40 <vTaskSwitchContext>
 8016ce4:	f04f 0000 	mov.w	r0, #0
 8016ce8:	f380 8811 	msr	BASEPRI, r0
 8016cec:	bc08      	pop	{r3}
 8016cee:	6819      	ldr	r1, [r3, #0]
 8016cf0:	6808      	ldr	r0, [r1, #0]
 8016cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cf6:	f01e 0f10 	tst.w	lr, #16
 8016cfa:	bf08      	it	eq
 8016cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016d00:	f380 8809 	msr	PSP, r0
 8016d04:	f3bf 8f6f 	isb	sy
 8016d08:	4770      	bx	lr
 8016d0a:	bf00      	nop
 8016d0c:	f3af 8000 	nop.w

08016d10 <pxCurrentTCBConst>:
 8016d10:	20000b4c 	.word	0x20000b4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016d14:	bf00      	nop
 8016d16:	bf00      	nop

08016d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b082      	sub	sp, #8
 8016d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8016d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d22:	f383 8811 	msr	BASEPRI, r3
 8016d26:	f3bf 8f6f 	isb	sy
 8016d2a:	f3bf 8f4f 	dsb	sy
 8016d2e:	607b      	str	r3, [r7, #4]
}
 8016d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016d32:	f7fe fec7 	bl	8015ac4 <xTaskIncrementTick>
 8016d36:	4603      	mov	r3, r0
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d003      	beq.n	8016d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016d3c:	4b06      	ldr	r3, [pc, #24]	; (8016d58 <xPortSysTickHandler+0x40>)
 8016d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d42:	601a      	str	r2, [r3, #0]
 8016d44:	2300      	movs	r3, #0
 8016d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	f383 8811 	msr	BASEPRI, r3
}
 8016d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016d50:	bf00      	nop
 8016d52:	3708      	adds	r7, #8
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	e000ed04 	.word	0xe000ed04

08016d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016d5c:	b480      	push	{r7}
 8016d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016d60:	4b08      	ldr	r3, [pc, #32]	; (8016d84 <vPortSetupTimerInterrupt+0x28>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	4a08      	ldr	r2, [pc, #32]	; (8016d88 <vPortSetupTimerInterrupt+0x2c>)
 8016d66:	fba2 2303 	umull	r2, r3, r2, r3
 8016d6a:	099b      	lsrs	r3, r3, #6
 8016d6c:	4a07      	ldr	r2, [pc, #28]	; (8016d8c <vPortSetupTimerInterrupt+0x30>)
 8016d6e:	3b01      	subs	r3, #1
 8016d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016d72:	4b07      	ldr	r3, [pc, #28]	; (8016d90 <vPortSetupTimerInterrupt+0x34>)
 8016d74:	2207      	movs	r2, #7
 8016d76:	601a      	str	r2, [r3, #0]
}
 8016d78:	bf00      	nop
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d80:	4770      	bx	lr
 8016d82:	bf00      	nop
 8016d84:	2000001c 	.word	0x2000001c
 8016d88:	10624dd3 	.word	0x10624dd3
 8016d8c:	e000e014 	.word	0xe000e014
 8016d90:	e000e010 	.word	0xe000e010

08016d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016da4 <vPortEnableVFP+0x10>
 8016d98:	6801      	ldr	r1, [r0, #0]
 8016d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016d9e:	6001      	str	r1, [r0, #0]
 8016da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016da2:	bf00      	nop
 8016da4:	e000ed88 	.word	0xe000ed88

08016da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016da8:	b480      	push	{r7}
 8016daa:	b085      	sub	sp, #20
 8016dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8016dae:	f3ef 8305 	mrs	r3, IPSR
 8016db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	2b0f      	cmp	r3, #15
 8016db8:	d914      	bls.n	8016de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016dba:	4a17      	ldr	r2, [pc, #92]	; (8016e18 <vPortValidateInterruptPriority+0x70>)
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	4413      	add	r3, r2
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016dc4:	4b15      	ldr	r3, [pc, #84]	; (8016e1c <vPortValidateInterruptPriority+0x74>)
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	7afa      	ldrb	r2, [r7, #11]
 8016dca:	429a      	cmp	r2, r3
 8016dcc:	d20a      	bcs.n	8016de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dd2:	f383 8811 	msr	BASEPRI, r3
 8016dd6:	f3bf 8f6f 	isb	sy
 8016dda:	f3bf 8f4f 	dsb	sy
 8016dde:	607b      	str	r3, [r7, #4]
}
 8016de0:	bf00      	nop
 8016de2:	e7fe      	b.n	8016de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016de4:	4b0e      	ldr	r3, [pc, #56]	; (8016e20 <vPortValidateInterruptPriority+0x78>)
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016dec:	4b0d      	ldr	r3, [pc, #52]	; (8016e24 <vPortValidateInterruptPriority+0x7c>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	429a      	cmp	r2, r3
 8016df2:	d90a      	bls.n	8016e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016df8:	f383 8811 	msr	BASEPRI, r3
 8016dfc:	f3bf 8f6f 	isb	sy
 8016e00:	f3bf 8f4f 	dsb	sy
 8016e04:	603b      	str	r3, [r7, #0]
}
 8016e06:	bf00      	nop
 8016e08:	e7fe      	b.n	8016e08 <vPortValidateInterruptPriority+0x60>
	}
 8016e0a:	bf00      	nop
 8016e0c:	3714      	adds	r7, #20
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e14:	4770      	bx	lr
 8016e16:	bf00      	nop
 8016e18:	e000e3f0 	.word	0xe000e3f0
 8016e1c:	20000cb4 	.word	0x20000cb4
 8016e20:	e000ed0c 	.word	0xe000ed0c
 8016e24:	20000cb8 	.word	0x20000cb8

08016e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b08a      	sub	sp, #40	; 0x28
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016e30:	2300      	movs	r3, #0
 8016e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016e34:	f7fe fd8c 	bl	8015950 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016e38:	4b58      	ldr	r3, [pc, #352]	; (8016f9c <pvPortMalloc+0x174>)
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d101      	bne.n	8016e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016e40:	f000 f910 	bl	8017064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016e44:	4b56      	ldr	r3, [pc, #344]	; (8016fa0 <pvPortMalloc+0x178>)
 8016e46:	681a      	ldr	r2, [r3, #0]
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	4013      	ands	r3, r2
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	f040 808e 	bne.w	8016f6e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d01d      	beq.n	8016e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016e58:	2208      	movs	r2, #8
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	4413      	add	r3, r2
 8016e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f003 0307 	and.w	r3, r3, #7
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d014      	beq.n	8016e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	f023 0307 	bic.w	r3, r3, #7
 8016e70:	3308      	adds	r3, #8
 8016e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f003 0307 	and.w	r3, r3, #7
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d00a      	beq.n	8016e94 <pvPortMalloc+0x6c>
	__asm volatile
 8016e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e82:	f383 8811 	msr	BASEPRI, r3
 8016e86:	f3bf 8f6f 	isb	sy
 8016e8a:	f3bf 8f4f 	dsb	sy
 8016e8e:	617b      	str	r3, [r7, #20]
}
 8016e90:	bf00      	nop
 8016e92:	e7fe      	b.n	8016e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d069      	beq.n	8016f6e <pvPortMalloc+0x146>
 8016e9a:	4b42      	ldr	r3, [pc, #264]	; (8016fa4 <pvPortMalloc+0x17c>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	687a      	ldr	r2, [r7, #4]
 8016ea0:	429a      	cmp	r2, r3
 8016ea2:	d864      	bhi.n	8016f6e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016ea4:	4b40      	ldr	r3, [pc, #256]	; (8016fa8 <pvPortMalloc+0x180>)
 8016ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016ea8:	4b3f      	ldr	r3, [pc, #252]	; (8016fa8 <pvPortMalloc+0x180>)
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016eae:	e004      	b.n	8016eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ebc:	685b      	ldr	r3, [r3, #4]
 8016ebe:	687a      	ldr	r2, [r7, #4]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d903      	bls.n	8016ecc <pvPortMalloc+0xa4>
 8016ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d1f1      	bne.n	8016eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016ecc:	4b33      	ldr	r3, [pc, #204]	; (8016f9c <pvPortMalloc+0x174>)
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ed2:	429a      	cmp	r2, r3
 8016ed4:	d04b      	beq.n	8016f6e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016ed6:	6a3b      	ldr	r3, [r7, #32]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	2208      	movs	r2, #8
 8016edc:	4413      	add	r3, r2
 8016ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee2:	681a      	ldr	r2, [r3, #0]
 8016ee4:	6a3b      	ldr	r3, [r7, #32]
 8016ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eea:	685a      	ldr	r2, [r3, #4]
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	1ad2      	subs	r2, r2, r3
 8016ef0:	2308      	movs	r3, #8
 8016ef2:	005b      	lsls	r3, r3, #1
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d91f      	bls.n	8016f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	4413      	add	r3, r2
 8016efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016f00:	69bb      	ldr	r3, [r7, #24]
 8016f02:	f003 0307 	and.w	r3, r3, #7
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d00a      	beq.n	8016f20 <pvPortMalloc+0xf8>
	__asm volatile
 8016f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f0e:	f383 8811 	msr	BASEPRI, r3
 8016f12:	f3bf 8f6f 	isb	sy
 8016f16:	f3bf 8f4f 	dsb	sy
 8016f1a:	613b      	str	r3, [r7, #16]
}
 8016f1c:	bf00      	nop
 8016f1e:	e7fe      	b.n	8016f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f22:	685a      	ldr	r2, [r3, #4]
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	1ad2      	subs	r2, r2, r3
 8016f28:	69bb      	ldr	r3, [r7, #24]
 8016f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f2e:	687a      	ldr	r2, [r7, #4]
 8016f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016f32:	69b8      	ldr	r0, [r7, #24]
 8016f34:	f000 f8f8 	bl	8017128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016f38:	4b1a      	ldr	r3, [pc, #104]	; (8016fa4 <pvPortMalloc+0x17c>)
 8016f3a:	681a      	ldr	r2, [r3, #0]
 8016f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3e:	685b      	ldr	r3, [r3, #4]
 8016f40:	1ad3      	subs	r3, r2, r3
 8016f42:	4a18      	ldr	r2, [pc, #96]	; (8016fa4 <pvPortMalloc+0x17c>)
 8016f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016f46:	4b17      	ldr	r3, [pc, #92]	; (8016fa4 <pvPortMalloc+0x17c>)
 8016f48:	681a      	ldr	r2, [r3, #0]
 8016f4a:	4b18      	ldr	r3, [pc, #96]	; (8016fac <pvPortMalloc+0x184>)
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d203      	bcs.n	8016f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016f52:	4b14      	ldr	r3, [pc, #80]	; (8016fa4 <pvPortMalloc+0x17c>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	4a15      	ldr	r2, [pc, #84]	; (8016fac <pvPortMalloc+0x184>)
 8016f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f5c:	685a      	ldr	r2, [r3, #4]
 8016f5e:	4b10      	ldr	r3, [pc, #64]	; (8016fa0 <pvPortMalloc+0x178>)
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	431a      	orrs	r2, r3
 8016f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016f6e:	f7fe fcfd 	bl	801596c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016f72:	69fb      	ldr	r3, [r7, #28]
 8016f74:	f003 0307 	and.w	r3, r3, #7
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d00a      	beq.n	8016f92 <pvPortMalloc+0x16a>
	__asm volatile
 8016f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f80:	f383 8811 	msr	BASEPRI, r3
 8016f84:	f3bf 8f6f 	isb	sy
 8016f88:	f3bf 8f4f 	dsb	sy
 8016f8c:	60fb      	str	r3, [r7, #12]
}
 8016f8e:	bf00      	nop
 8016f90:	e7fe      	b.n	8016f90 <pvPortMalloc+0x168>
	return pvReturn;
 8016f92:	69fb      	ldr	r3, [r7, #28]
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3728      	adds	r7, #40	; 0x28
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}
 8016f9c:	200084c4 	.word	0x200084c4
 8016fa0:	200084d0 	.word	0x200084d0
 8016fa4:	200084c8 	.word	0x200084c8
 8016fa8:	200084bc 	.word	0x200084bc
 8016fac:	200084cc 	.word	0x200084cc

08016fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b086      	sub	sp, #24
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d048      	beq.n	8017054 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016fc2:	2308      	movs	r3, #8
 8016fc4:	425b      	negs	r3, r3
 8016fc6:	697a      	ldr	r2, [r7, #20]
 8016fc8:	4413      	add	r3, r2
 8016fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016fcc:	697b      	ldr	r3, [r7, #20]
 8016fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016fd0:	693b      	ldr	r3, [r7, #16]
 8016fd2:	685a      	ldr	r2, [r3, #4]
 8016fd4:	4b21      	ldr	r3, [pc, #132]	; (801705c <vPortFree+0xac>)
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	4013      	ands	r3, r2
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d10a      	bne.n	8016ff4 <vPortFree+0x44>
	__asm volatile
 8016fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fe2:	f383 8811 	msr	BASEPRI, r3
 8016fe6:	f3bf 8f6f 	isb	sy
 8016fea:	f3bf 8f4f 	dsb	sy
 8016fee:	60fb      	str	r3, [r7, #12]
}
 8016ff0:	bf00      	nop
 8016ff2:	e7fe      	b.n	8016ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d00a      	beq.n	8017012 <vPortFree+0x62>
	__asm volatile
 8016ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017000:	f383 8811 	msr	BASEPRI, r3
 8017004:	f3bf 8f6f 	isb	sy
 8017008:	f3bf 8f4f 	dsb	sy
 801700c:	60bb      	str	r3, [r7, #8]
}
 801700e:	bf00      	nop
 8017010:	e7fe      	b.n	8017010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	685a      	ldr	r2, [r3, #4]
 8017016:	4b11      	ldr	r3, [pc, #68]	; (801705c <vPortFree+0xac>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	4013      	ands	r3, r2
 801701c:	2b00      	cmp	r3, #0
 801701e:	d019      	beq.n	8017054 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017020:	693b      	ldr	r3, [r7, #16]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d115      	bne.n	8017054 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017028:	693b      	ldr	r3, [r7, #16]
 801702a:	685a      	ldr	r2, [r3, #4]
 801702c:	4b0b      	ldr	r3, [pc, #44]	; (801705c <vPortFree+0xac>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	43db      	mvns	r3, r3
 8017032:	401a      	ands	r2, r3
 8017034:	693b      	ldr	r3, [r7, #16]
 8017036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017038:	f7fe fc8a 	bl	8015950 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	685a      	ldr	r2, [r3, #4]
 8017040:	4b07      	ldr	r3, [pc, #28]	; (8017060 <vPortFree+0xb0>)
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	4413      	add	r3, r2
 8017046:	4a06      	ldr	r2, [pc, #24]	; (8017060 <vPortFree+0xb0>)
 8017048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801704a:	6938      	ldr	r0, [r7, #16]
 801704c:	f000 f86c 	bl	8017128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017050:	f7fe fc8c 	bl	801596c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017054:	bf00      	nop
 8017056:	3718      	adds	r7, #24
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	200084d0 	.word	0x200084d0
 8017060:	200084c8 	.word	0x200084c8

08017064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017064:	b480      	push	{r7}
 8017066:	b085      	sub	sp, #20
 8017068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801706a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801706e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017070:	4b27      	ldr	r3, [pc, #156]	; (8017110 <prvHeapInit+0xac>)
 8017072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	f003 0307 	and.w	r3, r3, #7
 801707a:	2b00      	cmp	r3, #0
 801707c:	d00c      	beq.n	8017098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	3307      	adds	r3, #7
 8017082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	f023 0307 	bic.w	r3, r3, #7
 801708a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801708c:	68ba      	ldr	r2, [r7, #8]
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	1ad3      	subs	r3, r2, r3
 8017092:	4a1f      	ldr	r2, [pc, #124]	; (8017110 <prvHeapInit+0xac>)
 8017094:	4413      	add	r3, r2
 8017096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801709c:	4a1d      	ldr	r2, [pc, #116]	; (8017114 <prvHeapInit+0xb0>)
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80170a2:	4b1c      	ldr	r3, [pc, #112]	; (8017114 <prvHeapInit+0xb0>)
 80170a4:	2200      	movs	r2, #0
 80170a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	68ba      	ldr	r2, [r7, #8]
 80170ac:	4413      	add	r3, r2
 80170ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80170b0:	2208      	movs	r2, #8
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	1a9b      	subs	r3, r3, r2
 80170b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	f023 0307 	bic.w	r3, r3, #7
 80170be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	4a15      	ldr	r2, [pc, #84]	; (8017118 <prvHeapInit+0xb4>)
 80170c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80170c6:	4b14      	ldr	r3, [pc, #80]	; (8017118 <prvHeapInit+0xb4>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	2200      	movs	r2, #0
 80170cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80170ce:	4b12      	ldr	r3, [pc, #72]	; (8017118 <prvHeapInit+0xb4>)
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	2200      	movs	r2, #0
 80170d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80170da:	683b      	ldr	r3, [r7, #0]
 80170dc:	68fa      	ldr	r2, [r7, #12]
 80170de:	1ad2      	subs	r2, r2, r3
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80170e4:	4b0c      	ldr	r3, [pc, #48]	; (8017118 <prvHeapInit+0xb4>)
 80170e6:	681a      	ldr	r2, [r3, #0]
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80170ec:	683b      	ldr	r3, [r7, #0]
 80170ee:	685b      	ldr	r3, [r3, #4]
 80170f0:	4a0a      	ldr	r2, [pc, #40]	; (801711c <prvHeapInit+0xb8>)
 80170f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	685b      	ldr	r3, [r3, #4]
 80170f8:	4a09      	ldr	r2, [pc, #36]	; (8017120 <prvHeapInit+0xbc>)
 80170fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80170fc:	4b09      	ldr	r3, [pc, #36]	; (8017124 <prvHeapInit+0xc0>)
 80170fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017102:	601a      	str	r2, [r3, #0]
}
 8017104:	bf00      	nop
 8017106:	3714      	adds	r7, #20
 8017108:	46bd      	mov	sp, r7
 801710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710e:	4770      	bx	lr
 8017110:	20000cbc 	.word	0x20000cbc
 8017114:	200084bc 	.word	0x200084bc
 8017118:	200084c4 	.word	0x200084c4
 801711c:	200084cc 	.word	0x200084cc
 8017120:	200084c8 	.word	0x200084c8
 8017124:	200084d0 	.word	0x200084d0

08017128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017128:	b480      	push	{r7}
 801712a:	b085      	sub	sp, #20
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017130:	4b28      	ldr	r3, [pc, #160]	; (80171d4 <prvInsertBlockIntoFreeList+0xac>)
 8017132:	60fb      	str	r3, [r7, #12]
 8017134:	e002      	b.n	801713c <prvInsertBlockIntoFreeList+0x14>
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	60fb      	str	r3, [r7, #12]
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	429a      	cmp	r2, r3
 8017144:	d8f7      	bhi.n	8017136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	685b      	ldr	r3, [r3, #4]
 801714e:	68ba      	ldr	r2, [r7, #8]
 8017150:	4413      	add	r3, r2
 8017152:	687a      	ldr	r2, [r7, #4]
 8017154:	429a      	cmp	r2, r3
 8017156:	d108      	bne.n	801716a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	685a      	ldr	r2, [r3, #4]
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	685b      	ldr	r3, [r3, #4]
 8017160:	441a      	add	r2, r3
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	685b      	ldr	r3, [r3, #4]
 8017172:	68ba      	ldr	r2, [r7, #8]
 8017174:	441a      	add	r2, r3
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	429a      	cmp	r2, r3
 801717c:	d118      	bne.n	80171b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	681a      	ldr	r2, [r3, #0]
 8017182:	4b15      	ldr	r3, [pc, #84]	; (80171d8 <prvInsertBlockIntoFreeList+0xb0>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	429a      	cmp	r2, r3
 8017188:	d00d      	beq.n	80171a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	685a      	ldr	r2, [r3, #4]
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	685b      	ldr	r3, [r3, #4]
 8017194:	441a      	add	r2, r3
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	681a      	ldr	r2, [r3, #0]
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	601a      	str	r2, [r3, #0]
 80171a4:	e008      	b.n	80171b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80171a6:	4b0c      	ldr	r3, [pc, #48]	; (80171d8 <prvInsertBlockIntoFreeList+0xb0>)
 80171a8:	681a      	ldr	r2, [r3, #0]
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	601a      	str	r2, [r3, #0]
 80171ae:	e003      	b.n	80171b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	681a      	ldr	r2, [r3, #0]
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80171b8:	68fa      	ldr	r2, [r7, #12]
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	429a      	cmp	r2, r3
 80171be:	d002      	beq.n	80171c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	687a      	ldr	r2, [r7, #4]
 80171c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80171c6:	bf00      	nop
 80171c8:	3714      	adds	r7, #20
 80171ca:	46bd      	mov	sp, r7
 80171cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d0:	4770      	bx	lr
 80171d2:	bf00      	nop
 80171d4:	200084bc 	.word	0x200084bc
 80171d8:	200084c4 	.word	0x200084c4

080171dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80171dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017214 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80171e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80171e2:	e003      	b.n	80171ec <LoopCopyDataInit>

080171e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80171e4:	4b0c      	ldr	r3, [pc, #48]	; (8017218 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80171e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80171e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80171ea:	3104      	adds	r1, #4

080171ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80171ec:	480b      	ldr	r0, [pc, #44]	; (801721c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80171ee:	4b0c      	ldr	r3, [pc, #48]	; (8017220 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80171f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80171f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80171f4:	d3f6      	bcc.n	80171e4 <CopyDataInit>
  ldr  r2, =_sbss
 80171f6:	4a0b      	ldr	r2, [pc, #44]	; (8017224 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80171f8:	e002      	b.n	8017200 <LoopFillZerobss>

080171fa <FillZerobss>:

/* Zero fill the bss segment. */  
 FillZerobss:
  movs  r3, #0
 80171fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80171fc:	f842 3b04 	str.w	r3, [r2], #4

08017200 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8017200:	4b09      	ldr	r3, [pc, #36]	; (8017228 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8017202:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8017204:	d3f9      	bcc.n	80171fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8017206:	f7f9 fb8f 	bl	8010928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801720a:	f000 f829 	bl	8017260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801720e:	f7e9 ff8d 	bl	800112c <main>
  bx  lr    
 8017212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8017214:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8017218:	0801bf80 	.word	0x0801bf80
  ldr  r0, =_sdata
 801721c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8017220:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8017224:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8017228:	20009b34 	.word	0x20009b34

0801722c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801722c:	e7fe      	b.n	801722c <ADC_IRQHandler>
	...

08017230 <__errno>:
 8017230:	4b01      	ldr	r3, [pc, #4]	; (8017238 <__errno+0x8>)
 8017232:	6818      	ldr	r0, [r3, #0]
 8017234:	4770      	bx	lr
 8017236:	bf00      	nop
 8017238:	20000024 	.word	0x20000024

0801723c <fiprintf>:
 801723c:	b40e      	push	{r1, r2, r3}
 801723e:	b503      	push	{r0, r1, lr}
 8017240:	4601      	mov	r1, r0
 8017242:	ab03      	add	r3, sp, #12
 8017244:	4805      	ldr	r0, [pc, #20]	; (801725c <fiprintf+0x20>)
 8017246:	f853 2b04 	ldr.w	r2, [r3], #4
 801724a:	6800      	ldr	r0, [r0, #0]
 801724c:	9301      	str	r3, [sp, #4]
 801724e:	f000 f925 	bl	801749c <_vfiprintf_r>
 8017252:	b002      	add	sp, #8
 8017254:	f85d eb04 	ldr.w	lr, [sp], #4
 8017258:	b003      	add	sp, #12
 801725a:	4770      	bx	lr
 801725c:	20000024 	.word	0x20000024

08017260 <__libc_init_array>:
 8017260:	b570      	push	{r4, r5, r6, lr}
 8017262:	4d0d      	ldr	r5, [pc, #52]	; (8017298 <__libc_init_array+0x38>)
 8017264:	4c0d      	ldr	r4, [pc, #52]	; (801729c <__libc_init_array+0x3c>)
 8017266:	1b64      	subs	r4, r4, r5
 8017268:	10a4      	asrs	r4, r4, #2
 801726a:	2600      	movs	r6, #0
 801726c:	42a6      	cmp	r6, r4
 801726e:	d109      	bne.n	8017284 <__libc_init_array+0x24>
 8017270:	4d0b      	ldr	r5, [pc, #44]	; (80172a0 <__libc_init_array+0x40>)
 8017272:	4c0c      	ldr	r4, [pc, #48]	; (80172a4 <__libc_init_array+0x44>)
 8017274:	f003 fbd4 	bl	801aa20 <_init>
 8017278:	1b64      	subs	r4, r4, r5
 801727a:	10a4      	asrs	r4, r4, #2
 801727c:	2600      	movs	r6, #0
 801727e:	42a6      	cmp	r6, r4
 8017280:	d105      	bne.n	801728e <__libc_init_array+0x2e>
 8017282:	bd70      	pop	{r4, r5, r6, pc}
 8017284:	f855 3b04 	ldr.w	r3, [r5], #4
 8017288:	4798      	blx	r3
 801728a:	3601      	adds	r6, #1
 801728c:	e7ee      	b.n	801726c <__libc_init_array+0xc>
 801728e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017292:	4798      	blx	r3
 8017294:	3601      	adds	r6, #1
 8017296:	e7f2      	b.n	801727e <__libc_init_array+0x1e>
 8017298:	0801bf78 	.word	0x0801bf78
 801729c:	0801bf78 	.word	0x0801bf78
 80172a0:	0801bf78 	.word	0x0801bf78
 80172a4:	0801bf7c 	.word	0x0801bf7c

080172a8 <malloc>:
 80172a8:	4b02      	ldr	r3, [pc, #8]	; (80172b4 <malloc+0xc>)
 80172aa:	4601      	mov	r1, r0
 80172ac:	6818      	ldr	r0, [r3, #0]
 80172ae:	f000 b871 	b.w	8017394 <_malloc_r>
 80172b2:	bf00      	nop
 80172b4:	20000024 	.word	0x20000024

080172b8 <free>:
 80172b8:	4b02      	ldr	r3, [pc, #8]	; (80172c4 <free+0xc>)
 80172ba:	4601      	mov	r1, r0
 80172bc:	6818      	ldr	r0, [r3, #0]
 80172be:	f000 b819 	b.w	80172f4 <_free_r>
 80172c2:	bf00      	nop
 80172c4:	20000024 	.word	0x20000024

080172c8 <memcpy>:
 80172c8:	440a      	add	r2, r1
 80172ca:	4291      	cmp	r1, r2
 80172cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80172d0:	d100      	bne.n	80172d4 <memcpy+0xc>
 80172d2:	4770      	bx	lr
 80172d4:	b510      	push	{r4, lr}
 80172d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80172de:	4291      	cmp	r1, r2
 80172e0:	d1f9      	bne.n	80172d6 <memcpy+0xe>
 80172e2:	bd10      	pop	{r4, pc}

080172e4 <memset>:
 80172e4:	4402      	add	r2, r0
 80172e6:	4603      	mov	r3, r0
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d100      	bne.n	80172ee <memset+0xa>
 80172ec:	4770      	bx	lr
 80172ee:	f803 1b01 	strb.w	r1, [r3], #1
 80172f2:	e7f9      	b.n	80172e8 <memset+0x4>

080172f4 <_free_r>:
 80172f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172f6:	2900      	cmp	r1, #0
 80172f8:	d048      	beq.n	801738c <_free_r+0x98>
 80172fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172fe:	9001      	str	r0, [sp, #4]
 8017300:	2b00      	cmp	r3, #0
 8017302:	f1a1 0404 	sub.w	r4, r1, #4
 8017306:	bfb8      	it	lt
 8017308:	18e4      	addlt	r4, r4, r3
 801730a:	f002 f8cd 	bl	80194a8 <__malloc_lock>
 801730e:	4a20      	ldr	r2, [pc, #128]	; (8017390 <_free_r+0x9c>)
 8017310:	9801      	ldr	r0, [sp, #4]
 8017312:	6813      	ldr	r3, [r2, #0]
 8017314:	4615      	mov	r5, r2
 8017316:	b933      	cbnz	r3, 8017326 <_free_r+0x32>
 8017318:	6063      	str	r3, [r4, #4]
 801731a:	6014      	str	r4, [r2, #0]
 801731c:	b003      	add	sp, #12
 801731e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017322:	f002 b8c7 	b.w	80194b4 <__malloc_unlock>
 8017326:	42a3      	cmp	r3, r4
 8017328:	d90b      	bls.n	8017342 <_free_r+0x4e>
 801732a:	6821      	ldr	r1, [r4, #0]
 801732c:	1862      	adds	r2, r4, r1
 801732e:	4293      	cmp	r3, r2
 8017330:	bf04      	itt	eq
 8017332:	681a      	ldreq	r2, [r3, #0]
 8017334:	685b      	ldreq	r3, [r3, #4]
 8017336:	6063      	str	r3, [r4, #4]
 8017338:	bf04      	itt	eq
 801733a:	1852      	addeq	r2, r2, r1
 801733c:	6022      	streq	r2, [r4, #0]
 801733e:	602c      	str	r4, [r5, #0]
 8017340:	e7ec      	b.n	801731c <_free_r+0x28>
 8017342:	461a      	mov	r2, r3
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	b10b      	cbz	r3, 801734c <_free_r+0x58>
 8017348:	42a3      	cmp	r3, r4
 801734a:	d9fa      	bls.n	8017342 <_free_r+0x4e>
 801734c:	6811      	ldr	r1, [r2, #0]
 801734e:	1855      	adds	r5, r2, r1
 8017350:	42a5      	cmp	r5, r4
 8017352:	d10b      	bne.n	801736c <_free_r+0x78>
 8017354:	6824      	ldr	r4, [r4, #0]
 8017356:	4421      	add	r1, r4
 8017358:	1854      	adds	r4, r2, r1
 801735a:	42a3      	cmp	r3, r4
 801735c:	6011      	str	r1, [r2, #0]
 801735e:	d1dd      	bne.n	801731c <_free_r+0x28>
 8017360:	681c      	ldr	r4, [r3, #0]
 8017362:	685b      	ldr	r3, [r3, #4]
 8017364:	6053      	str	r3, [r2, #4]
 8017366:	4421      	add	r1, r4
 8017368:	6011      	str	r1, [r2, #0]
 801736a:	e7d7      	b.n	801731c <_free_r+0x28>
 801736c:	d902      	bls.n	8017374 <_free_r+0x80>
 801736e:	230c      	movs	r3, #12
 8017370:	6003      	str	r3, [r0, #0]
 8017372:	e7d3      	b.n	801731c <_free_r+0x28>
 8017374:	6825      	ldr	r5, [r4, #0]
 8017376:	1961      	adds	r1, r4, r5
 8017378:	428b      	cmp	r3, r1
 801737a:	bf04      	itt	eq
 801737c:	6819      	ldreq	r1, [r3, #0]
 801737e:	685b      	ldreq	r3, [r3, #4]
 8017380:	6063      	str	r3, [r4, #4]
 8017382:	bf04      	itt	eq
 8017384:	1949      	addeq	r1, r1, r5
 8017386:	6021      	streq	r1, [r4, #0]
 8017388:	6054      	str	r4, [r2, #4]
 801738a:	e7c7      	b.n	801731c <_free_r+0x28>
 801738c:	b003      	add	sp, #12
 801738e:	bd30      	pop	{r4, r5, pc}
 8017390:	200084d4 	.word	0x200084d4

08017394 <_malloc_r>:
 8017394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017396:	1ccd      	adds	r5, r1, #3
 8017398:	f025 0503 	bic.w	r5, r5, #3
 801739c:	3508      	adds	r5, #8
 801739e:	2d0c      	cmp	r5, #12
 80173a0:	bf38      	it	cc
 80173a2:	250c      	movcc	r5, #12
 80173a4:	2d00      	cmp	r5, #0
 80173a6:	4606      	mov	r6, r0
 80173a8:	db01      	blt.n	80173ae <_malloc_r+0x1a>
 80173aa:	42a9      	cmp	r1, r5
 80173ac:	d903      	bls.n	80173b6 <_malloc_r+0x22>
 80173ae:	230c      	movs	r3, #12
 80173b0:	6033      	str	r3, [r6, #0]
 80173b2:	2000      	movs	r0, #0
 80173b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173b6:	f002 f877 	bl	80194a8 <__malloc_lock>
 80173ba:	4921      	ldr	r1, [pc, #132]	; (8017440 <_malloc_r+0xac>)
 80173bc:	680a      	ldr	r2, [r1, #0]
 80173be:	4614      	mov	r4, r2
 80173c0:	b99c      	cbnz	r4, 80173ea <_malloc_r+0x56>
 80173c2:	4f20      	ldr	r7, [pc, #128]	; (8017444 <_malloc_r+0xb0>)
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	b923      	cbnz	r3, 80173d2 <_malloc_r+0x3e>
 80173c8:	4621      	mov	r1, r4
 80173ca:	4630      	mov	r0, r6
 80173cc:	f000 fe00 	bl	8017fd0 <_sbrk_r>
 80173d0:	6038      	str	r0, [r7, #0]
 80173d2:	4629      	mov	r1, r5
 80173d4:	4630      	mov	r0, r6
 80173d6:	f000 fdfb 	bl	8017fd0 <_sbrk_r>
 80173da:	1c43      	adds	r3, r0, #1
 80173dc:	d123      	bne.n	8017426 <_malloc_r+0x92>
 80173de:	230c      	movs	r3, #12
 80173e0:	6033      	str	r3, [r6, #0]
 80173e2:	4630      	mov	r0, r6
 80173e4:	f002 f866 	bl	80194b4 <__malloc_unlock>
 80173e8:	e7e3      	b.n	80173b2 <_malloc_r+0x1e>
 80173ea:	6823      	ldr	r3, [r4, #0]
 80173ec:	1b5b      	subs	r3, r3, r5
 80173ee:	d417      	bmi.n	8017420 <_malloc_r+0x8c>
 80173f0:	2b0b      	cmp	r3, #11
 80173f2:	d903      	bls.n	80173fc <_malloc_r+0x68>
 80173f4:	6023      	str	r3, [r4, #0]
 80173f6:	441c      	add	r4, r3
 80173f8:	6025      	str	r5, [r4, #0]
 80173fa:	e004      	b.n	8017406 <_malloc_r+0x72>
 80173fc:	6863      	ldr	r3, [r4, #4]
 80173fe:	42a2      	cmp	r2, r4
 8017400:	bf0c      	ite	eq
 8017402:	600b      	streq	r3, [r1, #0]
 8017404:	6053      	strne	r3, [r2, #4]
 8017406:	4630      	mov	r0, r6
 8017408:	f002 f854 	bl	80194b4 <__malloc_unlock>
 801740c:	f104 000b 	add.w	r0, r4, #11
 8017410:	1d23      	adds	r3, r4, #4
 8017412:	f020 0007 	bic.w	r0, r0, #7
 8017416:	1ac2      	subs	r2, r0, r3
 8017418:	d0cc      	beq.n	80173b4 <_malloc_r+0x20>
 801741a:	1a1b      	subs	r3, r3, r0
 801741c:	50a3      	str	r3, [r4, r2]
 801741e:	e7c9      	b.n	80173b4 <_malloc_r+0x20>
 8017420:	4622      	mov	r2, r4
 8017422:	6864      	ldr	r4, [r4, #4]
 8017424:	e7cc      	b.n	80173c0 <_malloc_r+0x2c>
 8017426:	1cc4      	adds	r4, r0, #3
 8017428:	f024 0403 	bic.w	r4, r4, #3
 801742c:	42a0      	cmp	r0, r4
 801742e:	d0e3      	beq.n	80173f8 <_malloc_r+0x64>
 8017430:	1a21      	subs	r1, r4, r0
 8017432:	4630      	mov	r0, r6
 8017434:	f000 fdcc 	bl	8017fd0 <_sbrk_r>
 8017438:	3001      	adds	r0, #1
 801743a:	d1dd      	bne.n	80173f8 <_malloc_r+0x64>
 801743c:	e7cf      	b.n	80173de <_malloc_r+0x4a>
 801743e:	bf00      	nop
 8017440:	200084d4 	.word	0x200084d4
 8017444:	200084d8 	.word	0x200084d8

08017448 <__sfputc_r>:
 8017448:	6893      	ldr	r3, [r2, #8]
 801744a:	3b01      	subs	r3, #1
 801744c:	2b00      	cmp	r3, #0
 801744e:	b410      	push	{r4}
 8017450:	6093      	str	r3, [r2, #8]
 8017452:	da08      	bge.n	8017466 <__sfputc_r+0x1e>
 8017454:	6994      	ldr	r4, [r2, #24]
 8017456:	42a3      	cmp	r3, r4
 8017458:	db01      	blt.n	801745e <__sfputc_r+0x16>
 801745a:	290a      	cmp	r1, #10
 801745c:	d103      	bne.n	8017466 <__sfputc_r+0x1e>
 801745e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017462:	f000 be75 	b.w	8018150 <__swbuf_r>
 8017466:	6813      	ldr	r3, [r2, #0]
 8017468:	1c58      	adds	r0, r3, #1
 801746a:	6010      	str	r0, [r2, #0]
 801746c:	7019      	strb	r1, [r3, #0]
 801746e:	4608      	mov	r0, r1
 8017470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017474:	4770      	bx	lr

08017476 <__sfputs_r>:
 8017476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017478:	4606      	mov	r6, r0
 801747a:	460f      	mov	r7, r1
 801747c:	4614      	mov	r4, r2
 801747e:	18d5      	adds	r5, r2, r3
 8017480:	42ac      	cmp	r4, r5
 8017482:	d101      	bne.n	8017488 <__sfputs_r+0x12>
 8017484:	2000      	movs	r0, #0
 8017486:	e007      	b.n	8017498 <__sfputs_r+0x22>
 8017488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801748c:	463a      	mov	r2, r7
 801748e:	4630      	mov	r0, r6
 8017490:	f7ff ffda 	bl	8017448 <__sfputc_r>
 8017494:	1c43      	adds	r3, r0, #1
 8017496:	d1f3      	bne.n	8017480 <__sfputs_r+0xa>
 8017498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801749c <_vfiprintf_r>:
 801749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a0:	460d      	mov	r5, r1
 80174a2:	b09d      	sub	sp, #116	; 0x74
 80174a4:	4614      	mov	r4, r2
 80174a6:	4698      	mov	r8, r3
 80174a8:	4606      	mov	r6, r0
 80174aa:	b118      	cbz	r0, 80174b4 <_vfiprintf_r+0x18>
 80174ac:	6983      	ldr	r3, [r0, #24]
 80174ae:	b90b      	cbnz	r3, 80174b4 <_vfiprintf_r+0x18>
 80174b0:	f001 fec4 	bl	801923c <__sinit>
 80174b4:	4b89      	ldr	r3, [pc, #548]	; (80176dc <_vfiprintf_r+0x240>)
 80174b6:	429d      	cmp	r5, r3
 80174b8:	d11b      	bne.n	80174f2 <_vfiprintf_r+0x56>
 80174ba:	6875      	ldr	r5, [r6, #4]
 80174bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174be:	07d9      	lsls	r1, r3, #31
 80174c0:	d405      	bmi.n	80174ce <_vfiprintf_r+0x32>
 80174c2:	89ab      	ldrh	r3, [r5, #12]
 80174c4:	059a      	lsls	r2, r3, #22
 80174c6:	d402      	bmi.n	80174ce <_vfiprintf_r+0x32>
 80174c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174ca:	f001 ff5a 	bl	8019382 <__retarget_lock_acquire_recursive>
 80174ce:	89ab      	ldrh	r3, [r5, #12]
 80174d0:	071b      	lsls	r3, r3, #28
 80174d2:	d501      	bpl.n	80174d8 <_vfiprintf_r+0x3c>
 80174d4:	692b      	ldr	r3, [r5, #16]
 80174d6:	b9eb      	cbnz	r3, 8017514 <_vfiprintf_r+0x78>
 80174d8:	4629      	mov	r1, r5
 80174da:	4630      	mov	r0, r6
 80174dc:	f000 fe9c 	bl	8018218 <__swsetup_r>
 80174e0:	b1c0      	cbz	r0, 8017514 <_vfiprintf_r+0x78>
 80174e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174e4:	07dc      	lsls	r4, r3, #31
 80174e6:	d50e      	bpl.n	8017506 <_vfiprintf_r+0x6a>
 80174e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174ec:	b01d      	add	sp, #116	; 0x74
 80174ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f2:	4b7b      	ldr	r3, [pc, #492]	; (80176e0 <_vfiprintf_r+0x244>)
 80174f4:	429d      	cmp	r5, r3
 80174f6:	d101      	bne.n	80174fc <_vfiprintf_r+0x60>
 80174f8:	68b5      	ldr	r5, [r6, #8]
 80174fa:	e7df      	b.n	80174bc <_vfiprintf_r+0x20>
 80174fc:	4b79      	ldr	r3, [pc, #484]	; (80176e4 <_vfiprintf_r+0x248>)
 80174fe:	429d      	cmp	r5, r3
 8017500:	bf08      	it	eq
 8017502:	68f5      	ldreq	r5, [r6, #12]
 8017504:	e7da      	b.n	80174bc <_vfiprintf_r+0x20>
 8017506:	89ab      	ldrh	r3, [r5, #12]
 8017508:	0598      	lsls	r0, r3, #22
 801750a:	d4ed      	bmi.n	80174e8 <_vfiprintf_r+0x4c>
 801750c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801750e:	f001 ff39 	bl	8019384 <__retarget_lock_release_recursive>
 8017512:	e7e9      	b.n	80174e8 <_vfiprintf_r+0x4c>
 8017514:	2300      	movs	r3, #0
 8017516:	9309      	str	r3, [sp, #36]	; 0x24
 8017518:	2320      	movs	r3, #32
 801751a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801751e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017522:	2330      	movs	r3, #48	; 0x30
 8017524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80176e8 <_vfiprintf_r+0x24c>
 8017528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801752c:	f04f 0901 	mov.w	r9, #1
 8017530:	4623      	mov	r3, r4
 8017532:	469a      	mov	sl, r3
 8017534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017538:	b10a      	cbz	r2, 801753e <_vfiprintf_r+0xa2>
 801753a:	2a25      	cmp	r2, #37	; 0x25
 801753c:	d1f9      	bne.n	8017532 <_vfiprintf_r+0x96>
 801753e:	ebba 0b04 	subs.w	fp, sl, r4
 8017542:	d00b      	beq.n	801755c <_vfiprintf_r+0xc0>
 8017544:	465b      	mov	r3, fp
 8017546:	4622      	mov	r2, r4
 8017548:	4629      	mov	r1, r5
 801754a:	4630      	mov	r0, r6
 801754c:	f7ff ff93 	bl	8017476 <__sfputs_r>
 8017550:	3001      	adds	r0, #1
 8017552:	f000 80aa 	beq.w	80176aa <_vfiprintf_r+0x20e>
 8017556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017558:	445a      	add	r2, fp
 801755a:	9209      	str	r2, [sp, #36]	; 0x24
 801755c:	f89a 3000 	ldrb.w	r3, [sl]
 8017560:	2b00      	cmp	r3, #0
 8017562:	f000 80a2 	beq.w	80176aa <_vfiprintf_r+0x20e>
 8017566:	2300      	movs	r3, #0
 8017568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801756c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017570:	f10a 0a01 	add.w	sl, sl, #1
 8017574:	9304      	str	r3, [sp, #16]
 8017576:	9307      	str	r3, [sp, #28]
 8017578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801757c:	931a      	str	r3, [sp, #104]	; 0x68
 801757e:	4654      	mov	r4, sl
 8017580:	2205      	movs	r2, #5
 8017582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017586:	4858      	ldr	r0, [pc, #352]	; (80176e8 <_vfiprintf_r+0x24c>)
 8017588:	f7e8 fe3a 	bl	8000200 <memchr>
 801758c:	9a04      	ldr	r2, [sp, #16]
 801758e:	b9d8      	cbnz	r0, 80175c8 <_vfiprintf_r+0x12c>
 8017590:	06d1      	lsls	r1, r2, #27
 8017592:	bf44      	itt	mi
 8017594:	2320      	movmi	r3, #32
 8017596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801759a:	0713      	lsls	r3, r2, #28
 801759c:	bf44      	itt	mi
 801759e:	232b      	movmi	r3, #43	; 0x2b
 80175a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175a4:	f89a 3000 	ldrb.w	r3, [sl]
 80175a8:	2b2a      	cmp	r3, #42	; 0x2a
 80175aa:	d015      	beq.n	80175d8 <_vfiprintf_r+0x13c>
 80175ac:	9a07      	ldr	r2, [sp, #28]
 80175ae:	4654      	mov	r4, sl
 80175b0:	2000      	movs	r0, #0
 80175b2:	f04f 0c0a 	mov.w	ip, #10
 80175b6:	4621      	mov	r1, r4
 80175b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175bc:	3b30      	subs	r3, #48	; 0x30
 80175be:	2b09      	cmp	r3, #9
 80175c0:	d94e      	bls.n	8017660 <_vfiprintf_r+0x1c4>
 80175c2:	b1b0      	cbz	r0, 80175f2 <_vfiprintf_r+0x156>
 80175c4:	9207      	str	r2, [sp, #28]
 80175c6:	e014      	b.n	80175f2 <_vfiprintf_r+0x156>
 80175c8:	eba0 0308 	sub.w	r3, r0, r8
 80175cc:	fa09 f303 	lsl.w	r3, r9, r3
 80175d0:	4313      	orrs	r3, r2
 80175d2:	9304      	str	r3, [sp, #16]
 80175d4:	46a2      	mov	sl, r4
 80175d6:	e7d2      	b.n	801757e <_vfiprintf_r+0xe2>
 80175d8:	9b03      	ldr	r3, [sp, #12]
 80175da:	1d19      	adds	r1, r3, #4
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	9103      	str	r1, [sp, #12]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	bfbb      	ittet	lt
 80175e4:	425b      	neglt	r3, r3
 80175e6:	f042 0202 	orrlt.w	r2, r2, #2
 80175ea:	9307      	strge	r3, [sp, #28]
 80175ec:	9307      	strlt	r3, [sp, #28]
 80175ee:	bfb8      	it	lt
 80175f0:	9204      	strlt	r2, [sp, #16]
 80175f2:	7823      	ldrb	r3, [r4, #0]
 80175f4:	2b2e      	cmp	r3, #46	; 0x2e
 80175f6:	d10c      	bne.n	8017612 <_vfiprintf_r+0x176>
 80175f8:	7863      	ldrb	r3, [r4, #1]
 80175fa:	2b2a      	cmp	r3, #42	; 0x2a
 80175fc:	d135      	bne.n	801766a <_vfiprintf_r+0x1ce>
 80175fe:	9b03      	ldr	r3, [sp, #12]
 8017600:	1d1a      	adds	r2, r3, #4
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	9203      	str	r2, [sp, #12]
 8017606:	2b00      	cmp	r3, #0
 8017608:	bfb8      	it	lt
 801760a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801760e:	3402      	adds	r4, #2
 8017610:	9305      	str	r3, [sp, #20]
 8017612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80176f8 <_vfiprintf_r+0x25c>
 8017616:	7821      	ldrb	r1, [r4, #0]
 8017618:	2203      	movs	r2, #3
 801761a:	4650      	mov	r0, sl
 801761c:	f7e8 fdf0 	bl	8000200 <memchr>
 8017620:	b140      	cbz	r0, 8017634 <_vfiprintf_r+0x198>
 8017622:	2340      	movs	r3, #64	; 0x40
 8017624:	eba0 000a 	sub.w	r0, r0, sl
 8017628:	fa03 f000 	lsl.w	r0, r3, r0
 801762c:	9b04      	ldr	r3, [sp, #16]
 801762e:	4303      	orrs	r3, r0
 8017630:	3401      	adds	r4, #1
 8017632:	9304      	str	r3, [sp, #16]
 8017634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017638:	482c      	ldr	r0, [pc, #176]	; (80176ec <_vfiprintf_r+0x250>)
 801763a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801763e:	2206      	movs	r2, #6
 8017640:	f7e8 fdde 	bl	8000200 <memchr>
 8017644:	2800      	cmp	r0, #0
 8017646:	d03f      	beq.n	80176c8 <_vfiprintf_r+0x22c>
 8017648:	4b29      	ldr	r3, [pc, #164]	; (80176f0 <_vfiprintf_r+0x254>)
 801764a:	bb1b      	cbnz	r3, 8017694 <_vfiprintf_r+0x1f8>
 801764c:	9b03      	ldr	r3, [sp, #12]
 801764e:	3307      	adds	r3, #7
 8017650:	f023 0307 	bic.w	r3, r3, #7
 8017654:	3308      	adds	r3, #8
 8017656:	9303      	str	r3, [sp, #12]
 8017658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801765a:	443b      	add	r3, r7
 801765c:	9309      	str	r3, [sp, #36]	; 0x24
 801765e:	e767      	b.n	8017530 <_vfiprintf_r+0x94>
 8017660:	fb0c 3202 	mla	r2, ip, r2, r3
 8017664:	460c      	mov	r4, r1
 8017666:	2001      	movs	r0, #1
 8017668:	e7a5      	b.n	80175b6 <_vfiprintf_r+0x11a>
 801766a:	2300      	movs	r3, #0
 801766c:	3401      	adds	r4, #1
 801766e:	9305      	str	r3, [sp, #20]
 8017670:	4619      	mov	r1, r3
 8017672:	f04f 0c0a 	mov.w	ip, #10
 8017676:	4620      	mov	r0, r4
 8017678:	f810 2b01 	ldrb.w	r2, [r0], #1
 801767c:	3a30      	subs	r2, #48	; 0x30
 801767e:	2a09      	cmp	r2, #9
 8017680:	d903      	bls.n	801768a <_vfiprintf_r+0x1ee>
 8017682:	2b00      	cmp	r3, #0
 8017684:	d0c5      	beq.n	8017612 <_vfiprintf_r+0x176>
 8017686:	9105      	str	r1, [sp, #20]
 8017688:	e7c3      	b.n	8017612 <_vfiprintf_r+0x176>
 801768a:	fb0c 2101 	mla	r1, ip, r1, r2
 801768e:	4604      	mov	r4, r0
 8017690:	2301      	movs	r3, #1
 8017692:	e7f0      	b.n	8017676 <_vfiprintf_r+0x1da>
 8017694:	ab03      	add	r3, sp, #12
 8017696:	9300      	str	r3, [sp, #0]
 8017698:	462a      	mov	r2, r5
 801769a:	4b16      	ldr	r3, [pc, #88]	; (80176f4 <_vfiprintf_r+0x258>)
 801769c:	a904      	add	r1, sp, #16
 801769e:	4630      	mov	r0, r6
 80176a0:	f000 f8cc 	bl	801783c <_printf_float>
 80176a4:	4607      	mov	r7, r0
 80176a6:	1c78      	adds	r0, r7, #1
 80176a8:	d1d6      	bne.n	8017658 <_vfiprintf_r+0x1bc>
 80176aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176ac:	07d9      	lsls	r1, r3, #31
 80176ae:	d405      	bmi.n	80176bc <_vfiprintf_r+0x220>
 80176b0:	89ab      	ldrh	r3, [r5, #12]
 80176b2:	059a      	lsls	r2, r3, #22
 80176b4:	d402      	bmi.n	80176bc <_vfiprintf_r+0x220>
 80176b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176b8:	f001 fe64 	bl	8019384 <__retarget_lock_release_recursive>
 80176bc:	89ab      	ldrh	r3, [r5, #12]
 80176be:	065b      	lsls	r3, r3, #25
 80176c0:	f53f af12 	bmi.w	80174e8 <_vfiprintf_r+0x4c>
 80176c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176c6:	e711      	b.n	80174ec <_vfiprintf_r+0x50>
 80176c8:	ab03      	add	r3, sp, #12
 80176ca:	9300      	str	r3, [sp, #0]
 80176cc:	462a      	mov	r2, r5
 80176ce:	4b09      	ldr	r3, [pc, #36]	; (80176f4 <_vfiprintf_r+0x258>)
 80176d0:	a904      	add	r1, sp, #16
 80176d2:	4630      	mov	r0, r6
 80176d4:	f000 fb56 	bl	8017d84 <_printf_i>
 80176d8:	e7e4      	b.n	80176a4 <_vfiprintf_r+0x208>
 80176da:	bf00      	nop
 80176dc:	0801bc78 	.word	0x0801bc78
 80176e0:	0801bc98 	.word	0x0801bc98
 80176e4:	0801bc58 	.word	0x0801bc58
 80176e8:	0801bb80 	.word	0x0801bb80
 80176ec:	0801bb8a 	.word	0x0801bb8a
 80176f0:	0801783d 	.word	0x0801783d
 80176f4:	08017477 	.word	0x08017477
 80176f8:	0801bb86 	.word	0x0801bb86

080176fc <__cvt>:
 80176fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017700:	ec55 4b10 	vmov	r4, r5, d0
 8017704:	2d00      	cmp	r5, #0
 8017706:	460e      	mov	r6, r1
 8017708:	4619      	mov	r1, r3
 801770a:	462b      	mov	r3, r5
 801770c:	bfbb      	ittet	lt
 801770e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017712:	461d      	movlt	r5, r3
 8017714:	2300      	movge	r3, #0
 8017716:	232d      	movlt	r3, #45	; 0x2d
 8017718:	700b      	strb	r3, [r1, #0]
 801771a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801771c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017720:	4691      	mov	r9, r2
 8017722:	f023 0820 	bic.w	r8, r3, #32
 8017726:	bfbc      	itt	lt
 8017728:	4622      	movlt	r2, r4
 801772a:	4614      	movlt	r4, r2
 801772c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017730:	d005      	beq.n	801773e <__cvt+0x42>
 8017732:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017736:	d100      	bne.n	801773a <__cvt+0x3e>
 8017738:	3601      	adds	r6, #1
 801773a:	2102      	movs	r1, #2
 801773c:	e000      	b.n	8017740 <__cvt+0x44>
 801773e:	2103      	movs	r1, #3
 8017740:	ab03      	add	r3, sp, #12
 8017742:	9301      	str	r3, [sp, #4]
 8017744:	ab02      	add	r3, sp, #8
 8017746:	9300      	str	r3, [sp, #0]
 8017748:	ec45 4b10 	vmov	d0, r4, r5
 801774c:	4653      	mov	r3, sl
 801774e:	4632      	mov	r2, r6
 8017750:	f000 fe6e 	bl	8018430 <_dtoa_r>
 8017754:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017758:	4607      	mov	r7, r0
 801775a:	d102      	bne.n	8017762 <__cvt+0x66>
 801775c:	f019 0f01 	tst.w	r9, #1
 8017760:	d022      	beq.n	80177a8 <__cvt+0xac>
 8017762:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017766:	eb07 0906 	add.w	r9, r7, r6
 801776a:	d110      	bne.n	801778e <__cvt+0x92>
 801776c:	783b      	ldrb	r3, [r7, #0]
 801776e:	2b30      	cmp	r3, #48	; 0x30
 8017770:	d10a      	bne.n	8017788 <__cvt+0x8c>
 8017772:	2200      	movs	r2, #0
 8017774:	2300      	movs	r3, #0
 8017776:	4620      	mov	r0, r4
 8017778:	4629      	mov	r1, r5
 801777a:	f7e9 f9b5 	bl	8000ae8 <__aeabi_dcmpeq>
 801777e:	b918      	cbnz	r0, 8017788 <__cvt+0x8c>
 8017780:	f1c6 0601 	rsb	r6, r6, #1
 8017784:	f8ca 6000 	str.w	r6, [sl]
 8017788:	f8da 3000 	ldr.w	r3, [sl]
 801778c:	4499      	add	r9, r3
 801778e:	2200      	movs	r2, #0
 8017790:	2300      	movs	r3, #0
 8017792:	4620      	mov	r0, r4
 8017794:	4629      	mov	r1, r5
 8017796:	f7e9 f9a7 	bl	8000ae8 <__aeabi_dcmpeq>
 801779a:	b108      	cbz	r0, 80177a0 <__cvt+0xa4>
 801779c:	f8cd 900c 	str.w	r9, [sp, #12]
 80177a0:	2230      	movs	r2, #48	; 0x30
 80177a2:	9b03      	ldr	r3, [sp, #12]
 80177a4:	454b      	cmp	r3, r9
 80177a6:	d307      	bcc.n	80177b8 <__cvt+0xbc>
 80177a8:	9b03      	ldr	r3, [sp, #12]
 80177aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80177ac:	1bdb      	subs	r3, r3, r7
 80177ae:	4638      	mov	r0, r7
 80177b0:	6013      	str	r3, [r2, #0]
 80177b2:	b004      	add	sp, #16
 80177b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177b8:	1c59      	adds	r1, r3, #1
 80177ba:	9103      	str	r1, [sp, #12]
 80177bc:	701a      	strb	r2, [r3, #0]
 80177be:	e7f0      	b.n	80177a2 <__cvt+0xa6>

080177c0 <__exponent>:
 80177c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80177c2:	4603      	mov	r3, r0
 80177c4:	2900      	cmp	r1, #0
 80177c6:	bfb8      	it	lt
 80177c8:	4249      	neglt	r1, r1
 80177ca:	f803 2b02 	strb.w	r2, [r3], #2
 80177ce:	bfb4      	ite	lt
 80177d0:	222d      	movlt	r2, #45	; 0x2d
 80177d2:	222b      	movge	r2, #43	; 0x2b
 80177d4:	2909      	cmp	r1, #9
 80177d6:	7042      	strb	r2, [r0, #1]
 80177d8:	dd2a      	ble.n	8017830 <__exponent+0x70>
 80177da:	f10d 0407 	add.w	r4, sp, #7
 80177de:	46a4      	mov	ip, r4
 80177e0:	270a      	movs	r7, #10
 80177e2:	46a6      	mov	lr, r4
 80177e4:	460a      	mov	r2, r1
 80177e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80177ea:	fb07 1516 	mls	r5, r7, r6, r1
 80177ee:	3530      	adds	r5, #48	; 0x30
 80177f0:	2a63      	cmp	r2, #99	; 0x63
 80177f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80177f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80177fa:	4631      	mov	r1, r6
 80177fc:	dcf1      	bgt.n	80177e2 <__exponent+0x22>
 80177fe:	3130      	adds	r1, #48	; 0x30
 8017800:	f1ae 0502 	sub.w	r5, lr, #2
 8017804:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017808:	1c44      	adds	r4, r0, #1
 801780a:	4629      	mov	r1, r5
 801780c:	4561      	cmp	r1, ip
 801780e:	d30a      	bcc.n	8017826 <__exponent+0x66>
 8017810:	f10d 0209 	add.w	r2, sp, #9
 8017814:	eba2 020e 	sub.w	r2, r2, lr
 8017818:	4565      	cmp	r5, ip
 801781a:	bf88      	it	hi
 801781c:	2200      	movhi	r2, #0
 801781e:	4413      	add	r3, r2
 8017820:	1a18      	subs	r0, r3, r0
 8017822:	b003      	add	sp, #12
 8017824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017826:	f811 2b01 	ldrb.w	r2, [r1], #1
 801782a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801782e:	e7ed      	b.n	801780c <__exponent+0x4c>
 8017830:	2330      	movs	r3, #48	; 0x30
 8017832:	3130      	adds	r1, #48	; 0x30
 8017834:	7083      	strb	r3, [r0, #2]
 8017836:	70c1      	strb	r1, [r0, #3]
 8017838:	1d03      	adds	r3, r0, #4
 801783a:	e7f1      	b.n	8017820 <__exponent+0x60>

0801783c <_printf_float>:
 801783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017840:	ed2d 8b02 	vpush	{d8}
 8017844:	b08d      	sub	sp, #52	; 0x34
 8017846:	460c      	mov	r4, r1
 8017848:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801784c:	4616      	mov	r6, r2
 801784e:	461f      	mov	r7, r3
 8017850:	4605      	mov	r5, r0
 8017852:	f001 fd91 	bl	8019378 <_localeconv_r>
 8017856:	f8d0 a000 	ldr.w	sl, [r0]
 801785a:	4650      	mov	r0, sl
 801785c:	f7e8 fcc8 	bl	80001f0 <strlen>
 8017860:	2300      	movs	r3, #0
 8017862:	930a      	str	r3, [sp, #40]	; 0x28
 8017864:	6823      	ldr	r3, [r4, #0]
 8017866:	9305      	str	r3, [sp, #20]
 8017868:	f8d8 3000 	ldr.w	r3, [r8]
 801786c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017870:	3307      	adds	r3, #7
 8017872:	f023 0307 	bic.w	r3, r3, #7
 8017876:	f103 0208 	add.w	r2, r3, #8
 801787a:	f8c8 2000 	str.w	r2, [r8]
 801787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017882:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017886:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801788a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801788e:	9307      	str	r3, [sp, #28]
 8017890:	f8cd 8018 	str.w	r8, [sp, #24]
 8017894:	ee08 0a10 	vmov	s16, r0
 8017898:	4b9f      	ldr	r3, [pc, #636]	; (8017b18 <_printf_float+0x2dc>)
 801789a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801789e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178a2:	f7e9 f953 	bl	8000b4c <__aeabi_dcmpun>
 80178a6:	bb88      	cbnz	r0, 801790c <_printf_float+0xd0>
 80178a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80178ac:	4b9a      	ldr	r3, [pc, #616]	; (8017b18 <_printf_float+0x2dc>)
 80178ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178b2:	f7e9 f92d 	bl	8000b10 <__aeabi_dcmple>
 80178b6:	bb48      	cbnz	r0, 801790c <_printf_float+0xd0>
 80178b8:	2200      	movs	r2, #0
 80178ba:	2300      	movs	r3, #0
 80178bc:	4640      	mov	r0, r8
 80178be:	4649      	mov	r1, r9
 80178c0:	f7e9 f91c 	bl	8000afc <__aeabi_dcmplt>
 80178c4:	b110      	cbz	r0, 80178cc <_printf_float+0x90>
 80178c6:	232d      	movs	r3, #45	; 0x2d
 80178c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80178cc:	4b93      	ldr	r3, [pc, #588]	; (8017b1c <_printf_float+0x2e0>)
 80178ce:	4894      	ldr	r0, [pc, #592]	; (8017b20 <_printf_float+0x2e4>)
 80178d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80178d4:	bf94      	ite	ls
 80178d6:	4698      	movls	r8, r3
 80178d8:	4680      	movhi	r8, r0
 80178da:	2303      	movs	r3, #3
 80178dc:	6123      	str	r3, [r4, #16]
 80178de:	9b05      	ldr	r3, [sp, #20]
 80178e0:	f023 0204 	bic.w	r2, r3, #4
 80178e4:	6022      	str	r2, [r4, #0]
 80178e6:	f04f 0900 	mov.w	r9, #0
 80178ea:	9700      	str	r7, [sp, #0]
 80178ec:	4633      	mov	r3, r6
 80178ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80178f0:	4621      	mov	r1, r4
 80178f2:	4628      	mov	r0, r5
 80178f4:	f000 f9d8 	bl	8017ca8 <_printf_common>
 80178f8:	3001      	adds	r0, #1
 80178fa:	f040 8090 	bne.w	8017a1e <_printf_float+0x1e2>
 80178fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017902:	b00d      	add	sp, #52	; 0x34
 8017904:	ecbd 8b02 	vpop	{d8}
 8017908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801790c:	4642      	mov	r2, r8
 801790e:	464b      	mov	r3, r9
 8017910:	4640      	mov	r0, r8
 8017912:	4649      	mov	r1, r9
 8017914:	f7e9 f91a 	bl	8000b4c <__aeabi_dcmpun>
 8017918:	b140      	cbz	r0, 801792c <_printf_float+0xf0>
 801791a:	464b      	mov	r3, r9
 801791c:	2b00      	cmp	r3, #0
 801791e:	bfbc      	itt	lt
 8017920:	232d      	movlt	r3, #45	; 0x2d
 8017922:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017926:	487f      	ldr	r0, [pc, #508]	; (8017b24 <_printf_float+0x2e8>)
 8017928:	4b7f      	ldr	r3, [pc, #508]	; (8017b28 <_printf_float+0x2ec>)
 801792a:	e7d1      	b.n	80178d0 <_printf_float+0x94>
 801792c:	6863      	ldr	r3, [r4, #4]
 801792e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017932:	9206      	str	r2, [sp, #24]
 8017934:	1c5a      	adds	r2, r3, #1
 8017936:	d13f      	bne.n	80179b8 <_printf_float+0x17c>
 8017938:	2306      	movs	r3, #6
 801793a:	6063      	str	r3, [r4, #4]
 801793c:	9b05      	ldr	r3, [sp, #20]
 801793e:	6861      	ldr	r1, [r4, #4]
 8017940:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017944:	2300      	movs	r3, #0
 8017946:	9303      	str	r3, [sp, #12]
 8017948:	ab0a      	add	r3, sp, #40	; 0x28
 801794a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801794e:	ab09      	add	r3, sp, #36	; 0x24
 8017950:	ec49 8b10 	vmov	d0, r8, r9
 8017954:	9300      	str	r3, [sp, #0]
 8017956:	6022      	str	r2, [r4, #0]
 8017958:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801795c:	4628      	mov	r0, r5
 801795e:	f7ff fecd 	bl	80176fc <__cvt>
 8017962:	9b06      	ldr	r3, [sp, #24]
 8017964:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017966:	2b47      	cmp	r3, #71	; 0x47
 8017968:	4680      	mov	r8, r0
 801796a:	d108      	bne.n	801797e <_printf_float+0x142>
 801796c:	1cc8      	adds	r0, r1, #3
 801796e:	db02      	blt.n	8017976 <_printf_float+0x13a>
 8017970:	6863      	ldr	r3, [r4, #4]
 8017972:	4299      	cmp	r1, r3
 8017974:	dd41      	ble.n	80179fa <_printf_float+0x1be>
 8017976:	f1ab 0b02 	sub.w	fp, fp, #2
 801797a:	fa5f fb8b 	uxtb.w	fp, fp
 801797e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017982:	d820      	bhi.n	80179c6 <_printf_float+0x18a>
 8017984:	3901      	subs	r1, #1
 8017986:	465a      	mov	r2, fp
 8017988:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801798c:	9109      	str	r1, [sp, #36]	; 0x24
 801798e:	f7ff ff17 	bl	80177c0 <__exponent>
 8017992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017994:	1813      	adds	r3, r2, r0
 8017996:	2a01      	cmp	r2, #1
 8017998:	4681      	mov	r9, r0
 801799a:	6123      	str	r3, [r4, #16]
 801799c:	dc02      	bgt.n	80179a4 <_printf_float+0x168>
 801799e:	6822      	ldr	r2, [r4, #0]
 80179a0:	07d2      	lsls	r2, r2, #31
 80179a2:	d501      	bpl.n	80179a8 <_printf_float+0x16c>
 80179a4:	3301      	adds	r3, #1
 80179a6:	6123      	str	r3, [r4, #16]
 80179a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d09c      	beq.n	80178ea <_printf_float+0xae>
 80179b0:	232d      	movs	r3, #45	; 0x2d
 80179b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179b6:	e798      	b.n	80178ea <_printf_float+0xae>
 80179b8:	9a06      	ldr	r2, [sp, #24]
 80179ba:	2a47      	cmp	r2, #71	; 0x47
 80179bc:	d1be      	bne.n	801793c <_printf_float+0x100>
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d1bc      	bne.n	801793c <_printf_float+0x100>
 80179c2:	2301      	movs	r3, #1
 80179c4:	e7b9      	b.n	801793a <_printf_float+0xfe>
 80179c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80179ca:	d118      	bne.n	80179fe <_printf_float+0x1c2>
 80179cc:	2900      	cmp	r1, #0
 80179ce:	6863      	ldr	r3, [r4, #4]
 80179d0:	dd0b      	ble.n	80179ea <_printf_float+0x1ae>
 80179d2:	6121      	str	r1, [r4, #16]
 80179d4:	b913      	cbnz	r3, 80179dc <_printf_float+0x1a0>
 80179d6:	6822      	ldr	r2, [r4, #0]
 80179d8:	07d0      	lsls	r0, r2, #31
 80179da:	d502      	bpl.n	80179e2 <_printf_float+0x1a6>
 80179dc:	3301      	adds	r3, #1
 80179de:	440b      	add	r3, r1
 80179e0:	6123      	str	r3, [r4, #16]
 80179e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80179e4:	f04f 0900 	mov.w	r9, #0
 80179e8:	e7de      	b.n	80179a8 <_printf_float+0x16c>
 80179ea:	b913      	cbnz	r3, 80179f2 <_printf_float+0x1b6>
 80179ec:	6822      	ldr	r2, [r4, #0]
 80179ee:	07d2      	lsls	r2, r2, #31
 80179f0:	d501      	bpl.n	80179f6 <_printf_float+0x1ba>
 80179f2:	3302      	adds	r3, #2
 80179f4:	e7f4      	b.n	80179e0 <_printf_float+0x1a4>
 80179f6:	2301      	movs	r3, #1
 80179f8:	e7f2      	b.n	80179e0 <_printf_float+0x1a4>
 80179fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80179fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a00:	4299      	cmp	r1, r3
 8017a02:	db05      	blt.n	8017a10 <_printf_float+0x1d4>
 8017a04:	6823      	ldr	r3, [r4, #0]
 8017a06:	6121      	str	r1, [r4, #16]
 8017a08:	07d8      	lsls	r0, r3, #31
 8017a0a:	d5ea      	bpl.n	80179e2 <_printf_float+0x1a6>
 8017a0c:	1c4b      	adds	r3, r1, #1
 8017a0e:	e7e7      	b.n	80179e0 <_printf_float+0x1a4>
 8017a10:	2900      	cmp	r1, #0
 8017a12:	bfd4      	ite	le
 8017a14:	f1c1 0202 	rsble	r2, r1, #2
 8017a18:	2201      	movgt	r2, #1
 8017a1a:	4413      	add	r3, r2
 8017a1c:	e7e0      	b.n	80179e0 <_printf_float+0x1a4>
 8017a1e:	6823      	ldr	r3, [r4, #0]
 8017a20:	055a      	lsls	r2, r3, #21
 8017a22:	d407      	bmi.n	8017a34 <_printf_float+0x1f8>
 8017a24:	6923      	ldr	r3, [r4, #16]
 8017a26:	4642      	mov	r2, r8
 8017a28:	4631      	mov	r1, r6
 8017a2a:	4628      	mov	r0, r5
 8017a2c:	47b8      	blx	r7
 8017a2e:	3001      	adds	r0, #1
 8017a30:	d12c      	bne.n	8017a8c <_printf_float+0x250>
 8017a32:	e764      	b.n	80178fe <_printf_float+0xc2>
 8017a34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017a38:	f240 80e0 	bls.w	8017bfc <_printf_float+0x3c0>
 8017a3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017a40:	2200      	movs	r2, #0
 8017a42:	2300      	movs	r3, #0
 8017a44:	f7e9 f850 	bl	8000ae8 <__aeabi_dcmpeq>
 8017a48:	2800      	cmp	r0, #0
 8017a4a:	d034      	beq.n	8017ab6 <_printf_float+0x27a>
 8017a4c:	4a37      	ldr	r2, [pc, #220]	; (8017b2c <_printf_float+0x2f0>)
 8017a4e:	2301      	movs	r3, #1
 8017a50:	4631      	mov	r1, r6
 8017a52:	4628      	mov	r0, r5
 8017a54:	47b8      	blx	r7
 8017a56:	3001      	adds	r0, #1
 8017a58:	f43f af51 	beq.w	80178fe <_printf_float+0xc2>
 8017a5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017a60:	429a      	cmp	r2, r3
 8017a62:	db02      	blt.n	8017a6a <_printf_float+0x22e>
 8017a64:	6823      	ldr	r3, [r4, #0]
 8017a66:	07d8      	lsls	r0, r3, #31
 8017a68:	d510      	bpl.n	8017a8c <_printf_float+0x250>
 8017a6a:	ee18 3a10 	vmov	r3, s16
 8017a6e:	4652      	mov	r2, sl
 8017a70:	4631      	mov	r1, r6
 8017a72:	4628      	mov	r0, r5
 8017a74:	47b8      	blx	r7
 8017a76:	3001      	adds	r0, #1
 8017a78:	f43f af41 	beq.w	80178fe <_printf_float+0xc2>
 8017a7c:	f04f 0800 	mov.w	r8, #0
 8017a80:	f104 091a 	add.w	r9, r4, #26
 8017a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a86:	3b01      	subs	r3, #1
 8017a88:	4543      	cmp	r3, r8
 8017a8a:	dc09      	bgt.n	8017aa0 <_printf_float+0x264>
 8017a8c:	6823      	ldr	r3, [r4, #0]
 8017a8e:	079b      	lsls	r3, r3, #30
 8017a90:	f100 8105 	bmi.w	8017c9e <_printf_float+0x462>
 8017a94:	68e0      	ldr	r0, [r4, #12]
 8017a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a98:	4298      	cmp	r0, r3
 8017a9a:	bfb8      	it	lt
 8017a9c:	4618      	movlt	r0, r3
 8017a9e:	e730      	b.n	8017902 <_printf_float+0xc6>
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	464a      	mov	r2, r9
 8017aa4:	4631      	mov	r1, r6
 8017aa6:	4628      	mov	r0, r5
 8017aa8:	47b8      	blx	r7
 8017aaa:	3001      	adds	r0, #1
 8017aac:	f43f af27 	beq.w	80178fe <_printf_float+0xc2>
 8017ab0:	f108 0801 	add.w	r8, r8, #1
 8017ab4:	e7e6      	b.n	8017a84 <_printf_float+0x248>
 8017ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	dc39      	bgt.n	8017b30 <_printf_float+0x2f4>
 8017abc:	4a1b      	ldr	r2, [pc, #108]	; (8017b2c <_printf_float+0x2f0>)
 8017abe:	2301      	movs	r3, #1
 8017ac0:	4631      	mov	r1, r6
 8017ac2:	4628      	mov	r0, r5
 8017ac4:	47b8      	blx	r7
 8017ac6:	3001      	adds	r0, #1
 8017ac8:	f43f af19 	beq.w	80178fe <_printf_float+0xc2>
 8017acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017ad0:	4313      	orrs	r3, r2
 8017ad2:	d102      	bne.n	8017ada <_printf_float+0x29e>
 8017ad4:	6823      	ldr	r3, [r4, #0]
 8017ad6:	07d9      	lsls	r1, r3, #31
 8017ad8:	d5d8      	bpl.n	8017a8c <_printf_float+0x250>
 8017ada:	ee18 3a10 	vmov	r3, s16
 8017ade:	4652      	mov	r2, sl
 8017ae0:	4631      	mov	r1, r6
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	47b8      	blx	r7
 8017ae6:	3001      	adds	r0, #1
 8017ae8:	f43f af09 	beq.w	80178fe <_printf_float+0xc2>
 8017aec:	f04f 0900 	mov.w	r9, #0
 8017af0:	f104 0a1a 	add.w	sl, r4, #26
 8017af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017af6:	425b      	negs	r3, r3
 8017af8:	454b      	cmp	r3, r9
 8017afa:	dc01      	bgt.n	8017b00 <_printf_float+0x2c4>
 8017afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017afe:	e792      	b.n	8017a26 <_printf_float+0x1ea>
 8017b00:	2301      	movs	r3, #1
 8017b02:	4652      	mov	r2, sl
 8017b04:	4631      	mov	r1, r6
 8017b06:	4628      	mov	r0, r5
 8017b08:	47b8      	blx	r7
 8017b0a:	3001      	adds	r0, #1
 8017b0c:	f43f aef7 	beq.w	80178fe <_printf_float+0xc2>
 8017b10:	f109 0901 	add.w	r9, r9, #1
 8017b14:	e7ee      	b.n	8017af4 <_printf_float+0x2b8>
 8017b16:	bf00      	nop
 8017b18:	7fefffff 	.word	0x7fefffff
 8017b1c:	0801bb91 	.word	0x0801bb91
 8017b20:	0801bb95 	.word	0x0801bb95
 8017b24:	0801bb9d 	.word	0x0801bb9d
 8017b28:	0801bb99 	.word	0x0801bb99
 8017b2c:	0801be18 	.word	0x0801be18
 8017b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017b34:	429a      	cmp	r2, r3
 8017b36:	bfa8      	it	ge
 8017b38:	461a      	movge	r2, r3
 8017b3a:	2a00      	cmp	r2, #0
 8017b3c:	4691      	mov	r9, r2
 8017b3e:	dc37      	bgt.n	8017bb0 <_printf_float+0x374>
 8017b40:	f04f 0b00 	mov.w	fp, #0
 8017b44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017b48:	f104 021a 	add.w	r2, r4, #26
 8017b4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017b4e:	9305      	str	r3, [sp, #20]
 8017b50:	eba3 0309 	sub.w	r3, r3, r9
 8017b54:	455b      	cmp	r3, fp
 8017b56:	dc33      	bgt.n	8017bc0 <_printf_float+0x384>
 8017b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	db3b      	blt.n	8017bd8 <_printf_float+0x39c>
 8017b60:	6823      	ldr	r3, [r4, #0]
 8017b62:	07da      	lsls	r2, r3, #31
 8017b64:	d438      	bmi.n	8017bd8 <_printf_float+0x39c>
 8017b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b68:	9b05      	ldr	r3, [sp, #20]
 8017b6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017b6c:	1ad3      	subs	r3, r2, r3
 8017b6e:	eba2 0901 	sub.w	r9, r2, r1
 8017b72:	4599      	cmp	r9, r3
 8017b74:	bfa8      	it	ge
 8017b76:	4699      	movge	r9, r3
 8017b78:	f1b9 0f00 	cmp.w	r9, #0
 8017b7c:	dc35      	bgt.n	8017bea <_printf_float+0x3ae>
 8017b7e:	f04f 0800 	mov.w	r8, #0
 8017b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017b86:	f104 0a1a 	add.w	sl, r4, #26
 8017b8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017b8e:	1a9b      	subs	r3, r3, r2
 8017b90:	eba3 0309 	sub.w	r3, r3, r9
 8017b94:	4543      	cmp	r3, r8
 8017b96:	f77f af79 	ble.w	8017a8c <_printf_float+0x250>
 8017b9a:	2301      	movs	r3, #1
 8017b9c:	4652      	mov	r2, sl
 8017b9e:	4631      	mov	r1, r6
 8017ba0:	4628      	mov	r0, r5
 8017ba2:	47b8      	blx	r7
 8017ba4:	3001      	adds	r0, #1
 8017ba6:	f43f aeaa 	beq.w	80178fe <_printf_float+0xc2>
 8017baa:	f108 0801 	add.w	r8, r8, #1
 8017bae:	e7ec      	b.n	8017b8a <_printf_float+0x34e>
 8017bb0:	4613      	mov	r3, r2
 8017bb2:	4631      	mov	r1, r6
 8017bb4:	4642      	mov	r2, r8
 8017bb6:	4628      	mov	r0, r5
 8017bb8:	47b8      	blx	r7
 8017bba:	3001      	adds	r0, #1
 8017bbc:	d1c0      	bne.n	8017b40 <_printf_float+0x304>
 8017bbe:	e69e      	b.n	80178fe <_printf_float+0xc2>
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	4631      	mov	r1, r6
 8017bc4:	4628      	mov	r0, r5
 8017bc6:	9205      	str	r2, [sp, #20]
 8017bc8:	47b8      	blx	r7
 8017bca:	3001      	adds	r0, #1
 8017bcc:	f43f ae97 	beq.w	80178fe <_printf_float+0xc2>
 8017bd0:	9a05      	ldr	r2, [sp, #20]
 8017bd2:	f10b 0b01 	add.w	fp, fp, #1
 8017bd6:	e7b9      	b.n	8017b4c <_printf_float+0x310>
 8017bd8:	ee18 3a10 	vmov	r3, s16
 8017bdc:	4652      	mov	r2, sl
 8017bde:	4631      	mov	r1, r6
 8017be0:	4628      	mov	r0, r5
 8017be2:	47b8      	blx	r7
 8017be4:	3001      	adds	r0, #1
 8017be6:	d1be      	bne.n	8017b66 <_printf_float+0x32a>
 8017be8:	e689      	b.n	80178fe <_printf_float+0xc2>
 8017bea:	9a05      	ldr	r2, [sp, #20]
 8017bec:	464b      	mov	r3, r9
 8017bee:	4442      	add	r2, r8
 8017bf0:	4631      	mov	r1, r6
 8017bf2:	4628      	mov	r0, r5
 8017bf4:	47b8      	blx	r7
 8017bf6:	3001      	adds	r0, #1
 8017bf8:	d1c1      	bne.n	8017b7e <_printf_float+0x342>
 8017bfa:	e680      	b.n	80178fe <_printf_float+0xc2>
 8017bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017bfe:	2a01      	cmp	r2, #1
 8017c00:	dc01      	bgt.n	8017c06 <_printf_float+0x3ca>
 8017c02:	07db      	lsls	r3, r3, #31
 8017c04:	d538      	bpl.n	8017c78 <_printf_float+0x43c>
 8017c06:	2301      	movs	r3, #1
 8017c08:	4642      	mov	r2, r8
 8017c0a:	4631      	mov	r1, r6
 8017c0c:	4628      	mov	r0, r5
 8017c0e:	47b8      	blx	r7
 8017c10:	3001      	adds	r0, #1
 8017c12:	f43f ae74 	beq.w	80178fe <_printf_float+0xc2>
 8017c16:	ee18 3a10 	vmov	r3, s16
 8017c1a:	4652      	mov	r2, sl
 8017c1c:	4631      	mov	r1, r6
 8017c1e:	4628      	mov	r0, r5
 8017c20:	47b8      	blx	r7
 8017c22:	3001      	adds	r0, #1
 8017c24:	f43f ae6b 	beq.w	80178fe <_printf_float+0xc2>
 8017c28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	2300      	movs	r3, #0
 8017c30:	f7e8 ff5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8017c34:	b9d8      	cbnz	r0, 8017c6e <_printf_float+0x432>
 8017c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c38:	f108 0201 	add.w	r2, r8, #1
 8017c3c:	3b01      	subs	r3, #1
 8017c3e:	4631      	mov	r1, r6
 8017c40:	4628      	mov	r0, r5
 8017c42:	47b8      	blx	r7
 8017c44:	3001      	adds	r0, #1
 8017c46:	d10e      	bne.n	8017c66 <_printf_float+0x42a>
 8017c48:	e659      	b.n	80178fe <_printf_float+0xc2>
 8017c4a:	2301      	movs	r3, #1
 8017c4c:	4652      	mov	r2, sl
 8017c4e:	4631      	mov	r1, r6
 8017c50:	4628      	mov	r0, r5
 8017c52:	47b8      	blx	r7
 8017c54:	3001      	adds	r0, #1
 8017c56:	f43f ae52 	beq.w	80178fe <_printf_float+0xc2>
 8017c5a:	f108 0801 	add.w	r8, r8, #1
 8017c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c60:	3b01      	subs	r3, #1
 8017c62:	4543      	cmp	r3, r8
 8017c64:	dcf1      	bgt.n	8017c4a <_printf_float+0x40e>
 8017c66:	464b      	mov	r3, r9
 8017c68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017c6c:	e6dc      	b.n	8017a28 <_printf_float+0x1ec>
 8017c6e:	f04f 0800 	mov.w	r8, #0
 8017c72:	f104 0a1a 	add.w	sl, r4, #26
 8017c76:	e7f2      	b.n	8017c5e <_printf_float+0x422>
 8017c78:	2301      	movs	r3, #1
 8017c7a:	4642      	mov	r2, r8
 8017c7c:	e7df      	b.n	8017c3e <_printf_float+0x402>
 8017c7e:	2301      	movs	r3, #1
 8017c80:	464a      	mov	r2, r9
 8017c82:	4631      	mov	r1, r6
 8017c84:	4628      	mov	r0, r5
 8017c86:	47b8      	blx	r7
 8017c88:	3001      	adds	r0, #1
 8017c8a:	f43f ae38 	beq.w	80178fe <_printf_float+0xc2>
 8017c8e:	f108 0801 	add.w	r8, r8, #1
 8017c92:	68e3      	ldr	r3, [r4, #12]
 8017c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017c96:	1a5b      	subs	r3, r3, r1
 8017c98:	4543      	cmp	r3, r8
 8017c9a:	dcf0      	bgt.n	8017c7e <_printf_float+0x442>
 8017c9c:	e6fa      	b.n	8017a94 <_printf_float+0x258>
 8017c9e:	f04f 0800 	mov.w	r8, #0
 8017ca2:	f104 0919 	add.w	r9, r4, #25
 8017ca6:	e7f4      	b.n	8017c92 <_printf_float+0x456>

08017ca8 <_printf_common>:
 8017ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cac:	4616      	mov	r6, r2
 8017cae:	4699      	mov	r9, r3
 8017cb0:	688a      	ldr	r2, [r1, #8]
 8017cb2:	690b      	ldr	r3, [r1, #16]
 8017cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017cb8:	4293      	cmp	r3, r2
 8017cba:	bfb8      	it	lt
 8017cbc:	4613      	movlt	r3, r2
 8017cbe:	6033      	str	r3, [r6, #0]
 8017cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017cc4:	4607      	mov	r7, r0
 8017cc6:	460c      	mov	r4, r1
 8017cc8:	b10a      	cbz	r2, 8017cce <_printf_common+0x26>
 8017cca:	3301      	adds	r3, #1
 8017ccc:	6033      	str	r3, [r6, #0]
 8017cce:	6823      	ldr	r3, [r4, #0]
 8017cd0:	0699      	lsls	r1, r3, #26
 8017cd2:	bf42      	ittt	mi
 8017cd4:	6833      	ldrmi	r3, [r6, #0]
 8017cd6:	3302      	addmi	r3, #2
 8017cd8:	6033      	strmi	r3, [r6, #0]
 8017cda:	6825      	ldr	r5, [r4, #0]
 8017cdc:	f015 0506 	ands.w	r5, r5, #6
 8017ce0:	d106      	bne.n	8017cf0 <_printf_common+0x48>
 8017ce2:	f104 0a19 	add.w	sl, r4, #25
 8017ce6:	68e3      	ldr	r3, [r4, #12]
 8017ce8:	6832      	ldr	r2, [r6, #0]
 8017cea:	1a9b      	subs	r3, r3, r2
 8017cec:	42ab      	cmp	r3, r5
 8017cee:	dc26      	bgt.n	8017d3e <_printf_common+0x96>
 8017cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017cf4:	1e13      	subs	r3, r2, #0
 8017cf6:	6822      	ldr	r2, [r4, #0]
 8017cf8:	bf18      	it	ne
 8017cfa:	2301      	movne	r3, #1
 8017cfc:	0692      	lsls	r2, r2, #26
 8017cfe:	d42b      	bmi.n	8017d58 <_printf_common+0xb0>
 8017d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017d04:	4649      	mov	r1, r9
 8017d06:	4638      	mov	r0, r7
 8017d08:	47c0      	blx	r8
 8017d0a:	3001      	adds	r0, #1
 8017d0c:	d01e      	beq.n	8017d4c <_printf_common+0xa4>
 8017d0e:	6823      	ldr	r3, [r4, #0]
 8017d10:	68e5      	ldr	r5, [r4, #12]
 8017d12:	6832      	ldr	r2, [r6, #0]
 8017d14:	f003 0306 	and.w	r3, r3, #6
 8017d18:	2b04      	cmp	r3, #4
 8017d1a:	bf08      	it	eq
 8017d1c:	1aad      	subeq	r5, r5, r2
 8017d1e:	68a3      	ldr	r3, [r4, #8]
 8017d20:	6922      	ldr	r2, [r4, #16]
 8017d22:	bf0c      	ite	eq
 8017d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017d28:	2500      	movne	r5, #0
 8017d2a:	4293      	cmp	r3, r2
 8017d2c:	bfc4      	itt	gt
 8017d2e:	1a9b      	subgt	r3, r3, r2
 8017d30:	18ed      	addgt	r5, r5, r3
 8017d32:	2600      	movs	r6, #0
 8017d34:	341a      	adds	r4, #26
 8017d36:	42b5      	cmp	r5, r6
 8017d38:	d11a      	bne.n	8017d70 <_printf_common+0xc8>
 8017d3a:	2000      	movs	r0, #0
 8017d3c:	e008      	b.n	8017d50 <_printf_common+0xa8>
 8017d3e:	2301      	movs	r3, #1
 8017d40:	4652      	mov	r2, sl
 8017d42:	4649      	mov	r1, r9
 8017d44:	4638      	mov	r0, r7
 8017d46:	47c0      	blx	r8
 8017d48:	3001      	adds	r0, #1
 8017d4a:	d103      	bne.n	8017d54 <_printf_common+0xac>
 8017d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d54:	3501      	adds	r5, #1
 8017d56:	e7c6      	b.n	8017ce6 <_printf_common+0x3e>
 8017d58:	18e1      	adds	r1, r4, r3
 8017d5a:	1c5a      	adds	r2, r3, #1
 8017d5c:	2030      	movs	r0, #48	; 0x30
 8017d5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017d62:	4422      	add	r2, r4
 8017d64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017d68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017d6c:	3302      	adds	r3, #2
 8017d6e:	e7c7      	b.n	8017d00 <_printf_common+0x58>
 8017d70:	2301      	movs	r3, #1
 8017d72:	4622      	mov	r2, r4
 8017d74:	4649      	mov	r1, r9
 8017d76:	4638      	mov	r0, r7
 8017d78:	47c0      	blx	r8
 8017d7a:	3001      	adds	r0, #1
 8017d7c:	d0e6      	beq.n	8017d4c <_printf_common+0xa4>
 8017d7e:	3601      	adds	r6, #1
 8017d80:	e7d9      	b.n	8017d36 <_printf_common+0x8e>
	...

08017d84 <_printf_i>:
 8017d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d88:	460c      	mov	r4, r1
 8017d8a:	4691      	mov	r9, r2
 8017d8c:	7e27      	ldrb	r7, [r4, #24]
 8017d8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017d90:	2f78      	cmp	r7, #120	; 0x78
 8017d92:	4680      	mov	r8, r0
 8017d94:	469a      	mov	sl, r3
 8017d96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017d9a:	d807      	bhi.n	8017dac <_printf_i+0x28>
 8017d9c:	2f62      	cmp	r7, #98	; 0x62
 8017d9e:	d80a      	bhi.n	8017db6 <_printf_i+0x32>
 8017da0:	2f00      	cmp	r7, #0
 8017da2:	f000 80d8 	beq.w	8017f56 <_printf_i+0x1d2>
 8017da6:	2f58      	cmp	r7, #88	; 0x58
 8017da8:	f000 80a3 	beq.w	8017ef2 <_printf_i+0x16e>
 8017dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017db4:	e03a      	b.n	8017e2c <_printf_i+0xa8>
 8017db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017dba:	2b15      	cmp	r3, #21
 8017dbc:	d8f6      	bhi.n	8017dac <_printf_i+0x28>
 8017dbe:	a001      	add	r0, pc, #4	; (adr r0, 8017dc4 <_printf_i+0x40>)
 8017dc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017dc4:	08017e1d 	.word	0x08017e1d
 8017dc8:	08017e31 	.word	0x08017e31
 8017dcc:	08017dad 	.word	0x08017dad
 8017dd0:	08017dad 	.word	0x08017dad
 8017dd4:	08017dad 	.word	0x08017dad
 8017dd8:	08017dad 	.word	0x08017dad
 8017ddc:	08017e31 	.word	0x08017e31
 8017de0:	08017dad 	.word	0x08017dad
 8017de4:	08017dad 	.word	0x08017dad
 8017de8:	08017dad 	.word	0x08017dad
 8017dec:	08017dad 	.word	0x08017dad
 8017df0:	08017f3d 	.word	0x08017f3d
 8017df4:	08017e61 	.word	0x08017e61
 8017df8:	08017f1f 	.word	0x08017f1f
 8017dfc:	08017dad 	.word	0x08017dad
 8017e00:	08017dad 	.word	0x08017dad
 8017e04:	08017f5f 	.word	0x08017f5f
 8017e08:	08017dad 	.word	0x08017dad
 8017e0c:	08017e61 	.word	0x08017e61
 8017e10:	08017dad 	.word	0x08017dad
 8017e14:	08017dad 	.word	0x08017dad
 8017e18:	08017f27 	.word	0x08017f27
 8017e1c:	680b      	ldr	r3, [r1, #0]
 8017e1e:	1d1a      	adds	r2, r3, #4
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	600a      	str	r2, [r1, #0]
 8017e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017e2c:	2301      	movs	r3, #1
 8017e2e:	e0a3      	b.n	8017f78 <_printf_i+0x1f4>
 8017e30:	6825      	ldr	r5, [r4, #0]
 8017e32:	6808      	ldr	r0, [r1, #0]
 8017e34:	062e      	lsls	r6, r5, #24
 8017e36:	f100 0304 	add.w	r3, r0, #4
 8017e3a:	d50a      	bpl.n	8017e52 <_printf_i+0xce>
 8017e3c:	6805      	ldr	r5, [r0, #0]
 8017e3e:	600b      	str	r3, [r1, #0]
 8017e40:	2d00      	cmp	r5, #0
 8017e42:	da03      	bge.n	8017e4c <_printf_i+0xc8>
 8017e44:	232d      	movs	r3, #45	; 0x2d
 8017e46:	426d      	negs	r5, r5
 8017e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e4c:	485e      	ldr	r0, [pc, #376]	; (8017fc8 <_printf_i+0x244>)
 8017e4e:	230a      	movs	r3, #10
 8017e50:	e019      	b.n	8017e86 <_printf_i+0x102>
 8017e52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017e56:	6805      	ldr	r5, [r0, #0]
 8017e58:	600b      	str	r3, [r1, #0]
 8017e5a:	bf18      	it	ne
 8017e5c:	b22d      	sxthne	r5, r5
 8017e5e:	e7ef      	b.n	8017e40 <_printf_i+0xbc>
 8017e60:	680b      	ldr	r3, [r1, #0]
 8017e62:	6825      	ldr	r5, [r4, #0]
 8017e64:	1d18      	adds	r0, r3, #4
 8017e66:	6008      	str	r0, [r1, #0]
 8017e68:	0628      	lsls	r0, r5, #24
 8017e6a:	d501      	bpl.n	8017e70 <_printf_i+0xec>
 8017e6c:	681d      	ldr	r5, [r3, #0]
 8017e6e:	e002      	b.n	8017e76 <_printf_i+0xf2>
 8017e70:	0669      	lsls	r1, r5, #25
 8017e72:	d5fb      	bpl.n	8017e6c <_printf_i+0xe8>
 8017e74:	881d      	ldrh	r5, [r3, #0]
 8017e76:	4854      	ldr	r0, [pc, #336]	; (8017fc8 <_printf_i+0x244>)
 8017e78:	2f6f      	cmp	r7, #111	; 0x6f
 8017e7a:	bf0c      	ite	eq
 8017e7c:	2308      	moveq	r3, #8
 8017e7e:	230a      	movne	r3, #10
 8017e80:	2100      	movs	r1, #0
 8017e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017e86:	6866      	ldr	r6, [r4, #4]
 8017e88:	60a6      	str	r6, [r4, #8]
 8017e8a:	2e00      	cmp	r6, #0
 8017e8c:	bfa2      	ittt	ge
 8017e8e:	6821      	ldrge	r1, [r4, #0]
 8017e90:	f021 0104 	bicge.w	r1, r1, #4
 8017e94:	6021      	strge	r1, [r4, #0]
 8017e96:	b90d      	cbnz	r5, 8017e9c <_printf_i+0x118>
 8017e98:	2e00      	cmp	r6, #0
 8017e9a:	d04d      	beq.n	8017f38 <_printf_i+0x1b4>
 8017e9c:	4616      	mov	r6, r2
 8017e9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017ea2:	fb03 5711 	mls	r7, r3, r1, r5
 8017ea6:	5dc7      	ldrb	r7, [r0, r7]
 8017ea8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017eac:	462f      	mov	r7, r5
 8017eae:	42bb      	cmp	r3, r7
 8017eb0:	460d      	mov	r5, r1
 8017eb2:	d9f4      	bls.n	8017e9e <_printf_i+0x11a>
 8017eb4:	2b08      	cmp	r3, #8
 8017eb6:	d10b      	bne.n	8017ed0 <_printf_i+0x14c>
 8017eb8:	6823      	ldr	r3, [r4, #0]
 8017eba:	07df      	lsls	r7, r3, #31
 8017ebc:	d508      	bpl.n	8017ed0 <_printf_i+0x14c>
 8017ebe:	6923      	ldr	r3, [r4, #16]
 8017ec0:	6861      	ldr	r1, [r4, #4]
 8017ec2:	4299      	cmp	r1, r3
 8017ec4:	bfde      	ittt	le
 8017ec6:	2330      	movle	r3, #48	; 0x30
 8017ec8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017ecc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8017ed0:	1b92      	subs	r2, r2, r6
 8017ed2:	6122      	str	r2, [r4, #16]
 8017ed4:	f8cd a000 	str.w	sl, [sp]
 8017ed8:	464b      	mov	r3, r9
 8017eda:	aa03      	add	r2, sp, #12
 8017edc:	4621      	mov	r1, r4
 8017ede:	4640      	mov	r0, r8
 8017ee0:	f7ff fee2 	bl	8017ca8 <_printf_common>
 8017ee4:	3001      	adds	r0, #1
 8017ee6:	d14c      	bne.n	8017f82 <_printf_i+0x1fe>
 8017ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017eec:	b004      	add	sp, #16
 8017eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ef2:	4835      	ldr	r0, [pc, #212]	; (8017fc8 <_printf_i+0x244>)
 8017ef4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017ef8:	6823      	ldr	r3, [r4, #0]
 8017efa:	680e      	ldr	r6, [r1, #0]
 8017efc:	061f      	lsls	r7, r3, #24
 8017efe:	f856 5b04 	ldr.w	r5, [r6], #4
 8017f02:	600e      	str	r6, [r1, #0]
 8017f04:	d514      	bpl.n	8017f30 <_printf_i+0x1ac>
 8017f06:	07d9      	lsls	r1, r3, #31
 8017f08:	bf44      	itt	mi
 8017f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8017f0e:	6023      	strmi	r3, [r4, #0]
 8017f10:	b91d      	cbnz	r5, 8017f1a <_printf_i+0x196>
 8017f12:	6823      	ldr	r3, [r4, #0]
 8017f14:	f023 0320 	bic.w	r3, r3, #32
 8017f18:	6023      	str	r3, [r4, #0]
 8017f1a:	2310      	movs	r3, #16
 8017f1c:	e7b0      	b.n	8017e80 <_printf_i+0xfc>
 8017f1e:	6823      	ldr	r3, [r4, #0]
 8017f20:	f043 0320 	orr.w	r3, r3, #32
 8017f24:	6023      	str	r3, [r4, #0]
 8017f26:	2378      	movs	r3, #120	; 0x78
 8017f28:	4828      	ldr	r0, [pc, #160]	; (8017fcc <_printf_i+0x248>)
 8017f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017f2e:	e7e3      	b.n	8017ef8 <_printf_i+0x174>
 8017f30:	065e      	lsls	r6, r3, #25
 8017f32:	bf48      	it	mi
 8017f34:	b2ad      	uxthmi	r5, r5
 8017f36:	e7e6      	b.n	8017f06 <_printf_i+0x182>
 8017f38:	4616      	mov	r6, r2
 8017f3a:	e7bb      	b.n	8017eb4 <_printf_i+0x130>
 8017f3c:	680b      	ldr	r3, [r1, #0]
 8017f3e:	6826      	ldr	r6, [r4, #0]
 8017f40:	6960      	ldr	r0, [r4, #20]
 8017f42:	1d1d      	adds	r5, r3, #4
 8017f44:	600d      	str	r5, [r1, #0]
 8017f46:	0635      	lsls	r5, r6, #24
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	d501      	bpl.n	8017f50 <_printf_i+0x1cc>
 8017f4c:	6018      	str	r0, [r3, #0]
 8017f4e:	e002      	b.n	8017f56 <_printf_i+0x1d2>
 8017f50:	0671      	lsls	r1, r6, #25
 8017f52:	d5fb      	bpl.n	8017f4c <_printf_i+0x1c8>
 8017f54:	8018      	strh	r0, [r3, #0]
 8017f56:	2300      	movs	r3, #0
 8017f58:	6123      	str	r3, [r4, #16]
 8017f5a:	4616      	mov	r6, r2
 8017f5c:	e7ba      	b.n	8017ed4 <_printf_i+0x150>
 8017f5e:	680b      	ldr	r3, [r1, #0]
 8017f60:	1d1a      	adds	r2, r3, #4
 8017f62:	600a      	str	r2, [r1, #0]
 8017f64:	681e      	ldr	r6, [r3, #0]
 8017f66:	6862      	ldr	r2, [r4, #4]
 8017f68:	2100      	movs	r1, #0
 8017f6a:	4630      	mov	r0, r6
 8017f6c:	f7e8 f948 	bl	8000200 <memchr>
 8017f70:	b108      	cbz	r0, 8017f76 <_printf_i+0x1f2>
 8017f72:	1b80      	subs	r0, r0, r6
 8017f74:	6060      	str	r0, [r4, #4]
 8017f76:	6863      	ldr	r3, [r4, #4]
 8017f78:	6123      	str	r3, [r4, #16]
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f80:	e7a8      	b.n	8017ed4 <_printf_i+0x150>
 8017f82:	6923      	ldr	r3, [r4, #16]
 8017f84:	4632      	mov	r2, r6
 8017f86:	4649      	mov	r1, r9
 8017f88:	4640      	mov	r0, r8
 8017f8a:	47d0      	blx	sl
 8017f8c:	3001      	adds	r0, #1
 8017f8e:	d0ab      	beq.n	8017ee8 <_printf_i+0x164>
 8017f90:	6823      	ldr	r3, [r4, #0]
 8017f92:	079b      	lsls	r3, r3, #30
 8017f94:	d413      	bmi.n	8017fbe <_printf_i+0x23a>
 8017f96:	68e0      	ldr	r0, [r4, #12]
 8017f98:	9b03      	ldr	r3, [sp, #12]
 8017f9a:	4298      	cmp	r0, r3
 8017f9c:	bfb8      	it	lt
 8017f9e:	4618      	movlt	r0, r3
 8017fa0:	e7a4      	b.n	8017eec <_printf_i+0x168>
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	4632      	mov	r2, r6
 8017fa6:	4649      	mov	r1, r9
 8017fa8:	4640      	mov	r0, r8
 8017faa:	47d0      	blx	sl
 8017fac:	3001      	adds	r0, #1
 8017fae:	d09b      	beq.n	8017ee8 <_printf_i+0x164>
 8017fb0:	3501      	adds	r5, #1
 8017fb2:	68e3      	ldr	r3, [r4, #12]
 8017fb4:	9903      	ldr	r1, [sp, #12]
 8017fb6:	1a5b      	subs	r3, r3, r1
 8017fb8:	42ab      	cmp	r3, r5
 8017fba:	dcf2      	bgt.n	8017fa2 <_printf_i+0x21e>
 8017fbc:	e7eb      	b.n	8017f96 <_printf_i+0x212>
 8017fbe:	2500      	movs	r5, #0
 8017fc0:	f104 0619 	add.w	r6, r4, #25
 8017fc4:	e7f5      	b.n	8017fb2 <_printf_i+0x22e>
 8017fc6:	bf00      	nop
 8017fc8:	0801bba1 	.word	0x0801bba1
 8017fcc:	0801bbb2 	.word	0x0801bbb2

08017fd0 <_sbrk_r>:
 8017fd0:	b538      	push	{r3, r4, r5, lr}
 8017fd2:	4d06      	ldr	r5, [pc, #24]	; (8017fec <_sbrk_r+0x1c>)
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	4604      	mov	r4, r0
 8017fd8:	4608      	mov	r0, r1
 8017fda:	602b      	str	r3, [r5, #0]
 8017fdc:	f002 fd10 	bl	801aa00 <_sbrk>
 8017fe0:	1c43      	adds	r3, r0, #1
 8017fe2:	d102      	bne.n	8017fea <_sbrk_r+0x1a>
 8017fe4:	682b      	ldr	r3, [r5, #0]
 8017fe6:	b103      	cbz	r3, 8017fea <_sbrk_r+0x1a>
 8017fe8:	6023      	str	r3, [r4, #0]
 8017fea:	bd38      	pop	{r3, r4, r5, pc}
 8017fec:	20009b30 	.word	0x20009b30

08017ff0 <siprintf>:
 8017ff0:	b40e      	push	{r1, r2, r3}
 8017ff2:	b500      	push	{lr}
 8017ff4:	b09c      	sub	sp, #112	; 0x70
 8017ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8017ff8:	9002      	str	r0, [sp, #8]
 8017ffa:	9006      	str	r0, [sp, #24]
 8017ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018000:	4809      	ldr	r0, [pc, #36]	; (8018028 <siprintf+0x38>)
 8018002:	9107      	str	r1, [sp, #28]
 8018004:	9104      	str	r1, [sp, #16]
 8018006:	4909      	ldr	r1, [pc, #36]	; (801802c <siprintf+0x3c>)
 8018008:	f853 2b04 	ldr.w	r2, [r3], #4
 801800c:	9105      	str	r1, [sp, #20]
 801800e:	6800      	ldr	r0, [r0, #0]
 8018010:	9301      	str	r3, [sp, #4]
 8018012:	a902      	add	r1, sp, #8
 8018014:	f001 fe62 	bl	8019cdc <_svfiprintf_r>
 8018018:	9b02      	ldr	r3, [sp, #8]
 801801a:	2200      	movs	r2, #0
 801801c:	701a      	strb	r2, [r3, #0]
 801801e:	b01c      	add	sp, #112	; 0x70
 8018020:	f85d eb04 	ldr.w	lr, [sp], #4
 8018024:	b003      	add	sp, #12
 8018026:	4770      	bx	lr
 8018028:	20000024 	.word	0x20000024
 801802c:	ffff0208 	.word	0xffff0208

08018030 <siscanf>:
 8018030:	b40e      	push	{r1, r2, r3}
 8018032:	b510      	push	{r4, lr}
 8018034:	b09f      	sub	sp, #124	; 0x7c
 8018036:	ac21      	add	r4, sp, #132	; 0x84
 8018038:	f44f 7101 	mov.w	r1, #516	; 0x204
 801803c:	f854 2b04 	ldr.w	r2, [r4], #4
 8018040:	9201      	str	r2, [sp, #4]
 8018042:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018046:	9004      	str	r0, [sp, #16]
 8018048:	9008      	str	r0, [sp, #32]
 801804a:	f7e8 f8d1 	bl	80001f0 <strlen>
 801804e:	4b0c      	ldr	r3, [pc, #48]	; (8018080 <siscanf+0x50>)
 8018050:	9005      	str	r0, [sp, #20]
 8018052:	9009      	str	r0, [sp, #36]	; 0x24
 8018054:	930d      	str	r3, [sp, #52]	; 0x34
 8018056:	480b      	ldr	r0, [pc, #44]	; (8018084 <siscanf+0x54>)
 8018058:	9a01      	ldr	r2, [sp, #4]
 801805a:	6800      	ldr	r0, [r0, #0]
 801805c:	9403      	str	r4, [sp, #12]
 801805e:	2300      	movs	r3, #0
 8018060:	9311      	str	r3, [sp, #68]	; 0x44
 8018062:	9316      	str	r3, [sp, #88]	; 0x58
 8018064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018068:	f8ad 301e 	strh.w	r3, [sp, #30]
 801806c:	a904      	add	r1, sp, #16
 801806e:	4623      	mov	r3, r4
 8018070:	f001 ff8e 	bl	8019f90 <__ssvfiscanf_r>
 8018074:	b01f      	add	sp, #124	; 0x7c
 8018076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801807a:	b003      	add	sp, #12
 801807c:	4770      	bx	lr
 801807e:	bf00      	nop
 8018080:	080180ab 	.word	0x080180ab
 8018084:	20000024 	.word	0x20000024

08018088 <__sread>:
 8018088:	b510      	push	{r4, lr}
 801808a:	460c      	mov	r4, r1
 801808c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018090:	f002 fa42 	bl	801a518 <_read_r>
 8018094:	2800      	cmp	r0, #0
 8018096:	bfab      	itete	ge
 8018098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801809a:	89a3      	ldrhlt	r3, [r4, #12]
 801809c:	181b      	addge	r3, r3, r0
 801809e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80180a2:	bfac      	ite	ge
 80180a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80180a6:	81a3      	strhlt	r3, [r4, #12]
 80180a8:	bd10      	pop	{r4, pc}

080180aa <__seofread>:
 80180aa:	2000      	movs	r0, #0
 80180ac:	4770      	bx	lr

080180ae <__swrite>:
 80180ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180b2:	461f      	mov	r7, r3
 80180b4:	898b      	ldrh	r3, [r1, #12]
 80180b6:	05db      	lsls	r3, r3, #23
 80180b8:	4605      	mov	r5, r0
 80180ba:	460c      	mov	r4, r1
 80180bc:	4616      	mov	r6, r2
 80180be:	d505      	bpl.n	80180cc <__swrite+0x1e>
 80180c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180c4:	2302      	movs	r3, #2
 80180c6:	2200      	movs	r2, #0
 80180c8:	f001 f95e 	bl	8019388 <_lseek_r>
 80180cc:	89a3      	ldrh	r3, [r4, #12]
 80180ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80180d6:	81a3      	strh	r3, [r4, #12]
 80180d8:	4632      	mov	r2, r6
 80180da:	463b      	mov	r3, r7
 80180dc:	4628      	mov	r0, r5
 80180de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180e2:	f000 b887 	b.w	80181f4 <_write_r>

080180e6 <__sseek>:
 80180e6:	b510      	push	{r4, lr}
 80180e8:	460c      	mov	r4, r1
 80180ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180ee:	f001 f94b 	bl	8019388 <_lseek_r>
 80180f2:	1c43      	adds	r3, r0, #1
 80180f4:	89a3      	ldrh	r3, [r4, #12]
 80180f6:	bf15      	itete	ne
 80180f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80180fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80180fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018102:	81a3      	strheq	r3, [r4, #12]
 8018104:	bf18      	it	ne
 8018106:	81a3      	strhne	r3, [r4, #12]
 8018108:	bd10      	pop	{r4, pc}

0801810a <__sclose>:
 801810a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801810e:	f000 b8f1 	b.w	80182f4 <_close_r>

08018112 <strcpy>:
 8018112:	4603      	mov	r3, r0
 8018114:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018118:	f803 2b01 	strb.w	r2, [r3], #1
 801811c:	2a00      	cmp	r2, #0
 801811e:	d1f9      	bne.n	8018114 <strcpy+0x2>
 8018120:	4770      	bx	lr

08018122 <strstr>:
 8018122:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018124:	780c      	ldrb	r4, [r1, #0]
 8018126:	b164      	cbz	r4, 8018142 <strstr+0x20>
 8018128:	4603      	mov	r3, r0
 801812a:	781a      	ldrb	r2, [r3, #0]
 801812c:	4618      	mov	r0, r3
 801812e:	1c5e      	adds	r6, r3, #1
 8018130:	b90a      	cbnz	r2, 8018136 <strstr+0x14>
 8018132:	4610      	mov	r0, r2
 8018134:	e005      	b.n	8018142 <strstr+0x20>
 8018136:	4294      	cmp	r4, r2
 8018138:	d108      	bne.n	801814c <strstr+0x2a>
 801813a:	460d      	mov	r5, r1
 801813c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8018140:	b902      	cbnz	r2, 8018144 <strstr+0x22>
 8018142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018144:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8018148:	4297      	cmp	r7, r2
 801814a:	d0f7      	beq.n	801813c <strstr+0x1a>
 801814c:	4633      	mov	r3, r6
 801814e:	e7ec      	b.n	801812a <strstr+0x8>

08018150 <__swbuf_r>:
 8018150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018152:	460e      	mov	r6, r1
 8018154:	4614      	mov	r4, r2
 8018156:	4605      	mov	r5, r0
 8018158:	b118      	cbz	r0, 8018162 <__swbuf_r+0x12>
 801815a:	6983      	ldr	r3, [r0, #24]
 801815c:	b90b      	cbnz	r3, 8018162 <__swbuf_r+0x12>
 801815e:	f001 f86d 	bl	801923c <__sinit>
 8018162:	4b21      	ldr	r3, [pc, #132]	; (80181e8 <__swbuf_r+0x98>)
 8018164:	429c      	cmp	r4, r3
 8018166:	d12b      	bne.n	80181c0 <__swbuf_r+0x70>
 8018168:	686c      	ldr	r4, [r5, #4]
 801816a:	69a3      	ldr	r3, [r4, #24]
 801816c:	60a3      	str	r3, [r4, #8]
 801816e:	89a3      	ldrh	r3, [r4, #12]
 8018170:	071a      	lsls	r2, r3, #28
 8018172:	d52f      	bpl.n	80181d4 <__swbuf_r+0x84>
 8018174:	6923      	ldr	r3, [r4, #16]
 8018176:	b36b      	cbz	r3, 80181d4 <__swbuf_r+0x84>
 8018178:	6923      	ldr	r3, [r4, #16]
 801817a:	6820      	ldr	r0, [r4, #0]
 801817c:	1ac0      	subs	r0, r0, r3
 801817e:	6963      	ldr	r3, [r4, #20]
 8018180:	b2f6      	uxtb	r6, r6
 8018182:	4283      	cmp	r3, r0
 8018184:	4637      	mov	r7, r6
 8018186:	dc04      	bgt.n	8018192 <__swbuf_r+0x42>
 8018188:	4621      	mov	r1, r4
 801818a:	4628      	mov	r0, r5
 801818c:	f000 ffc2 	bl	8019114 <_fflush_r>
 8018190:	bb30      	cbnz	r0, 80181e0 <__swbuf_r+0x90>
 8018192:	68a3      	ldr	r3, [r4, #8]
 8018194:	3b01      	subs	r3, #1
 8018196:	60a3      	str	r3, [r4, #8]
 8018198:	6823      	ldr	r3, [r4, #0]
 801819a:	1c5a      	adds	r2, r3, #1
 801819c:	6022      	str	r2, [r4, #0]
 801819e:	701e      	strb	r6, [r3, #0]
 80181a0:	6963      	ldr	r3, [r4, #20]
 80181a2:	3001      	adds	r0, #1
 80181a4:	4283      	cmp	r3, r0
 80181a6:	d004      	beq.n	80181b2 <__swbuf_r+0x62>
 80181a8:	89a3      	ldrh	r3, [r4, #12]
 80181aa:	07db      	lsls	r3, r3, #31
 80181ac:	d506      	bpl.n	80181bc <__swbuf_r+0x6c>
 80181ae:	2e0a      	cmp	r6, #10
 80181b0:	d104      	bne.n	80181bc <__swbuf_r+0x6c>
 80181b2:	4621      	mov	r1, r4
 80181b4:	4628      	mov	r0, r5
 80181b6:	f000 ffad 	bl	8019114 <_fflush_r>
 80181ba:	b988      	cbnz	r0, 80181e0 <__swbuf_r+0x90>
 80181bc:	4638      	mov	r0, r7
 80181be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181c0:	4b0a      	ldr	r3, [pc, #40]	; (80181ec <__swbuf_r+0x9c>)
 80181c2:	429c      	cmp	r4, r3
 80181c4:	d101      	bne.n	80181ca <__swbuf_r+0x7a>
 80181c6:	68ac      	ldr	r4, [r5, #8]
 80181c8:	e7cf      	b.n	801816a <__swbuf_r+0x1a>
 80181ca:	4b09      	ldr	r3, [pc, #36]	; (80181f0 <__swbuf_r+0xa0>)
 80181cc:	429c      	cmp	r4, r3
 80181ce:	bf08      	it	eq
 80181d0:	68ec      	ldreq	r4, [r5, #12]
 80181d2:	e7ca      	b.n	801816a <__swbuf_r+0x1a>
 80181d4:	4621      	mov	r1, r4
 80181d6:	4628      	mov	r0, r5
 80181d8:	f000 f81e 	bl	8018218 <__swsetup_r>
 80181dc:	2800      	cmp	r0, #0
 80181de:	d0cb      	beq.n	8018178 <__swbuf_r+0x28>
 80181e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80181e4:	e7ea      	b.n	80181bc <__swbuf_r+0x6c>
 80181e6:	bf00      	nop
 80181e8:	0801bc78 	.word	0x0801bc78
 80181ec:	0801bc98 	.word	0x0801bc98
 80181f0:	0801bc58 	.word	0x0801bc58

080181f4 <_write_r>:
 80181f4:	b538      	push	{r3, r4, r5, lr}
 80181f6:	4d07      	ldr	r5, [pc, #28]	; (8018214 <_write_r+0x20>)
 80181f8:	4604      	mov	r4, r0
 80181fa:	4608      	mov	r0, r1
 80181fc:	4611      	mov	r1, r2
 80181fe:	2200      	movs	r2, #0
 8018200:	602a      	str	r2, [r5, #0]
 8018202:	461a      	mov	r2, r3
 8018204:	f7f3 fa3c 	bl	800b680 <_write>
 8018208:	1c43      	adds	r3, r0, #1
 801820a:	d102      	bne.n	8018212 <_write_r+0x1e>
 801820c:	682b      	ldr	r3, [r5, #0]
 801820e:	b103      	cbz	r3, 8018212 <_write_r+0x1e>
 8018210:	6023      	str	r3, [r4, #0]
 8018212:	bd38      	pop	{r3, r4, r5, pc}
 8018214:	20009b30 	.word	0x20009b30

08018218 <__swsetup_r>:
 8018218:	4b32      	ldr	r3, [pc, #200]	; (80182e4 <__swsetup_r+0xcc>)
 801821a:	b570      	push	{r4, r5, r6, lr}
 801821c:	681d      	ldr	r5, [r3, #0]
 801821e:	4606      	mov	r6, r0
 8018220:	460c      	mov	r4, r1
 8018222:	b125      	cbz	r5, 801822e <__swsetup_r+0x16>
 8018224:	69ab      	ldr	r3, [r5, #24]
 8018226:	b913      	cbnz	r3, 801822e <__swsetup_r+0x16>
 8018228:	4628      	mov	r0, r5
 801822a:	f001 f807 	bl	801923c <__sinit>
 801822e:	4b2e      	ldr	r3, [pc, #184]	; (80182e8 <__swsetup_r+0xd0>)
 8018230:	429c      	cmp	r4, r3
 8018232:	d10f      	bne.n	8018254 <__swsetup_r+0x3c>
 8018234:	686c      	ldr	r4, [r5, #4]
 8018236:	89a3      	ldrh	r3, [r4, #12]
 8018238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801823c:	0719      	lsls	r1, r3, #28
 801823e:	d42c      	bmi.n	801829a <__swsetup_r+0x82>
 8018240:	06dd      	lsls	r5, r3, #27
 8018242:	d411      	bmi.n	8018268 <__swsetup_r+0x50>
 8018244:	2309      	movs	r3, #9
 8018246:	6033      	str	r3, [r6, #0]
 8018248:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801824c:	81a3      	strh	r3, [r4, #12]
 801824e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018252:	e03e      	b.n	80182d2 <__swsetup_r+0xba>
 8018254:	4b25      	ldr	r3, [pc, #148]	; (80182ec <__swsetup_r+0xd4>)
 8018256:	429c      	cmp	r4, r3
 8018258:	d101      	bne.n	801825e <__swsetup_r+0x46>
 801825a:	68ac      	ldr	r4, [r5, #8]
 801825c:	e7eb      	b.n	8018236 <__swsetup_r+0x1e>
 801825e:	4b24      	ldr	r3, [pc, #144]	; (80182f0 <__swsetup_r+0xd8>)
 8018260:	429c      	cmp	r4, r3
 8018262:	bf08      	it	eq
 8018264:	68ec      	ldreq	r4, [r5, #12]
 8018266:	e7e6      	b.n	8018236 <__swsetup_r+0x1e>
 8018268:	0758      	lsls	r0, r3, #29
 801826a:	d512      	bpl.n	8018292 <__swsetup_r+0x7a>
 801826c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801826e:	b141      	cbz	r1, 8018282 <__swsetup_r+0x6a>
 8018270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018274:	4299      	cmp	r1, r3
 8018276:	d002      	beq.n	801827e <__swsetup_r+0x66>
 8018278:	4630      	mov	r0, r6
 801827a:	f7ff f83b 	bl	80172f4 <_free_r>
 801827e:	2300      	movs	r3, #0
 8018280:	6363      	str	r3, [r4, #52]	; 0x34
 8018282:	89a3      	ldrh	r3, [r4, #12]
 8018284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018288:	81a3      	strh	r3, [r4, #12]
 801828a:	2300      	movs	r3, #0
 801828c:	6063      	str	r3, [r4, #4]
 801828e:	6923      	ldr	r3, [r4, #16]
 8018290:	6023      	str	r3, [r4, #0]
 8018292:	89a3      	ldrh	r3, [r4, #12]
 8018294:	f043 0308 	orr.w	r3, r3, #8
 8018298:	81a3      	strh	r3, [r4, #12]
 801829a:	6923      	ldr	r3, [r4, #16]
 801829c:	b94b      	cbnz	r3, 80182b2 <__swsetup_r+0x9a>
 801829e:	89a3      	ldrh	r3, [r4, #12]
 80182a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80182a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80182a8:	d003      	beq.n	80182b2 <__swsetup_r+0x9a>
 80182aa:	4621      	mov	r1, r4
 80182ac:	4630      	mov	r0, r6
 80182ae:	f001 f8a1 	bl	80193f4 <__smakebuf_r>
 80182b2:	89a0      	ldrh	r0, [r4, #12]
 80182b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80182b8:	f010 0301 	ands.w	r3, r0, #1
 80182bc:	d00a      	beq.n	80182d4 <__swsetup_r+0xbc>
 80182be:	2300      	movs	r3, #0
 80182c0:	60a3      	str	r3, [r4, #8]
 80182c2:	6963      	ldr	r3, [r4, #20]
 80182c4:	425b      	negs	r3, r3
 80182c6:	61a3      	str	r3, [r4, #24]
 80182c8:	6923      	ldr	r3, [r4, #16]
 80182ca:	b943      	cbnz	r3, 80182de <__swsetup_r+0xc6>
 80182cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80182d0:	d1ba      	bne.n	8018248 <__swsetup_r+0x30>
 80182d2:	bd70      	pop	{r4, r5, r6, pc}
 80182d4:	0781      	lsls	r1, r0, #30
 80182d6:	bf58      	it	pl
 80182d8:	6963      	ldrpl	r3, [r4, #20]
 80182da:	60a3      	str	r3, [r4, #8]
 80182dc:	e7f4      	b.n	80182c8 <__swsetup_r+0xb0>
 80182de:	2000      	movs	r0, #0
 80182e0:	e7f7      	b.n	80182d2 <__swsetup_r+0xba>
 80182e2:	bf00      	nop
 80182e4:	20000024 	.word	0x20000024
 80182e8:	0801bc78 	.word	0x0801bc78
 80182ec:	0801bc98 	.word	0x0801bc98
 80182f0:	0801bc58 	.word	0x0801bc58

080182f4 <_close_r>:
 80182f4:	b538      	push	{r3, r4, r5, lr}
 80182f6:	4d06      	ldr	r5, [pc, #24]	; (8018310 <_close_r+0x1c>)
 80182f8:	2300      	movs	r3, #0
 80182fa:	4604      	mov	r4, r0
 80182fc:	4608      	mov	r0, r1
 80182fe:	602b      	str	r3, [r5, #0]
 8018300:	f002 fb46 	bl	801a990 <_close>
 8018304:	1c43      	adds	r3, r0, #1
 8018306:	d102      	bne.n	801830e <_close_r+0x1a>
 8018308:	682b      	ldr	r3, [r5, #0]
 801830a:	b103      	cbz	r3, 801830e <_close_r+0x1a>
 801830c:	6023      	str	r3, [r4, #0]
 801830e:	bd38      	pop	{r3, r4, r5, pc}
 8018310:	20009b30 	.word	0x20009b30

08018314 <quorem>:
 8018314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018318:	6903      	ldr	r3, [r0, #16]
 801831a:	690c      	ldr	r4, [r1, #16]
 801831c:	42a3      	cmp	r3, r4
 801831e:	4607      	mov	r7, r0
 8018320:	f2c0 8081 	blt.w	8018426 <quorem+0x112>
 8018324:	3c01      	subs	r4, #1
 8018326:	f101 0814 	add.w	r8, r1, #20
 801832a:	f100 0514 	add.w	r5, r0, #20
 801832e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018332:	9301      	str	r3, [sp, #4]
 8018334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801833c:	3301      	adds	r3, #1
 801833e:	429a      	cmp	r2, r3
 8018340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018348:	fbb2 f6f3 	udiv	r6, r2, r3
 801834c:	d331      	bcc.n	80183b2 <quorem+0x9e>
 801834e:	f04f 0e00 	mov.w	lr, #0
 8018352:	4640      	mov	r0, r8
 8018354:	46ac      	mov	ip, r5
 8018356:	46f2      	mov	sl, lr
 8018358:	f850 2b04 	ldr.w	r2, [r0], #4
 801835c:	b293      	uxth	r3, r2
 801835e:	fb06 e303 	mla	r3, r6, r3, lr
 8018362:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018366:	b29b      	uxth	r3, r3
 8018368:	ebaa 0303 	sub.w	r3, sl, r3
 801836c:	0c12      	lsrs	r2, r2, #16
 801836e:	f8dc a000 	ldr.w	sl, [ip]
 8018372:	fb06 e202 	mla	r2, r6, r2, lr
 8018376:	fa13 f38a 	uxtah	r3, r3, sl
 801837a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801837e:	fa1f fa82 	uxth.w	sl, r2
 8018382:	f8dc 2000 	ldr.w	r2, [ip]
 8018386:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801838a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801838e:	b29b      	uxth	r3, r3
 8018390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018394:	4581      	cmp	r9, r0
 8018396:	f84c 3b04 	str.w	r3, [ip], #4
 801839a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801839e:	d2db      	bcs.n	8018358 <quorem+0x44>
 80183a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80183a4:	b92b      	cbnz	r3, 80183b2 <quorem+0x9e>
 80183a6:	9b01      	ldr	r3, [sp, #4]
 80183a8:	3b04      	subs	r3, #4
 80183aa:	429d      	cmp	r5, r3
 80183ac:	461a      	mov	r2, r3
 80183ae:	d32e      	bcc.n	801840e <quorem+0xfa>
 80183b0:	613c      	str	r4, [r7, #16]
 80183b2:	4638      	mov	r0, r7
 80183b4:	f001 fb02 	bl	80199bc <__mcmp>
 80183b8:	2800      	cmp	r0, #0
 80183ba:	db24      	blt.n	8018406 <quorem+0xf2>
 80183bc:	3601      	adds	r6, #1
 80183be:	4628      	mov	r0, r5
 80183c0:	f04f 0c00 	mov.w	ip, #0
 80183c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80183c8:	f8d0 e000 	ldr.w	lr, [r0]
 80183cc:	b293      	uxth	r3, r2
 80183ce:	ebac 0303 	sub.w	r3, ip, r3
 80183d2:	0c12      	lsrs	r2, r2, #16
 80183d4:	fa13 f38e 	uxtah	r3, r3, lr
 80183d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80183dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80183e0:	b29b      	uxth	r3, r3
 80183e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80183e6:	45c1      	cmp	r9, r8
 80183e8:	f840 3b04 	str.w	r3, [r0], #4
 80183ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80183f0:	d2e8      	bcs.n	80183c4 <quorem+0xb0>
 80183f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80183f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80183fa:	b922      	cbnz	r2, 8018406 <quorem+0xf2>
 80183fc:	3b04      	subs	r3, #4
 80183fe:	429d      	cmp	r5, r3
 8018400:	461a      	mov	r2, r3
 8018402:	d30a      	bcc.n	801841a <quorem+0x106>
 8018404:	613c      	str	r4, [r7, #16]
 8018406:	4630      	mov	r0, r6
 8018408:	b003      	add	sp, #12
 801840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801840e:	6812      	ldr	r2, [r2, #0]
 8018410:	3b04      	subs	r3, #4
 8018412:	2a00      	cmp	r2, #0
 8018414:	d1cc      	bne.n	80183b0 <quorem+0x9c>
 8018416:	3c01      	subs	r4, #1
 8018418:	e7c7      	b.n	80183aa <quorem+0x96>
 801841a:	6812      	ldr	r2, [r2, #0]
 801841c:	3b04      	subs	r3, #4
 801841e:	2a00      	cmp	r2, #0
 8018420:	d1f0      	bne.n	8018404 <quorem+0xf0>
 8018422:	3c01      	subs	r4, #1
 8018424:	e7eb      	b.n	80183fe <quorem+0xea>
 8018426:	2000      	movs	r0, #0
 8018428:	e7ee      	b.n	8018408 <quorem+0xf4>
 801842a:	0000      	movs	r0, r0
 801842c:	0000      	movs	r0, r0
	...

08018430 <_dtoa_r>:
 8018430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018434:	ed2d 8b02 	vpush	{d8}
 8018438:	ec57 6b10 	vmov	r6, r7, d0
 801843c:	b095      	sub	sp, #84	; 0x54
 801843e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018444:	9105      	str	r1, [sp, #20]
 8018446:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801844a:	4604      	mov	r4, r0
 801844c:	9209      	str	r2, [sp, #36]	; 0x24
 801844e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018450:	b975      	cbnz	r5, 8018470 <_dtoa_r+0x40>
 8018452:	2010      	movs	r0, #16
 8018454:	f7fe ff28 	bl	80172a8 <malloc>
 8018458:	4602      	mov	r2, r0
 801845a:	6260      	str	r0, [r4, #36]	; 0x24
 801845c:	b920      	cbnz	r0, 8018468 <_dtoa_r+0x38>
 801845e:	4bb2      	ldr	r3, [pc, #712]	; (8018728 <_dtoa_r+0x2f8>)
 8018460:	21ea      	movs	r1, #234	; 0xea
 8018462:	48b2      	ldr	r0, [pc, #712]	; (801872c <_dtoa_r+0x2fc>)
 8018464:	f002 f9e2 	bl	801a82c <__assert_func>
 8018468:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801846c:	6005      	str	r5, [r0, #0]
 801846e:	60c5      	str	r5, [r0, #12]
 8018470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018472:	6819      	ldr	r1, [r3, #0]
 8018474:	b151      	cbz	r1, 801848c <_dtoa_r+0x5c>
 8018476:	685a      	ldr	r2, [r3, #4]
 8018478:	604a      	str	r2, [r1, #4]
 801847a:	2301      	movs	r3, #1
 801847c:	4093      	lsls	r3, r2
 801847e:	608b      	str	r3, [r1, #8]
 8018480:	4620      	mov	r0, r4
 8018482:	f001 f85d 	bl	8019540 <_Bfree>
 8018486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018488:	2200      	movs	r2, #0
 801848a:	601a      	str	r2, [r3, #0]
 801848c:	1e3b      	subs	r3, r7, #0
 801848e:	bfb9      	ittee	lt
 8018490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018494:	9303      	strlt	r3, [sp, #12]
 8018496:	2300      	movge	r3, #0
 8018498:	f8c8 3000 	strge.w	r3, [r8]
 801849c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80184a0:	4ba3      	ldr	r3, [pc, #652]	; (8018730 <_dtoa_r+0x300>)
 80184a2:	bfbc      	itt	lt
 80184a4:	2201      	movlt	r2, #1
 80184a6:	f8c8 2000 	strlt.w	r2, [r8]
 80184aa:	ea33 0309 	bics.w	r3, r3, r9
 80184ae:	d11b      	bne.n	80184e8 <_dtoa_r+0xb8>
 80184b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80184b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80184b6:	6013      	str	r3, [r2, #0]
 80184b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80184bc:	4333      	orrs	r3, r6
 80184be:	f000 857a 	beq.w	8018fb6 <_dtoa_r+0xb86>
 80184c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184c4:	b963      	cbnz	r3, 80184e0 <_dtoa_r+0xb0>
 80184c6:	4b9b      	ldr	r3, [pc, #620]	; (8018734 <_dtoa_r+0x304>)
 80184c8:	e024      	b.n	8018514 <_dtoa_r+0xe4>
 80184ca:	4b9b      	ldr	r3, [pc, #620]	; (8018738 <_dtoa_r+0x308>)
 80184cc:	9300      	str	r3, [sp, #0]
 80184ce:	3308      	adds	r3, #8
 80184d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80184d2:	6013      	str	r3, [r2, #0]
 80184d4:	9800      	ldr	r0, [sp, #0]
 80184d6:	b015      	add	sp, #84	; 0x54
 80184d8:	ecbd 8b02 	vpop	{d8}
 80184dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184e0:	4b94      	ldr	r3, [pc, #592]	; (8018734 <_dtoa_r+0x304>)
 80184e2:	9300      	str	r3, [sp, #0]
 80184e4:	3303      	adds	r3, #3
 80184e6:	e7f3      	b.n	80184d0 <_dtoa_r+0xa0>
 80184e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80184ec:	2200      	movs	r2, #0
 80184ee:	ec51 0b17 	vmov	r0, r1, d7
 80184f2:	2300      	movs	r3, #0
 80184f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80184f8:	f7e8 faf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80184fc:	4680      	mov	r8, r0
 80184fe:	b158      	cbz	r0, 8018518 <_dtoa_r+0xe8>
 8018500:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018502:	2301      	movs	r3, #1
 8018504:	6013      	str	r3, [r2, #0]
 8018506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018508:	2b00      	cmp	r3, #0
 801850a:	f000 8551 	beq.w	8018fb0 <_dtoa_r+0xb80>
 801850e:	488b      	ldr	r0, [pc, #556]	; (801873c <_dtoa_r+0x30c>)
 8018510:	6018      	str	r0, [r3, #0]
 8018512:	1e43      	subs	r3, r0, #1
 8018514:	9300      	str	r3, [sp, #0]
 8018516:	e7dd      	b.n	80184d4 <_dtoa_r+0xa4>
 8018518:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801851c:	aa12      	add	r2, sp, #72	; 0x48
 801851e:	a913      	add	r1, sp, #76	; 0x4c
 8018520:	4620      	mov	r0, r4
 8018522:	f001 faef 	bl	8019b04 <__d2b>
 8018526:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801852a:	4683      	mov	fp, r0
 801852c:	2d00      	cmp	r5, #0
 801852e:	d07c      	beq.n	801862a <_dtoa_r+0x1fa>
 8018530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018532:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801853a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801853e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018542:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801854a:	4b7d      	ldr	r3, [pc, #500]	; (8018740 <_dtoa_r+0x310>)
 801854c:	2200      	movs	r2, #0
 801854e:	4630      	mov	r0, r6
 8018550:	4639      	mov	r1, r7
 8018552:	f7e7 fea9 	bl	80002a8 <__aeabi_dsub>
 8018556:	a36e      	add	r3, pc, #440	; (adr r3, 8018710 <_dtoa_r+0x2e0>)
 8018558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801855c:	f7e8 f85c 	bl	8000618 <__aeabi_dmul>
 8018560:	a36d      	add	r3, pc, #436	; (adr r3, 8018718 <_dtoa_r+0x2e8>)
 8018562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018566:	f7e7 fea1 	bl	80002ac <__adddf3>
 801856a:	4606      	mov	r6, r0
 801856c:	4628      	mov	r0, r5
 801856e:	460f      	mov	r7, r1
 8018570:	f7e7 ffe8 	bl	8000544 <__aeabi_i2d>
 8018574:	a36a      	add	r3, pc, #424	; (adr r3, 8018720 <_dtoa_r+0x2f0>)
 8018576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801857a:	f7e8 f84d 	bl	8000618 <__aeabi_dmul>
 801857e:	4602      	mov	r2, r0
 8018580:	460b      	mov	r3, r1
 8018582:	4630      	mov	r0, r6
 8018584:	4639      	mov	r1, r7
 8018586:	f7e7 fe91 	bl	80002ac <__adddf3>
 801858a:	4606      	mov	r6, r0
 801858c:	460f      	mov	r7, r1
 801858e:	f7e8 faf3 	bl	8000b78 <__aeabi_d2iz>
 8018592:	2200      	movs	r2, #0
 8018594:	4682      	mov	sl, r0
 8018596:	2300      	movs	r3, #0
 8018598:	4630      	mov	r0, r6
 801859a:	4639      	mov	r1, r7
 801859c:	f7e8 faae 	bl	8000afc <__aeabi_dcmplt>
 80185a0:	b148      	cbz	r0, 80185b6 <_dtoa_r+0x186>
 80185a2:	4650      	mov	r0, sl
 80185a4:	f7e7 ffce 	bl	8000544 <__aeabi_i2d>
 80185a8:	4632      	mov	r2, r6
 80185aa:	463b      	mov	r3, r7
 80185ac:	f7e8 fa9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80185b0:	b908      	cbnz	r0, 80185b6 <_dtoa_r+0x186>
 80185b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80185b6:	f1ba 0f16 	cmp.w	sl, #22
 80185ba:	d854      	bhi.n	8018666 <_dtoa_r+0x236>
 80185bc:	4b61      	ldr	r3, [pc, #388]	; (8018744 <_dtoa_r+0x314>)
 80185be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80185c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80185ca:	f7e8 fa97 	bl	8000afc <__aeabi_dcmplt>
 80185ce:	2800      	cmp	r0, #0
 80185d0:	d04b      	beq.n	801866a <_dtoa_r+0x23a>
 80185d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80185d6:	2300      	movs	r3, #0
 80185d8:	930e      	str	r3, [sp, #56]	; 0x38
 80185da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80185dc:	1b5d      	subs	r5, r3, r5
 80185de:	1e6b      	subs	r3, r5, #1
 80185e0:	9304      	str	r3, [sp, #16]
 80185e2:	bf43      	ittte	mi
 80185e4:	2300      	movmi	r3, #0
 80185e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80185ea:	9304      	strmi	r3, [sp, #16]
 80185ec:	f04f 0800 	movpl.w	r8, #0
 80185f0:	f1ba 0f00 	cmp.w	sl, #0
 80185f4:	db3b      	blt.n	801866e <_dtoa_r+0x23e>
 80185f6:	9b04      	ldr	r3, [sp, #16]
 80185f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80185fc:	4453      	add	r3, sl
 80185fe:	9304      	str	r3, [sp, #16]
 8018600:	2300      	movs	r3, #0
 8018602:	9306      	str	r3, [sp, #24]
 8018604:	9b05      	ldr	r3, [sp, #20]
 8018606:	2b09      	cmp	r3, #9
 8018608:	d869      	bhi.n	80186de <_dtoa_r+0x2ae>
 801860a:	2b05      	cmp	r3, #5
 801860c:	bfc4      	itt	gt
 801860e:	3b04      	subgt	r3, #4
 8018610:	9305      	strgt	r3, [sp, #20]
 8018612:	9b05      	ldr	r3, [sp, #20]
 8018614:	f1a3 0302 	sub.w	r3, r3, #2
 8018618:	bfcc      	ite	gt
 801861a:	2500      	movgt	r5, #0
 801861c:	2501      	movle	r5, #1
 801861e:	2b03      	cmp	r3, #3
 8018620:	d869      	bhi.n	80186f6 <_dtoa_r+0x2c6>
 8018622:	e8df f003 	tbb	[pc, r3]
 8018626:	4e2c      	.short	0x4e2c
 8018628:	5a4c      	.short	0x5a4c
 801862a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801862e:	441d      	add	r5, r3
 8018630:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018634:	2b20      	cmp	r3, #32
 8018636:	bfc1      	itttt	gt
 8018638:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801863c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018640:	fa09 f303 	lslgt.w	r3, r9, r3
 8018644:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018648:	bfda      	itte	le
 801864a:	f1c3 0320 	rsble	r3, r3, #32
 801864e:	fa06 f003 	lslle.w	r0, r6, r3
 8018652:	4318      	orrgt	r0, r3
 8018654:	f7e7 ff66 	bl	8000524 <__aeabi_ui2d>
 8018658:	2301      	movs	r3, #1
 801865a:	4606      	mov	r6, r0
 801865c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018660:	3d01      	subs	r5, #1
 8018662:	9310      	str	r3, [sp, #64]	; 0x40
 8018664:	e771      	b.n	801854a <_dtoa_r+0x11a>
 8018666:	2301      	movs	r3, #1
 8018668:	e7b6      	b.n	80185d8 <_dtoa_r+0x1a8>
 801866a:	900e      	str	r0, [sp, #56]	; 0x38
 801866c:	e7b5      	b.n	80185da <_dtoa_r+0x1aa>
 801866e:	f1ca 0300 	rsb	r3, sl, #0
 8018672:	9306      	str	r3, [sp, #24]
 8018674:	2300      	movs	r3, #0
 8018676:	eba8 080a 	sub.w	r8, r8, sl
 801867a:	930d      	str	r3, [sp, #52]	; 0x34
 801867c:	e7c2      	b.n	8018604 <_dtoa_r+0x1d4>
 801867e:	2300      	movs	r3, #0
 8018680:	9308      	str	r3, [sp, #32]
 8018682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018684:	2b00      	cmp	r3, #0
 8018686:	dc39      	bgt.n	80186fc <_dtoa_r+0x2cc>
 8018688:	f04f 0901 	mov.w	r9, #1
 801868c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018690:	464b      	mov	r3, r9
 8018692:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018696:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018698:	2200      	movs	r2, #0
 801869a:	6042      	str	r2, [r0, #4]
 801869c:	2204      	movs	r2, #4
 801869e:	f102 0614 	add.w	r6, r2, #20
 80186a2:	429e      	cmp	r6, r3
 80186a4:	6841      	ldr	r1, [r0, #4]
 80186a6:	d92f      	bls.n	8018708 <_dtoa_r+0x2d8>
 80186a8:	4620      	mov	r0, r4
 80186aa:	f000 ff09 	bl	80194c0 <_Balloc>
 80186ae:	9000      	str	r0, [sp, #0]
 80186b0:	2800      	cmp	r0, #0
 80186b2:	d14b      	bne.n	801874c <_dtoa_r+0x31c>
 80186b4:	4b24      	ldr	r3, [pc, #144]	; (8018748 <_dtoa_r+0x318>)
 80186b6:	4602      	mov	r2, r0
 80186b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80186bc:	e6d1      	b.n	8018462 <_dtoa_r+0x32>
 80186be:	2301      	movs	r3, #1
 80186c0:	e7de      	b.n	8018680 <_dtoa_r+0x250>
 80186c2:	2300      	movs	r3, #0
 80186c4:	9308      	str	r3, [sp, #32]
 80186c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186c8:	eb0a 0903 	add.w	r9, sl, r3
 80186cc:	f109 0301 	add.w	r3, r9, #1
 80186d0:	2b01      	cmp	r3, #1
 80186d2:	9301      	str	r3, [sp, #4]
 80186d4:	bfb8      	it	lt
 80186d6:	2301      	movlt	r3, #1
 80186d8:	e7dd      	b.n	8018696 <_dtoa_r+0x266>
 80186da:	2301      	movs	r3, #1
 80186dc:	e7f2      	b.n	80186c4 <_dtoa_r+0x294>
 80186de:	2501      	movs	r5, #1
 80186e0:	2300      	movs	r3, #0
 80186e2:	9305      	str	r3, [sp, #20]
 80186e4:	9508      	str	r5, [sp, #32]
 80186e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80186ea:	2200      	movs	r2, #0
 80186ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80186f0:	2312      	movs	r3, #18
 80186f2:	9209      	str	r2, [sp, #36]	; 0x24
 80186f4:	e7cf      	b.n	8018696 <_dtoa_r+0x266>
 80186f6:	2301      	movs	r3, #1
 80186f8:	9308      	str	r3, [sp, #32]
 80186fa:	e7f4      	b.n	80186e6 <_dtoa_r+0x2b6>
 80186fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018700:	f8cd 9004 	str.w	r9, [sp, #4]
 8018704:	464b      	mov	r3, r9
 8018706:	e7c6      	b.n	8018696 <_dtoa_r+0x266>
 8018708:	3101      	adds	r1, #1
 801870a:	6041      	str	r1, [r0, #4]
 801870c:	0052      	lsls	r2, r2, #1
 801870e:	e7c6      	b.n	801869e <_dtoa_r+0x26e>
 8018710:	636f4361 	.word	0x636f4361
 8018714:	3fd287a7 	.word	0x3fd287a7
 8018718:	8b60c8b3 	.word	0x8b60c8b3
 801871c:	3fc68a28 	.word	0x3fc68a28
 8018720:	509f79fb 	.word	0x509f79fb
 8018724:	3fd34413 	.word	0x3fd34413
 8018728:	0801bbd0 	.word	0x0801bbd0
 801872c:	0801bbe7 	.word	0x0801bbe7
 8018730:	7ff00000 	.word	0x7ff00000
 8018734:	0801bbcc 	.word	0x0801bbcc
 8018738:	0801bbc3 	.word	0x0801bbc3
 801873c:	0801be19 	.word	0x0801be19
 8018740:	3ff80000 	.word	0x3ff80000
 8018744:	0801bd40 	.word	0x0801bd40
 8018748:	0801bc46 	.word	0x0801bc46
 801874c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801874e:	9a00      	ldr	r2, [sp, #0]
 8018750:	601a      	str	r2, [r3, #0]
 8018752:	9b01      	ldr	r3, [sp, #4]
 8018754:	2b0e      	cmp	r3, #14
 8018756:	f200 80ad 	bhi.w	80188b4 <_dtoa_r+0x484>
 801875a:	2d00      	cmp	r5, #0
 801875c:	f000 80aa 	beq.w	80188b4 <_dtoa_r+0x484>
 8018760:	f1ba 0f00 	cmp.w	sl, #0
 8018764:	dd36      	ble.n	80187d4 <_dtoa_r+0x3a4>
 8018766:	4ac3      	ldr	r2, [pc, #780]	; (8018a74 <_dtoa_r+0x644>)
 8018768:	f00a 030f 	and.w	r3, sl, #15
 801876c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018770:	ed93 7b00 	vldr	d7, [r3]
 8018774:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018778:	ea4f 172a 	mov.w	r7, sl, asr #4
 801877c:	eeb0 8a47 	vmov.f32	s16, s14
 8018780:	eef0 8a67 	vmov.f32	s17, s15
 8018784:	d016      	beq.n	80187b4 <_dtoa_r+0x384>
 8018786:	4bbc      	ldr	r3, [pc, #752]	; (8018a78 <_dtoa_r+0x648>)
 8018788:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801878c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018790:	f7e8 f86c 	bl	800086c <__aeabi_ddiv>
 8018794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018798:	f007 070f 	and.w	r7, r7, #15
 801879c:	2503      	movs	r5, #3
 801879e:	4eb6      	ldr	r6, [pc, #728]	; (8018a78 <_dtoa_r+0x648>)
 80187a0:	b957      	cbnz	r7, 80187b8 <_dtoa_r+0x388>
 80187a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80187a6:	ec53 2b18 	vmov	r2, r3, d8
 80187aa:	f7e8 f85f 	bl	800086c <__aeabi_ddiv>
 80187ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80187b2:	e029      	b.n	8018808 <_dtoa_r+0x3d8>
 80187b4:	2502      	movs	r5, #2
 80187b6:	e7f2      	b.n	801879e <_dtoa_r+0x36e>
 80187b8:	07f9      	lsls	r1, r7, #31
 80187ba:	d508      	bpl.n	80187ce <_dtoa_r+0x39e>
 80187bc:	ec51 0b18 	vmov	r0, r1, d8
 80187c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80187c4:	f7e7 ff28 	bl	8000618 <__aeabi_dmul>
 80187c8:	ec41 0b18 	vmov	d8, r0, r1
 80187cc:	3501      	adds	r5, #1
 80187ce:	107f      	asrs	r7, r7, #1
 80187d0:	3608      	adds	r6, #8
 80187d2:	e7e5      	b.n	80187a0 <_dtoa_r+0x370>
 80187d4:	f000 80a6 	beq.w	8018924 <_dtoa_r+0x4f4>
 80187d8:	f1ca 0600 	rsb	r6, sl, #0
 80187dc:	4ba5      	ldr	r3, [pc, #660]	; (8018a74 <_dtoa_r+0x644>)
 80187de:	4fa6      	ldr	r7, [pc, #664]	; (8018a78 <_dtoa_r+0x648>)
 80187e0:	f006 020f 	and.w	r2, r6, #15
 80187e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80187e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80187f0:	f7e7 ff12 	bl	8000618 <__aeabi_dmul>
 80187f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80187f8:	1136      	asrs	r6, r6, #4
 80187fa:	2300      	movs	r3, #0
 80187fc:	2502      	movs	r5, #2
 80187fe:	2e00      	cmp	r6, #0
 8018800:	f040 8085 	bne.w	801890e <_dtoa_r+0x4de>
 8018804:	2b00      	cmp	r3, #0
 8018806:	d1d2      	bne.n	80187ae <_dtoa_r+0x37e>
 8018808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801880a:	2b00      	cmp	r3, #0
 801880c:	f000 808c 	beq.w	8018928 <_dtoa_r+0x4f8>
 8018810:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018814:	4b99      	ldr	r3, [pc, #612]	; (8018a7c <_dtoa_r+0x64c>)
 8018816:	2200      	movs	r2, #0
 8018818:	4630      	mov	r0, r6
 801881a:	4639      	mov	r1, r7
 801881c:	f7e8 f96e 	bl	8000afc <__aeabi_dcmplt>
 8018820:	2800      	cmp	r0, #0
 8018822:	f000 8081 	beq.w	8018928 <_dtoa_r+0x4f8>
 8018826:	9b01      	ldr	r3, [sp, #4]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d07d      	beq.n	8018928 <_dtoa_r+0x4f8>
 801882c:	f1b9 0f00 	cmp.w	r9, #0
 8018830:	dd3c      	ble.n	80188ac <_dtoa_r+0x47c>
 8018832:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8018836:	9307      	str	r3, [sp, #28]
 8018838:	2200      	movs	r2, #0
 801883a:	4b91      	ldr	r3, [pc, #580]	; (8018a80 <_dtoa_r+0x650>)
 801883c:	4630      	mov	r0, r6
 801883e:	4639      	mov	r1, r7
 8018840:	f7e7 feea 	bl	8000618 <__aeabi_dmul>
 8018844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018848:	3501      	adds	r5, #1
 801884a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801884e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018852:	4628      	mov	r0, r5
 8018854:	f7e7 fe76 	bl	8000544 <__aeabi_i2d>
 8018858:	4632      	mov	r2, r6
 801885a:	463b      	mov	r3, r7
 801885c:	f7e7 fedc 	bl	8000618 <__aeabi_dmul>
 8018860:	4b88      	ldr	r3, [pc, #544]	; (8018a84 <_dtoa_r+0x654>)
 8018862:	2200      	movs	r2, #0
 8018864:	f7e7 fd22 	bl	80002ac <__adddf3>
 8018868:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801886c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018870:	9303      	str	r3, [sp, #12]
 8018872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018874:	2b00      	cmp	r3, #0
 8018876:	d15c      	bne.n	8018932 <_dtoa_r+0x502>
 8018878:	4b83      	ldr	r3, [pc, #524]	; (8018a88 <_dtoa_r+0x658>)
 801887a:	2200      	movs	r2, #0
 801887c:	4630      	mov	r0, r6
 801887e:	4639      	mov	r1, r7
 8018880:	f7e7 fd12 	bl	80002a8 <__aeabi_dsub>
 8018884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018888:	4606      	mov	r6, r0
 801888a:	460f      	mov	r7, r1
 801888c:	f7e8 f954 	bl	8000b38 <__aeabi_dcmpgt>
 8018890:	2800      	cmp	r0, #0
 8018892:	f040 8296 	bne.w	8018dc2 <_dtoa_r+0x992>
 8018896:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801889a:	4630      	mov	r0, r6
 801889c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80188a0:	4639      	mov	r1, r7
 80188a2:	f7e8 f92b 	bl	8000afc <__aeabi_dcmplt>
 80188a6:	2800      	cmp	r0, #0
 80188a8:	f040 8288 	bne.w	8018dbc <_dtoa_r+0x98c>
 80188ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80188b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80188b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	f2c0 8158 	blt.w	8018b6c <_dtoa_r+0x73c>
 80188bc:	f1ba 0f0e 	cmp.w	sl, #14
 80188c0:	f300 8154 	bgt.w	8018b6c <_dtoa_r+0x73c>
 80188c4:	4b6b      	ldr	r3, [pc, #428]	; (8018a74 <_dtoa_r+0x644>)
 80188c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80188ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80188ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	f280 80e3 	bge.w	8018a9c <_dtoa_r+0x66c>
 80188d6:	9b01      	ldr	r3, [sp, #4]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	f300 80df 	bgt.w	8018a9c <_dtoa_r+0x66c>
 80188de:	f040 826d 	bne.w	8018dbc <_dtoa_r+0x98c>
 80188e2:	4b69      	ldr	r3, [pc, #420]	; (8018a88 <_dtoa_r+0x658>)
 80188e4:	2200      	movs	r2, #0
 80188e6:	4640      	mov	r0, r8
 80188e8:	4649      	mov	r1, r9
 80188ea:	f7e7 fe95 	bl	8000618 <__aeabi_dmul>
 80188ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80188f2:	f7e8 f917 	bl	8000b24 <__aeabi_dcmpge>
 80188f6:	9e01      	ldr	r6, [sp, #4]
 80188f8:	4637      	mov	r7, r6
 80188fa:	2800      	cmp	r0, #0
 80188fc:	f040 8243 	bne.w	8018d86 <_dtoa_r+0x956>
 8018900:	9d00      	ldr	r5, [sp, #0]
 8018902:	2331      	movs	r3, #49	; 0x31
 8018904:	f805 3b01 	strb.w	r3, [r5], #1
 8018908:	f10a 0a01 	add.w	sl, sl, #1
 801890c:	e23f      	b.n	8018d8e <_dtoa_r+0x95e>
 801890e:	07f2      	lsls	r2, r6, #31
 8018910:	d505      	bpl.n	801891e <_dtoa_r+0x4ee>
 8018912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018916:	f7e7 fe7f 	bl	8000618 <__aeabi_dmul>
 801891a:	3501      	adds	r5, #1
 801891c:	2301      	movs	r3, #1
 801891e:	1076      	asrs	r6, r6, #1
 8018920:	3708      	adds	r7, #8
 8018922:	e76c      	b.n	80187fe <_dtoa_r+0x3ce>
 8018924:	2502      	movs	r5, #2
 8018926:	e76f      	b.n	8018808 <_dtoa_r+0x3d8>
 8018928:	9b01      	ldr	r3, [sp, #4]
 801892a:	f8cd a01c 	str.w	sl, [sp, #28]
 801892e:	930c      	str	r3, [sp, #48]	; 0x30
 8018930:	e78d      	b.n	801884e <_dtoa_r+0x41e>
 8018932:	9900      	ldr	r1, [sp, #0]
 8018934:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018938:	4b4e      	ldr	r3, [pc, #312]	; (8018a74 <_dtoa_r+0x644>)
 801893a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801893e:	4401      	add	r1, r0
 8018940:	9102      	str	r1, [sp, #8]
 8018942:	9908      	ldr	r1, [sp, #32]
 8018944:	eeb0 8a47 	vmov.f32	s16, s14
 8018948:	eef0 8a67 	vmov.f32	s17, s15
 801894c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018950:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018954:	2900      	cmp	r1, #0
 8018956:	d045      	beq.n	80189e4 <_dtoa_r+0x5b4>
 8018958:	494c      	ldr	r1, [pc, #304]	; (8018a8c <_dtoa_r+0x65c>)
 801895a:	2000      	movs	r0, #0
 801895c:	f7e7 ff86 	bl	800086c <__aeabi_ddiv>
 8018960:	ec53 2b18 	vmov	r2, r3, d8
 8018964:	f7e7 fca0 	bl	80002a8 <__aeabi_dsub>
 8018968:	9d00      	ldr	r5, [sp, #0]
 801896a:	ec41 0b18 	vmov	d8, r0, r1
 801896e:	4639      	mov	r1, r7
 8018970:	4630      	mov	r0, r6
 8018972:	f7e8 f901 	bl	8000b78 <__aeabi_d2iz>
 8018976:	900c      	str	r0, [sp, #48]	; 0x30
 8018978:	f7e7 fde4 	bl	8000544 <__aeabi_i2d>
 801897c:	4602      	mov	r2, r0
 801897e:	460b      	mov	r3, r1
 8018980:	4630      	mov	r0, r6
 8018982:	4639      	mov	r1, r7
 8018984:	f7e7 fc90 	bl	80002a8 <__aeabi_dsub>
 8018988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801898a:	3330      	adds	r3, #48	; 0x30
 801898c:	f805 3b01 	strb.w	r3, [r5], #1
 8018990:	ec53 2b18 	vmov	r2, r3, d8
 8018994:	4606      	mov	r6, r0
 8018996:	460f      	mov	r7, r1
 8018998:	f7e8 f8b0 	bl	8000afc <__aeabi_dcmplt>
 801899c:	2800      	cmp	r0, #0
 801899e:	d165      	bne.n	8018a6c <_dtoa_r+0x63c>
 80189a0:	4632      	mov	r2, r6
 80189a2:	463b      	mov	r3, r7
 80189a4:	4935      	ldr	r1, [pc, #212]	; (8018a7c <_dtoa_r+0x64c>)
 80189a6:	2000      	movs	r0, #0
 80189a8:	f7e7 fc7e 	bl	80002a8 <__aeabi_dsub>
 80189ac:	ec53 2b18 	vmov	r2, r3, d8
 80189b0:	f7e8 f8a4 	bl	8000afc <__aeabi_dcmplt>
 80189b4:	2800      	cmp	r0, #0
 80189b6:	f040 80b9 	bne.w	8018b2c <_dtoa_r+0x6fc>
 80189ba:	9b02      	ldr	r3, [sp, #8]
 80189bc:	429d      	cmp	r5, r3
 80189be:	f43f af75 	beq.w	80188ac <_dtoa_r+0x47c>
 80189c2:	4b2f      	ldr	r3, [pc, #188]	; (8018a80 <_dtoa_r+0x650>)
 80189c4:	ec51 0b18 	vmov	r0, r1, d8
 80189c8:	2200      	movs	r2, #0
 80189ca:	f7e7 fe25 	bl	8000618 <__aeabi_dmul>
 80189ce:	4b2c      	ldr	r3, [pc, #176]	; (8018a80 <_dtoa_r+0x650>)
 80189d0:	ec41 0b18 	vmov	d8, r0, r1
 80189d4:	2200      	movs	r2, #0
 80189d6:	4630      	mov	r0, r6
 80189d8:	4639      	mov	r1, r7
 80189da:	f7e7 fe1d 	bl	8000618 <__aeabi_dmul>
 80189de:	4606      	mov	r6, r0
 80189e0:	460f      	mov	r7, r1
 80189e2:	e7c4      	b.n	801896e <_dtoa_r+0x53e>
 80189e4:	ec51 0b17 	vmov	r0, r1, d7
 80189e8:	f7e7 fe16 	bl	8000618 <__aeabi_dmul>
 80189ec:	9b02      	ldr	r3, [sp, #8]
 80189ee:	9d00      	ldr	r5, [sp, #0]
 80189f0:	930c      	str	r3, [sp, #48]	; 0x30
 80189f2:	ec41 0b18 	vmov	d8, r0, r1
 80189f6:	4639      	mov	r1, r7
 80189f8:	4630      	mov	r0, r6
 80189fa:	f7e8 f8bd 	bl	8000b78 <__aeabi_d2iz>
 80189fe:	9011      	str	r0, [sp, #68]	; 0x44
 8018a00:	f7e7 fda0 	bl	8000544 <__aeabi_i2d>
 8018a04:	4602      	mov	r2, r0
 8018a06:	460b      	mov	r3, r1
 8018a08:	4630      	mov	r0, r6
 8018a0a:	4639      	mov	r1, r7
 8018a0c:	f7e7 fc4c 	bl	80002a8 <__aeabi_dsub>
 8018a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018a12:	3330      	adds	r3, #48	; 0x30
 8018a14:	f805 3b01 	strb.w	r3, [r5], #1
 8018a18:	9b02      	ldr	r3, [sp, #8]
 8018a1a:	429d      	cmp	r5, r3
 8018a1c:	4606      	mov	r6, r0
 8018a1e:	460f      	mov	r7, r1
 8018a20:	f04f 0200 	mov.w	r2, #0
 8018a24:	d134      	bne.n	8018a90 <_dtoa_r+0x660>
 8018a26:	4b19      	ldr	r3, [pc, #100]	; (8018a8c <_dtoa_r+0x65c>)
 8018a28:	ec51 0b18 	vmov	r0, r1, d8
 8018a2c:	f7e7 fc3e 	bl	80002ac <__adddf3>
 8018a30:	4602      	mov	r2, r0
 8018a32:	460b      	mov	r3, r1
 8018a34:	4630      	mov	r0, r6
 8018a36:	4639      	mov	r1, r7
 8018a38:	f7e8 f87e 	bl	8000b38 <__aeabi_dcmpgt>
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	d175      	bne.n	8018b2c <_dtoa_r+0x6fc>
 8018a40:	ec53 2b18 	vmov	r2, r3, d8
 8018a44:	4911      	ldr	r1, [pc, #68]	; (8018a8c <_dtoa_r+0x65c>)
 8018a46:	2000      	movs	r0, #0
 8018a48:	f7e7 fc2e 	bl	80002a8 <__aeabi_dsub>
 8018a4c:	4602      	mov	r2, r0
 8018a4e:	460b      	mov	r3, r1
 8018a50:	4630      	mov	r0, r6
 8018a52:	4639      	mov	r1, r7
 8018a54:	f7e8 f852 	bl	8000afc <__aeabi_dcmplt>
 8018a58:	2800      	cmp	r0, #0
 8018a5a:	f43f af27 	beq.w	80188ac <_dtoa_r+0x47c>
 8018a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018a60:	1e6b      	subs	r3, r5, #1
 8018a62:	930c      	str	r3, [sp, #48]	; 0x30
 8018a64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018a68:	2b30      	cmp	r3, #48	; 0x30
 8018a6a:	d0f8      	beq.n	8018a5e <_dtoa_r+0x62e>
 8018a6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018a70:	e04a      	b.n	8018b08 <_dtoa_r+0x6d8>
 8018a72:	bf00      	nop
 8018a74:	0801bd40 	.word	0x0801bd40
 8018a78:	0801bd18 	.word	0x0801bd18
 8018a7c:	3ff00000 	.word	0x3ff00000
 8018a80:	40240000 	.word	0x40240000
 8018a84:	401c0000 	.word	0x401c0000
 8018a88:	40140000 	.word	0x40140000
 8018a8c:	3fe00000 	.word	0x3fe00000
 8018a90:	4baf      	ldr	r3, [pc, #700]	; (8018d50 <_dtoa_r+0x920>)
 8018a92:	f7e7 fdc1 	bl	8000618 <__aeabi_dmul>
 8018a96:	4606      	mov	r6, r0
 8018a98:	460f      	mov	r7, r1
 8018a9a:	e7ac      	b.n	80189f6 <_dtoa_r+0x5c6>
 8018a9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018aa0:	9d00      	ldr	r5, [sp, #0]
 8018aa2:	4642      	mov	r2, r8
 8018aa4:	464b      	mov	r3, r9
 8018aa6:	4630      	mov	r0, r6
 8018aa8:	4639      	mov	r1, r7
 8018aaa:	f7e7 fedf 	bl	800086c <__aeabi_ddiv>
 8018aae:	f7e8 f863 	bl	8000b78 <__aeabi_d2iz>
 8018ab2:	9002      	str	r0, [sp, #8]
 8018ab4:	f7e7 fd46 	bl	8000544 <__aeabi_i2d>
 8018ab8:	4642      	mov	r2, r8
 8018aba:	464b      	mov	r3, r9
 8018abc:	f7e7 fdac 	bl	8000618 <__aeabi_dmul>
 8018ac0:	4602      	mov	r2, r0
 8018ac2:	460b      	mov	r3, r1
 8018ac4:	4630      	mov	r0, r6
 8018ac6:	4639      	mov	r1, r7
 8018ac8:	f7e7 fbee 	bl	80002a8 <__aeabi_dsub>
 8018acc:	9e02      	ldr	r6, [sp, #8]
 8018ace:	9f01      	ldr	r7, [sp, #4]
 8018ad0:	3630      	adds	r6, #48	; 0x30
 8018ad2:	f805 6b01 	strb.w	r6, [r5], #1
 8018ad6:	9e00      	ldr	r6, [sp, #0]
 8018ad8:	1bae      	subs	r6, r5, r6
 8018ada:	42b7      	cmp	r7, r6
 8018adc:	4602      	mov	r2, r0
 8018ade:	460b      	mov	r3, r1
 8018ae0:	d137      	bne.n	8018b52 <_dtoa_r+0x722>
 8018ae2:	f7e7 fbe3 	bl	80002ac <__adddf3>
 8018ae6:	4642      	mov	r2, r8
 8018ae8:	464b      	mov	r3, r9
 8018aea:	4606      	mov	r6, r0
 8018aec:	460f      	mov	r7, r1
 8018aee:	f7e8 f823 	bl	8000b38 <__aeabi_dcmpgt>
 8018af2:	b9c8      	cbnz	r0, 8018b28 <_dtoa_r+0x6f8>
 8018af4:	4642      	mov	r2, r8
 8018af6:	464b      	mov	r3, r9
 8018af8:	4630      	mov	r0, r6
 8018afa:	4639      	mov	r1, r7
 8018afc:	f7e7 fff4 	bl	8000ae8 <__aeabi_dcmpeq>
 8018b00:	b110      	cbz	r0, 8018b08 <_dtoa_r+0x6d8>
 8018b02:	9b02      	ldr	r3, [sp, #8]
 8018b04:	07d9      	lsls	r1, r3, #31
 8018b06:	d40f      	bmi.n	8018b28 <_dtoa_r+0x6f8>
 8018b08:	4620      	mov	r0, r4
 8018b0a:	4659      	mov	r1, fp
 8018b0c:	f000 fd18 	bl	8019540 <_Bfree>
 8018b10:	2300      	movs	r3, #0
 8018b12:	702b      	strb	r3, [r5, #0]
 8018b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b16:	f10a 0001 	add.w	r0, sl, #1
 8018b1a:	6018      	str	r0, [r3, #0]
 8018b1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	f43f acd8 	beq.w	80184d4 <_dtoa_r+0xa4>
 8018b24:	601d      	str	r5, [r3, #0]
 8018b26:	e4d5      	b.n	80184d4 <_dtoa_r+0xa4>
 8018b28:	f8cd a01c 	str.w	sl, [sp, #28]
 8018b2c:	462b      	mov	r3, r5
 8018b2e:	461d      	mov	r5, r3
 8018b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018b34:	2a39      	cmp	r2, #57	; 0x39
 8018b36:	d108      	bne.n	8018b4a <_dtoa_r+0x71a>
 8018b38:	9a00      	ldr	r2, [sp, #0]
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d1f7      	bne.n	8018b2e <_dtoa_r+0x6fe>
 8018b3e:	9a07      	ldr	r2, [sp, #28]
 8018b40:	9900      	ldr	r1, [sp, #0]
 8018b42:	3201      	adds	r2, #1
 8018b44:	9207      	str	r2, [sp, #28]
 8018b46:	2230      	movs	r2, #48	; 0x30
 8018b48:	700a      	strb	r2, [r1, #0]
 8018b4a:	781a      	ldrb	r2, [r3, #0]
 8018b4c:	3201      	adds	r2, #1
 8018b4e:	701a      	strb	r2, [r3, #0]
 8018b50:	e78c      	b.n	8018a6c <_dtoa_r+0x63c>
 8018b52:	4b7f      	ldr	r3, [pc, #508]	; (8018d50 <_dtoa_r+0x920>)
 8018b54:	2200      	movs	r2, #0
 8018b56:	f7e7 fd5f 	bl	8000618 <__aeabi_dmul>
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	4606      	mov	r6, r0
 8018b60:	460f      	mov	r7, r1
 8018b62:	f7e7 ffc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8018b66:	2800      	cmp	r0, #0
 8018b68:	d09b      	beq.n	8018aa2 <_dtoa_r+0x672>
 8018b6a:	e7cd      	b.n	8018b08 <_dtoa_r+0x6d8>
 8018b6c:	9a08      	ldr	r2, [sp, #32]
 8018b6e:	2a00      	cmp	r2, #0
 8018b70:	f000 80c4 	beq.w	8018cfc <_dtoa_r+0x8cc>
 8018b74:	9a05      	ldr	r2, [sp, #20]
 8018b76:	2a01      	cmp	r2, #1
 8018b78:	f300 80a8 	bgt.w	8018ccc <_dtoa_r+0x89c>
 8018b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018b7e:	2a00      	cmp	r2, #0
 8018b80:	f000 80a0 	beq.w	8018cc4 <_dtoa_r+0x894>
 8018b84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018b88:	9e06      	ldr	r6, [sp, #24]
 8018b8a:	4645      	mov	r5, r8
 8018b8c:	9a04      	ldr	r2, [sp, #16]
 8018b8e:	2101      	movs	r1, #1
 8018b90:	441a      	add	r2, r3
 8018b92:	4620      	mov	r0, r4
 8018b94:	4498      	add	r8, r3
 8018b96:	9204      	str	r2, [sp, #16]
 8018b98:	f000 fd8e 	bl	80196b8 <__i2b>
 8018b9c:	4607      	mov	r7, r0
 8018b9e:	2d00      	cmp	r5, #0
 8018ba0:	dd0b      	ble.n	8018bba <_dtoa_r+0x78a>
 8018ba2:	9b04      	ldr	r3, [sp, #16]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	dd08      	ble.n	8018bba <_dtoa_r+0x78a>
 8018ba8:	42ab      	cmp	r3, r5
 8018baa:	9a04      	ldr	r2, [sp, #16]
 8018bac:	bfa8      	it	ge
 8018bae:	462b      	movge	r3, r5
 8018bb0:	eba8 0803 	sub.w	r8, r8, r3
 8018bb4:	1aed      	subs	r5, r5, r3
 8018bb6:	1ad3      	subs	r3, r2, r3
 8018bb8:	9304      	str	r3, [sp, #16]
 8018bba:	9b06      	ldr	r3, [sp, #24]
 8018bbc:	b1fb      	cbz	r3, 8018bfe <_dtoa_r+0x7ce>
 8018bbe:	9b08      	ldr	r3, [sp, #32]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	f000 809f 	beq.w	8018d04 <_dtoa_r+0x8d4>
 8018bc6:	2e00      	cmp	r6, #0
 8018bc8:	dd11      	ble.n	8018bee <_dtoa_r+0x7be>
 8018bca:	4639      	mov	r1, r7
 8018bcc:	4632      	mov	r2, r6
 8018bce:	4620      	mov	r0, r4
 8018bd0:	f000 fe2e 	bl	8019830 <__pow5mult>
 8018bd4:	465a      	mov	r2, fp
 8018bd6:	4601      	mov	r1, r0
 8018bd8:	4607      	mov	r7, r0
 8018bda:	4620      	mov	r0, r4
 8018bdc:	f000 fd82 	bl	80196e4 <__multiply>
 8018be0:	4659      	mov	r1, fp
 8018be2:	9007      	str	r0, [sp, #28]
 8018be4:	4620      	mov	r0, r4
 8018be6:	f000 fcab 	bl	8019540 <_Bfree>
 8018bea:	9b07      	ldr	r3, [sp, #28]
 8018bec:	469b      	mov	fp, r3
 8018bee:	9b06      	ldr	r3, [sp, #24]
 8018bf0:	1b9a      	subs	r2, r3, r6
 8018bf2:	d004      	beq.n	8018bfe <_dtoa_r+0x7ce>
 8018bf4:	4659      	mov	r1, fp
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	f000 fe1a 	bl	8019830 <__pow5mult>
 8018bfc:	4683      	mov	fp, r0
 8018bfe:	2101      	movs	r1, #1
 8018c00:	4620      	mov	r0, r4
 8018c02:	f000 fd59 	bl	80196b8 <__i2b>
 8018c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	4606      	mov	r6, r0
 8018c0c:	dd7c      	ble.n	8018d08 <_dtoa_r+0x8d8>
 8018c0e:	461a      	mov	r2, r3
 8018c10:	4601      	mov	r1, r0
 8018c12:	4620      	mov	r0, r4
 8018c14:	f000 fe0c 	bl	8019830 <__pow5mult>
 8018c18:	9b05      	ldr	r3, [sp, #20]
 8018c1a:	2b01      	cmp	r3, #1
 8018c1c:	4606      	mov	r6, r0
 8018c1e:	dd76      	ble.n	8018d0e <_dtoa_r+0x8de>
 8018c20:	2300      	movs	r3, #0
 8018c22:	9306      	str	r3, [sp, #24]
 8018c24:	6933      	ldr	r3, [r6, #16]
 8018c26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018c2a:	6918      	ldr	r0, [r3, #16]
 8018c2c:	f000 fcf4 	bl	8019618 <__hi0bits>
 8018c30:	f1c0 0020 	rsb	r0, r0, #32
 8018c34:	9b04      	ldr	r3, [sp, #16]
 8018c36:	4418      	add	r0, r3
 8018c38:	f010 001f 	ands.w	r0, r0, #31
 8018c3c:	f000 8086 	beq.w	8018d4c <_dtoa_r+0x91c>
 8018c40:	f1c0 0320 	rsb	r3, r0, #32
 8018c44:	2b04      	cmp	r3, #4
 8018c46:	dd7f      	ble.n	8018d48 <_dtoa_r+0x918>
 8018c48:	f1c0 001c 	rsb	r0, r0, #28
 8018c4c:	9b04      	ldr	r3, [sp, #16]
 8018c4e:	4403      	add	r3, r0
 8018c50:	4480      	add	r8, r0
 8018c52:	4405      	add	r5, r0
 8018c54:	9304      	str	r3, [sp, #16]
 8018c56:	f1b8 0f00 	cmp.w	r8, #0
 8018c5a:	dd05      	ble.n	8018c68 <_dtoa_r+0x838>
 8018c5c:	4659      	mov	r1, fp
 8018c5e:	4642      	mov	r2, r8
 8018c60:	4620      	mov	r0, r4
 8018c62:	f000 fe3f 	bl	80198e4 <__lshift>
 8018c66:	4683      	mov	fp, r0
 8018c68:	9b04      	ldr	r3, [sp, #16]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	dd05      	ble.n	8018c7a <_dtoa_r+0x84a>
 8018c6e:	4631      	mov	r1, r6
 8018c70:	461a      	mov	r2, r3
 8018c72:	4620      	mov	r0, r4
 8018c74:	f000 fe36 	bl	80198e4 <__lshift>
 8018c78:	4606      	mov	r6, r0
 8018c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d069      	beq.n	8018d54 <_dtoa_r+0x924>
 8018c80:	4631      	mov	r1, r6
 8018c82:	4658      	mov	r0, fp
 8018c84:	f000 fe9a 	bl	80199bc <__mcmp>
 8018c88:	2800      	cmp	r0, #0
 8018c8a:	da63      	bge.n	8018d54 <_dtoa_r+0x924>
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	4659      	mov	r1, fp
 8018c90:	220a      	movs	r2, #10
 8018c92:	4620      	mov	r0, r4
 8018c94:	f000 fc76 	bl	8019584 <__multadd>
 8018c98:	9b08      	ldr	r3, [sp, #32]
 8018c9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018c9e:	4683      	mov	fp, r0
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	f000 818f 	beq.w	8018fc4 <_dtoa_r+0xb94>
 8018ca6:	4639      	mov	r1, r7
 8018ca8:	2300      	movs	r3, #0
 8018caa:	220a      	movs	r2, #10
 8018cac:	4620      	mov	r0, r4
 8018cae:	f000 fc69 	bl	8019584 <__multadd>
 8018cb2:	f1b9 0f00 	cmp.w	r9, #0
 8018cb6:	4607      	mov	r7, r0
 8018cb8:	f300 808e 	bgt.w	8018dd8 <_dtoa_r+0x9a8>
 8018cbc:	9b05      	ldr	r3, [sp, #20]
 8018cbe:	2b02      	cmp	r3, #2
 8018cc0:	dc50      	bgt.n	8018d64 <_dtoa_r+0x934>
 8018cc2:	e089      	b.n	8018dd8 <_dtoa_r+0x9a8>
 8018cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018cc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018cca:	e75d      	b.n	8018b88 <_dtoa_r+0x758>
 8018ccc:	9b01      	ldr	r3, [sp, #4]
 8018cce:	1e5e      	subs	r6, r3, #1
 8018cd0:	9b06      	ldr	r3, [sp, #24]
 8018cd2:	42b3      	cmp	r3, r6
 8018cd4:	bfbf      	itttt	lt
 8018cd6:	9b06      	ldrlt	r3, [sp, #24]
 8018cd8:	9606      	strlt	r6, [sp, #24]
 8018cda:	1af2      	sublt	r2, r6, r3
 8018cdc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018cde:	bfb6      	itet	lt
 8018ce0:	189b      	addlt	r3, r3, r2
 8018ce2:	1b9e      	subge	r6, r3, r6
 8018ce4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018ce6:	9b01      	ldr	r3, [sp, #4]
 8018ce8:	bfb8      	it	lt
 8018cea:	2600      	movlt	r6, #0
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	bfb5      	itete	lt
 8018cf0:	eba8 0503 	sublt.w	r5, r8, r3
 8018cf4:	9b01      	ldrge	r3, [sp, #4]
 8018cf6:	2300      	movlt	r3, #0
 8018cf8:	4645      	movge	r5, r8
 8018cfa:	e747      	b.n	8018b8c <_dtoa_r+0x75c>
 8018cfc:	9e06      	ldr	r6, [sp, #24]
 8018cfe:	9f08      	ldr	r7, [sp, #32]
 8018d00:	4645      	mov	r5, r8
 8018d02:	e74c      	b.n	8018b9e <_dtoa_r+0x76e>
 8018d04:	9a06      	ldr	r2, [sp, #24]
 8018d06:	e775      	b.n	8018bf4 <_dtoa_r+0x7c4>
 8018d08:	9b05      	ldr	r3, [sp, #20]
 8018d0a:	2b01      	cmp	r3, #1
 8018d0c:	dc18      	bgt.n	8018d40 <_dtoa_r+0x910>
 8018d0e:	9b02      	ldr	r3, [sp, #8]
 8018d10:	b9b3      	cbnz	r3, 8018d40 <_dtoa_r+0x910>
 8018d12:	9b03      	ldr	r3, [sp, #12]
 8018d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018d18:	b9a3      	cbnz	r3, 8018d44 <_dtoa_r+0x914>
 8018d1a:	9b03      	ldr	r3, [sp, #12]
 8018d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d20:	0d1b      	lsrs	r3, r3, #20
 8018d22:	051b      	lsls	r3, r3, #20
 8018d24:	b12b      	cbz	r3, 8018d32 <_dtoa_r+0x902>
 8018d26:	9b04      	ldr	r3, [sp, #16]
 8018d28:	3301      	adds	r3, #1
 8018d2a:	9304      	str	r3, [sp, #16]
 8018d2c:	f108 0801 	add.w	r8, r8, #1
 8018d30:	2301      	movs	r3, #1
 8018d32:	9306      	str	r3, [sp, #24]
 8018d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	f47f af74 	bne.w	8018c24 <_dtoa_r+0x7f4>
 8018d3c:	2001      	movs	r0, #1
 8018d3e:	e779      	b.n	8018c34 <_dtoa_r+0x804>
 8018d40:	2300      	movs	r3, #0
 8018d42:	e7f6      	b.n	8018d32 <_dtoa_r+0x902>
 8018d44:	9b02      	ldr	r3, [sp, #8]
 8018d46:	e7f4      	b.n	8018d32 <_dtoa_r+0x902>
 8018d48:	d085      	beq.n	8018c56 <_dtoa_r+0x826>
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	301c      	adds	r0, #28
 8018d4e:	e77d      	b.n	8018c4c <_dtoa_r+0x81c>
 8018d50:	40240000 	.word	0x40240000
 8018d54:	9b01      	ldr	r3, [sp, #4]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	dc38      	bgt.n	8018dcc <_dtoa_r+0x99c>
 8018d5a:	9b05      	ldr	r3, [sp, #20]
 8018d5c:	2b02      	cmp	r3, #2
 8018d5e:	dd35      	ble.n	8018dcc <_dtoa_r+0x99c>
 8018d60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018d64:	f1b9 0f00 	cmp.w	r9, #0
 8018d68:	d10d      	bne.n	8018d86 <_dtoa_r+0x956>
 8018d6a:	4631      	mov	r1, r6
 8018d6c:	464b      	mov	r3, r9
 8018d6e:	2205      	movs	r2, #5
 8018d70:	4620      	mov	r0, r4
 8018d72:	f000 fc07 	bl	8019584 <__multadd>
 8018d76:	4601      	mov	r1, r0
 8018d78:	4606      	mov	r6, r0
 8018d7a:	4658      	mov	r0, fp
 8018d7c:	f000 fe1e 	bl	80199bc <__mcmp>
 8018d80:	2800      	cmp	r0, #0
 8018d82:	f73f adbd 	bgt.w	8018900 <_dtoa_r+0x4d0>
 8018d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d88:	9d00      	ldr	r5, [sp, #0]
 8018d8a:	ea6f 0a03 	mvn.w	sl, r3
 8018d8e:	f04f 0800 	mov.w	r8, #0
 8018d92:	4631      	mov	r1, r6
 8018d94:	4620      	mov	r0, r4
 8018d96:	f000 fbd3 	bl	8019540 <_Bfree>
 8018d9a:	2f00      	cmp	r7, #0
 8018d9c:	f43f aeb4 	beq.w	8018b08 <_dtoa_r+0x6d8>
 8018da0:	f1b8 0f00 	cmp.w	r8, #0
 8018da4:	d005      	beq.n	8018db2 <_dtoa_r+0x982>
 8018da6:	45b8      	cmp	r8, r7
 8018da8:	d003      	beq.n	8018db2 <_dtoa_r+0x982>
 8018daa:	4641      	mov	r1, r8
 8018dac:	4620      	mov	r0, r4
 8018dae:	f000 fbc7 	bl	8019540 <_Bfree>
 8018db2:	4639      	mov	r1, r7
 8018db4:	4620      	mov	r0, r4
 8018db6:	f000 fbc3 	bl	8019540 <_Bfree>
 8018dba:	e6a5      	b.n	8018b08 <_dtoa_r+0x6d8>
 8018dbc:	2600      	movs	r6, #0
 8018dbe:	4637      	mov	r7, r6
 8018dc0:	e7e1      	b.n	8018d86 <_dtoa_r+0x956>
 8018dc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018dc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018dc8:	4637      	mov	r7, r6
 8018dca:	e599      	b.n	8018900 <_dtoa_r+0x4d0>
 8018dcc:	9b08      	ldr	r3, [sp, #32]
 8018dce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	f000 80fd 	beq.w	8018fd2 <_dtoa_r+0xba2>
 8018dd8:	2d00      	cmp	r5, #0
 8018dda:	dd05      	ble.n	8018de8 <_dtoa_r+0x9b8>
 8018ddc:	4639      	mov	r1, r7
 8018dde:	462a      	mov	r2, r5
 8018de0:	4620      	mov	r0, r4
 8018de2:	f000 fd7f 	bl	80198e4 <__lshift>
 8018de6:	4607      	mov	r7, r0
 8018de8:	9b06      	ldr	r3, [sp, #24]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d05c      	beq.n	8018ea8 <_dtoa_r+0xa78>
 8018dee:	6879      	ldr	r1, [r7, #4]
 8018df0:	4620      	mov	r0, r4
 8018df2:	f000 fb65 	bl	80194c0 <_Balloc>
 8018df6:	4605      	mov	r5, r0
 8018df8:	b928      	cbnz	r0, 8018e06 <_dtoa_r+0x9d6>
 8018dfa:	4b80      	ldr	r3, [pc, #512]	; (8018ffc <_dtoa_r+0xbcc>)
 8018dfc:	4602      	mov	r2, r0
 8018dfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018e02:	f7ff bb2e 	b.w	8018462 <_dtoa_r+0x32>
 8018e06:	693a      	ldr	r2, [r7, #16]
 8018e08:	3202      	adds	r2, #2
 8018e0a:	0092      	lsls	r2, r2, #2
 8018e0c:	f107 010c 	add.w	r1, r7, #12
 8018e10:	300c      	adds	r0, #12
 8018e12:	f7fe fa59 	bl	80172c8 <memcpy>
 8018e16:	2201      	movs	r2, #1
 8018e18:	4629      	mov	r1, r5
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	f000 fd62 	bl	80198e4 <__lshift>
 8018e20:	9b00      	ldr	r3, [sp, #0]
 8018e22:	3301      	adds	r3, #1
 8018e24:	9301      	str	r3, [sp, #4]
 8018e26:	9b00      	ldr	r3, [sp, #0]
 8018e28:	444b      	add	r3, r9
 8018e2a:	9307      	str	r3, [sp, #28]
 8018e2c:	9b02      	ldr	r3, [sp, #8]
 8018e2e:	f003 0301 	and.w	r3, r3, #1
 8018e32:	46b8      	mov	r8, r7
 8018e34:	9306      	str	r3, [sp, #24]
 8018e36:	4607      	mov	r7, r0
 8018e38:	9b01      	ldr	r3, [sp, #4]
 8018e3a:	4631      	mov	r1, r6
 8018e3c:	3b01      	subs	r3, #1
 8018e3e:	4658      	mov	r0, fp
 8018e40:	9302      	str	r3, [sp, #8]
 8018e42:	f7ff fa67 	bl	8018314 <quorem>
 8018e46:	4603      	mov	r3, r0
 8018e48:	3330      	adds	r3, #48	; 0x30
 8018e4a:	9004      	str	r0, [sp, #16]
 8018e4c:	4641      	mov	r1, r8
 8018e4e:	4658      	mov	r0, fp
 8018e50:	9308      	str	r3, [sp, #32]
 8018e52:	f000 fdb3 	bl	80199bc <__mcmp>
 8018e56:	463a      	mov	r2, r7
 8018e58:	4681      	mov	r9, r0
 8018e5a:	4631      	mov	r1, r6
 8018e5c:	4620      	mov	r0, r4
 8018e5e:	f000 fdc9 	bl	80199f4 <__mdiff>
 8018e62:	68c2      	ldr	r2, [r0, #12]
 8018e64:	9b08      	ldr	r3, [sp, #32]
 8018e66:	4605      	mov	r5, r0
 8018e68:	bb02      	cbnz	r2, 8018eac <_dtoa_r+0xa7c>
 8018e6a:	4601      	mov	r1, r0
 8018e6c:	4658      	mov	r0, fp
 8018e6e:	f000 fda5 	bl	80199bc <__mcmp>
 8018e72:	9b08      	ldr	r3, [sp, #32]
 8018e74:	4602      	mov	r2, r0
 8018e76:	4629      	mov	r1, r5
 8018e78:	4620      	mov	r0, r4
 8018e7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018e7e:	f000 fb5f 	bl	8019540 <_Bfree>
 8018e82:	9b05      	ldr	r3, [sp, #20]
 8018e84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e86:	9d01      	ldr	r5, [sp, #4]
 8018e88:	ea43 0102 	orr.w	r1, r3, r2
 8018e8c:	9b06      	ldr	r3, [sp, #24]
 8018e8e:	430b      	orrs	r3, r1
 8018e90:	9b08      	ldr	r3, [sp, #32]
 8018e92:	d10d      	bne.n	8018eb0 <_dtoa_r+0xa80>
 8018e94:	2b39      	cmp	r3, #57	; 0x39
 8018e96:	d029      	beq.n	8018eec <_dtoa_r+0xabc>
 8018e98:	f1b9 0f00 	cmp.w	r9, #0
 8018e9c:	dd01      	ble.n	8018ea2 <_dtoa_r+0xa72>
 8018e9e:	9b04      	ldr	r3, [sp, #16]
 8018ea0:	3331      	adds	r3, #49	; 0x31
 8018ea2:	9a02      	ldr	r2, [sp, #8]
 8018ea4:	7013      	strb	r3, [r2, #0]
 8018ea6:	e774      	b.n	8018d92 <_dtoa_r+0x962>
 8018ea8:	4638      	mov	r0, r7
 8018eaa:	e7b9      	b.n	8018e20 <_dtoa_r+0x9f0>
 8018eac:	2201      	movs	r2, #1
 8018eae:	e7e2      	b.n	8018e76 <_dtoa_r+0xa46>
 8018eb0:	f1b9 0f00 	cmp.w	r9, #0
 8018eb4:	db06      	blt.n	8018ec4 <_dtoa_r+0xa94>
 8018eb6:	9905      	ldr	r1, [sp, #20]
 8018eb8:	ea41 0909 	orr.w	r9, r1, r9
 8018ebc:	9906      	ldr	r1, [sp, #24]
 8018ebe:	ea59 0101 	orrs.w	r1, r9, r1
 8018ec2:	d120      	bne.n	8018f06 <_dtoa_r+0xad6>
 8018ec4:	2a00      	cmp	r2, #0
 8018ec6:	ddec      	ble.n	8018ea2 <_dtoa_r+0xa72>
 8018ec8:	4659      	mov	r1, fp
 8018eca:	2201      	movs	r2, #1
 8018ecc:	4620      	mov	r0, r4
 8018ece:	9301      	str	r3, [sp, #4]
 8018ed0:	f000 fd08 	bl	80198e4 <__lshift>
 8018ed4:	4631      	mov	r1, r6
 8018ed6:	4683      	mov	fp, r0
 8018ed8:	f000 fd70 	bl	80199bc <__mcmp>
 8018edc:	2800      	cmp	r0, #0
 8018ede:	9b01      	ldr	r3, [sp, #4]
 8018ee0:	dc02      	bgt.n	8018ee8 <_dtoa_r+0xab8>
 8018ee2:	d1de      	bne.n	8018ea2 <_dtoa_r+0xa72>
 8018ee4:	07da      	lsls	r2, r3, #31
 8018ee6:	d5dc      	bpl.n	8018ea2 <_dtoa_r+0xa72>
 8018ee8:	2b39      	cmp	r3, #57	; 0x39
 8018eea:	d1d8      	bne.n	8018e9e <_dtoa_r+0xa6e>
 8018eec:	9a02      	ldr	r2, [sp, #8]
 8018eee:	2339      	movs	r3, #57	; 0x39
 8018ef0:	7013      	strb	r3, [r2, #0]
 8018ef2:	462b      	mov	r3, r5
 8018ef4:	461d      	mov	r5, r3
 8018ef6:	3b01      	subs	r3, #1
 8018ef8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018efc:	2a39      	cmp	r2, #57	; 0x39
 8018efe:	d050      	beq.n	8018fa2 <_dtoa_r+0xb72>
 8018f00:	3201      	adds	r2, #1
 8018f02:	701a      	strb	r2, [r3, #0]
 8018f04:	e745      	b.n	8018d92 <_dtoa_r+0x962>
 8018f06:	2a00      	cmp	r2, #0
 8018f08:	dd03      	ble.n	8018f12 <_dtoa_r+0xae2>
 8018f0a:	2b39      	cmp	r3, #57	; 0x39
 8018f0c:	d0ee      	beq.n	8018eec <_dtoa_r+0xabc>
 8018f0e:	3301      	adds	r3, #1
 8018f10:	e7c7      	b.n	8018ea2 <_dtoa_r+0xa72>
 8018f12:	9a01      	ldr	r2, [sp, #4]
 8018f14:	9907      	ldr	r1, [sp, #28]
 8018f16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018f1a:	428a      	cmp	r2, r1
 8018f1c:	d02a      	beq.n	8018f74 <_dtoa_r+0xb44>
 8018f1e:	4659      	mov	r1, fp
 8018f20:	2300      	movs	r3, #0
 8018f22:	220a      	movs	r2, #10
 8018f24:	4620      	mov	r0, r4
 8018f26:	f000 fb2d 	bl	8019584 <__multadd>
 8018f2a:	45b8      	cmp	r8, r7
 8018f2c:	4683      	mov	fp, r0
 8018f2e:	f04f 0300 	mov.w	r3, #0
 8018f32:	f04f 020a 	mov.w	r2, #10
 8018f36:	4641      	mov	r1, r8
 8018f38:	4620      	mov	r0, r4
 8018f3a:	d107      	bne.n	8018f4c <_dtoa_r+0xb1c>
 8018f3c:	f000 fb22 	bl	8019584 <__multadd>
 8018f40:	4680      	mov	r8, r0
 8018f42:	4607      	mov	r7, r0
 8018f44:	9b01      	ldr	r3, [sp, #4]
 8018f46:	3301      	adds	r3, #1
 8018f48:	9301      	str	r3, [sp, #4]
 8018f4a:	e775      	b.n	8018e38 <_dtoa_r+0xa08>
 8018f4c:	f000 fb1a 	bl	8019584 <__multadd>
 8018f50:	4639      	mov	r1, r7
 8018f52:	4680      	mov	r8, r0
 8018f54:	2300      	movs	r3, #0
 8018f56:	220a      	movs	r2, #10
 8018f58:	4620      	mov	r0, r4
 8018f5a:	f000 fb13 	bl	8019584 <__multadd>
 8018f5e:	4607      	mov	r7, r0
 8018f60:	e7f0      	b.n	8018f44 <_dtoa_r+0xb14>
 8018f62:	f1b9 0f00 	cmp.w	r9, #0
 8018f66:	9a00      	ldr	r2, [sp, #0]
 8018f68:	bfcc      	ite	gt
 8018f6a:	464d      	movgt	r5, r9
 8018f6c:	2501      	movle	r5, #1
 8018f6e:	4415      	add	r5, r2
 8018f70:	f04f 0800 	mov.w	r8, #0
 8018f74:	4659      	mov	r1, fp
 8018f76:	2201      	movs	r2, #1
 8018f78:	4620      	mov	r0, r4
 8018f7a:	9301      	str	r3, [sp, #4]
 8018f7c:	f000 fcb2 	bl	80198e4 <__lshift>
 8018f80:	4631      	mov	r1, r6
 8018f82:	4683      	mov	fp, r0
 8018f84:	f000 fd1a 	bl	80199bc <__mcmp>
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	dcb2      	bgt.n	8018ef2 <_dtoa_r+0xac2>
 8018f8c:	d102      	bne.n	8018f94 <_dtoa_r+0xb64>
 8018f8e:	9b01      	ldr	r3, [sp, #4]
 8018f90:	07db      	lsls	r3, r3, #31
 8018f92:	d4ae      	bmi.n	8018ef2 <_dtoa_r+0xac2>
 8018f94:	462b      	mov	r3, r5
 8018f96:	461d      	mov	r5, r3
 8018f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018f9c:	2a30      	cmp	r2, #48	; 0x30
 8018f9e:	d0fa      	beq.n	8018f96 <_dtoa_r+0xb66>
 8018fa0:	e6f7      	b.n	8018d92 <_dtoa_r+0x962>
 8018fa2:	9a00      	ldr	r2, [sp, #0]
 8018fa4:	429a      	cmp	r2, r3
 8018fa6:	d1a5      	bne.n	8018ef4 <_dtoa_r+0xac4>
 8018fa8:	f10a 0a01 	add.w	sl, sl, #1
 8018fac:	2331      	movs	r3, #49	; 0x31
 8018fae:	e779      	b.n	8018ea4 <_dtoa_r+0xa74>
 8018fb0:	4b13      	ldr	r3, [pc, #76]	; (8019000 <_dtoa_r+0xbd0>)
 8018fb2:	f7ff baaf 	b.w	8018514 <_dtoa_r+0xe4>
 8018fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	f47f aa86 	bne.w	80184ca <_dtoa_r+0x9a>
 8018fbe:	4b11      	ldr	r3, [pc, #68]	; (8019004 <_dtoa_r+0xbd4>)
 8018fc0:	f7ff baa8 	b.w	8018514 <_dtoa_r+0xe4>
 8018fc4:	f1b9 0f00 	cmp.w	r9, #0
 8018fc8:	dc03      	bgt.n	8018fd2 <_dtoa_r+0xba2>
 8018fca:	9b05      	ldr	r3, [sp, #20]
 8018fcc:	2b02      	cmp	r3, #2
 8018fce:	f73f aec9 	bgt.w	8018d64 <_dtoa_r+0x934>
 8018fd2:	9d00      	ldr	r5, [sp, #0]
 8018fd4:	4631      	mov	r1, r6
 8018fd6:	4658      	mov	r0, fp
 8018fd8:	f7ff f99c 	bl	8018314 <quorem>
 8018fdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8018fe4:	9a00      	ldr	r2, [sp, #0]
 8018fe6:	1aaa      	subs	r2, r5, r2
 8018fe8:	4591      	cmp	r9, r2
 8018fea:	ddba      	ble.n	8018f62 <_dtoa_r+0xb32>
 8018fec:	4659      	mov	r1, fp
 8018fee:	2300      	movs	r3, #0
 8018ff0:	220a      	movs	r2, #10
 8018ff2:	4620      	mov	r0, r4
 8018ff4:	f000 fac6 	bl	8019584 <__multadd>
 8018ff8:	4683      	mov	fp, r0
 8018ffa:	e7eb      	b.n	8018fd4 <_dtoa_r+0xba4>
 8018ffc:	0801bc46 	.word	0x0801bc46
 8019000:	0801be18 	.word	0x0801be18
 8019004:	0801bbc3 	.word	0x0801bbc3

08019008 <__sflush_r>:
 8019008:	898a      	ldrh	r2, [r1, #12]
 801900a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801900e:	4605      	mov	r5, r0
 8019010:	0710      	lsls	r0, r2, #28
 8019012:	460c      	mov	r4, r1
 8019014:	d458      	bmi.n	80190c8 <__sflush_r+0xc0>
 8019016:	684b      	ldr	r3, [r1, #4]
 8019018:	2b00      	cmp	r3, #0
 801901a:	dc05      	bgt.n	8019028 <__sflush_r+0x20>
 801901c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801901e:	2b00      	cmp	r3, #0
 8019020:	dc02      	bgt.n	8019028 <__sflush_r+0x20>
 8019022:	2000      	movs	r0, #0
 8019024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801902a:	2e00      	cmp	r6, #0
 801902c:	d0f9      	beq.n	8019022 <__sflush_r+0x1a>
 801902e:	2300      	movs	r3, #0
 8019030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019034:	682f      	ldr	r7, [r5, #0]
 8019036:	602b      	str	r3, [r5, #0]
 8019038:	d032      	beq.n	80190a0 <__sflush_r+0x98>
 801903a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801903c:	89a3      	ldrh	r3, [r4, #12]
 801903e:	075a      	lsls	r2, r3, #29
 8019040:	d505      	bpl.n	801904e <__sflush_r+0x46>
 8019042:	6863      	ldr	r3, [r4, #4]
 8019044:	1ac0      	subs	r0, r0, r3
 8019046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019048:	b10b      	cbz	r3, 801904e <__sflush_r+0x46>
 801904a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801904c:	1ac0      	subs	r0, r0, r3
 801904e:	2300      	movs	r3, #0
 8019050:	4602      	mov	r2, r0
 8019052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019054:	6a21      	ldr	r1, [r4, #32]
 8019056:	4628      	mov	r0, r5
 8019058:	47b0      	blx	r6
 801905a:	1c43      	adds	r3, r0, #1
 801905c:	89a3      	ldrh	r3, [r4, #12]
 801905e:	d106      	bne.n	801906e <__sflush_r+0x66>
 8019060:	6829      	ldr	r1, [r5, #0]
 8019062:	291d      	cmp	r1, #29
 8019064:	d82c      	bhi.n	80190c0 <__sflush_r+0xb8>
 8019066:	4a2a      	ldr	r2, [pc, #168]	; (8019110 <__sflush_r+0x108>)
 8019068:	40ca      	lsrs	r2, r1
 801906a:	07d6      	lsls	r6, r2, #31
 801906c:	d528      	bpl.n	80190c0 <__sflush_r+0xb8>
 801906e:	2200      	movs	r2, #0
 8019070:	6062      	str	r2, [r4, #4]
 8019072:	04d9      	lsls	r1, r3, #19
 8019074:	6922      	ldr	r2, [r4, #16]
 8019076:	6022      	str	r2, [r4, #0]
 8019078:	d504      	bpl.n	8019084 <__sflush_r+0x7c>
 801907a:	1c42      	adds	r2, r0, #1
 801907c:	d101      	bne.n	8019082 <__sflush_r+0x7a>
 801907e:	682b      	ldr	r3, [r5, #0]
 8019080:	b903      	cbnz	r3, 8019084 <__sflush_r+0x7c>
 8019082:	6560      	str	r0, [r4, #84]	; 0x54
 8019084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019086:	602f      	str	r7, [r5, #0]
 8019088:	2900      	cmp	r1, #0
 801908a:	d0ca      	beq.n	8019022 <__sflush_r+0x1a>
 801908c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019090:	4299      	cmp	r1, r3
 8019092:	d002      	beq.n	801909a <__sflush_r+0x92>
 8019094:	4628      	mov	r0, r5
 8019096:	f7fe f92d 	bl	80172f4 <_free_r>
 801909a:	2000      	movs	r0, #0
 801909c:	6360      	str	r0, [r4, #52]	; 0x34
 801909e:	e7c1      	b.n	8019024 <__sflush_r+0x1c>
 80190a0:	6a21      	ldr	r1, [r4, #32]
 80190a2:	2301      	movs	r3, #1
 80190a4:	4628      	mov	r0, r5
 80190a6:	47b0      	blx	r6
 80190a8:	1c41      	adds	r1, r0, #1
 80190aa:	d1c7      	bne.n	801903c <__sflush_r+0x34>
 80190ac:	682b      	ldr	r3, [r5, #0]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d0c4      	beq.n	801903c <__sflush_r+0x34>
 80190b2:	2b1d      	cmp	r3, #29
 80190b4:	d001      	beq.n	80190ba <__sflush_r+0xb2>
 80190b6:	2b16      	cmp	r3, #22
 80190b8:	d101      	bne.n	80190be <__sflush_r+0xb6>
 80190ba:	602f      	str	r7, [r5, #0]
 80190bc:	e7b1      	b.n	8019022 <__sflush_r+0x1a>
 80190be:	89a3      	ldrh	r3, [r4, #12]
 80190c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190c4:	81a3      	strh	r3, [r4, #12]
 80190c6:	e7ad      	b.n	8019024 <__sflush_r+0x1c>
 80190c8:	690f      	ldr	r7, [r1, #16]
 80190ca:	2f00      	cmp	r7, #0
 80190cc:	d0a9      	beq.n	8019022 <__sflush_r+0x1a>
 80190ce:	0793      	lsls	r3, r2, #30
 80190d0:	680e      	ldr	r6, [r1, #0]
 80190d2:	bf08      	it	eq
 80190d4:	694b      	ldreq	r3, [r1, #20]
 80190d6:	600f      	str	r7, [r1, #0]
 80190d8:	bf18      	it	ne
 80190da:	2300      	movne	r3, #0
 80190dc:	eba6 0807 	sub.w	r8, r6, r7
 80190e0:	608b      	str	r3, [r1, #8]
 80190e2:	f1b8 0f00 	cmp.w	r8, #0
 80190e6:	dd9c      	ble.n	8019022 <__sflush_r+0x1a>
 80190e8:	6a21      	ldr	r1, [r4, #32]
 80190ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80190ec:	4643      	mov	r3, r8
 80190ee:	463a      	mov	r2, r7
 80190f0:	4628      	mov	r0, r5
 80190f2:	47b0      	blx	r6
 80190f4:	2800      	cmp	r0, #0
 80190f6:	dc06      	bgt.n	8019106 <__sflush_r+0xfe>
 80190f8:	89a3      	ldrh	r3, [r4, #12]
 80190fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190fe:	81a3      	strh	r3, [r4, #12]
 8019100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019104:	e78e      	b.n	8019024 <__sflush_r+0x1c>
 8019106:	4407      	add	r7, r0
 8019108:	eba8 0800 	sub.w	r8, r8, r0
 801910c:	e7e9      	b.n	80190e2 <__sflush_r+0xda>
 801910e:	bf00      	nop
 8019110:	20400001 	.word	0x20400001

08019114 <_fflush_r>:
 8019114:	b538      	push	{r3, r4, r5, lr}
 8019116:	690b      	ldr	r3, [r1, #16]
 8019118:	4605      	mov	r5, r0
 801911a:	460c      	mov	r4, r1
 801911c:	b913      	cbnz	r3, 8019124 <_fflush_r+0x10>
 801911e:	2500      	movs	r5, #0
 8019120:	4628      	mov	r0, r5
 8019122:	bd38      	pop	{r3, r4, r5, pc}
 8019124:	b118      	cbz	r0, 801912e <_fflush_r+0x1a>
 8019126:	6983      	ldr	r3, [r0, #24]
 8019128:	b90b      	cbnz	r3, 801912e <_fflush_r+0x1a>
 801912a:	f000 f887 	bl	801923c <__sinit>
 801912e:	4b14      	ldr	r3, [pc, #80]	; (8019180 <_fflush_r+0x6c>)
 8019130:	429c      	cmp	r4, r3
 8019132:	d11b      	bne.n	801916c <_fflush_r+0x58>
 8019134:	686c      	ldr	r4, [r5, #4]
 8019136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d0ef      	beq.n	801911e <_fflush_r+0xa>
 801913e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019140:	07d0      	lsls	r0, r2, #31
 8019142:	d404      	bmi.n	801914e <_fflush_r+0x3a>
 8019144:	0599      	lsls	r1, r3, #22
 8019146:	d402      	bmi.n	801914e <_fflush_r+0x3a>
 8019148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801914a:	f000 f91a 	bl	8019382 <__retarget_lock_acquire_recursive>
 801914e:	4628      	mov	r0, r5
 8019150:	4621      	mov	r1, r4
 8019152:	f7ff ff59 	bl	8019008 <__sflush_r>
 8019156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019158:	07da      	lsls	r2, r3, #31
 801915a:	4605      	mov	r5, r0
 801915c:	d4e0      	bmi.n	8019120 <_fflush_r+0xc>
 801915e:	89a3      	ldrh	r3, [r4, #12]
 8019160:	059b      	lsls	r3, r3, #22
 8019162:	d4dd      	bmi.n	8019120 <_fflush_r+0xc>
 8019164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019166:	f000 f90d 	bl	8019384 <__retarget_lock_release_recursive>
 801916a:	e7d9      	b.n	8019120 <_fflush_r+0xc>
 801916c:	4b05      	ldr	r3, [pc, #20]	; (8019184 <_fflush_r+0x70>)
 801916e:	429c      	cmp	r4, r3
 8019170:	d101      	bne.n	8019176 <_fflush_r+0x62>
 8019172:	68ac      	ldr	r4, [r5, #8]
 8019174:	e7df      	b.n	8019136 <_fflush_r+0x22>
 8019176:	4b04      	ldr	r3, [pc, #16]	; (8019188 <_fflush_r+0x74>)
 8019178:	429c      	cmp	r4, r3
 801917a:	bf08      	it	eq
 801917c:	68ec      	ldreq	r4, [r5, #12]
 801917e:	e7da      	b.n	8019136 <_fflush_r+0x22>
 8019180:	0801bc78 	.word	0x0801bc78
 8019184:	0801bc98 	.word	0x0801bc98
 8019188:	0801bc58 	.word	0x0801bc58

0801918c <std>:
 801918c:	2300      	movs	r3, #0
 801918e:	b510      	push	{r4, lr}
 8019190:	4604      	mov	r4, r0
 8019192:	e9c0 3300 	strd	r3, r3, [r0]
 8019196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801919a:	6083      	str	r3, [r0, #8]
 801919c:	8181      	strh	r1, [r0, #12]
 801919e:	6643      	str	r3, [r0, #100]	; 0x64
 80191a0:	81c2      	strh	r2, [r0, #14]
 80191a2:	6183      	str	r3, [r0, #24]
 80191a4:	4619      	mov	r1, r3
 80191a6:	2208      	movs	r2, #8
 80191a8:	305c      	adds	r0, #92	; 0x5c
 80191aa:	f7fe f89b 	bl	80172e4 <memset>
 80191ae:	4b05      	ldr	r3, [pc, #20]	; (80191c4 <std+0x38>)
 80191b0:	6263      	str	r3, [r4, #36]	; 0x24
 80191b2:	4b05      	ldr	r3, [pc, #20]	; (80191c8 <std+0x3c>)
 80191b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80191b6:	4b05      	ldr	r3, [pc, #20]	; (80191cc <std+0x40>)
 80191b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80191ba:	4b05      	ldr	r3, [pc, #20]	; (80191d0 <std+0x44>)
 80191bc:	6224      	str	r4, [r4, #32]
 80191be:	6323      	str	r3, [r4, #48]	; 0x30
 80191c0:	bd10      	pop	{r4, pc}
 80191c2:	bf00      	nop
 80191c4:	08018089 	.word	0x08018089
 80191c8:	080180af 	.word	0x080180af
 80191cc:	080180e7 	.word	0x080180e7
 80191d0:	0801810b 	.word	0x0801810b

080191d4 <_cleanup_r>:
 80191d4:	4901      	ldr	r1, [pc, #4]	; (80191dc <_cleanup_r+0x8>)
 80191d6:	f000 b8af 	b.w	8019338 <_fwalk_reent>
 80191da:	bf00      	nop
 80191dc:	08019115 	.word	0x08019115

080191e0 <__sfmoreglue>:
 80191e0:	b570      	push	{r4, r5, r6, lr}
 80191e2:	1e4a      	subs	r2, r1, #1
 80191e4:	2568      	movs	r5, #104	; 0x68
 80191e6:	4355      	muls	r5, r2
 80191e8:	460e      	mov	r6, r1
 80191ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80191ee:	f7fe f8d1 	bl	8017394 <_malloc_r>
 80191f2:	4604      	mov	r4, r0
 80191f4:	b140      	cbz	r0, 8019208 <__sfmoreglue+0x28>
 80191f6:	2100      	movs	r1, #0
 80191f8:	e9c0 1600 	strd	r1, r6, [r0]
 80191fc:	300c      	adds	r0, #12
 80191fe:	60a0      	str	r0, [r4, #8]
 8019200:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019204:	f7fe f86e 	bl	80172e4 <memset>
 8019208:	4620      	mov	r0, r4
 801920a:	bd70      	pop	{r4, r5, r6, pc}

0801920c <__sfp_lock_acquire>:
 801920c:	4801      	ldr	r0, [pc, #4]	; (8019214 <__sfp_lock_acquire+0x8>)
 801920e:	f000 b8b8 	b.w	8019382 <__retarget_lock_acquire_recursive>
 8019212:	bf00      	nop
 8019214:	20009b2c 	.word	0x20009b2c

08019218 <__sfp_lock_release>:
 8019218:	4801      	ldr	r0, [pc, #4]	; (8019220 <__sfp_lock_release+0x8>)
 801921a:	f000 b8b3 	b.w	8019384 <__retarget_lock_release_recursive>
 801921e:	bf00      	nop
 8019220:	20009b2c 	.word	0x20009b2c

08019224 <__sinit_lock_acquire>:
 8019224:	4801      	ldr	r0, [pc, #4]	; (801922c <__sinit_lock_acquire+0x8>)
 8019226:	f000 b8ac 	b.w	8019382 <__retarget_lock_acquire_recursive>
 801922a:	bf00      	nop
 801922c:	20009b27 	.word	0x20009b27

08019230 <__sinit_lock_release>:
 8019230:	4801      	ldr	r0, [pc, #4]	; (8019238 <__sinit_lock_release+0x8>)
 8019232:	f000 b8a7 	b.w	8019384 <__retarget_lock_release_recursive>
 8019236:	bf00      	nop
 8019238:	20009b27 	.word	0x20009b27

0801923c <__sinit>:
 801923c:	b510      	push	{r4, lr}
 801923e:	4604      	mov	r4, r0
 8019240:	f7ff fff0 	bl	8019224 <__sinit_lock_acquire>
 8019244:	69a3      	ldr	r3, [r4, #24]
 8019246:	b11b      	cbz	r3, 8019250 <__sinit+0x14>
 8019248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801924c:	f7ff bff0 	b.w	8019230 <__sinit_lock_release>
 8019250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019254:	6523      	str	r3, [r4, #80]	; 0x50
 8019256:	4b13      	ldr	r3, [pc, #76]	; (80192a4 <__sinit+0x68>)
 8019258:	4a13      	ldr	r2, [pc, #76]	; (80192a8 <__sinit+0x6c>)
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	62a2      	str	r2, [r4, #40]	; 0x28
 801925e:	42a3      	cmp	r3, r4
 8019260:	bf04      	itt	eq
 8019262:	2301      	moveq	r3, #1
 8019264:	61a3      	streq	r3, [r4, #24]
 8019266:	4620      	mov	r0, r4
 8019268:	f000 f820 	bl	80192ac <__sfp>
 801926c:	6060      	str	r0, [r4, #4]
 801926e:	4620      	mov	r0, r4
 8019270:	f000 f81c 	bl	80192ac <__sfp>
 8019274:	60a0      	str	r0, [r4, #8]
 8019276:	4620      	mov	r0, r4
 8019278:	f000 f818 	bl	80192ac <__sfp>
 801927c:	2200      	movs	r2, #0
 801927e:	60e0      	str	r0, [r4, #12]
 8019280:	2104      	movs	r1, #4
 8019282:	6860      	ldr	r0, [r4, #4]
 8019284:	f7ff ff82 	bl	801918c <std>
 8019288:	68a0      	ldr	r0, [r4, #8]
 801928a:	2201      	movs	r2, #1
 801928c:	2109      	movs	r1, #9
 801928e:	f7ff ff7d 	bl	801918c <std>
 8019292:	68e0      	ldr	r0, [r4, #12]
 8019294:	2202      	movs	r2, #2
 8019296:	2112      	movs	r1, #18
 8019298:	f7ff ff78 	bl	801918c <std>
 801929c:	2301      	movs	r3, #1
 801929e:	61a3      	str	r3, [r4, #24]
 80192a0:	e7d2      	b.n	8019248 <__sinit+0xc>
 80192a2:	bf00      	nop
 80192a4:	0801bb7c 	.word	0x0801bb7c
 80192a8:	080191d5 	.word	0x080191d5

080192ac <__sfp>:
 80192ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ae:	4607      	mov	r7, r0
 80192b0:	f7ff ffac 	bl	801920c <__sfp_lock_acquire>
 80192b4:	4b1e      	ldr	r3, [pc, #120]	; (8019330 <__sfp+0x84>)
 80192b6:	681e      	ldr	r6, [r3, #0]
 80192b8:	69b3      	ldr	r3, [r6, #24]
 80192ba:	b913      	cbnz	r3, 80192c2 <__sfp+0x16>
 80192bc:	4630      	mov	r0, r6
 80192be:	f7ff ffbd 	bl	801923c <__sinit>
 80192c2:	3648      	adds	r6, #72	; 0x48
 80192c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80192c8:	3b01      	subs	r3, #1
 80192ca:	d503      	bpl.n	80192d4 <__sfp+0x28>
 80192cc:	6833      	ldr	r3, [r6, #0]
 80192ce:	b30b      	cbz	r3, 8019314 <__sfp+0x68>
 80192d0:	6836      	ldr	r6, [r6, #0]
 80192d2:	e7f7      	b.n	80192c4 <__sfp+0x18>
 80192d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80192d8:	b9d5      	cbnz	r5, 8019310 <__sfp+0x64>
 80192da:	4b16      	ldr	r3, [pc, #88]	; (8019334 <__sfp+0x88>)
 80192dc:	60e3      	str	r3, [r4, #12]
 80192de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80192e2:	6665      	str	r5, [r4, #100]	; 0x64
 80192e4:	f000 f84c 	bl	8019380 <__retarget_lock_init_recursive>
 80192e8:	f7ff ff96 	bl	8019218 <__sfp_lock_release>
 80192ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80192f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80192f4:	6025      	str	r5, [r4, #0]
 80192f6:	61a5      	str	r5, [r4, #24]
 80192f8:	2208      	movs	r2, #8
 80192fa:	4629      	mov	r1, r5
 80192fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019300:	f7fd fff0 	bl	80172e4 <memset>
 8019304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801930c:	4620      	mov	r0, r4
 801930e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019310:	3468      	adds	r4, #104	; 0x68
 8019312:	e7d9      	b.n	80192c8 <__sfp+0x1c>
 8019314:	2104      	movs	r1, #4
 8019316:	4638      	mov	r0, r7
 8019318:	f7ff ff62 	bl	80191e0 <__sfmoreglue>
 801931c:	4604      	mov	r4, r0
 801931e:	6030      	str	r0, [r6, #0]
 8019320:	2800      	cmp	r0, #0
 8019322:	d1d5      	bne.n	80192d0 <__sfp+0x24>
 8019324:	f7ff ff78 	bl	8019218 <__sfp_lock_release>
 8019328:	230c      	movs	r3, #12
 801932a:	603b      	str	r3, [r7, #0]
 801932c:	e7ee      	b.n	801930c <__sfp+0x60>
 801932e:	bf00      	nop
 8019330:	0801bb7c 	.word	0x0801bb7c
 8019334:	ffff0001 	.word	0xffff0001

08019338 <_fwalk_reent>:
 8019338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801933c:	4606      	mov	r6, r0
 801933e:	4688      	mov	r8, r1
 8019340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019344:	2700      	movs	r7, #0
 8019346:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801934a:	f1b9 0901 	subs.w	r9, r9, #1
 801934e:	d505      	bpl.n	801935c <_fwalk_reent+0x24>
 8019350:	6824      	ldr	r4, [r4, #0]
 8019352:	2c00      	cmp	r4, #0
 8019354:	d1f7      	bne.n	8019346 <_fwalk_reent+0xe>
 8019356:	4638      	mov	r0, r7
 8019358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801935c:	89ab      	ldrh	r3, [r5, #12]
 801935e:	2b01      	cmp	r3, #1
 8019360:	d907      	bls.n	8019372 <_fwalk_reent+0x3a>
 8019362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019366:	3301      	adds	r3, #1
 8019368:	d003      	beq.n	8019372 <_fwalk_reent+0x3a>
 801936a:	4629      	mov	r1, r5
 801936c:	4630      	mov	r0, r6
 801936e:	47c0      	blx	r8
 8019370:	4307      	orrs	r7, r0
 8019372:	3568      	adds	r5, #104	; 0x68
 8019374:	e7e9      	b.n	801934a <_fwalk_reent+0x12>
	...

08019378 <_localeconv_r>:
 8019378:	4800      	ldr	r0, [pc, #0]	; (801937c <_localeconv_r+0x4>)
 801937a:	4770      	bx	lr
 801937c:	20000178 	.word	0x20000178

08019380 <__retarget_lock_init_recursive>:
 8019380:	4770      	bx	lr

08019382 <__retarget_lock_acquire_recursive>:
 8019382:	4770      	bx	lr

08019384 <__retarget_lock_release_recursive>:
 8019384:	4770      	bx	lr
	...

08019388 <_lseek_r>:
 8019388:	b538      	push	{r3, r4, r5, lr}
 801938a:	4d07      	ldr	r5, [pc, #28]	; (80193a8 <_lseek_r+0x20>)
 801938c:	4604      	mov	r4, r0
 801938e:	4608      	mov	r0, r1
 8019390:	4611      	mov	r1, r2
 8019392:	2200      	movs	r2, #0
 8019394:	602a      	str	r2, [r5, #0]
 8019396:	461a      	mov	r2, r3
 8019398:	f001 fb22 	bl	801a9e0 <_lseek>
 801939c:	1c43      	adds	r3, r0, #1
 801939e:	d102      	bne.n	80193a6 <_lseek_r+0x1e>
 80193a0:	682b      	ldr	r3, [r5, #0]
 80193a2:	b103      	cbz	r3, 80193a6 <_lseek_r+0x1e>
 80193a4:	6023      	str	r3, [r4, #0]
 80193a6:	bd38      	pop	{r3, r4, r5, pc}
 80193a8:	20009b30 	.word	0x20009b30

080193ac <__swhatbuf_r>:
 80193ac:	b570      	push	{r4, r5, r6, lr}
 80193ae:	460e      	mov	r6, r1
 80193b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80193b4:	2900      	cmp	r1, #0
 80193b6:	b096      	sub	sp, #88	; 0x58
 80193b8:	4614      	mov	r4, r2
 80193ba:	461d      	mov	r5, r3
 80193bc:	da07      	bge.n	80193ce <__swhatbuf_r+0x22>
 80193be:	2300      	movs	r3, #0
 80193c0:	602b      	str	r3, [r5, #0]
 80193c2:	89b3      	ldrh	r3, [r6, #12]
 80193c4:	061a      	lsls	r2, r3, #24
 80193c6:	d410      	bmi.n	80193ea <__swhatbuf_r+0x3e>
 80193c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80193cc:	e00e      	b.n	80193ec <__swhatbuf_r+0x40>
 80193ce:	466a      	mov	r2, sp
 80193d0:	f001 fa4a 	bl	801a868 <_fstat_r>
 80193d4:	2800      	cmp	r0, #0
 80193d6:	dbf2      	blt.n	80193be <__swhatbuf_r+0x12>
 80193d8:	9a01      	ldr	r2, [sp, #4]
 80193da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80193de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80193e2:	425a      	negs	r2, r3
 80193e4:	415a      	adcs	r2, r3
 80193e6:	602a      	str	r2, [r5, #0]
 80193e8:	e7ee      	b.n	80193c8 <__swhatbuf_r+0x1c>
 80193ea:	2340      	movs	r3, #64	; 0x40
 80193ec:	2000      	movs	r0, #0
 80193ee:	6023      	str	r3, [r4, #0]
 80193f0:	b016      	add	sp, #88	; 0x58
 80193f2:	bd70      	pop	{r4, r5, r6, pc}

080193f4 <__smakebuf_r>:
 80193f4:	898b      	ldrh	r3, [r1, #12]
 80193f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80193f8:	079d      	lsls	r5, r3, #30
 80193fa:	4606      	mov	r6, r0
 80193fc:	460c      	mov	r4, r1
 80193fe:	d507      	bpl.n	8019410 <__smakebuf_r+0x1c>
 8019400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019404:	6023      	str	r3, [r4, #0]
 8019406:	6123      	str	r3, [r4, #16]
 8019408:	2301      	movs	r3, #1
 801940a:	6163      	str	r3, [r4, #20]
 801940c:	b002      	add	sp, #8
 801940e:	bd70      	pop	{r4, r5, r6, pc}
 8019410:	ab01      	add	r3, sp, #4
 8019412:	466a      	mov	r2, sp
 8019414:	f7ff ffca 	bl	80193ac <__swhatbuf_r>
 8019418:	9900      	ldr	r1, [sp, #0]
 801941a:	4605      	mov	r5, r0
 801941c:	4630      	mov	r0, r6
 801941e:	f7fd ffb9 	bl	8017394 <_malloc_r>
 8019422:	b948      	cbnz	r0, 8019438 <__smakebuf_r+0x44>
 8019424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019428:	059a      	lsls	r2, r3, #22
 801942a:	d4ef      	bmi.n	801940c <__smakebuf_r+0x18>
 801942c:	f023 0303 	bic.w	r3, r3, #3
 8019430:	f043 0302 	orr.w	r3, r3, #2
 8019434:	81a3      	strh	r3, [r4, #12]
 8019436:	e7e3      	b.n	8019400 <__smakebuf_r+0xc>
 8019438:	4b0d      	ldr	r3, [pc, #52]	; (8019470 <__smakebuf_r+0x7c>)
 801943a:	62b3      	str	r3, [r6, #40]	; 0x28
 801943c:	89a3      	ldrh	r3, [r4, #12]
 801943e:	6020      	str	r0, [r4, #0]
 8019440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019444:	81a3      	strh	r3, [r4, #12]
 8019446:	9b00      	ldr	r3, [sp, #0]
 8019448:	6163      	str	r3, [r4, #20]
 801944a:	9b01      	ldr	r3, [sp, #4]
 801944c:	6120      	str	r0, [r4, #16]
 801944e:	b15b      	cbz	r3, 8019468 <__smakebuf_r+0x74>
 8019450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019454:	4630      	mov	r0, r6
 8019456:	f001 fa19 	bl	801a88c <_isatty_r>
 801945a:	b128      	cbz	r0, 8019468 <__smakebuf_r+0x74>
 801945c:	89a3      	ldrh	r3, [r4, #12]
 801945e:	f023 0303 	bic.w	r3, r3, #3
 8019462:	f043 0301 	orr.w	r3, r3, #1
 8019466:	81a3      	strh	r3, [r4, #12]
 8019468:	89a0      	ldrh	r0, [r4, #12]
 801946a:	4305      	orrs	r5, r0
 801946c:	81a5      	strh	r5, [r4, #12]
 801946e:	e7cd      	b.n	801940c <__smakebuf_r+0x18>
 8019470:	080191d5 	.word	0x080191d5

08019474 <memmove>:
 8019474:	4288      	cmp	r0, r1
 8019476:	b510      	push	{r4, lr}
 8019478:	eb01 0402 	add.w	r4, r1, r2
 801947c:	d902      	bls.n	8019484 <memmove+0x10>
 801947e:	4284      	cmp	r4, r0
 8019480:	4623      	mov	r3, r4
 8019482:	d807      	bhi.n	8019494 <memmove+0x20>
 8019484:	1e43      	subs	r3, r0, #1
 8019486:	42a1      	cmp	r1, r4
 8019488:	d008      	beq.n	801949c <memmove+0x28>
 801948a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801948e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019492:	e7f8      	b.n	8019486 <memmove+0x12>
 8019494:	4402      	add	r2, r0
 8019496:	4601      	mov	r1, r0
 8019498:	428a      	cmp	r2, r1
 801949a:	d100      	bne.n	801949e <memmove+0x2a>
 801949c:	bd10      	pop	{r4, pc}
 801949e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80194a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80194a6:	e7f7      	b.n	8019498 <memmove+0x24>

080194a8 <__malloc_lock>:
 80194a8:	4801      	ldr	r0, [pc, #4]	; (80194b0 <__malloc_lock+0x8>)
 80194aa:	f7ff bf6a 	b.w	8019382 <__retarget_lock_acquire_recursive>
 80194ae:	bf00      	nop
 80194b0:	20009b28 	.word	0x20009b28

080194b4 <__malloc_unlock>:
 80194b4:	4801      	ldr	r0, [pc, #4]	; (80194bc <__malloc_unlock+0x8>)
 80194b6:	f7ff bf65 	b.w	8019384 <__retarget_lock_release_recursive>
 80194ba:	bf00      	nop
 80194bc:	20009b28 	.word	0x20009b28

080194c0 <_Balloc>:
 80194c0:	b570      	push	{r4, r5, r6, lr}
 80194c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80194c4:	4604      	mov	r4, r0
 80194c6:	460d      	mov	r5, r1
 80194c8:	b976      	cbnz	r6, 80194e8 <_Balloc+0x28>
 80194ca:	2010      	movs	r0, #16
 80194cc:	f7fd feec 	bl	80172a8 <malloc>
 80194d0:	4602      	mov	r2, r0
 80194d2:	6260      	str	r0, [r4, #36]	; 0x24
 80194d4:	b920      	cbnz	r0, 80194e0 <_Balloc+0x20>
 80194d6:	4b18      	ldr	r3, [pc, #96]	; (8019538 <_Balloc+0x78>)
 80194d8:	4818      	ldr	r0, [pc, #96]	; (801953c <_Balloc+0x7c>)
 80194da:	2166      	movs	r1, #102	; 0x66
 80194dc:	f001 f9a6 	bl	801a82c <__assert_func>
 80194e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80194e4:	6006      	str	r6, [r0, #0]
 80194e6:	60c6      	str	r6, [r0, #12]
 80194e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80194ea:	68f3      	ldr	r3, [r6, #12]
 80194ec:	b183      	cbz	r3, 8019510 <_Balloc+0x50>
 80194ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80194f0:	68db      	ldr	r3, [r3, #12]
 80194f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80194f6:	b9b8      	cbnz	r0, 8019528 <_Balloc+0x68>
 80194f8:	2101      	movs	r1, #1
 80194fa:	fa01 f605 	lsl.w	r6, r1, r5
 80194fe:	1d72      	adds	r2, r6, #5
 8019500:	0092      	lsls	r2, r2, #2
 8019502:	4620      	mov	r0, r4
 8019504:	f000 fb5a 	bl	8019bbc <_calloc_r>
 8019508:	b160      	cbz	r0, 8019524 <_Balloc+0x64>
 801950a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801950e:	e00e      	b.n	801952e <_Balloc+0x6e>
 8019510:	2221      	movs	r2, #33	; 0x21
 8019512:	2104      	movs	r1, #4
 8019514:	4620      	mov	r0, r4
 8019516:	f000 fb51 	bl	8019bbc <_calloc_r>
 801951a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801951c:	60f0      	str	r0, [r6, #12]
 801951e:	68db      	ldr	r3, [r3, #12]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d1e4      	bne.n	80194ee <_Balloc+0x2e>
 8019524:	2000      	movs	r0, #0
 8019526:	bd70      	pop	{r4, r5, r6, pc}
 8019528:	6802      	ldr	r2, [r0, #0]
 801952a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801952e:	2300      	movs	r3, #0
 8019530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019534:	e7f7      	b.n	8019526 <_Balloc+0x66>
 8019536:	bf00      	nop
 8019538:	0801bbd0 	.word	0x0801bbd0
 801953c:	0801bcb8 	.word	0x0801bcb8

08019540 <_Bfree>:
 8019540:	b570      	push	{r4, r5, r6, lr}
 8019542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019544:	4605      	mov	r5, r0
 8019546:	460c      	mov	r4, r1
 8019548:	b976      	cbnz	r6, 8019568 <_Bfree+0x28>
 801954a:	2010      	movs	r0, #16
 801954c:	f7fd feac 	bl	80172a8 <malloc>
 8019550:	4602      	mov	r2, r0
 8019552:	6268      	str	r0, [r5, #36]	; 0x24
 8019554:	b920      	cbnz	r0, 8019560 <_Bfree+0x20>
 8019556:	4b09      	ldr	r3, [pc, #36]	; (801957c <_Bfree+0x3c>)
 8019558:	4809      	ldr	r0, [pc, #36]	; (8019580 <_Bfree+0x40>)
 801955a:	218a      	movs	r1, #138	; 0x8a
 801955c:	f001 f966 	bl	801a82c <__assert_func>
 8019560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019564:	6006      	str	r6, [r0, #0]
 8019566:	60c6      	str	r6, [r0, #12]
 8019568:	b13c      	cbz	r4, 801957a <_Bfree+0x3a>
 801956a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801956c:	6862      	ldr	r2, [r4, #4]
 801956e:	68db      	ldr	r3, [r3, #12]
 8019570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019574:	6021      	str	r1, [r4, #0]
 8019576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801957a:	bd70      	pop	{r4, r5, r6, pc}
 801957c:	0801bbd0 	.word	0x0801bbd0
 8019580:	0801bcb8 	.word	0x0801bcb8

08019584 <__multadd>:
 8019584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019588:	690e      	ldr	r6, [r1, #16]
 801958a:	4607      	mov	r7, r0
 801958c:	4698      	mov	r8, r3
 801958e:	460c      	mov	r4, r1
 8019590:	f101 0014 	add.w	r0, r1, #20
 8019594:	2300      	movs	r3, #0
 8019596:	6805      	ldr	r5, [r0, #0]
 8019598:	b2a9      	uxth	r1, r5
 801959a:	fb02 8101 	mla	r1, r2, r1, r8
 801959e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80195a2:	0c2d      	lsrs	r5, r5, #16
 80195a4:	fb02 c505 	mla	r5, r2, r5, ip
 80195a8:	b289      	uxth	r1, r1
 80195aa:	3301      	adds	r3, #1
 80195ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80195b0:	429e      	cmp	r6, r3
 80195b2:	f840 1b04 	str.w	r1, [r0], #4
 80195b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80195ba:	dcec      	bgt.n	8019596 <__multadd+0x12>
 80195bc:	f1b8 0f00 	cmp.w	r8, #0
 80195c0:	d022      	beq.n	8019608 <__multadd+0x84>
 80195c2:	68a3      	ldr	r3, [r4, #8]
 80195c4:	42b3      	cmp	r3, r6
 80195c6:	dc19      	bgt.n	80195fc <__multadd+0x78>
 80195c8:	6861      	ldr	r1, [r4, #4]
 80195ca:	4638      	mov	r0, r7
 80195cc:	3101      	adds	r1, #1
 80195ce:	f7ff ff77 	bl	80194c0 <_Balloc>
 80195d2:	4605      	mov	r5, r0
 80195d4:	b928      	cbnz	r0, 80195e2 <__multadd+0x5e>
 80195d6:	4602      	mov	r2, r0
 80195d8:	4b0d      	ldr	r3, [pc, #52]	; (8019610 <__multadd+0x8c>)
 80195da:	480e      	ldr	r0, [pc, #56]	; (8019614 <__multadd+0x90>)
 80195dc:	21b5      	movs	r1, #181	; 0xb5
 80195de:	f001 f925 	bl	801a82c <__assert_func>
 80195e2:	6922      	ldr	r2, [r4, #16]
 80195e4:	3202      	adds	r2, #2
 80195e6:	f104 010c 	add.w	r1, r4, #12
 80195ea:	0092      	lsls	r2, r2, #2
 80195ec:	300c      	adds	r0, #12
 80195ee:	f7fd fe6b 	bl	80172c8 <memcpy>
 80195f2:	4621      	mov	r1, r4
 80195f4:	4638      	mov	r0, r7
 80195f6:	f7ff ffa3 	bl	8019540 <_Bfree>
 80195fa:	462c      	mov	r4, r5
 80195fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019600:	3601      	adds	r6, #1
 8019602:	f8c3 8014 	str.w	r8, [r3, #20]
 8019606:	6126      	str	r6, [r4, #16]
 8019608:	4620      	mov	r0, r4
 801960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801960e:	bf00      	nop
 8019610:	0801bc46 	.word	0x0801bc46
 8019614:	0801bcb8 	.word	0x0801bcb8

08019618 <__hi0bits>:
 8019618:	0c03      	lsrs	r3, r0, #16
 801961a:	041b      	lsls	r3, r3, #16
 801961c:	b9d3      	cbnz	r3, 8019654 <__hi0bits+0x3c>
 801961e:	0400      	lsls	r0, r0, #16
 8019620:	2310      	movs	r3, #16
 8019622:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019626:	bf04      	itt	eq
 8019628:	0200      	lsleq	r0, r0, #8
 801962a:	3308      	addeq	r3, #8
 801962c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019630:	bf04      	itt	eq
 8019632:	0100      	lsleq	r0, r0, #4
 8019634:	3304      	addeq	r3, #4
 8019636:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801963a:	bf04      	itt	eq
 801963c:	0080      	lsleq	r0, r0, #2
 801963e:	3302      	addeq	r3, #2
 8019640:	2800      	cmp	r0, #0
 8019642:	db05      	blt.n	8019650 <__hi0bits+0x38>
 8019644:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019648:	f103 0301 	add.w	r3, r3, #1
 801964c:	bf08      	it	eq
 801964e:	2320      	moveq	r3, #32
 8019650:	4618      	mov	r0, r3
 8019652:	4770      	bx	lr
 8019654:	2300      	movs	r3, #0
 8019656:	e7e4      	b.n	8019622 <__hi0bits+0xa>

08019658 <__lo0bits>:
 8019658:	6803      	ldr	r3, [r0, #0]
 801965a:	f013 0207 	ands.w	r2, r3, #7
 801965e:	4601      	mov	r1, r0
 8019660:	d00b      	beq.n	801967a <__lo0bits+0x22>
 8019662:	07da      	lsls	r2, r3, #31
 8019664:	d424      	bmi.n	80196b0 <__lo0bits+0x58>
 8019666:	0798      	lsls	r0, r3, #30
 8019668:	bf49      	itett	mi
 801966a:	085b      	lsrmi	r3, r3, #1
 801966c:	089b      	lsrpl	r3, r3, #2
 801966e:	2001      	movmi	r0, #1
 8019670:	600b      	strmi	r3, [r1, #0]
 8019672:	bf5c      	itt	pl
 8019674:	600b      	strpl	r3, [r1, #0]
 8019676:	2002      	movpl	r0, #2
 8019678:	4770      	bx	lr
 801967a:	b298      	uxth	r0, r3
 801967c:	b9b0      	cbnz	r0, 80196ac <__lo0bits+0x54>
 801967e:	0c1b      	lsrs	r3, r3, #16
 8019680:	2010      	movs	r0, #16
 8019682:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019686:	bf04      	itt	eq
 8019688:	0a1b      	lsreq	r3, r3, #8
 801968a:	3008      	addeq	r0, #8
 801968c:	071a      	lsls	r2, r3, #28
 801968e:	bf04      	itt	eq
 8019690:	091b      	lsreq	r3, r3, #4
 8019692:	3004      	addeq	r0, #4
 8019694:	079a      	lsls	r2, r3, #30
 8019696:	bf04      	itt	eq
 8019698:	089b      	lsreq	r3, r3, #2
 801969a:	3002      	addeq	r0, #2
 801969c:	07da      	lsls	r2, r3, #31
 801969e:	d403      	bmi.n	80196a8 <__lo0bits+0x50>
 80196a0:	085b      	lsrs	r3, r3, #1
 80196a2:	f100 0001 	add.w	r0, r0, #1
 80196a6:	d005      	beq.n	80196b4 <__lo0bits+0x5c>
 80196a8:	600b      	str	r3, [r1, #0]
 80196aa:	4770      	bx	lr
 80196ac:	4610      	mov	r0, r2
 80196ae:	e7e8      	b.n	8019682 <__lo0bits+0x2a>
 80196b0:	2000      	movs	r0, #0
 80196b2:	4770      	bx	lr
 80196b4:	2020      	movs	r0, #32
 80196b6:	4770      	bx	lr

080196b8 <__i2b>:
 80196b8:	b510      	push	{r4, lr}
 80196ba:	460c      	mov	r4, r1
 80196bc:	2101      	movs	r1, #1
 80196be:	f7ff feff 	bl	80194c0 <_Balloc>
 80196c2:	4602      	mov	r2, r0
 80196c4:	b928      	cbnz	r0, 80196d2 <__i2b+0x1a>
 80196c6:	4b05      	ldr	r3, [pc, #20]	; (80196dc <__i2b+0x24>)
 80196c8:	4805      	ldr	r0, [pc, #20]	; (80196e0 <__i2b+0x28>)
 80196ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80196ce:	f001 f8ad 	bl	801a82c <__assert_func>
 80196d2:	2301      	movs	r3, #1
 80196d4:	6144      	str	r4, [r0, #20]
 80196d6:	6103      	str	r3, [r0, #16]
 80196d8:	bd10      	pop	{r4, pc}
 80196da:	bf00      	nop
 80196dc:	0801bc46 	.word	0x0801bc46
 80196e0:	0801bcb8 	.word	0x0801bcb8

080196e4 <__multiply>:
 80196e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196e8:	4614      	mov	r4, r2
 80196ea:	690a      	ldr	r2, [r1, #16]
 80196ec:	6923      	ldr	r3, [r4, #16]
 80196ee:	429a      	cmp	r2, r3
 80196f0:	bfb8      	it	lt
 80196f2:	460b      	movlt	r3, r1
 80196f4:	460d      	mov	r5, r1
 80196f6:	bfbc      	itt	lt
 80196f8:	4625      	movlt	r5, r4
 80196fa:	461c      	movlt	r4, r3
 80196fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019700:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019704:	68ab      	ldr	r3, [r5, #8]
 8019706:	6869      	ldr	r1, [r5, #4]
 8019708:	eb0a 0709 	add.w	r7, sl, r9
 801970c:	42bb      	cmp	r3, r7
 801970e:	b085      	sub	sp, #20
 8019710:	bfb8      	it	lt
 8019712:	3101      	addlt	r1, #1
 8019714:	f7ff fed4 	bl	80194c0 <_Balloc>
 8019718:	b930      	cbnz	r0, 8019728 <__multiply+0x44>
 801971a:	4602      	mov	r2, r0
 801971c:	4b42      	ldr	r3, [pc, #264]	; (8019828 <__multiply+0x144>)
 801971e:	4843      	ldr	r0, [pc, #268]	; (801982c <__multiply+0x148>)
 8019720:	f240 115d 	movw	r1, #349	; 0x15d
 8019724:	f001 f882 	bl	801a82c <__assert_func>
 8019728:	f100 0614 	add.w	r6, r0, #20
 801972c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019730:	4633      	mov	r3, r6
 8019732:	2200      	movs	r2, #0
 8019734:	4543      	cmp	r3, r8
 8019736:	d31e      	bcc.n	8019776 <__multiply+0x92>
 8019738:	f105 0c14 	add.w	ip, r5, #20
 801973c:	f104 0314 	add.w	r3, r4, #20
 8019740:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019744:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019748:	9202      	str	r2, [sp, #8]
 801974a:	ebac 0205 	sub.w	r2, ip, r5
 801974e:	3a15      	subs	r2, #21
 8019750:	f022 0203 	bic.w	r2, r2, #3
 8019754:	3204      	adds	r2, #4
 8019756:	f105 0115 	add.w	r1, r5, #21
 801975a:	458c      	cmp	ip, r1
 801975c:	bf38      	it	cc
 801975e:	2204      	movcc	r2, #4
 8019760:	9201      	str	r2, [sp, #4]
 8019762:	9a02      	ldr	r2, [sp, #8]
 8019764:	9303      	str	r3, [sp, #12]
 8019766:	429a      	cmp	r2, r3
 8019768:	d808      	bhi.n	801977c <__multiply+0x98>
 801976a:	2f00      	cmp	r7, #0
 801976c:	dc55      	bgt.n	801981a <__multiply+0x136>
 801976e:	6107      	str	r7, [r0, #16]
 8019770:	b005      	add	sp, #20
 8019772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019776:	f843 2b04 	str.w	r2, [r3], #4
 801977a:	e7db      	b.n	8019734 <__multiply+0x50>
 801977c:	f8b3 a000 	ldrh.w	sl, [r3]
 8019780:	f1ba 0f00 	cmp.w	sl, #0
 8019784:	d020      	beq.n	80197c8 <__multiply+0xe4>
 8019786:	f105 0e14 	add.w	lr, r5, #20
 801978a:	46b1      	mov	r9, r6
 801978c:	2200      	movs	r2, #0
 801978e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019792:	f8d9 b000 	ldr.w	fp, [r9]
 8019796:	b2a1      	uxth	r1, r4
 8019798:	fa1f fb8b 	uxth.w	fp, fp
 801979c:	fb0a b101 	mla	r1, sl, r1, fp
 80197a0:	4411      	add	r1, r2
 80197a2:	f8d9 2000 	ldr.w	r2, [r9]
 80197a6:	0c24      	lsrs	r4, r4, #16
 80197a8:	0c12      	lsrs	r2, r2, #16
 80197aa:	fb0a 2404 	mla	r4, sl, r4, r2
 80197ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80197b2:	b289      	uxth	r1, r1
 80197b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80197b8:	45f4      	cmp	ip, lr
 80197ba:	f849 1b04 	str.w	r1, [r9], #4
 80197be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80197c2:	d8e4      	bhi.n	801978e <__multiply+0xaa>
 80197c4:	9901      	ldr	r1, [sp, #4]
 80197c6:	5072      	str	r2, [r6, r1]
 80197c8:	9a03      	ldr	r2, [sp, #12]
 80197ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80197ce:	3304      	adds	r3, #4
 80197d0:	f1b9 0f00 	cmp.w	r9, #0
 80197d4:	d01f      	beq.n	8019816 <__multiply+0x132>
 80197d6:	6834      	ldr	r4, [r6, #0]
 80197d8:	f105 0114 	add.w	r1, r5, #20
 80197dc:	46b6      	mov	lr, r6
 80197de:	f04f 0a00 	mov.w	sl, #0
 80197e2:	880a      	ldrh	r2, [r1, #0]
 80197e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80197e8:	fb09 b202 	mla	r2, r9, r2, fp
 80197ec:	4492      	add	sl, r2
 80197ee:	b2a4      	uxth	r4, r4
 80197f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80197f4:	f84e 4b04 	str.w	r4, [lr], #4
 80197f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80197fc:	f8be 2000 	ldrh.w	r2, [lr]
 8019800:	0c24      	lsrs	r4, r4, #16
 8019802:	fb09 2404 	mla	r4, r9, r4, r2
 8019806:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801980a:	458c      	cmp	ip, r1
 801980c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019810:	d8e7      	bhi.n	80197e2 <__multiply+0xfe>
 8019812:	9a01      	ldr	r2, [sp, #4]
 8019814:	50b4      	str	r4, [r6, r2]
 8019816:	3604      	adds	r6, #4
 8019818:	e7a3      	b.n	8019762 <__multiply+0x7e>
 801981a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801981e:	2b00      	cmp	r3, #0
 8019820:	d1a5      	bne.n	801976e <__multiply+0x8a>
 8019822:	3f01      	subs	r7, #1
 8019824:	e7a1      	b.n	801976a <__multiply+0x86>
 8019826:	bf00      	nop
 8019828:	0801bc46 	.word	0x0801bc46
 801982c:	0801bcb8 	.word	0x0801bcb8

08019830 <__pow5mult>:
 8019830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019834:	4615      	mov	r5, r2
 8019836:	f012 0203 	ands.w	r2, r2, #3
 801983a:	4606      	mov	r6, r0
 801983c:	460f      	mov	r7, r1
 801983e:	d007      	beq.n	8019850 <__pow5mult+0x20>
 8019840:	4c25      	ldr	r4, [pc, #148]	; (80198d8 <__pow5mult+0xa8>)
 8019842:	3a01      	subs	r2, #1
 8019844:	2300      	movs	r3, #0
 8019846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801984a:	f7ff fe9b 	bl	8019584 <__multadd>
 801984e:	4607      	mov	r7, r0
 8019850:	10ad      	asrs	r5, r5, #2
 8019852:	d03d      	beq.n	80198d0 <__pow5mult+0xa0>
 8019854:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019856:	b97c      	cbnz	r4, 8019878 <__pow5mult+0x48>
 8019858:	2010      	movs	r0, #16
 801985a:	f7fd fd25 	bl	80172a8 <malloc>
 801985e:	4602      	mov	r2, r0
 8019860:	6270      	str	r0, [r6, #36]	; 0x24
 8019862:	b928      	cbnz	r0, 8019870 <__pow5mult+0x40>
 8019864:	4b1d      	ldr	r3, [pc, #116]	; (80198dc <__pow5mult+0xac>)
 8019866:	481e      	ldr	r0, [pc, #120]	; (80198e0 <__pow5mult+0xb0>)
 8019868:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801986c:	f000 ffde 	bl	801a82c <__assert_func>
 8019870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019874:	6004      	str	r4, [r0, #0]
 8019876:	60c4      	str	r4, [r0, #12]
 8019878:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801987c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019880:	b94c      	cbnz	r4, 8019896 <__pow5mult+0x66>
 8019882:	f240 2171 	movw	r1, #625	; 0x271
 8019886:	4630      	mov	r0, r6
 8019888:	f7ff ff16 	bl	80196b8 <__i2b>
 801988c:	2300      	movs	r3, #0
 801988e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019892:	4604      	mov	r4, r0
 8019894:	6003      	str	r3, [r0, #0]
 8019896:	f04f 0900 	mov.w	r9, #0
 801989a:	07eb      	lsls	r3, r5, #31
 801989c:	d50a      	bpl.n	80198b4 <__pow5mult+0x84>
 801989e:	4639      	mov	r1, r7
 80198a0:	4622      	mov	r2, r4
 80198a2:	4630      	mov	r0, r6
 80198a4:	f7ff ff1e 	bl	80196e4 <__multiply>
 80198a8:	4639      	mov	r1, r7
 80198aa:	4680      	mov	r8, r0
 80198ac:	4630      	mov	r0, r6
 80198ae:	f7ff fe47 	bl	8019540 <_Bfree>
 80198b2:	4647      	mov	r7, r8
 80198b4:	106d      	asrs	r5, r5, #1
 80198b6:	d00b      	beq.n	80198d0 <__pow5mult+0xa0>
 80198b8:	6820      	ldr	r0, [r4, #0]
 80198ba:	b938      	cbnz	r0, 80198cc <__pow5mult+0x9c>
 80198bc:	4622      	mov	r2, r4
 80198be:	4621      	mov	r1, r4
 80198c0:	4630      	mov	r0, r6
 80198c2:	f7ff ff0f 	bl	80196e4 <__multiply>
 80198c6:	6020      	str	r0, [r4, #0]
 80198c8:	f8c0 9000 	str.w	r9, [r0]
 80198cc:	4604      	mov	r4, r0
 80198ce:	e7e4      	b.n	801989a <__pow5mult+0x6a>
 80198d0:	4638      	mov	r0, r7
 80198d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198d6:	bf00      	nop
 80198d8:	0801be08 	.word	0x0801be08
 80198dc:	0801bbd0 	.word	0x0801bbd0
 80198e0:	0801bcb8 	.word	0x0801bcb8

080198e4 <__lshift>:
 80198e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198e8:	460c      	mov	r4, r1
 80198ea:	6849      	ldr	r1, [r1, #4]
 80198ec:	6923      	ldr	r3, [r4, #16]
 80198ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80198f2:	68a3      	ldr	r3, [r4, #8]
 80198f4:	4607      	mov	r7, r0
 80198f6:	4691      	mov	r9, r2
 80198f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80198fc:	f108 0601 	add.w	r6, r8, #1
 8019900:	42b3      	cmp	r3, r6
 8019902:	db0b      	blt.n	801991c <__lshift+0x38>
 8019904:	4638      	mov	r0, r7
 8019906:	f7ff fddb 	bl	80194c0 <_Balloc>
 801990a:	4605      	mov	r5, r0
 801990c:	b948      	cbnz	r0, 8019922 <__lshift+0x3e>
 801990e:	4602      	mov	r2, r0
 8019910:	4b28      	ldr	r3, [pc, #160]	; (80199b4 <__lshift+0xd0>)
 8019912:	4829      	ldr	r0, [pc, #164]	; (80199b8 <__lshift+0xd4>)
 8019914:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019918:	f000 ff88 	bl	801a82c <__assert_func>
 801991c:	3101      	adds	r1, #1
 801991e:	005b      	lsls	r3, r3, #1
 8019920:	e7ee      	b.n	8019900 <__lshift+0x1c>
 8019922:	2300      	movs	r3, #0
 8019924:	f100 0114 	add.w	r1, r0, #20
 8019928:	f100 0210 	add.w	r2, r0, #16
 801992c:	4618      	mov	r0, r3
 801992e:	4553      	cmp	r3, sl
 8019930:	db33      	blt.n	801999a <__lshift+0xb6>
 8019932:	6920      	ldr	r0, [r4, #16]
 8019934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019938:	f104 0314 	add.w	r3, r4, #20
 801993c:	f019 091f 	ands.w	r9, r9, #31
 8019940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019948:	d02b      	beq.n	80199a2 <__lshift+0xbe>
 801994a:	f1c9 0e20 	rsb	lr, r9, #32
 801994e:	468a      	mov	sl, r1
 8019950:	2200      	movs	r2, #0
 8019952:	6818      	ldr	r0, [r3, #0]
 8019954:	fa00 f009 	lsl.w	r0, r0, r9
 8019958:	4302      	orrs	r2, r0
 801995a:	f84a 2b04 	str.w	r2, [sl], #4
 801995e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019962:	459c      	cmp	ip, r3
 8019964:	fa22 f20e 	lsr.w	r2, r2, lr
 8019968:	d8f3      	bhi.n	8019952 <__lshift+0x6e>
 801996a:	ebac 0304 	sub.w	r3, ip, r4
 801996e:	3b15      	subs	r3, #21
 8019970:	f023 0303 	bic.w	r3, r3, #3
 8019974:	3304      	adds	r3, #4
 8019976:	f104 0015 	add.w	r0, r4, #21
 801997a:	4584      	cmp	ip, r0
 801997c:	bf38      	it	cc
 801997e:	2304      	movcc	r3, #4
 8019980:	50ca      	str	r2, [r1, r3]
 8019982:	b10a      	cbz	r2, 8019988 <__lshift+0xa4>
 8019984:	f108 0602 	add.w	r6, r8, #2
 8019988:	3e01      	subs	r6, #1
 801998a:	4638      	mov	r0, r7
 801998c:	612e      	str	r6, [r5, #16]
 801998e:	4621      	mov	r1, r4
 8019990:	f7ff fdd6 	bl	8019540 <_Bfree>
 8019994:	4628      	mov	r0, r5
 8019996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801999a:	f842 0f04 	str.w	r0, [r2, #4]!
 801999e:	3301      	adds	r3, #1
 80199a0:	e7c5      	b.n	801992e <__lshift+0x4a>
 80199a2:	3904      	subs	r1, #4
 80199a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80199a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80199ac:	459c      	cmp	ip, r3
 80199ae:	d8f9      	bhi.n	80199a4 <__lshift+0xc0>
 80199b0:	e7ea      	b.n	8019988 <__lshift+0xa4>
 80199b2:	bf00      	nop
 80199b4:	0801bc46 	.word	0x0801bc46
 80199b8:	0801bcb8 	.word	0x0801bcb8

080199bc <__mcmp>:
 80199bc:	b530      	push	{r4, r5, lr}
 80199be:	6902      	ldr	r2, [r0, #16]
 80199c0:	690c      	ldr	r4, [r1, #16]
 80199c2:	1b12      	subs	r2, r2, r4
 80199c4:	d10e      	bne.n	80199e4 <__mcmp+0x28>
 80199c6:	f100 0314 	add.w	r3, r0, #20
 80199ca:	3114      	adds	r1, #20
 80199cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80199d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80199d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80199d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80199dc:	42a5      	cmp	r5, r4
 80199de:	d003      	beq.n	80199e8 <__mcmp+0x2c>
 80199e0:	d305      	bcc.n	80199ee <__mcmp+0x32>
 80199e2:	2201      	movs	r2, #1
 80199e4:	4610      	mov	r0, r2
 80199e6:	bd30      	pop	{r4, r5, pc}
 80199e8:	4283      	cmp	r3, r0
 80199ea:	d3f3      	bcc.n	80199d4 <__mcmp+0x18>
 80199ec:	e7fa      	b.n	80199e4 <__mcmp+0x28>
 80199ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80199f2:	e7f7      	b.n	80199e4 <__mcmp+0x28>

080199f4 <__mdiff>:
 80199f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199f8:	460c      	mov	r4, r1
 80199fa:	4606      	mov	r6, r0
 80199fc:	4611      	mov	r1, r2
 80199fe:	4620      	mov	r0, r4
 8019a00:	4617      	mov	r7, r2
 8019a02:	f7ff ffdb 	bl	80199bc <__mcmp>
 8019a06:	1e05      	subs	r5, r0, #0
 8019a08:	d110      	bne.n	8019a2c <__mdiff+0x38>
 8019a0a:	4629      	mov	r1, r5
 8019a0c:	4630      	mov	r0, r6
 8019a0e:	f7ff fd57 	bl	80194c0 <_Balloc>
 8019a12:	b930      	cbnz	r0, 8019a22 <__mdiff+0x2e>
 8019a14:	4b39      	ldr	r3, [pc, #228]	; (8019afc <__mdiff+0x108>)
 8019a16:	4602      	mov	r2, r0
 8019a18:	f240 2132 	movw	r1, #562	; 0x232
 8019a1c:	4838      	ldr	r0, [pc, #224]	; (8019b00 <__mdiff+0x10c>)
 8019a1e:	f000 ff05 	bl	801a82c <__assert_func>
 8019a22:	2301      	movs	r3, #1
 8019a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a2c:	bfa4      	itt	ge
 8019a2e:	463b      	movge	r3, r7
 8019a30:	4627      	movge	r7, r4
 8019a32:	4630      	mov	r0, r6
 8019a34:	6879      	ldr	r1, [r7, #4]
 8019a36:	bfa6      	itte	ge
 8019a38:	461c      	movge	r4, r3
 8019a3a:	2500      	movge	r5, #0
 8019a3c:	2501      	movlt	r5, #1
 8019a3e:	f7ff fd3f 	bl	80194c0 <_Balloc>
 8019a42:	b920      	cbnz	r0, 8019a4e <__mdiff+0x5a>
 8019a44:	4b2d      	ldr	r3, [pc, #180]	; (8019afc <__mdiff+0x108>)
 8019a46:	4602      	mov	r2, r0
 8019a48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019a4c:	e7e6      	b.n	8019a1c <__mdiff+0x28>
 8019a4e:	693e      	ldr	r6, [r7, #16]
 8019a50:	60c5      	str	r5, [r0, #12]
 8019a52:	6925      	ldr	r5, [r4, #16]
 8019a54:	f107 0114 	add.w	r1, r7, #20
 8019a58:	f104 0914 	add.w	r9, r4, #20
 8019a5c:	f100 0e14 	add.w	lr, r0, #20
 8019a60:	f107 0210 	add.w	r2, r7, #16
 8019a64:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019a68:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019a6c:	46f2      	mov	sl, lr
 8019a6e:	2700      	movs	r7, #0
 8019a70:	f859 3b04 	ldr.w	r3, [r9], #4
 8019a74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019a78:	fa1f f883 	uxth.w	r8, r3
 8019a7c:	fa17 f78b 	uxtah	r7, r7, fp
 8019a80:	0c1b      	lsrs	r3, r3, #16
 8019a82:	eba7 0808 	sub.w	r8, r7, r8
 8019a86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019a8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019a8e:	fa1f f888 	uxth.w	r8, r8
 8019a92:	141f      	asrs	r7, r3, #16
 8019a94:	454d      	cmp	r5, r9
 8019a96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019a9a:	f84a 3b04 	str.w	r3, [sl], #4
 8019a9e:	d8e7      	bhi.n	8019a70 <__mdiff+0x7c>
 8019aa0:	1b2b      	subs	r3, r5, r4
 8019aa2:	3b15      	subs	r3, #21
 8019aa4:	f023 0303 	bic.w	r3, r3, #3
 8019aa8:	3304      	adds	r3, #4
 8019aaa:	3415      	adds	r4, #21
 8019aac:	42a5      	cmp	r5, r4
 8019aae:	bf38      	it	cc
 8019ab0:	2304      	movcc	r3, #4
 8019ab2:	4419      	add	r1, r3
 8019ab4:	4473      	add	r3, lr
 8019ab6:	469e      	mov	lr, r3
 8019ab8:	460d      	mov	r5, r1
 8019aba:	4565      	cmp	r5, ip
 8019abc:	d30e      	bcc.n	8019adc <__mdiff+0xe8>
 8019abe:	f10c 0203 	add.w	r2, ip, #3
 8019ac2:	1a52      	subs	r2, r2, r1
 8019ac4:	f022 0203 	bic.w	r2, r2, #3
 8019ac8:	3903      	subs	r1, #3
 8019aca:	458c      	cmp	ip, r1
 8019acc:	bf38      	it	cc
 8019ace:	2200      	movcc	r2, #0
 8019ad0:	441a      	add	r2, r3
 8019ad2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019ad6:	b17b      	cbz	r3, 8019af8 <__mdiff+0x104>
 8019ad8:	6106      	str	r6, [r0, #16]
 8019ada:	e7a5      	b.n	8019a28 <__mdiff+0x34>
 8019adc:	f855 8b04 	ldr.w	r8, [r5], #4
 8019ae0:	fa17 f488 	uxtah	r4, r7, r8
 8019ae4:	1422      	asrs	r2, r4, #16
 8019ae6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019aea:	b2a4      	uxth	r4, r4
 8019aec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019af0:	f84e 4b04 	str.w	r4, [lr], #4
 8019af4:	1417      	asrs	r7, r2, #16
 8019af6:	e7e0      	b.n	8019aba <__mdiff+0xc6>
 8019af8:	3e01      	subs	r6, #1
 8019afa:	e7ea      	b.n	8019ad2 <__mdiff+0xde>
 8019afc:	0801bc46 	.word	0x0801bc46
 8019b00:	0801bcb8 	.word	0x0801bcb8

08019b04 <__d2b>:
 8019b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019b08:	4689      	mov	r9, r1
 8019b0a:	2101      	movs	r1, #1
 8019b0c:	ec57 6b10 	vmov	r6, r7, d0
 8019b10:	4690      	mov	r8, r2
 8019b12:	f7ff fcd5 	bl	80194c0 <_Balloc>
 8019b16:	4604      	mov	r4, r0
 8019b18:	b930      	cbnz	r0, 8019b28 <__d2b+0x24>
 8019b1a:	4602      	mov	r2, r0
 8019b1c:	4b25      	ldr	r3, [pc, #148]	; (8019bb4 <__d2b+0xb0>)
 8019b1e:	4826      	ldr	r0, [pc, #152]	; (8019bb8 <__d2b+0xb4>)
 8019b20:	f240 310a 	movw	r1, #778	; 0x30a
 8019b24:	f000 fe82 	bl	801a82c <__assert_func>
 8019b28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019b2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019b30:	bb35      	cbnz	r5, 8019b80 <__d2b+0x7c>
 8019b32:	2e00      	cmp	r6, #0
 8019b34:	9301      	str	r3, [sp, #4]
 8019b36:	d028      	beq.n	8019b8a <__d2b+0x86>
 8019b38:	4668      	mov	r0, sp
 8019b3a:	9600      	str	r6, [sp, #0]
 8019b3c:	f7ff fd8c 	bl	8019658 <__lo0bits>
 8019b40:	9900      	ldr	r1, [sp, #0]
 8019b42:	b300      	cbz	r0, 8019b86 <__d2b+0x82>
 8019b44:	9a01      	ldr	r2, [sp, #4]
 8019b46:	f1c0 0320 	rsb	r3, r0, #32
 8019b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8019b4e:	430b      	orrs	r3, r1
 8019b50:	40c2      	lsrs	r2, r0
 8019b52:	6163      	str	r3, [r4, #20]
 8019b54:	9201      	str	r2, [sp, #4]
 8019b56:	9b01      	ldr	r3, [sp, #4]
 8019b58:	61a3      	str	r3, [r4, #24]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	bf14      	ite	ne
 8019b5e:	2202      	movne	r2, #2
 8019b60:	2201      	moveq	r2, #1
 8019b62:	6122      	str	r2, [r4, #16]
 8019b64:	b1d5      	cbz	r5, 8019b9c <__d2b+0x98>
 8019b66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019b6a:	4405      	add	r5, r0
 8019b6c:	f8c9 5000 	str.w	r5, [r9]
 8019b70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019b74:	f8c8 0000 	str.w	r0, [r8]
 8019b78:	4620      	mov	r0, r4
 8019b7a:	b003      	add	sp, #12
 8019b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019b84:	e7d5      	b.n	8019b32 <__d2b+0x2e>
 8019b86:	6161      	str	r1, [r4, #20]
 8019b88:	e7e5      	b.n	8019b56 <__d2b+0x52>
 8019b8a:	a801      	add	r0, sp, #4
 8019b8c:	f7ff fd64 	bl	8019658 <__lo0bits>
 8019b90:	9b01      	ldr	r3, [sp, #4]
 8019b92:	6163      	str	r3, [r4, #20]
 8019b94:	2201      	movs	r2, #1
 8019b96:	6122      	str	r2, [r4, #16]
 8019b98:	3020      	adds	r0, #32
 8019b9a:	e7e3      	b.n	8019b64 <__d2b+0x60>
 8019b9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019ba0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019ba4:	f8c9 0000 	str.w	r0, [r9]
 8019ba8:	6918      	ldr	r0, [r3, #16]
 8019baa:	f7ff fd35 	bl	8019618 <__hi0bits>
 8019bae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019bb2:	e7df      	b.n	8019b74 <__d2b+0x70>
 8019bb4:	0801bc46 	.word	0x0801bc46
 8019bb8:	0801bcb8 	.word	0x0801bcb8

08019bbc <_calloc_r>:
 8019bbc:	b513      	push	{r0, r1, r4, lr}
 8019bbe:	434a      	muls	r2, r1
 8019bc0:	4611      	mov	r1, r2
 8019bc2:	9201      	str	r2, [sp, #4]
 8019bc4:	f7fd fbe6 	bl	8017394 <_malloc_r>
 8019bc8:	4604      	mov	r4, r0
 8019bca:	b118      	cbz	r0, 8019bd4 <_calloc_r+0x18>
 8019bcc:	9a01      	ldr	r2, [sp, #4]
 8019bce:	2100      	movs	r1, #0
 8019bd0:	f7fd fb88 	bl	80172e4 <memset>
 8019bd4:	4620      	mov	r0, r4
 8019bd6:	b002      	add	sp, #8
 8019bd8:	bd10      	pop	{r4, pc}

08019bda <_realloc_r>:
 8019bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bdc:	4607      	mov	r7, r0
 8019bde:	4614      	mov	r4, r2
 8019be0:	460e      	mov	r6, r1
 8019be2:	b921      	cbnz	r1, 8019bee <_realloc_r+0x14>
 8019be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019be8:	4611      	mov	r1, r2
 8019bea:	f7fd bbd3 	b.w	8017394 <_malloc_r>
 8019bee:	b922      	cbnz	r2, 8019bfa <_realloc_r+0x20>
 8019bf0:	f7fd fb80 	bl	80172f4 <_free_r>
 8019bf4:	4625      	mov	r5, r4
 8019bf6:	4628      	mov	r0, r5
 8019bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bfa:	f000 fe69 	bl	801a8d0 <_malloc_usable_size_r>
 8019bfe:	42a0      	cmp	r0, r4
 8019c00:	d20f      	bcs.n	8019c22 <_realloc_r+0x48>
 8019c02:	4621      	mov	r1, r4
 8019c04:	4638      	mov	r0, r7
 8019c06:	f7fd fbc5 	bl	8017394 <_malloc_r>
 8019c0a:	4605      	mov	r5, r0
 8019c0c:	2800      	cmp	r0, #0
 8019c0e:	d0f2      	beq.n	8019bf6 <_realloc_r+0x1c>
 8019c10:	4631      	mov	r1, r6
 8019c12:	4622      	mov	r2, r4
 8019c14:	f7fd fb58 	bl	80172c8 <memcpy>
 8019c18:	4631      	mov	r1, r6
 8019c1a:	4638      	mov	r0, r7
 8019c1c:	f7fd fb6a 	bl	80172f4 <_free_r>
 8019c20:	e7e9      	b.n	8019bf6 <_realloc_r+0x1c>
 8019c22:	4635      	mov	r5, r6
 8019c24:	e7e7      	b.n	8019bf6 <_realloc_r+0x1c>

08019c26 <__ssputs_r>:
 8019c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c2a:	688e      	ldr	r6, [r1, #8]
 8019c2c:	429e      	cmp	r6, r3
 8019c2e:	4682      	mov	sl, r0
 8019c30:	460c      	mov	r4, r1
 8019c32:	4690      	mov	r8, r2
 8019c34:	461f      	mov	r7, r3
 8019c36:	d838      	bhi.n	8019caa <__ssputs_r+0x84>
 8019c38:	898a      	ldrh	r2, [r1, #12]
 8019c3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019c3e:	d032      	beq.n	8019ca6 <__ssputs_r+0x80>
 8019c40:	6825      	ldr	r5, [r4, #0]
 8019c42:	6909      	ldr	r1, [r1, #16]
 8019c44:	eba5 0901 	sub.w	r9, r5, r1
 8019c48:	6965      	ldr	r5, [r4, #20]
 8019c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c52:	3301      	adds	r3, #1
 8019c54:	444b      	add	r3, r9
 8019c56:	106d      	asrs	r5, r5, #1
 8019c58:	429d      	cmp	r5, r3
 8019c5a:	bf38      	it	cc
 8019c5c:	461d      	movcc	r5, r3
 8019c5e:	0553      	lsls	r3, r2, #21
 8019c60:	d531      	bpl.n	8019cc6 <__ssputs_r+0xa0>
 8019c62:	4629      	mov	r1, r5
 8019c64:	f7fd fb96 	bl	8017394 <_malloc_r>
 8019c68:	4606      	mov	r6, r0
 8019c6a:	b950      	cbnz	r0, 8019c82 <__ssputs_r+0x5c>
 8019c6c:	230c      	movs	r3, #12
 8019c6e:	f8ca 3000 	str.w	r3, [sl]
 8019c72:	89a3      	ldrh	r3, [r4, #12]
 8019c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c78:	81a3      	strh	r3, [r4, #12]
 8019c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c82:	6921      	ldr	r1, [r4, #16]
 8019c84:	464a      	mov	r2, r9
 8019c86:	f7fd fb1f 	bl	80172c8 <memcpy>
 8019c8a:	89a3      	ldrh	r3, [r4, #12]
 8019c8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c94:	81a3      	strh	r3, [r4, #12]
 8019c96:	6126      	str	r6, [r4, #16]
 8019c98:	6165      	str	r5, [r4, #20]
 8019c9a:	444e      	add	r6, r9
 8019c9c:	eba5 0509 	sub.w	r5, r5, r9
 8019ca0:	6026      	str	r6, [r4, #0]
 8019ca2:	60a5      	str	r5, [r4, #8]
 8019ca4:	463e      	mov	r6, r7
 8019ca6:	42be      	cmp	r6, r7
 8019ca8:	d900      	bls.n	8019cac <__ssputs_r+0x86>
 8019caa:	463e      	mov	r6, r7
 8019cac:	4632      	mov	r2, r6
 8019cae:	6820      	ldr	r0, [r4, #0]
 8019cb0:	4641      	mov	r1, r8
 8019cb2:	f7ff fbdf 	bl	8019474 <memmove>
 8019cb6:	68a3      	ldr	r3, [r4, #8]
 8019cb8:	6822      	ldr	r2, [r4, #0]
 8019cba:	1b9b      	subs	r3, r3, r6
 8019cbc:	4432      	add	r2, r6
 8019cbe:	60a3      	str	r3, [r4, #8]
 8019cc0:	6022      	str	r2, [r4, #0]
 8019cc2:	2000      	movs	r0, #0
 8019cc4:	e7db      	b.n	8019c7e <__ssputs_r+0x58>
 8019cc6:	462a      	mov	r2, r5
 8019cc8:	f7ff ff87 	bl	8019bda <_realloc_r>
 8019ccc:	4606      	mov	r6, r0
 8019cce:	2800      	cmp	r0, #0
 8019cd0:	d1e1      	bne.n	8019c96 <__ssputs_r+0x70>
 8019cd2:	6921      	ldr	r1, [r4, #16]
 8019cd4:	4650      	mov	r0, sl
 8019cd6:	f7fd fb0d 	bl	80172f4 <_free_r>
 8019cda:	e7c7      	b.n	8019c6c <__ssputs_r+0x46>

08019cdc <_svfiprintf_r>:
 8019cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ce0:	4698      	mov	r8, r3
 8019ce2:	898b      	ldrh	r3, [r1, #12]
 8019ce4:	061b      	lsls	r3, r3, #24
 8019ce6:	b09d      	sub	sp, #116	; 0x74
 8019ce8:	4607      	mov	r7, r0
 8019cea:	460d      	mov	r5, r1
 8019cec:	4614      	mov	r4, r2
 8019cee:	d50e      	bpl.n	8019d0e <_svfiprintf_r+0x32>
 8019cf0:	690b      	ldr	r3, [r1, #16]
 8019cf2:	b963      	cbnz	r3, 8019d0e <_svfiprintf_r+0x32>
 8019cf4:	2140      	movs	r1, #64	; 0x40
 8019cf6:	f7fd fb4d 	bl	8017394 <_malloc_r>
 8019cfa:	6028      	str	r0, [r5, #0]
 8019cfc:	6128      	str	r0, [r5, #16]
 8019cfe:	b920      	cbnz	r0, 8019d0a <_svfiprintf_r+0x2e>
 8019d00:	230c      	movs	r3, #12
 8019d02:	603b      	str	r3, [r7, #0]
 8019d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d08:	e0d1      	b.n	8019eae <_svfiprintf_r+0x1d2>
 8019d0a:	2340      	movs	r3, #64	; 0x40
 8019d0c:	616b      	str	r3, [r5, #20]
 8019d0e:	2300      	movs	r3, #0
 8019d10:	9309      	str	r3, [sp, #36]	; 0x24
 8019d12:	2320      	movs	r3, #32
 8019d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d1c:	2330      	movs	r3, #48	; 0x30
 8019d1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019ec8 <_svfiprintf_r+0x1ec>
 8019d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d26:	f04f 0901 	mov.w	r9, #1
 8019d2a:	4623      	mov	r3, r4
 8019d2c:	469a      	mov	sl, r3
 8019d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d32:	b10a      	cbz	r2, 8019d38 <_svfiprintf_r+0x5c>
 8019d34:	2a25      	cmp	r2, #37	; 0x25
 8019d36:	d1f9      	bne.n	8019d2c <_svfiprintf_r+0x50>
 8019d38:	ebba 0b04 	subs.w	fp, sl, r4
 8019d3c:	d00b      	beq.n	8019d56 <_svfiprintf_r+0x7a>
 8019d3e:	465b      	mov	r3, fp
 8019d40:	4622      	mov	r2, r4
 8019d42:	4629      	mov	r1, r5
 8019d44:	4638      	mov	r0, r7
 8019d46:	f7ff ff6e 	bl	8019c26 <__ssputs_r>
 8019d4a:	3001      	adds	r0, #1
 8019d4c:	f000 80aa 	beq.w	8019ea4 <_svfiprintf_r+0x1c8>
 8019d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d52:	445a      	add	r2, fp
 8019d54:	9209      	str	r2, [sp, #36]	; 0x24
 8019d56:	f89a 3000 	ldrb.w	r3, [sl]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	f000 80a2 	beq.w	8019ea4 <_svfiprintf_r+0x1c8>
 8019d60:	2300      	movs	r3, #0
 8019d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d6a:	f10a 0a01 	add.w	sl, sl, #1
 8019d6e:	9304      	str	r3, [sp, #16]
 8019d70:	9307      	str	r3, [sp, #28]
 8019d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d76:	931a      	str	r3, [sp, #104]	; 0x68
 8019d78:	4654      	mov	r4, sl
 8019d7a:	2205      	movs	r2, #5
 8019d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d80:	4851      	ldr	r0, [pc, #324]	; (8019ec8 <_svfiprintf_r+0x1ec>)
 8019d82:	f7e6 fa3d 	bl	8000200 <memchr>
 8019d86:	9a04      	ldr	r2, [sp, #16]
 8019d88:	b9d8      	cbnz	r0, 8019dc2 <_svfiprintf_r+0xe6>
 8019d8a:	06d0      	lsls	r0, r2, #27
 8019d8c:	bf44      	itt	mi
 8019d8e:	2320      	movmi	r3, #32
 8019d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d94:	0711      	lsls	r1, r2, #28
 8019d96:	bf44      	itt	mi
 8019d98:	232b      	movmi	r3, #43	; 0x2b
 8019d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8019da2:	2b2a      	cmp	r3, #42	; 0x2a
 8019da4:	d015      	beq.n	8019dd2 <_svfiprintf_r+0xf6>
 8019da6:	9a07      	ldr	r2, [sp, #28]
 8019da8:	4654      	mov	r4, sl
 8019daa:	2000      	movs	r0, #0
 8019dac:	f04f 0c0a 	mov.w	ip, #10
 8019db0:	4621      	mov	r1, r4
 8019db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019db6:	3b30      	subs	r3, #48	; 0x30
 8019db8:	2b09      	cmp	r3, #9
 8019dba:	d94e      	bls.n	8019e5a <_svfiprintf_r+0x17e>
 8019dbc:	b1b0      	cbz	r0, 8019dec <_svfiprintf_r+0x110>
 8019dbe:	9207      	str	r2, [sp, #28]
 8019dc0:	e014      	b.n	8019dec <_svfiprintf_r+0x110>
 8019dc2:	eba0 0308 	sub.w	r3, r0, r8
 8019dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8019dca:	4313      	orrs	r3, r2
 8019dcc:	9304      	str	r3, [sp, #16]
 8019dce:	46a2      	mov	sl, r4
 8019dd0:	e7d2      	b.n	8019d78 <_svfiprintf_r+0x9c>
 8019dd2:	9b03      	ldr	r3, [sp, #12]
 8019dd4:	1d19      	adds	r1, r3, #4
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	9103      	str	r1, [sp, #12]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	bfbb      	ittet	lt
 8019dde:	425b      	neglt	r3, r3
 8019de0:	f042 0202 	orrlt.w	r2, r2, #2
 8019de4:	9307      	strge	r3, [sp, #28]
 8019de6:	9307      	strlt	r3, [sp, #28]
 8019de8:	bfb8      	it	lt
 8019dea:	9204      	strlt	r2, [sp, #16]
 8019dec:	7823      	ldrb	r3, [r4, #0]
 8019dee:	2b2e      	cmp	r3, #46	; 0x2e
 8019df0:	d10c      	bne.n	8019e0c <_svfiprintf_r+0x130>
 8019df2:	7863      	ldrb	r3, [r4, #1]
 8019df4:	2b2a      	cmp	r3, #42	; 0x2a
 8019df6:	d135      	bne.n	8019e64 <_svfiprintf_r+0x188>
 8019df8:	9b03      	ldr	r3, [sp, #12]
 8019dfa:	1d1a      	adds	r2, r3, #4
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	9203      	str	r2, [sp, #12]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	bfb8      	it	lt
 8019e04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019e08:	3402      	adds	r4, #2
 8019e0a:	9305      	str	r3, [sp, #20]
 8019e0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019ed8 <_svfiprintf_r+0x1fc>
 8019e10:	7821      	ldrb	r1, [r4, #0]
 8019e12:	2203      	movs	r2, #3
 8019e14:	4650      	mov	r0, sl
 8019e16:	f7e6 f9f3 	bl	8000200 <memchr>
 8019e1a:	b140      	cbz	r0, 8019e2e <_svfiprintf_r+0x152>
 8019e1c:	2340      	movs	r3, #64	; 0x40
 8019e1e:	eba0 000a 	sub.w	r0, r0, sl
 8019e22:	fa03 f000 	lsl.w	r0, r3, r0
 8019e26:	9b04      	ldr	r3, [sp, #16]
 8019e28:	4303      	orrs	r3, r0
 8019e2a:	3401      	adds	r4, #1
 8019e2c:	9304      	str	r3, [sp, #16]
 8019e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e32:	4826      	ldr	r0, [pc, #152]	; (8019ecc <_svfiprintf_r+0x1f0>)
 8019e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e38:	2206      	movs	r2, #6
 8019e3a:	f7e6 f9e1 	bl	8000200 <memchr>
 8019e3e:	2800      	cmp	r0, #0
 8019e40:	d038      	beq.n	8019eb4 <_svfiprintf_r+0x1d8>
 8019e42:	4b23      	ldr	r3, [pc, #140]	; (8019ed0 <_svfiprintf_r+0x1f4>)
 8019e44:	bb1b      	cbnz	r3, 8019e8e <_svfiprintf_r+0x1b2>
 8019e46:	9b03      	ldr	r3, [sp, #12]
 8019e48:	3307      	adds	r3, #7
 8019e4a:	f023 0307 	bic.w	r3, r3, #7
 8019e4e:	3308      	adds	r3, #8
 8019e50:	9303      	str	r3, [sp, #12]
 8019e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e54:	4433      	add	r3, r6
 8019e56:	9309      	str	r3, [sp, #36]	; 0x24
 8019e58:	e767      	b.n	8019d2a <_svfiprintf_r+0x4e>
 8019e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e5e:	460c      	mov	r4, r1
 8019e60:	2001      	movs	r0, #1
 8019e62:	e7a5      	b.n	8019db0 <_svfiprintf_r+0xd4>
 8019e64:	2300      	movs	r3, #0
 8019e66:	3401      	adds	r4, #1
 8019e68:	9305      	str	r3, [sp, #20]
 8019e6a:	4619      	mov	r1, r3
 8019e6c:	f04f 0c0a 	mov.w	ip, #10
 8019e70:	4620      	mov	r0, r4
 8019e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e76:	3a30      	subs	r2, #48	; 0x30
 8019e78:	2a09      	cmp	r2, #9
 8019e7a:	d903      	bls.n	8019e84 <_svfiprintf_r+0x1a8>
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d0c5      	beq.n	8019e0c <_svfiprintf_r+0x130>
 8019e80:	9105      	str	r1, [sp, #20]
 8019e82:	e7c3      	b.n	8019e0c <_svfiprintf_r+0x130>
 8019e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e88:	4604      	mov	r4, r0
 8019e8a:	2301      	movs	r3, #1
 8019e8c:	e7f0      	b.n	8019e70 <_svfiprintf_r+0x194>
 8019e8e:	ab03      	add	r3, sp, #12
 8019e90:	9300      	str	r3, [sp, #0]
 8019e92:	462a      	mov	r2, r5
 8019e94:	4b0f      	ldr	r3, [pc, #60]	; (8019ed4 <_svfiprintf_r+0x1f8>)
 8019e96:	a904      	add	r1, sp, #16
 8019e98:	4638      	mov	r0, r7
 8019e9a:	f7fd fccf 	bl	801783c <_printf_float>
 8019e9e:	1c42      	adds	r2, r0, #1
 8019ea0:	4606      	mov	r6, r0
 8019ea2:	d1d6      	bne.n	8019e52 <_svfiprintf_r+0x176>
 8019ea4:	89ab      	ldrh	r3, [r5, #12]
 8019ea6:	065b      	lsls	r3, r3, #25
 8019ea8:	f53f af2c 	bmi.w	8019d04 <_svfiprintf_r+0x28>
 8019eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019eae:	b01d      	add	sp, #116	; 0x74
 8019eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eb4:	ab03      	add	r3, sp, #12
 8019eb6:	9300      	str	r3, [sp, #0]
 8019eb8:	462a      	mov	r2, r5
 8019eba:	4b06      	ldr	r3, [pc, #24]	; (8019ed4 <_svfiprintf_r+0x1f8>)
 8019ebc:	a904      	add	r1, sp, #16
 8019ebe:	4638      	mov	r0, r7
 8019ec0:	f7fd ff60 	bl	8017d84 <_printf_i>
 8019ec4:	e7eb      	b.n	8019e9e <_svfiprintf_r+0x1c2>
 8019ec6:	bf00      	nop
 8019ec8:	0801bb80 	.word	0x0801bb80
 8019ecc:	0801bb8a 	.word	0x0801bb8a
 8019ed0:	0801783d 	.word	0x0801783d
 8019ed4:	08019c27 	.word	0x08019c27
 8019ed8:	0801bb86 	.word	0x0801bb86

08019edc <_sungetc_r>:
 8019edc:	b538      	push	{r3, r4, r5, lr}
 8019ede:	1c4b      	adds	r3, r1, #1
 8019ee0:	4614      	mov	r4, r2
 8019ee2:	d103      	bne.n	8019eec <_sungetc_r+0x10>
 8019ee4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019ee8:	4628      	mov	r0, r5
 8019eea:	bd38      	pop	{r3, r4, r5, pc}
 8019eec:	8993      	ldrh	r3, [r2, #12]
 8019eee:	f023 0320 	bic.w	r3, r3, #32
 8019ef2:	8193      	strh	r3, [r2, #12]
 8019ef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019ef6:	6852      	ldr	r2, [r2, #4]
 8019ef8:	b2cd      	uxtb	r5, r1
 8019efa:	b18b      	cbz	r3, 8019f20 <_sungetc_r+0x44>
 8019efc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019efe:	4293      	cmp	r3, r2
 8019f00:	dd08      	ble.n	8019f14 <_sungetc_r+0x38>
 8019f02:	6823      	ldr	r3, [r4, #0]
 8019f04:	1e5a      	subs	r2, r3, #1
 8019f06:	6022      	str	r2, [r4, #0]
 8019f08:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019f0c:	6863      	ldr	r3, [r4, #4]
 8019f0e:	3301      	adds	r3, #1
 8019f10:	6063      	str	r3, [r4, #4]
 8019f12:	e7e9      	b.n	8019ee8 <_sungetc_r+0xc>
 8019f14:	4621      	mov	r1, r4
 8019f16:	f000 fc4f 	bl	801a7b8 <__submore>
 8019f1a:	2800      	cmp	r0, #0
 8019f1c:	d0f1      	beq.n	8019f02 <_sungetc_r+0x26>
 8019f1e:	e7e1      	b.n	8019ee4 <_sungetc_r+0x8>
 8019f20:	6921      	ldr	r1, [r4, #16]
 8019f22:	6823      	ldr	r3, [r4, #0]
 8019f24:	b151      	cbz	r1, 8019f3c <_sungetc_r+0x60>
 8019f26:	4299      	cmp	r1, r3
 8019f28:	d208      	bcs.n	8019f3c <_sungetc_r+0x60>
 8019f2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019f2e:	42a9      	cmp	r1, r5
 8019f30:	d104      	bne.n	8019f3c <_sungetc_r+0x60>
 8019f32:	3b01      	subs	r3, #1
 8019f34:	3201      	adds	r2, #1
 8019f36:	6023      	str	r3, [r4, #0]
 8019f38:	6062      	str	r2, [r4, #4]
 8019f3a:	e7d5      	b.n	8019ee8 <_sungetc_r+0xc>
 8019f3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f44:	6363      	str	r3, [r4, #52]	; 0x34
 8019f46:	2303      	movs	r3, #3
 8019f48:	63a3      	str	r3, [r4, #56]	; 0x38
 8019f4a:	4623      	mov	r3, r4
 8019f4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019f50:	6023      	str	r3, [r4, #0]
 8019f52:	2301      	movs	r3, #1
 8019f54:	e7dc      	b.n	8019f10 <_sungetc_r+0x34>

08019f56 <__ssrefill_r>:
 8019f56:	b510      	push	{r4, lr}
 8019f58:	460c      	mov	r4, r1
 8019f5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019f5c:	b169      	cbz	r1, 8019f7a <__ssrefill_r+0x24>
 8019f5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f62:	4299      	cmp	r1, r3
 8019f64:	d001      	beq.n	8019f6a <__ssrefill_r+0x14>
 8019f66:	f7fd f9c5 	bl	80172f4 <_free_r>
 8019f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019f6c:	6063      	str	r3, [r4, #4]
 8019f6e:	2000      	movs	r0, #0
 8019f70:	6360      	str	r0, [r4, #52]	; 0x34
 8019f72:	b113      	cbz	r3, 8019f7a <__ssrefill_r+0x24>
 8019f74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019f76:	6023      	str	r3, [r4, #0]
 8019f78:	bd10      	pop	{r4, pc}
 8019f7a:	6923      	ldr	r3, [r4, #16]
 8019f7c:	6023      	str	r3, [r4, #0]
 8019f7e:	2300      	movs	r3, #0
 8019f80:	6063      	str	r3, [r4, #4]
 8019f82:	89a3      	ldrh	r3, [r4, #12]
 8019f84:	f043 0320 	orr.w	r3, r3, #32
 8019f88:	81a3      	strh	r3, [r4, #12]
 8019f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f8e:	e7f3      	b.n	8019f78 <__ssrefill_r+0x22>

08019f90 <__ssvfiscanf_r>:
 8019f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f94:	460c      	mov	r4, r1
 8019f96:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019f9a:	2100      	movs	r1, #0
 8019f9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8019fa0:	49b2      	ldr	r1, [pc, #712]	; (801a26c <__ssvfiscanf_r+0x2dc>)
 8019fa2:	91a0      	str	r1, [sp, #640]	; 0x280
 8019fa4:	f10d 0804 	add.w	r8, sp, #4
 8019fa8:	49b1      	ldr	r1, [pc, #708]	; (801a270 <__ssvfiscanf_r+0x2e0>)
 8019faa:	4fb2      	ldr	r7, [pc, #712]	; (801a274 <__ssvfiscanf_r+0x2e4>)
 8019fac:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801a278 <__ssvfiscanf_r+0x2e8>
 8019fb0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019fb4:	4606      	mov	r6, r0
 8019fb6:	91a1      	str	r1, [sp, #644]	; 0x284
 8019fb8:	9300      	str	r3, [sp, #0]
 8019fba:	f892 a000 	ldrb.w	sl, [r2]
 8019fbe:	f1ba 0f00 	cmp.w	sl, #0
 8019fc2:	f000 8151 	beq.w	801a268 <__ssvfiscanf_r+0x2d8>
 8019fc6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8019fca:	f013 0308 	ands.w	r3, r3, #8
 8019fce:	f102 0501 	add.w	r5, r2, #1
 8019fd2:	d019      	beq.n	801a008 <__ssvfiscanf_r+0x78>
 8019fd4:	6863      	ldr	r3, [r4, #4]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	dd0f      	ble.n	8019ffa <__ssvfiscanf_r+0x6a>
 8019fda:	6823      	ldr	r3, [r4, #0]
 8019fdc:	781a      	ldrb	r2, [r3, #0]
 8019fde:	5cba      	ldrb	r2, [r7, r2]
 8019fe0:	0712      	lsls	r2, r2, #28
 8019fe2:	d401      	bmi.n	8019fe8 <__ssvfiscanf_r+0x58>
 8019fe4:	462a      	mov	r2, r5
 8019fe6:	e7e8      	b.n	8019fba <__ssvfiscanf_r+0x2a>
 8019fe8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019fea:	3201      	adds	r2, #1
 8019fec:	9245      	str	r2, [sp, #276]	; 0x114
 8019fee:	6862      	ldr	r2, [r4, #4]
 8019ff0:	3301      	adds	r3, #1
 8019ff2:	3a01      	subs	r2, #1
 8019ff4:	6062      	str	r2, [r4, #4]
 8019ff6:	6023      	str	r3, [r4, #0]
 8019ff8:	e7ec      	b.n	8019fd4 <__ssvfiscanf_r+0x44>
 8019ffa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019ffc:	4621      	mov	r1, r4
 8019ffe:	4630      	mov	r0, r6
 801a000:	4798      	blx	r3
 801a002:	2800      	cmp	r0, #0
 801a004:	d0e9      	beq.n	8019fda <__ssvfiscanf_r+0x4a>
 801a006:	e7ed      	b.n	8019fe4 <__ssvfiscanf_r+0x54>
 801a008:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801a00c:	f040 8083 	bne.w	801a116 <__ssvfiscanf_r+0x186>
 801a010:	9341      	str	r3, [sp, #260]	; 0x104
 801a012:	9343      	str	r3, [sp, #268]	; 0x10c
 801a014:	7853      	ldrb	r3, [r2, #1]
 801a016:	2b2a      	cmp	r3, #42	; 0x2a
 801a018:	bf02      	ittt	eq
 801a01a:	2310      	moveq	r3, #16
 801a01c:	1c95      	addeq	r5, r2, #2
 801a01e:	9341      	streq	r3, [sp, #260]	; 0x104
 801a020:	220a      	movs	r2, #10
 801a022:	46ab      	mov	fp, r5
 801a024:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801a028:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801a02c:	2b09      	cmp	r3, #9
 801a02e:	d91d      	bls.n	801a06c <__ssvfiscanf_r+0xdc>
 801a030:	4891      	ldr	r0, [pc, #580]	; (801a278 <__ssvfiscanf_r+0x2e8>)
 801a032:	2203      	movs	r2, #3
 801a034:	f7e6 f8e4 	bl	8000200 <memchr>
 801a038:	b140      	cbz	r0, 801a04c <__ssvfiscanf_r+0xbc>
 801a03a:	2301      	movs	r3, #1
 801a03c:	eba0 0009 	sub.w	r0, r0, r9
 801a040:	fa03 f000 	lsl.w	r0, r3, r0
 801a044:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a046:	4318      	orrs	r0, r3
 801a048:	9041      	str	r0, [sp, #260]	; 0x104
 801a04a:	465d      	mov	r5, fp
 801a04c:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a050:	2b78      	cmp	r3, #120	; 0x78
 801a052:	d806      	bhi.n	801a062 <__ssvfiscanf_r+0xd2>
 801a054:	2b57      	cmp	r3, #87	; 0x57
 801a056:	d810      	bhi.n	801a07a <__ssvfiscanf_r+0xea>
 801a058:	2b25      	cmp	r3, #37	; 0x25
 801a05a:	d05c      	beq.n	801a116 <__ssvfiscanf_r+0x186>
 801a05c:	d856      	bhi.n	801a10c <__ssvfiscanf_r+0x17c>
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d074      	beq.n	801a14c <__ssvfiscanf_r+0x1bc>
 801a062:	2303      	movs	r3, #3
 801a064:	9347      	str	r3, [sp, #284]	; 0x11c
 801a066:	230a      	movs	r3, #10
 801a068:	9342      	str	r3, [sp, #264]	; 0x108
 801a06a:	e081      	b.n	801a170 <__ssvfiscanf_r+0x1e0>
 801a06c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801a06e:	fb02 1303 	mla	r3, r2, r3, r1
 801a072:	3b30      	subs	r3, #48	; 0x30
 801a074:	9343      	str	r3, [sp, #268]	; 0x10c
 801a076:	465d      	mov	r5, fp
 801a078:	e7d3      	b.n	801a022 <__ssvfiscanf_r+0x92>
 801a07a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801a07e:	2a20      	cmp	r2, #32
 801a080:	d8ef      	bhi.n	801a062 <__ssvfiscanf_r+0xd2>
 801a082:	a101      	add	r1, pc, #4	; (adr r1, 801a088 <__ssvfiscanf_r+0xf8>)
 801a084:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a088:	0801a15b 	.word	0x0801a15b
 801a08c:	0801a063 	.word	0x0801a063
 801a090:	0801a063 	.word	0x0801a063
 801a094:	0801a1b9 	.word	0x0801a1b9
 801a098:	0801a063 	.word	0x0801a063
 801a09c:	0801a063 	.word	0x0801a063
 801a0a0:	0801a063 	.word	0x0801a063
 801a0a4:	0801a063 	.word	0x0801a063
 801a0a8:	0801a063 	.word	0x0801a063
 801a0ac:	0801a063 	.word	0x0801a063
 801a0b0:	0801a063 	.word	0x0801a063
 801a0b4:	0801a1cf 	.word	0x0801a1cf
 801a0b8:	0801a1a5 	.word	0x0801a1a5
 801a0bc:	0801a113 	.word	0x0801a113
 801a0c0:	0801a113 	.word	0x0801a113
 801a0c4:	0801a113 	.word	0x0801a113
 801a0c8:	0801a063 	.word	0x0801a063
 801a0cc:	0801a1a9 	.word	0x0801a1a9
 801a0d0:	0801a063 	.word	0x0801a063
 801a0d4:	0801a063 	.word	0x0801a063
 801a0d8:	0801a063 	.word	0x0801a063
 801a0dc:	0801a063 	.word	0x0801a063
 801a0e0:	0801a1df 	.word	0x0801a1df
 801a0e4:	0801a1b1 	.word	0x0801a1b1
 801a0e8:	0801a153 	.word	0x0801a153
 801a0ec:	0801a063 	.word	0x0801a063
 801a0f0:	0801a063 	.word	0x0801a063
 801a0f4:	0801a1db 	.word	0x0801a1db
 801a0f8:	0801a063 	.word	0x0801a063
 801a0fc:	0801a1a5 	.word	0x0801a1a5
 801a100:	0801a063 	.word	0x0801a063
 801a104:	0801a063 	.word	0x0801a063
 801a108:	0801a15b 	.word	0x0801a15b
 801a10c:	3b45      	subs	r3, #69	; 0x45
 801a10e:	2b02      	cmp	r3, #2
 801a110:	d8a7      	bhi.n	801a062 <__ssvfiscanf_r+0xd2>
 801a112:	2305      	movs	r3, #5
 801a114:	e02b      	b.n	801a16e <__ssvfiscanf_r+0x1de>
 801a116:	6863      	ldr	r3, [r4, #4]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	dd0d      	ble.n	801a138 <__ssvfiscanf_r+0x1a8>
 801a11c:	6823      	ldr	r3, [r4, #0]
 801a11e:	781a      	ldrb	r2, [r3, #0]
 801a120:	4552      	cmp	r2, sl
 801a122:	f040 80a1 	bne.w	801a268 <__ssvfiscanf_r+0x2d8>
 801a126:	3301      	adds	r3, #1
 801a128:	6862      	ldr	r2, [r4, #4]
 801a12a:	6023      	str	r3, [r4, #0]
 801a12c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801a12e:	3a01      	subs	r2, #1
 801a130:	3301      	adds	r3, #1
 801a132:	6062      	str	r2, [r4, #4]
 801a134:	9345      	str	r3, [sp, #276]	; 0x114
 801a136:	e755      	b.n	8019fe4 <__ssvfiscanf_r+0x54>
 801a138:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a13a:	4621      	mov	r1, r4
 801a13c:	4630      	mov	r0, r6
 801a13e:	4798      	blx	r3
 801a140:	2800      	cmp	r0, #0
 801a142:	d0eb      	beq.n	801a11c <__ssvfiscanf_r+0x18c>
 801a144:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a146:	2800      	cmp	r0, #0
 801a148:	f040 8084 	bne.w	801a254 <__ssvfiscanf_r+0x2c4>
 801a14c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a150:	e086      	b.n	801a260 <__ssvfiscanf_r+0x2d0>
 801a152:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a154:	f042 0220 	orr.w	r2, r2, #32
 801a158:	9241      	str	r2, [sp, #260]	; 0x104
 801a15a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a15c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a160:	9241      	str	r2, [sp, #260]	; 0x104
 801a162:	2210      	movs	r2, #16
 801a164:	2b6f      	cmp	r3, #111	; 0x6f
 801a166:	9242      	str	r2, [sp, #264]	; 0x108
 801a168:	bf34      	ite	cc
 801a16a:	2303      	movcc	r3, #3
 801a16c:	2304      	movcs	r3, #4
 801a16e:	9347      	str	r3, [sp, #284]	; 0x11c
 801a170:	6863      	ldr	r3, [r4, #4]
 801a172:	2b00      	cmp	r3, #0
 801a174:	dd41      	ble.n	801a1fa <__ssvfiscanf_r+0x26a>
 801a176:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a178:	0659      	lsls	r1, r3, #25
 801a17a:	d404      	bmi.n	801a186 <__ssvfiscanf_r+0x1f6>
 801a17c:	6823      	ldr	r3, [r4, #0]
 801a17e:	781a      	ldrb	r2, [r3, #0]
 801a180:	5cba      	ldrb	r2, [r7, r2]
 801a182:	0712      	lsls	r2, r2, #28
 801a184:	d440      	bmi.n	801a208 <__ssvfiscanf_r+0x278>
 801a186:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801a188:	2b02      	cmp	r3, #2
 801a18a:	dc4f      	bgt.n	801a22c <__ssvfiscanf_r+0x29c>
 801a18c:	466b      	mov	r3, sp
 801a18e:	4622      	mov	r2, r4
 801a190:	a941      	add	r1, sp, #260	; 0x104
 801a192:	4630      	mov	r0, r6
 801a194:	f000 f874 	bl	801a280 <_scanf_chars>
 801a198:	2801      	cmp	r0, #1
 801a19a:	d065      	beq.n	801a268 <__ssvfiscanf_r+0x2d8>
 801a19c:	2802      	cmp	r0, #2
 801a19e:	f47f af21 	bne.w	8019fe4 <__ssvfiscanf_r+0x54>
 801a1a2:	e7cf      	b.n	801a144 <__ssvfiscanf_r+0x1b4>
 801a1a4:	220a      	movs	r2, #10
 801a1a6:	e7dd      	b.n	801a164 <__ssvfiscanf_r+0x1d4>
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	9342      	str	r3, [sp, #264]	; 0x108
 801a1ac:	2303      	movs	r3, #3
 801a1ae:	e7de      	b.n	801a16e <__ssvfiscanf_r+0x1de>
 801a1b0:	2308      	movs	r3, #8
 801a1b2:	9342      	str	r3, [sp, #264]	; 0x108
 801a1b4:	2304      	movs	r3, #4
 801a1b6:	e7da      	b.n	801a16e <__ssvfiscanf_r+0x1de>
 801a1b8:	4629      	mov	r1, r5
 801a1ba:	4640      	mov	r0, r8
 801a1bc:	f000 f9be 	bl	801a53c <__sccl>
 801a1c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1c6:	9341      	str	r3, [sp, #260]	; 0x104
 801a1c8:	4605      	mov	r5, r0
 801a1ca:	2301      	movs	r3, #1
 801a1cc:	e7cf      	b.n	801a16e <__ssvfiscanf_r+0x1de>
 801a1ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1d4:	9341      	str	r3, [sp, #260]	; 0x104
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	e7c9      	b.n	801a16e <__ssvfiscanf_r+0x1de>
 801a1da:	2302      	movs	r3, #2
 801a1dc:	e7c7      	b.n	801a16e <__ssvfiscanf_r+0x1de>
 801a1de:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a1e0:	06c3      	lsls	r3, r0, #27
 801a1e2:	f53f aeff 	bmi.w	8019fe4 <__ssvfiscanf_r+0x54>
 801a1e6:	9b00      	ldr	r3, [sp, #0]
 801a1e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a1ea:	1d19      	adds	r1, r3, #4
 801a1ec:	9100      	str	r1, [sp, #0]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	07c0      	lsls	r0, r0, #31
 801a1f2:	bf4c      	ite	mi
 801a1f4:	801a      	strhmi	r2, [r3, #0]
 801a1f6:	601a      	strpl	r2, [r3, #0]
 801a1f8:	e6f4      	b.n	8019fe4 <__ssvfiscanf_r+0x54>
 801a1fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a1fc:	4621      	mov	r1, r4
 801a1fe:	4630      	mov	r0, r6
 801a200:	4798      	blx	r3
 801a202:	2800      	cmp	r0, #0
 801a204:	d0b7      	beq.n	801a176 <__ssvfiscanf_r+0x1e6>
 801a206:	e79d      	b.n	801a144 <__ssvfiscanf_r+0x1b4>
 801a208:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a20a:	3201      	adds	r2, #1
 801a20c:	9245      	str	r2, [sp, #276]	; 0x114
 801a20e:	6862      	ldr	r2, [r4, #4]
 801a210:	3a01      	subs	r2, #1
 801a212:	2a00      	cmp	r2, #0
 801a214:	6062      	str	r2, [r4, #4]
 801a216:	dd02      	ble.n	801a21e <__ssvfiscanf_r+0x28e>
 801a218:	3301      	adds	r3, #1
 801a21a:	6023      	str	r3, [r4, #0]
 801a21c:	e7ae      	b.n	801a17c <__ssvfiscanf_r+0x1ec>
 801a21e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a220:	4621      	mov	r1, r4
 801a222:	4630      	mov	r0, r6
 801a224:	4798      	blx	r3
 801a226:	2800      	cmp	r0, #0
 801a228:	d0a8      	beq.n	801a17c <__ssvfiscanf_r+0x1ec>
 801a22a:	e78b      	b.n	801a144 <__ssvfiscanf_r+0x1b4>
 801a22c:	2b04      	cmp	r3, #4
 801a22e:	dc06      	bgt.n	801a23e <__ssvfiscanf_r+0x2ae>
 801a230:	466b      	mov	r3, sp
 801a232:	4622      	mov	r2, r4
 801a234:	a941      	add	r1, sp, #260	; 0x104
 801a236:	4630      	mov	r0, r6
 801a238:	f000 f87a 	bl	801a330 <_scanf_i>
 801a23c:	e7ac      	b.n	801a198 <__ssvfiscanf_r+0x208>
 801a23e:	4b0f      	ldr	r3, [pc, #60]	; (801a27c <__ssvfiscanf_r+0x2ec>)
 801a240:	2b00      	cmp	r3, #0
 801a242:	f43f aecf 	beq.w	8019fe4 <__ssvfiscanf_r+0x54>
 801a246:	466b      	mov	r3, sp
 801a248:	4622      	mov	r2, r4
 801a24a:	a941      	add	r1, sp, #260	; 0x104
 801a24c:	4630      	mov	r0, r6
 801a24e:	f3af 8000 	nop.w
 801a252:	e7a1      	b.n	801a198 <__ssvfiscanf_r+0x208>
 801a254:	89a3      	ldrh	r3, [r4, #12]
 801a256:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a25a:	bf18      	it	ne
 801a25c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801a260:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a268:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a26a:	e7f9      	b.n	801a260 <__ssvfiscanf_r+0x2d0>
 801a26c:	08019edd 	.word	0x08019edd
 801a270:	08019f57 	.word	0x08019f57
 801a274:	0801be6c 	.word	0x0801be6c
 801a278:	0801bb86 	.word	0x0801bb86
 801a27c:	00000000 	.word	0x00000000

0801a280 <_scanf_chars>:
 801a280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a284:	4615      	mov	r5, r2
 801a286:	688a      	ldr	r2, [r1, #8]
 801a288:	4680      	mov	r8, r0
 801a28a:	460c      	mov	r4, r1
 801a28c:	b932      	cbnz	r2, 801a29c <_scanf_chars+0x1c>
 801a28e:	698a      	ldr	r2, [r1, #24]
 801a290:	2a00      	cmp	r2, #0
 801a292:	bf0c      	ite	eq
 801a294:	2201      	moveq	r2, #1
 801a296:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801a29a:	608a      	str	r2, [r1, #8]
 801a29c:	6822      	ldr	r2, [r4, #0]
 801a29e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801a32c <_scanf_chars+0xac>
 801a2a2:	06d1      	lsls	r1, r2, #27
 801a2a4:	bf5f      	itttt	pl
 801a2a6:	681a      	ldrpl	r2, [r3, #0]
 801a2a8:	1d11      	addpl	r1, r2, #4
 801a2aa:	6019      	strpl	r1, [r3, #0]
 801a2ac:	6816      	ldrpl	r6, [r2, #0]
 801a2ae:	2700      	movs	r7, #0
 801a2b0:	69a0      	ldr	r0, [r4, #24]
 801a2b2:	b188      	cbz	r0, 801a2d8 <_scanf_chars+0x58>
 801a2b4:	2801      	cmp	r0, #1
 801a2b6:	d107      	bne.n	801a2c8 <_scanf_chars+0x48>
 801a2b8:	682b      	ldr	r3, [r5, #0]
 801a2ba:	781a      	ldrb	r2, [r3, #0]
 801a2bc:	6963      	ldr	r3, [r4, #20]
 801a2be:	5c9b      	ldrb	r3, [r3, r2]
 801a2c0:	b953      	cbnz	r3, 801a2d8 <_scanf_chars+0x58>
 801a2c2:	bb27      	cbnz	r7, 801a30e <_scanf_chars+0x8e>
 801a2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2c8:	2802      	cmp	r0, #2
 801a2ca:	d120      	bne.n	801a30e <_scanf_chars+0x8e>
 801a2cc:	682b      	ldr	r3, [r5, #0]
 801a2ce:	781b      	ldrb	r3, [r3, #0]
 801a2d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 801a2d4:	071b      	lsls	r3, r3, #28
 801a2d6:	d41a      	bmi.n	801a30e <_scanf_chars+0x8e>
 801a2d8:	6823      	ldr	r3, [r4, #0]
 801a2da:	06da      	lsls	r2, r3, #27
 801a2dc:	bf5e      	ittt	pl
 801a2de:	682b      	ldrpl	r3, [r5, #0]
 801a2e0:	781b      	ldrbpl	r3, [r3, #0]
 801a2e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a2e6:	682a      	ldr	r2, [r5, #0]
 801a2e8:	686b      	ldr	r3, [r5, #4]
 801a2ea:	3201      	adds	r2, #1
 801a2ec:	602a      	str	r2, [r5, #0]
 801a2ee:	68a2      	ldr	r2, [r4, #8]
 801a2f0:	3b01      	subs	r3, #1
 801a2f2:	3a01      	subs	r2, #1
 801a2f4:	606b      	str	r3, [r5, #4]
 801a2f6:	3701      	adds	r7, #1
 801a2f8:	60a2      	str	r2, [r4, #8]
 801a2fa:	b142      	cbz	r2, 801a30e <_scanf_chars+0x8e>
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	dcd7      	bgt.n	801a2b0 <_scanf_chars+0x30>
 801a300:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a304:	4629      	mov	r1, r5
 801a306:	4640      	mov	r0, r8
 801a308:	4798      	blx	r3
 801a30a:	2800      	cmp	r0, #0
 801a30c:	d0d0      	beq.n	801a2b0 <_scanf_chars+0x30>
 801a30e:	6823      	ldr	r3, [r4, #0]
 801a310:	f013 0310 	ands.w	r3, r3, #16
 801a314:	d105      	bne.n	801a322 <_scanf_chars+0xa2>
 801a316:	68e2      	ldr	r2, [r4, #12]
 801a318:	3201      	adds	r2, #1
 801a31a:	60e2      	str	r2, [r4, #12]
 801a31c:	69a2      	ldr	r2, [r4, #24]
 801a31e:	b102      	cbz	r2, 801a322 <_scanf_chars+0xa2>
 801a320:	7033      	strb	r3, [r6, #0]
 801a322:	6923      	ldr	r3, [r4, #16]
 801a324:	441f      	add	r7, r3
 801a326:	6127      	str	r7, [r4, #16]
 801a328:	2000      	movs	r0, #0
 801a32a:	e7cb      	b.n	801a2c4 <_scanf_chars+0x44>
 801a32c:	0801be6c 	.word	0x0801be6c

0801a330 <_scanf_i>:
 801a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a334:	4698      	mov	r8, r3
 801a336:	4b74      	ldr	r3, [pc, #464]	; (801a508 <_scanf_i+0x1d8>)
 801a338:	460c      	mov	r4, r1
 801a33a:	4682      	mov	sl, r0
 801a33c:	4616      	mov	r6, r2
 801a33e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a342:	b087      	sub	sp, #28
 801a344:	ab03      	add	r3, sp, #12
 801a346:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a34a:	4b70      	ldr	r3, [pc, #448]	; (801a50c <_scanf_i+0x1dc>)
 801a34c:	69a1      	ldr	r1, [r4, #24]
 801a34e:	4a70      	ldr	r2, [pc, #448]	; (801a510 <_scanf_i+0x1e0>)
 801a350:	2903      	cmp	r1, #3
 801a352:	bf18      	it	ne
 801a354:	461a      	movne	r2, r3
 801a356:	68a3      	ldr	r3, [r4, #8]
 801a358:	9201      	str	r2, [sp, #4]
 801a35a:	1e5a      	subs	r2, r3, #1
 801a35c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a360:	bf88      	it	hi
 801a362:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a366:	4627      	mov	r7, r4
 801a368:	bf82      	ittt	hi
 801a36a:	eb03 0905 	addhi.w	r9, r3, r5
 801a36e:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a372:	60a3      	strhi	r3, [r4, #8]
 801a374:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a378:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a37c:	bf98      	it	ls
 801a37e:	f04f 0900 	movls.w	r9, #0
 801a382:	6023      	str	r3, [r4, #0]
 801a384:	463d      	mov	r5, r7
 801a386:	f04f 0b00 	mov.w	fp, #0
 801a38a:	6831      	ldr	r1, [r6, #0]
 801a38c:	ab03      	add	r3, sp, #12
 801a38e:	7809      	ldrb	r1, [r1, #0]
 801a390:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a394:	2202      	movs	r2, #2
 801a396:	f7e5 ff33 	bl	8000200 <memchr>
 801a39a:	b328      	cbz	r0, 801a3e8 <_scanf_i+0xb8>
 801a39c:	f1bb 0f01 	cmp.w	fp, #1
 801a3a0:	d159      	bne.n	801a456 <_scanf_i+0x126>
 801a3a2:	6862      	ldr	r2, [r4, #4]
 801a3a4:	b92a      	cbnz	r2, 801a3b2 <_scanf_i+0x82>
 801a3a6:	6822      	ldr	r2, [r4, #0]
 801a3a8:	2308      	movs	r3, #8
 801a3aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a3ae:	6063      	str	r3, [r4, #4]
 801a3b0:	6022      	str	r2, [r4, #0]
 801a3b2:	6822      	ldr	r2, [r4, #0]
 801a3b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a3b8:	6022      	str	r2, [r4, #0]
 801a3ba:	68a2      	ldr	r2, [r4, #8]
 801a3bc:	1e51      	subs	r1, r2, #1
 801a3be:	60a1      	str	r1, [r4, #8]
 801a3c0:	b192      	cbz	r2, 801a3e8 <_scanf_i+0xb8>
 801a3c2:	6832      	ldr	r2, [r6, #0]
 801a3c4:	1c51      	adds	r1, r2, #1
 801a3c6:	6031      	str	r1, [r6, #0]
 801a3c8:	7812      	ldrb	r2, [r2, #0]
 801a3ca:	f805 2b01 	strb.w	r2, [r5], #1
 801a3ce:	6872      	ldr	r2, [r6, #4]
 801a3d0:	3a01      	subs	r2, #1
 801a3d2:	2a00      	cmp	r2, #0
 801a3d4:	6072      	str	r2, [r6, #4]
 801a3d6:	dc07      	bgt.n	801a3e8 <_scanf_i+0xb8>
 801a3d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a3dc:	4631      	mov	r1, r6
 801a3de:	4650      	mov	r0, sl
 801a3e0:	4790      	blx	r2
 801a3e2:	2800      	cmp	r0, #0
 801a3e4:	f040 8085 	bne.w	801a4f2 <_scanf_i+0x1c2>
 801a3e8:	f10b 0b01 	add.w	fp, fp, #1
 801a3ec:	f1bb 0f03 	cmp.w	fp, #3
 801a3f0:	d1cb      	bne.n	801a38a <_scanf_i+0x5a>
 801a3f2:	6863      	ldr	r3, [r4, #4]
 801a3f4:	b90b      	cbnz	r3, 801a3fa <_scanf_i+0xca>
 801a3f6:	230a      	movs	r3, #10
 801a3f8:	6063      	str	r3, [r4, #4]
 801a3fa:	6863      	ldr	r3, [r4, #4]
 801a3fc:	4945      	ldr	r1, [pc, #276]	; (801a514 <_scanf_i+0x1e4>)
 801a3fe:	6960      	ldr	r0, [r4, #20]
 801a400:	1ac9      	subs	r1, r1, r3
 801a402:	f000 f89b 	bl	801a53c <__sccl>
 801a406:	f04f 0b00 	mov.w	fp, #0
 801a40a:	68a3      	ldr	r3, [r4, #8]
 801a40c:	6822      	ldr	r2, [r4, #0]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d03d      	beq.n	801a48e <_scanf_i+0x15e>
 801a412:	6831      	ldr	r1, [r6, #0]
 801a414:	6960      	ldr	r0, [r4, #20]
 801a416:	f891 c000 	ldrb.w	ip, [r1]
 801a41a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a41e:	2800      	cmp	r0, #0
 801a420:	d035      	beq.n	801a48e <_scanf_i+0x15e>
 801a422:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a426:	d124      	bne.n	801a472 <_scanf_i+0x142>
 801a428:	0510      	lsls	r0, r2, #20
 801a42a:	d522      	bpl.n	801a472 <_scanf_i+0x142>
 801a42c:	f10b 0b01 	add.w	fp, fp, #1
 801a430:	f1b9 0f00 	cmp.w	r9, #0
 801a434:	d003      	beq.n	801a43e <_scanf_i+0x10e>
 801a436:	3301      	adds	r3, #1
 801a438:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801a43c:	60a3      	str	r3, [r4, #8]
 801a43e:	6873      	ldr	r3, [r6, #4]
 801a440:	3b01      	subs	r3, #1
 801a442:	2b00      	cmp	r3, #0
 801a444:	6073      	str	r3, [r6, #4]
 801a446:	dd1b      	ble.n	801a480 <_scanf_i+0x150>
 801a448:	6833      	ldr	r3, [r6, #0]
 801a44a:	3301      	adds	r3, #1
 801a44c:	6033      	str	r3, [r6, #0]
 801a44e:	68a3      	ldr	r3, [r4, #8]
 801a450:	3b01      	subs	r3, #1
 801a452:	60a3      	str	r3, [r4, #8]
 801a454:	e7d9      	b.n	801a40a <_scanf_i+0xda>
 801a456:	f1bb 0f02 	cmp.w	fp, #2
 801a45a:	d1ae      	bne.n	801a3ba <_scanf_i+0x8a>
 801a45c:	6822      	ldr	r2, [r4, #0]
 801a45e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a462:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a466:	d1bf      	bne.n	801a3e8 <_scanf_i+0xb8>
 801a468:	2310      	movs	r3, #16
 801a46a:	6063      	str	r3, [r4, #4]
 801a46c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a470:	e7a2      	b.n	801a3b8 <_scanf_i+0x88>
 801a472:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a476:	6022      	str	r2, [r4, #0]
 801a478:	780b      	ldrb	r3, [r1, #0]
 801a47a:	f805 3b01 	strb.w	r3, [r5], #1
 801a47e:	e7de      	b.n	801a43e <_scanf_i+0x10e>
 801a480:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a484:	4631      	mov	r1, r6
 801a486:	4650      	mov	r0, sl
 801a488:	4798      	blx	r3
 801a48a:	2800      	cmp	r0, #0
 801a48c:	d0df      	beq.n	801a44e <_scanf_i+0x11e>
 801a48e:	6823      	ldr	r3, [r4, #0]
 801a490:	05d9      	lsls	r1, r3, #23
 801a492:	d50d      	bpl.n	801a4b0 <_scanf_i+0x180>
 801a494:	42bd      	cmp	r5, r7
 801a496:	d909      	bls.n	801a4ac <_scanf_i+0x17c>
 801a498:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a49c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4a0:	4632      	mov	r2, r6
 801a4a2:	4650      	mov	r0, sl
 801a4a4:	4798      	blx	r3
 801a4a6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801a4aa:	464d      	mov	r5, r9
 801a4ac:	42bd      	cmp	r5, r7
 801a4ae:	d028      	beq.n	801a502 <_scanf_i+0x1d2>
 801a4b0:	6822      	ldr	r2, [r4, #0]
 801a4b2:	f012 0210 	ands.w	r2, r2, #16
 801a4b6:	d113      	bne.n	801a4e0 <_scanf_i+0x1b0>
 801a4b8:	702a      	strb	r2, [r5, #0]
 801a4ba:	6863      	ldr	r3, [r4, #4]
 801a4bc:	9e01      	ldr	r6, [sp, #4]
 801a4be:	4639      	mov	r1, r7
 801a4c0:	4650      	mov	r0, sl
 801a4c2:	47b0      	blx	r6
 801a4c4:	f8d8 3000 	ldr.w	r3, [r8]
 801a4c8:	6821      	ldr	r1, [r4, #0]
 801a4ca:	1d1a      	adds	r2, r3, #4
 801a4cc:	f8c8 2000 	str.w	r2, [r8]
 801a4d0:	f011 0f20 	tst.w	r1, #32
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	d00f      	beq.n	801a4f8 <_scanf_i+0x1c8>
 801a4d8:	6018      	str	r0, [r3, #0]
 801a4da:	68e3      	ldr	r3, [r4, #12]
 801a4dc:	3301      	adds	r3, #1
 801a4de:	60e3      	str	r3, [r4, #12]
 801a4e0:	1bed      	subs	r5, r5, r7
 801a4e2:	44ab      	add	fp, r5
 801a4e4:	6925      	ldr	r5, [r4, #16]
 801a4e6:	445d      	add	r5, fp
 801a4e8:	6125      	str	r5, [r4, #16]
 801a4ea:	2000      	movs	r0, #0
 801a4ec:	b007      	add	sp, #28
 801a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4f2:	f04f 0b00 	mov.w	fp, #0
 801a4f6:	e7ca      	b.n	801a48e <_scanf_i+0x15e>
 801a4f8:	07ca      	lsls	r2, r1, #31
 801a4fa:	bf4c      	ite	mi
 801a4fc:	8018      	strhmi	r0, [r3, #0]
 801a4fe:	6018      	strpl	r0, [r3, #0]
 801a500:	e7eb      	b.n	801a4da <_scanf_i+0x1aa>
 801a502:	2001      	movs	r0, #1
 801a504:	e7f2      	b.n	801a4ec <_scanf_i+0x1bc>
 801a506:	bf00      	nop
 801a508:	0801bb70 	.word	0x0801bb70
 801a50c:	0801a7b5 	.word	0x0801a7b5
 801a510:	0801a6b9 	.word	0x0801a6b9
 801a514:	0801be2d 	.word	0x0801be2d

0801a518 <_read_r>:
 801a518:	b538      	push	{r3, r4, r5, lr}
 801a51a:	4d07      	ldr	r5, [pc, #28]	; (801a538 <_read_r+0x20>)
 801a51c:	4604      	mov	r4, r0
 801a51e:	4608      	mov	r0, r1
 801a520:	4611      	mov	r1, r2
 801a522:	2200      	movs	r2, #0
 801a524:	602a      	str	r2, [r5, #0]
 801a526:	461a      	mov	r2, r3
 801a528:	f000 fa62 	bl	801a9f0 <_read>
 801a52c:	1c43      	adds	r3, r0, #1
 801a52e:	d102      	bne.n	801a536 <_read_r+0x1e>
 801a530:	682b      	ldr	r3, [r5, #0]
 801a532:	b103      	cbz	r3, 801a536 <_read_r+0x1e>
 801a534:	6023      	str	r3, [r4, #0]
 801a536:	bd38      	pop	{r3, r4, r5, pc}
 801a538:	20009b30 	.word	0x20009b30

0801a53c <__sccl>:
 801a53c:	b570      	push	{r4, r5, r6, lr}
 801a53e:	780b      	ldrb	r3, [r1, #0]
 801a540:	4604      	mov	r4, r0
 801a542:	2b5e      	cmp	r3, #94	; 0x5e
 801a544:	bf0b      	itete	eq
 801a546:	784b      	ldrbeq	r3, [r1, #1]
 801a548:	1c48      	addne	r0, r1, #1
 801a54a:	1c88      	addeq	r0, r1, #2
 801a54c:	2200      	movne	r2, #0
 801a54e:	bf08      	it	eq
 801a550:	2201      	moveq	r2, #1
 801a552:	1e61      	subs	r1, r4, #1
 801a554:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801a558:	f801 2f01 	strb.w	r2, [r1, #1]!
 801a55c:	42a9      	cmp	r1, r5
 801a55e:	d1fb      	bne.n	801a558 <__sccl+0x1c>
 801a560:	b90b      	cbnz	r3, 801a566 <__sccl+0x2a>
 801a562:	3801      	subs	r0, #1
 801a564:	bd70      	pop	{r4, r5, r6, pc}
 801a566:	f082 0101 	eor.w	r1, r2, #1
 801a56a:	54e1      	strb	r1, [r4, r3]
 801a56c:	1c42      	adds	r2, r0, #1
 801a56e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801a572:	2d2d      	cmp	r5, #45	; 0x2d
 801a574:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 801a578:	4610      	mov	r0, r2
 801a57a:	d006      	beq.n	801a58a <__sccl+0x4e>
 801a57c:	2d5d      	cmp	r5, #93	; 0x5d
 801a57e:	d0f1      	beq.n	801a564 <__sccl+0x28>
 801a580:	b90d      	cbnz	r5, 801a586 <__sccl+0x4a>
 801a582:	4630      	mov	r0, r6
 801a584:	e7ee      	b.n	801a564 <__sccl+0x28>
 801a586:	462b      	mov	r3, r5
 801a588:	e7ef      	b.n	801a56a <__sccl+0x2e>
 801a58a:	7816      	ldrb	r6, [r2, #0]
 801a58c:	2e5d      	cmp	r6, #93	; 0x5d
 801a58e:	d0fa      	beq.n	801a586 <__sccl+0x4a>
 801a590:	42b3      	cmp	r3, r6
 801a592:	dcf8      	bgt.n	801a586 <__sccl+0x4a>
 801a594:	4618      	mov	r0, r3
 801a596:	3001      	adds	r0, #1
 801a598:	4286      	cmp	r6, r0
 801a59a:	5421      	strb	r1, [r4, r0]
 801a59c:	dcfb      	bgt.n	801a596 <__sccl+0x5a>
 801a59e:	43d8      	mvns	r0, r3
 801a5a0:	4430      	add	r0, r6
 801a5a2:	1c5d      	adds	r5, r3, #1
 801a5a4:	42b3      	cmp	r3, r6
 801a5a6:	bfa8      	it	ge
 801a5a8:	2000      	movge	r0, #0
 801a5aa:	182b      	adds	r3, r5, r0
 801a5ac:	3202      	adds	r2, #2
 801a5ae:	e7de      	b.n	801a56e <__sccl+0x32>

0801a5b0 <_strtol_l.isra.0>:
 801a5b0:	2b01      	cmp	r3, #1
 801a5b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5b6:	d001      	beq.n	801a5bc <_strtol_l.isra.0+0xc>
 801a5b8:	2b24      	cmp	r3, #36	; 0x24
 801a5ba:	d906      	bls.n	801a5ca <_strtol_l.isra.0+0x1a>
 801a5bc:	f7fc fe38 	bl	8017230 <__errno>
 801a5c0:	2316      	movs	r3, #22
 801a5c2:	6003      	str	r3, [r0, #0]
 801a5c4:	2000      	movs	r0, #0
 801a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5ca:	4f3a      	ldr	r7, [pc, #232]	; (801a6b4 <_strtol_l.isra.0+0x104>)
 801a5cc:	468e      	mov	lr, r1
 801a5ce:	4676      	mov	r6, lr
 801a5d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801a5d4:	5de5      	ldrb	r5, [r4, r7]
 801a5d6:	f015 0508 	ands.w	r5, r5, #8
 801a5da:	d1f8      	bne.n	801a5ce <_strtol_l.isra.0+0x1e>
 801a5dc:	2c2d      	cmp	r4, #45	; 0x2d
 801a5de:	d134      	bne.n	801a64a <_strtol_l.isra.0+0x9a>
 801a5e0:	f89e 4000 	ldrb.w	r4, [lr]
 801a5e4:	f04f 0801 	mov.w	r8, #1
 801a5e8:	f106 0e02 	add.w	lr, r6, #2
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d05c      	beq.n	801a6aa <_strtol_l.isra.0+0xfa>
 801a5f0:	2b10      	cmp	r3, #16
 801a5f2:	d10c      	bne.n	801a60e <_strtol_l.isra.0+0x5e>
 801a5f4:	2c30      	cmp	r4, #48	; 0x30
 801a5f6:	d10a      	bne.n	801a60e <_strtol_l.isra.0+0x5e>
 801a5f8:	f89e 4000 	ldrb.w	r4, [lr]
 801a5fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a600:	2c58      	cmp	r4, #88	; 0x58
 801a602:	d14d      	bne.n	801a6a0 <_strtol_l.isra.0+0xf0>
 801a604:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801a608:	2310      	movs	r3, #16
 801a60a:	f10e 0e02 	add.w	lr, lr, #2
 801a60e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801a612:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801a616:	2600      	movs	r6, #0
 801a618:	fbbc f9f3 	udiv	r9, ip, r3
 801a61c:	4635      	mov	r5, r6
 801a61e:	fb03 ca19 	mls	sl, r3, r9, ip
 801a622:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801a626:	2f09      	cmp	r7, #9
 801a628:	d818      	bhi.n	801a65c <_strtol_l.isra.0+0xac>
 801a62a:	463c      	mov	r4, r7
 801a62c:	42a3      	cmp	r3, r4
 801a62e:	dd24      	ble.n	801a67a <_strtol_l.isra.0+0xca>
 801a630:	2e00      	cmp	r6, #0
 801a632:	db1f      	blt.n	801a674 <_strtol_l.isra.0+0xc4>
 801a634:	45a9      	cmp	r9, r5
 801a636:	d31d      	bcc.n	801a674 <_strtol_l.isra.0+0xc4>
 801a638:	d101      	bne.n	801a63e <_strtol_l.isra.0+0x8e>
 801a63a:	45a2      	cmp	sl, r4
 801a63c:	db1a      	blt.n	801a674 <_strtol_l.isra.0+0xc4>
 801a63e:	fb05 4503 	mla	r5, r5, r3, r4
 801a642:	2601      	movs	r6, #1
 801a644:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801a648:	e7eb      	b.n	801a622 <_strtol_l.isra.0+0x72>
 801a64a:	2c2b      	cmp	r4, #43	; 0x2b
 801a64c:	bf08      	it	eq
 801a64e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801a652:	46a8      	mov	r8, r5
 801a654:	bf08      	it	eq
 801a656:	f106 0e02 	addeq.w	lr, r6, #2
 801a65a:	e7c7      	b.n	801a5ec <_strtol_l.isra.0+0x3c>
 801a65c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801a660:	2f19      	cmp	r7, #25
 801a662:	d801      	bhi.n	801a668 <_strtol_l.isra.0+0xb8>
 801a664:	3c37      	subs	r4, #55	; 0x37
 801a666:	e7e1      	b.n	801a62c <_strtol_l.isra.0+0x7c>
 801a668:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801a66c:	2f19      	cmp	r7, #25
 801a66e:	d804      	bhi.n	801a67a <_strtol_l.isra.0+0xca>
 801a670:	3c57      	subs	r4, #87	; 0x57
 801a672:	e7db      	b.n	801a62c <_strtol_l.isra.0+0x7c>
 801a674:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801a678:	e7e4      	b.n	801a644 <_strtol_l.isra.0+0x94>
 801a67a:	2e00      	cmp	r6, #0
 801a67c:	da05      	bge.n	801a68a <_strtol_l.isra.0+0xda>
 801a67e:	2322      	movs	r3, #34	; 0x22
 801a680:	6003      	str	r3, [r0, #0]
 801a682:	4665      	mov	r5, ip
 801a684:	b942      	cbnz	r2, 801a698 <_strtol_l.isra.0+0xe8>
 801a686:	4628      	mov	r0, r5
 801a688:	e79d      	b.n	801a5c6 <_strtol_l.isra.0+0x16>
 801a68a:	f1b8 0f00 	cmp.w	r8, #0
 801a68e:	d000      	beq.n	801a692 <_strtol_l.isra.0+0xe2>
 801a690:	426d      	negs	r5, r5
 801a692:	2a00      	cmp	r2, #0
 801a694:	d0f7      	beq.n	801a686 <_strtol_l.isra.0+0xd6>
 801a696:	b10e      	cbz	r6, 801a69c <_strtol_l.isra.0+0xec>
 801a698:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801a69c:	6011      	str	r1, [r2, #0]
 801a69e:	e7f2      	b.n	801a686 <_strtol_l.isra.0+0xd6>
 801a6a0:	2430      	movs	r4, #48	; 0x30
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d1b3      	bne.n	801a60e <_strtol_l.isra.0+0x5e>
 801a6a6:	2308      	movs	r3, #8
 801a6a8:	e7b1      	b.n	801a60e <_strtol_l.isra.0+0x5e>
 801a6aa:	2c30      	cmp	r4, #48	; 0x30
 801a6ac:	d0a4      	beq.n	801a5f8 <_strtol_l.isra.0+0x48>
 801a6ae:	230a      	movs	r3, #10
 801a6b0:	e7ad      	b.n	801a60e <_strtol_l.isra.0+0x5e>
 801a6b2:	bf00      	nop
 801a6b4:	0801be6c 	.word	0x0801be6c

0801a6b8 <_strtol_r>:
 801a6b8:	f7ff bf7a 	b.w	801a5b0 <_strtol_l.isra.0>

0801a6bc <_strtoul_l.isra.0>:
 801a6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6c0:	4e3b      	ldr	r6, [pc, #236]	; (801a7b0 <_strtoul_l.isra.0+0xf4>)
 801a6c2:	4686      	mov	lr, r0
 801a6c4:	468c      	mov	ip, r1
 801a6c6:	4660      	mov	r0, ip
 801a6c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a6cc:	5da5      	ldrb	r5, [r4, r6]
 801a6ce:	f015 0508 	ands.w	r5, r5, #8
 801a6d2:	d1f8      	bne.n	801a6c6 <_strtoul_l.isra.0+0xa>
 801a6d4:	2c2d      	cmp	r4, #45	; 0x2d
 801a6d6:	d134      	bne.n	801a742 <_strtoul_l.isra.0+0x86>
 801a6d8:	f89c 4000 	ldrb.w	r4, [ip]
 801a6dc:	f04f 0801 	mov.w	r8, #1
 801a6e0:	f100 0c02 	add.w	ip, r0, #2
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d05e      	beq.n	801a7a6 <_strtoul_l.isra.0+0xea>
 801a6e8:	2b10      	cmp	r3, #16
 801a6ea:	d10c      	bne.n	801a706 <_strtoul_l.isra.0+0x4a>
 801a6ec:	2c30      	cmp	r4, #48	; 0x30
 801a6ee:	d10a      	bne.n	801a706 <_strtoul_l.isra.0+0x4a>
 801a6f0:	f89c 0000 	ldrb.w	r0, [ip]
 801a6f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a6f8:	2858      	cmp	r0, #88	; 0x58
 801a6fa:	d14f      	bne.n	801a79c <_strtoul_l.isra.0+0xe0>
 801a6fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801a700:	2310      	movs	r3, #16
 801a702:	f10c 0c02 	add.w	ip, ip, #2
 801a706:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a70a:	2500      	movs	r5, #0
 801a70c:	fbb7 f7f3 	udiv	r7, r7, r3
 801a710:	fb03 f907 	mul.w	r9, r3, r7
 801a714:	ea6f 0909 	mvn.w	r9, r9
 801a718:	4628      	mov	r0, r5
 801a71a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801a71e:	2e09      	cmp	r6, #9
 801a720:	d818      	bhi.n	801a754 <_strtoul_l.isra.0+0x98>
 801a722:	4634      	mov	r4, r6
 801a724:	42a3      	cmp	r3, r4
 801a726:	dd24      	ble.n	801a772 <_strtoul_l.isra.0+0xb6>
 801a728:	2d00      	cmp	r5, #0
 801a72a:	db1f      	blt.n	801a76c <_strtoul_l.isra.0+0xb0>
 801a72c:	4287      	cmp	r7, r0
 801a72e:	d31d      	bcc.n	801a76c <_strtoul_l.isra.0+0xb0>
 801a730:	d101      	bne.n	801a736 <_strtoul_l.isra.0+0x7a>
 801a732:	45a1      	cmp	r9, r4
 801a734:	db1a      	blt.n	801a76c <_strtoul_l.isra.0+0xb0>
 801a736:	fb00 4003 	mla	r0, r0, r3, r4
 801a73a:	2501      	movs	r5, #1
 801a73c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a740:	e7eb      	b.n	801a71a <_strtoul_l.isra.0+0x5e>
 801a742:	2c2b      	cmp	r4, #43	; 0x2b
 801a744:	bf08      	it	eq
 801a746:	f89c 4000 	ldrbeq.w	r4, [ip]
 801a74a:	46a8      	mov	r8, r5
 801a74c:	bf08      	it	eq
 801a74e:	f100 0c02 	addeq.w	ip, r0, #2
 801a752:	e7c7      	b.n	801a6e4 <_strtoul_l.isra.0+0x28>
 801a754:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801a758:	2e19      	cmp	r6, #25
 801a75a:	d801      	bhi.n	801a760 <_strtoul_l.isra.0+0xa4>
 801a75c:	3c37      	subs	r4, #55	; 0x37
 801a75e:	e7e1      	b.n	801a724 <_strtoul_l.isra.0+0x68>
 801a760:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801a764:	2e19      	cmp	r6, #25
 801a766:	d804      	bhi.n	801a772 <_strtoul_l.isra.0+0xb6>
 801a768:	3c57      	subs	r4, #87	; 0x57
 801a76a:	e7db      	b.n	801a724 <_strtoul_l.isra.0+0x68>
 801a76c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a770:	e7e4      	b.n	801a73c <_strtoul_l.isra.0+0x80>
 801a772:	2d00      	cmp	r5, #0
 801a774:	da07      	bge.n	801a786 <_strtoul_l.isra.0+0xca>
 801a776:	2322      	movs	r3, #34	; 0x22
 801a778:	f8ce 3000 	str.w	r3, [lr]
 801a77c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a780:	b942      	cbnz	r2, 801a794 <_strtoul_l.isra.0+0xd8>
 801a782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a786:	f1b8 0f00 	cmp.w	r8, #0
 801a78a:	d000      	beq.n	801a78e <_strtoul_l.isra.0+0xd2>
 801a78c:	4240      	negs	r0, r0
 801a78e:	2a00      	cmp	r2, #0
 801a790:	d0f7      	beq.n	801a782 <_strtoul_l.isra.0+0xc6>
 801a792:	b10d      	cbz	r5, 801a798 <_strtoul_l.isra.0+0xdc>
 801a794:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801a798:	6011      	str	r1, [r2, #0]
 801a79a:	e7f2      	b.n	801a782 <_strtoul_l.isra.0+0xc6>
 801a79c:	2430      	movs	r4, #48	; 0x30
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d1b1      	bne.n	801a706 <_strtoul_l.isra.0+0x4a>
 801a7a2:	2308      	movs	r3, #8
 801a7a4:	e7af      	b.n	801a706 <_strtoul_l.isra.0+0x4a>
 801a7a6:	2c30      	cmp	r4, #48	; 0x30
 801a7a8:	d0a2      	beq.n	801a6f0 <_strtoul_l.isra.0+0x34>
 801a7aa:	230a      	movs	r3, #10
 801a7ac:	e7ab      	b.n	801a706 <_strtoul_l.isra.0+0x4a>
 801a7ae:	bf00      	nop
 801a7b0:	0801be6c 	.word	0x0801be6c

0801a7b4 <_strtoul_r>:
 801a7b4:	f7ff bf82 	b.w	801a6bc <_strtoul_l.isra.0>

0801a7b8 <__submore>:
 801a7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7bc:	460c      	mov	r4, r1
 801a7be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a7c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a7c4:	4299      	cmp	r1, r3
 801a7c6:	d11d      	bne.n	801a804 <__submore+0x4c>
 801a7c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a7cc:	f7fc fde2 	bl	8017394 <_malloc_r>
 801a7d0:	b918      	cbnz	r0, 801a7da <__submore+0x22>
 801a7d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a7de:	63a3      	str	r3, [r4, #56]	; 0x38
 801a7e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a7e4:	6360      	str	r0, [r4, #52]	; 0x34
 801a7e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a7ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a7ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a7f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a7f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a7fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a7fe:	6020      	str	r0, [r4, #0]
 801a800:	2000      	movs	r0, #0
 801a802:	e7e8      	b.n	801a7d6 <__submore+0x1e>
 801a804:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a806:	0077      	lsls	r7, r6, #1
 801a808:	463a      	mov	r2, r7
 801a80a:	f7ff f9e6 	bl	8019bda <_realloc_r>
 801a80e:	4605      	mov	r5, r0
 801a810:	2800      	cmp	r0, #0
 801a812:	d0de      	beq.n	801a7d2 <__submore+0x1a>
 801a814:	eb00 0806 	add.w	r8, r0, r6
 801a818:	4601      	mov	r1, r0
 801a81a:	4632      	mov	r2, r6
 801a81c:	4640      	mov	r0, r8
 801a81e:	f7fc fd53 	bl	80172c8 <memcpy>
 801a822:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a826:	f8c4 8000 	str.w	r8, [r4]
 801a82a:	e7e9      	b.n	801a800 <__submore+0x48>

0801a82c <__assert_func>:
 801a82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a82e:	4614      	mov	r4, r2
 801a830:	461a      	mov	r2, r3
 801a832:	4b09      	ldr	r3, [pc, #36]	; (801a858 <__assert_func+0x2c>)
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	4605      	mov	r5, r0
 801a838:	68d8      	ldr	r0, [r3, #12]
 801a83a:	b14c      	cbz	r4, 801a850 <__assert_func+0x24>
 801a83c:	4b07      	ldr	r3, [pc, #28]	; (801a85c <__assert_func+0x30>)
 801a83e:	9100      	str	r1, [sp, #0]
 801a840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a844:	4906      	ldr	r1, [pc, #24]	; (801a860 <__assert_func+0x34>)
 801a846:	462b      	mov	r3, r5
 801a848:	f7fc fcf8 	bl	801723c <fiprintf>
 801a84c:	f000 f855 	bl	801a8fa <abort>
 801a850:	4b04      	ldr	r3, [pc, #16]	; (801a864 <__assert_func+0x38>)
 801a852:	461c      	mov	r4, r3
 801a854:	e7f3      	b.n	801a83e <__assert_func+0x12>
 801a856:	bf00      	nop
 801a858:	20000024 	.word	0x20000024
 801a85c:	0801be2f 	.word	0x0801be2f
 801a860:	0801be3c 	.word	0x0801be3c
 801a864:	0801be6a 	.word	0x0801be6a

0801a868 <_fstat_r>:
 801a868:	b538      	push	{r3, r4, r5, lr}
 801a86a:	4d07      	ldr	r5, [pc, #28]	; (801a888 <_fstat_r+0x20>)
 801a86c:	2300      	movs	r3, #0
 801a86e:	4604      	mov	r4, r0
 801a870:	4608      	mov	r0, r1
 801a872:	4611      	mov	r1, r2
 801a874:	602b      	str	r3, [r5, #0]
 801a876:	f000 f893 	bl	801a9a0 <_fstat>
 801a87a:	1c43      	adds	r3, r0, #1
 801a87c:	d102      	bne.n	801a884 <_fstat_r+0x1c>
 801a87e:	682b      	ldr	r3, [r5, #0]
 801a880:	b103      	cbz	r3, 801a884 <_fstat_r+0x1c>
 801a882:	6023      	str	r3, [r4, #0]
 801a884:	bd38      	pop	{r3, r4, r5, pc}
 801a886:	bf00      	nop
 801a888:	20009b30 	.word	0x20009b30

0801a88c <_isatty_r>:
 801a88c:	b538      	push	{r3, r4, r5, lr}
 801a88e:	4d06      	ldr	r5, [pc, #24]	; (801a8a8 <_isatty_r+0x1c>)
 801a890:	2300      	movs	r3, #0
 801a892:	4604      	mov	r4, r0
 801a894:	4608      	mov	r0, r1
 801a896:	602b      	str	r3, [r5, #0]
 801a898:	f000 f892 	bl	801a9c0 <_isatty>
 801a89c:	1c43      	adds	r3, r0, #1
 801a89e:	d102      	bne.n	801a8a6 <_isatty_r+0x1a>
 801a8a0:	682b      	ldr	r3, [r5, #0]
 801a8a2:	b103      	cbz	r3, 801a8a6 <_isatty_r+0x1a>
 801a8a4:	6023      	str	r3, [r4, #0]
 801a8a6:	bd38      	pop	{r3, r4, r5, pc}
 801a8a8:	20009b30 	.word	0x20009b30

0801a8ac <__ascii_mbtowc>:
 801a8ac:	b082      	sub	sp, #8
 801a8ae:	b901      	cbnz	r1, 801a8b2 <__ascii_mbtowc+0x6>
 801a8b0:	a901      	add	r1, sp, #4
 801a8b2:	b142      	cbz	r2, 801a8c6 <__ascii_mbtowc+0x1a>
 801a8b4:	b14b      	cbz	r3, 801a8ca <__ascii_mbtowc+0x1e>
 801a8b6:	7813      	ldrb	r3, [r2, #0]
 801a8b8:	600b      	str	r3, [r1, #0]
 801a8ba:	7812      	ldrb	r2, [r2, #0]
 801a8bc:	1e10      	subs	r0, r2, #0
 801a8be:	bf18      	it	ne
 801a8c0:	2001      	movne	r0, #1
 801a8c2:	b002      	add	sp, #8
 801a8c4:	4770      	bx	lr
 801a8c6:	4610      	mov	r0, r2
 801a8c8:	e7fb      	b.n	801a8c2 <__ascii_mbtowc+0x16>
 801a8ca:	f06f 0001 	mvn.w	r0, #1
 801a8ce:	e7f8      	b.n	801a8c2 <__ascii_mbtowc+0x16>

0801a8d0 <_malloc_usable_size_r>:
 801a8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a8d4:	1f18      	subs	r0, r3, #4
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	bfbc      	itt	lt
 801a8da:	580b      	ldrlt	r3, [r1, r0]
 801a8dc:	18c0      	addlt	r0, r0, r3
 801a8de:	4770      	bx	lr

0801a8e0 <__ascii_wctomb>:
 801a8e0:	b149      	cbz	r1, 801a8f6 <__ascii_wctomb+0x16>
 801a8e2:	2aff      	cmp	r2, #255	; 0xff
 801a8e4:	bf85      	ittet	hi
 801a8e6:	238a      	movhi	r3, #138	; 0x8a
 801a8e8:	6003      	strhi	r3, [r0, #0]
 801a8ea:	700a      	strbls	r2, [r1, #0]
 801a8ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801a8f0:	bf98      	it	ls
 801a8f2:	2001      	movls	r0, #1
 801a8f4:	4770      	bx	lr
 801a8f6:	4608      	mov	r0, r1
 801a8f8:	4770      	bx	lr

0801a8fa <abort>:
 801a8fa:	b508      	push	{r3, lr}
 801a8fc:	2006      	movs	r0, #6
 801a8fe:	f000 f82b 	bl	801a958 <raise>
 801a902:	2001      	movs	r0, #1
 801a904:	f000 f88a 	bl	801aa1c <_exit>

0801a908 <_raise_r>:
 801a908:	291f      	cmp	r1, #31
 801a90a:	b538      	push	{r3, r4, r5, lr}
 801a90c:	4604      	mov	r4, r0
 801a90e:	460d      	mov	r5, r1
 801a910:	d904      	bls.n	801a91c <_raise_r+0x14>
 801a912:	2316      	movs	r3, #22
 801a914:	6003      	str	r3, [r0, #0]
 801a916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a91a:	bd38      	pop	{r3, r4, r5, pc}
 801a91c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a91e:	b112      	cbz	r2, 801a926 <_raise_r+0x1e>
 801a920:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a924:	b94b      	cbnz	r3, 801a93a <_raise_r+0x32>
 801a926:	4620      	mov	r0, r4
 801a928:	f000 f830 	bl	801a98c <_getpid_r>
 801a92c:	462a      	mov	r2, r5
 801a92e:	4601      	mov	r1, r0
 801a930:	4620      	mov	r0, r4
 801a932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a936:	f000 b817 	b.w	801a968 <_kill_r>
 801a93a:	2b01      	cmp	r3, #1
 801a93c:	d00a      	beq.n	801a954 <_raise_r+0x4c>
 801a93e:	1c59      	adds	r1, r3, #1
 801a940:	d103      	bne.n	801a94a <_raise_r+0x42>
 801a942:	2316      	movs	r3, #22
 801a944:	6003      	str	r3, [r0, #0]
 801a946:	2001      	movs	r0, #1
 801a948:	e7e7      	b.n	801a91a <_raise_r+0x12>
 801a94a:	2400      	movs	r4, #0
 801a94c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a950:	4628      	mov	r0, r5
 801a952:	4798      	blx	r3
 801a954:	2000      	movs	r0, #0
 801a956:	e7e0      	b.n	801a91a <_raise_r+0x12>

0801a958 <raise>:
 801a958:	4b02      	ldr	r3, [pc, #8]	; (801a964 <raise+0xc>)
 801a95a:	4601      	mov	r1, r0
 801a95c:	6818      	ldr	r0, [r3, #0]
 801a95e:	f7ff bfd3 	b.w	801a908 <_raise_r>
 801a962:	bf00      	nop
 801a964:	20000024 	.word	0x20000024

0801a968 <_kill_r>:
 801a968:	b538      	push	{r3, r4, r5, lr}
 801a96a:	4d07      	ldr	r5, [pc, #28]	; (801a988 <_kill_r+0x20>)
 801a96c:	2300      	movs	r3, #0
 801a96e:	4604      	mov	r4, r0
 801a970:	4608      	mov	r0, r1
 801a972:	4611      	mov	r1, r2
 801a974:	602b      	str	r3, [r5, #0]
 801a976:	f000 f82b 	bl	801a9d0 <_kill>
 801a97a:	1c43      	adds	r3, r0, #1
 801a97c:	d102      	bne.n	801a984 <_kill_r+0x1c>
 801a97e:	682b      	ldr	r3, [r5, #0]
 801a980:	b103      	cbz	r3, 801a984 <_kill_r+0x1c>
 801a982:	6023      	str	r3, [r4, #0]
 801a984:	bd38      	pop	{r3, r4, r5, pc}
 801a986:	bf00      	nop
 801a988:	20009b30 	.word	0x20009b30

0801a98c <_getpid_r>:
 801a98c:	f000 b810 	b.w	801a9b0 <_getpid>

0801a990 <_close>:
 801a990:	4b02      	ldr	r3, [pc, #8]	; (801a99c <_close+0xc>)
 801a992:	2258      	movs	r2, #88	; 0x58
 801a994:	601a      	str	r2, [r3, #0]
 801a996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a99a:	4770      	bx	lr
 801a99c:	20009b30 	.word	0x20009b30

0801a9a0 <_fstat>:
 801a9a0:	4b02      	ldr	r3, [pc, #8]	; (801a9ac <_fstat+0xc>)
 801a9a2:	2258      	movs	r2, #88	; 0x58
 801a9a4:	601a      	str	r2, [r3, #0]
 801a9a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a9aa:	4770      	bx	lr
 801a9ac:	20009b30 	.word	0x20009b30

0801a9b0 <_getpid>:
 801a9b0:	4b02      	ldr	r3, [pc, #8]	; (801a9bc <_getpid+0xc>)
 801a9b2:	2258      	movs	r2, #88	; 0x58
 801a9b4:	601a      	str	r2, [r3, #0]
 801a9b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a9ba:	4770      	bx	lr
 801a9bc:	20009b30 	.word	0x20009b30

0801a9c0 <_isatty>:
 801a9c0:	4b02      	ldr	r3, [pc, #8]	; (801a9cc <_isatty+0xc>)
 801a9c2:	2258      	movs	r2, #88	; 0x58
 801a9c4:	601a      	str	r2, [r3, #0]
 801a9c6:	2000      	movs	r0, #0
 801a9c8:	4770      	bx	lr
 801a9ca:	bf00      	nop
 801a9cc:	20009b30 	.word	0x20009b30

0801a9d0 <_kill>:
 801a9d0:	4b02      	ldr	r3, [pc, #8]	; (801a9dc <_kill+0xc>)
 801a9d2:	2258      	movs	r2, #88	; 0x58
 801a9d4:	601a      	str	r2, [r3, #0]
 801a9d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a9da:	4770      	bx	lr
 801a9dc:	20009b30 	.word	0x20009b30

0801a9e0 <_lseek>:
 801a9e0:	4b02      	ldr	r3, [pc, #8]	; (801a9ec <_lseek+0xc>)
 801a9e2:	2258      	movs	r2, #88	; 0x58
 801a9e4:	601a      	str	r2, [r3, #0]
 801a9e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a9ea:	4770      	bx	lr
 801a9ec:	20009b30 	.word	0x20009b30

0801a9f0 <_read>:
 801a9f0:	4b02      	ldr	r3, [pc, #8]	; (801a9fc <_read+0xc>)
 801a9f2:	2258      	movs	r2, #88	; 0x58
 801a9f4:	601a      	str	r2, [r3, #0]
 801a9f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a9fa:	4770      	bx	lr
 801a9fc:	20009b30 	.word	0x20009b30

0801aa00 <_sbrk>:
 801aa00:	4b04      	ldr	r3, [pc, #16]	; (801aa14 <_sbrk+0x14>)
 801aa02:	6819      	ldr	r1, [r3, #0]
 801aa04:	4602      	mov	r2, r0
 801aa06:	b909      	cbnz	r1, 801aa0c <_sbrk+0xc>
 801aa08:	4903      	ldr	r1, [pc, #12]	; (801aa18 <_sbrk+0x18>)
 801aa0a:	6019      	str	r1, [r3, #0]
 801aa0c:	6818      	ldr	r0, [r3, #0]
 801aa0e:	4402      	add	r2, r0
 801aa10:	601a      	str	r2, [r3, #0]
 801aa12:	4770      	bx	lr
 801aa14:	200084dc 	.word	0x200084dc
 801aa18:	20009b38 	.word	0x20009b38

0801aa1c <_exit>:
 801aa1c:	e7fe      	b.n	801aa1c <_exit>
	...

0801aa20 <_init>:
 801aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa22:	bf00      	nop
 801aa24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa26:	bc08      	pop	{r3}
 801aa28:	469e      	mov	lr, r3
 801aa2a:	4770      	bx	lr

0801aa2c <_fini>:
 801aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa2e:	bf00      	nop
 801aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa32:	bc08      	pop	{r3}
 801aa34:	469e      	mov	lr, r3
 801aa36:	4770      	bx	lr

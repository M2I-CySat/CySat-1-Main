
OBC_SDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb78  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800cd28  0800cd28  0001cd28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d114  0800d114  0001d114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d118  0800d118  0001d118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000000  0800d11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
  7 .bss          00001ff0  200001e8  200001e8  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  200021d8  200021d8  000201e8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000410b8  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000627a  00000000  00000000  000612d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002388  00000000  00000000  00067550  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002150  00000000  00000000  000698d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000af3e  00000000  00000000  0006ba28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00023129  00000000  00000000  00076966  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f8b10  00000000  00000000  00099a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0019259f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a780  00000000  00000000  0019261c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000a9  00000000  00000000  0019cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cd10 	.word	0x0800cd10

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800cd10 	.word	0x0800cd10

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cs_packet;
    uint8_t subsys = packet[1];
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	77fb      	strb	r3, [r7, #31]
    uint8_t cmd = packet[2];
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	789b      	ldrb	r3, [r3, #2]
 8000bdc:	77bb      	strb	r3, [r7, #30]
    uint8_t data_len = packet[3];
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	78db      	ldrb	r3, [r3, #3]
 8000be2:	777b      	strb	r3, [r7, #29]
    uint8_t* data_ptr = (uint8_t*) malloc(sizeof(uint8_t) * data_len);
 8000be4:	7f7b      	ldrb	r3, [r7, #29]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00a f81c 	bl	800ac24 <malloc>
 8000bec:	4603      	mov	r3, r0
 8000bee:	61bb      	str	r3, [r7, #24]
    uint8_t cksum = packet[4 + data_len];
 8000bf0:	7f7b      	ldrb	r3, [r7, #29]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	75fb      	strb	r3, [r7, #23]

    cs_packet.Subsystem_Type = subsys;
 8000bfe:	7ffb      	ldrb	r3, [r7, #31]
 8000c00:	723b      	strb	r3, [r7, #8]
    cs_packet.Command = cmd;
 8000c02:	7fbb      	ldrb	r3, [r7, #30]
 8000c04:	727b      	strb	r3, [r7, #9]
    cs_packet.Data_Length = data_len;
 8000c06:	7f7b      	ldrb	r3, [r7, #29]
 8000c08:	72bb      	strb	r3, [r7, #10]
    cs_packet.Data = data_ptr;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	60fb      	str	r3, [r7, #12]
    cs_packet.Checksum = cksum;
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	743b      	strb	r3, [r7, #16]

    return cs_packet;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	461c      	mov	r4, r3
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
	...

08000c2c <sendCySatPacket>:
 * communicate with the UHF Transceiver in the final implementation.
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendCySatPacket(CySat_Packet_t packet){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint8_t* message = (uint8_t*) malloc(sizeof(uint8_t) * (packet.Data_Length + 5));
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	3305      	adds	r3, #5
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f009 fff1 	bl	800ac24 <malloc>
 8000c42:	4603      	mov	r3, r0
 8000c44:	613b      	str	r3, [r7, #16]

    //build byte array
    message[0] = 0xFF; //start byte
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	22ff      	movs	r2, #255	; 0xff
 8000c4a:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	793a      	ldrb	r2, [r7, #4]
 8000c52:	701a      	strb	r2, [r3, #0]
    message[2] = packet.Command;
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	3302      	adds	r3, #2
 8000c58:	797a      	ldrb	r2, [r7, #5]
 8000c5a:	701a      	strb	r2, [r3, #0]
    message[3] = packet.Data_Length;
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	3303      	adds	r3, #3
 8000c60:	79ba      	ldrb	r2, [r7, #6]
 8000c62:	701a      	strb	r2, [r3, #0]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e00b      	b.n	8000c82 <sendCySatPacket+0x56>
        message[i + 4] = packet.Data[i];
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	441a      	add	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3304      	adds	r3, #4
 8000c74:	6939      	ldr	r1, [r7, #16]
 8000c76:	440b      	add	r3, r1
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < packet.Data_Length; i++){
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	461a      	mov	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	dbee      	blt.n	8000c6a <sendCySatPacket+0x3e>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	461a      	mov	r2, r3
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	4413      	add	r3, r2
 8000c96:	7b3a      	ldrb	r2, [r7, #12]
 8000c98:	701a      	strb	r2, [r3, #0]

    //send message over uart
    HAL_UART_Transmit(&huart6, message, packet.Data_Length + 5, 100); //send the message over uart, but timeout after 100ms
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	3305      	adds	r3, #5
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	2364      	movs	r3, #100	; 0x64
 8000ca4:	6939      	ldr	r1, [r7, #16]
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <sendCySatPacket+0x90>)
 8000ca8:	f006 fa07 	bl	80070ba <HAL_UART_Transmit>

    free(message);
 8000cac:	6938      	ldr	r0, [r7, #16]
 8000cae:	f009 ffc1 	bl	800ac34 <free>
    return 0;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200020b8 	.word	0x200020b8

08000cc0 <READ_EPS_BATTERY_VOLTAGE>:
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param handle: The I2C handle you want to attempt to talk to the EPS upon
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(I2C_HandleTypeDef handle, float* volt_ptr){
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b096      	sub	sp, #88	; 0x58
 8000cc6:	af14      	add	r7, sp, #80	; 0x50
 8000cc8:	f107 0c10 	add.w	ip, r7, #16
 8000ccc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	71fb      	strb	r3, [r7, #7]
    uint8_t command = 1; //battery voltage command
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    status = EPS_READ(handle, command, data);
 8000cd8:	463b      	mov	r3, r7
 8000cda:	9312      	str	r3, [sp, #72]	; 0x48
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	9311      	str	r3, [sp, #68]	; 0x44
 8000ce0:	4668      	mov	r0, sp
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2244      	movs	r2, #68	; 0x44
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f009 ffab 	bl	800ac44 <memcpy>
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf4:	f000 f84e 	bl	8000d94 <EPS_READ>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK){
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <READ_EPS_BATTERY_VOLTAGE+0x46>
        return status;
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	e014      	b.n	8000d30 <READ_EPS_BATTERY_VOLTAGE+0x70>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8000d06:	783b      	ldrb	r3, [r7, #0]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	787b      	ldrb	r3, [r7, #1]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4413      	add	r3, r2
 8000d14:	80bb      	strh	r3, [r7, #4]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	ee07 3a90 	vmov	s15, r3
 8000d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d20:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000d40 <READ_EPS_BATTERY_VOLTAGE+0x80>
 8000d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d2a:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58
    return status;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d3a:	b004      	add	sp, #16
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	3b1951eb 	.word	0x3b1951eb

08000d44 <enable_EPS_Output_5>:
    if(status == HAL_OK)
        return 0;
    return status;
}

int8_t enable_EPS_Output_5(I2C_HandleTypeDef handle){
 8000d44:	b084      	sub	sp, #16
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b096      	sub	sp, #88	; 0x58
 8000d4a:	af14      	add	r7, sp, #80	; 0x50
 8000d4c:	f107 0c10 	add.w	ip, r7, #16
 8000d50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef status = EPS_WRITE(handle, 15 - 1, 1); //turn command 15 to the ON state
 8000d54:	2301      	movs	r3, #1
 8000d56:	9312      	str	r3, [sp, #72]	; 0x48
 8000d58:	230e      	movs	r3, #14
 8000d5a:	9311      	str	r3, [sp, #68]	; 0x44
 8000d5c:	4668      	mov	r0, sp
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	2244      	movs	r2, #68	; 0x44
 8000d64:	4619      	mov	r1, r3
 8000d66:	f009 ff6d 	bl	800ac44 <memcpy>
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d70:	f000 f840 	bl	8000df4 <EPS_WRITE>
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
    if(status == HAL_OK)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <enable_EPS_Output_5+0x3e>
        return 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e001      	b.n	8000d86 <enable_EPS_Output_5+0x42>
    return status;
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d90:	b004      	add	sp, #16
 8000d92:	4770      	bx	lr

08000d94 <EPS_READ>:
    return status;
}

/********************************************** HELPER FUNCTIONS **********************************************************************************/

HAL_StatusTypeDef EPS_READ(I2C_HandleTypeDef handle, uint8_t command, uint8_t* data_ptr){
 8000d94:	b084      	sub	sp, #16
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af02      	add	r7, sp, #8
 8000d9c:	f107 0c10 	add.w	ip, r7, #16
 8000da0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        HAL_StatusTypeDef status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	71fb      	strb	r3, [r7, #7]
        status = HAL_I2C_Master_Transmit(&handle, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 8000da8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	2130      	movs	r1, #48	; 0x30
 8000db6:	f107 0010 	add.w	r0, r7, #16
 8000dba:	f001 fe63 	bl	8002a84 <HAL_I2C_Master_Transmit>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
        if(status != HAL_OK){
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <EPS_READ+0x38>
            return status;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	e00c      	b.n	8000de6 <EPS_READ+0x52>
        }
        status = HAL_I2C_Master_Receive(&handle, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 8000dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000dd6:	2130      	movs	r1, #48	; 0x30
 8000dd8:	f107 0010 	add.w	r0, r7, #16
 8000ddc:	f001 ff60 	bl	8002ca0 <HAL_I2C_Master_Receive>
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
        return status;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <EPS_WRITE>:
  * @param handle: the i2c handle upon which to communicate
  * @param command: the write command number to perform
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(I2C_HandleTypeDef handle, uint8_t command, uint8_t state){
 8000df4:	b084      	sub	sp, #16
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af02      	add	r7, sp, #8
 8000dfc:	f107 0c10 	add.w	ip, r7, #16
 8000e00:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        HAL_StatusTypeDef status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	71fb      	strb	r3, [r7, #7]
        uint8_t data[2];
        data[0] = command;
 8000e08:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e0c:	713b      	strb	r3, [r7, #4]
        data[1] = state;
 8000e0e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000e12:	717b      	strb	r3, [r7, #5]
        status = HAL_I2C_Master_Transmit(&handle, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT);
 8000e14:	1d3a      	adds	r2, r7, #4
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	2130      	movs	r1, #48	; 0x30
 8000e20:	f107 0010 	add.w	r0, r7, #16
 8000e24:	f001 fe2e 	bl	8002a84 <HAL_I2C_Master_Transmit>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
        return status;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e38:	b004      	add	sp, #16
 8000e3a:	4770      	bx	lr

08000e3c <SET_BEACON_TEXT>:
 * size     :The size needs to be under 0x62 to fit in the size of endurosat beacon format.
 *
 * data_ptr :A pointer to allow information from the beacon set to be viewed. If it failed this can show why.
 *
 */
HAL_StatusTypeDef SET_BEACON_TEXT(I2C_HandleTypeDef handle, uint8_t* text, uint16_t size, uint8_t* data_ptr){ //size is in hex format less than 0x62
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	b5b0      	push	{r4, r5, r7, lr}
 8000e40:	b09e      	sub	sp, #120	; 0x78
 8000e42:	af16      	add	r7, sp, #88	; 0x58
 8000e44:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e4c:	466b      	mov	r3, sp
 8000e4e:	461d      	mov	r5, r3

    HAL_StatusTypeDef status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	75fb      	strb	r3, [r7, #23]

    if(size>98){        //To avoid the size limit of 0x62
 8000e54:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000e58:	2b62      	cmp	r3, #98	; 0x62
 8000e5a:	d901      	bls.n	8000e60 <SET_BEACON_TEXT+0x24>
        return status;
 8000e5c:	7dfb      	ldrb	r3, [r7, #23]
 8000e5e:	e0ac      	b.n	8000fba <SET_BEACON_TEXT+0x17e>
    }
    uint8_t command[size+16];
 8000e60:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000e64:	f103 0010 	add.w	r0, r3, #16
 8000e68:	1e43      	subs	r3, r0, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	f04f 0400 	mov.w	r4, #0
 8000e7c:	00d4      	lsls	r4, r2, #3
 8000e7e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e82:	00cb      	lsls	r3, r1, #3
 8000e84:	4603      	mov	r3, r0
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	f04f 0400 	mov.w	r4, #0
 8000e94:	00d4      	lsls	r4, r2, #3
 8000e96:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e9a:	00cb      	lsls	r3, r1, #3
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	3307      	adds	r3, #7
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea8:	ab16      	add	r3, sp, #88	; 0x58
 8000eaa:	3300      	adds	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
    command[0]='E';
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2245      	movs	r2, #69	; 0x45
 8000eb2:	701a      	strb	r2, [r3, #0]
    command[1]='S';
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2253      	movs	r2, #83	; 0x53
 8000eb8:	705a      	strb	r2, [r3, #1]
    command[2]='+';
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	222b      	movs	r2, #43	; 0x2b
 8000ebe:	709a      	strb	r2, [r3, #2]
    command[3]='W';
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2257      	movs	r2, #87	; 0x57
 8000ec4:	70da      	strb	r2, [r3, #3]
    command[4]='2';
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2232      	movs	r2, #50	; 0x32
 8000eca:	711a      	strb	r2, [r3, #4]
    command[5]='2';
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2232      	movs	r2, #50	; 0x32
 8000ed0:	715a      	strb	r2, [r3, #5]
    command[6]='F';
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2246      	movs	r2, #70	; 0x46
 8000ed6:	719a      	strb	r2, [r3, #6]
    command[7]='B';
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2242      	movs	r2, #66	; 0x42
 8000edc:	71da      	strb	r2, [r3, #7]

    command[8]= (0xFF00 & size) >> 8;
 8000ede:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	721a      	strb	r2, [r3, #8]
    command[9]= 0xFF & size;
 8000eec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	725a      	strb	r2, [r3, #9]

    int i=0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
    while(text[i]!='\0'){
 8000efa:	e00b      	b.n	8000f14 <SET_BEACON_TEXT+0xd8>
        command[i+10]=text[i];
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000f02:	441a      	add	r2, r3
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	330a      	adds	r3, #10
 8000f08:	7811      	ldrb	r1, [r2, #0]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	54d1      	strb	r1, [r2, r3]
        i++;
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	3301      	adds	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
    while(text[i]!='\0'){
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1ec      	bne.n	8000efc <SET_BEACON_TEXT+0xc0>
    }
    command[i+10]='\0';
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	330a      	adds	r3, #10
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	54d1      	strb	r1, [r2, r3]


    uint32_t crc;
    uint8_t asciiHex[4];

    crc= crc32(command);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fbac 	bl	800168c <crc32>
 8000f34:	60b8      	str	r0, [r7, #8]
    command[i+10]=' ';
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	330a      	adds	r3, #10
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	54d1      	strb	r1, [r2, r3]
    Unsigned32toUnsigned8bitArray(asciiHex, crc);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fb10 	bl	800156a <Unsigned32toUnsigned8bitArray>
    int j=0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    while(j < 4){
 8000f4e:	e00d      	b.n	8000f6c <SET_BEACON_TEXT+0x130>
        command[i+11+j]= asciiHex[j];
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	f103 020b 	add.w	r2, r3, #11
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	4413      	add	r3, r2
 8000f5a:	1d39      	adds	r1, r7, #4
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	440a      	add	r2, r1
 8000f60:	7811      	ldrb	r1, [r2, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	54d1      	strb	r1, [r2, r3]
        j++;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
    while(j < 4){
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	ddee      	ble.n	8000f50 <SET_BEACON_TEXT+0x114>
    }
    command[i+11+j]='\0';
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	f103 020b 	add.w	r2, r3, #11
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	2100      	movs	r1, #0
 8000f80:	54d1      	strb	r1, [r2, r3]

    status= UHF_WRITE(handle, command, data_ptr, size+16, 11);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	3210      	adds	r2, #16
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	210b      	movs	r1, #11
 8000f90:	9114      	str	r1, [sp, #80]	; 0x50
 8000f92:	9213      	str	r2, [sp, #76]	; 0x4c
 8000f94:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f98:	9212      	str	r2, [sp, #72]	; 0x48
 8000f9a:	9311      	str	r3, [sp, #68]	; 0x44
 8000f9c:	4668      	mov	r0, sp
 8000f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fa2:	2244      	movs	r2, #68	; 0x44
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f009 fe4d 	bl	800ac44 <memcpy>
 8000faa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb0:	f000 f9c6 	bl	8001340 <UHF_WRITE>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]


    return status;
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	46ad      	mov	sp, r5

}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fc6:	b004      	add	sp, #16
 8000fc8:	4770      	bx	lr

08000fca <SET_BEACON_PERIOD>:
 *
 * period_int  :The period in seconds for the beacon to be set to.
 *
 * data_ptr    :A pointer to allow information from the health check to be viewed.
 */
HAL_StatusTypeDef SET_BEACON_PERIOD(I2C_HandleTypeDef handle, uint32_t period_int, uint8_t* data_ptr){
 8000fca:	b084      	sub	sp, #16
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0a8      	sub	sp, #160	; 0xa0
 8000fd0:	af16      	add	r7, sp, #88	; 0x58
 8000fd2:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8000fd6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t period[4];

    Unsigned32toUnsigned8bitArray(period, period_int);
 8000fe0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fe4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fabe 	bl	800156a <Unsigned32toUnsigned8bitArray>

    uint8_t command[17], crcCommand[25];

    command[0]= 'E';
 8000fee:	2345      	movs	r3, #69	; 0x45
 8000ff0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    command[1]= 'S';
 8000ff4:	2353      	movs	r3, #83	; 0x53
 8000ff6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    command[2]= '+';
 8000ffa:	232b      	movs	r3, #43	; 0x2b
 8000ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    command[3]= 'W';
 8001000:	2357      	movs	r3, #87	; 0x57
 8001002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    command[4]= '2';
 8001006:	2332      	movs	r3, #50	; 0x32
 8001008:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    command[5]= '2';
 800100c:	2332      	movs	r3, #50	; 0x32
 800100e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    command[6]= '0';
 8001012:	2330      	movs	r3, #48	; 0x30
 8001014:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    command[7]= '7';
 8001018:	2337      	movs	r3, #55	; 0x37
 800101a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    command[8]= '0';
 800101e:	2330      	movs	r3, #48	; 0x30
 8001020:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    command[9]= '0';
 8001024:	2330      	movs	r3, #48	; 0x30
 8001026:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    command[10]='0';
 800102a:	2330      	movs	r3, #48	; 0x30
 800102c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    command[11]='0';
 8001030:	2330      	movs	r3, #48	; 0x30
 8001032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    command[12]=period[0];
 8001036:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800103a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    command[13]=period[1];
 800103e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001042:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    command[14]=period[2];
 8001046:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800104a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    command[15]=period[3];
 800104e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    command[16]='\0';
 8001056:	2300      	movs	r3, #0
 8001058:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    uint32_t crc;
    uint8_t asciiHex[4];

    crc= crc32(command);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fb13 	bl	800168c <crc32>
 8001066:	63f8      	str	r0, [r7, #60]	; 0x3c
    Unsigned32toUnsigned8bitArray(asciiHex, crc);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fa7c 	bl	800156a <Unsigned32toUnsigned8bitArray>
    int i=0;
 8001072:	2300      	movs	r3, #0
 8001074:	647b      	str	r3, [r7, #68]	; 0x44
    while(i<16){
 8001076:	e00d      	b.n	8001094 <SET_BEACON_PERIOD+0xca>
        crcCommand[i]=command[i];
 8001078:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800107c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800107e:	4413      	add	r3, r2
 8001080:	7819      	ldrb	r1, [r3, #0]
 8001082:	f107 0208 	add.w	r2, r7, #8
 8001086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001088:	4413      	add	r3, r2
 800108a:	460a      	mov	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
        i++;
 800108e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001090:	3301      	adds	r3, #1
 8001092:	647b      	str	r3, [r7, #68]	; 0x44
    while(i<16){
 8001094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001096:	2b0f      	cmp	r3, #15
 8001098:	ddee      	ble.n	8001078 <SET_BEACON_PERIOD+0xae>
    }

    i=0;
 800109a:	2300      	movs	r3, #0
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
    crcCommand[16]=' ';
 800109e:	2320      	movs	r3, #32
 80010a0:	763b      	strb	r3, [r7, #24]
    while(i < 4){
 80010a2:	e00d      	b.n	80010c0 <SET_BEACON_PERIOD+0xf6>
        crcCommand[17+i]=asciiHex[i];
 80010a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010a6:	3311      	adds	r3, #17
 80010a8:	1d39      	adds	r1, r7, #4
 80010aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010ac:	440a      	add	r2, r1
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010b4:	440b      	add	r3, r1
 80010b6:	f803 2c40 	strb.w	r2, [r3, #-64]
        i++;
 80010ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010bc:	3301      	adds	r3, #1
 80010be:	647b      	str	r3, [r7, #68]	; 0x44
    while(i < 4){
 80010c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	ddee      	ble.n	80010a4 <SET_BEACON_PERIOD+0xda>
    }
    crcCommand[17+i]='\r';
 80010c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c8:	3311      	adds	r3, #17
 80010ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010ce:	4413      	add	r3, r2
 80010d0:	220d      	movs	r2, #13
 80010d2:	f803 2c40 	strb.w	r2, [r3, #-64]

    status= UHF_WRITE(handle, crcCommand, data_ptr, 25, 11);
 80010d6:	230b      	movs	r3, #11
 80010d8:	9314      	str	r3, [sp, #80]	; 0x50
 80010da:	2319      	movs	r3, #25
 80010dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80010de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010e2:	9312      	str	r3, [sp, #72]	; 0x48
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	9311      	str	r3, [sp, #68]	; 0x44
 80010ea:	4668      	mov	r0, sp
 80010ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f0:	2244      	movs	r2, #68	; 0x44
 80010f2:	4619      	mov	r1, r3
 80010f4:	f009 fda6 	bl	800ac44 <memcpy>
 80010f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010fe:	f000 f91f 	bl	8001340 <UHF_WRITE>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    return status;
 8001108:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43

}
 800110c:	4618      	mov	r0, r3
 800110e:	3748      	adds	r7, #72	; 0x48
 8001110:	46bd      	mov	sp, r7
 8001112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001116:	b004      	add	sp, #16
 8001118:	4770      	bx	lr

0800111a <START_BEACON>:
 * Parameters~~~~~~~~~~~~~~~~~~~~~
 *
 * handle   :Used to identify the I2C channel to use.
 *
 */
HAL_StatusTypeDef START_BEACON(I2C_HandleTypeDef handle){
 800111a:	b084      	sub	sp, #16
 800111c:	b580      	push	{r7, lr}
 800111e:	b0ae      	sub	sp, #184	; 0xb8
 8001120:	af16      	add	r7, sp, #88	; 0x58
 8001122:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 8001126:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t data[23];
    uint8_t bits[4];
    uint8_t read[18];
        read[0]='E';
 800112a:	2345      	movs	r3, #69	; 0x45
 800112c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        read[1]='S';
 8001130:	2353      	movs	r3, #83	; 0x53
 8001132:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        read[2]='+';
 8001136:	232b      	movs	r3, #43	; 0x2b
 8001138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        read[3]='R';
 800113c:	2352      	movs	r3, #82	; 0x52
 800113e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        read[4]='2';
 8001142:	2332      	movs	r3, #50	; 0x32
 8001144:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        read[5]='2';
 8001148:	2332      	movs	r3, #50	; 0x32
 800114a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        read[6]='0';
 800114e:	2330      	movs	r3, #48	; 0x30
 8001150:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        read[7]='0';
 8001154:	2330      	movs	r3, #48	; 0x30
 8001156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        read[8]=' ';
 800115a:	2320      	movs	r3, #32
 800115c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        read[9]='B';
 8001160:	2342      	movs	r3, #66	; 0x42
 8001162:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        read[10]='D';
 8001166:	2344      	movs	r3, #68	; 0x44
 8001168:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        read[11]='8';
 800116c:	2338      	movs	r3, #56	; 0x38
 800116e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        read[12]='8';
 8001172:	2338      	movs	r3, #56	; 0x38
 8001174:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        read[13]='8';
 8001178:	2338      	movs	r3, #56	; 0x38
 800117a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        read[14]='E';
 800117e:	2345      	movs	r3, #69	; 0x45
 8001180:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        read[15]='1';
 8001184:	2331      	movs	r3, #49	; 0x31
 8001186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        read[16]='F';
 800118a:	2346      	movs	r3, #70	; 0x46
 800118c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        read[17]='\0';
 8001190:	2300      	movs	r3, #0
 8001192:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    HAL_StatusTypeDef check=HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    check= UHF_WRITE(handle, read, data, 18, 23);
 800119c:	2317      	movs	r3, #23
 800119e:	9314      	str	r3, [sp, #80]	; 0x50
 80011a0:	2312      	movs	r3, #18
 80011a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80011a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011a8:	9312      	str	r3, [sp, #72]	; 0x48
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	9311      	str	r3, [sp, #68]	; 0x44
 80011b0:	4668      	mov	r0, sp
 80011b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011b6:	2244      	movs	r2, #68	; 0x44
 80011b8:	4619      	mov	r1, r3
 80011ba:	f009 fd43 	bl	800ac44 <memcpy>
 80011be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c4:	f000 f8bc 	bl	8001340 <UHF_WRITE>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if(check != HAL_OK){
 80011ce:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <START_BEACON+0xc2>
        return check;
 80011d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011da:	e0aa      	b.n	8001332 <START_BEACON+0x218>
    }

    bits[0]=((data[9]-0x30)  | 0x00) +0x30;     //Added bitwise operators to avoid turning off functions
 80011dc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80011e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    bits[1]=((data[10]-0x30) | 0x03) +0x30;
 80011e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80011e8:	3b30      	subs	r3, #48	; 0x30
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	f043 0303 	orr.w	r3, r3, #3
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3330      	adds	r3, #48	; 0x30
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    bits[2]=((data[11]-0x30) | 0x04) +0x30;
 80011fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001202:	3b30      	subs	r3, #48	; 0x30
 8001204:	b2db      	uxtb	r3, r3
 8001206:	b25b      	sxtb	r3, r3
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	b25b      	sxtb	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	3330      	adds	r3, #48	; 0x30
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    bits[3]=((data[13]-0x30) | 0x03) +0x30;
 8001218:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800121c:	3b30      	subs	r3, #48	; 0x30
 800121e:	b2db      	uxtb	r3, r3
 8001220:	b25b      	sxtb	r3, r3
 8001222:	f043 0303 	orr.w	r3, r3, #3
 8001226:	b25b      	sxtb	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3330      	adds	r3, #48	; 0x30
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


	HAL_StatusTypeDef status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	uint8_t command[12];
    command[0]='E';
 8001238:	2345      	movs	r3, #69	; 0x45
 800123a:	763b      	strb	r3, [r7, #24]
    command[1]='S';
 800123c:	2353      	movs	r3, #83	; 0x53
 800123e:	767b      	strb	r3, [r7, #25]
    command[2]='+';
 8001240:	232b      	movs	r3, #43	; 0x2b
 8001242:	76bb      	strb	r3, [r7, #26]
    command[3]='W';
 8001244:	2357      	movs	r3, #87	; 0x57
 8001246:	76fb      	strb	r3, [r7, #27]
    command[4]='2';
 8001248:	2332      	movs	r3, #50	; 0x32
 800124a:	773b      	strb	r3, [r7, #28]
    command[5]='2';
 800124c:	2332      	movs	r3, #50	; 0x32
 800124e:	777b      	strb	r3, [r7, #29]
    command[6]='0';
 8001250:	2330      	movs	r3, #48	; 0x30
 8001252:	77bb      	strb	r3, [r7, #30]
    command[7]='0';
 8001254:	2330      	movs	r3, #48	; 0x30
 8001256:	77fb      	strb	r3, [r7, #31]
    command[8]=bits[0];
 8001258:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800125c:	f887 3020 	strb.w	r3, [r7, #32]
    command[9]=bits[1];
 8001260:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001264:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    command[10]=bits[2];
 8001268:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800126c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    command[11]=bits[3];
 8001270:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


    uint32_t crc;
    crc= crc32(command);
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fa05 	bl	800168c <crc32>
 8001282:	6578      	str	r0, [r7, #84]	; 0x54

    uint8_t crcCommand[18];

    int i=0;
 8001284:	2300      	movs	r3, #0
 8001286:	65fb      	str	r3, [r7, #92]	; 0x5c
    while(i<12){
 8001288:	e00c      	b.n	80012a4 <START_BEACON+0x18a>
        crcCommand[i]=command[i];
 800128a:	f107 0218 	add.w	r2, r7, #24
 800128e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001290:	4413      	add	r3, r2
 8001292:	7819      	ldrb	r1, [r3, #0]
 8001294:	1d3a      	adds	r2, r7, #4
 8001296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001298:	4413      	add	r3, r2
 800129a:	460a      	mov	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
        i++;
 800129e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a0:	3301      	adds	r3, #1
 80012a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    while(i<12){
 80012a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a6:	2b0b      	cmp	r3, #11
 80012a8:	ddef      	ble.n	800128a <START_BEACON+0x170>
    }
    crcCommand[12]=' ';
 80012aa:	2320      	movs	r3, #32
 80012ac:	743b      	strb	r3, [r7, #16]

    uint8_t asciiCRC[4];
    Unsigned32toUnsigned8bitArray(asciiCRC, crc);
 80012ae:	463b      	mov	r3, r7
 80012b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f959 	bl	800156a <Unsigned32toUnsigned8bitArray>
    i = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    while(i < 4){
 80012bc:	e00d      	b.n	80012da <START_BEACON+0x1c0>
        crcCommand[13+i]=asciiCRC[i];
 80012be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c0:	330d      	adds	r3, #13
 80012c2:	4639      	mov	r1, r7
 80012c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012c6:	440a      	add	r2, r1
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80012ce:	440b      	add	r3, r1
 80012d0:	f803 2c5c 	strb.w	r2, [r3, #-92]
        i++;
 80012d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d6:	3301      	adds	r3, #1
 80012d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    while(i < 4){
 80012da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012dc:	2b03      	cmp	r3, #3
 80012de:	ddee      	ble.n	80012be <START_BEACON+0x1a4>
    }
    crcCommand[13+i]='\r';
 80012e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e2:	330d      	adds	r3, #13
 80012e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012e8:	4413      	add	r3, r2
 80012ea:	220d      	movs	r2, #13
 80012ec:	f803 2c5c 	strb.w	r2, [r3, #-92]
    status = UHF_WRITE(handle, crcCommand, data, 18, 17);
 80012f0:	2311      	movs	r3, #17
 80012f2:	9314      	str	r3, [sp, #80]	; 0x50
 80012f4:	2312      	movs	r3, #18
 80012f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80012f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012fc:	9312      	str	r3, [sp, #72]	; 0x48
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	9311      	str	r3, [sp, #68]	; 0x44
 8001302:	4668      	mov	r0, sp
 8001304:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001308:	2244      	movs	r2, #68	; 0x44
 800130a:	4619      	mov	r1, r3
 800130c:	f009 fc9a 	bl	800ac44 <memcpy>
 8001310:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001316:	f000 f813 	bl	8001340 <UHF_WRITE>
 800131a:	4603      	mov	r3, r0
 800131c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
    if(status != HAL_OK){
 8001320:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <START_BEACON+0x214>
        return status;
 8001328:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800132c:	e001      	b.n	8001332 <START_BEACON+0x218>
    }

    return status;
 800132e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
}
 8001332:	4618      	mov	r0, r3
 8001334:	3760      	adds	r7, #96	; 0x60
 8001336:	46bd      	mov	sp, r7
 8001338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800133c:	b004      	add	sp, #16
 800133e:	4770      	bx	lr

08001340 <UHF_WRITE>:
 *
 * out_byte : The size of the expected return./How long to listen for.
 *
 *
 */
HAL_StatusTypeDef UHF_WRITE(I2C_HandleTypeDef handle, uint8_t command[], uint8_t* data_ptr, uint8_t in_byte, uint8_t out_byte){
 8001340:	b084      	sub	sp, #16
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af02      	add	r7, sp, #8
 8001348:	f107 0c10 	add.w	ip, r7, #16
 800134c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        HAL_StatusTypeDef status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	71fb      	strb	r3, [r7, #7]
        status = HAL_I2C_Master_Transmit(&handle, (uint16_t) (0x22) << 1, command, in_byte, 1000);
 8001354:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001358:	b29a      	uxth	r2, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001364:	2144      	movs	r1, #68	; 0x44
 8001366:	f107 0010 	add.w	r0, r7, #16
 800136a:	f001 fb8b 	bl	8002a84 <HAL_I2C_Master_Transmit>
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]

        if(status != HAL_OK){
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <UHF_WRITE+0x3c>
            return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	e00f      	b.n	800139c <UHF_WRITE+0x5c>
        }
        status = HAL_I2C_Master_Receive(&handle, (uint16_t) (0x22) << 1, data_ptr, out_byte, 1000);
 800137c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001380:	b29a      	uxth	r2, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	4613      	mov	r3, r2
 800138a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800138c:	2144      	movs	r1, #68	; 0x44
 800138e:	f107 0010 	add.w	r0, r7, #16
 8001392:	f001 fc85 	bl	8002ca0 <HAL_I2C_Master_Receive>
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
        return status;
 800139a:	79fb      	ldrb	r3, [r7, #7]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013a6:	b004      	add	sp, #16
 80013a8:	4770      	bx	lr
	...

080013ac <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 80013ac:	b40f      	push	{r0, r1, r2, r3}
 80013ae:	b5b0      	push	{r4, r5, r7, lr}
 80013b0:	b088      	sub	sp, #32
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	466b      	mov	r3, sp
 80013b6:	461d      	mov	r5, r3

    uint32_t bufferSize = 512;
 80013b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013bc:	61bb      	str	r3, [r7, #24]
    uint8_t formatBuffer[bufferSize];
 80013be:	69b8      	ldr	r0, [r7, #24]
 80013c0:	4603      	mov	r3, r0
 80013c2:	3b01      	subs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	4601      	mov	r1, r0
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	f04f 0400 	mov.w	r4, #0
 80013d4:	00d4      	lsls	r4, r2, #3
 80013d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80013da:	00cb      	lsls	r3, r1, #3
 80013dc:	4601      	mov	r1, r0
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	f04f 0400 	mov.w	r4, #0
 80013ea:	00d4      	lsls	r4, r2, #3
 80013ec:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80013f0:	00cb      	lsls	r3, r1, #3
 80013f2:	1dc3      	adds	r3, r0, #7
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	ebad 0d03 	sub.w	sp, sp, r3
 80013fc:	466b      	mov	r3, sp
 80013fe:	3300      	adds	r3, #0
 8001400:	613b      	str	r3, [r7, #16]

    va_list args;
    va_start(args, format);
 8001402:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001406:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 8001408:	6938      	ldr	r0, [r7, #16]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	f00a f96c 	bl	800b6ec <vsniprintf>
 8001414:	60f8      	str	r0, [r7, #12]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	77fb      	strb	r3, [r7, #31]
    if (len > 0) {
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	dd1b      	ble.n	8001458 <debug_printf+0xac>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	b29a      	uxth	r2, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <debug_printf+0xc4>)
 800142c:	f005 fe45 	bl	80070ba <HAL_UART_Transmit>
 8001430:	4603      	mov	r3, r0
 8001432:	77fb      	strb	r3, [r7, #31]
        uint8_t crlf[] = "\r\n";
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <debug_printf+0xc8>)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	4611      	mov	r1, r2
 800143c:	8019      	strh	r1, [r3, #0]
 800143e:	3302      	adds	r3, #2
 8001440:	0c12      	lsrs	r2, r2, #16
 8001442:	701a      	strb	r2, [r3, #0]
        status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
 8001444:	1d39      	adds	r1, r7, #4
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	2202      	movs	r2, #2
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <debug_printf+0xc4>)
 800144e:	f005 fe34 	bl	80070ba <HAL_UART_Transmit>
 8001452:	4603      	mov	r3, r0
 8001454:	77fb      	strb	r3, [r7, #31]
 8001456:	e001      	b.n	800145c <debug_printf+0xb0>
    }
    else{
        status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800145c:	7ffb      	ldrb	r3, [r7, #31]
 800145e:	46ad      	mov	sp, r5
}
 8001460:	4618      	mov	r0, r3
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800146a:	b004      	add	sp, #16
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200020b8 	.word	0x200020b8
 8001474:	0800cd28 	.word	0x0800cd28

08001478 <debugSerialReceive>:
  * @brief Receives data from the debug UART line in polling mode and then returns the number of read bytes.
  * It searches for a CySat Packet Protocol start field, and then reads until the end of the packet
  * @param data: a pointer to an allocated array to hold the received data
  * @retval the number of bytes read off the UART line
  */
int debugSerialReceive(uint8_t* data){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    uint8_t byte;
    int bytes = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
    status = HAL_UART_Receive(&huart6, &byte, 1, 10); //read one byte, which is the header. Only waits for a short time before returning from the function
 8001484:	f107 010f 	add.w	r1, r7, #15
 8001488:	230a      	movs	r3, #10
 800148a:	2201      	movs	r2, #1
 800148c:	4814      	ldr	r0, [pc, #80]	; (80014e0 <debugSerialReceive+0x68>)
 800148e:	f005 fead 	bl	80071ec <HAL_UART_Receive>
 8001492:	4603      	mov	r3, r0
 8001494:	75fb      	strb	r3, [r7, #23]
    if(byte != CSPP_START_CHAR) //if the byte is not the start character, return
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2bff      	cmp	r3, #255	; 0xff
 800149a:	d016      	beq.n	80014ca <debugSerialReceive+0x52>
        return 0;
 800149c:	2300      	movs	r3, #0
 800149e:	e01a      	b.n	80014d6 <debugSerialReceive+0x5e>

    while(status != HAL_TIMEOUT){
        data[bytes] = byte;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	701a      	strb	r2, [r3, #0]
        bytes++;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3301      	adds	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
        if(bytes == 260){
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80014b6:	d00c      	beq.n	80014d2 <debugSerialReceive+0x5a>
            break;
        }

        status = HAL_UART_Receive(&huart6, &byte, 1, 10);
 80014b8:	f107 010f 	add.w	r1, r7, #15
 80014bc:	230a      	movs	r3, #10
 80014be:	2201      	movs	r2, #1
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <debugSerialReceive+0x68>)
 80014c2:	f005 fe93 	bl	80071ec <HAL_UART_Receive>
 80014c6:	4603      	mov	r3, r0
 80014c8:	75fb      	strb	r3, [r7, #23]
    while(status != HAL_TIMEOUT){
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d1e7      	bne.n	80014a0 <debugSerialReceive+0x28>
 80014d0:	e000      	b.n	80014d4 <debugSerialReceive+0x5c>
            break;
 80014d2:	bf00      	nop
    }

    return bytes; //returns the number of bytes captured
 80014d4:	693b      	ldr	r3, [r7, #16]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200020b8 	.word	0x200020b8

080014e4 <debug_HAL_Status>:

/**
  * @brief Prints out the textual representation of the HAL Status
  * @param status: The status you want to print out
  */
void debug_HAL_Status(HAL_StatusTypeDef status){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
    if(status == HAL_OK){
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d103      	bne.n	80014fc <debug_HAL_Status+0x18>
        debug_printf("HAL_OK");
 80014f4:	480f      	ldr	r0, [pc, #60]	; (8001534 <debug_HAL_Status+0x50>)
 80014f6:	f7ff ff59 	bl	80013ac <debug_printf>
        debug_printf("HAL_TIMEOUT");
    }
    else{
        debug_printf("BIG ERROR: HAL Status not recognized");
    }
}
 80014fa:	e017      	b.n	800152c <debug_HAL_Status+0x48>
    else if(status == HAL_ERROR){
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d103      	bne.n	800150a <debug_HAL_Status+0x26>
        debug_printf("HAL_ERROR");
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <debug_HAL_Status+0x54>)
 8001504:	f7ff ff52 	bl	80013ac <debug_printf>
}
 8001508:	e010      	b.n	800152c <debug_HAL_Status+0x48>
    else if(status == HAL_BUSY){
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d103      	bne.n	8001518 <debug_HAL_Status+0x34>
        debug_printf("HAL_BUSY");
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <debug_HAL_Status+0x58>)
 8001512:	f7ff ff4b 	bl	80013ac <debug_printf>
}
 8001516:	e009      	b.n	800152c <debug_HAL_Status+0x48>
    else if(status == HAL_TIMEOUT){
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d103      	bne.n	8001526 <debug_HAL_Status+0x42>
        debug_printf("HAL_TIMEOUT");
 800151e:	4808      	ldr	r0, [pc, #32]	; (8001540 <debug_HAL_Status+0x5c>)
 8001520:	f7ff ff44 	bl	80013ac <debug_printf>
}
 8001524:	e002      	b.n	800152c <debug_HAL_Status+0x48>
        debug_printf("BIG ERROR: HAL Status not recognized");
 8001526:	4807      	ldr	r0, [pc, #28]	; (8001544 <debug_HAL_Status+0x60>)
 8001528:	f7ff ff40 	bl	80013ac <debug_printf>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	0800cd2c 	.word	0x0800cd2c
 8001538:	0800cd34 	.word	0x0800cd34
 800153c:	0800cd40 	.word	0x0800cd40
 8001540:	0800cd4c 	.word	0x0800cd4c
 8001544:	0800cd58 	.word	0x0800cd58

08001548 <FloatToUnsigned8bitArray>:
/**
  * @brief Converts a float into an array of 4 bytes
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a byte array
  */
void FloatToUnsigned8bitArray(uint8_t bytes[sizeof(float)], float float_value){
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	ed87 0a00 	vstr	s0, [r7]
    union {
        float f;
        uint8_t b[sizeof(float)];
    } both;
    both.f = float_value;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	60fb      	str	r3, [r7, #12]
    memcpy(bytes, both.b, sizeof(float));
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	601a      	str	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <Unsigned32toUnsigned8bitArray>:
/**
  * @brief Converts an unsigned 32 bit number into an array of 4 bytes
  * @param bytes: an array of bytes of size 4
  * @param value: the 32 bit value to convert into a byte array
  */
void Unsigned32toUnsigned8bitArray(uint8_t bytes[4], uint32_t value){
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
    bytes[0] = (value & 0xFF000000) >> 24;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	0e1b      	lsrs	r3, r3, #24
 8001578:	b2da      	uxtb	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	701a      	strb	r2, [r3, #0]
    bytes[1] = (value & 0x00FF0000) >> 16;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	0c1a      	lsrs	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3301      	adds	r3, #1
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]
    bytes[2] = (value & 0x000000FF) >> 8;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3302      	adds	r3, #2
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
    bytes[3] = value & 0x000000FF;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3303      	adds	r3, #3
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	701a      	strb	r2, [r3, #0]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 80015b8:	793b      	ldrb	r3, [r7, #4]
 80015ba:	461a      	mov	r2, r3
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	4413      	add	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 80015c2:	797b      	ldrb	r3, [r7, #5]
 80015c4:	461a      	mov	r2, r3
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4413      	add	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	461a      	mov	r2, r3
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	4413      	add	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e00a      	b.n	80015f2 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4413      	add	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	3301      	adds	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	461a      	mov	r2, r3
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	4293      	cmp	r3, r2
 80015fa:	dbef      	blt.n	80015dc <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	43db      	mvns	r3, r3
 8001604:	b2db      	uxtb	r3, r3
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 8001612:	b480      	push	{r7}
 8001614:	b087      	sub	sp, #28
 8001616:	af00      	add	r7, sp, #0
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	461a      	mov	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4413      	add	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 800162c:	797b      	ldrb	r3, [r7, #5]
 800162e:	461a      	mov	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4413      	add	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	461a      	mov	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4413      	add	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e00a      	b.n	800165c <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4413      	add	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	461a      	mov	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	4293      	cmp	r3, r2
 8001664:	dbef      	blt.n	8001646 <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 8001666:	7b3b      	ldrb	r3, [r7, #12]
 8001668:	461a      	mov	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4413      	add	r3, r2
 800166e:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2bff      	cmp	r3, #255	; 0xff
 8001676:	d101      	bne.n	800167c <validateCySatChecksum+0x6a>
        return 1;
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 800167c:	2300      	movs	r3, #0
    }
}
 800167e:	4618      	mov	r0, r3
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <crc32>:
 * message: contains the message to be used for calculation of the crc32.
 * 
 * output: outputs a uint32_t to as the value of the crc32. this will need to be
 * manipulated by the ascii to hex to be used bt the Transceiver
 */
uint32_t crc32(uint8_t* message) {
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
   int i, j;
  // debug_printf("%s",message);
   uint32_t byte, crc, mask;

   i = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
   crc = 0xFFFFFFFF;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800169c:	617b      	str	r3, [r7, #20]
   while (message[i] != '\0') {
 800169e:	e020      	b.n	80016e2 <crc32+0x56>
      byte = message[i];                //get the next byte of message
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	613b      	str	r3, [r7, #16]
      crc = crc ^ byte;                 //^ is bitwise XOR
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4053      	eors	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
      for (j = 7; j >= 0; j--) {
 80016b2:	2307      	movs	r3, #7
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	e00e      	b.n	80016d6 <crc32+0x4a>
         mask = -(crc & 1);     // make mask
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	425b      	negs	r3, r3
 80016c0:	60fb      	str	r3, [r7, #12]
         crc = (crc >> 1) ^ (0xEDB88320 & mask);  //shift crc and apply mask
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	085a      	lsrs	r2, r3, #1
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <crc32+0x74>)
 80016ca:	400b      	ands	r3, r1
 80016cc:	4053      	eors	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
      for (j = 7; j >= 0; j--) {
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	daed      	bge.n	80016b8 <crc32+0x2c>
      }
      i++;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	3301      	adds	r3, #1
 80016e0:	61fb      	str	r3, [r7, #28]
   while (message[i] != '\0') {
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1d8      	bne.n	80016a0 <crc32+0x14>
   }
   return ~crc;    //Returns the HEX value if wanted in ascii will need to use ascifier code in helper methods.
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	43db      	mvns	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	edb88320 	.word	0xedb88320

08001704 <main>:
      MX_I2C2_Init();
}


int main(void)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b0db      	sub	sp, #364	; 0x16c
 8001708:	af14      	add	r7, sp, #80	; 0x50
    //  SCB->VTOR = APPL_ADDRESS;

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800170a:	f000 fa65 	bl	8001bd8 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 800170e:	f007 f94b 	bl	80089a8 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001712:	f007 f9cb 	bl	8008aac <MX_GPIO_Init>
    MX_DMA_Init();
 8001716:	f007 fe37 	bl	8009388 <MX_DMA_Init>
    MX_ADC1_Init();
 800171a:	f007 fb63 	bl	8008de4 <MX_ADC1_Init>
    MX_FMC_Init();
 800171e:	f007 fb9b 	bl	8008e58 <MX_FMC_Init>
    MX_I2C1_Init();
 8001722:	f007 fbf1 	bl	8008f08 <MX_I2C1_Init>
    MX_I2C2_Init();
 8001726:	f007 fc1d 	bl	8008f64 <MX_I2C2_Init>
    MX_I2C3_Init();
 800172a:	f007 fc49 	bl	8008fc0 <MX_I2C3_Init>
    MX_SDIO_SD_Init();
 800172e:	f007 fc75 	bl	800901c <MX_SDIO_SD_Init>
    MX_SPI1_Init();
 8001732:	f007 fc93 	bl	800905c <MX_SPI1_Init>
    MX_SPI2_Init();
 8001736:	f007 fcc7 	bl	80090c8 <MX_SPI2_Init>
    MX_SPI6_Init();
 800173a:	f007 fcfd 	bl	8009138 <MX_SPI6_Init>
    MX_TIM5_Init();
 800173e:	f007 fd31 	bl	80091a4 <MX_TIM5_Init>
    MX_UART4_Init();
 8001742:	f007 fda3 	bl	800928c <MX_UART4_Init>
    MX_USART1_UART_Init();
 8001746:	f007 fdcb 	bl	80092e0 <MX_USART1_UART_Init>
    MX_USART6_UART_Init();
 800174a:	f007 fdf3 	bl	8009334 <MX_USART6_UART_Init>
    MX_RTC_Init(); //TODO: look into this
 800174e:	f007 fe43 	bl	80093d8 <MX_RTC_Init>
    MX_FATFS_Init();
 8001752:	f007 ff7b 	bl	800964c <MX_FATFS_Init>
  
    SatFlags.Detumbling = 0;
 8001756:	4a66      	ldr	r2, [pc, #408]	; (80018f0 <main+0x1ec>)
 8001758:	7813      	ldrb	r3, [r2, #0]
 800175a:	f36f 0300 	bfc	r3, #0, #1
 800175e:	7013      	strb	r3, [r2, #0]
    SatFlags.Auto_Control = 0;
 8001760:	4a63      	ldr	r2, [pc, #396]	; (80018f0 <main+0x1ec>)
 8001762:	7813      	ldrb	r3, [r2, #0]
 8001764:	f36f 0382 	bfc	r3, #2, #1
 8001768:	7013      	strb	r3, [r2, #0]
    SatFlags.Infinity_Detumbling = 0;
 800176a:	4a61      	ldr	r2, [pc, #388]	; (80018f0 <main+0x1ec>)
 800176c:	7813      	ldrb	r3, [r2, #0]
 800176e:	f36f 0341 	bfc	r3, #1, #1
 8001772:	7013      	strb	r3, [r2, #0]
    SatFlags.AD_is_Running = 0;
 8001774:	4a5e      	ldr	r2, [pc, #376]	; (80018f0 <main+0x1ec>)
 8001776:	7813      	ldrb	r3, [r2, #0]
 8001778:	f36f 03c3 	bfc	r3, #3, #1
 800177c:	7013      	strb	r3, [r2, #0]
    SatFlags.Antenna_is_Released = 0;
 800177e:	4a5c      	ldr	r2, [pc, #368]	; (80018f0 <main+0x1ec>)
 8001780:	7813      	ldrb	r3, [r2, #0]
 8001782:	f36f 1304 	bfc	r3, #4, #1
 8001786:	7013      	strb	r3, [r2, #0]
    SatFlags.Battery_Low = 0;
 8001788:	4a59      	ldr	r2, [pc, #356]	; (80018f0 <main+0x1ec>)
 800178a:	7813      	ldrb	r3, [r2, #0]
 800178c:	f36f 1345 	bfc	r3, #5, #1
 8001790:	7013      	strb	r3, [r2, #0]
    SatFlags.MelodyEnabled = 0;
 8001792:	4a57      	ldr	r2, [pc, #348]	; (80018f0 <main+0x1ec>)
 8001794:	7813      	ldrb	r3, [r2, #0]
 8001796:	f36f 13c7 	bfc	r3, #7, #1
 800179a:	7013      	strb	r3, [r2, #0]
    SatFlags.CameraReady = 0;
 800179c:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <main+0x1ec>)
 800179e:	7853      	ldrb	r3, [r2, #1]
 80017a0:	f36f 0300 	bfc	r3, #0, #1
 80017a4:	7053      	strb	r3, [r2, #1]
    SatFlags.MakePicture = 0;
 80017a6:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <main+0x1ec>)
 80017a8:	7853      	ldrb	r3, [r2, #1]
 80017aa:	f36f 0341 	bfc	r3, #1, #1
 80017ae:	7053      	strb	r3, [r2, #1]
    SatFlags.Gyros_ON_OFF = 0;
 80017b0:	4a4f      	ldr	r2, [pc, #316]	; (80018f0 <main+0x1ec>)
 80017b2:	7853      	ldrb	r3, [r2, #1]
 80017b4:	f36f 0382 	bfc	r3, #2, #1
 80017b8:	7053      	strb	r3, [r2, #1]
    SatFlags.BeaconEnabled = 0;
 80017ba:	4a4d      	ldr	r2, [pc, #308]	; (80018f0 <main+0x1ec>)
 80017bc:	7813      	ldrb	r3, [r2, #0]
 80017be:	f36f 1386 	bfc	r3, #6, #1
 80017c2:	7013      	strb	r3, [r2, #0]

    /* Waits for the required initial inactivity time period */
    HAL_Delay(INITIAL_WAIT);
 80017c4:	f64e 2060 	movw	r0, #60000	; 0xea60
 80017c8:	f000 fa42 	bl	8001c50 <HAL_Delay>
    AMBER_LED_OFF();
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <main+0x1f0>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <main+0x1f0>)
 80017d2:	f023 0320 	bic.w	r3, r3, #32
 80017d6:	6153      	str	r3, [r2, #20]

    //TODO: deploy boom magnetometer
    //TODO: enable ADCS orbit correction (may be after delay)

    //TODO: send power to other components
    turn_On_UHF_Transceiver(); //no explanation needed
 80017d8:	4c47      	ldr	r4, [pc, #284]	; (80018f8 <main+0x1f4>)
 80017da:	4668      	mov	r0, sp
 80017dc:	f104 0310 	add.w	r3, r4, #16
 80017e0:	2244      	movs	r2, #68	; 0x44
 80017e2:	4619      	mov	r1, r3
 80017e4:	f009 fa2e 	bl	800ac44 <memcpy>
 80017e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017ec:	f7ff faaa 	bl	8000d44 <enable_EPS_Output_5>

    HAL_Delay(5000);
 80017f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80017f4:	f000 fa2c 	bl	8001c50 <HAL_Delay>
    uint8_t data;
    //DEPLOY_ANTENNA(hi2c1);//deploy antenna
    //SatFlags.Antenna_is_Released = 1;
    debug_printf("Setting beacon text: ");
 80017f8:	4840      	ldr	r0, [pc, #256]	; (80018fc <main+0x1f8>)
 80017fa:	f7ff fdd7 	bl	80013ac <debug_printf>
    debug_HAL_Status(SET_BEACON_TEXT(hi2c1, INITIAL_BEACON_TEXT, INITIAL_BEACON_TEXT_SIZE, &data)); //set beacon message to default
 80017fe:	4c3e      	ldr	r4, [pc, #248]	; (80018f8 <main+0x1f4>)
 8001800:	f207 1317 	addw	r3, r7, #279	; 0x117
 8001804:	9313      	str	r3, [sp, #76]	; 0x4c
 8001806:	2320      	movs	r3, #32
 8001808:	9312      	str	r3, [sp, #72]	; 0x48
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <main+0x1fc>)
 800180c:	9311      	str	r3, [sp, #68]	; 0x44
 800180e:	4668      	mov	r0, sp
 8001810:	f104 0310 	add.w	r3, r4, #16
 8001814:	2244      	movs	r2, #68	; 0x44
 8001816:	4619      	mov	r1, r3
 8001818:	f009 fa14 	bl	800ac44 <memcpy>
 800181c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001820:	f7ff fb0c 	bl	8000e3c <SET_BEACON_TEXT>
 8001824:	4603      	mov	r3, r0
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fe5c 	bl	80014e4 <debug_HAL_Status>
    debug_printf("Setting beacon period: ");
 800182c:	4835      	ldr	r0, [pc, #212]	; (8001904 <main+0x200>)
 800182e:	f7ff fdbd 	bl	80013ac <debug_printf>
    debug_HAL_Status(SET_BEACON_PERIOD(hi2c1, INITIAL_BEACON_PERIOD, &data)); //set beacon period
 8001832:	4c31      	ldr	r4, [pc, #196]	; (80018f8 <main+0x1f4>)
 8001834:	f207 1317 	addw	r3, r7, #279	; 0x117
 8001838:	9312      	str	r3, [sp, #72]	; 0x48
 800183a:	231e      	movs	r3, #30
 800183c:	9311      	str	r3, [sp, #68]	; 0x44
 800183e:	4668      	mov	r0, sp
 8001840:	f104 0310 	add.w	r3, r4, #16
 8001844:	2244      	movs	r2, #68	; 0x44
 8001846:	4619      	mov	r1, r3
 8001848:	f009 f9fc 	bl	800ac44 <memcpy>
 800184c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001850:	f7ff fbbb 	bl	8000fca <SET_BEACON_PERIOD>
 8001854:	4603      	mov	r3, r0
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe44 	bl	80014e4 <debug_HAL_Status>
    debug_printf("Starting beacon: ");
 800185c:	482a      	ldr	r0, [pc, #168]	; (8001908 <main+0x204>)
 800185e:	f7ff fda5 	bl	80013ac <debug_printf>
    debug_HAL_Status(START_BEACON(hi2c1)); //Enable Beacon
 8001862:	4c25      	ldr	r4, [pc, #148]	; (80018f8 <main+0x1f4>)
 8001864:	4668      	mov	r0, sp
 8001866:	f104 0310 	add.w	r3, r4, #16
 800186a:	2244      	movs	r2, #68	; 0x44
 800186c:	4619      	mov	r1, r3
 800186e:	f009 f9e9 	bl	800ac44 <memcpy>
 8001872:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001876:	f7ff fc50 	bl	800111a <START_BEACON>
 800187a:	4603      	mov	r3, r0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fe31 	bl	80014e4 <debug_HAL_Status>
    SatFlags.BeaconEnabled = 1;
 8001882:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <main+0x1ec>)
 8001884:	7813      	ldrb	r3, [r2, #0]
 8001886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188a:	7013      	strb	r3, [r2, #0]
    uint8_t message[260];

    //initial phase loop
    while (1)
    {
        GREEN_LED_XOR(); //so we know it is breathing
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <main+0x1f0>)
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <main+0x1f0>)
 8001892:	f083 0310 	eor.w	r3, r3, #16
 8001896:	6153      	str	r3, [r2, #20]
        // TODO: check for UHF message
        if(debugSerialReceive(message) >= 5){
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fdeb 	bl	8001478 <debugSerialReceive>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	dd1a      	ble.n	80018de <main+0x1da>
            CySat_Packet_t p = parseCySatPacket(message);
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	f107 0210 	add.w	r2, r7, #16
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f989 	bl	8000bc8 <parseCySatPacket>
            if(validateCySatChecksum(p)){
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018bc:	f7ff fea9 	bl	8001612 <validateCySatChecksum>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d012      	beq.n	80018ec <main+0x1e8>
                if(handleCySatPacket(p) == -1){
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018cc:	f000 f830 	bl	8001930 <handleCySatPacket>
                    //log invalid subsystem type
                }
                AMBER_LED_ON();
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <main+0x1f0>)
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <main+0x1f0>)
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6153      	str	r3, [r2, #20]
 80018dc:	e7d6      	b.n	800188c <main+0x188>
            else{
                continue; //TODO: send error message and log
            }
        }
        else{
            AMBER_LED_OFF(); //No message received
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <main+0x1f0>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <main+0x1f0>)
 80018e4:	f023 0320 	bic.w	r3, r3, #32
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	e7cf      	b.n	800188c <main+0x188>
                continue; //TODO: send error message and log
 80018ec:	bf00      	nop
        GREEN_LED_XOR(); //so we know it is breathing
 80018ee:	e7cd      	b.n	800188c <main+0x188>
 80018f0:	20000bf4 	.word	0x20000bf4
 80018f4:	40020800 	.word	0x40020800
 80018f8:	20001d74 	.word	0x20001d74
 80018fc:	0800cd84 	.word	0x0800cd84
 8001900:	0800cd9c 	.word	0x0800cd9c
 8001904:	0800cdc0 	.word	0x0800cdc0
 8001908:	0800cdd8 	.word	0x0800cdd8

0800190c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800191e:	f000 f97d 	bl	8001c1c <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40010000 	.word	0x40010000

08001930 <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b0b6      	sub	sp, #216	; 0xd8
 8001934:	af12      	add	r7, sp, #72	; 0x48
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    switch(packet.Subsystem_Type){
 800193c:	793b      	ldrb	r3, [r7, #4]
 800193e:	2b1e      	cmp	r3, #30
 8001940:	f000 80d1 	beq.w	8001ae6 <handleCySatPacket+0x1b6>
 8001944:	2b1e      	cmp	r3, #30
 8001946:	dc05      	bgt.n	8001954 <handleCySatPacket+0x24>
 8001948:	2b0a      	cmp	r3, #10
 800194a:	d00a      	beq.n	8001962 <handleCySatPacket+0x32>
 800194c:	2b14      	cmp	r3, #20
 800194e:	f000 8104 	beq.w	8001b5a <handleCySatPacket+0x22a>
 8001952:	e0ff      	b.n	8001b54 <handleCySatPacket+0x224>
 8001954:	2b28      	cmp	r3, #40	; 0x28
 8001956:	f000 8102 	beq.w	8001b5e <handleCySatPacket+0x22e>
 800195a:	2b5a      	cmp	r3, #90	; 0x5a
 800195c:	f000 8101 	beq.w	8001b62 <handleCySatPacket+0x232>
 8001960:	e0f8      	b.n	8001b54 <handleCySatPacket+0x224>

    case CSPP_OBC_SUBTYPE: //OBC
        if(packet.Command == 0x01){ //Ping request command
 8001962:	797b      	ldrb	r3, [r7, #5]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d123      	bne.n	80019b0 <handleCySatPacket+0x80>
            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_OBC_SUBTYPE; //OBC module
 8001968:	230a      	movs	r3, #10
 800196a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            outgoingPacket.Command = 0x00; //Ping response
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
            outgoingPacket.Data_Length = 0x0C; //length of the message
 8001974:	230c      	movs	r3, #12
 8001976:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
            uint8_t d[] = "Hello Earth!";
 800197a:	4b7e      	ldr	r3, [pc, #504]	; (8001b74 <handleCySatPacket+0x244>)
 800197c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001982:	c407      	stmia	r4!, {r0, r1, r2}
 8001984:	7023      	strb	r3, [r4, #0]
            outgoingPacket.Data = d;
 8001986:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800198a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800198e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001992:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001996:	f7ff fe07 	bl	80015a8 <generateCySatChecksum>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            return sendCySatPacket(outgoingPacket); //send the response
 80019a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019a8:	f7ff f940 	bl	8000c2c <sendCySatPacket>
 80019ac:	4603      	mov	r3, r0
 80019ae:	e0dc      	b.n	8001b6a <handleCySatPacket+0x23a>
        }
        else if(packet.Command == 0x03){ //Request beacon shutoff
 80019b0:	797b      	ldrb	r3, [r7, #5]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d14a      	bne.n	8001a4c <handleCySatPacket+0x11c>
            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_OBC_SUBTYPE; //OBC module
 80019b6:	230a      	movs	r3, #10
 80019b8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            outgoingPacket.Command = 0x02; //Beacon shutoff response
 80019bc:	2302      	movs	r3, #2
 80019be:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

            if(SatFlags.BeaconEnabled){
 80019c2:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <handleCySatPacket+0x248>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01a      	beq.n	8001a06 <handleCySatPacket+0xd6>
                //TODO: command UHF to shutoff beacon
                SatFlags.BeaconEnabled = 0;
 80019d0:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <handleCySatPacket+0x248>)
 80019d2:	7813      	ldrb	r3, [r2, #0]
 80019d4:	f36f 1386 	bfc	r3, #6, #1
 80019d8:	7013      	strb	r3, [r2, #0]
                outgoingPacket.Data_Length = 0x0F;
 80019da:	230f      	movs	r3, #15
 80019dc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
                uint8_t d[] = "Beacon Shut Off";
 80019e0:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <handleCySatPacket+0x24c>)
 80019e2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80019e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                outgoingPacket.Data = d;
 80019ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019f0:	66fb      	str	r3, [r7, #108]	; 0x6c
                outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80019f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019fa:	f7ff fdd5 	bl	80015a8 <generateCySatChecksum>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8001a04:	e01a      	b.n	8001a3c <handleCySatPacket+0x10c>
            }
            else{
                outgoingPacket.Data_Length = 0x12;
 8001a06:	2312      	movs	r3, #18
 8001a08:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
                uint8_t d[] = "Beacon Already Off";
 8001a0c:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <handleCySatPacket+0x250>)
 8001a0e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001a12:	461d      	mov	r5, r3
 8001a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	8022      	strh	r2, [r4, #0]
 8001a1e:	3402      	adds	r4, #2
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	7023      	strb	r3, [r4, #0]
                outgoingPacket.Data = d;
 8001a24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a28:	66fb      	str	r3, [r7, #108]	; 0x6c
                outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001a2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a32:	f7ff fdb9 	bl	80015a8 <generateCySatChecksum>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            return sendCySatPacket(outgoingPacket); //send the response
 8001a3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a44:	f7ff f8f2 	bl	8000c2c <sendCySatPacket>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	e08e      	b.n	8001b6a <handleCySatPacket+0x23a>
        }
        else if(packet.Command == 0x05){ //Basic Health Check Request
 8001a4c:	797b      	ldrb	r3, [r7, #5]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d125      	bne.n	8001a9e <handleCySatPacket+0x16e>
            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_OBC_SUBTYPE; //OBC module
 8001a52:	230a      	movs	r3, #10
 8001a54:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            outgoingPacket.Command = 0x04; //enter main operating phase response
 8001a58:	2304      	movs	r3, #4
 8001a5a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            outgoingPacket.Data_Length = 0x3; //length of the message, one byte for each subsystem (EPS, OBC, UHF)
 8001a5e:	2303      	movs	r3, #3
 8001a60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            uint8_t d[3]; //generally, a zero means a failure or unused.
            d[0] = 0x00; //OBC, all described elsewhere
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            d[0] = 0x00; //EPS
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            d[0] = 0x00; //UHF
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            outgoingPacket.Data = d;
 8001a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
            outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001a7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a84:	f7ff fd90 	bl	80015a8 <generateCySatChecksum>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

            return sendCySatPacket(outgoingPacket); //send the response
 8001a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a96:	f7ff f8c9 	bl	8000c2c <sendCySatPacket>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	e065      	b.n	8001b6a <handleCySatPacket+0x23a>
        }
        else if(packet.Command == 0x07){ //Enter Main Operating Phase Request
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d160      	bne.n	8001b66 <handleCySatPacket+0x236>
            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_OBC_SUBTYPE; //OBC module
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            outgoingPacket.Command = 0x06; //enter main operating phase response
 8001aaa:	2306      	movs	r3, #6
 8001aac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            outgoingPacket.Data_Length = 0x1; //length of the message
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            uint8_t d[1] = "\0"; //0 means failure
 8001ab6:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <handleCySatPacket+0x254>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            outgoingPacket.Data = d;
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
            outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001acc:	f7ff fd6c 	bl	80015a8 <generateCySatChecksum>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

            return sendCySatPacket(outgoingPacket); //send the response
 8001ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ade:	f7ff f8a5 	bl	8000c2c <sendCySatPacket>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	e041      	b.n	8001b6a <handleCySatPacket+0x23a>
    case CSPP_ADCS_SUBTYPE: //ADCS

        break;

    case CSPP_EPS_SUBTYPE: //EPS
        if(packet.Command == 0x01){ //Request EPS battery voltage
 8001ae6:	797b      	ldrb	r3, [r7, #5]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d130      	bne.n	8001b4e <handleCySatPacket+0x21e>
            float voltage;
            READ_EPS_BATTERY_VOLTAGE(hi2c1, &voltage); //read the voltage from the EPS
 8001aec:	4c26      	ldr	r4, [pc, #152]	; (8001b88 <handleCySatPacket+0x258>)
 8001aee:	f107 0320 	add.w	r3, r7, #32
 8001af2:	9311      	str	r3, [sp, #68]	; 0x44
 8001af4:	4668      	mov	r0, sp
 8001af6:	f104 0310 	add.w	r3, r4, #16
 8001afa:	2244      	movs	r2, #68	; 0x44
 8001afc:	4619      	mov	r1, r3
 8001afe:	f009 f8a1 	bl	800ac44 <memcpy>
 8001b02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b06:	f7ff f8db 	bl	8000cc0 <READ_EPS_BATTERY_VOLTAGE>
            uint8_t bytes[sizeof(float)];
            FloatToUnsigned8bitArray(bytes, voltage); //get the voltage as 4 raw bytes
 8001b0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	eeb0 0a67 	vmov.f32	s0, s15
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fd16 	bl	8001548 <FloatToUnsigned8bitArray>

            CySat_Packet_t outgoingPacket;
            outgoingPacket.Subsystem_Type = CSPP_EPS_SUBTYPE; //EPS module
 8001b1c:	231e      	movs	r3, #30
 8001b1e:	743b      	strb	r3, [r7, #16]
            outgoingPacket.Command = 0x00; //EPS battery voltage response
 8001b20:	2300      	movs	r3, #0
 8001b22:	747b      	strb	r3, [r7, #17]
            outgoingPacket.Data_Length = sizeof(float);
 8001b24:	2304      	movs	r3, #4
 8001b26:	74bb      	strb	r3, [r7, #18]
            outgoingPacket.Data = bytes;
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	617b      	str	r3, [r7, #20]
            outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b36:	f7ff fd37 	bl	80015a8 <generateCySatChecksum>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	763b      	strb	r3, [r7, #24]

            return sendCySatPacket(outgoingPacket); //send the response
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b46:	f7ff f871 	bl	8000c2c <sendCySatPacket>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	e00d      	b.n	8001b6a <handleCySatPacket+0x23a>
        }
        else{
            return -1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b52:	e00a      	b.n	8001b6a <handleCySatPacket+0x23a>
    case CSPP_EOL_SUBTYPE: //End of Life

        break;

    default:
        return -1;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b58:	e007      	b.n	8001b6a <handleCySatPacket+0x23a>
        break;
 8001b5a:	bf00      	nop
 8001b5c:	e004      	b.n	8001b68 <handleCySatPacket+0x238>
        break;
 8001b5e:	bf00      	nop
 8001b60:	e002      	b.n	8001b68 <handleCySatPacket+0x238>
        break;
 8001b62:	bf00      	nop
 8001b64:	e000      	b.n	8001b68 <handleCySatPacket+0x238>
        break;
 8001b66:	bf00      	nop
    }

    return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3790      	adds	r7, #144	; 0x90
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	0800cdec 	.word	0x0800cdec
 8001b78:	20000bf4 	.word	0x20000bf4
 8001b7c:	0800cdfc 	.word	0x0800cdfc
 8001b80:	0800ce0c 	.word	0x0800ce0c
 8001b84:	0800ce20 	.word	0x0800ce20
 8001b88:	20001d74 	.word	0x20001d74

08001b8c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
#ifdef DEBUG_ENABLE
  while(1)
  {
      GREEN_LED_ON();
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <Error_Handler+0x48>)
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <Error_Handler+0x48>)
 8001b96:	f043 0310 	orr.w	r3, r3, #16
 8001b9a:	6153      	str	r3, [r2, #20]
      AMBER_LED_ON();
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <Error_Handler+0x48>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <Error_Handler+0x48>)
 8001ba2:	f043 0320 	orr.w	r3, r3, #32
 8001ba6:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8001ba8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bac:	f000 f850 	bl	8001c50 <HAL_Delay>
      GREEN_LED_OFF();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <Error_Handler+0x48>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <Error_Handler+0x48>)
 8001bb6:	f023 0310 	bic.w	r3, r3, #16
 8001bba:	6153      	str	r3, [r2, #20]
      AMBER_LED_OFF();
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <Error_Handler+0x48>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <Error_Handler+0x48>)
 8001bc2:	f023 0320 	bic.w	r3, r3, #32
 8001bc6:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8001bc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bcc:	f000 f840 	bl	8001c50 <HAL_Delay>
      GREEN_LED_ON();
 8001bd0:	e7de      	b.n	8001b90 <Error_Handler+0x4>
 8001bd2:	bf00      	nop
 8001bd4:	40020800 	.word	0x40020800

08001bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_Init+0x40>)
 8001be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_Init+0x40>)
 8001bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_Init+0x40>)
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f000 fa8b 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c06:	200f      	movs	r0, #15
 8001c08:	f008 f9a6 	bl	8009f58 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c0c:	f007 fe36 	bl	800987c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick++;
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <HAL_IncTick+0x18>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a03      	ldr	r2, [pc, #12]	; (8001c34 <HAL_IncTick+0x18>)
 8001c28:	6013      	str	r3, [r2, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	20000bf8 	.word	0x20000bf8

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000bf8 	.word	0x20000bf8

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c68:	d002      	beq.n	8001c70 <HAL_Delay+0x20>
  {
     wait++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c70:	bf00      	nop
 8001c72:	f7ff ffe1 	bl	8001c38 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d8f7      	bhi.n	8001c72 <HAL_Delay+0x22>
  {
  }
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e033      	b.n	8001d08 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f007 fe12 	bl	80098e0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d118      	bne.n	8001cfa <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd0:	f023 0302 	bic.w	r3, r3, #2
 8001cd4:	f043 0202 	orr.w	r2, r3, #2
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f84b 	bl	8001d78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f023 0303 	bic.w	r3, r3, #3
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf8:	e001      	b.n	8001cfe <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Stop+0x16>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e021      	b.n	8001d6a <HAL_ADC_Stop+0x5a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d80:	4b7e      	ldr	r3, [pc, #504]	; (8001f7c <ADC_Init+0x204>)
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	021a      	lsls	r2, r3, #8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6899      	ldr	r1, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	4a5d      	ldr	r2, [pc, #372]	; (8001f80 <ADC_Init+0x208>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d022      	beq.n	8001e56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e00f      	b.n	8001e76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0202 	bic.w	r2, r2, #2
 8001e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6899      	ldr	r1, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	005a      	lsls	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d026      	beq.n	8001ef0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ec0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ecc:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	fa02 f103 	lsl.w	r1, r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	e007      	b.n	8001f00 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	051a      	lsls	r2, r3, #20
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	025a      	lsls	r2, r3, #9
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6899      	ldr	r1, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	029a      	lsls	r2, r3, #10
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	609a      	str	r2, [r3, #8]
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	0f000001 	.word	0x0f000001

08001f84 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <NVIC_EnableIRQ+0x30>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	da0b      	bge.n	8002048 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <NVIC_SetPriority+0x4c>)
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	3b04      	subs	r3, #4
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002046:	e009      	b.n	800205c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4907      	ldr	r1, [pc, #28]	; (800206c <NVIC_SetPriority+0x50>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00
 800206c:	e000e100 	.word	0xe000e100

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020fc:	f7ff ff8e 	bl	800201c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff2d 	bl	8001f84 <NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff42 	bl	8001fcc <NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff8e 	bl	8002070 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5d 	bl	800201c <NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff35 	bl	8001fe8 <NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d106      	bne.n	80021bc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80021ba:	e005      	b.n	80021c8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80021c2:	f023 0304 	bic.w	r3, r3, #4
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d004      	beq.n	80021f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00c      	b.n	8002210 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2205      	movs	r2, #5
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002228:	4b93      	ldr	r3, [pc, #588]	; (8002478 <HAL_DMA_IRQHandler+0x25c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a93      	ldr	r2, [pc, #588]	; (800247c <HAL_DMA_IRQHandler+0x260>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0a9b      	lsrs	r3, r3, #10
 8002234:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	2208      	movs	r2, #8
 8002248:	409a      	lsls	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d01a      	beq.n	8002288 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	2208      	movs	r2, #8
 8002276:	409a      	lsls	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	4a7c      	ldr	r2, [pc, #496]	; (8002480 <HAL_DMA_IRQHandler+0x264>)
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d012      	beq.n	80022be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	4a75      	ldr	r2, [pc, #468]	; (8002480 <HAL_DMA_IRQHandler+0x264>)
 80022ac:	409a      	lsls	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	f043 0202 	orr.w	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	4a70      	ldr	r2, [pc, #448]	; (8002484 <HAL_DMA_IRQHandler+0x268>)
 80022c4:	409a      	lsls	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d012      	beq.n	80022f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00b      	beq.n	80022f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	4a68      	ldr	r2, [pc, #416]	; (8002484 <HAL_DMA_IRQHandler+0x268>)
 80022e2:	409a      	lsls	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	f043 0204 	orr.w	r2, r3, #4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	2210      	movs	r2, #16
 80022fa:	409a      	lsls	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d043      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d03c      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	2210      	movs	r2, #16
 8002318:	409a      	lsls	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d018      	beq.n	800235e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d108      	bne.n	800234c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d024      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
 800234a:	e01f      	b.n	800238c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
 800235c:	e016      	b.n	800238c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d107      	bne.n	800237c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0208 	bic.w	r2, r2, #8
 800237a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2220      	movs	r2, #32
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8094 	beq.w	80024c6 <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 808c 	beq.w	80024c6 <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	2220      	movs	r2, #32
 80023b4:	409a      	lsls	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d137      	bne.n	8002436 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0216 	bic.w	r2, r2, #22
 80023d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_DMA_IRQHandler+0x1da>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0208 	bic.w	r2, r2, #8
 8002404:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	223f      	movs	r2, #63	; 0x3f
 800240c:	409a      	lsls	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8083 	beq.w	8002532 <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
        }
        return;
 8002434:	e07d      	b.n	8002532 <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d021      	beq.n	8002488 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d108      	bne.n	8002464 <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	2b00      	cmp	r3, #0
 8002458:	d035      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
 8002462:	e030      	b.n	80024c6 <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d02c      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
 8002474:	e027      	b.n	80024c6 <HAL_DMA_IRQHandler+0x2aa>
 8002476:	bf00      	nop
 8002478:	20000010 	.word	0x20000010
 800247c:	1b4e81b5 	.word	0x1b4e81b5
 8002480:	00800001 	.word	0x00800001
 8002484:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0210 	bic.w	r2, r2, #16
 80024a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d032      	beq.n	8002534 <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d022      	beq.n	8002520 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2205      	movs	r2, #5
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3301      	adds	r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d307      	bcc.n	800250e <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f2      	bne.n	80024f2 <HAL_DMA_IRQHandler+0x2d6>
 800250c:	e000      	b.n	8002510 <HAL_DMA_IRQHandler+0x2f4>
          break;
 800250e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
 8002530:	e000      	b.n	8002534 <HAL_DMA_IRQHandler+0x318>
        return;
 8002532:	bf00      	nop
    }
  }
}
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e177      	b.n	8002848 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 8166 	bne.w	8002842 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x4a>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b12      	cmp	r3, #18
 8002584:	d123      	bne.n	80025ce <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	08da      	lsrs	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3208      	adds	r2, #8
 800258e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	69b9      	ldr	r1, [r7, #24]
 80025ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0203 	and.w	r2, r3, #3
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d00b      	beq.n	8002622 <HAL_GPIO_Init+0xe6>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002616:	2b11      	cmp	r3, #17
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b12      	cmp	r3, #18
 8002620:	d130      	bne.n	8002684 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 0201 	and.w	r2, r3, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80c0 	beq.w	8002842 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_GPIO_Init+0x320>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a64      	ldr	r2, [pc, #400]	; (800285c <HAL_GPIO_Init+0x320>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_GPIO_Init+0x320>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026de:	4a60      	ldr	r2, [pc, #384]	; (8002860 <HAL_GPIO_Init+0x324>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_GPIO_Init+0x328>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d037      	beq.n	800277a <HAL_GPIO_Init+0x23e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_GPIO_Init+0x32c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d031      	beq.n	8002776 <HAL_GPIO_Init+0x23a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a55      	ldr	r2, [pc, #340]	; (800286c <HAL_GPIO_Init+0x330>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <HAL_GPIO_Init+0x236>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a54      	ldr	r2, [pc, #336]	; (8002870 <HAL_GPIO_Init+0x334>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x232>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a53      	ldr	r2, [pc, #332]	; (8002874 <HAL_GPIO_Init+0x338>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x22e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_GPIO_Init+0x33c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x22a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a51      	ldr	r2, [pc, #324]	; (800287c <HAL_GPIO_Init+0x340>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x226>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_GPIO_Init+0x344>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x222>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_GPIO_Init+0x348>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x21e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4e      	ldr	r2, [pc, #312]	; (8002888 <HAL_GPIO_Init+0x34c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x21a>
 8002752:	2309      	movs	r3, #9
 8002754:	e012      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002756:	230a      	movs	r3, #10
 8002758:	e010      	b.n	800277c <HAL_GPIO_Init+0x240>
 800275a:	2308      	movs	r3, #8
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x240>
 800275e:	2307      	movs	r3, #7
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x240>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x240>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x240>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	4934      	ldr	r1, [pc, #208]	; (8002860 <HAL_GPIO_Init+0x324>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_GPIO_Init+0x350>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_GPIO_Init+0x350>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_GPIO_Init+0x350>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_GPIO_Init+0x350>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_GPIO_Init+0x350>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_GPIO_Init+0x350>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_GPIO_Init+0x350>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800283c:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_GPIO_Init+0x350>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae84 	bls.w	8002558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	3724      	adds	r7, #36	; 0x24
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40023800 	.word	0x40023800
 8002860:	40013800 	.word	0x40013800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021400 	.word	0x40021400
 800287c:	40021800 	.word	0x40021800
 8002880:	40021c00 	.word	0x40021c00
 8002884:	40022000 	.word	0x40022000
 8002888:	40022400 	.word	0x40022400
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ac:	e003      	b.n	80028b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	619a      	str	r2, [r3, #24]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0c8      	b.n	8002a70 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f007 f830 	bl	8009958 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2224      	movs	r2, #36	; 0x24
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002910:	f001 fae2 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8002914:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_I2C_Init+0x1b4>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a53      	ldr	r2, [pc, #332]	; (8002a7c <HAL_I2C_Init+0x1b8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d802      	bhi.n	800293a <HAL_I2C_Init+0x76>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3301      	adds	r3, #1
 8002938:	e009      	b.n	800294e <HAL_I2C_Init+0x8a>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	4a4e      	ldr	r2, [pc, #312]	; (8002a80 <HAL_I2C_Init+0x1bc>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	3301      	adds	r3, #1
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a48      	ldr	r2, [pc, #288]	; (8002a7c <HAL_I2C_Init+0x1b8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d812      	bhi.n	8002984 <HAL_I2C_Init+0xc0>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	2b03      	cmp	r3, #3
 8002970:	d906      	bls.n	8002980 <HAL_I2C_Init+0xbc>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	e045      	b.n	8002a0c <HAL_I2C_Init+0x148>
 8002980:	2304      	movs	r3, #4
 8002982:	e043      	b.n	8002a0c <HAL_I2C_Init+0x148>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10f      	bne.n	80029ac <HAL_I2C_Init+0xe8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e010      	b.n	80029ce <HAL_I2C_Init+0x10a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009a      	lsls	r2, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x112>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e01a      	b.n	8002a0c <HAL_I2C_Init+0x148>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_I2C_Init+0x130>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f2:	e00b      	b.n	8002a0c <HAL_I2C_Init+0x148>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009a      	lsls	r2, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69d9      	ldr	r1, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1a      	ldr	r2, [r3, #32]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6959      	ldr	r1, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	431bde83 	.word	0x431bde83
 8002a7c:	000186a0 	.word	0x000186a0
 8002a80:	10624dd3 	.word	0x10624dd3

08002a84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	460b      	mov	r3, r1
 8002a92:	817b      	strh	r3, [r7, #10]
 8002a94:	4613      	mov	r3, r2
 8002a96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a9c:	f7ff f8cc 	bl	8001c38 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	f040 80ee 	bne.w	8002c8c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2319      	movs	r3, #25
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4977      	ldr	r1, [pc, #476]	; (8002c98 <HAL_I2C_Master_Transmit+0x214>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fc6c 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0e1      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_I2C_Master_Transmit+0x54>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e0da      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x20a>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d007      	beq.n	8002afe <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2221      	movs	r2, #33	; 0x21
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2210      	movs	r2, #16
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	893a      	ldrh	r2, [r7, #8]
 8002b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a5a      	ldr	r2, [pc, #360]	; (8002c9c <HAL_I2C_Master_Transmit+0x218>)
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b40:	8979      	ldrh	r1, [r7, #10]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fadc 	bl	8003104 <I2C_MasterRequestWrite>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00f      	beq.n	8002b72 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d105      	bne.n	8002b66 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e093      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e08d      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8002b88:	e066      	b.n	8002c58 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	6a39      	ldr	r1, [r7, #32]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fcc1 	bl	8003516 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00f      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d109      	bne.n	8002bb6 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e069      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	1c59      	adds	r1, r3, #1
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	6251      	str	r1, [r2, #36]	; 0x24
 8002bc4:	781a      	ldrb	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d119      	bne.n	8002c28 <HAL_I2C_Master_Transmit+0x1a4>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c59      	adds	r1, r3, #1
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	6251      	str	r1, [r2, #36]	; 0x24
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	6a39      	ldr	r1, [r7, #32]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fcaf 	bl	8003590 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00f      	beq.n	8002c58 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d109      	bne.n	8002c54 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e01c      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e01a      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d194      	bne.n	8002b8a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
  }
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	00100002 	.word	0x00100002
 8002c9c:	ffff0000 	.word	0xffff0000

08002ca0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	460b      	mov	r3, r1
 8002cae:	817b      	strh	r3, [r7, #10]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cb8:	f7fe ffbe 	bl	8001c38 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f040 8215 	bne.w	80030f6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	2319      	movs	r3, #25
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4985      	ldr	r1, [pc, #532]	; (8002eec <HAL_I2C_Master_Receive+0x24c>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fb5e 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e208      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2C_Master_Receive+0x54>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e201      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d007      	beq.n	8002d1a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2222      	movs	r2, #34	; 0x22
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2210      	movs	r2, #16
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	893a      	ldrh	r2, [r7, #8]
 8002d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a68      	ldr	r2, [pc, #416]	; (8002ef0 <HAL_I2C_Master_Receive+0x250>)
 8002d50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d5c:	8979      	ldrh	r1, [r7, #10]
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fa50 	bl	8003208 <I2C_MasterRequestRead>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00f      	beq.n	8002d8e <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d105      	bne.n	8002d82 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e1ba      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1b4      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d113      	bne.n	8002dbe <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	623b      	str	r3, [r7, #32]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	623b      	str	r3, [r7, #32]
 8002daa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e188      	b.n	80030d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d11b      	bne.n	8002dfe <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e168      	b.n	80030d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d11b      	bne.n	8002e3e <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	e148      	b.n	80030d0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002e64:	e134      	b.n	80030d0 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	f200 80eb 	bhi.w	8003046 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d127      	bne.n	8002ec8 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fbc4 	bl	800360a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d101      	bne.n	8002e94 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e131      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e12f      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6918      	ldr	r0, [r3, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	6251      	str	r1, [r2, #36]	; 0x24
 8002ea8:	b2c2      	uxtb	r2, r0
 8002eaa:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ec6:	e103      	b.n	80030d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d14a      	bne.n	8002f66 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	4906      	ldr	r1, [pc, #24]	; (8002ef4 <HAL_I2C_Master_Receive+0x254>)
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fa5c 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e106      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
 8002eea:	bf00      	nop
 8002eec:	00100002 	.word	0x00100002
 8002ef0:	ffff0000 	.word	0xffff0000
 8002ef4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6918      	ldr	r0, [r3, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	6251      	str	r1, [r2, #36]	; 0x24
 8002f18:	b2c2      	uxtb	r2, r0
 8002f1a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6918      	ldr	r0, [r3, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	1c59      	adds	r1, r3, #1
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	6251      	str	r1, [r2, #36]	; 0x24
 8002f46:	b2c2      	uxtb	r2, r0
 8002f48:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f64:	e0b4      	b.n	80030d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4964      	ldr	r1, [pc, #400]	; (8003100 <HAL_I2C_Master_Receive+0x460>)
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fa11 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0bb      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6918      	ldr	r0, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	1c59      	adds	r1, r3, #1
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	6251      	str	r1, [r2, #36]	; 0x24
 8002fa0:	b2c2      	uxtb	r2, r0
 8002fa2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	494e      	ldr	r1, [pc, #312]	; (8003100 <HAL_I2C_Master_Receive+0x460>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f9e5 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e08f      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6918      	ldr	r0, [r3, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	1c59      	adds	r1, r3, #1
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	6251      	str	r1, [r2, #36]	; 0x24
 8002ff8:	b2c2      	uxtb	r2, r0
 8002ffa:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6918      	ldr	r0, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c59      	adds	r1, r3, #1
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	6251      	str	r1, [r2, #36]	; 0x24
 8003026:	b2c2      	uxtb	r2, r0
 8003028:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003044:	e044      	b.n	80030d0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fadd 	bl	800360a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b20      	cmp	r3, #32
 800305c:	d101      	bne.n	8003062 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e04a      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e048      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6918      	ldr	r0, [r3, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	1c59      	adds	r1, r3, #1
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	6251      	str	r1, [r2, #36]	; 0x24
 8003076:	b2c2      	uxtb	r2, r0
 8003078:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d116      	bne.n	80030d0 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6918      	ldr	r0, [r3, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	1c59      	adds	r1, r3, #1
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	6251      	str	r1, [r2, #36]	; 0x24
 80030b2:	b2c2      	uxtb	r2, r0
 80030b4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f47f aec6 	bne.w	8002e66 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3728      	adds	r7, #40	; 0x28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	00010004 	.word	0x00010004

08003104 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	460b      	mov	r3, r1
 8003112:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d006      	beq.n	800312e <I2C_MasterRequestWrite+0x2a>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d003      	beq.n	800312e <I2C_MasterRequestWrite+0x2a>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800312c:	d108      	bne.n	8003140 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e00b      	b.n	8003158 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	2b12      	cmp	r3, #18
 8003146:	d107      	bne.n	8003158 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003156:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f917 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e041      	b.n	80031f8 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800317c:	d108      	bne.n	8003190 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800318c:	611a      	str	r2, [r3, #16]
 800318e:	e021      	b.n	80031d4 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003190:	897b      	ldrh	r3, [r7, #10]
 8003192:	11db      	asrs	r3, r3, #7
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f003 0306 	and.w	r3, r3, #6
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f063 030f 	orn	r3, r3, #15
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4914      	ldr	r1, [pc, #80]	; (8003200 <I2C_MasterRequestWrite+0xfc>)
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f943 	bl	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d101      	bne.n	80031c6 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e018      	b.n	80031f8 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e016      	b.n	80031f8 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	490a      	ldr	r1, [pc, #40]	; (8003204 <I2C_MasterRequestWrite+0x100>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f92d 	bl	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d101      	bne.n	80031f2 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e002      	b.n	80031f8 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e000      	b.n	80031f8 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	00010008 	.word	0x00010008
 8003204:	00010002 	.word	0x00010002

08003208 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800322c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d006      	beq.n	8003242 <I2C_MasterRequestRead+0x3a>
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d003      	beq.n	8003242 <I2C_MasterRequestRead+0x3a>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003240:	d108      	bne.n	8003254 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e00b      	b.n	800326c <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	2b11      	cmp	r3, #17
 800325a:	d107      	bne.n	800326c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f88d 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e07f      	b.n	8003388 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003290:	d108      	bne.n	80032a4 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	b2da      	uxtb	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	611a      	str	r2, [r3, #16]
 80032a2:	e05f      	b.n	8003364 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032a4:	897b      	ldrh	r3, [r7, #10]
 80032a6:	11db      	asrs	r3, r3, #7
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 0306 	and.w	r3, r3, #6
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f063 030f 	orn	r3, r3, #15
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4933      	ldr	r1, [pc, #204]	; (8003390 <I2C_MasterRequestRead+0x188>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f8b9 	bl	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d101      	bne.n	80032da <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e056      	b.n	8003388 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e054      	b.n	8003388 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032de:	897b      	ldrh	r3, [r7, #10]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4929      	ldr	r1, [pc, #164]	; (8003394 <I2C_MasterRequestRead+0x18c>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f8a3 	bl	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d101      	bne.n	8003306 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e040      	b.n	8003388 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e03e      	b.n	8003388 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800332e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f82b 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e01d      	b.n	8003388 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800334c:	897b      	ldrh	r3, [r7, #10]
 800334e:	11db      	asrs	r3, r3, #7
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 0306 	and.w	r3, r3, #6
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f063 030e 	orn	r3, r3, #14
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	490a      	ldr	r1, [pc, #40]	; (8003394 <I2C_MasterRequestRead+0x18c>)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f865 	bl	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2b04      	cmp	r3, #4
 800337c:	d101      	bne.n	8003382 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e002      	b.n	8003388 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e000      	b.n	8003388 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	00010008 	.word	0x00010008
 8003394:	00010002 	.word	0x00010002

08003398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80033a8:	e01f      	b.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b0:	d01b      	beq.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033b8:	f7fe fc3e 	bl	8001c38 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d210      	bcs.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e023      	b.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d10d      	bne.n	8003410 <I2C_WaitOnFlagUntilTimeout+0x78>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	43da      	mvns	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4013      	ands	r3, r2
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	e00c      	b.n	800342a <I2C_WaitOnFlagUntilTimeout+0x92>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	43da      	mvns	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4013      	ands	r3, r2
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	429a      	cmp	r2, r3
 800342e:	d0bc      	beq.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003448:	e040      	b.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003458:	d11c      	bne.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003468:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003472:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2204      	movs	r2, #4
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e03c      	b.n	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800349a:	d017      	beq.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80034a2:	f7fe fbc9 	bl	8001c38 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20c      	bcs.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e020      	b.n	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10c      	bne.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	43da      	mvns	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e00b      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4013      	ands	r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf14      	ite	ne
 8003502:	2301      	movne	r3, #1
 8003504:	2300      	moveq	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d19e      	bne.n	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003522:	e029      	b.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f8ba 	bl	800369e <I2C_IsAcknowledgeFailed>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e029      	b.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800353a:	d01d      	beq.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003542:	f7fe fb79 	bl	8001c38 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	d212      	bcs.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e007      	b.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003582:	2b80      	cmp	r3, #128	; 0x80
 8003584:	d1ce      	bne.n	8003524 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800359c:	e029      	b.n	80035f2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f87d 	bl	800369e <I2C_IsAcknowledgeFailed>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e029      	b.n	8003602 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b4:	d01d      	beq.n	80035f2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035bc:	f7fe fb3c 	bl	8001c38 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d212      	bcs.n	80035f2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e007      	b.n	8003602 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d1ce      	bne.n	800359e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003616:	e036      	b.n	8003686 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b10      	cmp	r3, #16
 8003624:	d114      	bne.n	8003650 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0210 	mvn.w	r2, #16
 800362e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e022      	b.n	8003696 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8003656:	f7fe faef 	bl	8001c38 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	d20f      	bcs.n	8003686 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e007      	b.n	8003696 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d1c1      	bne.n	8003618 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b4:	d114      	bne.n	80036e0 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036be:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2204      	movs	r2, #4
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08e      	sub	sp, #56	; 0x38
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 80036f8:	2300      	movs	r3, #0
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d075      	beq.n	80037f4 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003708:	4ba4      	ldr	r3, [pc, #656]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b04      	cmp	r3, #4
 8003712:	d00c      	beq.n	800372e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003714:	4ba1      	ldr	r3, [pc, #644]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371c:	2b08      	cmp	r3, #8
 800371e:	d112      	bne.n	8003746 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003720:	4b9e      	ldr	r3, [pc, #632]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372c:	d10b      	bne.n	8003746 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372e:	4b9b      	ldr	r3, [pc, #620]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d05b      	beq.n	80037f2 <HAL_RCC_OscConfig+0x102>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d157      	bne.n	80037f2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e224      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x6e>
 8003750:	4b92      	ldr	r3, [pc, #584]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a91      	ldr	r2, [pc, #580]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	e01d      	b.n	800379a <HAL_RCC_OscConfig+0xaa>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003766:	d10c      	bne.n	8003782 <HAL_RCC_OscConfig+0x92>
 8003768:	4b8c      	ldr	r3, [pc, #560]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a8b      	ldr	r2, [pc, #556]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 800376e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b89      	ldr	r3, [pc, #548]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a88      	ldr	r2, [pc, #544]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 800377a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e00b      	b.n	800379a <HAL_RCC_OscConfig+0xaa>
 8003782:	4b86      	ldr	r3, [pc, #536]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a85      	ldr	r2, [pc, #532]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b83      	ldr	r3, [pc, #524]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a82      	ldr	r2, [pc, #520]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d013      	beq.n	80037ca <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fe fa49 	bl	8001c38 <HAL_GetTick>
 80037a6:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037aa:	f7fe fa45 	bl	8001c38 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b64      	cmp	r3, #100	; 0x64
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e1e9      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037bc:	4b77      	ldr	r3, [pc, #476]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0xba>
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fe fa35 	bl	8001c38 <HAL_GetTick>
 80037ce:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d2:	f7fe fa31 	bl	8001c38 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b64      	cmp	r3, #100	; 0x64
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1d5      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e4:	4b6d      	ldr	r3, [pc, #436]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0xe2>
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d077      	beq.n	80038f0 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003800:	4b66      	ldr	r3, [pc, #408]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380c:	4b63      	ldr	r3, [pc, #396]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003814:	2b08      	cmp	r3, #8
 8003816:	d126      	bne.n	8003866 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003818:	4b60      	ldr	r3, [pc, #384]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d120      	bne.n	8003866 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003824:	4b5d      	ldr	r3, [pc, #372]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_OscConfig+0x14c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d001      	beq.n	800383c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e1a9      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	4b57      	ldr	r3, [pc, #348]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6919      	ldr	r1, [r3, #16]
 8003848:	23f8      	movs	r3, #248	; 0xf8
 800384a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	494f      	ldr	r1, [pc, #316]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003864:	e044      	b.n	80038f0 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d02a      	beq.n	80038c4 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386e:	4b4c      	ldr	r3, [pc, #304]	; (80039a0 <HAL_RCC_OscConfig+0x2b0>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe f9e0 	bl	8001c38 <HAL_GetTick>
 8003878:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387c:	f7fe f9dc 	bl	8001c38 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e180      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b43      	ldr	r3, [pc, #268]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b40      	ldr	r3, [pc, #256]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6919      	ldr	r1, [r3, #16]
 80038a6:	23f8      	movs	r3, #248	; 0xf8
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	4937      	ldr	r1, [pc, #220]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
 80038c2:	e015      	b.n	80038f0 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c4:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <HAL_RCC_OscConfig+0x2b0>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fe f9b5 	bl	8001c38 <HAL_GetTick>
 80038ce:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fe f9b1 	bl	8001c38 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e155      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d030      	beq.n	800395e <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d016      	beq.n	8003932 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCC_OscConfig+0x2b4>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390a:	f7fe f995 	bl	8001c38 <HAL_GetTick>
 800390e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003912:	f7fe f991 	bl	8001c38 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e135      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x222>
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003932:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <HAL_RCC_OscConfig+0x2b4>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fe f97e 	bl	8001c38 <HAL_GetTick>
 800393c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003940:	f7fe f97a 	bl	8001c38 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e11e      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8086 	beq.w	8003a78 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397a:	6413      	str	r3, [r2, #64]	; 0x40
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_RCC_OscConfig+0x2ac>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <HAL_RCC_OscConfig+0x2b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a06      	ldr	r2, [pc, #24]	; (80039a8 <HAL_RCC_OscConfig+0x2b8>)
 800398e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003992:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8003994:	f7fe f950 	bl	8001c38 <HAL_GetTick>
 8003998:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800399a:	e010      	b.n	80039be <HAL_RCC_OscConfig+0x2ce>
 800399c:	40023800 	.word	0x40023800
 80039a0:	42470000 	.word	0x42470000
 80039a4:	42470e80 	.word	0x42470e80
 80039a8:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039ac:	f7fe f944 	bl	8001c38 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0e8      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039be:	4b76      	ldr	r3, [pc, #472]	; (8003b98 <HAL_RCC_OscConfig+0x4a8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d106      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2f0>
 80039d2:	4b72      	ldr	r3, [pc, #456]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	4a71      	ldr	r2, [pc, #452]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6713      	str	r3, [r2, #112]	; 0x70
 80039de:	e01c      	b.n	8003a1a <HAL_RCC_OscConfig+0x32a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d10c      	bne.n	8003a02 <HAL_RCC_OscConfig+0x312>
 80039e8:	4b6c      	ldr	r3, [pc, #432]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a6b      	ldr	r2, [pc, #428]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	f043 0304 	orr.w	r3, r3, #4
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a68      	ldr	r2, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	e00b      	b.n	8003a1a <HAL_RCC_OscConfig+0x32a>
 8003a02:	4b66      	ldr	r3, [pc, #408]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a65      	ldr	r2, [pc, #404]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0e:	4b63      	ldr	r3, [pc, #396]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a62      	ldr	r2, [pc, #392]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d015      	beq.n	8003a4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a22:	f7fe f909 	bl	8001c38 <HAL_GetTick>
 8003a26:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fe f905 	bl	8001c38 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0a7      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a40:	4b56      	ldr	r3, [pc, #344]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ee      	beq.n	8003a2a <HAL_RCC_OscConfig+0x33a>
 8003a4c:	e014      	b.n	8003a78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fe f8f3 	bl	8001c38 <HAL_GetTick>
 8003a52:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe f8ef 	bl	8001c38 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e091      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ee      	bne.n	8003a56 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8086 	beq.w	8003b8e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a82:	4b46      	ldr	r3, [pc, #280]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d07d      	beq.n	8003b8a <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d162      	bne.n	8003b5c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	4b42      	ldr	r3, [pc, #264]	; (8003ba0 <HAL_RCC_OscConfig+0x4b0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe f8cc 	bl	8001c38 <HAL_GetTick>
 8003aa0:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fe f8c8 	bl	8001c38 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e06c      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	fab3 f383 	clz	r3, r3
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	1e59      	subs	r1, r3, #1
 8003af2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	617b      	str	r3, [r7, #20]
  return(result);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b10:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8003b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fab3 f383 	clz	r3, r3
 8003b24:	fa01 f303 	lsl.w	r3, r1, r3
 8003b28:	491c      	ldr	r1, [pc, #112]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <HAL_RCC_OscConfig+0x4b0>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fe f880 	bl	8001c38 <HAL_GetTick>
 8003b38:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fe f87c 	bl	8001c38 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e020      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x44c>
 8003b5a:	e018      	b.n	8003b8e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <HAL_RCC_OscConfig+0x4b0>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe f869 	bl	8001c38 <HAL_GetTick>
 8003b66:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe f865 	bl	8001c38 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e009      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7c:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <HAL_RCC_OscConfig+0x4ac>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x47a>
 8003b88:	e001      	b.n	8003b8e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3738      	adds	r7, #56	; 0x38
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40007000 	.word	0x40007000
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	42470060 	.word	0x42470060

08003ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003bb2:	4b81      	ldr	r3, [pc, #516]	; (8003db8 <HAL_RCC_ClockConfig+0x214>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d90c      	bls.n	8003bda <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc0:	4b7d      	ldr	r3, [pc, #500]	; (8003db8 <HAL_RCC_ClockConfig+0x214>)
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bc8:	4b7b      	ldr	r3, [pc, #492]	; (8003db8 <HAL_RCC_ClockConfig+0x214>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0ea      	b.n	8003db0 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be6:	4b75      	ldr	r3, [pc, #468]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4972      	ldr	r1, [pc, #456]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8086 	beq.w	8003d12 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b6b      	ldr	r3, [pc, #428]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d119      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0c8      	b.n	8003db0 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d003      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2e:	4b63      	ldr	r3, [pc, #396]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0b8      	b.n	8003db0 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0b0      	b.n	8003db0 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4e:	4b5b      	ldr	r3, [pc, #364]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 0203 	bic.w	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4958      	ldr	r1, [pc, #352]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fd ffea 	bl	8001c38 <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d112      	bne.n	8003c94 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fd ffe2 	bl	8001c38 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e094      	b.n	8003db0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c86:	4b4d      	ldr	r3, [pc, #308]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d1ee      	bne.n	8003c70 <HAL_RCC_ClockConfig+0xcc>
 8003c92:	e03e      	b.n	8003d12 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d112      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9e:	f7fd ffcb 	bl	8001c38 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e07d      	b.n	8003db0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb4:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d1ee      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xfa>
 8003cc0:	e027      	b.n	8003d12 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d11d      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fd ffb4 	bl	8001c38 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e066      	b.n	8003db0 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b0c      	cmp	r3, #12
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x128>
 8003cee:	e010      	b.n	8003d12 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf0:	f7fd ffa2 	bl	8001c38 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e054      	b.n	8003db0 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d06:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ee      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <HAL_RCC_ClockConfig+0x214>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d20c      	bcs.n	8003d3a <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <HAL_RCC_ClockConfig+0x214>)
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d28:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <HAL_RCC_ClockConfig+0x214>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d001      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e03a      	b.n	8003db0 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	491a      	ldr	r1, [pc, #104]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4912      	ldr	r1, [pc, #72]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003d78:	f000 f826 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d7c:	4601      	mov	r1, r0
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_RCC_ClockConfig+0x218>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d86:	23f0      	movs	r3, #240	; 0xf0
 8003d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9c:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <HAL_RCC_ClockConfig+0x21c>)
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	fa21 f303 	lsr.w	r3, r1, r3
 8003da4:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <HAL_RCC_ClockConfig+0x220>)
 8003da6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003da8:	200f      	movs	r0, #15
 8003daa:	f006 f8d5 	bl	8009f58 <HAL_InitTick>
  
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023c00 	.word	0x40023c00
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	0800ce38 	.word	0x0800ce38
 8003dc4:	20000010 	.word	0x20000010

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b08b      	sub	sp, #44	; 0x2c
 8003dcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dde:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d006      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x30>
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d007      	beq.n	8003dfe <HAL_RCC_GetSysClockFreq+0x36>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d158      	bne.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df2:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003df4:	623b      	str	r3, [r7, #32]
       break;
 8003df6:	e058      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df8:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003dfa:	623b      	str	r3, [r7, #32]
      break;
 8003dfc:	e055      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e06:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e08:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d017      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8003e14:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e1c:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e24:	400b      	ands	r3, r1
 8003e26:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003e2a:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	6979      	ldr	r1, [r7, #20]
 8003e2e:	fa91 f1a1 	rbit	r1, r1
 8003e32:	6139      	str	r1, [r7, #16]
  return(result);
 8003e34:	6939      	ldr	r1, [r7, #16]
 8003e36:	fab1 f181 	clz	r1, r1
 8003e3a:	40cb      	lsrs	r3, r1
 8003e3c:	fb03 f302 	mul.w	r3, r3, r2
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
 8003e42:	e016      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e54:	400b      	ands	r3, r1
 8003e56:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003e5a:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	fa91 f1a1 	rbit	r1, r1
 8003e62:	60b9      	str	r1, [r7, #8]
  return(result);
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	fab1 f181 	clz	r1, r1
 8003e6a:	40cb      	lsrs	r3, r1
 8003e6c:	fb03 f302 	mul.w	r3, r3, r2
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e7a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003e7e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	603b      	str	r3, [r7, #0]
  return(result);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	623b      	str	r3, [r7, #32]
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003ea6:	623b      	str	r3, [r7, #32]
      break;
 8003ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	372c      	adds	r7, #44	; 0x2c
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	00f42400 	.word	0x00f42400

08003ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000010 	.word	0x20000010

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003ede:	f7ff ffef 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee2:	4601      	mov	r1, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003eec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003ef0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	603b      	str	r3, [r7, #0]
  return(result);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40023800 	.word	0x40023800
 8003f18:	0800ce48 	.word	0x0800ce48

08003f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003f22:	f7ff ffcd 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f26:	4601      	mov	r1, r0
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8003f30:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003f34:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	603b      	str	r3, [r7, #0]
  return(result);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f4a:	5cd3      	ldrb	r3, [r2, r3]
 8003f4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	0800ce48 	.word	0x0800ce48

08003f60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	220f      	movs	r2, #15
 8003f6e:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_RCC_GetClockConfig+0x5c>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0203 	and.w	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <HAL_RCC_GetClockConfig+0x5c>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <HAL_RCC_GetClockConfig+0x5c>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_GetClockConfig+0x5c>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	08db      	lsrs	r3, r3, #3
 8003f9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <HAL_RCC_GetClockConfig+0x60>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 020f 	and.w	r2, r3, #15
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	601a      	str	r2, [r3, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40023c00 	.word	0x40023c00

08003fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b09c      	sub	sp, #112	; 0x70
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t tmpreg1 = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8082 	beq.w	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8003fee:	4bac      	ldr	r3, [pc, #688]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff4:	f7fd fe20 	bl	8001c38 <HAL_GetTick>
 8003ff8:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ffc:	f7fd fe1c 	bl	8001c38 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e1eb      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800400e:	4ba5      	ldr	r3, [pc, #660]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x38>
    }
    
    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01e      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800402e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004032:	fa93 f3a3 	rbit	r3, r3
 8004036:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8004038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403a:	fab3 f383 	clz	r3, r3
 800403e:	409a      	lsls	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6899      	ldr	r1, [r3, #8]
 8004044:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004048:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800404c:	fa93 f3a3 	rbit	r3, r3
 8004050:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	4991      	ldr	r1, [pc, #580]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004070:	4b8c      	ldr	r3, [pc, #560]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004076:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800407a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800407e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8004088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	019a      	lsls	r2, r3, #6
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	061b      	lsls	r3, r3, #24
 80040a0:	431a      	orrs	r2, r3
 80040a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040a4:	071b      	lsls	r3, r3, #28
 80040a6:	497f      	ldr	r1, [pc, #508]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040ae:	4b7d      	ldr	r3, [pc, #500]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b4:	f023 021f 	bic.w	r2, r3, #31
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	3b01      	subs	r3, #1
 80040be:	4979      	ldr	r1, [pc, #484]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040c6:	4b76      	ldr	r3, [pc, #472]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040cc:	f7fd fdb4 	bl	8001c38 <HAL_GetTick>
 80040d0:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040d4:	f7fd fdb0 	bl	8001c38 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e17f      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040e6:	4b6f      	ldr	r3, [pc, #444]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x148>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80d7 	beq.w	80042ba <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800410c:	4b66      	ldr	r3, [pc, #408]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004112:	f7fd fd91 	bl	8001c38 <HAL_GetTick>
 8004116:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004118:	e008      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800411a:	f7fd fd8d 	bl	8001c38 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x168>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e15c      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800412c:	4b5d      	ldr	r3, [pc, #372]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004138:	d0ef      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d04b      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004146:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004150:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	fab3 f383 	clz	r3, r3
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
 8004168:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004172:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	409a      	lsls	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6959      	ldr	r1, [r3, #20]
 8004188:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	431a      	orrs	r2, r3
 80041a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80041a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80041b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	4939      	ldr	r1, [pc, #228]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041c4:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	4933      	ldr	r1, [pc, #204]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d049      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80041ea:	4b2e      	ldr	r3, [pc, #184]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041f4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80041f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	613b      	str	r3, [r7, #16]
  return(result);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	fab3 f383 	clz	r3, r3
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	fab3 f383 	clz	r3, r3
 8004226:	409a      	lsls	r2, r3
 8004228:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	623b      	str	r3, [r7, #32]
  return(result);
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	fab3 f383 	clz	r3, r3
 800423c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6999      	ldr	r1, [r3, #24]
 8004248:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	fab3 f383 	clz	r3, r3
 800425c:	fa01 f303 	lsl.w	r3, r1, r3
 8004260:	4910      	ldr	r1, [pc, #64]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800426a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	490b      	ldr	r1, [pc, #44]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800427e:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004284:	f7fd fcd8 	bl	8001c38 <HAL_GetTick>
 8004288:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800428a:	e00f      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800428c:	f7fd fcd4 	bl	8001c38 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d908      	bls.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e0a3      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
 800429e:	bf00      	nop
 80042a0:	42470068 	.word	0x42470068
 80042a4:	40023800 	.word	0x40023800
 80042a8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b8:	d1e8      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8083 	beq.w	80043ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	4b48      	ldr	r3, [pc, #288]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	4a47      	ldr	r2, [pc, #284]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6413      	str	r3, [r2, #64]	; 0x40
 80042d8:	4b45      	ldr	r3, [pc, #276]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042e4:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a42      	ldr	r2, [pc, #264]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ee:	6013      	str	r3, [r2, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 80042f0:	f7fd fca2 	bl	8001c38 <HAL_GetTick>
 80042f4:	66f8      	str	r0, [r7, #108]	; 0x6c
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x346>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042f8:	f7fd fc9e 	bl	8001c38 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x346>
      {
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e06d      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800430a:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004316:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	66bb      	str	r3, [r7, #104]	; 0x68
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004322:	2b00      	cmp	r3, #0
 8004324:	d02f      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004330:	429a      	cmp	r2, r3
 8004332:	d028      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004334:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433c:	66bb      	str	r3, [r7, #104]	; 0x68
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004344:	4b2c      	ldr	r3, [pc, #176]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800434c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800434e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004350:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d014      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800435c:	f7fd fc6c 	bl	8001c38 <HAL_GetTick>
 8004360:	66f8      	str	r0, [r7, #108]	; 0x6c
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004362:	e00a      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004364:	f7fd fc68 	bl	8001c38 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e035      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0ee      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004392:	d10d      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004394:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	4911      	ldr	r1, [pc, #68]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
 80043ae:	e005      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043ba:	6093      	str	r3, [r2, #8]
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	4909      	ldr	r1, [pc, #36]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043e2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3770      	adds	r7, #112	; 0x70
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40007000 	.word	0x40007000
 80043f8:	42470e40 	.word	0x42470e40
 80043fc:	424711e0 	.word	0x424711e0

08004400 <HAL_RTC_Init>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e06d      	b.n	80044ee <HAL_RTC_Init+0xee>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7f5b      	ldrb	r3, [r3, #29]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f005 fb1a 	bl	8009a5c <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	22ca      	movs	r2, #202	; 0xca
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2253      	movs	r2, #83	; 0x53
 800443c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f9fb 	bl	800483a <RTC_EnterInitMode>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	22ff      	movs	r2, #255	; 0xff
 8004450:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2204      	movs	r2, #4
 8004456:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e048      	b.n	80044ee <HAL_RTC_Init+0xee>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800446a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6899      	ldr	r1, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68d2      	ldr	r2, [r2, #12]
 8004496:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6919      	ldr	r1, [r3, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	041a      	lsls	r2, r3, #16
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ba:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	22ff      	movs	r2, #255	; 0xff
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044f6:	b590      	push	{r4, r7, lr}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	7f1b      	ldrb	r3, [r3, #28]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_RTC_SetTime+0x1c>
 800450e:	2302      	movs	r3, #2
 8004510:	e0b2      	b.n	8004678 <HAL_RTC_SetTime+0x182>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2202      	movs	r2, #2
 800451c:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d126      	bne.n	8004572 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2200      	movs	r2, #0
 8004536:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f9a8 	bl	8004892 <RTC_ByteToBcd2>
 8004542:	4603      	mov	r3, r0
 8004544:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f9a1 	bl	8004892 <RTC_ByteToBcd2>
 8004550:	4603      	mov	r3, r0
 8004552:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004554:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	789b      	ldrb	r3, [r3, #2]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f999 	bl	8004892 <RTC_ByteToBcd2>
 8004560:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004562:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	78db      	ldrb	r3, [r3, #3]
 800456a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e020      	b.n	80045b4 <HAL_RTC_SetTime+0xbe>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_RTC_SetTime+0x9a>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f9a2 	bl	80048ce <RTC_Bcd2ToByte>
 800458a:	4603      	mov	r3, r0
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	e002      	b.n	8004596 <HAL_RTC_SetTime+0xa0>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	785b      	ldrb	r3, [r3, #1]
 80045a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045a2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80045a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	78db      	ldrb	r3, [r3, #3]
 80045ae:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	22ca      	movs	r2, #202	; 0xca
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2253      	movs	r2, #83	; 0x53
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f938 	bl	800483a <RTC_EnterInitMode>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HAL_RTC_SetTime+0xf2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2204      	movs	r2, #4
 80045dc:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e047      	b.n	8004678 <HAL_RTC_SetTime+0x182>
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80045f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80045f6:	6013      	str	r3, [r2, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004606:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	431a      	orrs	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800462e:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d111      	bne.n	8004662 <HAL_RTC_SetTime+0x16c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f8d3 	bl	80047ea <HAL_RTC_WaitForSynchro>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_RTC_SetTime+0x16c>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	22ff      	movs	r2, #255	; 0xff
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2204      	movs	r2, #4
 8004656:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e00a      	b.n	8004678 <HAL_RTC_SetTime+0x182>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	22ff      	movs	r2, #255	; 0xff
 8004668:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	775a      	strb	r2, [r3, #29]
  
   __HAL_UNLOCK(hrtc); 
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	771a      	strb	r2, [r3, #28]
     
   return HAL_OK;
 8004676:	2300      	movs	r3, #0
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd90      	pop	{r4, r7, pc}

08004680 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	7f1b      	ldrb	r3, [r3, #28]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_RTC_SetDate+0x1c>
 8004698:	2302      	movs	r3, #2
 800469a:	e0a2      	b.n	80047e2 <HAL_RTC_SetDate+0x162>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2202      	movs	r2, #2
 80046a6:	775a      	strb	r2, [r3, #29]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10e      	bne.n	80046cc <HAL_RTC_SetDate+0x4c>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	f023 0310 	bic.w	r3, r3, #16
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	330a      	adds	r3, #10
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	705a      	strb	r2, [r3, #1]
  }
  
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
  
  if(Format == RTC_FORMAT_BIN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11c      	bne.n	800470c <HAL_RTC_SetDate+0x8c>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	78db      	ldrb	r3, [r3, #3]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f8db 	bl	8004892 <RTC_ByteToBcd2>
 80046dc:	4603      	mov	r3, r0
 80046de:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f8d4 	bl	8004892 <RTC_ByteToBcd2>
 80046ea:	4603      	mov	r3, r0
 80046ec:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80046ee:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	789b      	ldrb	r3, [r3, #2]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f8cc 	bl	8004892 <RTC_ByteToBcd2>
 80046fa:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80046fc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));   
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e01c      	b.n	8004746 <HAL_RTC_SetDate+0xc6>
  }
  else
  {   
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f8dc 	bl	80048ce <RTC_Bcd2ToByte>
 8004716:	4603      	mov	r3, r0
 8004718:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	789b      	ldrb	r3, [r3, #2]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f8d5 	bl	80048ce <RTC_Bcd2ToByte>
 8004724:	4603      	mov	r3, r0
 8004726:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	78db      	ldrb	r3, [r3, #3]
 800472c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004734:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800473a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	22ca      	movs	r2, #202	; 0xca
 800474c:	625a      	str	r2, [r3, #36]	; 0x24
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2253      	movs	r2, #83	; 0x53
 8004754:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f86f 	bl	800483a <RTC_EnterInitMode>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_RTC_SetDate+0xfa>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	22ff      	movs	r2, #255	; 0xff
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2204      	movs	r2, #4
 800476e:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	771a      	strb	r2, [r3, #28]
    
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e033      	b.n	80047e2 <HAL_RTC_SetDate+0x162>
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004784:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004788:	6053      	str	r3, [r2, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004798:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d111      	bne.n	80047cc <HAL_RTC_SetDate+0x14c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f81e 	bl	80047ea <HAL_RTC_WaitForSynchro>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <HAL_RTC_SetDate+0x14c>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	22ff      	movs	r2, #255	; 0xff
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2204      	movs	r2, #4
 80047c0:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
        
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e00a      	b.n	80047e2 <HAL_RTC_SetDate+0x162>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	22ff      	movs	r2, #255	; 0xff
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	775a      	strb	r2, [r3, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    
    return HAL_OK;    
 80047e0:	2300      	movs	r3, #0
  }
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd90      	pop	{r4, r7, pc}

080047ea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004804:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004806:	f7fd fa17 	bl	8001c38 <HAL_GetTick>
 800480a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800480c:	e009      	b.n	8004822 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800480e:	f7fd fa13 	bl	8001c38 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800481c:	d901      	bls.n	8004822 <HAL_RTC_WaitForSynchro+0x38>
    {       
      return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e007      	b.n	8004832 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ee      	beq.n	800480e <HAL_RTC_WaitForSynchro+0x24>
    } 
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d119      	bne.n	8004888 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800485c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800485e:	f7fd f9eb 	bl	8001c38 <HAL_GetTick>
 8004862:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004864:	e009      	b.n	800487a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004866:	f7fd f9e7 	bl	8001c38 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004874:	d901      	bls.n	800487a <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e007      	b.n	800488a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ee      	beq.n	8004866 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	4603      	mov	r3, r0
 800489a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 80048a0:	e005      	b.n	80048ae <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3301      	adds	r3, #1
 80048a6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	3b0a      	subs	r3, #10
 80048ac:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	2b09      	cmp	r3, #9
 80048b2:	d8f6      	bhi.n	80048a2 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	4313      	orrs	r3, r2
 80048c0:	b2db      	uxtb	r3, r3
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	4603      	mov	r3, r0
 80048d6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	b2db      	uxtb	r3, r3
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3350      	adds	r3, #80	; 0x50
 8004920:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4413      	add	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  
  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.                   
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3350      	adds	r3, #80	; 0x50
 8004952:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e01d      	b.n	80049bc <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f005 f878 	bl	8009a88 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2203      	movs	r2, #3
 800499c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f80f 	bl	80049c4 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80049c4:	b5b0      	push	{r4, r5, r7, lr}
 80049c6:	b08e      	sub	sp, #56	; 0x38
 80049c8:	af04      	add	r7, sp, #16
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80049e4:	2376      	movs	r3, #118	; 0x76
 80049e6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681d      	ldr	r5, [r3, #0]
 80049ec:	466c      	mov	r4, sp
 80049ee:	f107 0318 	add.w	r3, r7, #24
 80049f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049fa:	f107 030c 	add.w	r3, r7, #12
 80049fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a00:	4628      	mov	r0, r5
 8004a02:	f003 fa31 	bl	8007e68 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8004a06:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <HAL_SD_InitCard+0xb4>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f003 fa72 	bl	8007efa <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_SD_InitCard+0xb4>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8004a1c:	2002      	movs	r0, #2
 8004a1e:	f7fd f917 	bl	8001c50 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f001 f90b 	bl	8005c3e <SD_PowerON>
 8004a28:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e013      	b.n	8004a70 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f001 f82f 	bl	8005aac <SD_InitCard>
 8004a4e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3728      	adds	r7, #40	; 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bdb0      	pop	{r4, r5, r7, pc}
 8004a78:	422580a0 	.word	0x422580a0

08004a7c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b08f      	sub	sp, #60	; 0x3c
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8004a8e:	f7fd f8d3 	bl	8001c38 <HAL_GetTick>
 8004a92:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8004a94:	2300      	movs	r3, #0
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d107      	bne.n	8004ab2 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e177      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	f040 816a 	bne.w	8004d94 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	441a      	add	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d907      	bls.n	8004ae4 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e15e      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2200      	movs	r2, #0
 8004af2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d002      	beq.n	8004b02 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	025b      	lsls	r3, r3, #9
 8004b00:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f003 fa89 	bl	8008022 <SDMMC_CmdBlockLength>
 8004b10:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e133      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b3e:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	025b      	lsls	r3, r3, #9
 8004b44:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b46:	2390      	movs	r3, #144	; 0x90
 8004b48:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f107 0210 	add.w	r2, r7, #16
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f003 fa32 	bl	8007fca <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d90a      	bls.n	8004b82 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f003 fa9a 	bl	80080b2 <SDMMC_CmdReadMultiBlock>
 8004b7e:	6378      	str	r0, [r7, #52]	; 0x34
 8004b80:	e009      	b.n	8004b96 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f003 fa6b 	bl	800806a <SDMMC_CmdReadSingleBlock>
 8004b94:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d04a      	beq.n	8004c32 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bac:	431a      	orrs	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e0f1      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d016      	beq.n	8004bfa <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd0:	e00d      	b.n	8004bee <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6819      	ldr	r1, [r3, #0]
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bdc:	18d4      	adds	r4, r2, r3
 8004bde:	4608      	mov	r0, r1
 8004be0:	f003 f96d 	bl	8007ebe <SDIO_ReadFIFO>
 8004be4:	4603      	mov	r3, r0
 8004be6:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	3301      	adds	r3, #1
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2b07      	cmp	r3, #7
 8004bf2:	d9ee      	bls.n	8004bd2 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	3320      	adds	r3, #32
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <HAL_SD_ReadBlocks+0x194>
 8004c00:	f7fd f81a 	bl	8001c38 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d810      	bhi.n	8004c32 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e0b7      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c38:	f240 332a 	movw	r3, #810	; 0x32a
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0bd      	beq.n	8004bbe <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_SD_ReadBlocks+0x216>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d91d      	bls.n	8004c92 <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d019      	beq.n	8004c92 <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f003 fa92 	bl	800818c <SDMMC_CmdStopTransfer>
 8004c68:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d010      	beq.n	8004c92 <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e087      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004ca8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	f043 0208 	orr.w	r2, r3, #8
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e06f      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	f043 0202 	orr.w	r2, r3, #2
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e057      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d037      	beq.n	8004d70 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e03f      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f003 f8c9 	bl	8007ebe <SDIO_ReadFIFO>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	3304      	adds	r3, #4
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <HAL_SD_ReadBlocks+0x2d2>
 8004d3e:	f7fc ff7b 	bl	8001c38 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d810      	bhi.n	8004d70 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e018      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1d1      	bne.n	8004d22 <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e006      	b.n	8004da2 <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
  }
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	373c      	adds	r7, #60	; 0x3c
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd90      	pop	{r4, r7, pc}

08004daa <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b08e      	sub	sp, #56	; 0x38
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8004dbc:	f7fc ff3c 	bl	8001c38 <HAL_GetTick>
 8004dc0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e160      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	f040 8153 	bne.w	8005094 <HAL_SD_WriteBlocks+0x2ea>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	441a      	add	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d907      	bls.n	8004e12 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e147      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2203      	movs	r2, #3
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d002      	beq.n	8004e30 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	025b      	lsls	r3, r3, #9
 8004e2e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f003 f8f2 	bl	8008022 <SDMMC_CmdBlockLength>
 8004e3e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d010      	beq.n	8004e68 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	431a      	orrs	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e11c      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d90a      	bls.n	8004e84 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f003 f961 	bl	8008142 <SDMMC_CmdWriteMultiBlock>
 8004e80:	6378      	str	r0, [r7, #52]	; 0x34
 8004e82:	e009      	b.n	8004e98 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2210      	movs	r2, #16
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f003 f932 	bl	80080fa <SDMMC_CmdWriteSingleBlock>
 8004e96:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d010      	beq.n	8004ec0 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0f0      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ec4:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004ecc:	2390      	movs	r3, #144	; 0x90
 8004ece:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f107 0210 	add.w	r2, r7, #16
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f003 f86f 	bl	8007fca <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004eec:	e037      	b.n	8004f5e <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, /*SDIO_FLAG_TXUNDERR |*/ SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d014      	beq.n	8004f26 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004efc:	2300      	movs	r3, #0
 8004efe:	633b      	str	r3, [r7, #48]	; 0x30
 8004f00:	e00b      	b.n	8004f1a <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f0c:	4413      	add	r3, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f002 ffe2 	bl	8007ed8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	3301      	adds	r3, #1
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	2b07      	cmp	r3, #7
 8004f1e:	d9f0      	bls.n	8004f02 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	3320      	adds	r3, #32
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_SD_WriteBlocks+0x192>
 8004f2c:	f7fc fe84 	bl	8001c38 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d810      	bhi.n	8004f5e <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e0a1      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f64:	f240 331a 	movw	r3, #794	; 0x31a
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0bf      	beq.n	8004eee <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_SD_WriteBlocks+0x214>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d91d      	bls.n	8004fbe <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d019      	beq.n	8004fbe <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f003 f8fc 	bl	800818c <SDMMC_CmdStopTransfer>
 8004f94:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d010      	beq.n	8004fbe <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fac:	431a      	orrs	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e071      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d010      	beq.n	8004fee <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	f043 0208 	orr.w	r2, r3, #8
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e059      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d010      	beq.n	800501e <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f043 0202 	orr.w	r2, r3, #2
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e041      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	d010      	beq.n	800504e <HAL_SD_WriteBlocks+0x2a4>
    {
      // Clear all the static flags
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005034:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	f043 0210 	orr.w	r2, r3, #16
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e029      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_STA_STBITERR))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005058:	2b00      	cmp	r3, #0
 800505a:	d010      	beq.n	800507e <HAL_SD_WriteBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_GENERAL_UNKNOWN_ERR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e011      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	e006      	b.n	80050a2 <HAL_SD_WriteBlocks+0x2f8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
  }
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3738      	adds	r7, #56	; 0x38
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 808d 	beq.w	80051e2 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80050e0:	f023 0302 	bic.w	r3, r3, #2
 80050e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d03a      	beq.n	8005168 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <HAL_SD_IRQHandler+0x5e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d011      	beq.n	800512e <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f003 f83c 	bl	800818c <SDMMC_CmdStopTransfer>
 8005114:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f939 	bl	80053a0 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d105      	bne.n	8005158 <HAL_SD_IRQHandler+0xac>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f917 	bl	800538c <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800515e:	e103      	b.n	8005368 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f909 	bl	8005378 <HAL_SD_TxCpltCallback>
}
 8005166:	e0ff      	b.n	8005368 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80f9 	beq.w	8005368 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d011      	beq.n	80051a6 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f003 f800 	bl	800818c <SDMMC_CmdStopTransfer>
 800518c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8fd 	bl	80053a0 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 80da 	bne.w	8005368 <HAL_SD_IRQHandler+0x2bc>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 80d3 	bne.w	8005368 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0208 	bic.w	r2, r2, #8
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8cc 	bl	8005378 <HAL_SD_TxCpltCallback>
}
 80051e0:	e0c2      	b.n	8005368 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 ff7c 	bl	80060f8 <SD_Write_IT>
}
 8005200:	e0b2      	b.n	8005368 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 ff44 	bl	80060a8 <SD_Read_IT>
}
 8005220:	e0a2      	b.n	8005368 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005228:	f240 233a 	movw	r3, #570	; 0x23a
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 809a 	beq.w	8005368 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	f043 0202 	orr.w	r2, r3, #2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	f043 0208 	orr.w	r2, r3, #8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	f043 0210 	orr.w	r2, r3, #16
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	f043 0208 	orr.w	r2, r3, #8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80052be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80052ce:	f023 0302 	bic.w	r3, r3, #2
 80052d2:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d036      	beq.n	800534e <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d011      	beq.n	800530c <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	4a20      	ldr	r2, [pc, #128]	; (8005370 <HAL_SD_IRQHandler+0x2c4>)
 80052ee:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fc ff6f 	bl	80021d8 <HAL_DMA_Abort_IT>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d033      	beq.n	8005368 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fb55 	bl	80059b4 <SD_DMATxAbort>
}
 800530a:	e02d      	b.n	8005368 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d011      	beq.n	8005338 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_SD_IRQHandler+0x2c8>)
 800531a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005320:	4618      	mov	r0, r3
 8005322:	f7fc ff59 	bl	80021d8 <HAL_DMA_Abort_IT>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01d      	beq.n	8005368 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fb7d 	bl	8005a30 <SD_DMARxAbort>
}
 8005336:	e017      	b.n	8005368 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f834 	bl	80053b4 <HAL_SD_AbortCallback>
}
 800534c:	e00c      	b.n	8005368 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f81c 	bl	80053a0 <HAL_SD_ErrorCallback>
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	080059b5 	.word	0x080059b5
 8005374:	08005a31 	.word	0x08005a31

08005378 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053da:	0e1b      	lsrs	r3, r3, #24
 80053dc:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	099b      	lsrs	r3, r3, #6
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	089b      	lsrs	r3, r3, #2
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	b2da      	uxtb	r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005410:	0c1b      	lsrs	r3, r3, #16
 8005412:	b2db      	uxtb	r3, r3
 8005414:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	b2da      	uxtb	r2, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005422:	0a1b      	lsrs	r3, r3, #8
 8005424:	b2db      	uxtb	r3, r3
 8005426:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005434:	b2db      	uxtb	r3, r3
 8005436:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005444:	0e1b      	lsrs	r3, r3, #24
 8005446:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	b29b      	uxth	r3, r3
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	b29a      	uxth	r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	b2db      	uxtb	r3, r3
 800545c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	88db      	ldrh	r3, [r3, #6]
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	091b      	lsrs	r3, r3, #4
 8005468:	b29b      	uxth	r3, r3
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	b29b      	uxth	r3, r3
 8005470:	4313      	orrs	r3, r2
 8005472:	b29a      	uxth	r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	b2da      	uxtb	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	b2db      	uxtb	r3, r3
 800548e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	09db      	lsrs	r3, r3, #7
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	b2da      	uxtb	r2, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 8087 	bne.w	80055ee <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	029b      	lsls	r3, r3, #10
 80054e4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	431a      	orrs	r2, r3
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005506:	0e1b      	lsrs	r3, r3, #24
 8005508:	b2db      	uxtb	r3, r3
 800550a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	099b      	lsrs	r3, r3, #6
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	431a      	orrs	r2, r3
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	b2da      	uxtb	r2, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	b2da      	uxtb	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	b2db      	uxtb	r3, r3
 8005544:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	b2da      	uxtb	r2, r3
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	089b      	lsrs	r3, r3, #2
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	b2da      	uxtb	r2, r3
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 0306 	and.w	r3, r3, #6
 8005572:	b2da      	uxtb	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	b2db      	uxtb	r3, r3
 8005580:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	7e1b      	ldrb	r3, [r3, #24]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	09db      	lsrs	r3, r3, #7
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	4313      	orrs	r3, r2
 8005596:	b2da      	uxtb	r2, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	7e1b      	ldrb	r3, [r3, #24]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	3302      	adds	r3, #2
 80055ae:	2201      	movs	r2, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80055b8:	fb02 f203 	mul.w	r2, r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	7a1b      	ldrb	r3, [r3, #8]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	2301      	movs	r3, #1
 80055ca:	fa03 f202 	lsl.w	r2, r3, r2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80055da:	0a52      	lsrs	r2, r2, #9
 80055dc:	fb02 f203 	mul.w	r2, r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ea:	661a      	str	r2, [r3, #96]	; 0x60
 80055ec:	e04d      	b.n	800568a <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d138      	bne.n	8005668 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560e:	0e1b      	lsrs	r3, r3, #24
 8005610:	b2db      	uxtb	r3, r3
 8005612:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	431a      	orrs	r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005626:	0c1b      	lsrs	r3, r3, #16
 8005628:	b2db      	uxtb	r3, r3
 800562a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	431a      	orrs	r2, r3
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	b2db      	uxtb	r3, r3
 8005640:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	3301      	adds	r3, #1
 8005648:	029a      	lsls	r2, r3, #10
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800565c:	659a      	str	r2, [r3, #88]	; 0x58
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	661a      	str	r2, [r3, #96]	; 0x60
 8005666:	e010      	b.n	800568a <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0c1      	b.n	800580e <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	099b      	lsrs	r3, r3, #6
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	b2da      	uxtb	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	7e9b      	ldrb	r3, [r3, #26]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	09db      	lsrs	r3, r3, #7
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	4313      	orrs	r3, r2
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	0e1b      	lsrs	r3, r3, #24
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	09db      	lsrs	r3, r3, #7
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	b2da      	uxtb	r2, r3
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	089b      	lsrs	r3, r3, #2
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	b2da      	uxtb	r2, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	b2da      	uxtb	r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	b2db      	uxtb	r3, r3
 8005730:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	7fdb      	ldrb	r3, [r3, #31]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	099b      	lsrs	r3, r3, #6
 800573c:	b2db      	uxtb	r3, r3
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	b2db      	uxtb	r3, r3
 8005744:	4313      	orrs	r3, r2
 8005746:	b2da      	uxtb	r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	b2da      	uxtb	r2, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	b2da      	uxtb	r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	b2db      	uxtb	r3, r3
 800577e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	09db      	lsrs	r3, r3, #7
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	099b      	lsrs	r3, r3, #6
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	b2da      	uxtb	r2, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005872:	b5b0      	push	{r4, r5, r7, lr}
 8005874:	b08e      	sub	sp, #56	; 0x38
 8005876:	af04      	add	r7, sp, #16
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800587c:	2300      	movs	r3, #0
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2203      	movs	r2, #3
 8005884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	2b03      	cmp	r3, #3
 800588e:	d02e      	beq.n	80058ee <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d106      	bne.n	80058a6 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
 80058a4:	e029      	b.n	80058fa <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ac:	d10a      	bne.n	80058c4 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa97 	bl	8005de2 <SD_WideBus_Enable>
 80058b4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
 80058c2:	e01a      	b.n	80058fa <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fad6 	bl	8005e7c <SD_WideBus_Disable>
 80058d0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
 80058de:	e00c      	b.n	80058fa <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
 80058ec:	e005      	b.n	80058fa <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e024      	b.n	8005962 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681d      	ldr	r5, [r3, #0]
 800593e:	466c      	mov	r4, sp
 8005940:	f107 0318 	add.w	r3, r7, #24
 8005944:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800594c:	f107 030c 	add.w	r3, r7, #12
 8005950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005952:	4628      	mov	r0, r5
 8005954:	f002 fa88 	bl	8007e68 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3728      	adds	r7, #40	; 0x28
 8005966:	46bd      	mov	sp, r7
 8005968:	bdb0      	pop	{r4, r5, r7, pc}

0800596a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8005972:	2304      	movs	r3, #4
 8005974:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800597e:	f107 030c 	add.w	r3, r7, #12
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fa02 	bl	8005d8e <SD_SendStatus>
 800598a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	0a5b      	lsrs	r3, r3, #9
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d127      	bne.n	8005a28 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff ffc6 	bl	800596a <HAL_SD_GetCardState>
 80059de:	4603      	mov	r3, r0
 80059e0:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80059f0:	7afb      	ldrb	r3, [r7, #11]
 80059f2:	2b06      	cmp	r3, #6
 80059f4:	d002      	beq.n	80059fc <SD_DMATxAbort+0x48>
 80059f6:	7afb      	ldrb	r3, [r7, #11]
 80059f8:	2b05      	cmp	r3, #5
 80059fa:	d115      	bne.n	8005a28 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f002 fbc3 	bl	800818c <SDMMC_CmdStopTransfer>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff fcca 	bl	80053b4 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8005a20:	e002      	b.n	8005a28 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff fcbc 	bl	80053a0 <HAL_SD_ErrorCallback>
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d127      	bne.n	8005aa4 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff ff88 	bl	800596a <HAL_SD_GetCardState>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005a6c:	7afb      	ldrb	r3, [r7, #11]
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d002      	beq.n	8005a78 <SD_DMARxAbort+0x48>
 8005a72:	7afb      	ldrb	r3, [r7, #11]
 8005a74:	2b05      	cmp	r3, #5
 8005a76:	d115      	bne.n	8005aa4 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f002 fb85 	bl	800818c <SDMMC_CmdStopTransfer>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff fc8c 	bl	80053b4 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8005a9c:	e002      	b.n	8005aa4 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff fc7e 	bl	80053a0 <HAL_SD_ErrorCallback>
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005aac:	b5b0      	push	{r4, r5, r7, lr}
 8005aae:	b094      	sub	sp, #80	; 0x50
 8005ab0:	af04      	add	r7, sp, #16
 8005ab2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f002 fa28 	bl	8007f16 <SDIO_GetPowerState>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005acc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ad0:	e0b1      	b.n	8005c36 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d02f      	beq.n	8005b3a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f002 fc6e 	bl	80083c0 <SDMMC_CmdSendCID>
 8005ae4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <SD_InitCard+0x44>
    {
      return errorstate;
 8005aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aee:	e0a2      	b.n	8005c36 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f002 fa52 	bl	8007fa0 <SDIO_GetResponse>
 8005afc:	4602      	mov	r2, r0
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2104      	movs	r1, #4
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f002 fa49 	bl	8007fa0 <SDIO_GetResponse>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2108      	movs	r1, #8
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f002 fa40 	bl	8007fa0 <SDIO_GetResponse>
 8005b20:	4602      	mov	r2, r0
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	210c      	movs	r1, #12
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f002 fa37 	bl	8007fa0 <SDIO_GetResponse>
 8005b32:	4602      	mov	r2, r0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d00d      	beq.n	8005b5e <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f107 020e 	add.w	r2, r7, #14
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f002 fc78 	bl	8008442 <SDMMC_CmdSetRelAdd>
 8005b52:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <SD_InitCard+0xb2>
    {
      return errorstate;
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	e06b      	b.n	8005c36 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d036      	beq.n	8005bd4 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005b66:	89fb      	ldrh	r3, [r7, #14]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f002 fc40 	bl	8008400 <SDMMC_CmdSendCSD>
 8005b80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <SD_InitCard+0xe0>
    {
      return errorstate;
 8005b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8a:	e054      	b.n	8005c36 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f002 fa04 	bl	8007fa0 <SDIO_GetResponse>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f002 f9fb 	bl	8007fa0 <SDIO_GetResponse>
 8005baa:	4602      	mov	r2, r0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2108      	movs	r1, #8
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f002 f9f2 	bl	8007fa0 <SDIO_GetResponse>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	210c      	movs	r1, #12
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f002 f9e9 	bl	8007fa0 <SDIO_GetResponse>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2104      	movs	r1, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f002 f9e0 	bl	8007fa0 <SDIO_GetResponse>
 8005be0:	4603      	mov	r3, r0
 8005be2:	0d1a      	lsrs	r2, r3, #20
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005be8:	f107 0310 	add.w	r3, r7, #16
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fbea 	bl	80053c8 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6819      	ldr	r1, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	f04f 0400 	mov.w	r4, #0
 8005c02:	461a      	mov	r2, r3
 8005c04:	4623      	mov	r3, r4
 8005c06:	4608      	mov	r0, r1
 8005c08:	f002 fae4 	bl	80081d4 <SDMMC_CmdSelDesel>
 8005c0c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <SD_InitCard+0x16c>
  {
    return errorstate;
 8005c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c16:	e00e      	b.n	8005c36 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681d      	ldr	r5, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	466c      	mov	r4, sp
 8005c20:	f103 0210 	add.w	r2, r3, #16
 8005c24:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f002 f91a 	bl	8007e68 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3740      	adds	r7, #64	; 0x40
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bdb0      	pop	{r4, r5, r7, pc}

08005c3e <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b086      	sub	sp, #24
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f002 fadf 	bl	800821e <SDMMC_CmdGoIdleState>
 8005c60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <SD_PowerON+0x2e>
  {
    return errorstate;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	e08c      	b.n	8005d86 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f002 faf4 	bl	800825e <SDMMC_CmdOperCond>
 8005c76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d03d      	beq.n	8005cfa <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8005c84:	e032      	b.n	8005cec <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	60ba      	str	r2, [r7, #8]
 8005c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d102      	bne.n	8005c9a <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c98:	e075      	b.n	8005d86 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f002 fafd 	bl	80082a0 <SDMMC_CmdAppCommand>
 8005ca6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005cb2:	e068      	b.n	8005d86 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f002 fb14 	bl	80082e8 <SDMMC_CmdAppOperCommand>
 8005cc0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ccc:	e05b      	b.n	8005d86 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f002 f963 	bl	8007fa0 <SDIO_GetResponse>
 8005cda:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	0fdb      	lsrs	r3, r3, #31
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <SD_PowerON+0xaa>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <SD_PowerON+0xac>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0c9      	beq.n	8005c86 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44
 8005cf8:	e044      	b.n	8005d84 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8005d00:	e031      	b.n	8005d66 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	60ba      	str	r2, [r7, #8]
 8005d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d102      	bne.n	8005d16 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d14:	e037      	b.n	8005d86 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f002 fabf 	bl	80082a0 <SDMMC_CmdAppCommand>
 8005d22:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <SD_PowerON+0xf0>
      {
        return errorstate;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	e02b      	b.n	8005d86 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005d36:	4618      	mov	r0, r3
 8005d38:	f002 fad6 	bl	80082e8 <SDMMC_CmdAppOperCommand>
 8005d3c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <SD_PowerON+0x10a>
      {
        return errorstate;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	e01e      	b.n	8005d86 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f002 f926 	bl	8007fa0 <SDIO_GetResponse>
 8005d54:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	0fdb      	lsrs	r3, r3, #31
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <SD_PowerON+0x124>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <SD_PowerON+0x126>
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0ca      	beq.n	8005d02 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	645a      	str	r2, [r3, #68]	; 0x44
 8005d7c:	e002      	b.n	8005d84 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d102      	bne.n	8005da8 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8005da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005da6:	e018      	b.n	8005dda <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	041b      	lsls	r3, r3, #16
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f002 fb67 	bl	8008488 <SDMMC_CmdSendStatus>
 8005dba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <SD_SendStatus+0x38>
  {
    return errorstate;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	e009      	b.n	8005dda <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2100      	movs	r1, #0
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f002 f8e7 	bl	8007fa0 <SDIO_GetResponse>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b086      	sub	sp, #24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f002 f8cf 	bl	8007fa0 <SDIO_GetResponse>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e0c:	d102      	bne.n	8005e14 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e12:	e02f      	b.n	8005e74 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005e14:	f107 030c 	add.w	r3, r7, #12
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f87b 	bl	8005f16 <SD_FindSCR>
 8005e20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	e023      	b.n	8005e74 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01c      	beq.n	8005e70 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f002 fa2c 	bl	80082a0 <SDMMC_CmdAppCommand>
 8005e48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	e00f      	b.n	8005e74 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2102      	movs	r1, #2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f002 fa69 	bl	8008332 <SDMMC_CmdBusWidth>
 8005e60:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	e003      	b.n	8005e74 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e001      	b.n	8005e74 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005e70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2100      	movs	r1, #0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f002 f882 	bl	8007fa0 <SDIO_GetResponse>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ea6:	d102      	bne.n	8005eae <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005eac:	e02f      	b.n	8005f0e <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005eae:	f107 030c 	add.w	r3, r7, #12
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f82e 	bl	8005f16 <SD_FindSCR>
 8005eba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e023      	b.n	8005f0e <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01c      	beq.n	8005f0a <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f002 f9df 	bl	80082a0 <SDMMC_CmdAppCommand>
 8005ee2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	e00f      	b.n	8005f0e <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f002 fa1c 	bl	8008332 <SDMMC_CmdBusWidth>
 8005efa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	e003      	b.n	8005f0e <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e001      	b.n	8005f0e <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005f16:	b590      	push	{r4, r7, lr}
 8005f18:	b08f      	sub	sp, #60	; 0x3c
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005f24:	f7fb fe88 	bl	8001c38 <HAL_GetTick>
 8005f28:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2108      	movs	r1, #8
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f002 f870 	bl	8008022 <SDMMC_CmdBlockLength>
 8005f42:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <SD_FindSCR+0x38>
  {
    return errorstate;
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	e0a8      	b.n	80060a0 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f56:	041b      	lsls	r3, r3, #16
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f002 f9a0 	bl	80082a0 <SDMMC_CmdAppCommand>
 8005f60:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <SD_FindSCR+0x56>
  {
    return errorstate;
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	e099      	b.n	80060a0 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f70:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8005f72:	2308      	movs	r3, #8
 8005f74:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005f76:	2330      	movs	r3, #48	; 0x30
 8005f78:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005f82:	2301      	movs	r3, #1
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f107 0214 	add.w	r2, r7, #20
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f002 f81a 	bl	8007fca <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 f9ed 	bl	800837a <SDMMC_CmdSendSCR>
 8005fa0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d022      	beq.n	8005fee <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	e079      	b.n	80060a0 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00e      	beq.n	8005fd8 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	f107 020c 	add.w	r2, r7, #12
 8005fc6:	18d4      	adds	r4, r2, r3
 8005fc8:	4608      	mov	r0, r1
 8005fca:	f001 ff78 	bl	8007ebe <SDIO_ReadFIFO>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	6023      	str	r3, [r4, #0]
      index++;
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005fd8:	f7fb fe2e 	bl	8001c38 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe6:	d102      	bne.n	8005fee <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005fe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fec:	e058      	b.n	80060a0 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff4:	f240 432a 	movw	r3, #1066	; 0x42a
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0d6      	beq.n	8005fac <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2208      	movs	r2, #8
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006014:	2308      	movs	r3, #8
 8006016:	e043      	b.n	80060a0 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2202      	movs	r2, #2
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800602e:	2302      	movs	r3, #2
 8006030:	e036      	b.n	80060a0 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2220      	movs	r2, #32
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8006048:	2320      	movs	r3, #32
 800604a:	e029      	b.n	80060a0 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	061a      	lsls	r2, r3, #24
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006062:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800606c:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006078:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800607a:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	061a      	lsls	r2, r3, #24
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006088:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006092:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	0e1b      	lsrs	r3, r3, #24
 8006098:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	373c      	adds	r7, #60	; 0x3c
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd90      	pop	{r4, r7, pc}

080060a8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e00d      	b.n	80060dc <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	18d4      	adds	r4, r2, r3
 80060cc:	4608      	mov	r0, r1
 80060ce:	f001 fef6 	bl	8007ebe <SDIO_ReadFIFO>
 80060d2:	4603      	mov	r3, r0
 80060d4:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3301      	adds	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b07      	cmp	r3, #7
 80060e0:	d9ee      	bls.n	80060c0 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	f103 0220 	add.w	r2, r3, #32
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd90      	pop	{r4, r7, pc}

080060f8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e00b      	b.n	8006128 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	4413      	add	r3, r2
 800611c:	4619      	mov	r1, r3
 800611e:	f001 fedb 	bl	8007ed8 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b07      	cmp	r3, #7
 800612c:	d9f0      	bls.n	8006110 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f103 0220 	add.w	r2, r3, #32
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e05e      	b.n	8006214 <HAL_SPI_Init+0xd0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d106      	bne.n	8006176 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f003 fcd5 	bl	8009b20 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800618c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	ea42 0103 	orr.w	r1, r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	f003 0104 	and.w	r1, r3, #4
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69da      	ldr	r2, [r3, #28]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f2:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  __HAL_SPI_ENABLE(hspi);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006210:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e034      	b.n	800629c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f003 fe7c 	bl	8009f44 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3308      	adds	r3, #8
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f001 fd10 	bl	8007c7c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	461a      	mov	r2, r3
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	f001 fd6c 	bl	8007d44 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6858      	ldr	r0, [r3, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	f001 fdb5 	bl	8007de8 <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	6892      	ldr	r2, [r2, #8]
 8006286:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	6892      	ldr	r2, [r2, #8]
 8006292:	f041 0101 	orr.w	r1, r1, #1
 8006296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e01d      	b.n	80062f2 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f003 fcd4 	bl	8009c78 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3304      	adds	r3, #4
 80062e0:	4619      	mov	r1, r3
 80062e2:	4610      	mov	r0, r2
 80062e4:	f000 fb2c 	bl	8006940 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0201 	orr.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e01d      	b.n	800637e <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f815 	bl	8006386 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f000 fae6 	bl	8006940 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}  
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_TIM_PWM_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d122      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d11b      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f06f 0202 	mvn.w	r2, #2
 80063c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fa90 	bl	8006902 <HAL_TIM_IC_CaptureCallback>
 80063e2:	e005      	b.n	80063f0 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fa82 	bl	80068ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa93 	bl	8006916 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b04      	cmp	r3, #4
 8006402:	d122      	bne.n	800644a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b04      	cmp	r3, #4
 8006410:	d11b      	bne.n	800644a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0204 	mvn.w	r2, #4
 800641a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fa66 	bl	8006902 <HAL_TIM_IC_CaptureCallback>
 8006436:	e005      	b.n	8006444 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fa58 	bl	80068ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa69 	bl	8006916 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b08      	cmp	r3, #8
 8006456:	d122      	bne.n	800649e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b08      	cmp	r3, #8
 8006464:	d11b      	bne.n	800649e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f06f 0208 	mvn.w	r2, #8
 800646e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2204      	movs	r2, #4
 8006474:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fa3c 	bl	8006902 <HAL_TIM_IC_CaptureCallback>
 800648a:	e005      	b.n	8006498 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fa2e 	bl	80068ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa3f 	bl	8006916 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b10      	cmp	r3, #16
 80064aa:	d122      	bne.n	80064f2 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b10      	cmp	r3, #16
 80064b8:	d11b      	bne.n	80064f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f06f 0210 	mvn.w	r2, #16
 80064c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2208      	movs	r2, #8
 80064c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fa12 	bl	8006902 <HAL_TIM_IC_CaptureCallback>
 80064de:	e005      	b.n	80064ec <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa04 	bl	80068ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fa15 	bl	8006916 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10e      	bne.n	800651e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b01      	cmp	r3, #1
 800650c:	d107      	bne.n	800651e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f06f 0201 	mvn.w	r2, #1
 8006516:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fb f9f7 	bl	800190c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	2b80      	cmp	r3, #128	; 0x80
 800652a:	d10e      	bne.n	800654a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006536:	2b80      	cmp	r3, #128	; 0x80
 8006538:	d107      	bne.n	800654a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006542:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fd61 	bl	800700c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d10e      	bne.n	8006576 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d107      	bne.n	8006576 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800656e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f9da 	bl	800692a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b20      	cmp	r3, #32
 8006582:	d10e      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b20      	cmp	r3, #32
 8006590:	d107      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f06f 0220 	mvn.w	r2, #32
 800659a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fd2b 	bl	8006ff8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e0b4      	b.n	8006730 <HAL_TIM_PWM_ConfigChannel+0x184>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b0c      	cmp	r3, #12
 80065da:	f200 809f 	bhi.w	800671c <HAL_TIM_PWM_ConfigChannel+0x170>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006619 	.word	0x08006619
 80065e8:	0800671d 	.word	0x0800671d
 80065ec:	0800671d 	.word	0x0800671d
 80065f0:	0800671d 	.word	0x0800671d
 80065f4:	08006659 	.word	0x08006659
 80065f8:	0800671d 	.word	0x0800671d
 80065fc:	0800671d 	.word	0x0800671d
 8006600:	0800671d 	.word	0x0800671d
 8006604:	0800669b 	.word	0x0800669b
 8006608:	0800671d 	.word	0x0800671d
 800660c:	0800671d 	.word	0x0800671d
 8006610:	0800671d 	.word	0x0800671d
 8006614:	080066db 	.word	0x080066db
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fab0 	bl	8006b84 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0208 	orr.w	r2, r2, #8
 8006632:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0204 	bic.w	r2, r2, #4
 8006642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6999      	ldr	r1, [r3, #24]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	619a      	str	r2, [r3, #24]
    }
    break;
 8006656:	e062      	b.n	800671e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fa18 	bl	8006a94 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006672:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6999      	ldr	r1, [r3, #24]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	021a      	lsls	r2, r3, #8
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	619a      	str	r2, [r3, #24]
    }
    break;
 8006698:	e041      	b.n	800671e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fae3 	bl	8006c6c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0208 	orr.w	r2, r2, #8
 80066b4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69da      	ldr	r2, [r3, #28]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0204 	bic.w	r2, r2, #4
 80066c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69d9      	ldr	r1, [r3, #28]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	61da      	str	r2, [r3, #28]
    }
    break;
 80066d8:	e021      	b.n	800671e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fb3b 	bl	8006d5c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69d9      	ldr	r1, [r3, #28]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	021a      	lsls	r2, r3, #8
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	61da      	str	r2, [r3, #28]
    }
    break;
 800671a:	e000      	b.n	800671e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 800671c:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_TIM_ConfigClockSource+0x1c>
 8006750:	2302      	movs	r3, #2
 8006752:	e0c8      	b.n	80068e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	d077      	beq.n	800687c <HAL_TIM_ConfigClockSource+0x144>
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d80e      	bhi.n	80067ae <HAL_TIM_ConfigClockSource+0x76>
 8006790:	2b10      	cmp	r3, #16
 8006792:	f000 808a 	beq.w	80068aa <HAL_TIM_ConfigClockSource+0x172>
 8006796:	2b10      	cmp	r3, #16
 8006798:	d802      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x68>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d07e      	beq.n	800689c <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 800679e:	e099      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	f000 8089 	beq.w	80068b8 <HAL_TIM_ConfigClockSource+0x180>
 80067a6:	2b30      	cmp	r3, #48	; 0x30
 80067a8:	f000 808d 	beq.w	80068c6 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 80067ac:	e092      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80067ae:	2b70      	cmp	r3, #112	; 0x70
 80067b0:	d016      	beq.n	80067e0 <HAL_TIM_ConfigClockSource+0xa8>
 80067b2:	2b70      	cmp	r3, #112	; 0x70
 80067b4:	d804      	bhi.n	80067c0 <HAL_TIM_ConfigClockSource+0x88>
 80067b6:	2b50      	cmp	r3, #80	; 0x50
 80067b8:	d040      	beq.n	800683c <HAL_TIM_ConfigClockSource+0x104>
 80067ba:	2b60      	cmp	r3, #96	; 0x60
 80067bc:	d04e      	beq.n	800685c <HAL_TIM_ConfigClockSource+0x124>
    break;    
 80067be:	e089      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80067c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c4:	d003      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x96>
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ca:	d024      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 80067cc:	e082      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0207 	bic.w	r2, r2, #7
 80067dc:	609a      	str	r2, [r3, #8]
    break;
 80067de:	e079      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6818      	ldr	r0, [r3, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	6899      	ldr	r1, [r3, #8]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f000 fb9b 	bl	8006f2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006802:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800680a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	609a      	str	r2, [r3, #8]
    break;
 8006814:	e05e      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6899      	ldr	r1, [r3, #8]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f000 fb80 	bl	8006f2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006838:	609a      	str	r2, [r3, #8]
    break;
 800683a:	e04b      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	6859      	ldr	r1, [r3, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	461a      	mov	r2, r3
 800684a:	f000 fae7 	bl	8006e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2150      	movs	r1, #80	; 0x50
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fb48 	bl	8006eea <TIM_ITRx_SetConfig>
    break;
 800685a:	e03b      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6859      	ldr	r1, [r3, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	461a      	mov	r2, r3
 800686a:	f000 fb0a 	bl	8006e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2160      	movs	r1, #96	; 0x60
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fb38 	bl	8006eea <TIM_ITRx_SetConfig>
    break;
 800687a:	e02b      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	461a      	mov	r2, r3
 800688a:	f000 fac7 	bl	8006e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2140      	movs	r1, #64	; 0x40
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fb28 	bl	8006eea <TIM_ITRx_SetConfig>
    break;
 800689a:	e01b      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fb21 	bl	8006eea <TIM_ITRx_SetConfig>
    break;
 80068a8:	e014      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2110      	movs	r1, #16
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fb1a 	bl	8006eea <TIM_ITRx_SetConfig>
    break;
 80068b6:	e00d      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2120      	movs	r1, #32
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fb13 	bl	8006eea <TIM_ITRx_SetConfig>
    break;
 80068c4:	e006      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2130      	movs	r1, #48	; 0x30
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fb0c 	bl	8006eea <TIM_ITRx_SetConfig>
    break;
 80068d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
	...

08006940 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a44      	ldr	r2, [pc, #272]	; (8006a68 <TIM_Base_SetConfig+0x128>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <TIM_Base_SetConfig+0x44>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d00f      	beq.n	8006984 <TIM_Base_SetConfig+0x44>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a41      	ldr	r2, [pc, #260]	; (8006a6c <TIM_Base_SetConfig+0x12c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00b      	beq.n	8006984 <TIM_Base_SetConfig+0x44>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a40      	ldr	r2, [pc, #256]	; (8006a70 <TIM_Base_SetConfig+0x130>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d007      	beq.n	8006984 <TIM_Base_SetConfig+0x44>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a3f      	ldr	r2, [pc, #252]	; (8006a74 <TIM_Base_SetConfig+0x134>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0x44>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a3e      	ldr	r2, [pc, #248]	; (8006a78 <TIM_Base_SetConfig+0x138>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d101      	bne.n	8006988 <TIM_Base_SetConfig+0x48>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <TIM_Base_SetConfig+0x4a>
 8006988:	2300      	movs	r3, #0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a31      	ldr	r2, [pc, #196]	; (8006a68 <TIM_Base_SetConfig+0x128>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d02b      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ae:	d027      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a2e      	ldr	r2, [pc, #184]	; (8006a6c <TIM_Base_SetConfig+0x12c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d023      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a2d      	ldr	r2, [pc, #180]	; (8006a70 <TIM_Base_SetConfig+0x130>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d01f      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a2c      	ldr	r2, [pc, #176]	; (8006a74 <TIM_Base_SetConfig+0x134>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d01b      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a2b      	ldr	r2, [pc, #172]	; (8006a78 <TIM_Base_SetConfig+0x138>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d017      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a2a      	ldr	r2, [pc, #168]	; (8006a7c <TIM_Base_SetConfig+0x13c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d013      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a29      	ldr	r2, [pc, #164]	; (8006a80 <TIM_Base_SetConfig+0x140>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00f      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a28      	ldr	r2, [pc, #160]	; (8006a84 <TIM_Base_SetConfig+0x144>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00b      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a27      	ldr	r2, [pc, #156]	; (8006a88 <TIM_Base_SetConfig+0x148>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d007      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <TIM_Base_SetConfig+0x14c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_Base_SetConfig+0xc0>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a25      	ldr	r2, [pc, #148]	; (8006a90 <TIM_Base_SetConfig+0x150>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d101      	bne.n	8006a04 <TIM_Base_SetConfig+0xc4>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <TIM_Base_SetConfig+0xc6>
 8006a04:	2300      	movs	r3, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d008      	beq.n	8006a1c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a0c      	ldr	r2, [pc, #48]	; (8006a68 <TIM_Base_SetConfig+0x128>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_Base_SetConfig+0x102>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a0e      	ldr	r2, [pc, #56]	; (8006a78 <TIM_Base_SetConfig+0x138>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d101      	bne.n	8006a46 <TIM_Base_SetConfig+0x106>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <TIM_Base_SetConfig+0x108>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	615a      	str	r2, [r3, #20]
}
 8006a5a:	bf00      	nop
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40010000 	.word	0x40010000
 8006a6c:	40000400 	.word	0x40000400
 8006a70:	40000800 	.word	0x40000800
 8006a74:	40000c00 	.word	0x40000c00
 8006a78:	40010400 	.word	0x40010400
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40014400 	.word	0x40014400
 8006a84:	40014800 	.word	0x40014800
 8006a88:	40001800 	.word	0x40001800
 8006a8c:	40001c00 	.word	0x40001c00
 8006a90:	40002000 	.word	0x40002000

08006a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	f023 0210 	bic.w	r2, r3, #16
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad6:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0320 	bic.w	r3, r3, #32
 8006aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a20      	ldr	r2, [pc, #128]	; (8006b7c <TIM_OC2_SetConfig+0xe8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC2_SetConfig+0x74>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a1f      	ldr	r2, [pc, #124]	; (8006b80 <TIM_OC2_SetConfig+0xec>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d101      	bne.n	8006b0c <TIM_OC2_SetConfig+0x78>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <TIM_OC2_SetConfig+0x7a>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d021      	beq.n	8006b56 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	621a      	str	r2, [r3, #32]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	40010000 	.word	0x40010000
 8006b80:	40010400 	.word	0x40010400

08006b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8006b96:	2300      	movs	r3, #0
 8006b98:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	f023 0201 	bic.w	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0303 	bic.w	r3, r3, #3
 8006bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f023 0302 	bic.w	r3, r3, #2
 8006bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <TIM_OC1_SetConfig+0xe0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_OC1_SetConfig+0x70>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <TIM_OC1_SetConfig+0xe4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d101      	bne.n	8006bf8 <TIM_OC1_SetConfig+0x74>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <TIM_OC1_SetConfig+0x76>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01e      	beq.n	8006c3c <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0308 	bic.w	r3, r3, #8
 8006c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f023 0304 	bic.w	r3, r3, #4
 8006c16:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	621a      	str	r2, [r3, #32]
} 
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40010000 	.word	0x40010000
 8006c68:	40010400 	.word	0x40010400

08006c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0303 	bic.w	r3, r3, #3
 8006cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a20      	ldr	r2, [pc, #128]	; (8006d54 <TIM_OC3_SetConfig+0xe8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d003      	beq.n	8006cde <TIM_OC3_SetConfig+0x72>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a1f      	ldr	r2, [pc, #124]	; (8006d58 <TIM_OC3_SetConfig+0xec>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d101      	bne.n	8006ce2 <TIM_OC3_SetConfig+0x76>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <TIM_OC3_SetConfig+0x78>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d021      	beq.n	8006d2c <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d02:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	621a      	str	r2, [r3, #32]
}
 8006d46:	bf00      	nop
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40010000 	.word	0x40010000
 8006d58:	40010400 	.word	0x40010400

08006d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006db2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	031b      	lsls	r3, r3, #12
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a14      	ldr	r2, [pc, #80]	; (8006e14 <TIM_OC4_SetConfig+0xb8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d003      	beq.n	8006dd0 <TIM_OC4_SetConfig+0x74>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a13      	ldr	r2, [pc, #76]	; (8006e18 <TIM_OC4_SetConfig+0xbc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d101      	bne.n	8006dd4 <TIM_OC4_SetConfig+0x78>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e000      	b.n	8006dd6 <TIM_OC4_SetConfig+0x7a>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	019b      	lsls	r3, r3, #6
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	621a      	str	r2, [r3, #32]
}
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	40010000 	.word	0x40010000
 8006e18:	40010400 	.word	0x40010400

08006e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f023 030a 	bic.w	r3, r3, #10
 8006e60:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b087      	sub	sp, #28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0210 	bic.w	r2, r3, #16
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	031b      	lsls	r3, r3, #12
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	621a      	str	r2, [r3, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006f08:	887b      	ldrh	r3, [r7, #2]
 8006f0a:	f043 0307 	orr.w	r3, r3, #7
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	609a      	str	r2, [r3, #8]
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b087      	sub	sp, #28
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	021a      	lsls	r2, r3, #8
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	431a      	orrs	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	609a      	str	r2, [r3, #8]
} 
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e032      	b.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006fa4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6859      	ldr	r1, [r3, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fc6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6899      	ldr	r1, [r3, #8]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
} 
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e03f      	b.n	80070b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f002 fe5a 	bl	8009d00 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2224      	movs	r2, #36	; 0x24
 8007050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007062:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fbc9 	bl	80077fc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	695a      	ldr	r2, [r3, #20]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007088:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007098:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b088      	sub	sp, #32
 80070be:	af02      	add	r7, sp, #8
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	603b      	str	r3, [r7, #0]
 80070c6:	4613      	mov	r3, r2
 80070c8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	f040 8083 	bne.w	80071e2 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_UART_Transmit+0x2e>
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e07b      	b.n	80071e4 <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Transmit+0x40>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e074      	b.n	80071e4 <HAL_UART_Transmit+0x12a>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2221      	movs	r2, #33	; 0x21
 800710c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007110:	f7fa fd92 	bl	8001c38 <HAL_GetTick>
 8007114:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	88fa      	ldrh	r2, [r7, #6]
 800711a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	88fa      	ldrh	r2, [r7, #6]
 8007120:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8007122:	e042      	b.n	80071aa <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713a:	d122      	bne.n	8007182 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2200      	movs	r2, #0
 8007144:	2180      	movs	r1, #128	; 0x80
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fa4a 	bl	80075e0 <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e046      	b.n	80071e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007168:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	3302      	adds	r3, #2
 8007176:	60bb      	str	r3, [r7, #8]
 8007178:	e017      	b.n	80071aa <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3301      	adds	r3, #1
 800717e:	60bb      	str	r3, [r7, #8]
 8007180:	e013      	b.n	80071aa <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2200      	movs	r2, #0
 800718a:	2180      	movs	r1, #128	; 0x80
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fa27 	bl	80075e0 <UART_WaitOnFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e023      	b.n	80071e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	60ba      	str	r2, [r7, #8]
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1b7      	bne.n	8007124 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2140      	movs	r1, #64	; 0x40
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fa0e 	bl	80075e0 <UART_WaitOnFlagUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e00a      	b.n	80071e4 <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	e000      	b.n	80071e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80071e2:	2302      	movs	r3, #2
  }
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b20      	cmp	r3, #32
 800720a:	f040 8090 	bne.w	800732e <HAL_UART_Receive+0x142>
  { 
    if((pData == NULL ) || (Size == 0)) 
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_UART_Receive+0x2e>
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e088      	b.n	8007330 <HAL_UART_Receive+0x144>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_UART_Receive+0x40>
 8007228:	2302      	movs	r3, #2
 800722a:	e081      	b.n	8007330 <HAL_UART_Receive+0x144>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2222      	movs	r2, #34	; 0x22
 800723e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007242:	f7fa fcf9 	bl	8001c38 <HAL_GetTick>
 8007246:	6178      	str	r0, [r7, #20]
        
    huart->RxXferSize = Size; 
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	88fa      	ldrh	r2, [r7, #6]
 800724c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8007254:	e05c      	b.n	8007310 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800725a:	b29b      	uxth	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b29a      	uxth	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726c:	d12b      	bne.n	80072c6 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2200      	movs	r2, #0
 8007276:	2120      	movs	r1, #32
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 f9b1 	bl	80075e0 <UART_WaitOnFlagUntilTimeout>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <HAL_UART_Receive+0x9c>
        { 
          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e053      	b.n	8007330 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*) pData;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10c      	bne.n	80072ae <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	b29b      	uxth	r3, r3
 800729c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3302      	adds	r3, #2
 80072aa:	60bb      	str	r3, [r7, #8]
 80072ac:	e030      	b.n	8007310 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	3301      	adds	r3, #1
 80072c2:	60bb      	str	r3, [r7, #8]
 80072c4:	e024      	b.n	8007310 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2120      	movs	r1, #32
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f985 	bl	80075e0 <UART_WaitOnFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <HAL_UART_Receive+0xf4>
        { 
          return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e027      	b.n	8007330 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d108      	bne.n	80072fa <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6859      	ldr	r1, [r3, #4]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	60ba      	str	r2, [r7, #8]
 80072f4:	b2ca      	uxtb	r2, r1
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	e00a      	b.n	8007310 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	b2da      	uxtb	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	1c59      	adds	r1, r3, #1
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d19d      	bne.n	8007256 <HAL_UART_Receive+0x6a>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	e000      	b.n	8007330 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;   
 800732e:	2302      	movs	r3, #2
  }
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	4613      	mov	r3, r2
 8007344:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b20      	cmp	r3, #32
 8007350:	d138      	bne.n	80073c4 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <HAL_UART_Receive_IT+0x26>
 8007358:	88fb      	ldrh	r3, [r7, #6]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e031      	b.n	80073c6 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_UART_Receive_IT+0x38>
 800736c:	2302      	movs	r3, #2
 800736e:	e02a      	b.n	80073c6 <HAL_UART_Receive_IT+0x8e>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2222      	movs	r2, #34	; 0x22
 8007394:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695a      	ldr	r2, [r3, #20]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80073be:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	e000      	b.n	80073c6 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 80073c4:	2302      	movs	r3, #2
  }
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10d      	bne.n	8007426 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_UART_IRQHandler+0x52>
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f9c8 	bl	80077b4 <UART_Receive_IT>
      return;
 8007424:	e0cc      	b.n	80075c0 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80ab 	beq.w	8007584 <HAL_UART_IRQHandler+0x1b0>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d105      	bne.n	8007444 <HAL_UART_IRQHandler+0x70>
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80a0 	beq.w	8007584 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <HAL_UART_IRQHandler+0x90>
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d005      	beq.n	8007464 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745c:	f043 0201 	orr.w	r2, r3, #1
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <HAL_UART_IRQHandler+0xb0>
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747c:	f043 0202 	orr.w	r2, r3, #2
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_UART_IRQHandler+0xd0>
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	f043 0204 	orr.w	r2, r3, #4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <HAL_UART_IRQHandler+0xf0>
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074bc:	f043 0208 	orr.w	r2, r3, #8
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d078      	beq.n	80075be <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f003 0320 	and.w	r3, r3, #32
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d007      	beq.n	80074e6 <HAL_UART_IRQHandler+0x112>
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f967 	bl	80077b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bf14      	ite	ne
 80074f4:	2301      	movne	r3, #1
 80074f6:	2300      	moveq	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <HAL_UART_IRQHandler+0x13a>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d031      	beq.n	8007572 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f8b0 	bl	8007674 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d023      	beq.n	800756a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007530:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007536:	2b00      	cmp	r3, #0
 8007538:	d013      	beq.n	8007562 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	4a22      	ldr	r2, [pc, #136]	; (80075c8 <HAL_UART_IRQHandler+0x1f4>)
 8007540:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007546:	4618      	mov	r0, r3
 8007548:	f7fa fe46 	bl	80021d8 <HAL_DMA_Abort_IT>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d016      	beq.n	8007580 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800755c:	4610      	mov	r0, r2
 800755e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	e00e      	b.n	8007580 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f9e0 	bl	8008928 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007568:	e00a      	b.n	8007580 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 f9dc 	bl	8008928 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007570:	e006      	b.n	8007580 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 f9d8 	bl	8008928 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800757e:	e01e      	b.n	80075be <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	bf00      	nop
    return;
 8007582:	e01c      	b.n	80075be <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <HAL_UART_IRQHandler+0x1cc>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f89d 	bl	80076d8 <UART_Transmit_IT>
    return;
 800759e:	e00f      	b.n	80075c0 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <HAL_UART_IRQHandler+0x1ec>
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d005      	beq.n	80075c0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8e5 	bl	8007784 <UART_EndTransmit_IT>
    return;
 80075ba:	bf00      	nop
 80075bc:	e000      	b.n	80075c0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80075be:	bf00      	nop
  }
}
 80075c0:	3720      	adds	r7, #32
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	080076b1 	.word	0x080076b1

080075cc <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80075f0:	e02c      	b.n	800764c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075f8:	d028      	beq.n	800764c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <UART_WaitOnFlagUntilTimeout+0x30>
 8007600:	f7fa fb1a 	bl	8001c38 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	429a      	cmp	r2, r3
 800760e:	d21d      	bcs.n	800764c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800761e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695a      	ldr	r2, [r3, #20]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0201 	bic.w	r2, r2, #1
 800762e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e00f      	b.n	800766c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	4013      	ands	r3, r2
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	429a      	cmp	r2, r3
 800765a:	bf0c      	ite	eq
 800765c:	2301      	moveq	r3, #1
 800765e:	2300      	movne	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	429a      	cmp	r2, r3
 8007668:	d0c3      	beq.n	80075f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800768a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695a      	ldr	r2, [r3, #20]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f001 f92c 	bl	8008928 <HAL_UART_ErrorCallback>
}
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b21      	cmp	r3, #33	; 0x21
 80076ea:	d144      	bne.n	8007776 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f4:	d11a      	bne.n	800772c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800770a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	621a      	str	r2, [r3, #32]
 800771e:	e00e      	b.n	800773e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	621a      	str	r2, [r3, #32]
 800772a:	e008      	b.n	800773e <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	1c59      	adds	r1, r3, #1
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6211      	str	r1, [r2, #32]
 8007736:	781a      	ldrb	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29b      	uxth	r3, r3
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	4619      	mov	r1, r3
 800774c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10f      	bne.n	8007772 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007760:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007770:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	e000      	b.n	8007778 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007776:	2302      	movs	r3, #2
  }
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779a:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff ff11 	bl	80075cc <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
#if 1
    if( huart == &huart1 )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <UART_Receive_IT+0x3c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d102      	bne.n	80077ca <UART_Receive_IT+0x16>
    {
        CUSTOM_UART_Receive_IT_1();
 80077c4:	f002 fc62 	bl	800a08c <CUSTOM_UART_Receive_IT_1>
 80077c8:	e00c      	b.n	80077e4 <UART_Receive_IT+0x30>
    }else if( huart == &huart4 )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a09      	ldr	r2, [pc, #36]	; (80077f4 <UART_Receive_IT+0x40>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d102      	bne.n	80077d8 <UART_Receive_IT+0x24>
    {
        CUSTOM_UART_Receive_IT_4();
 80077d2:	f002 fc9f 	bl	800a114 <CUSTOM_UART_Receive_IT_4>
 80077d6:	e005      	b.n	80077e4 <UART_Receive_IT+0x30>
    }else if( huart == &huart6 )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a07      	ldr	r2, [pc, #28]	; (80077f8 <UART_Receive_IT+0x44>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d101      	bne.n	80077e4 <UART_Receive_IT+0x30>
    {
        CUSTOM_UART_Receive_IT_6();
 80077e0:	f002 fcde 	bl	800a1a0 <CUSTOM_UART_Receive_IT_6>
    }
    return HAL_OK;
 80077e4:	2300      	movs	r3, #0
  {
    return HAL_BUSY;
  }

#endif
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20001f5c 	.word	0x20001f5c
 80077f4:	200020f8 	.word	0x200020f8
 80077f8:	200020b8 	.word	0x200020b8

080077fc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077fc:	b5b0      	push	{r4, r5, r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007816:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007838:	f023 030c 	bic.w	r3, r3, #12
 800783c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	431a      	orrs	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	4313      	orrs	r3, r2
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007870:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800788c:	f040 80e4 	bne.w	8007a58 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4aab      	ldr	r2, [pc, #684]	; (8007b44 <UART_SetConfig+0x348>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d004      	beq.n	80078a4 <UART_SetConfig+0xa8>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4aaa      	ldr	r2, [pc, #680]	; (8007b48 <UART_SetConfig+0x34c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d16c      	bne.n	800797e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80078a4:	f7fc fb3a 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 80078a8:	4602      	mov	r2, r0
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009a      	lsls	r2, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80078be:	4aa3      	ldr	r2, [pc, #652]	; (8007b4c <UART_SetConfig+0x350>)
 80078c0:	fba2 2303 	umull	r2, r3, r2, r3
 80078c4:	095b      	lsrs	r3, r3, #5
 80078c6:	011c      	lsls	r4, r3, #4
 80078c8:	f7fc fb28 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 80078cc:	4602      	mov	r2, r0
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009a      	lsls	r2, r3, #2
 80078d6:	441a      	add	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	fbb2 f5f3 	udiv	r5, r2, r3
 80078e2:	f7fc fb1b 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 80078e6:	4602      	mov	r2, r0
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009a      	lsls	r2, r3, #2
 80078f0:	441a      	add	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	4a93      	ldr	r2, [pc, #588]	; (8007b4c <UART_SetConfig+0x350>)
 80078fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007902:	095b      	lsrs	r3, r3, #5
 8007904:	2264      	movs	r2, #100	; 0x64
 8007906:	fb02 f303 	mul.w	r3, r2, r3
 800790a:	1aeb      	subs	r3, r5, r3
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	3332      	adds	r3, #50	; 0x32
 8007910:	4a8e      	ldr	r2, [pc, #568]	; (8007b4c <UART_SetConfig+0x350>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	095b      	lsrs	r3, r3, #5
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800791e:	441c      	add	r4, r3
 8007920:	f7fc fafc 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8007924:	4602      	mov	r2, r0
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009a      	lsls	r2, r3, #2
 800792e:	441a      	add	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	fbb2 f5f3 	udiv	r5, r2, r3
 800793a:	f7fc faef 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 800793e:	4602      	mov	r2, r0
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009a      	lsls	r2, r3, #2
 8007948:	441a      	add	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	fbb2 f3f3 	udiv	r3, r2, r3
 8007954:	4a7d      	ldr	r2, [pc, #500]	; (8007b4c <UART_SetConfig+0x350>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	2264      	movs	r2, #100	; 0x64
 800795e:	fb02 f303 	mul.w	r3, r2, r3
 8007962:	1aeb      	subs	r3, r5, r3
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	3332      	adds	r3, #50	; 0x32
 8007968:	4a78      	ldr	r2, [pc, #480]	; (8007b4c <UART_SetConfig+0x350>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	f003 0207 	and.w	r2, r3, #7
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4422      	add	r2, r4
 800797a:	609a      	str	r2, [r3, #8]
 800797c:	e154      	b.n	8007c28 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800797e:	f7fc faab 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8007982:	4602      	mov	r2, r0
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	009a      	lsls	r2, r3, #2
 800798c:	441a      	add	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	fbb2 f3f3 	udiv	r3, r2, r3
 8007998:	4a6c      	ldr	r2, [pc, #432]	; (8007b4c <UART_SetConfig+0x350>)
 800799a:	fba2 2303 	umull	r2, r3, r2, r3
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	011c      	lsls	r4, r3, #4
 80079a2:	f7fc fa99 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 80079a6:	4602      	mov	r2, r0
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009a      	lsls	r2, r3, #2
 80079b0:	441a      	add	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80079bc:	f7fc fa8c 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	009a      	lsls	r2, r3, #2
 80079ca:	441a      	add	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d6:	4a5d      	ldr	r2, [pc, #372]	; (8007b4c <UART_SetConfig+0x350>)
 80079d8:	fba2 2303 	umull	r2, r3, r2, r3
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	2264      	movs	r2, #100	; 0x64
 80079e0:	fb02 f303 	mul.w	r3, r2, r3
 80079e4:	1aeb      	subs	r3, r5, r3
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	3332      	adds	r3, #50	; 0x32
 80079ea:	4a58      	ldr	r2, [pc, #352]	; (8007b4c <UART_SetConfig+0x350>)
 80079ec:	fba2 2303 	umull	r2, r3, r2, r3
 80079f0:	095b      	lsrs	r3, r3, #5
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079f8:	441c      	add	r4, r3
 80079fa:	f7fc fa6d 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 80079fe:	4602      	mov	r2, r0
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	009a      	lsls	r2, r3, #2
 8007a08:	441a      	add	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	fbb2 f5f3 	udiv	r5, r2, r3
 8007a14:	f7fc fa60 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009a      	lsls	r2, r3, #2
 8007a22:	441a      	add	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2e:	4a47      	ldr	r2, [pc, #284]	; (8007b4c <UART_SetConfig+0x350>)
 8007a30:	fba2 2303 	umull	r2, r3, r2, r3
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	2264      	movs	r2, #100	; 0x64
 8007a38:	fb02 f303 	mul.w	r3, r2, r3
 8007a3c:	1aeb      	subs	r3, r5, r3
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	3332      	adds	r3, #50	; 0x32
 8007a42:	4a42      	ldr	r2, [pc, #264]	; (8007b4c <UART_SetConfig+0x350>)
 8007a44:	fba2 2303 	umull	r2, r3, r2, r3
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	f003 0207 	and.w	r2, r3, #7
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4422      	add	r2, r4
 8007a54:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007a56:	e0e7      	b.n	8007c28 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a39      	ldr	r2, [pc, #228]	; (8007b44 <UART_SetConfig+0x348>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d004      	beq.n	8007a6c <UART_SetConfig+0x270>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a38      	ldr	r2, [pc, #224]	; (8007b48 <UART_SetConfig+0x34c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d171      	bne.n	8007b50 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007a6c:	f7fc fa56 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8007a70:	4602      	mov	r2, r0
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	009a      	lsls	r2, r3, #2
 8007a7a:	441a      	add	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a86:	4a31      	ldr	r2, [pc, #196]	; (8007b4c <UART_SetConfig+0x350>)
 8007a88:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	011c      	lsls	r4, r3, #4
 8007a90:	f7fc fa44 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8007a94:	4602      	mov	r2, r0
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009a      	lsls	r2, r3, #2
 8007a9e:	441a      	add	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	fbb2 f5f3 	udiv	r5, r2, r3
 8007aaa:	f7fc fa37 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009a      	lsls	r2, r3, #2
 8007ab8:	441a      	add	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac4:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <UART_SetConfig+0x350>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	2264      	movs	r2, #100	; 0x64
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	1aeb      	subs	r3, r5, r3
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	3332      	adds	r3, #50	; 0x32
 8007ad8:	4a1c      	ldr	r2, [pc, #112]	; (8007b4c <UART_SetConfig+0x350>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	095b      	lsrs	r3, r3, #5
 8007ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ae4:	441c      	add	r4, r3
 8007ae6:	f7fc fa19 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8007aea:	4602      	mov	r2, r0
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009a      	lsls	r2, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	fbb2 f5f3 	udiv	r5, r2, r3
 8007b00:	f7fc fa0c 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8007b04:	4602      	mov	r2, r0
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009a      	lsls	r2, r3, #2
 8007b0e:	441a      	add	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1a:	4a0c      	ldr	r2, [pc, #48]	; (8007b4c <UART_SetConfig+0x350>)
 8007b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	2264      	movs	r2, #100	; 0x64
 8007b24:	fb02 f303 	mul.w	r3, r2, r3
 8007b28:	1aeb      	subs	r3, r5, r3
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	3332      	adds	r3, #50	; 0x32
 8007b2e:	4a07      	ldr	r2, [pc, #28]	; (8007b4c <UART_SetConfig+0x350>)
 8007b30:	fba2 2303 	umull	r2, r3, r2, r3
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	f003 020f 	and.w	r2, r3, #15
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4422      	add	r2, r4
 8007b40:	609a      	str	r2, [r3, #8]
 8007b42:	e071      	b.n	8007c28 <UART_SetConfig+0x42c>
 8007b44:	40011000 	.word	0x40011000
 8007b48:	40011400 	.word	0x40011400
 8007b4c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007b50:	f7fc f9c2 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8007b54:	4602      	mov	r2, r0
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009a      	lsls	r2, r3, #2
 8007b5e:	441a      	add	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6a:	4a31      	ldr	r2, [pc, #196]	; (8007c30 <UART_SetConfig+0x434>)
 8007b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	011c      	lsls	r4, r3, #4
 8007b74:	f7fc f9b0 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009a      	lsls	r2, r3, #2
 8007b82:	441a      	add	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	fbb2 f5f3 	udiv	r5, r2, r3
 8007b8e:	f7fc f9a3 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8007b92:	4602      	mov	r2, r0
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009a      	lsls	r2, r3, #2
 8007b9c:	441a      	add	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba8:	4a21      	ldr	r2, [pc, #132]	; (8007c30 <UART_SetConfig+0x434>)
 8007baa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	2264      	movs	r2, #100	; 0x64
 8007bb2:	fb02 f303 	mul.w	r3, r2, r3
 8007bb6:	1aeb      	subs	r3, r5, r3
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	3332      	adds	r3, #50	; 0x32
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <UART_SetConfig+0x434>)
 8007bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bc8:	441c      	add	r4, r3
 8007bca:	f7fc f985 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009a      	lsls	r2, r3, #2
 8007bd8:	441a      	add	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	fbb2 f5f3 	udiv	r5, r2, r3
 8007be4:	f7fc f978 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8007be8:	4602      	mov	r2, r0
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009a      	lsls	r2, r3, #2
 8007bf2:	441a      	add	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfe:	4a0c      	ldr	r2, [pc, #48]	; (8007c30 <UART_SetConfig+0x434>)
 8007c00:	fba2 2303 	umull	r2, r3, r2, r3
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	2264      	movs	r2, #100	; 0x64
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
 8007c0c:	1aeb      	subs	r3, r5, r3
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	3332      	adds	r3, #50	; 0x32
 8007c12:	4a07      	ldr	r2, [pc, #28]	; (8007c30 <UART_SetConfig+0x434>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	f003 020f 	and.w	r2, r3, #15
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4422      	add	r2, r4
 8007c24:	609a      	str	r2, [r3, #8]
}
 8007c26:	e7ff      	b.n	8007c28 <UART_SetConfig+0x42c>
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007c30:	51eb851f 	.word	0x51eb851f

08007c34 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e016      	b.n	8007c74 <HAL_WWDG_Init+0x40>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f002 f8f2 	bl	8009e30 <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c58:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	ea42 0103 	orr.w	r1, r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689a      	ldr	r2, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <FMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c94:	60fb      	str	r3, [r7, #12]

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4b29      	ldr	r3, [pc, #164]	; (8007d40 <FMC_NORSRAM_Init+0xc4>)
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CPSIZE   | FMC_BCR1_CBURSTRW | \
                       FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007ca6:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 8007cac:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 8007cb2:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 8007cb8:	431a      	orrs	r2, r3
                    Init->WrapMode             |\
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	699b      	ldr	r3, [r3, #24]
                    Init->WaitSignalPolarity   |\
 8007cbe:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	69db      	ldr	r3, [r3, #28]
                    Init->WrapMode             |\
 8007cc4:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 8007cca:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 8007cd0:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 8007cd6:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 8007cdc:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->AsynchronousWait     |\
 8007ce2:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->PageSize             |\
 8007ce8:	431a      	orrs	r2, r3
                    Init->ContinuousClock);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 8007cee:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
                    Init->ContinuousClock      |\
                    Init->PageSize             |\
                    Init->WriteFifo);
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d103      	bne.n	8007d06 <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d04:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68f9      	ldr	r1, [r7, #12]
 8007d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1a:	d10a      	bne.n	8007d32 <FMC_NORSRAM_Init+0xb6>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d006      	beq.n	8007d32 <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	601a      	str	r2, [r3, #0]
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	ffe00080 	.word	0xffe00080

08007d44 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007d66:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8007d72:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 8007d7a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 8007d82:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8007d8c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	3b02      	subs	r3, #2
 8007d94:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8007d96:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6979      	ldr	r1, [r7, #20]
 8007dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00e      	beq.n	8007dda <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007dc4:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	051b      	lsls	r3, r3, #20
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e00:	d122      	bne.n	8007e48 <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0a:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e1e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007e26:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007e2e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007e34:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6979      	ldr	r1, [r7, #20]
 8007e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007e46:	e005      	b.n	8007e54 <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	cff00000 	.word	0xcff00000

08007e68 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007e68:	b084      	sub	sp, #16
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	f107 001c 	add.w	r0, r7, #28
 8007e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007e7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007e80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007e82:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007e86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007e8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007e8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007e92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007ea2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	b004      	add	sp, #16
 8007ebc:	4770      	bx	lr

08007ebe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2203      	movs	r2, #3
 8007f06:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0303 	and.w	r3, r3, #3
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f50:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007f56:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007f5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007f6c:	f023 030f 	bic.w	r3, r3, #15
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	b2db      	uxtb	r3, r3
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3314      	adds	r3, #20
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
}  
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ff0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007ff6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007ffc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	431a      	orrs	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008014:	2300      	movs	r3, #0

}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b088      	sub	sp, #32
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800802c:	2300      	movs	r3, #0
 800802e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008034:	2310      	movs	r3, #16
 8008036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008038:	2340      	movs	r3, #64	; 0x40
 800803a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800803c:	2300      	movs	r3, #0
 800803e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008044:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008046:	f107 0308 	add.w	r3, r7, #8
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ff70 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008052:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008056:	2110      	movs	r1, #16
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fa63 	bl	8008524 <SDMMC_GetCmdResp1>
 800805e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008060:	69fb      	ldr	r3, [r7, #28]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b088      	sub	sp, #32
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008074:	2300      	movs	r3, #0
 8008076:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800807c:	2311      	movs	r3, #17
 800807e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008080:	2340      	movs	r3, #64	; 0x40
 8008082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800808c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800808e:	f107 0308 	add.w	r3, r7, #8
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ff4c 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800809a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800809e:	2111      	movs	r1, #17
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fa3f 	bl	8008524 <SDMMC_GetCmdResp1>
 80080a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080a8:	69fb      	ldr	r3, [r7, #28]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3720      	adds	r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b088      	sub	sp, #32
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80080bc:	2300      	movs	r3, #0
 80080be:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80080c4:	2312      	movs	r3, #18
 80080c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080c8:	2340      	movs	r3, #64	; 0x40
 80080ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080d6:	f107 0308 	add.w	r3, r7, #8
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff ff28 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80080e2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80080e6:	2112      	movs	r1, #18
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fa1b 	bl	8008524 <SDMMC_GetCmdResp1>
 80080ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080f0:	69fb      	ldr	r3, [r7, #28]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b088      	sub	sp, #32
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008104:	2300      	movs	r3, #0
 8008106:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800810c:	2318      	movs	r3, #24
 800810e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008110:	2340      	movs	r3, #64	; 0x40
 8008112:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800811c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800811e:	f107 0308 	add.w	r3, r7, #8
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff ff04 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800812a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800812e:	2118      	movs	r1, #24
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f9f7 	bl	8008524 <SDMMC_GetCmdResp1>
 8008136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008138:	69fb      	ldr	r3, [r7, #28]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3720      	adds	r7, #32
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b088      	sub	sp, #32
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800814c:	2300      	movs	r3, #0
 800814e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008154:	2319      	movs	r3, #25
 8008156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008158:	2340      	movs	r3, #64	; 0x40
 800815a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800815c:	2300      	movs	r3, #0
 800815e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008164:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008166:	f107 0308 	add.w	r3, r7, #8
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff fee0 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008172:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008176:	2119      	movs	r1, #25
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f9d3 	bl	8008524 <SDMMC_GetCmdResp1>
 800817e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008180:	69fb      	ldr	r3, [r7, #28]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3720      	adds	r7, #32
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008194:	2300      	movs	r3, #0
 8008196:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800819c:	230c      	movs	r3, #12
 800819e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081a0:	2340      	movs	r3, #64	; 0x40
 80081a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ac:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081ae:	f107 0308 	add.w	r3, r7, #8
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff febc 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80081ba:	4a05      	ldr	r2, [pc, #20]	; (80081d0 <SDMMC_CmdStopTransfer+0x44>)
 80081bc:	210c      	movs	r1, #12
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f9b0 	bl	8008524 <SDMMC_GetCmdResp1>
 80081c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081c6:	69fb      	ldr	r3, [r7, #28]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	05f5e100 	.word	0x05f5e100

080081d4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80081e8:	2307      	movs	r3, #7
 80081ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081ec:	2340      	movs	r3, #64	; 0x40
 80081ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081f8:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081fa:	f107 0310 	add.w	r3, r7, #16
 80081fe:	4619      	mov	r1, r3
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff fe96 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008206:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800820a:	2107      	movs	r1, #7
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f989 	bl	8008524 <SDMMC_GetCmdResp1>
 8008212:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008216:	4618      	mov	r0, r3
 8008218:	3728      	adds	r7, #40	; 0x28
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b088      	sub	sp, #32
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008226:	2300      	movs	r3, #0
 8008228:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008232:	2300      	movs	r3, #0
 8008234:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008236:	2300      	movs	r3, #0
 8008238:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800823a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800823e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008240:	f107 0308 	add.w	r3, r7, #8
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff fe73 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f93f 	bl	80084d0 <SDMMC_GetCmdError>
 8008252:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008254:	69fb      	ldr	r3, [r7, #28]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3720      	adds	r7, #32
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b088      	sub	sp, #32
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008266:	2300      	movs	r3, #0
 8008268:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800826a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800826e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008270:	2308      	movs	r3, #8
 8008272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008274:	2340      	movs	r3, #64	; 0x40
 8008276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008278:	2300      	movs	r3, #0
 800827a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800827c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008280:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008282:	f107 0308 	add.w	r3, r7, #8
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff fe52 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fb10 	bl	80088b4 <SDMMC_GetCmdResp7>
 8008294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008296:	69fb      	ldr	r3, [r7, #28]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80082b2:	2337      	movs	r3, #55	; 0x37
 80082b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082b6:	2340      	movs	r3, #64	; 0x40
 80082b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082ba:	2300      	movs	r3, #0
 80082bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082c4:	f107 0308 	add.w	r3, r7, #8
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff fe31 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80082d0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80082d4:	2137      	movs	r1, #55	; 0x37
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f924 	bl	8008524 <SDMMC_GetCmdResp1>
 80082dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082de:	69fb      	ldr	r3, [r7, #28]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3720      	adds	r7, #32
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008302:	2329      	movs	r3, #41	; 0x29
 8008304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008306:	2340      	movs	r3, #64	; 0x40
 8008308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800830a:	2300      	movs	r3, #0
 800830c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800830e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008312:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008314:	f107 0308 	add.w	r3, r7, #8
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff fe09 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fa25 	bl	8008770 <SDMMC_GetCmdResp3>
 8008326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008328:	69fb      	ldr	r3, [r7, #28]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3720      	adds	r7, #32
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b088      	sub	sp, #32
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800833c:	2300      	movs	r3, #0
 800833e:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008344:	2306      	movs	r3, #6
 8008346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008348:	2340      	movs	r3, #64	; 0x40
 800834a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800834c:	2300      	movs	r3, #0
 800834e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008354:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008356:	f107 0308 	add.w	r3, r7, #8
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff fde8 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008362:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008366:	2106      	movs	r1, #6
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f8db 	bl	8008524 <SDMMC_GetCmdResp1>
 800836e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008370:	69fb      	ldr	r3, [r7, #28]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b088      	sub	sp, #32
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008382:	2300      	movs	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800838a:	2333      	movs	r3, #51	; 0x33
 800838c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800838e:	2340      	movs	r3, #64	; 0x40
 8008390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800839a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fdc5 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80083a8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80083ac:	2133      	movs	r1, #51	; 0x33
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f8b8 	bl	8008524 <SDMMC_GetCmdResp1>
 80083b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083b6:	69fb      	ldr	r3, [r7, #28]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3720      	adds	r7, #32
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80083c8:	2300      	movs	r3, #0
 80083ca:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80083d0:	2302      	movs	r3, #2
 80083d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80083d4:	23c0      	movs	r3, #192	; 0xc0
 80083d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083e2:	f107 0308 	add.w	r3, r7, #8
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff fda2 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f97e 	bl	80086f0 <SDMMC_GetCmdResp2>
 80083f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083f6:	69fb      	ldr	r3, [r7, #28]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800840a:	2300      	movs	r3, #0
 800840c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008412:	2309      	movs	r3, #9
 8008414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008416:	23c0      	movs	r3, #192	; 0xc0
 8008418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800841a:	2300      	movs	r3, #0
 800841c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800841e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008422:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff fd81 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f95d 	bl	80086f0 <SDMMC_GetCmdResp2>
 8008436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008438:	69fb      	ldr	r3, [r7, #28]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b088      	sub	sp, #32
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800844c:	2300      	movs	r3, #0
 800844e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008454:	2303      	movs	r3, #3
 8008456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008458:	2340      	movs	r3, #64	; 0x40
 800845a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800845c:	2300      	movs	r3, #0
 800845e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008464:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008466:	f107 0308 	add.w	r3, r7, #8
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fd60 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	2103      	movs	r1, #3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9ae 	bl	80087d8 <SDMMC_GetCmdResp6>
 800847c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800847e:	69fb      	ldr	r3, [r7, #28]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3720      	adds	r7, #32
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800849a:	230d      	movs	r3, #13
 800849c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800849e:	2340      	movs	r3, #64	; 0x40
 80084a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084aa:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084ac:	f107 0308 	add.w	r3, r7, #8
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff fd3d 	bl	8007f32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80084b8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80084bc:	210d      	movs	r1, #13
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f830 	bl	8008524 <SDMMC_GetCmdResp1>
 80084c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084c6:	69fb      	ldr	r3, [r7, #28]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3720      	adds	r7, #32
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80084d0:	b490      	push	{r4, r7}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084d8:	4b10      	ldr	r3, [pc, #64]	; (800851c <SDMMC_GetCmdError+0x4c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a10      	ldr	r2, [pc, #64]	; (8008520 <SDMMC_GetCmdError+0x50>)
 80084de:	fba2 2303 	umull	r2, r3, r2, r3
 80084e2:	0a5b      	lsrs	r3, r3, #9
 80084e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80084e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80084ec:	4623      	mov	r3, r4
 80084ee:	1e5c      	subs	r4, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d102      	bne.n	80084fa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084f8:	e00a      	b.n	8008510 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0f2      	beq.n	80084ec <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800850c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bc90      	pop	{r4, r7}
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20000010 	.word	0x20000010
 8008520:	10624dd3 	.word	0x10624dd3

08008524 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	460b      	mov	r3, r1
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008532:	4b6c      	ldr	r3, [pc, #432]	; (80086e4 <SDMMC_GetCmdResp1+0x1c0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a6c      	ldr	r2, [pc, #432]	; (80086e8 <SDMMC_GetCmdResp1+0x1c4>)
 8008538:	fba2 2303 	umull	r2, r3, r2, r3
 800853c:	0a5b      	lsrs	r3, r3, #9
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008544:	4623      	mov	r3, r4
 8008546:	1e5c      	subs	r4, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d102      	bne.n	8008552 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800854c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008550:	e0c3      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008556:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0f2      	beq.n	8008544 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	d004      	beq.n	8008574 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2204      	movs	r2, #4
 800856e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008570:	2304      	movs	r3, #4
 8008572:	e0b2      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d004      	beq.n	800858a <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2201      	movs	r2, #1
 8008584:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008586:	2301      	movs	r3, #1
 8008588:	e0a7      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff fcfb 	bl	8007f86 <SDIO_GetCommandResponse>
 8008590:	4603      	mov	r3, r0
 8008592:	461a      	mov	r2, r3
 8008594:	7afb      	ldrb	r3, [r7, #11]
 8008596:	4293      	cmp	r3, r2
 8008598:	d001      	beq.n	800859e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800859a:	2301      	movs	r3, #1
 800859c:	e09d      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80085a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80085a6:	2100      	movs	r1, #0
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff fcf9 	bl	8007fa0 <SDIO_GetResponse>
 80085ae:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4b4e      	ldr	r3, [pc, #312]	; (80086ec <SDMMC_GetCmdResp1+0x1c8>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80085ba:	2300      	movs	r3, #0
 80085bc:	e08d      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	da02      	bge.n	80085ca <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80085c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085c8:	e087      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80085d4:	2340      	movs	r3, #64	; 0x40
 80085d6:	e080      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80085e2:	2380      	movs	r3, #128	; 0x80
 80085e4:	e079      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80085f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085f4:	e071      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008604:	e069      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008614:	e061      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008624:	e059      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008634:	e051      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008644:	e049      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008654:	e041      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8008660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008664:	e039      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008674:	e031      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008680:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008684:	e029      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008690:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008694:	e021      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80086a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086a4:	e019      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80086b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086b4:	e011      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80086c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80086c4:	e009      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f003 0308 	and.w	r3, r3, #8
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80086d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80086d4:	e001      	b.n	80086da <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80086d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80086da:	4618      	mov	r0, r3
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd90      	pop	{r4, r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20000010 	.word	0x20000010
 80086e8:	10624dd3 	.word	0x10624dd3
 80086ec:	fdffe008 	.word	0xfdffe008

080086f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80086f0:	b490      	push	{r4, r7}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086f8:	4b1b      	ldr	r3, [pc, #108]	; (8008768 <SDMMC_GetCmdResp2+0x78>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a1b      	ldr	r2, [pc, #108]	; (800876c <SDMMC_GetCmdResp2+0x7c>)
 80086fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008702:	0a5b      	lsrs	r3, r3, #9
 8008704:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008708:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800870c:	4623      	mov	r3, r4
 800870e:	1e5c      	subs	r4, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008714:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008718:	e020      	b.n	800875c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0f2      	beq.n	800870c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d004      	beq.n	800873c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2204      	movs	r2, #4
 8008736:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008738:	2304      	movs	r3, #4
 800873a:	e00f      	b.n	800875c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800874e:	2301      	movs	r3, #1
 8008750:	e004      	b.n	800875c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008758:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bc90      	pop	{r4, r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000010 	.word	0x20000010
 800876c:	10624dd3 	.word	0x10624dd3

08008770 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008770:	b490      	push	{r4, r7}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <SDMMC_GetCmdResp3+0x60>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a15      	ldr	r2, [pc, #84]	; (80087d4 <SDMMC_GetCmdResp3+0x64>)
 800877e:	fba2 2303 	umull	r2, r3, r2, r3
 8008782:	0a5b      	lsrs	r3, r3, #9
 8008784:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008788:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800878c:	4623      	mov	r3, r4
 800878e:	1e5c      	subs	r4, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d102      	bne.n	800879a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008798:	e015      	b.n	80087c6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0f2      	beq.n	800878c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087aa:	f003 0304 	and.w	r3, r3, #4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d004      	beq.n	80087bc <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2204      	movs	r2, #4
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087b8:	2304      	movs	r3, #4
 80087ba:	e004      	b.n	80087c6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80087c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc90      	pop	{r4, r7}
 80087ce:	4770      	bx	lr
 80087d0:	20000010 	.word	0x20000010
 80087d4:	10624dd3 	.word	0x10624dd3

080087d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	460b      	mov	r3, r1
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087e6:	4b31      	ldr	r3, [pc, #196]	; (80088ac <SDMMC_GetCmdResp6+0xd4>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a31      	ldr	r2, [pc, #196]	; (80088b0 <SDMMC_GetCmdResp6+0xd8>)
 80087ec:	fba2 2303 	umull	r2, r3, r2, r3
 80087f0:	0a5b      	lsrs	r3, r3, #9
 80087f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80087f6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80087fa:	4623      	mov	r3, r4
 80087fc:	1e5c      	subs	r4, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d102      	bne.n	8008808 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008802:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008806:	e04c      	b.n	80088a2 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0f2      	beq.n	80087fa <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b00      	cmp	r3, #0
 800881e:	d004      	beq.n	800882a <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2204      	movs	r2, #4
 8008824:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008826:	2304      	movs	r3, #4
 8008828:	e03b      	b.n	80088a2 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800883c:	2301      	movs	r3, #1
 800883e:	e030      	b.n	80088a2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f7ff fba0 	bl	8007f86 <SDIO_GetCommandResponse>
 8008846:	4603      	mov	r3, r0
 8008848:	461a      	mov	r2, r3
 800884a:	7afb      	ldrb	r3, [r7, #11]
 800884c:	4293      	cmp	r3, r2
 800884e:	d001      	beq.n	8008854 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008850:	2301      	movs	r3, #1
 8008852:	e026      	b.n	80088a2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800885c:	2100      	movs	r1, #0
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f7ff fb9e 	bl	8007fa0 <SDIO_GetResponse>
 8008864:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d106      	bne.n	800887e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	0c1b      	lsrs	r3, r3, #16
 8008874:	b29a      	uxth	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800887a:	2300      	movs	r3, #0
 800887c:	e011      	b.n	80088a2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800888c:	e009      	b.n	80088a2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800889c:	e001      	b.n	80088a2 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800889e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd90      	pop	{r4, r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000010 	.word	0x20000010
 80088b0:	10624dd3 	.word	0x10624dd3

080088b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80088b4:	b490      	push	{r4, r7}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088bc:	4b18      	ldr	r3, [pc, #96]	; (8008920 <SDMMC_GetCmdResp7+0x6c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a18      	ldr	r2, [pc, #96]	; (8008924 <SDMMC_GetCmdResp7+0x70>)
 80088c2:	fba2 2303 	umull	r2, r3, r2, r3
 80088c6:	0a5b      	lsrs	r3, r3, #9
 80088c8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80088cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80088d0:	4623      	mov	r3, r4
 80088d2:	1e5c      	subs	r4, r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d102      	bne.n	80088de <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088dc:	e01a      	b.n	8008914 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0f2      	beq.n	80088d0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2240      	movs	r2, #64	; 0x40
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088fc:	2304      	movs	r3, #4
 80088fe:	e009      	b.n	8008914 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2240      	movs	r2, #64	; 0x40
 8008910:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008912:	2300      	movs	r3, #0
  
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bc90      	pop	{r4, r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	20000010 	.word	0x20000010
 8008924:	10624dd3 	.word	0x10624dd3

08008928 <HAL_UART_ErrorCallback>:

	return ch;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
    if( huart == &huart1 )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a16      	ldr	r2, [pc, #88]	; (800898c <HAL_UART_ErrorCallback+0x64>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d109      	bne.n	800894c <HAL_UART_ErrorCallback+0x24>
    {
        MX_USART1_UART_Init();
 8008938:	f000 fcd2 	bl	80092e0 <MX_USART1_UART_Init>
        HAL_UART_Receive_IT((UART_HandleTypeDef*)COMM, (uint8_t *)&rx_data_dummy, 1);
 800893c:	4b14      	ldr	r3, [pc, #80]	; (8008990 <HAL_UART_ErrorCallback+0x68>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2201      	movs	r2, #1
 8008942:	4914      	ldr	r1, [pc, #80]	; (8008994 <HAL_UART_ErrorCallback+0x6c>)
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe fcf7 	bl	8007338 <HAL_UART_Receive_IT>
    }else if( huart == &huart6 )
    {
        MX_USART6_UART_Init();
        HAL_UART_Receive_IT((UART_HandleTypeDef*)SYSCON, (uint8_t *)&rx_data_dummy, 1);
    }
}
 800894a:	e01a      	b.n	8008982 <HAL_UART_ErrorCallback+0x5a>
    }else if( huart == &huart4 )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a12      	ldr	r2, [pc, #72]	; (8008998 <HAL_UART_ErrorCallback+0x70>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d109      	bne.n	8008968 <HAL_UART_ErrorCallback+0x40>
        MX_UART4_Init();
 8008954:	f000 fc9a 	bl	800928c <MX_UART4_Init>
        HAL_UART_Receive_IT((UART_HandleTypeDef*)PAYLOAD, (uint8_t *)&rx_data_dummy, 1);
 8008958:	4b10      	ldr	r3, [pc, #64]	; (800899c <HAL_UART_ErrorCallback+0x74>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2201      	movs	r2, #1
 800895e:	490d      	ldr	r1, [pc, #52]	; (8008994 <HAL_UART_ErrorCallback+0x6c>)
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fce9 	bl	8007338 <HAL_UART_Receive_IT>
}
 8008966:	e00c      	b.n	8008982 <HAL_UART_ErrorCallback+0x5a>
    }else if( huart == &huart6 )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a0d      	ldr	r2, [pc, #52]	; (80089a0 <HAL_UART_ErrorCallback+0x78>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d108      	bne.n	8008982 <HAL_UART_ErrorCallback+0x5a>
        MX_USART6_UART_Init();
 8008970:	f000 fce0 	bl	8009334 <MX_USART6_UART_Init>
        HAL_UART_Receive_IT((UART_HandleTypeDef*)SYSCON, (uint8_t *)&rx_data_dummy, 1);
 8008974:	4b0b      	ldr	r3, [pc, #44]	; (80089a4 <HAL_UART_ErrorCallback+0x7c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2201      	movs	r2, #1
 800897a:	4906      	ldr	r1, [pc, #24]	; (8008994 <HAL_UART_ErrorCallback+0x6c>)
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fcdb 	bl	8007338 <HAL_UART_Receive_IT>
}
 8008982:	bf00      	nop
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20001f5c 	.word	0x20001f5c
 8008990:	20000000 	.word	0x20000000
 8008994:	20000aa0 	.word	0x20000aa0
 8008998:	200020f8 	.word	0x200020f8
 800899c:	20000004 	.word	0x20000004
 80089a0:	200020b8 	.word	0x200020b8
 80089a4:	20000008 	.word	0x20000008

080089a8 <SystemClock_Config>:
*/

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b0a0      	sub	sp, #128	; 0x80
 80089ac:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80089ae:	2300      	movs	r3, #0
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	4b3b      	ldr	r3, [pc, #236]	; (8008aa0 <SystemClock_Config+0xf8>)
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	4a3a      	ldr	r2, [pc, #232]	; (8008aa0 <SystemClock_Config+0xf8>)
 80089b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089bc:	6413      	str	r3, [r2, #64]	; 0x40
 80089be:	4b38      	ldr	r3, [pc, #224]	; (8008aa0 <SystemClock_Config+0xf8>)
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089c6:	60bb      	str	r3, [r7, #8]
 80089c8:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80089ca:	2300      	movs	r3, #0
 80089cc:	607b      	str	r3, [r7, #4]
 80089ce:	4b35      	ldr	r3, [pc, #212]	; (8008aa4 <SystemClock_Config+0xfc>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80089d6:	4a33      	ldr	r2, [pc, #204]	; (8008aa4 <SystemClock_Config+0xfc>)
 80089d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	4b31      	ldr	r3, [pc, #196]	; (8008aa4 <SystemClock_Config+0xfc>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089e6:	607b      	str	r3, [r7, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80089ea:	2305      	movs	r3, #5
 80089ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80089ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80089f4:	2301      	movs	r3, #1
 80089f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80089f8:	2302      	movs	r3, #2
 80089fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80089fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a00:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008a02:	2310      	movs	r3, #16
 8008a04:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008a06:	23c0      	movs	r3, #192	; 0xc0
 8008a08:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008a0e:	2304      	movs	r3, #4
 8008a10:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fa fe6a 	bl	80036f0 <HAL_RCC_OscConfig>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8008a22:	f7f9 f8b3 	bl	8001b8c <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a26:	230f      	movs	r3, #15
 8008a28:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008a32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008a3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008a42:	2103      	movs	r1, #3
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fb f8ad 	bl	8003ba4 <HAL_RCC_ClockConfig>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008a50:	f7f9 f89c 	bl	8001b8c <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008a54:	2320      	movs	r3, #32
 8008a56:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a5e:	f107 030c 	add.w	r3, r7, #12
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fb faae 	bl	8003fc4 <HAL_RCCEx_PeriphCLKConfig>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8008a6e:	f7f9 f88d 	bl	8001b8c <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008a72:	f7fb fa25 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8008a76:	4602      	mov	r2, r0
 8008a78:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <SystemClock_Config+0x100>)
 8008a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a7e:	099b      	lsrs	r3, r3, #6
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7f9 fb80 	bl	8002186 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008a86:	2004      	movs	r0, #4
 8008a88:	f7f9 fb8a 	bl	80021a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	210f      	movs	r1, #15
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a94:	f7f9 fb4d 	bl	8002132 <HAL_NVIC_SetPriority>
}
 8008a98:	bf00      	nop
 8008a9a:	3780      	adds	r7, #128	; 0x80
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	40007000 	.word	0x40007000
 8008aa8:	10624dd3 	.word	0x10624dd3

08008aac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08e      	sub	sp, #56	; 0x38
 8008ab0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	623b      	str	r3, [r7, #32]
 8008ab6:	4bb2      	ldr	r3, [pc, #712]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aba:	4ab1      	ldr	r2, [pc, #708]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008abc:	f043 0310 	orr.w	r3, r3, #16
 8008ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ac2:	4baf      	ldr	r3, [pc, #700]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	f003 0310 	and.w	r3, r3, #16
 8008aca:	623b      	str	r3, [r7, #32]
 8008acc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61fb      	str	r3, [r7, #28]
 8008ad2:	4bab      	ldr	r3, [pc, #684]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	4aaa      	ldr	r2, [pc, #680]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008adc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ade:	4ba8      	ldr	r3, [pc, #672]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008aea:	2300      	movs	r3, #0
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	4ba4      	ldr	r3, [pc, #656]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af2:	4aa3      	ldr	r2, [pc, #652]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008af4:	f043 0304 	orr.w	r3, r3, #4
 8008af8:	6313      	str	r3, [r2, #48]	; 0x30
 8008afa:	4ba1      	ldr	r3, [pc, #644]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	61bb      	str	r3, [r7, #24]
 8008b04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	4b9d      	ldr	r3, [pc, #628]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0e:	4a9c      	ldr	r2, [pc, #624]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b10:	f043 0320 	orr.w	r3, r3, #32
 8008b14:	6313      	str	r3, [r2, #48]	; 0x30
 8008b16:	4b9a      	ldr	r3, [pc, #616]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008b22:	2300      	movs	r3, #0
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	4b96      	ldr	r3, [pc, #600]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2a:	4a95      	ldr	r2, [pc, #596]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b30:	6313      	str	r3, [r2, #48]	; 0x30
 8008b32:	4b93      	ldr	r3, [pc, #588]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3a:	613b      	str	r3, [r7, #16]
 8008b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	4b8f      	ldr	r3, [pc, #572]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b46:	4a8e      	ldr	r2, [pc, #568]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b48:	f043 0301 	orr.w	r3, r3, #1
 8008b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b4e:	4b8c      	ldr	r3, [pc, #560]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60bb      	str	r3, [r7, #8]
 8008b5e:	4b88      	ldr	r3, [pc, #544]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	4a87      	ldr	r2, [pc, #540]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b64:	f043 0302 	orr.w	r3, r3, #2
 8008b68:	6313      	str	r3, [r2, #48]	; 0x30
 8008b6a:	4b85      	ldr	r3, [pc, #532]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	60bb      	str	r3, [r7, #8]
 8008b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008b76:	2300      	movs	r3, #0
 8008b78:	607b      	str	r3, [r7, #4]
 8008b7a:	4b81      	ldr	r3, [pc, #516]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7e:	4a80      	ldr	r2, [pc, #512]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b84:	6313      	str	r3, [r2, #48]	; 0x30
 8008b86:	4b7e      	ldr	r3, [pc, #504]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8e:	607b      	str	r3, [r7, #4]
 8008b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b92:	2300      	movs	r3, #0
 8008b94:	603b      	str	r3, [r7, #0]
 8008b96:	4b7a      	ldr	r3, [pc, #488]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	4a79      	ldr	r2, [pc, #484]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008b9c:	f043 0308 	orr.w	r3, r3, #8
 8008ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ba2:	4b77      	ldr	r3, [pc, #476]	; (8008d80 <MX_GPIO_Init+0x2d4>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	f003 0308 	and.w	r3, r3, #8
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAN4_VGY_GPIO_Port, PAN4_VGY_Pin, GPIO_PIN_RESET);
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	4874      	ldr	r0, [pc, #464]	; (8008d84 <MX_GPIO_Init+0x2d8>)
 8008bb4:	f7f9 fe6c 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin, GPIO_PIN_SET);
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f242 0130 	movw	r1, #8240	; 0x2030
 8008bbe:	4872      	ldr	r0, [pc, #456]	; (8008d88 <MX_GPIO_Init+0x2dc>)
 8008bc0:	f7f9 fe66 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f640 61ff 	movw	r1, #3839	; 0xeff
 8008bca:	4870      	ldr	r0, [pc, #448]	; (8008d8c <MX_GPIO_Init+0x2e0>)
 8008bcc:	f7f9 fe60 	bl	8002890 <HAL_GPIO_WritePin>
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBAND_CS_GPIO_Port, SBAND_CS_Pin, GPIO_PIN_RESET);
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2140      	movs	r1, #64	; 0x40
 8008bd4:	486e      	ldr	r0, [pc, #440]	; (8008d90 <MX_GPIO_Init+0x2e4>)
 8008bd6:	f7f9 fe5b 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f24e 217c 	movw	r1, #57980	; 0xe27c
 8008be0:	486c      	ldr	r0, [pc, #432]	; (8008d94 <MX_GPIO_Init+0x2e8>)
 8008be2:	f7f9 fe55 	bl	8002890 <HAL_GPIO_WritePin>
  // Turn-off the second MAG sensor due lack of I2C arbitration MAG1/MAG2
  HAL_GPIO_WritePin(GPIOH, MAG1_EN_Pin|MAG2_EN_Pin, GPIO_PIN_SET);
#endif

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8008be6:	2201      	movs	r2, #1
 8008be8:	2110      	movs	r1, #16
 8008bea:	486b      	ldr	r0, [pc, #428]	; (8008d98 <MX_GPIO_Init+0x2ec>)
 8008bec:	f7f9 fe50 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	21e6      	movs	r1, #230	; 0xe6
 8008bf4:	4869      	ldr	r0, [pc, #420]	; (8008d9c <MX_GPIO_Init+0x2f0>)
 8008bf6:	f7f9 fe4b 	bl	8002890 <HAL_GPIO_WritePin>
                          |PAN3_VGY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8008c00:	4867      	ldr	r0, [pc, #412]	; (8008da0 <MX_GPIO_Init+0x2f4>)
 8008c02:	f7f9 fe45 	bl	8002890 <HAL_GPIO_WritePin>
                          |OBC_OUT2_Pin|OBC_OUT1_Pin, GPIO_PIN_RESET);

  /* Camera power supply disable by default */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT1_Pin, GPIO_PIN_RESET);
 8008c06:	2200      	movs	r2, #0
 8008c08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c0c:	4864      	ldr	r0, [pc, #400]	; (8008da0 <MX_GPIO_Init+0x2f4>)
 8008c0e:	f7f9 fe3f 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_EN_Pin|OBC_OUT4_Pin, GPIO_PIN_RESET);
 8008c12:	2200      	movs	r2, #0
 8008c14:	2148      	movs	r1, #72	; 0x48
 8008c16:	4863      	ldr	r0, [pc, #396]	; (8008da4 <MX_GPIO_Init+0x2f8>)
 8008c18:	f7f9 fe3a 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PAN4_VGY_Pin */
  GPIO_InitStruct.Pin = PAN4_VGY_Pin;
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008c20:	2311      	movs	r3, #17
 8008c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN4_VGY_GPIO_Port, &GPIO_InitStruct);
 8008c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c30:	4619      	mov	r1, r3
 8008c32:	4854      	ldr	r0, [pc, #336]	; (8008d84 <MX_GPIO_Init+0x2d8>)
 8008c34:	f7f9 fc82 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IRQ_Pin */
  GPIO_InitStruct.Pin = M2_IRQ_Pin;
 8008c38:	2340      	movs	r3, #64	; 0x40
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c3c:	4b5a      	ldr	r3, [pc, #360]	; (8008da8 <MX_GPIO_Init+0x2fc>)
 8008c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c48:	4619      	mov	r1, r3
 8008c4a:	484e      	ldr	r0, [pc, #312]	; (8008d84 <MX_GPIO_Init+0x2d8>)
 8008c4c:	f7f9 fc76 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IRQ_Pin */
  GPIO_InitStruct.Pin = M1_IRQ_Pin;
 8008c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c56:	4b54      	ldr	r3, [pc, #336]	; (8008da8 <MX_GPIO_Init+0x2fc>)
 8008c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c62:	4619      	mov	r1, r3
 8008c64:	4849      	ldr	r0, [pc, #292]	; (8008d8c <MX_GPIO_Init+0x2e0>)
 8008c66:	f7f9 fc69 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS2_Pin LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin;
 8008c6a:	f242 0330 	movw	r3, #8240	; 0x2030
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c70:	2301      	movs	r3, #1
 8008c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c74:	2300      	movs	r3, #0
 8008c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c80:	4619      	mov	r1, r3
 8008c82:	4841      	ldr	r0, [pc, #260]	; (8008d88 <MX_GPIO_Init+0x2dc>)
 8008c84:	f7f9 fc5a 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS1_Pin PAN6_CS2_Pin PAN6_CS1_Pin PAN1_CS2_Pin
                           PAN1_CS1_Pin PAN2_CS2_Pin PAN2_CS1_Pin PAN3_CS2_Pin
                           PAN3_CS1_Pin PAN4_CS2_Pin PAN4_CS1_Pin */
  GPIO_InitStruct.Pin = PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8008c88:	f640 63ff 	movw	r3, #3839	; 0xeff
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c96:	2300      	movs	r3, #0
 8008c98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	483a      	ldr	r0, [pc, #232]	; (8008d8c <MX_GPIO_Init+0x2e0>)
 8008ca2:	f7f9 fc4b 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_CS_Pin */
  GPIO_InitStruct.Pin = SBAND_CS_Pin;
 8008ca6:	2340      	movs	r3, #64	; 0x40
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008caa:	2301      	movs	r3, #1
 8008cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SBAND_CS_GPIO_Port, &GPIO_InitStruct);
 8008cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4834      	ldr	r0, [pc, #208]	; (8008d90 <MX_GPIO_Init+0x2e4>)
 8008cbe:	f7f9 fc3d 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_IRQ_Pin */
  GPIO_InitStruct.Pin = SBAND_IRQ_Pin;
 8008cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008cc8:	4b37      	ldr	r3, [pc, #220]	; (8008da8 <MX_GPIO_Init+0x2fc>)
 8008cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SBAND_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	482e      	ldr	r0, [pc, #184]	; (8008d90 <MX_GPIO_Init+0x2e4>)
 8008cd8:	f7f9 fc30 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_DIR1_Pin PAN5_DIR2_Pin PAN6_DIR1_Pin PAN6_DIR2_Pin
                           ACC1_EN_Pin ACC2_EN_Pin MAG1_EN_Pin MAG2_EN_Pin
                           PAN4_DIR2_Pin */
  GPIO_InitStruct.Pin = PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8008cdc:	f24e 033c 	movw	r3, #57404	; 0xe03c
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
                          |MAG1_EN_Pin|MAG2_EN_Pin
                          |PAN4_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cea:	2300      	movs	r3, #0
 8008cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4827      	ldr	r0, [pc, #156]	; (8008d94 <MX_GPIO_Init+0x2e8>)
 8008cf6:	f7f9 fc21 	bl	800253c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACC1_EN_Pin|ACC2_EN_Pin;
 8008cfa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008d00:	2311      	movs	r3, #17
 8008d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d10:	4619      	mov	r1, r3
 8008d12:	4820      	ldr	r0, [pc, #128]	; (8008d94 <MX_GPIO_Init+0x2e8>)
 8008d14:	f7f9 fc12 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8008d18:	2310      	movs	r3, #16
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d24:	2300      	movs	r3, #0
 8008d26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	481a      	ldr	r0, [pc, #104]	; (8008d98 <MX_GPIO_Init+0x2ec>)
 8008d30:	f7f9 fc04 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_VGY_Pin PAN6_VGY_Pin PAN1_VGY_Pin PAN2_VGY_Pin
                           PAN3_VGY_Pin */
  GPIO_InitStruct.Pin = PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8008d34:	23e6      	movs	r3, #230	; 0xe6
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN3_VGY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008d38:	2311      	movs	r3, #17
 8008d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d40:	2300      	movs	r3, #0
 8008d42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4814      	ldr	r0, [pc, #80]	; (8008d9c <MX_GPIO_Init+0x2f0>)
 8008d4c:	f7f9 fbf6 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : OBC_OUT5_Pin PAN4_DIR1_Pin FLASH_NCS_Pin OBC_OUT3_Pin
                           OBC_OUT2_Pin OBC_OUT1_Pin */
  GPIO_InitStruct.Pin = OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8008d50:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
                          |OBC_OUT2_Pin|OBC_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d56:	2301      	movs	r3, #1
 8008d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d66:	4619      	mov	r1, r3
 8008d68:	480d      	ldr	r0, [pc, #52]	; (8008da0 <MX_GPIO_Init+0x2f4>)
 8008d6a:	f7f9 fbe7 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_EN_Pin OBC_OUT4_Pin */
  GPIO_InitStruct.Pin = SD_EN_Pin|OBC_OUT4_Pin;
 8008d6e:	2348      	movs	r3, #72	; 0x48
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d72:	2301      	movs	r3, #1
 8008d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e016      	b.n	8008dac <MX_GPIO_Init+0x300>
 8008d7e:	bf00      	nop
 8008d80:	40023800 	.word	0x40023800
 8008d84:	40021000 	.word	0x40021000
 8008d88:	40020800 	.word	0x40020800
 8008d8c:	40022000 	.word	0x40022000
 8008d90:	40021400 	.word	0x40021400
 8008d94:	40021c00 	.word	0x40021c00
 8008d98:	40020000 	.word	0x40020000
 8008d9c:	40020400 	.word	0x40020400
 8008da0:	40021800 	.word	0x40021800
 8008da4:	40020c00 	.word	0x40020c00
 8008da8:	10110000 	.word	0x10110000
 8008dac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008db2:	4619      	mov	r1, r3
 8008db4:	4809      	ldr	r0, [pc, #36]	; (8008ddc <MX_GPIO_Init+0x330>)
 8008db6:	f7f9 fbc1 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8008dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8008dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4804      	ldr	r0, [pc, #16]	; (8008de0 <MX_GPIO_Init+0x334>)
 8008dd0:	f7f9 fbb4 	bl	800253c <HAL_GPIO_Init>

}
 8008dd4:	bf00      	nop
 8008dd6:	3738      	adds	r7, #56	; 0x38
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	40020c00 	.word	0x40020c00
 8008de0:	40021800 	.word	0x40021800

08008de4 <MX_ADC1_Init>:

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
  /*Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)*/
  hadc1.Instance = ADC1;
 8008de8:	4b18      	ldr	r3, [pc, #96]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008dea:	4a19      	ldr	r2, [pc, #100]	; (8008e50 <MX_ADC1_Init+0x6c>)
 8008dec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008dee:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008df4:	4b15      	ldr	r3, [pc, #84]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008dfa:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008e00:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008e06:	4b11      	ldr	r3, [pc, #68]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008e0c:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008e12:	4b0e      	ldr	r3, [pc, #56]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e14:	4a0f      	ldr	r2, [pc, #60]	; (8008e54 <MX_ADC1_Init+0x70>)
 8008e16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008e18:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008e1e:	4b0b      	ldr	r3, [pc, #44]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e20:	2201      	movs	r2, #1
 8008e22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008e2a:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008e30:	4806      	ldr	r0, [pc, #24]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e32:	f7f8 ff2a 	bl	8001c8a <HAL_ADC_Init>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 8008e3c:	f7f8 fea6 	bl	8001b8c <Error_Handler>
  }
  HAL_ADC_Stop(&hadc1);
 8008e40:	4802      	ldr	r0, [pc, #8]	; (8008e4c <MX_ADC1_Init+0x68>)
 8008e42:	f7f8 ff65 	bl	8001d10 <HAL_ADC_Stop>
}
 8008e46:	bf00      	nop
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20001f14 	.word	0x20001f14
 8008e50:	40012000 	.word	0x40012000
 8008e54:	0f000001 	.word	0x0f000001

08008e58 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef Timing;

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8008e5e:	4b28      	ldr	r3, [pc, #160]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e60:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8008e64:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8008e66:	4b26      	ldr	r3, [pc, #152]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e68:	4a26      	ldr	r2, [pc, #152]	; (8008f04 <MX_FMC_Init+0xac>)
 8008e6a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8008e6c:	4b24      	ldr	r3, [pc, #144]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8008e72:	4b23      	ldr	r3, [pc, #140]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8008e78:	4b21      	ldr	r3, [pc, #132]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8008e7e:	4b20      	ldr	r3, [pc, #128]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e80:	2210      	movs	r2, #16
 8008e82:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8008e84:	4b1e      	ldr	r3, [pc, #120]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8008e8a:	4b1d      	ldr	r3, [pc, #116]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 8008e90:	4b1b      	ldr	r3, [pc, #108]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8008e96:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8008e9c:	4b18      	ldr	r3, [pc, #96]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8008ea2:	4b17      	ldr	r3, [pc, #92]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8008ea8:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8008eae:	4b14      	ldr	r3, [pc, #80]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8008eb4:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8008eba:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8008ec6:	230f      	movs	r3, #15
 8008ec8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8008eca:	230f      	movs	r3, #15
 8008ecc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8008ece:	23ff      	movs	r3, #255	; 0xff
 8008ed0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8008ed2:	230f      	movs	r3, #15
 8008ed4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8008ed6:	2310      	movs	r3, #16
 8008ed8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8008eda:	2311      	movs	r3, #17
 8008edc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8008ee2:	1d3b      	adds	r3, r7, #4
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4805      	ldr	r0, [pc, #20]	; (8008f00 <MX_FMC_Init+0xa8>)
 8008eea:	f7fd f997 	bl	800621c <HAL_SRAM_Init>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <MX_FMC_Init+0xa0>
  {
    Error_Handler();
 8008ef4:	f7f8 fe4a 	bl	8001b8c <Error_Handler>
  }

}
 8008ef8:	bf00      	nop
 8008efa:	3720      	adds	r7, #32
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20001ec4 	.word	0x20001ec4
 8008f04:	a0000104 	.word	0xa0000104

08008f08 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008f0c:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f0e:	4a13      	ldr	r2, [pc, #76]	; (8008f5c <MX_I2C1_Init+0x54>)
 8008f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008f12:	4b11      	ldr	r3, [pc, #68]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f14:	4a12      	ldr	r2, [pc, #72]	; (8008f60 <MX_I2C1_Init+0x58>)
 8008f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008f18:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008f1e:	4b0e      	ldr	r3, [pc, #56]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008f32:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008f38:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008f3e:	4b06      	ldr	r3, [pc, #24]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008f44:	4804      	ldr	r0, [pc, #16]	; (8008f58 <MX_I2C1_Init+0x50>)
 8008f46:	f7f9 fcbd 	bl	80028c4 <HAL_I2C_Init>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008f50:	f7f8 fe1c 	bl	8001b8c <Error_Handler>
  }

}
 8008f54:	bf00      	nop
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	20001d74 	.word	0x20001d74
 8008f5c:	40005400 	.word	0x40005400
 8008f60:	00061a80 	.word	0x00061a80

08008f64 <MX_I2C2_Init>:

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8008f68:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008f6a:	4a13      	ldr	r2, [pc, #76]	; (8008fb8 <MX_I2C2_Init+0x54>)
 8008f6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8008f6e:	4b11      	ldr	r3, [pc, #68]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008f70:	4a12      	ldr	r2, [pc, #72]	; (8008fbc <MX_I2C2_Init+0x58>)
 8008f72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008f74:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008f80:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008f88:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008f94:	4b07      	ldr	r3, [pc, #28]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008f9a:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008fa0:	4804      	ldr	r0, [pc, #16]	; (8008fb4 <MX_I2C2_Init+0x50>)
 8008fa2:	f7f9 fc8f 	bl	80028c4 <HAL_I2C_Init>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8008fac:	f7f8 fdee 	bl	8001b8c <Error_Handler>
  }

}
 8008fb0:	bf00      	nop
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20001ddc 	.word	0x20001ddc
 8008fb8:	40005800 	.word	0x40005800
 8008fbc:	000186a0 	.word	0x000186a0

08008fc0 <MX_I2C3_Init>:

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8008fc4:	4b12      	ldr	r3, [pc, #72]	; (8009010 <MX_I2C3_Init+0x50>)
 8008fc6:	4a13      	ldr	r2, [pc, #76]	; (8009014 <MX_I2C3_Init+0x54>)
 8008fc8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8008fca:	4b11      	ldr	r3, [pc, #68]	; (8009010 <MX_I2C3_Init+0x50>)
 8008fcc:	4a12      	ldr	r2, [pc, #72]	; (8009018 <MX_I2C3_Init+0x58>)
 8008fce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008fd0:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <MX_I2C3_Init+0x50>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8008fd6:	4b0e      	ldr	r3, [pc, #56]	; (8009010 <MX_I2C3_Init+0x50>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008fdc:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <MX_I2C3_Init+0x50>)
 8008fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008fe2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <MX_I2C3_Init+0x50>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8008fea:	4b09      	ldr	r3, [pc, #36]	; (8009010 <MX_I2C3_Init+0x50>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <MX_I2C3_Init+0x50>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008ff6:	4b06      	ldr	r3, [pc, #24]	; (8009010 <MX_I2C3_Init+0x50>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8008ffc:	4804      	ldr	r0, [pc, #16]	; (8009010 <MX_I2C3_Init+0x50>)
 8008ffe:	f7f9 fc61 	bl	80028c4 <HAL_I2C_Init>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8009008:	f7f8 fdc0 	bl	8001b8c <Error_Handler>
  }

}
 800900c:	bf00      	nop
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20001c70 	.word	0x20001c70
 8009014:	40005c00 	.word	0x40005c00
 8009018:	00061a80 	.word	0x00061a80

0800901c <MX_SDIO_SD_Init>:

/* SDIO init function */
void MX_SDIO_SD_Init(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8009020:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <MX_SDIO_SD_Init+0x38>)
 8009022:	4a0d      	ldr	r2, [pc, #52]	; (8009058 <MX_SDIO_SD_Init+0x3c>)
 8009024:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8009026:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <MX_SDIO_SD_Init+0x38>)
 8009028:	2200      	movs	r2, #0
 800902a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800902c:	4b09      	ldr	r3, [pc, #36]	; (8009054 <MX_SDIO_SD_Init+0x38>)
 800902e:	2200      	movs	r2, #0
 8009030:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009032:	4b08      	ldr	r3, [pc, #32]	; (8009054 <MX_SDIO_SD_Init+0x38>)
 8009034:	2200      	movs	r2, #0
 8009036:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <MX_SDIO_SD_Init+0x38>)
 800903a:	2200      	movs	r2, #0
 800903c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800903e:	4b05      	ldr	r3, [pc, #20]	; (8009054 <MX_SDIO_SD_Init+0x38>)
 8009040:	2200      	movs	r2, #0
 8009042:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8009044:	4b03      	ldr	r3, [pc, #12]	; (8009054 <MX_SDIO_SD_Init+0x38>)
 8009046:	2203      	movs	r2, #3
 8009048:	619a      	str	r2, [r3, #24]

}
 800904a:	bf00      	nop
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	20002034 	.word	0x20002034
 8009058:	40012c00 	.word	0x40012c00

0800905c <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8009060:	4b17      	ldr	r3, [pc, #92]	; (80090c0 <MX_SPI1_Init+0x64>)
 8009062:	4a18      	ldr	r2, [pc, #96]	; (80090c4 <MX_SPI1_Init+0x68>)
 8009064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009066:	4b16      	ldr	r3, [pc, #88]	; (80090c0 <MX_SPI1_Init+0x64>)
 8009068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800906c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800906e:	4b14      	ldr	r3, [pc, #80]	; (80090c0 <MX_SPI1_Init+0x64>)
 8009070:	2200      	movs	r2, #0
 8009072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009074:	4b12      	ldr	r3, [pc, #72]	; (80090c0 <MX_SPI1_Init+0x64>)
 8009076:	2200      	movs	r2, #0
 8009078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800907a:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <MX_SPI1_Init+0x64>)
 800907c:	2200      	movs	r2, #0
 800907e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009080:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <MX_SPI1_Init+0x64>)
 8009082:	2200      	movs	r2, #0
 8009084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009086:	4b0e      	ldr	r3, [pc, #56]	; (80090c0 <MX_SPI1_Init+0x64>)
 8009088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800908c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800908e:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <MX_SPI1_Init+0x64>)
 8009090:	2218      	movs	r2, #24
 8009092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009094:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <MX_SPI1_Init+0x64>)
 8009096:	2200      	movs	r2, #0
 8009098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800909a:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <MX_SPI1_Init+0x64>)
 800909c:	2200      	movs	r2, #0
 800909e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090a0:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <MX_SPI1_Init+0x64>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80090a6:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <MX_SPI1_Init+0x64>)
 80090a8:	220a      	movs	r2, #10
 80090aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80090ac:	4804      	ldr	r0, [pc, #16]	; (80090c0 <MX_SPI1_Init+0x64>)
 80090ae:	f7fd f849 	bl	8006144 <HAL_SPI_Init>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80090b8:	f7f8 fd68 	bl	8001b8c <Error_Handler>
  }

}
 80090bc:	bf00      	nop
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20002138 	.word	0x20002138
 80090c4:	40013000 	.word	0x40013000

080090c8 <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80090cc:	4b18      	ldr	r3, [pc, #96]	; (8009130 <MX_SPI2_Init+0x68>)
 80090ce:	4a19      	ldr	r2, [pc, #100]	; (8009134 <MX_SPI2_Init+0x6c>)
 80090d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80090d2:	4b17      	ldr	r3, [pc, #92]	; (8009130 <MX_SPI2_Init+0x68>)
 80090d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80090d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80090da:	4b15      	ldr	r3, [pc, #84]	; (8009130 <MX_SPI2_Init+0x68>)
 80090dc:	2200      	movs	r2, #0
 80090de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80090e0:	4b13      	ldr	r3, [pc, #76]	; (8009130 <MX_SPI2_Init+0x68>)
 80090e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80090e8:	4b11      	ldr	r3, [pc, #68]	; (8009130 <MX_SPI2_Init+0x68>)
 80090ea:	2202      	movs	r2, #2
 80090ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80090ee:	4b10      	ldr	r3, [pc, #64]	; (8009130 <MX_SPI2_Init+0x68>)
 80090f0:	2201      	movs	r2, #1
 80090f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80090f4:	4b0e      	ldr	r3, [pc, #56]	; (8009130 <MX_SPI2_Init+0x68>)
 80090f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80090fc:	4b0c      	ldr	r3, [pc, #48]	; (8009130 <MX_SPI2_Init+0x68>)
 80090fe:	2230      	movs	r2, #48	; 0x30
 8009100:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009102:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <MX_SPI2_Init+0x68>)
 8009104:	2200      	movs	r2, #0
 8009106:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009108:	4b09      	ldr	r3, [pc, #36]	; (8009130 <MX_SPI2_Init+0x68>)
 800910a:	2200      	movs	r2, #0
 800910c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800910e:	4b08      	ldr	r3, [pc, #32]	; (8009130 <MX_SPI2_Init+0x68>)
 8009110:	2200      	movs	r2, #0
 8009112:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009114:	4b06      	ldr	r3, [pc, #24]	; (8009130 <MX_SPI2_Init+0x68>)
 8009116:	2207      	movs	r2, #7
 8009118:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800911a:	4805      	ldr	r0, [pc, #20]	; (8009130 <MX_SPI2_Init+0x68>)
 800911c:	f7fd f812 	bl	8006144 <HAL_SPI_Init>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8009126:	f7f8 fd31 	bl	8001b8c <Error_Handler>
  }

}
 800912a:	bf00      	nop
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20001cc4 	.word	0x20001cc4
 8009134:	40003800 	.word	0x40003800

08009138 <MX_SPI6_Init>:

}*/

/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 800913c:	4b17      	ldr	r3, [pc, #92]	; (800919c <MX_SPI6_Init+0x64>)
 800913e:	4a18      	ldr	r2, [pc, #96]	; (80091a0 <MX_SPI6_Init+0x68>)
 8009140:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8009142:	4b16      	ldr	r3, [pc, #88]	; (800919c <MX_SPI6_Init+0x64>)
 8009144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009148:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800914a:	4b14      	ldr	r3, [pc, #80]	; (800919c <MX_SPI6_Init+0x64>)
 800914c:	2200      	movs	r2, #0
 800914e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8009150:	4b12      	ldr	r3, [pc, #72]	; (800919c <MX_SPI6_Init+0x64>)
 8009152:	2200      	movs	r2, #0
 8009154:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009156:	4b11      	ldr	r3, [pc, #68]	; (800919c <MX_SPI6_Init+0x64>)
 8009158:	2200      	movs	r2, #0
 800915a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800915c:	4b0f      	ldr	r3, [pc, #60]	; (800919c <MX_SPI6_Init+0x64>)
 800915e:	2200      	movs	r2, #0
 8009160:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8009162:	4b0e      	ldr	r3, [pc, #56]	; (800919c <MX_SPI6_Init+0x64>)
 8009164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009168:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800916a:	4b0c      	ldr	r3, [pc, #48]	; (800919c <MX_SPI6_Init+0x64>)
 800916c:	2200      	movs	r2, #0
 800916e:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009170:	4b0a      	ldr	r3, [pc, #40]	; (800919c <MX_SPI6_Init+0x64>)
 8009172:	2200      	movs	r2, #0
 8009174:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8009176:	4b09      	ldr	r3, [pc, #36]	; (800919c <MX_SPI6_Init+0x64>)
 8009178:	2200      	movs	r2, #0
 800917a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800917c:	4b07      	ldr	r3, [pc, #28]	; (800919c <MX_SPI6_Init+0x64>)
 800917e:	2200      	movs	r2, #0
 8009180:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 8009182:	4b06      	ldr	r3, [pc, #24]	; (800919c <MX_SPI6_Init+0x64>)
 8009184:	220a      	movs	r2, #10
 8009186:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8009188:	4804      	ldr	r0, [pc, #16]	; (800919c <MX_SPI6_Init+0x64>)
 800918a:	f7fc ffdb 	bl	8006144 <HAL_SPI_Init>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <MX_SPI6_Init+0x60>
  {
    Error_Handler();
 8009194:	f7f8 fcfa 	bl	8001b8c <Error_Handler>
  }

}
 8009198:	bf00      	nop
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20001e30 	.word	0x20001e30
 80091a0:	40015400 	.word	0x40015400

080091a4 <MX_TIM5_Init>:

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08e      	sub	sp, #56	; 0x38
 80091a8:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 80091aa:	4b36      	ldr	r3, [pc, #216]	; (8009284 <MX_TIM5_Init+0xe0>)
 80091ac:	4a36      	ldr	r2, [pc, #216]	; (8009288 <MX_TIM5_Init+0xe4>)
 80091ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80091b0:	4b34      	ldr	r3, [pc, #208]	; (8009284 <MX_TIM5_Init+0xe0>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091b6:	4b33      	ldr	r3, [pc, #204]	; (8009284 <MX_TIM5_Init+0xe0>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80091bc:	4b31      	ldr	r3, [pc, #196]	; (8009284 <MX_TIM5_Init+0xe0>)
 80091be:	2200      	movs	r2, #0
 80091c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091c2:	4b30      	ldr	r3, [pc, #192]	; (8009284 <MX_TIM5_Init+0xe0>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80091c8:	482e      	ldr	r0, [pc, #184]	; (8009284 <MX_TIM5_Init+0xe0>)
 80091ca:	f7fd f86b 	bl	80062a4 <HAL_TIM_Base_Init>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <MX_TIM5_Init+0x34>
  {
    Error_Handler();
 80091d4:	f7f8 fcda 	bl	8001b8c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80091d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80091de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091e2:	4619      	mov	r1, r3
 80091e4:	4827      	ldr	r0, [pc, #156]	; (8009284 <MX_TIM5_Init+0xe0>)
 80091e6:	f7fd faa7 	bl	8006738 <HAL_TIM_ConfigClockSource>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80091f0:	f7f8 fccc 	bl	8001b8c <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80091f4:	4823      	ldr	r0, [pc, #140]	; (8009284 <MX_TIM5_Init+0xe0>)
 80091f6:	f7fd f89b 	bl	8006330 <HAL_TIM_PWM_Init>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8009200:	f7f8 fcc4 	bl	8001b8c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009204:	2300      	movs	r3, #0
 8009206:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009208:	2300      	movs	r3, #0
 800920a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800920c:	f107 0320 	add.w	r3, r7, #32
 8009210:	4619      	mov	r1, r3
 8009212:	481c      	ldr	r0, [pc, #112]	; (8009284 <MX_TIM5_Init+0xe0>)
 8009214:	f7fd feab 	bl	8006f6e <HAL_TIMEx_MasterConfigSynchronization>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800921e:	f7f8 fcb5 	bl	8001b8c <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009222:	2360      	movs	r3, #96	; 0x60
 8009224:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009232:	1d3b      	adds	r3, r7, #4
 8009234:	2200      	movs	r2, #0
 8009236:	4619      	mov	r1, r3
 8009238:	4812      	ldr	r0, [pc, #72]	; (8009284 <MX_TIM5_Init+0xe0>)
 800923a:	f7fd f9b7 	bl	80065ac <HAL_TIM_PWM_ConfigChannel>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <MX_TIM5_Init+0xa4>
  {
    Error_Handler();
 8009244:	f7f8 fca2 	bl	8001b8c <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009248:	1d3b      	adds	r3, r7, #4
 800924a:	2204      	movs	r2, #4
 800924c:	4619      	mov	r1, r3
 800924e:	480d      	ldr	r0, [pc, #52]	; (8009284 <MX_TIM5_Init+0xe0>)
 8009250:	f7fd f9ac 	bl	80065ac <HAL_TIM_PWM_ConfigChannel>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <MX_TIM5_Init+0xba>
  {
    Error_Handler();
 800925a:	f7f8 fc97 	bl	8001b8c <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800925e:	1d3b      	adds	r3, r7, #4
 8009260:	2208      	movs	r2, #8
 8009262:	4619      	mov	r1, r3
 8009264:	4807      	ldr	r0, [pc, #28]	; (8009284 <MX_TIM5_Init+0xe0>)
 8009266:	f7fd f9a1 	bl	80065ac <HAL_TIM_PWM_ConfigChannel>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8009270:	f7f8 fc8c 	bl	8001b8c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim5);
 8009274:	4803      	ldr	r0, [pc, #12]	; (8009284 <MX_TIM5_Init+0xe0>)
 8009276:	f000 fd21 	bl	8009cbc <HAL_TIM_MspPostInit>

}
 800927a:	bf00      	nop
 800927c:	3738      	adds	r7, #56	; 0x38
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20001e88 	.word	0x20001e88
 8009288:	40000c00 	.word	0x40000c00

0800928c <MX_UART4_Init>:

/* UART4 init function */
void MX_UART4_Init(void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8009290:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <MX_UART4_Init+0x4c>)
 8009292:	4a12      	ldr	r2, [pc, #72]	; (80092dc <MX_UART4_Init+0x50>)
 8009294:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8009296:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <MX_UART4_Init+0x4c>)
 8009298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800929c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800929e:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <MX_UART4_Init+0x4c>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80092a4:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <MX_UART4_Init+0x4c>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80092aa:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <MX_UART4_Init+0x4c>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80092b0:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <MX_UART4_Init+0x4c>)
 80092b2:	220c      	movs	r2, #12
 80092b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092b6:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <MX_UART4_Init+0x4c>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <MX_UART4_Init+0x4c>)
 80092be:	2200      	movs	r2, #0
 80092c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80092c2:	4805      	ldr	r0, [pc, #20]	; (80092d8 <MX_UART4_Init+0x4c>)
 80092c4:	f7fd feac 	bl	8007020 <HAL_UART_Init>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80092ce:	f7f8 fc5d 	bl	8001b8c <Error_Handler>
  }

}
 80092d2:	bf00      	nop
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	200020f8 	.word	0x200020f8
 80092dc:	40004c00 	.word	0x40004c00

080092e0 <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80092e4:	4b11      	ldr	r3, [pc, #68]	; (800932c <MX_USART1_UART_Init+0x4c>)
 80092e6:	4a12      	ldr	r2, [pc, #72]	; (8009330 <MX_USART1_UART_Init+0x50>)
 80092e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80092ea:	4b10      	ldr	r3, [pc, #64]	; (800932c <MX_USART1_UART_Init+0x4c>)
 80092ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80092f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80092f2:	4b0e      	ldr	r3, [pc, #56]	; (800932c <MX_USART1_UART_Init+0x4c>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80092f8:	4b0c      	ldr	r3, [pc, #48]	; (800932c <MX_USART1_UART_Init+0x4c>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80092fe:	4b0b      	ldr	r3, [pc, #44]	; (800932c <MX_USART1_UART_Init+0x4c>)
 8009300:	2200      	movs	r2, #0
 8009302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <MX_USART1_UART_Init+0x4c>)
 8009306:	220c      	movs	r2, #12
 8009308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800930a:	4b08      	ldr	r3, [pc, #32]	; (800932c <MX_USART1_UART_Init+0x4c>)
 800930c:	2200      	movs	r2, #0
 800930e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009310:	4b06      	ldr	r3, [pc, #24]	; (800932c <MX_USART1_UART_Init+0x4c>)
 8009312:	2200      	movs	r2, #0
 8009314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009316:	4805      	ldr	r0, [pc, #20]	; (800932c <MX_USART1_UART_Init+0x4c>)
 8009318:	f7fd fe82 	bl	8007020 <HAL_UART_Init>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009322:	f7f8 fc33 	bl	8001b8c <Error_Handler>
  }

}
 8009326:	bf00      	nop
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20001f5c 	.word	0x20001f5c
 8009330:	40011000 	.word	0x40011000

08009334 <MX_USART6_UART_Init>:

/* USART6 init function */
void MX_USART6_UART_Init(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8009338:	4b11      	ldr	r3, [pc, #68]	; (8009380 <MX_USART6_UART_Init+0x4c>)
 800933a:	4a12      	ldr	r2, [pc, #72]	; (8009384 <MX_USART6_UART_Init+0x50>)
 800933c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800933e:	4b10      	ldr	r3, [pc, #64]	; (8009380 <MX_USART6_UART_Init+0x4c>)
 8009340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009344:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009346:	4b0e      	ldr	r3, [pc, #56]	; (8009380 <MX_USART6_UART_Init+0x4c>)
 8009348:	2200      	movs	r2, #0
 800934a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800934c:	4b0c      	ldr	r3, [pc, #48]	; (8009380 <MX_USART6_UART_Init+0x4c>)
 800934e:	2200      	movs	r2, #0
 8009350:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009352:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <MX_USART6_UART_Init+0x4c>)
 8009354:	2200      	movs	r2, #0
 8009356:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009358:	4b09      	ldr	r3, [pc, #36]	; (8009380 <MX_USART6_UART_Init+0x4c>)
 800935a:	220c      	movs	r2, #12
 800935c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800935e:	4b08      	ldr	r3, [pc, #32]	; (8009380 <MX_USART6_UART_Init+0x4c>)
 8009360:	2200      	movs	r2, #0
 8009362:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009364:	4b06      	ldr	r3, [pc, #24]	; (8009380 <MX_USART6_UART_Init+0x4c>)
 8009366:	2200      	movs	r2, #0
 8009368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800936a:	4805      	ldr	r0, [pc, #20]	; (8009380 <MX_USART6_UART_Init+0x4c>)
 800936c:	f7fd fe58 	bl	8007020 <HAL_UART_Init>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8009376:	f7f8 fc09 	bl	8001b8c <Error_Handler>
  }

}
 800937a:	bf00      	nop
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	200020b8 	.word	0x200020b8
 8009384:	40011400 	.word	0x40011400

08009388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800938e:	2300      	movs	r3, #0
 8009390:	607b      	str	r3, [r7, #4]
 8009392:	4b10      	ldr	r3, [pc, #64]	; (80093d4 <MX_DMA_Init+0x4c>)
 8009394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009396:	4a0f      	ldr	r2, [pc, #60]	; (80093d4 <MX_DMA_Init+0x4c>)
 8009398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800939c:	6313      	str	r3, [r2, #48]	; 0x30
 800939e:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <MX_DMA_Init+0x4c>)
 80093a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093a6:	607b      	str	r3, [r7, #4]
 80093a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80093aa:	2200      	movs	r2, #0
 80093ac:	2105      	movs	r1, #5
 80093ae:	203b      	movs	r0, #59	; 0x3b
 80093b0:	f7f8 febf 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80093b4:	203b      	movs	r0, #59	; 0x3b
 80093b6:	f7f8 fed8 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80093ba:	2200      	movs	r2, #0
 80093bc:	2105      	movs	r1, #5
 80093be:	2045      	movs	r0, #69	; 0x45
 80093c0:	f7f8 feb7 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80093c4:	2045      	movs	r0, #69	; 0x45
 80093c6:	f7f8 fed0 	bl	800216a <HAL_NVIC_EnableIRQ>

}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	40023800 	.word	0x40023800

080093d8 <MX_RTC_Init>:

/* RTC init function */
void MX_RTC_Init(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0

    /**Initialize RTC Only
    */
  hrtc.Instance = RTC;
 80093dc:	4b2e      	ldr	r3, [pc, #184]	; (8009498 <MX_RTC_Init+0xc0>)
 80093de:	4a2f      	ldr	r2, [pc, #188]	; (800949c <MX_RTC_Init+0xc4>)
 80093e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80093e2:	4b2d      	ldr	r3, [pc, #180]	; (8009498 <MX_RTC_Init+0xc0>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80093e8:	4b2b      	ldr	r3, [pc, #172]	; (8009498 <MX_RTC_Init+0xc0>)
 80093ea:	227f      	movs	r2, #127	; 0x7f
 80093ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80093ee:	4b2a      	ldr	r3, [pc, #168]	; (8009498 <MX_RTC_Init+0xc0>)
 80093f0:	22ff      	movs	r2, #255	; 0xff
 80093f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80093f4:	4b28      	ldr	r3, [pc, #160]	; (8009498 <MX_RTC_Init+0xc0>)
 80093f6:	2200      	movs	r2, #0
 80093f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80093fa:	4b27      	ldr	r3, [pc, #156]	; (8009498 <MX_RTC_Init+0xc0>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009400:	4b25      	ldr	r3, [pc, #148]	; (8009498 <MX_RTC_Init+0xc0>)
 8009402:	2200      	movs	r2, #0
 8009404:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009406:	4824      	ldr	r0, [pc, #144]	; (8009498 <MX_RTC_Init+0xc0>)
 8009408:	f7fa fffa 	bl	8004400 <HAL_RTC_Init>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8009412:	f7f8 fbbb 	bl	8001b8c <Error_Handler>
  }

    /**Initialize RTC and set the Time and Date
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8009416:	2100      	movs	r1, #0
 8009418:	481f      	ldr	r0, [pc, #124]	; (8009498 <MX_RTC_Init+0xc0>)
 800941a:	f7fb fa90 	bl	800493e <HAL_RTCEx_BKUPRead>
 800941e:	4602      	mov	r2, r0
 8009420:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8009424:	429a      	cmp	r2, r3
 8009426:	d034      	beq.n	8009492 <MX_RTC_Init+0xba>
    sTime.Hours = 0x17;
 8009428:	4b1d      	ldr	r3, [pc, #116]	; (80094a0 <MX_RTC_Init+0xc8>)
 800942a:	2217      	movs	r2, #23
 800942c:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0x0;
 800942e:	4b1c      	ldr	r3, [pc, #112]	; (80094a0 <MX_RTC_Init+0xc8>)
 8009430:	2200      	movs	r2, #0
 8009432:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0x0;
 8009434:	4b1a      	ldr	r3, [pc, #104]	; (80094a0 <MX_RTC_Init+0xc8>)
 8009436:	2200      	movs	r2, #0
 8009438:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800943a:	4b19      	ldr	r3, [pc, #100]	; (80094a0 <MX_RTC_Init+0xc8>)
 800943c:	2200      	movs	r2, #0
 800943e:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009440:	4b17      	ldr	r3, [pc, #92]	; (80094a0 <MX_RTC_Init+0xc8>)
 8009442:	2200      	movs	r2, #0
 8009444:	611a      	str	r2, [r3, #16]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009446:	2201      	movs	r2, #1
 8009448:	4915      	ldr	r1, [pc, #84]	; (80094a0 <MX_RTC_Init+0xc8>)
 800944a:	4813      	ldr	r0, [pc, #76]	; (8009498 <MX_RTC_Init+0xc0>)
 800944c:	f7fb f853 	bl	80044f6 <HAL_RTC_SetTime>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <MX_RTC_Init+0x82>
    {
      Error_Handler();
 8009456:	f7f8 fb99 	bl	8001b8c <Error_Handler>
    }

    sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800945a:	4b12      	ldr	r3, [pc, #72]	; (80094a4 <MX_RTC_Init+0xcc>)
 800945c:	2205      	movs	r2, #5
 800945e:	701a      	strb	r2, [r3, #0]
    sDate.Month = RTC_MONTH_FEBRUARY;
 8009460:	4b10      	ldr	r3, [pc, #64]	; (80094a4 <MX_RTC_Init+0xcc>)
 8009462:	2202      	movs	r2, #2
 8009464:	705a      	strb	r2, [r3, #1]
    sDate.Date = 0x9;
 8009466:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <MX_RTC_Init+0xcc>)
 8009468:	2209      	movs	r2, #9
 800946a:	709a      	strb	r2, [r3, #2]
    sDate.Year = 0x18;
 800946c:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <MX_RTC_Init+0xcc>)
 800946e:	2218      	movs	r2, #24
 8009470:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009472:	2201      	movs	r2, #1
 8009474:	490b      	ldr	r1, [pc, #44]	; (80094a4 <MX_RTC_Init+0xcc>)
 8009476:	4808      	ldr	r0, [pc, #32]	; (8009498 <MX_RTC_Init+0xc0>)
 8009478:	f7fb f902 	bl	8004680 <HAL_RTC_SetDate>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <MX_RTC_Init+0xae>
    {
      Error_Handler();
 8009482:	f7f8 fb83 	bl	8001b8c <Error_Handler>
    }

      HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8009486:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800948a:	2100      	movs	r1, #0
 800948c:	4802      	ldr	r0, [pc, #8]	; (8009498 <MX_RTC_Init+0xc0>)
 800948e:	f7fb fa3c 	bl	800490a <HAL_RTCEx_BKUPWrite>
  }

}
 8009492:	bf00      	nop
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20001fa0 	.word	0x20001fa0
 800949c:	40002800 	.word	0x40002800
 80094a0:	20001dc8 	.word	0x20001dc8
 80094a4:	20001f9c 	.word	0x20001f9c

080094a8 <MX_WWDG_Init>:

/* WWDG init function */
void MX_WWDG_Init(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 80094ac:	4b0d      	ldr	r3, [pc, #52]	; (80094e4 <MX_WWDG_Init+0x3c>)
 80094ae:	4a0e      	ldr	r2, [pc, #56]	; (80094e8 <MX_WWDG_Init+0x40>)
 80094b0:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 80094b2:	4b0c      	ldr	r3, [pc, #48]	; (80094e4 <MX_WWDG_Init+0x3c>)
 80094b4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80094b8:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 80094ba:	4b0a      	ldr	r3, [pc, #40]	; (80094e4 <MX_WWDG_Init+0x3c>)
 80094bc:	2240      	movs	r2, #64	; 0x40
 80094be:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 80094c0:	4b08      	ldr	r3, [pc, #32]	; (80094e4 <MX_WWDG_Init+0x3c>)
 80094c2:	2240      	movs	r2, #64	; 0x40
 80094c4:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 80094c6:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <MX_WWDG_Init+0x3c>)
 80094c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094cc:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80094ce:	4805      	ldr	r0, [pc, #20]	; (80094e4 <MX_WWDG_Init+0x3c>)
 80094d0:	f7fe fbb0 	bl	8007c34 <HAL_WWDG_Init>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 80094da:	f7f8 fb57 	bl	8001b8c <Error_Handler>
  }

}
 80094de:	bf00      	nop
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20002020 	.word	0x20002020
 80094e8:	40002c00 	.word	0x40002c00

080094ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80094f6:	f000 f89b 	bl	8009630 <BSP_SD_IsDetected>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d001      	beq.n	8009504 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e012      	b.n	800952a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009504:	480b      	ldr	r0, [pc, #44]	; (8009534 <BSP_SD_Init+0x48>)
 8009506:	f7fb fa32 	bl	800496e <HAL_SD_Init>
 800950a:	4603      	mov	r3, r0
 800950c:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d109      	bne.n	8009528 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009518:	4806      	ldr	r0, [pc, #24]	; (8009534 <BSP_SD_Init+0x48>)
 800951a:	f7fc f9aa 	bl	8005872 <HAL_SD_ConfigWideBusOperation>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 8009528:	79fb      	ldrb	r3, [r7, #7]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	20002034 	.word	0x20002034

08009538 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af02      	add	r7, sp, #8
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
  uint8_t sd_state;

  __HAL_LOCK(&hsd);
 8009546:	4b0d      	ldr	r3, [pc, #52]	; (800957c <BSP_SD_ReadBlocks+0x44>)
 8009548:	7f1b      	ldrb	r3, [r3, #28]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <BSP_SD_ReadBlocks+0x1a>
 800954e:	2302      	movs	r3, #2
 8009550:	e010      	b.n	8009574 <BSP_SD_ReadBlocks+0x3c>
 8009552:	4b0a      	ldr	r3, [pc, #40]	; (800957c <BSP_SD_ReadBlocks+0x44>)
 8009554:	2201      	movs	r2, #1
 8009556:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	68f9      	ldr	r1, [r7, #12]
 8009562:	4806      	ldr	r0, [pc, #24]	; (800957c <BSP_SD_ReadBlocks+0x44>)
 8009564:	f7fb fa8a 	bl	8004a7c <HAL_SD_ReadBlocks>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 800956c:	4b03      	ldr	r3, [pc, #12]	; (800957c <BSP_SD_ReadBlocks+0x44>)
 800956e:	2200      	movs	r2, #0
 8009570:	771a      	strb	r2, [r3, #28]
  
  return sd_state;  
 8009572:	7dfb      	ldrb	r3, [r7, #23]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20002034 	.word	0x20002034

08009580 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af02      	add	r7, sp, #8
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
 800958c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	75fb      	strb	r3, [r7, #23]

  __HAL_LOCK(&hsd);
 8009592:	4b0d      	ldr	r3, [pc, #52]	; (80095c8 <BSP_SD_WriteBlocks+0x48>)
 8009594:	7f1b      	ldrb	r3, [r3, #28]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d101      	bne.n	800959e <BSP_SD_WriteBlocks+0x1e>
 800959a:	2302      	movs	r3, #2
 800959c:	e010      	b.n	80095c0 <BSP_SD_WriteBlocks+0x40>
 800959e:	4b0a      	ldr	r3, [pc, #40]	; (80095c8 <BSP_SD_WriteBlocks+0x48>)
 80095a0:	2201      	movs	r2, #1
 80095a2:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	68f9      	ldr	r1, [r7, #12]
 80095ae:	4806      	ldr	r0, [pc, #24]	; (80095c8 <BSP_SD_WriteBlocks+0x48>)
 80095b0:	f7fb fbfb 	bl	8004daa <HAL_SD_WriteBlocks>
 80095b4:	4603      	mov	r3, r0
 80095b6:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 80095b8:	4b03      	ldr	r3, [pc, #12]	; (80095c8 <BSP_SD_WriteBlocks+0x48>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	771a      	strb	r2, [r3, #28]

  return sd_state;  
 80095be:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	20002034 	.word	0x20002034

080095cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
  uint8_t sd_state;  

  __HAL_LOCK(&hsd);
 80095d2:	4b0e      	ldr	r3, [pc, #56]	; (800960c <BSP_SD_GetCardState+0x40>)
 80095d4:	7f1b      	ldrb	r3, [r3, #28]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d101      	bne.n	80095de <BSP_SD_GetCardState+0x12>
 80095da:	2302      	movs	r3, #2
 80095dc:	e011      	b.n	8009602 <BSP_SD_GetCardState+0x36>
 80095de:	4b0b      	ldr	r3, [pc, #44]	; (800960c <BSP_SD_GetCardState+0x40>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	771a      	strb	r2, [r3, #28]
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 80095e4:	4809      	ldr	r0, [pc, #36]	; (800960c <BSP_SD_GetCardState+0x40>)
 80095e6:	f7fc f9c0 	bl	800596a <HAL_SD_GetCardState>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d102      	bne.n	80095f6 <BSP_SD_GetCardState+0x2a>
    sd_state = HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	71fb      	strb	r3, [r7, #7]
 80095f4:	e001      	b.n	80095fa <BSP_SD_GetCardState+0x2e>
  else
    sd_state = HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	71fb      	strb	r3, [r7, #7]
  __HAL_UNLOCK(&hsd);
 80095fa:	4b04      	ldr	r3, [pc, #16]	; (800960c <BSP_SD_GetCardState+0x40>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	771a      	strb	r2, [r3, #28]
  
  return sd_state;
 8009600:	79fb      	ldrb	r3, [r7, #7]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20002034 	.word	0x20002034

08009610 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009618:	b672      	cpsid	i
  /* Get SD card Information */
    __disable_irq();
    HAL_SD_GetCardInfo(&hsd, CardInfo);
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	4803      	ldr	r0, [pc, #12]	; (800962c <BSP_SD_GetCardInfo+0x1c>)
 800961e:	f7fc f8fc 	bl	800581a <HAL_SD_GetCardInfo>
  __ASM volatile ("cpsie i" : : : "memory");
 8009622:	b662      	cpsie	i
    __enable_irq();
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20002034 	.word	0x20002034

08009630 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009636:	2301      	movs	r3, #1
 8009638:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	b2db      	uxtb	r3, r3
}
 800963e:	4618      	mov	r0, r3
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
	...

0800964c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver((Diskio_drvTypeDef*)&SD_Driver, SD_Path);
 8009650:	4904      	ldr	r1, [pc, #16]	; (8009664 <MX_FATFS_Init+0x18>)
 8009652:	4805      	ldr	r0, [pc, #20]	; (8009668 <MX_FATFS_Init+0x1c>)
 8009654:	f000 fe80 	bl	800a358 <FATFS_LinkDriver>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	4b03      	ldr	r3, [pc, #12]	; (800966c <MX_FATFS_Init+0x20>)
 800965e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009660:	bf00      	nop
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20002194 	.word	0x20002194
 8009668:	0800ce24 	.word	0x0800ce24
 800966c:	20002190 	.word	0x20002190

08009670 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800967a:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <SD_initialize+0x38>)
 800967c:	2201      	movs	r2, #1
 800967e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8009680:	f7ff ff34 	bl	80094ec <BSP_SD_Init>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d107      	bne.n	800969a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800968a:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <SD_initialize+0x38>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	f023 0301 	bic.w	r3, r3, #1
 8009694:	b2da      	uxtb	r2, r3
 8009696:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <SD_initialize+0x38>)
 8009698:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800969a:	4b03      	ldr	r3, [pc, #12]	; (80096a8 <SD_initialize+0x38>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	b2db      	uxtb	r3, r3
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	2000000c 	.word	0x2000000c

080096ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	71fb      	strb	r3, [r7, #7]
  
  if(BSP_SD_GetCardState() != SD_TRANSFER_BUSY)
 80096b6:	f7ff ff89 	bl	80095cc <BSP_SD_GetCardState>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d008      	beq.n	80096d2 <SD_status+0x26>
    Stat &= ~STA_BUSY;
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <SD_status+0x44>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	f023 0308 	bic.w	r3, r3, #8
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <SD_status+0x44>)
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	e007      	b.n	80096e2 <SD_status+0x36>
  else
    Stat |= STA_BUSY;
 80096d2:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <SD_status+0x44>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f043 0308 	orr.w	r3, r3, #8
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <SD_status+0x44>)
 80096e0:	701a      	strb	r2, [r3, #0]
  
  return Stat;
 80096e2:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <SD_status+0x44>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b2db      	uxtb	r3, r3
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	2000000c 	.word	0x2000000c

080096f4 <SD_read>:
  */
    
#define MMC_RDWR_TRIES       20
#define MMC_STATUS_TRIES     500
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	607a      	str	r2, [r7, #4]
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8009704:	2314      	movs	r3, #20
 8009706:	617b      	str	r3, [r7, #20]

  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009708:	e009      	b.n	800971e <SD_read+0x2a>
  {
    if (timeout-- == 0)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	1e5a      	subs	r2, r3, #1
 800970e:	617a      	str	r2, [r7, #20]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <SD_read+0x24>
    {
      return RES_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e020      	b.n	800975a <SD_read+0x66>
    }
    osDelay(1);
 8009718:	2001      	movs	r0, #1
 800971a:	f000 fe2c 	bl	800a376 <osDelay>
  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 800971e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	68b8      	ldr	r0, [r7, #8]
 8009728:	f7ff ff06 	bl	8009538 <BSP_SD_ReadBlocks>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1eb      	bne.n	800970a <SD_read+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 8009732:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009736:	617b      	str	r3, [r7, #20]
  while (BSP_SD_GetCardState() != HAL_OK)
 8009738:	e009      	b.n	800974e <SD_read+0x5a>
  {
    if (timeout-- == 0)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	1e5a      	subs	r2, r3, #1
 800973e:	617a      	str	r2, [r7, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <SD_read+0x54>
    {
      return RES_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e008      	b.n	800975a <SD_read+0x66>
    }
    osDelay(1);
 8009748:	2001      	movs	r0, #1
 800974a:	f000 fe14 	bl	800a376 <osDelay>
  while (BSP_SD_GetCardState() != HAL_OK)
 800974e:	f7ff ff3d 	bl	80095cc <BSP_SD_GetCardState>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1f0      	bne.n	800973a <SD_read+0x46>
  }
  return RES_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b086      	sub	sp, #24
 8009766:	af00      	add	r7, sp, #0
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]
 800976e:	4603      	mov	r3, r0
 8009770:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8009772:	2314      	movs	r3, #20
 8009774:	617b      	str	r3, [r7, #20]

  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009776:	e009      	b.n	800978c <SD_write+0x2a>
  {
    if (timeout-- == 0)
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	1e5a      	subs	r2, r3, #1
 800977c:	617a      	str	r2, [r7, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <SD_write+0x24>
    {
      return RES_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e020      	b.n	80097c8 <SD_write+0x66>
    }
    osDelay(1);
 8009786:	2001      	movs	r0, #1
 8009788:	f000 fdf5 	bl	800a376 <osDelay>
  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 800978c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	68b8      	ldr	r0, [r7, #8]
 8009796:	f7ff fef3 	bl	8009580 <BSP_SD_WriteBlocks>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1eb      	bne.n	8009778 <SD_write+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 80097a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80097a4:	617b      	str	r3, [r7, #20]
  while(BSP_SD_GetCardState() != HAL_OK)
 80097a6:	e009      	b.n	80097bc <SD_write+0x5a>
  {
    if (timeout-- == 0)
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	1e5a      	subs	r2, r3, #1
 80097ac:	617a      	str	r2, [r7, #20]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <SD_write+0x54>
    {
      return RES_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e008      	b.n	80097c8 <SD_write+0x66>
    }
    osDelay(1);
 80097b6:	2001      	movs	r0, #1
 80097b8:	f000 fddd 	bl	800a376 <osDelay>
  while(BSP_SD_GetCardState() != HAL_OK)
 80097bc:	f7ff ff06 	bl	80095cc <BSP_SD_GetCardState>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1f0      	bne.n	80097a8 <SD_write+0x46>
  }    
  return RES_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08c      	sub	sp, #48	; 0x30
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	603a      	str	r2, [r7, #0]
 80097da:	71fb      	strb	r3, [r7, #7]
 80097dc:	460b      	mov	r3, r1
 80097de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) 
 80097e6:	4b24      	ldr	r3, [pc, #144]	; (8009878 <SD_ioctl+0xa8>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <SD_ioctl+0x28>
    return RES_NOTRDY;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e03b      	b.n	8009870 <SD_ioctl+0xa0>
  
  switch (cmd)
 80097f8:	79bb      	ldrb	r3, [r7, #6]
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d833      	bhi.n	8009866 <SD_ioctl+0x96>
 80097fe:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <SD_ioctl+0x34>)
 8009800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009804:	08009815 	.word	0x08009815
 8009808:	0800981d 	.word	0x0800981d
 800980c:	08009835 	.word	0x08009835
 8009810:	0800984f 	.word	0x0800984f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800981a:	e027      	b.n	800986c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800981c:	f107 030c 	add.w	r3, r7, #12
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff fef5 	bl	8009610 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009832:	e01b      	b.n	800986c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009834:	f107 030c 	add.w	r3, r7, #12
 8009838:	4618      	mov	r0, r3
 800983a:	f7ff fee9 	bl	8009610 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	b29a      	uxth	r2, r3
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800984c:	e00e      	b.n	800986c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800984e:	f107 030c 	add.w	r3, r7, #12
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff fedc 	bl	8009610 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8009858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009864:	e002      	b.n	800986c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8009866:	2304      	movs	r3, #4
 8009868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800986c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009870:	4618      	mov	r0, r3
 8009872:	3730      	adds	r7, #48	; 0x30
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	2000000c 	.word	0x2000000c

0800987c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009880:	2003      	movs	r0, #3
 8009882:	f7f8 fc4b 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8009886:	2200      	movs	r2, #0
 8009888:	2100      	movs	r1, #0
 800988a:	f06f 000b 	mvn.w	r0, #11
 800988e:	f7f8 fc50 	bl	8002132 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009892:	2200      	movs	r2, #0
 8009894:	2100      	movs	r1, #0
 8009896:	f06f 000a 	mvn.w	r0, #10
 800989a:	f7f8 fc4a 	bl	8002132 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800989e:	2200      	movs	r2, #0
 80098a0:	2100      	movs	r1, #0
 80098a2:	f06f 0009 	mvn.w	r0, #9
 80098a6:	f7f8 fc44 	bl	8002132 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80098aa:	2200      	movs	r2, #0
 80098ac:	2100      	movs	r1, #0
 80098ae:	f06f 0004 	mvn.w	r0, #4
 80098b2:	f7f8 fc3e 	bl	8002132 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80098b6:	2200      	movs	r2, #0
 80098b8:	2100      	movs	r1, #0
 80098ba:	f06f 0003 	mvn.w	r0, #3
 80098be:	f7f8 fc38 	bl	8002132 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80098c2:	2200      	movs	r2, #0
 80098c4:	210f      	movs	r1, #15
 80098c6:	f06f 0001 	mvn.w	r0, #1
 80098ca:	f7f8 fc32 	bl	8002132 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80098ce:	2200      	movs	r2, #0
 80098d0:	210f      	movs	r1, #15
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d6:	f7f8 fc2c 	bl	8002132 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80098da:	bf00      	nop
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b088      	sub	sp, #32
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a16      	ldr	r2, [pc, #88]	; (8009948 <HAL_ADC_MspInit+0x68>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d125      	bne.n	800993e <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80098f2:	2300      	movs	r3, #0
 80098f4:	60bb      	str	r3, [r7, #8]
 80098f6:	4b15      	ldr	r3, [pc, #84]	; (800994c <HAL_ADC_MspInit+0x6c>)
 80098f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fa:	4a14      	ldr	r2, [pc, #80]	; (800994c <HAL_ADC_MspInit+0x6c>)
 80098fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009900:	6453      	str	r3, [r2, #68]	; 0x44
 8009902:	4b12      	ldr	r3, [pc, #72]	; (800994c <HAL_ADC_MspInit+0x6c>)
 8009904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990a:	60bb      	str	r3, [r7, #8]
 800990c:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12 - PAN3
    PC3     ------> ADC1_IN13 - PAN4
    PA2     ------> ADC1_IN2 - PAN5
    PA3     ------> ADC1_IN3 - PAN6
    */
    GPIO_InitStruct.Pin = PAN1_AN_Pin|PAN2_AN_Pin|PAN3_AN_Pin|PAN4_AN_Pin;
 800990e:	230f      	movs	r3, #15
 8009910:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009912:	2303      	movs	r3, #3
 8009914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009916:	2300      	movs	r3, #0
 8009918:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800991a:	f107 030c 	add.w	r3, r7, #12
 800991e:	4619      	mov	r1, r3
 8009920:	480b      	ldr	r0, [pc, #44]	; (8009950 <HAL_ADC_MspInit+0x70>)
 8009922:	f7f8 fe0b 	bl	800253c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PAN5_AN_Pin|PAN6_AN_Pin;
 8009926:	230c      	movs	r3, #12
 8009928:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800992a:	2303      	movs	r3, #3
 800992c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009932:	f107 030c 	add.w	r3, r7, #12
 8009936:	4619      	mov	r1, r3
 8009938:	4806      	ldr	r0, [pc, #24]	; (8009954 <HAL_ADC_MspInit+0x74>)
 800993a:	f7f8 fdff 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800993e:	bf00      	nop
 8009940:	3720      	adds	r7, #32
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	40012000 	.word	0x40012000
 800994c:	40023800 	.word	0x40023800
 8009950:	40020800 	.word	0x40020800
 8009954:	40020000 	.word	0x40020000

08009958 <HAL_I2C_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08a      	sub	sp, #40	; 0x28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a37      	ldr	r2, [pc, #220]	; (8009a44 <HAL_I2C_MspInit+0xec>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d11f      	bne.n	80099aa <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 800996a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800996e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009970:	2312      	movs	r3, #18
 8009972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009974:	2301      	movs	r3, #1
 8009976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009978:	2303      	movs	r3, #3
 800997a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800997c:	2304      	movs	r3, #4
 800997e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009980:	f107 0314 	add.w	r3, r7, #20
 8009984:	4619      	mov	r1, r3
 8009986:	4830      	ldr	r0, [pc, #192]	; (8009a48 <HAL_I2C_MspInit+0xf0>)
 8009988:	f7f8 fdd8 	bl	800253c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800998c:	2300      	movs	r3, #0
 800998e:	613b      	str	r3, [r7, #16]
 8009990:	4b2e      	ldr	r3, [pc, #184]	; (8009a4c <HAL_I2C_MspInit+0xf4>)
 8009992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009994:	4a2d      	ldr	r2, [pc, #180]	; (8009a4c <HAL_I2C_MspInit+0xf4>)
 8009996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800999a:	6413      	str	r3, [r2, #64]	; 0x40
 800999c:	4b2b      	ldr	r3, [pc, #172]	; (8009a4c <HAL_I2C_MspInit+0xf4>)
 800999e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80099a8:	e048      	b.n	8009a3c <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C2)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a28      	ldr	r2, [pc, #160]	; (8009a50 <HAL_I2C_MspInit+0xf8>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d11f      	bne.n	80099f4 <HAL_I2C_MspInit+0x9c>
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 80099b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80099b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80099ba:	2312      	movs	r3, #18
 80099bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80099be:	2301      	movs	r3, #1
 80099c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099c2:	2303      	movs	r3, #3
 80099c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80099c6:	2304      	movs	r3, #4
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099ca:	f107 0314 	add.w	r3, r7, #20
 80099ce:	4619      	mov	r1, r3
 80099d0:	481d      	ldr	r0, [pc, #116]	; (8009a48 <HAL_I2C_MspInit+0xf0>)
 80099d2:	f7f8 fdb3 	bl	800253c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80099d6:	2300      	movs	r3, #0
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	4b1c      	ldr	r3, [pc, #112]	; (8009a4c <HAL_I2C_MspInit+0xf4>)
 80099dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099de:	4a1b      	ldr	r2, [pc, #108]	; (8009a4c <HAL_I2C_MspInit+0xf4>)
 80099e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099e4:	6413      	str	r3, [r2, #64]	; 0x40
 80099e6:	4b19      	ldr	r3, [pc, #100]	; (8009a4c <HAL_I2C_MspInit+0xf4>)
 80099e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	68fb      	ldr	r3, [r7, #12]
}
 80099f2:	e023      	b.n	8009a3c <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C3)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a16      	ldr	r2, [pc, #88]	; (8009a54 <HAL_I2C_MspInit+0xfc>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d11e      	bne.n	8009a3c <HAL_I2C_MspInit+0xe4>
    GPIO_InitStruct.Pin = PAY_SCL_Pin|PAY_SDA_Pin;
 80099fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009a04:	2312      	movs	r3, #18
 8009a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009a10:	2304      	movs	r3, #4
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009a14:	f107 0314 	add.w	r3, r7, #20
 8009a18:	4619      	mov	r1, r3
 8009a1a:	480f      	ldr	r0, [pc, #60]	; (8009a58 <HAL_I2C_MspInit+0x100>)
 8009a1c:	f7f8 fd8e 	bl	800253c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009a20:	2300      	movs	r3, #0
 8009a22:	60bb      	str	r3, [r7, #8]
 8009a24:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <HAL_I2C_MspInit+0xf4>)
 8009a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a28:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <HAL_I2C_MspInit+0xf4>)
 8009a2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8009a30:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <HAL_I2C_MspInit+0xf4>)
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a38:	60bb      	str	r3, [r7, #8]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
}
 8009a3c:	bf00      	nop
 8009a3e:	3728      	adds	r7, #40	; 0x28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	40005400 	.word	0x40005400
 8009a48:	40020400 	.word	0x40020400
 8009a4c:	40023800 	.word	0x40023800
 8009a50:	40005800 	.word	0x40005800
 8009a54:	40005c00 	.word	0x40005c00
 8009a58:	40021c00 	.word	0x40021c00

08009a5c <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a05      	ldr	r2, [pc, #20]	; (8009a80 <HAL_RTC_MspInit+0x24>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d102      	bne.n	8009a74 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009a6e:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <HAL_RTC_MspInit+0x28>)
 8009a70:	2201      	movs	r2, #1
 8009a72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	40002800 	.word	0x40002800
 8009a84:	42470e3c 	.word	0x42470e3c

08009a88 <HAL_SD_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a1e      	ldr	r2, [pc, #120]	; (8009b10 <HAL_SD_MspInit+0x88>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d136      	bne.n	8009b08 <HAL_SD_MspInit+0x80>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60bb      	str	r3, [r7, #8]
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <HAL_SD_MspInit+0x8c>)
 8009aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa2:	4a1c      	ldr	r2, [pc, #112]	; (8009b14 <HAL_SD_MspInit+0x8c>)
 8009aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8009aaa:	4b1a      	ldr	r3, [pc, #104]	; (8009b14 <HAL_SD_MspInit+0x8c>)
 8009aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ab2:	60bb      	str	r3, [r7, #8]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009ab6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8009aba:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009abc:	2302      	movs	r3, #2
 8009abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009ac8:	230c      	movs	r3, #12
 8009aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009acc:	f107 030c 	add.w	r3, r7, #12
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4811      	ldr	r0, [pc, #68]	; (8009b18 <HAL_SD_MspInit+0x90>)
 8009ad4:	f7f8 fd32 	bl	800253c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009ad8:	2304      	movs	r3, #4
 8009ada:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009adc:	2302      	movs	r3, #2
 8009ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009ae8:	230c      	movs	r3, #12
 8009aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009aec:	f107 030c 	add.w	r3, r7, #12
 8009af0:	4619      	mov	r1, r3
 8009af2:	480a      	ldr	r0, [pc, #40]	; (8009b1c <HAL_SD_MspInit+0x94>)
 8009af4:	f7f8 fd22 	bl	800253c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, USER_INT_PRIORITY, 0);
 8009af8:	2200      	movs	r2, #0
 8009afa:	2106      	movs	r1, #6
 8009afc:	2031      	movs	r0, #49	; 0x31
 8009afe:	f7f8 fb18 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8009b02:	2031      	movs	r0, #49	; 0x31
 8009b04:	f7f8 fb31 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8009b08:	bf00      	nop
 8009b0a:	3720      	adds	r7, #32
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40012c00 	.word	0x40012c00
 8009b14:	40023800 	.word	0x40023800
 8009b18:	40020800 	.word	0x40020800
 8009b1c:	40020c00 	.word	0x40020c00

08009b20 <HAL_SPI_MspInit>:
  /* USER CODE END SDIO_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08c      	sub	sp, #48	; 0x30
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a49      	ldr	r2, [pc, #292]	; (8009c54 <HAL_SPI_MspInit+0x134>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d11e      	bne.n	8009b70 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009b32:	2300      	movs	r3, #0
 8009b34:	61bb      	str	r3, [r7, #24]
 8009b36:	4b48      	ldr	r3, [pc, #288]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3a:	4a47      	ldr	r2, [pc, #284]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b40:	6453      	str	r3, [r2, #68]	; 0x44
 8009b42:	4b45      	ldr	r3, [pc, #276]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b4a:	61bb      	str	r3, [r7, #24]
 8009b4c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009b4e:	23e0      	movs	r3, #224	; 0xe0
 8009b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b52:	2302      	movs	r3, #2
 8009b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009b5e:	2305      	movs	r3, #5
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b62:	f107 031c 	add.w	r3, r7, #28
 8009b66:	4619      	mov	r1, r3
 8009b68:	483c      	ldr	r0, [pc, #240]	; (8009c5c <HAL_SPI_MspInit+0x13c>)
 8009b6a:	f7f8 fce7 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8009b6e:	e06d      	b.n	8009c4c <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a3a      	ldr	r2, [pc, #232]	; (8009c60 <HAL_SPI_MspInit+0x140>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d11f      	bne.n	8009bba <HAL_SPI_MspInit+0x9a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]
 8009b7e:	4b36      	ldr	r3, [pc, #216]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	4a35      	ldr	r2, [pc, #212]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b88:	6413      	str	r3, [r2, #64]	; 0x40
 8009b8a:	4b33      	ldr	r3, [pc, #204]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PAN_SCK_Pin|PAN_MISO_Pin|PAN_MOSI_Pin;
 8009b96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009ba8:	2305      	movs	r3, #5
 8009baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bac:	f107 031c 	add.w	r3, r7, #28
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	482c      	ldr	r0, [pc, #176]	; (8009c64 <HAL_SPI_MspInit+0x144>)
 8009bb4:	f7f8 fcc2 	bl	800253c <HAL_GPIO_Init>
}
 8009bb8:	e048      	b.n	8009c4c <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI5)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a2a      	ldr	r2, [pc, #168]	; (8009c68 <HAL_SPI_MspInit+0x148>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d11f      	bne.n	8009c04 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	4b23      	ldr	r3, [pc, #140]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bcc:	4a22      	ldr	r2, [pc, #136]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bd2:	6453      	str	r3, [r2, #68]	; 0x44
 8009bd4:	4b20      	ldr	r3, [pc, #128]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SBAND_SCK_Pin|SBAND_MISO_Pin|SBAND_MOSI_Pin;
 8009be0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8009be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009be6:	2302      	movs	r3, #2
 8009be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8009bf2:	2305      	movs	r3, #5
 8009bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009bf6:	f107 031c 	add.w	r3, r7, #28
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	481b      	ldr	r0, [pc, #108]	; (8009c6c <HAL_SPI_MspInit+0x14c>)
 8009bfe:	f7f8 fc9d 	bl	800253c <HAL_GPIO_Init>
}
 8009c02:	e023      	b.n	8009c4c <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI6)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a19      	ldr	r2, [pc, #100]	; (8009c70 <HAL_SPI_MspInit+0x150>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d11e      	bne.n	8009c4c <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	4b11      	ldr	r3, [pc, #68]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c16:	4a10      	ldr	r2, [pc, #64]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8009c1e:	4b0e      	ldr	r3, [pc, #56]	; (8009c58 <HAL_SPI_MspInit+0x138>)
 8009c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FLASH_MISO_Pin|FLASH_SCK_Pin|FLASH_MOSI_Pin;
 8009c2a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c30:	2302      	movs	r3, #2
 8009c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8009c3c:	2305      	movs	r3, #5
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009c40:	f107 031c 	add.w	r3, r7, #28
 8009c44:	4619      	mov	r1, r3
 8009c46:	480b      	ldr	r0, [pc, #44]	; (8009c74 <HAL_SPI_MspInit+0x154>)
 8009c48:	f7f8 fc78 	bl	800253c <HAL_GPIO_Init>
}
 8009c4c:	bf00      	nop
 8009c4e:	3730      	adds	r7, #48	; 0x30
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	40013000 	.word	0x40013000
 8009c58:	40023800 	.word	0x40023800
 8009c5c:	40020000 	.word	0x40020000
 8009c60:	40003800 	.word	0x40003800
 8009c64:	40020400 	.word	0x40020400
 8009c68:	40015000 	.word	0x40015000
 8009c6c:	40021400 	.word	0x40021400
 8009c70:	40015400 	.word	0x40015400
 8009c74:	40021800 	.word	0x40021800

08009c78 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM5)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a0b      	ldr	r2, [pc, #44]	; (8009cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d10d      	bne.n	8009ca6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <HAL_TIM_Base_MspInit+0x40>)
 8009c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c92:	4a09      	ldr	r2, [pc, #36]	; (8009cb8 <HAL_TIM_Base_MspInit+0x40>)
 8009c94:	f043 0308 	orr.w	r3, r3, #8
 8009c98:	6413      	str	r3, [r2, #64]	; 0x40
 8009c9a:	4b07      	ldr	r3, [pc, #28]	; (8009cb8 <HAL_TIM_Base_MspInit+0x40>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	f003 0308 	and.w	r3, r3, #8
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	40000c00 	.word	0x40000c00
 8009cb8:	40023800 	.word	0x40023800

08009cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a0b      	ldr	r2, [pc, #44]	; (8009cf8 <HAL_TIM_MspPostInit+0x3c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d110      	bne.n	8009cf0 <HAL_TIM_MspPostInit+0x34>
    /**TIM5 GPIO Configuration    
    PH10     ------> TIM5_CH1
    PH11     ------> TIM5_CH2
    PH12     ------> TIM5_CH3 
    */
    GPIO_InitStruct.Pin = PAN4_PWM_Pin|PAN5_PWM_Pin|PAN6_PWM_Pin;
 8009cce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009ce4:	f107 030c 	add.w	r3, r7, #12
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4804      	ldr	r0, [pc, #16]	; (8009cfc <HAL_TIM_MspPostInit+0x40>)
 8009cec:	f7f8 fc26 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8009cf0:	bf00      	nop
 8009cf2:	3720      	adds	r7, #32
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	40000c00 	.word	0x40000c00
 8009cfc:	40021c00 	.word	0x40021c00

08009d00 <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08a      	sub	sp, #40	; 0x28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a42      	ldr	r2, [pc, #264]	; (8009e18 <HAL_UART_MspInit+0x118>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d126      	bne.n	8009d60 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8009d12:	2300      	movs	r3, #0
 8009d14:	613b      	str	r3, [r7, #16]
 8009d16:	4b41      	ldr	r3, [pc, #260]	; (8009e1c <HAL_UART_MspInit+0x11c>)
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	4a40      	ldr	r2, [pc, #256]	; (8009e1c <HAL_UART_MspInit+0x11c>)
 8009d1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d20:	6413      	str	r3, [r2, #64]	; 0x40
 8009d22:	4b3e      	ldr	r3, [pc, #248]	; (8009e1c <HAL_UART_MspInit+0x11c>)
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d2a:	613b      	str	r3, [r7, #16]
 8009d2c:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d32:	2302      	movs	r3, #2
 8009d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009d36:	2301      	movs	r3, #1
 8009d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8009d3e:	2308      	movs	r3, #8
 8009d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d42:	f107 0314 	add.w	r3, r7, #20
 8009d46:	4619      	mov	r1, r3
 8009d48:	4835      	ldr	r0, [pc, #212]	; (8009e20 <HAL_UART_MspInit+0x120>)
 8009d4a:	f7f8 fbf7 	bl	800253c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, USER_INT_PRIORITY, 0);
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2106      	movs	r1, #6
 8009d52:	2034      	movs	r0, #52	; 0x34
 8009d54:	f7f8 f9ed 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8009d58:	2034      	movs	r0, #52	; 0x34
 8009d5a:	f7f8 fa06 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8009d5e:	e057      	b.n	8009e10 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART1)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a2f      	ldr	r2, [pc, #188]	; (8009e24 <HAL_UART_MspInit+0x124>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d127      	bne.n	8009dba <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]
 8009d6e:	4b2b      	ldr	r3, [pc, #172]	; (8009e1c <HAL_UART_MspInit+0x11c>)
 8009d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d72:	4a2a      	ldr	r2, [pc, #168]	; (8009e1c <HAL_UART_MspInit+0x11c>)
 8009d74:	f043 0310 	orr.w	r3, r3, #16
 8009d78:	6453      	str	r3, [r2, #68]	; 0x44
 8009d7a:	4b28      	ldr	r3, [pc, #160]	; (8009e1c <HAL_UART_MspInit+0x11c>)
 8009d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7e:	f003 0310 	and.w	r3, r3, #16
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009d90:	2301      	movs	r3, #1
 8009d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d94:	2303      	movs	r3, #3
 8009d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009d98:	2307      	movs	r3, #7
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d9c:	f107 0314 	add.w	r3, r7, #20
 8009da0:	4619      	mov	r1, r3
 8009da2:	481f      	ldr	r0, [pc, #124]	; (8009e20 <HAL_UART_MspInit+0x120>)
 8009da4:	f7f8 fbca 	bl	800253c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, USER_INT_PRIORITY, 0);
 8009da8:	2200      	movs	r2, #0
 8009daa:	2106      	movs	r1, #6
 8009dac:	2025      	movs	r0, #37	; 0x25
 8009dae:	f7f8 f9c0 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);    
 8009db2:	2025      	movs	r0, #37	; 0x25
 8009db4:	f7f8 f9d9 	bl	800216a <HAL_NVIC_EnableIRQ>
}
 8009db8:	e02a      	b.n	8009e10 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART6)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a1a      	ldr	r2, [pc, #104]	; (8009e28 <HAL_UART_MspInit+0x128>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d125      	bne.n	8009e10 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60bb      	str	r3, [r7, #8]
 8009dc8:	4b14      	ldr	r3, [pc, #80]	; (8009e1c <HAL_UART_MspInit+0x11c>)
 8009dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dcc:	4a13      	ldr	r2, [pc, #76]	; (8009e1c <HAL_UART_MspInit+0x11c>)
 8009dce:	f043 0320 	orr.w	r3, r3, #32
 8009dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8009dd4:	4b11      	ldr	r3, [pc, #68]	; (8009e1c <HAL_UART_MspInit+0x11c>)
 8009dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd8:	f003 0320 	and.w	r3, r3, #32
 8009ddc:	60bb      	str	r3, [r7, #8]
 8009dde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PAY_TX_Pin|PAY_RX_Pin;
 8009de0:	23c0      	movs	r3, #192	; 0xc0
 8009de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009de4:	2302      	movs	r3, #2
 8009de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009de8:	2301      	movs	r3, #1
 8009dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dec:	2303      	movs	r3, #3
 8009dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009df0:	2308      	movs	r3, #8
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009df4:	f107 0314 	add.w	r3, r7, #20
 8009df8:	4619      	mov	r1, r3
 8009dfa:	480c      	ldr	r0, [pc, #48]	; (8009e2c <HAL_UART_MspInit+0x12c>)
 8009dfc:	f7f8 fb9e 	bl	800253c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, USER_INT_PRIORITY, 0);
 8009e00:	2200      	movs	r2, #0
 8009e02:	2106      	movs	r1, #6
 8009e04:	2047      	movs	r0, #71	; 0x47
 8009e06:	f7f8 f994 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8009e0a:	2047      	movs	r0, #71	; 0x47
 8009e0c:	f7f8 f9ad 	bl	800216a <HAL_NVIC_EnableIRQ>
}
 8009e10:	bf00      	nop
 8009e12:	3728      	adds	r7, #40	; 0x28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	40004c00 	.word	0x40004c00
 8009e1c:	40023800 	.word	0x40023800
 8009e20:	40020000 	.word	0x40020000
 8009e24:	40011000 	.word	0x40011000
 8009e28:	40011400 	.word	0x40011400
 8009e2c:	40020800 	.word	0x40020800

08009e30 <HAL_WWDG_MspInit>:
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]

  if(hwwdg->Instance==WWDG)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a0b      	ldr	r2, [pc, #44]	; (8009e6c <HAL_WWDG_MspInit+0x3c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d10d      	bne.n	8009e5e <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <HAL_WWDG_MspInit+0x40>)
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	4a09      	ldr	r2, [pc, #36]	; (8009e70 <HAL_WWDG_MspInit+0x40>)
 8009e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e50:	6413      	str	r3, [r2, #64]	; 0x40
 8009e52:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <HAL_WWDG_MspInit+0x40>)
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e5a:	60fb      	str	r3, [r7, #12]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	40002c00 	.word	0x40002c00
 8009e70:	40023800 	.word	0x40023800

08009e74 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8009e7a:	4b2c      	ldr	r3, [pc, #176]	; (8009f2c <HAL_FMC_MspInit+0xb8>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d150      	bne.n	8009f24 <HAL_FMC_MspInit+0xb0>
    return;
  }
  FMC_Initialized = 1;
 8009e82:	4b2a      	ldr	r3, [pc, #168]	; (8009f2c <HAL_FMC_MspInit+0xb8>)
 8009e84:	2201      	movs	r2, #1
 8009e86:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009e88:	2300      	movs	r3, #0
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	4b28      	ldr	r3, [pc, #160]	; (8009f30 <HAL_FMC_MspInit+0xbc>)
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e90:	4a27      	ldr	r2, [pc, #156]	; (8009f30 <HAL_FMC_MspInit+0xbc>)
 8009e92:	f043 0301 	orr.w	r3, r3, #1
 8009e96:	6393      	str	r3, [r2, #56]	; 0x38
 8009e98:	4b25      	ldr	r3, [pc, #148]	; (8009f30 <HAL_FMC_MspInit+0xbc>)
 8009e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	603b      	str	r3, [r7, #0]
 8009ea2:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
 8009ea4:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8009ea8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009eb6:	230c      	movs	r3, #12
 8009eb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009eba:	1d3b      	adds	r3, r7, #4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	481d      	ldr	r0, [pc, #116]	; (8009f34 <HAL_FMC_MspInit+0xc0>)
 8009ec0:	f7f8 fb3c 	bl	800253c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009ec4:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8009ec8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eca:	2302      	movs	r3, #2
 8009ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009ed6:	230c      	movs	r3, #12
 8009ed8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009eda:	1d3b      	adds	r3, r7, #4
 8009edc:	4619      	mov	r1, r3
 8009ede:	4816      	ldr	r0, [pc, #88]	; (8009f38 <HAL_FMC_MspInit+0xc4>)
 8009ee0:	f7f8 fb2c 	bl	800253c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009ee4:	233f      	movs	r3, #63	; 0x3f
 8009ee6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ee8:	2302      	movs	r3, #2
 8009eea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eec:	2300      	movs	r3, #0
 8009eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009ef4:	230c      	movs	r3, #12
 8009ef6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009ef8:	1d3b      	adds	r3, r7, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	480f      	ldr	r0, [pc, #60]	; (8009f3c <HAL_FMC_MspInit+0xc8>)
 8009efe:	f7f8 fb1d 	bl	800253c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009f02:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8009f06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f08:	2302      	movs	r3, #2
 8009f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f10:	2303      	movs	r3, #3
 8009f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f14:	230c      	movs	r3, #12
 8009f16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009f18:	1d3b      	adds	r3, r7, #4
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4808      	ldr	r0, [pc, #32]	; (8009f40 <HAL_FMC_MspInit+0xcc>)
 8009f1e:	f7f8 fb0d 	bl	800253c <HAL_GPIO_Init>
 8009f22:	e000      	b.n	8009f26 <HAL_FMC_MspInit+0xb2>
    return;
 8009f24:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009f26:	3718      	adds	r7, #24
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	20000aa4 	.word	0x20000aa4
 8009f30:	40023800 	.word	0x40023800
 8009f34:	40021000 	.word	0x40021000
 8009f38:	40021400 	.word	0x40021400
 8009f3c:	40021800 	.word	0x40021800
 8009f40:	40020c00 	.word	0x40020c00

08009f44 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009f4c:	f7ff ff92 	bl	8009e74 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08c      	sub	sp, #48	; 0x30
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8009f68:	2200      	movs	r2, #0
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	2019      	movs	r0, #25
 8009f6e:	f7f8 f8e0 	bl	8002132 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8009f72:	2019      	movs	r0, #25
 8009f74:	f7f8 f8f9 	bl	800216a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	4b1f      	ldr	r3, [pc, #124]	; (8009ffc <HAL_InitTick+0xa4>)
 8009f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f80:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <HAL_InitTick+0xa4>)
 8009f82:	f043 0301 	orr.w	r3, r3, #1
 8009f86:	6453      	str	r3, [r2, #68]	; 0x44
 8009f88:	4b1c      	ldr	r3, [pc, #112]	; (8009ffc <HAL_InitTick+0xa4>)
 8009f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	60fb      	str	r3, [r7, #12]
 8009f92:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009f94:	f107 0210 	add.w	r2, r7, #16
 8009f98:	f107 0314 	add.w	r3, r7, #20
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7f9 ffde 	bl	8003f60 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8009fa4:	f7f9 ffba 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	4a13      	ldr	r2, [pc, #76]	; (800a000 <HAL_InitTick+0xa8>)
 8009fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb6:	0c9b      	lsrs	r3, r3, #18
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8009fbc:	4b11      	ldr	r3, [pc, #68]	; (800a004 <HAL_InitTick+0xac>)
 8009fbe:	4a12      	ldr	r2, [pc, #72]	; (800a008 <HAL_InitTick+0xb0>)
 8009fc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8009fc2:	4b10      	ldr	r3, [pc, #64]	; (800a004 <HAL_InitTick+0xac>)
 8009fc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009fc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8009fca:	4a0e      	ldr	r2, [pc, #56]	; (800a004 <HAL_InitTick+0xac>)
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8009fd0:	4b0c      	ldr	r3, [pc, #48]	; (800a004 <HAL_InitTick+0xac>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <HAL_InitTick+0xac>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8009fdc:	4809      	ldr	r0, [pc, #36]	; (800a004 <HAL_InitTick+0xac>)
 8009fde:	f7fc f961 	bl	80062a4 <HAL_TIM_Base_Init>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d104      	bne.n	8009ff2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8009fe8:	4806      	ldr	r0, [pc, #24]	; (800a004 <HAL_InitTick+0xac>)
 8009fea:	f7fc f986 	bl	80062fa <HAL_TIM_Base_Start_IT>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	e000      	b.n	8009ff4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3730      	adds	r7, #48	; 0x30
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	40023800 	.word	0x40023800
 800a000:	431bde83 	.word	0x431bde83
 800a004:	20002198 	.word	0x20002198
 800a008:	40010000 	.word	0x40010000

0800a00c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a010:	bf00      	nop
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  *((__IO uint32_t*)MAILBOX_ADDRESS) = MAILBOX_VAL_HARD;
 800a020:	4b03      	ldr	r3, [pc, #12]	; (800a030 <HardFault_Handler+0x14>)
 800a022:	4a04      	ldr	r2, [pc, #16]	; (800a034 <HardFault_Handler+0x18>)
 800a024:	601a      	str	r2, [r3, #0]
  MX_WWDG_Init();
 800a026:	f7ff fa3f 	bl	80094a8 <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	Error_Handler();
 800a02a:	f7f7 fdaf 	bl	8001b8c <Error_Handler>
 800a02e:	e7fc      	b.n	800a02a <HardFault_Handler+0xe>
 800a030:	40002854 	.word	0x40002854
 800a034:	0bad0bad 	.word	0x0bad0bad

0800a038 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800a038:	b480      	push	{r7}
 800a03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a03c:	e7fe      	b.n	800a03c <MemManage_Handler+0x4>

0800a03e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800a03e:	b480      	push	{r7}
 800a040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a042:	e7fe      	b.n	800a042 <BusFault_Handler+0x4>

0800a044 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800a044:	b480      	push	{r7}
 800a046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a048:	e7fe      	b.n	800a048 <UsageFault_Handler+0x4>

0800a04a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800a04a:	b480      	push	{r7}
 800a04c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a04e:	bf00      	nop
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800a05c:	f000 f99f 	bl	800a39e <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a060:	bf00      	nop
 800a062:	bd80      	pop	{r7, pc}

0800a064 <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a068:	4802      	ldr	r0, [pc, #8]	; (800a074 <SDIO_IRQHandler+0x10>)
 800a06a:	f7fb f81f 	bl	80050ac <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800a06e:	bf00      	nop
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20002034 	.word	0x20002034

0800a078 <USART1_IRQHandler>:

void  USART1_IRQHandler(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800a07c:	4802      	ldr	r0, [pc, #8]	; (800a088 <USART1_IRQHandler+0x10>)
 800a07e:	f7fd f9a9 	bl	80073d4 <HAL_UART_IRQHandler>
}
 800a082:	bf00      	nop
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20001f5c 	.word	0x20001f5c

0800a08c <CUSTOM_UART_Receive_IT_1>:

void CUSTOM_UART_Receive_IT_1(void)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
    uint16_t data;
    uint16_t stat;

    stat = huart1.Instance->SR;
 800a092:	4b16      	ldr	r3, [pc, #88]	; (800a0ec <CUSTOM_UART_Receive_IT_1+0x60>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	80fb      	strh	r3, [r7, #6]
    if(stat & UART_FLAG_RXNE)
 800a09a:	88fb      	ldrh	r3, [r7, #6]
 800a09c:	f003 0320 	and.w	r3, r3, #32
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01c      	beq.n	800a0de <CUSTOM_UART_Receive_IT_1+0x52>
    {
        data = huart1.Instance->DR;
 800a0a4:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <CUSTOM_UART_Receive_IT_1+0x60>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	80bb      	strh	r3, [r7, #4]
        if (((RxBuffHead[ESTTC_COMM_INTEFACE] + 1) % UART_BUFFER_SIZE) != RxBuffTail[ESTTC_COMM_INTEFACE])
 800a0ac:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <CUSTOM_UART_Receive_IT_1+0x64>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <CUSTOM_UART_Receive_IT_1+0x68>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d010      	beq.n	800a0de <CUSTOM_UART_Receive_IT_1+0x52>
        {
          RxBuffer[ESTTC_COMM_INTEFACE][RxBuffHead[ESTTC_COMM_INTEFACE]] = data;
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <CUSTOM_UART_Receive_IT_1+0x64>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	88ba      	ldrh	r2, [r7, #4]
 800a0c2:	b2d1      	uxtb	r1, r2
 800a0c4:	4a0c      	ldr	r2, [pc, #48]	; (800a0f8 <CUSTOM_UART_Receive_IT_1+0x6c>)
 800a0c6:	54d1      	strb	r1, [r2, r3]
          RxBuffHead[ESTTC_COMM_INTEFACE] = (RxBuffHead[ESTTC_COMM_INTEFACE] + 1) % UART_BUFFER_SIZE;
 800a0c8:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <CUSTOM_UART_Receive_IT_1+0x64>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	4a07      	ldr	r2, [pc, #28]	; (800a0f0 <CUSTOM_UART_Receive_IT_1+0x64>)
 800a0d2:	6013      	str	r3, [r2, #0]
          RxBuffLen[ESTTC_COMM_INTEFACE] ++;
 800a0d4:	4b09      	ldr	r3, [pc, #36]	; (800a0fc <CUSTOM_UART_Receive_IT_1+0x70>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	4a08      	ldr	r2, [pc, #32]	; (800a0fc <CUSTOM_UART_Receive_IT_1+0x70>)
 800a0dc:	6013      	str	r3, [r2, #0]
        }
    }
}
 800a0de:	bf00      	nop
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	20001f5c 	.word	0x20001f5c
 800a0f0:	20001c04 	.word	0x20001c04
 800a0f4:	20001bf8 	.word	0x20001bf8
 800a0f8:	200018f8 	.word	0x200018f8
 800a0fc:	20000bfc 	.word	0x20000bfc

0800a100 <UART4_IRQHandler>:

/**
* @brief This function handles UART4 global interrupt.
*/
void  UART4_IRQHandler(void)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 800a104:	4802      	ldr	r0, [pc, #8]	; (800a110 <UART4_IRQHandler+0x10>)
 800a106:	f7fd f965 	bl	80073d4 <HAL_UART_IRQHandler>
}
 800a10a:	bf00      	nop
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	200020f8 	.word	0x200020f8

0800a114 <CUSTOM_UART_Receive_IT_4>:

void CUSTOM_UART_Receive_IT_4(void)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
    uint16_t data;
    uint16_t stat;

    stat = huart4.Instance->SR;
 800a11a:	4b17      	ldr	r3, [pc, #92]	; (800a178 <CUSTOM_UART_Receive_IT_4+0x64>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	80fb      	strh	r3, [r7, #6]
    if(stat & UART_FLAG_RXNE)
 800a122:	88fb      	ldrh	r3, [r7, #6]
 800a124:	f003 0320 	and.w	r3, r3, #32
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01f      	beq.n	800a16c <CUSTOM_UART_Receive_IT_4+0x58>
    {
        data = huart4.Instance->DR;
 800a12c:	4b12      	ldr	r3, [pc, #72]	; (800a178 <CUSTOM_UART_Receive_IT_4+0x64>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	80bb      	strh	r3, [r7, #4]
        if (((RxBuffHead[ESTTC_PAYLOAD_INTEFACE] + 1) % UART_BUFFER_SIZE) != RxBuffTail[ESTTC_PAYLOAD_INTEFACE])
 800a134:	4b11      	ldr	r3, [pc, #68]	; (800a17c <CUSTOM_UART_Receive_IT_4+0x68>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	3301      	adds	r3, #1
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	4b10      	ldr	r3, [pc, #64]	; (800a180 <CUSTOM_UART_Receive_IT_4+0x6c>)
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	429a      	cmp	r2, r3
 800a142:	d013      	beq.n	800a16c <CUSTOM_UART_Receive_IT_4+0x58>
        {
          RxBuffer[ESTTC_PAYLOAD_INTEFACE][RxBuffHead[ESTTC_PAYLOAD_INTEFACE]] = data;
 800a144:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <CUSTOM_UART_Receive_IT_4+0x68>)
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	88ba      	ldrh	r2, [r7, #4]
 800a14a:	b2d1      	uxtb	r1, r2
 800a14c:	4a0d      	ldr	r2, [pc, #52]	; (800a184 <CUSTOM_UART_Receive_IT_4+0x70>)
 800a14e:	4413      	add	r3, r2
 800a150:	460a      	mov	r2, r1
 800a152:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          RxBuffHead[ESTTC_PAYLOAD_INTEFACE] = (RxBuffHead[ESTTC_PAYLOAD_INTEFACE] + 1) % UART_BUFFER_SIZE;
 800a156:	4b09      	ldr	r3, [pc, #36]	; (800a17c <CUSTOM_UART_Receive_IT_4+0x68>)
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	3301      	adds	r3, #1
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	4a07      	ldr	r2, [pc, #28]	; (800a17c <CUSTOM_UART_Receive_IT_4+0x68>)
 800a160:	6053      	str	r3, [r2, #4]
          RxBuffLen[ESTTC_PAYLOAD_INTEFACE] ++;
 800a162:	4b09      	ldr	r3, [pc, #36]	; (800a188 <CUSTOM_UART_Receive_IT_4+0x74>)
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	3301      	adds	r3, #1
 800a168:	4a07      	ldr	r2, [pc, #28]	; (800a188 <CUSTOM_UART_Receive_IT_4+0x74>)
 800a16a:	6053      	str	r3, [r2, #4]
        }
    }
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	200020f8 	.word	0x200020f8
 800a17c:	20001c04 	.word	0x20001c04
 800a180:	20001bf8 	.word	0x20001bf8
 800a184:	200018f8 	.word	0x200018f8
 800a188:	20000bfc 	.word	0x20000bfc

0800a18c <USART6_IRQHandler>:
void  USART6_IRQHandler(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart6);
 800a190:	4802      	ldr	r0, [pc, #8]	; (800a19c <USART6_IRQHandler+0x10>)
 800a192:	f7fd f91f 	bl	80073d4 <HAL_UART_IRQHandler>
}
 800a196:	bf00      	nop
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	200020b8 	.word	0x200020b8

0800a1a0 <CUSTOM_UART_Receive_IT_6>:

void CUSTOM_UART_Receive_IT_6(void)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
    uint16_t data;
    uint16_t stat;

    stat = huart6.Instance->SR;
 800a1a6:	4b17      	ldr	r3, [pc, #92]	; (800a204 <CUSTOM_UART_Receive_IT_6+0x64>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	80fb      	strh	r3, [r7, #6]
    if(stat & UART_FLAG_RXNE)
 800a1ae:	88fb      	ldrh	r3, [r7, #6]
 800a1b0:	f003 0320 	and.w	r3, r3, #32
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01f      	beq.n	800a1f8 <CUSTOM_UART_Receive_IT_6+0x58>
    {
        data = huart6.Instance->DR;
 800a1b8:	4b12      	ldr	r3, [pc, #72]	; (800a204 <CUSTOM_UART_Receive_IT_6+0x64>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	80bb      	strh	r3, [r7, #4]
        if (((RxBuffHead[ESTTC_SYSCOMM_INTEFACE] + 1) % UART_BUFFER_SIZE) != RxBuffTail[ESTTC_SYSCOMM_INTEFACE])
 800a1c0:	4b11      	ldr	r3, [pc, #68]	; (800a208 <CUSTOM_UART_Receive_IT_6+0x68>)
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	4b10      	ldr	r3, [pc, #64]	; (800a20c <CUSTOM_UART_Receive_IT_6+0x6c>)
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d013      	beq.n	800a1f8 <CUSTOM_UART_Receive_IT_6+0x58>
        {
          RxBuffer[ESTTC_SYSCOMM_INTEFACE][RxBuffHead[ESTTC_SYSCOMM_INTEFACE]] = data;
 800a1d0:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <CUSTOM_UART_Receive_IT_6+0x68>)
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	88ba      	ldrh	r2, [r7, #4]
 800a1d6:	b2d1      	uxtb	r1, r2
 800a1d8:	4a0d      	ldr	r2, [pc, #52]	; (800a210 <CUSTOM_UART_Receive_IT_6+0x70>)
 800a1da:	4413      	add	r3, r2
 800a1dc:	460a      	mov	r2, r1
 800a1de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          RxBuffHead[ESTTC_SYSCOMM_INTEFACE] = (RxBuffHead[ESTTC_SYSCOMM_INTEFACE] + 1) % UART_BUFFER_SIZE;
 800a1e2:	4b09      	ldr	r3, [pc, #36]	; (800a208 <CUSTOM_UART_Receive_IT_6+0x68>)
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	4a07      	ldr	r2, [pc, #28]	; (800a208 <CUSTOM_UART_Receive_IT_6+0x68>)
 800a1ec:	6093      	str	r3, [r2, #8]
          RxBuffLen[ESTTC_SYSCOMM_INTEFACE] ++;
 800a1ee:	4b09      	ldr	r3, [pc, #36]	; (800a214 <CUSTOM_UART_Receive_IT_6+0x74>)
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	4a07      	ldr	r2, [pc, #28]	; (800a214 <CUSTOM_UART_Receive_IT_6+0x74>)
 800a1f6:	6093      	str	r3, [r2, #8]
        }
    }
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	200020b8 	.word	0x200020b8
 800a208:	20001c04 	.word	0x20001c04
 800a20c:	20001bf8 	.word	0x20001bf8
 800a210:	200018f8 	.word	0x200018f8
 800a214:	20000bfc 	.word	0x20000bfc

0800a218 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a21c:	4802      	ldr	r0, [pc, #8]	; (800a228 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a21e:	f7fc f8bc 	bl	800639a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a222:	bf00      	nop
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20002198 	.word	0x20002198

0800a22c <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800a230:	4802      	ldr	r0, [pc, #8]	; (800a23c <DMA2_Stream3_IRQHandler+0x10>)
 800a232:	f7f7 fff3 	bl	800221c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800a236:	bf00      	nop
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20001c10 	.word	0x20001c10

0800a240 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800a244:	4802      	ldr	r0, [pc, #8]	; (800a250 <DMA2_Stream6_IRQHandler+0x10>)
 800a246:	f7f7 ffe9 	bl	800221c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a24a:	bf00      	nop
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20001fc0 	.word	0x20001fc0

0800a254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a254:	b480      	push	{r7}
 800a256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a258:	4b16      	ldr	r3, [pc, #88]	; (800a2b4 <SystemInit+0x60>)
 800a25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25e:	4a15      	ldr	r2, [pc, #84]	; (800a2b4 <SystemInit+0x60>)
 800a260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a268:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <SystemInit+0x64>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a12      	ldr	r2, [pc, #72]	; (800a2b8 <SystemInit+0x64>)
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a274:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <SystemInit+0x64>)
 800a276:	2200      	movs	r2, #0
 800a278:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a27a:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <SystemInit+0x64>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a0e      	ldr	r2, [pc, #56]	; (800a2b8 <SystemInit+0x64>)
 800a280:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a288:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a28a:	4b0b      	ldr	r3, [pc, #44]	; (800a2b8 <SystemInit+0x64>)
 800a28c:	4a0b      	ldr	r2, [pc, #44]	; (800a2bc <SystemInit+0x68>)
 800a28e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a290:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <SystemInit+0x64>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a08      	ldr	r2, [pc, #32]	; (800a2b8 <SystemInit+0x64>)
 800a296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a29a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a29c:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <SystemInit+0x64>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a2a2:	4b04      	ldr	r3, [pc, #16]	; (800a2b4 <SystemInit+0x60>)
 800a2a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a2a8:	609a      	str	r2, [r3, #8]
#endif
}
 800a2aa:	bf00      	nop
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	e000ed00 	.word	0xe000ed00
 800a2b8:	40023800 	.word	0x40023800
 800a2bc:	24003010 	.word	0x24003010

0800a2c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a2d6:	4b1f      	ldr	r3, [pc, #124]	; (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2d8:	7a5b      	ldrb	r3, [r3, #9]
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d831      	bhi.n	800a344 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2e0:	4b1c      	ldr	r3, [pc, #112]	; (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2e2:	7a5b      	ldrb	r3, [r3, #9]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	4b1a      	ldr	r3, [pc, #104]	; (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a2ee:	4b19      	ldr	r3, [pc, #100]	; (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2f0:	7a5b      	ldrb	r3, [r3, #9]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	4a17      	ldr	r2, [pc, #92]	; (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a2fe:	4b15      	ldr	r3, [pc, #84]	; (800a354 <FATFS_LinkDriverEx+0x94>)
 800a300:	7a5b      	ldrb	r3, [r3, #9]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	4b13      	ldr	r3, [pc, #76]	; (800a354 <FATFS_LinkDriverEx+0x94>)
 800a308:	4413      	add	r3, r2
 800a30a:	79fa      	ldrb	r2, [r7, #7]
 800a30c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a30e:	4b11      	ldr	r3, [pc, #68]	; (800a354 <FATFS_LinkDriverEx+0x94>)
 800a310:	7a5b      	ldrb	r3, [r3, #9]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	b2d1      	uxtb	r1, r2
 800a318:	4a0e      	ldr	r2, [pc, #56]	; (800a354 <FATFS_LinkDriverEx+0x94>)
 800a31a:	7251      	strb	r1, [r2, #9]
 800a31c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a31e:	7dbb      	ldrb	r3, [r7, #22]
 800a320:	3330      	adds	r3, #48	; 0x30
 800a322:	b2da      	uxtb	r2, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	3301      	adds	r3, #1
 800a32c:	223a      	movs	r2, #58	; 0x3a
 800a32e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	3302      	adds	r3, #2
 800a334:	222f      	movs	r2, #47	; 0x2f
 800a336:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	3303      	adds	r3, #3
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a344:	7dfb      	ldrb	r3, [r7, #23]
}
 800a346:	4618      	mov	r0, r3
 800a348:	371c      	adds	r7, #28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000aac 	.word	0x20000aac

0800a358 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a362:	2200      	movs	r2, #0
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff ffaa 	bl	800a2c0 <FATFS_LinkDriverEx>
 800a36c:	4603      	mov	r3, r0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <osDelay+0x16>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	e000      	b.n	800a38e <osDelay+0x18>
 800a38c:	2301      	movs	r3, #1
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 f898 	bl	800a4c4 <vTaskDelay>
  
  return osOK;
 800a394:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a3a2:	f000 faa9 	bl	800a8f8 <xTaskGetSchedulerState>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d001      	beq.n	800a3b0 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800a3ac:	f000 fbcc 	bl	800ab48 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800a3b0:	bf00      	nop
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	1c5a      	adds	r2, r3, #1
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	601a      	str	r2, [r3, #0]
}
 800a3f0:	bf00      	nop
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a412:	d103      	bne.n	800a41c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	e00c      	b.n	800a436 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3308      	adds	r3, #8
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	e002      	b.n	800a42a <vListInsert+0x2e>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	60fb      	str	r3, [r7, #12]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	429a      	cmp	r2, r3
 800a434:	d2f6      	bcs.n	800a424 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	601a      	str	r2, [r3, #0]
}
 800a462:	bf00      	nop
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	6892      	ldr	r2, [r2, #8]
 800a484:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6852      	ldr	r2, [r2, #4]
 800a48e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	429a      	cmp	r2, r3
 800a498:	d103      	bne.n	800a4a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689a      	ldr	r2, [r3, #8]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	1e5a      	subs	r2, r3, #1
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d016      	beq.n	800a504 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4d6:	4b13      	ldr	r3, [pc, #76]	; (800a524 <vTaskDelay+0x60>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <vTaskDelay+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	60bb      	str	r3, [r7, #8]
 800a4f0:	e7fe      	b.n	800a4f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a4f2:	f000 f81b 	bl	800a52c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fa1b 	bl	800a934 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4fe:	f000 f823 	bl	800a548 <xTaskResumeAll>
 800a502:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d107      	bne.n	800a51a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a50a:	4b07      	ldr	r3, [pc, #28]	; (800a528 <vTaskDelay+0x64>)
 800a50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a51a:	bf00      	nop
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000be0 	.word	0x20000be0
 800a528:	e000ed04 	.word	0xe000ed04

0800a52c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a530:	4b04      	ldr	r3, [pc, #16]	; (800a544 <vTaskSuspendAll+0x18>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3301      	adds	r3, #1
 800a536:	4a03      	ldr	r2, [pc, #12]	; (800a544 <vTaskSuspendAll+0x18>)
 800a538:	6013      	str	r3, [r2, #0]
}
 800a53a:	bf00      	nop
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	20000be0 	.word	0x20000be0

0800a548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a552:	2300      	movs	r3, #0
 800a554:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a556:	4b41      	ldr	r3, [pc, #260]	; (800a65c <xTaskResumeAll+0x114>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d109      	bne.n	800a572 <xTaskResumeAll+0x2a>
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	e7fe      	b.n	800a570 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a572:	f000 fa59 	bl	800aa28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a576:	4b39      	ldr	r3, [pc, #228]	; (800a65c <xTaskResumeAll+0x114>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3b01      	subs	r3, #1
 800a57c:	4a37      	ldr	r2, [pc, #220]	; (800a65c <xTaskResumeAll+0x114>)
 800a57e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a580:	4b36      	ldr	r3, [pc, #216]	; (800a65c <xTaskResumeAll+0x114>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d161      	bne.n	800a64c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a588:	4b35      	ldr	r3, [pc, #212]	; (800a660 <xTaskResumeAll+0x118>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d05d      	beq.n	800a64c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a590:	e02e      	b.n	800a5f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a592:	4b34      	ldr	r3, [pc, #208]	; (800a664 <xTaskResumeAll+0x11c>)
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3318      	adds	r3, #24
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff ff65 	bl	800a46e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff ff60 	bl	800a46e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	409a      	lsls	r2, r3
 800a5b6:	4b2c      	ldr	r3, [pc, #176]	; (800a668 <xTaskResumeAll+0x120>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	4a2a      	ldr	r2, [pc, #168]	; (800a668 <xTaskResumeAll+0x120>)
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4a27      	ldr	r2, [pc, #156]	; (800a66c <xTaskResumeAll+0x124>)
 800a5ce:	441a      	add	r2, r3
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	f7ff feec 	bl	800a3b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e0:	4b23      	ldr	r3, [pc, #140]	; (800a670 <xTaskResumeAll+0x128>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d302      	bcc.n	800a5f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a5ea:	4b22      	ldr	r3, [pc, #136]	; (800a674 <xTaskResumeAll+0x12c>)
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5f0:	4b1c      	ldr	r3, [pc, #112]	; (800a664 <xTaskResumeAll+0x11c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1cc      	bne.n	800a592 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a5fe:	f000 f955 	bl	800a8ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a602:	4b1d      	ldr	r3, [pc, #116]	; (800a678 <xTaskResumeAll+0x130>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d010      	beq.n	800a630 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a60e:	f000 f837 	bl	800a680 <xTaskIncrementTick>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a618:	4b16      	ldr	r3, [pc, #88]	; (800a674 <xTaskResumeAll+0x12c>)
 800a61a:	2201      	movs	r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3b01      	subs	r3, #1
 800a622:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1f1      	bne.n	800a60e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a62a:	4b13      	ldr	r3, [pc, #76]	; (800a678 <xTaskResumeAll+0x130>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a630:	4b10      	ldr	r3, [pc, #64]	; (800a674 <xTaskResumeAll+0x12c>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d009      	beq.n	800a64c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a638:	2301      	movs	r3, #1
 800a63a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a63c:	4b0f      	ldr	r3, [pc, #60]	; (800a67c <xTaskResumeAll+0x134>)
 800a63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a64c:	f000 fa1a 	bl	800aa84 <vPortExitCritical>

	return xAlreadyYielded;
 800a650:	68bb      	ldr	r3, [r7, #8]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20000be0 	.word	0x20000be0
 800a660:	20000bb8 	.word	0x20000bb8
 800a664:	20000b78 	.word	0x20000b78
 800a668:	20000bc0 	.word	0x20000bc0
 800a66c:	20000abc 	.word	0x20000abc
 800a670:	20000ab8 	.word	0x20000ab8
 800a674:	20000bcc 	.word	0x20000bcc
 800a678:	20000bc8 	.word	0x20000bc8
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a686:	2300      	movs	r3, #0
 800a688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a68a:	4b50      	ldr	r3, [pc, #320]	; (800a7cc <xTaskIncrementTick+0x14c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f040 808c 	bne.w	800a7ac <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800a694:	4b4e      	ldr	r3, [pc, #312]	; (800a7d0 <xTaskIncrementTick+0x150>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a69c:	4a4c      	ldr	r2, [pc, #304]	; (800a7d0 <xTaskIncrementTick+0x150>)
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d11f      	bne.n	800a6e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6a8:	4b4a      	ldr	r3, [pc, #296]	; (800a7d4 <xTaskIncrementTick+0x154>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d009      	beq.n	800a6c6 <xTaskIncrementTick+0x46>
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	e7fe      	b.n	800a6c4 <xTaskIncrementTick+0x44>
 800a6c6:	4b43      	ldr	r3, [pc, #268]	; (800a7d4 <xTaskIncrementTick+0x154>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	4b42      	ldr	r3, [pc, #264]	; (800a7d8 <xTaskIncrementTick+0x158>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a40      	ldr	r2, [pc, #256]	; (800a7d4 <xTaskIncrementTick+0x154>)
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	4a40      	ldr	r2, [pc, #256]	; (800a7d8 <xTaskIncrementTick+0x158>)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	4b40      	ldr	r3, [pc, #256]	; (800a7dc <xTaskIncrementTick+0x15c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	4a3e      	ldr	r2, [pc, #248]	; (800a7dc <xTaskIncrementTick+0x15c>)
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	f000 f8e2 	bl	800a8ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a6e8:	4b3d      	ldr	r3, [pc, #244]	; (800a7e0 <xTaskIncrementTick+0x160>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d34d      	bcc.n	800a78e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6f2:	4b38      	ldr	r3, [pc, #224]	; (800a7d4 <xTaskIncrementTick+0x154>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <xTaskIncrementTick+0x80>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <xTaskIncrementTick+0x82>
 800a700:	2300      	movs	r3, #0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d004      	beq.n	800a710 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a706:	4b36      	ldr	r3, [pc, #216]	; (800a7e0 <xTaskIncrementTick+0x160>)
 800a708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a70c:	601a      	str	r2, [r3, #0]
					break;
 800a70e:	e03e      	b.n	800a78e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a710:	4b30      	ldr	r3, [pc, #192]	; (800a7d4 <xTaskIncrementTick+0x154>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	429a      	cmp	r2, r3
 800a726:	d203      	bcs.n	800a730 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a728:	4a2d      	ldr	r2, [pc, #180]	; (800a7e0 <xTaskIncrementTick+0x160>)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6013      	str	r3, [r2, #0]
						break;
 800a72e:	e02e      	b.n	800a78e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	3304      	adds	r3, #4
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fe9a 	bl	800a46e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	3318      	adds	r3, #24
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff fe91 	bl	800a46e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	2201      	movs	r2, #1
 800a752:	409a      	lsls	r2, r3
 800a754:	4b23      	ldr	r3, [pc, #140]	; (800a7e4 <xTaskIncrementTick+0x164>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4313      	orrs	r3, r2
 800a75a:	4a22      	ldr	r2, [pc, #136]	; (800a7e4 <xTaskIncrementTick+0x164>)
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a762:	4613      	mov	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4a1f      	ldr	r2, [pc, #124]	; (800a7e8 <xTaskIncrementTick+0x168>)
 800a76c:	441a      	add	r2, r3
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	3304      	adds	r3, #4
 800a772:	4619      	mov	r1, r3
 800a774:	4610      	mov	r0, r2
 800a776:	f7ff fe1d 	bl	800a3b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77e:	4b1b      	ldr	r3, [pc, #108]	; (800a7ec <xTaskIncrementTick+0x16c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	429a      	cmp	r2, r3
 800a786:	d3b4      	bcc.n	800a6f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a788:	2301      	movs	r3, #1
 800a78a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a78c:	e7b1      	b.n	800a6f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a78e:	4b17      	ldr	r3, [pc, #92]	; (800a7ec <xTaskIncrementTick+0x16c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a794:	4914      	ldr	r1, [pc, #80]	; (800a7e8 <xTaskIncrementTick+0x168>)
 800a796:	4613      	mov	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	440b      	add	r3, r1
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d907      	bls.n	800a7b6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	617b      	str	r3, [r7, #20]
 800a7aa:	e004      	b.n	800a7b6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a7ac:	4b10      	ldr	r3, [pc, #64]	; (800a7f0 <xTaskIncrementTick+0x170>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	4a0f      	ldr	r2, [pc, #60]	; (800a7f0 <xTaskIncrementTick+0x170>)
 800a7b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a7b6:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <xTaskIncrementTick+0x174>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a7c2:	697b      	ldr	r3, [r7, #20]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000be0 	.word	0x20000be0
 800a7d0:	20000bbc 	.word	0x20000bbc
 800a7d4:	20000b70 	.word	0x20000b70
 800a7d8:	20000b74 	.word	0x20000b74
 800a7dc:	20000bd0 	.word	0x20000bd0
 800a7e0:	20000bd8 	.word	0x20000bd8
 800a7e4:	20000bc0 	.word	0x20000bc0
 800a7e8:	20000abc 	.word	0x20000abc
 800a7ec:	20000ab8 	.word	0x20000ab8
 800a7f0:	20000bc8 	.word	0x20000bc8
 800a7f4:	20000bcc 	.word	0x20000bcc

0800a7f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a7fe:	4b26      	ldr	r3, [pc, #152]	; (800a898 <vTaskSwitchContext+0xa0>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a806:	4b25      	ldr	r3, [pc, #148]	; (800a89c <vTaskSwitchContext+0xa4>)
 800a808:	2201      	movs	r2, #1
 800a80a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a80c:	e03e      	b.n	800a88c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a80e:	4b23      	ldr	r3, [pc, #140]	; (800a89c <vTaskSwitchContext+0xa4>)
 800a810:	2200      	movs	r2, #0
 800a812:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a814:	4b22      	ldr	r3, [pc, #136]	; (800a8a0 <vTaskSwitchContext+0xa8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	fab3 f383 	clz	r3, r3
 800a820:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a822:	7afb      	ldrb	r3, [r7, #11]
 800a824:	f1c3 031f 	rsb	r3, r3, #31
 800a828:	617b      	str	r3, [r7, #20]
 800a82a:	491e      	ldr	r1, [pc, #120]	; (800a8a4 <vTaskSwitchContext+0xac>)
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	440b      	add	r3, r1
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d109      	bne.n	800a852 <vTaskSwitchContext+0x5a>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	607b      	str	r3, [r7, #4]
 800a850:	e7fe      	b.n	800a850 <vTaskSwitchContext+0x58>
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4a11      	ldr	r2, [pc, #68]	; (800a8a4 <vTaskSwitchContext+0xac>)
 800a85e:	4413      	add	r3, r2
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	605a      	str	r2, [r3, #4]
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	3308      	adds	r3, #8
 800a874:	429a      	cmp	r2, r3
 800a876:	d104      	bne.n	800a882 <vTaskSwitchContext+0x8a>
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	605a      	str	r2, [r3, #4]
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	4a07      	ldr	r2, [pc, #28]	; (800a8a8 <vTaskSwitchContext+0xb0>)
 800a88a:	6013      	str	r3, [r2, #0]
}
 800a88c:	bf00      	nop
 800a88e:	371c      	adds	r7, #28
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	20000be0 	.word	0x20000be0
 800a89c:	20000bcc 	.word	0x20000bcc
 800a8a0:	20000bc0 	.word	0x20000bc0
 800a8a4:	20000abc 	.word	0x20000abc
 800a8a8:	20000ab8 	.word	0x20000ab8

0800a8ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <prvResetNextTaskUnblockTime+0x44>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <prvResetNextTaskUnblockTime+0x14>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <prvResetNextTaskUnblockTime+0x16>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d004      	beq.n	800a8d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <prvResetNextTaskUnblockTime+0x48>)
 800a8c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8ce:	e008      	b.n	800a8e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <prvResetNextTaskUnblockTime+0x44>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	4a05      	ldr	r2, [pc, #20]	; (800a8f4 <prvResetNextTaskUnblockTime+0x48>)
 800a8e0:	6013      	str	r3, [r2, #0]
}
 800a8e2:	bf00      	nop
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	20000b70 	.word	0x20000b70
 800a8f4:	20000bd8 	.word	0x20000bd8

0800a8f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8fe:	4b0b      	ldr	r3, [pc, #44]	; (800a92c <xTaskGetSchedulerState+0x34>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a906:	2301      	movs	r3, #1
 800a908:	607b      	str	r3, [r7, #4]
 800a90a:	e008      	b.n	800a91e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a90c:	4b08      	ldr	r3, [pc, #32]	; (800a930 <xTaskGetSchedulerState+0x38>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a914:	2302      	movs	r3, #2
 800a916:	607b      	str	r3, [r7, #4]
 800a918:	e001      	b.n	800a91e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a91a:	2300      	movs	r3, #0
 800a91c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a91e:	687b      	ldr	r3, [r7, #4]
	}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	20000bc4 	.word	0x20000bc4
 800a930:	20000be0 	.word	0x20000be0

0800a934 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a93e:	4b29      	ldr	r3, [pc, #164]	; (800a9e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a944:	4b28      	ldr	r3, [pc, #160]	; (800a9e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3304      	adds	r3, #4
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7ff fd8f 	bl	800a46e <uxListRemove>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10b      	bne.n	800a96e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a956:	4b24      	ldr	r3, [pc, #144]	; (800a9e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95c:	2201      	movs	r2, #1
 800a95e:	fa02 f303 	lsl.w	r3, r2, r3
 800a962:	43da      	mvns	r2, r3
 800a964:	4b21      	ldr	r3, [pc, #132]	; (800a9ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4013      	ands	r3, r2
 800a96a:	4a20      	ldr	r2, [pc, #128]	; (800a9ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800a96c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a974:	d10a      	bne.n	800a98c <prvAddCurrentTaskToDelayedList+0x58>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d007      	beq.n	800a98c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a97c:	4b1a      	ldr	r3, [pc, #104]	; (800a9e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3304      	adds	r3, #4
 800a982:	4619      	mov	r1, r3
 800a984:	481a      	ldr	r0, [pc, #104]	; (800a9f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a986:	f7ff fd15 	bl	800a3b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a98a:	e026      	b.n	800a9da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a994:	4b14      	ldr	r3, [pc, #80]	; (800a9e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d209      	bcs.n	800a9b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9a4:	4b13      	ldr	r3, [pc, #76]	; (800a9f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	4b0f      	ldr	r3, [pc, #60]	; (800a9e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f7ff fd23 	bl	800a3fc <vListInsert>
}
 800a9b6:	e010      	b.n	800a9da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9b8:	4b0f      	ldr	r3, [pc, #60]	; (800a9f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	f7ff fd19 	bl	800a3fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9ca:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d202      	bcs.n	800a9da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a9d4:	4a09      	ldr	r2, [pc, #36]	; (800a9fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	6013      	str	r3, [r2, #0]
}
 800a9da:	bf00      	nop
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20000bbc 	.word	0x20000bbc
 800a9e8:	20000ab8 	.word	0x20000ab8
 800a9ec:	20000bc0 	.word	0x20000bc0
 800a9f0:	20000ba4 	.word	0x20000ba4
 800a9f4:	20000b74 	.word	0x20000b74
 800a9f8:	20000b70 	.word	0x20000b70
 800a9fc:	20000bd8 	.word	0x20000bd8

0800aa00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa00:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <pxCurrentTCBConst2>)
 800aa02:	6819      	ldr	r1, [r3, #0]
 800aa04:	6808      	ldr	r0, [r1, #0]
 800aa06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	f380 8809 	msr	PSP, r0
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f04f 0000 	mov.w	r0, #0
 800aa16:	f380 8811 	msr	BASEPRI, r0
 800aa1a:	4770      	bx	lr
 800aa1c:	f3af 8000 	nop.w

0800aa20 <pxCurrentTCBConst2>:
 800aa20:	20000ab8 	.word	0x20000ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop

0800aa28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa40:	4b0e      	ldr	r3, [pc, #56]	; (800aa7c <vPortEnterCritical+0x54>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3301      	adds	r3, #1
 800aa46:	4a0d      	ldr	r2, [pc, #52]	; (800aa7c <vPortEnterCritical+0x54>)
 800aa48:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa4a:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <vPortEnterCritical+0x54>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d10e      	bne.n	800aa70 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa52:	4b0b      	ldr	r3, [pc, #44]	; (800aa80 <vPortEnterCritical+0x58>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d009      	beq.n	800aa70 <vPortEnterCritical+0x48>
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	603b      	str	r3, [r7, #0]
 800aa6e:	e7fe      	b.n	800aa6e <vPortEnterCritical+0x46>
	}
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	20000014 	.word	0x20000014
 800aa80:	e000ed04 	.word	0xe000ed04

0800aa84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa8a:	4b11      	ldr	r3, [pc, #68]	; (800aad0 <vPortExitCritical+0x4c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d109      	bne.n	800aaa6 <vPortExitCritical+0x22>
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	607b      	str	r3, [r7, #4]
 800aaa4:	e7fe      	b.n	800aaa4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800aaa6:	4b0a      	ldr	r3, [pc, #40]	; (800aad0 <vPortExitCritical+0x4c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	4a08      	ldr	r2, [pc, #32]	; (800aad0 <vPortExitCritical+0x4c>)
 800aaae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aab0:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <vPortExitCritical+0x4c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d104      	bne.n	800aac2 <vPortExitCritical+0x3e>
 800aab8:	2300      	movs	r3, #0
 800aaba:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aac2:	bf00      	nop
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	20000014 	.word	0x20000014
	...

0800aae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aae0:	f3ef 8009 	mrs	r0, PSP
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	4b15      	ldr	r3, [pc, #84]	; (800ab40 <pxCurrentTCBConst>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	f01e 0f10 	tst.w	lr, #16
 800aaf0:	bf08      	it	eq
 800aaf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aaf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafa:	6010      	str	r0, [r2, #0]
 800aafc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800ab00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab04:	f380 8811 	msr	BASEPRI, r0
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f7ff fe72 	bl	800a7f8 <vTaskSwitchContext>
 800ab14:	f04f 0000 	mov.w	r0, #0
 800ab18:	f380 8811 	msr	BASEPRI, r0
 800ab1c:	bc08      	pop	{r3}
 800ab1e:	6819      	ldr	r1, [r3, #0]
 800ab20:	6808      	ldr	r0, [r1, #0]
 800ab22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab26:	f01e 0f10 	tst.w	lr, #16
 800ab2a:	bf08      	it	eq
 800ab2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab30:	f380 8809 	msr	PSP, r0
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	f3af 8000 	nop.w

0800ab40 <pxCurrentTCBConst>:
 800ab40:	20000ab8 	.word	0x20000ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop

0800ab48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab60:	f7ff fd8e 	bl	800a680 <xTaskIncrementTick>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <xPortSysTickHandler+0x3c>)
 800ab6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	2300      	movs	r3, #0
 800ab74:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	e000ed04 	.word	0xe000ed04

0800ab88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ab88:	f8df d034 	ldr.w	sp, [pc, #52]	; 800abc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ab8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ab8e:	e003      	b.n	800ab98 <LoopCopyDataInit>

0800ab90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ab90:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ab92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ab94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ab96:	3104      	adds	r1, #4

0800ab98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ab98:	480b      	ldr	r0, [pc, #44]	; (800abc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ab9a:	4b0c      	ldr	r3, [pc, #48]	; (800abcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ab9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ab9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800aba0:	d3f6      	bcc.n	800ab90 <CopyDataInit>
  ldr  r2, =_sbss
 800aba2:	4a0b      	ldr	r2, [pc, #44]	; (800abd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800aba4:	e002      	b.n	800abac <LoopFillZerobss>

0800aba6 <FillZerobss>:

/* Zero fill the bss segment. */  
 FillZerobss:
  movs  r3, #0
 800aba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800aba8:	f842 3b04 	str.w	r3, [r2], #4

0800abac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800abac:	4b09      	ldr	r3, [pc, #36]	; (800abd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800abae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800abb0:	d3f9      	bcc.n	800aba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800abb2:	f7ff fb4f 	bl	800a254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800abb6:	f000 f811 	bl	800abdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800abba:	f7f6 fda3 	bl	8001704 <main>
  bx  lr    
 800abbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800abc0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800abc4:	0800d11c 	.word	0x0800d11c
  ldr  r0, =_sdata
 800abc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800abcc:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800abd0:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800abd4:	200021d8 	.word	0x200021d8

0800abd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800abd8:	e7fe      	b.n	800abd8 <ADC_IRQHandler>
	...

0800abdc <__libc_init_array>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	4e0d      	ldr	r6, [pc, #52]	; (800ac14 <__libc_init_array+0x38>)
 800abe0:	4c0d      	ldr	r4, [pc, #52]	; (800ac18 <__libc_init_array+0x3c>)
 800abe2:	1ba4      	subs	r4, r4, r6
 800abe4:	10a4      	asrs	r4, r4, #2
 800abe6:	2500      	movs	r5, #0
 800abe8:	42a5      	cmp	r5, r4
 800abea:	d109      	bne.n	800ac00 <__libc_init_array+0x24>
 800abec:	4e0b      	ldr	r6, [pc, #44]	; (800ac1c <__libc_init_array+0x40>)
 800abee:	4c0c      	ldr	r4, [pc, #48]	; (800ac20 <__libc_init_array+0x44>)
 800abf0:	f002 f88e 	bl	800cd10 <_init>
 800abf4:	1ba4      	subs	r4, r4, r6
 800abf6:	10a4      	asrs	r4, r4, #2
 800abf8:	2500      	movs	r5, #0
 800abfa:	42a5      	cmp	r5, r4
 800abfc:	d105      	bne.n	800ac0a <__libc_init_array+0x2e>
 800abfe:	bd70      	pop	{r4, r5, r6, pc}
 800ac00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac04:	4798      	blx	r3
 800ac06:	3501      	adds	r5, #1
 800ac08:	e7ee      	b.n	800abe8 <__libc_init_array+0xc>
 800ac0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac0e:	4798      	blx	r3
 800ac10:	3501      	adds	r5, #1
 800ac12:	e7f2      	b.n	800abfa <__libc_init_array+0x1e>
 800ac14:	0800d114 	.word	0x0800d114
 800ac18:	0800d114 	.word	0x0800d114
 800ac1c:	0800d114 	.word	0x0800d114
 800ac20:	0800d118 	.word	0x0800d118

0800ac24 <malloc>:
 800ac24:	4b02      	ldr	r3, [pc, #8]	; (800ac30 <malloc+0xc>)
 800ac26:	4601      	mov	r1, r0
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f000 b86d 	b.w	800ad08 <_malloc_r>
 800ac2e:	bf00      	nop
 800ac30:	20000018 	.word	0x20000018

0800ac34 <free>:
 800ac34:	4b02      	ldr	r3, [pc, #8]	; (800ac40 <free+0xc>)
 800ac36:	4601      	mov	r1, r0
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	f000 b817 	b.w	800ac6c <_free_r>
 800ac3e:	bf00      	nop
 800ac40:	20000018 	.word	0x20000018

0800ac44 <memcpy>:
 800ac44:	b510      	push	{r4, lr}
 800ac46:	1e43      	subs	r3, r0, #1
 800ac48:	440a      	add	r2, r1
 800ac4a:	4291      	cmp	r1, r2
 800ac4c:	d100      	bne.n	800ac50 <memcpy+0xc>
 800ac4e:	bd10      	pop	{r4, pc}
 800ac50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac58:	e7f7      	b.n	800ac4a <memcpy+0x6>

0800ac5a <memset>:
 800ac5a:	4402      	add	r2, r0
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d100      	bne.n	800ac64 <memset+0xa>
 800ac62:	4770      	bx	lr
 800ac64:	f803 1b01 	strb.w	r1, [r3], #1
 800ac68:	e7f9      	b.n	800ac5e <memset+0x4>
	...

0800ac6c <_free_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4605      	mov	r5, r0
 800ac70:	2900      	cmp	r1, #0
 800ac72:	d045      	beq.n	800ad00 <_free_r+0x94>
 800ac74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac78:	1f0c      	subs	r4, r1, #4
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	bfb8      	it	lt
 800ac7e:	18e4      	addlt	r4, r4, r3
 800ac80:	f001 fb94 	bl	800c3ac <__malloc_lock>
 800ac84:	4a1f      	ldr	r2, [pc, #124]	; (800ad04 <_free_r+0x98>)
 800ac86:	6813      	ldr	r3, [r2, #0]
 800ac88:	4610      	mov	r0, r2
 800ac8a:	b933      	cbnz	r3, 800ac9a <_free_r+0x2e>
 800ac8c:	6063      	str	r3, [r4, #4]
 800ac8e:	6014      	str	r4, [r2, #0]
 800ac90:	4628      	mov	r0, r5
 800ac92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac96:	f001 bb8a 	b.w	800c3ae <__malloc_unlock>
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	d90c      	bls.n	800acb8 <_free_r+0x4c>
 800ac9e:	6821      	ldr	r1, [r4, #0]
 800aca0:	1862      	adds	r2, r4, r1
 800aca2:	4293      	cmp	r3, r2
 800aca4:	bf04      	itt	eq
 800aca6:	681a      	ldreq	r2, [r3, #0]
 800aca8:	685b      	ldreq	r3, [r3, #4]
 800acaa:	6063      	str	r3, [r4, #4]
 800acac:	bf04      	itt	eq
 800acae:	1852      	addeq	r2, r2, r1
 800acb0:	6022      	streq	r2, [r4, #0]
 800acb2:	6004      	str	r4, [r0, #0]
 800acb4:	e7ec      	b.n	800ac90 <_free_r+0x24>
 800acb6:	4613      	mov	r3, r2
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	b10a      	cbz	r2, 800acc0 <_free_r+0x54>
 800acbc:	42a2      	cmp	r2, r4
 800acbe:	d9fa      	bls.n	800acb6 <_free_r+0x4a>
 800acc0:	6819      	ldr	r1, [r3, #0]
 800acc2:	1858      	adds	r0, r3, r1
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d10b      	bne.n	800ace0 <_free_r+0x74>
 800acc8:	6820      	ldr	r0, [r4, #0]
 800acca:	4401      	add	r1, r0
 800accc:	1858      	adds	r0, r3, r1
 800acce:	4282      	cmp	r2, r0
 800acd0:	6019      	str	r1, [r3, #0]
 800acd2:	d1dd      	bne.n	800ac90 <_free_r+0x24>
 800acd4:	6810      	ldr	r0, [r2, #0]
 800acd6:	6852      	ldr	r2, [r2, #4]
 800acd8:	605a      	str	r2, [r3, #4]
 800acda:	4401      	add	r1, r0
 800acdc:	6019      	str	r1, [r3, #0]
 800acde:	e7d7      	b.n	800ac90 <_free_r+0x24>
 800ace0:	d902      	bls.n	800ace8 <_free_r+0x7c>
 800ace2:	230c      	movs	r3, #12
 800ace4:	602b      	str	r3, [r5, #0]
 800ace6:	e7d3      	b.n	800ac90 <_free_r+0x24>
 800ace8:	6820      	ldr	r0, [r4, #0]
 800acea:	1821      	adds	r1, r4, r0
 800acec:	428a      	cmp	r2, r1
 800acee:	bf04      	itt	eq
 800acf0:	6811      	ldreq	r1, [r2, #0]
 800acf2:	6852      	ldreq	r2, [r2, #4]
 800acf4:	6062      	str	r2, [r4, #4]
 800acf6:	bf04      	itt	eq
 800acf8:	1809      	addeq	r1, r1, r0
 800acfa:	6021      	streq	r1, [r4, #0]
 800acfc:	605c      	str	r4, [r3, #4]
 800acfe:	e7c7      	b.n	800ac90 <_free_r+0x24>
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
 800ad02:	bf00      	nop
 800ad04:	20000be4 	.word	0x20000be4

0800ad08 <_malloc_r>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	1ccd      	adds	r5, r1, #3
 800ad0c:	f025 0503 	bic.w	r5, r5, #3
 800ad10:	3508      	adds	r5, #8
 800ad12:	2d0c      	cmp	r5, #12
 800ad14:	bf38      	it	cc
 800ad16:	250c      	movcc	r5, #12
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	db01      	blt.n	800ad22 <_malloc_r+0x1a>
 800ad1e:	42a9      	cmp	r1, r5
 800ad20:	d903      	bls.n	800ad2a <_malloc_r+0x22>
 800ad22:	230c      	movs	r3, #12
 800ad24:	6033      	str	r3, [r6, #0]
 800ad26:	2000      	movs	r0, #0
 800ad28:	bd70      	pop	{r4, r5, r6, pc}
 800ad2a:	f001 fb3f 	bl	800c3ac <__malloc_lock>
 800ad2e:	4a21      	ldr	r2, [pc, #132]	; (800adb4 <_malloc_r+0xac>)
 800ad30:	6814      	ldr	r4, [r2, #0]
 800ad32:	4621      	mov	r1, r4
 800ad34:	b991      	cbnz	r1, 800ad5c <_malloc_r+0x54>
 800ad36:	4c20      	ldr	r4, [pc, #128]	; (800adb8 <_malloc_r+0xb0>)
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	b91b      	cbnz	r3, 800ad44 <_malloc_r+0x3c>
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f000 fc99 	bl	800b674 <_sbrk_r>
 800ad42:	6020      	str	r0, [r4, #0]
 800ad44:	4629      	mov	r1, r5
 800ad46:	4630      	mov	r0, r6
 800ad48:	f000 fc94 	bl	800b674 <_sbrk_r>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d124      	bne.n	800ad9a <_malloc_r+0x92>
 800ad50:	230c      	movs	r3, #12
 800ad52:	6033      	str	r3, [r6, #0]
 800ad54:	4630      	mov	r0, r6
 800ad56:	f001 fb2a 	bl	800c3ae <__malloc_unlock>
 800ad5a:	e7e4      	b.n	800ad26 <_malloc_r+0x1e>
 800ad5c:	680b      	ldr	r3, [r1, #0]
 800ad5e:	1b5b      	subs	r3, r3, r5
 800ad60:	d418      	bmi.n	800ad94 <_malloc_r+0x8c>
 800ad62:	2b0b      	cmp	r3, #11
 800ad64:	d90f      	bls.n	800ad86 <_malloc_r+0x7e>
 800ad66:	600b      	str	r3, [r1, #0]
 800ad68:	50cd      	str	r5, [r1, r3]
 800ad6a:	18cc      	adds	r4, r1, r3
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	f001 fb1e 	bl	800c3ae <__malloc_unlock>
 800ad72:	f104 000b 	add.w	r0, r4, #11
 800ad76:	1d23      	adds	r3, r4, #4
 800ad78:	f020 0007 	bic.w	r0, r0, #7
 800ad7c:	1ac3      	subs	r3, r0, r3
 800ad7e:	d0d3      	beq.n	800ad28 <_malloc_r+0x20>
 800ad80:	425a      	negs	r2, r3
 800ad82:	50e2      	str	r2, [r4, r3]
 800ad84:	e7d0      	b.n	800ad28 <_malloc_r+0x20>
 800ad86:	428c      	cmp	r4, r1
 800ad88:	684b      	ldr	r3, [r1, #4]
 800ad8a:	bf16      	itet	ne
 800ad8c:	6063      	strne	r3, [r4, #4]
 800ad8e:	6013      	streq	r3, [r2, #0]
 800ad90:	460c      	movne	r4, r1
 800ad92:	e7eb      	b.n	800ad6c <_malloc_r+0x64>
 800ad94:	460c      	mov	r4, r1
 800ad96:	6849      	ldr	r1, [r1, #4]
 800ad98:	e7cc      	b.n	800ad34 <_malloc_r+0x2c>
 800ad9a:	1cc4      	adds	r4, r0, #3
 800ad9c:	f024 0403 	bic.w	r4, r4, #3
 800ada0:	42a0      	cmp	r0, r4
 800ada2:	d005      	beq.n	800adb0 <_malloc_r+0xa8>
 800ada4:	1a21      	subs	r1, r4, r0
 800ada6:	4630      	mov	r0, r6
 800ada8:	f000 fc64 	bl	800b674 <_sbrk_r>
 800adac:	3001      	adds	r0, #1
 800adae:	d0cf      	beq.n	800ad50 <_malloc_r+0x48>
 800adb0:	6025      	str	r5, [r4, #0]
 800adb2:	e7db      	b.n	800ad6c <_malloc_r+0x64>
 800adb4:	20000be4 	.word	0x20000be4
 800adb8:	20000be8 	.word	0x20000be8

0800adbc <__cvt>:
 800adbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adc0:	ec55 4b10 	vmov	r4, r5, d0
 800adc4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800adc6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800adca:	2d00      	cmp	r5, #0
 800adcc:	460e      	mov	r6, r1
 800adce:	4691      	mov	r9, r2
 800add0:	4619      	mov	r1, r3
 800add2:	bfb8      	it	lt
 800add4:	4622      	movlt	r2, r4
 800add6:	462b      	mov	r3, r5
 800add8:	f027 0720 	bic.w	r7, r7, #32
 800addc:	bfbb      	ittet	lt
 800adde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ade2:	461d      	movlt	r5, r3
 800ade4:	2300      	movge	r3, #0
 800ade6:	232d      	movlt	r3, #45	; 0x2d
 800ade8:	bfb8      	it	lt
 800adea:	4614      	movlt	r4, r2
 800adec:	2f46      	cmp	r7, #70	; 0x46
 800adee:	700b      	strb	r3, [r1, #0]
 800adf0:	d004      	beq.n	800adfc <__cvt+0x40>
 800adf2:	2f45      	cmp	r7, #69	; 0x45
 800adf4:	d100      	bne.n	800adf8 <__cvt+0x3c>
 800adf6:	3601      	adds	r6, #1
 800adf8:	2102      	movs	r1, #2
 800adfa:	e000      	b.n	800adfe <__cvt+0x42>
 800adfc:	2103      	movs	r1, #3
 800adfe:	ab03      	add	r3, sp, #12
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	ab02      	add	r3, sp, #8
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	4632      	mov	r2, r6
 800ae08:	4653      	mov	r3, sl
 800ae0a:	ec45 4b10 	vmov	d0, r4, r5
 800ae0e:	f000 fd07 	bl	800b820 <_dtoa_r>
 800ae12:	2f47      	cmp	r7, #71	; 0x47
 800ae14:	4680      	mov	r8, r0
 800ae16:	d102      	bne.n	800ae1e <__cvt+0x62>
 800ae18:	f019 0f01 	tst.w	r9, #1
 800ae1c:	d026      	beq.n	800ae6c <__cvt+0xb0>
 800ae1e:	2f46      	cmp	r7, #70	; 0x46
 800ae20:	eb08 0906 	add.w	r9, r8, r6
 800ae24:	d111      	bne.n	800ae4a <__cvt+0x8e>
 800ae26:	f898 3000 	ldrb.w	r3, [r8]
 800ae2a:	2b30      	cmp	r3, #48	; 0x30
 800ae2c:	d10a      	bne.n	800ae44 <__cvt+0x88>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 fe57 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae3a:	b918      	cbnz	r0, 800ae44 <__cvt+0x88>
 800ae3c:	f1c6 0601 	rsb	r6, r6, #1
 800ae40:	f8ca 6000 	str.w	r6, [sl]
 800ae44:	f8da 3000 	ldr.w	r3, [sl]
 800ae48:	4499      	add	r9, r3
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7f5 fe49 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae56:	b938      	cbnz	r0, 800ae68 <__cvt+0xac>
 800ae58:	2230      	movs	r2, #48	; 0x30
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	454b      	cmp	r3, r9
 800ae5e:	d205      	bcs.n	800ae6c <__cvt+0xb0>
 800ae60:	1c59      	adds	r1, r3, #1
 800ae62:	9103      	str	r1, [sp, #12]
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	e7f8      	b.n	800ae5a <__cvt+0x9e>
 800ae68:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae70:	eba3 0308 	sub.w	r3, r3, r8
 800ae74:	4640      	mov	r0, r8
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	b004      	add	sp, #16
 800ae7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ae7e <__exponent>:
 800ae7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae80:	2900      	cmp	r1, #0
 800ae82:	4604      	mov	r4, r0
 800ae84:	bfba      	itte	lt
 800ae86:	4249      	neglt	r1, r1
 800ae88:	232d      	movlt	r3, #45	; 0x2d
 800ae8a:	232b      	movge	r3, #43	; 0x2b
 800ae8c:	2909      	cmp	r1, #9
 800ae8e:	f804 2b02 	strb.w	r2, [r4], #2
 800ae92:	7043      	strb	r3, [r0, #1]
 800ae94:	dd20      	ble.n	800aed8 <__exponent+0x5a>
 800ae96:	f10d 0307 	add.w	r3, sp, #7
 800ae9a:	461f      	mov	r7, r3
 800ae9c:	260a      	movs	r6, #10
 800ae9e:	fb91 f5f6 	sdiv	r5, r1, r6
 800aea2:	fb06 1115 	mls	r1, r6, r5, r1
 800aea6:	3130      	adds	r1, #48	; 0x30
 800aea8:	2d09      	cmp	r5, #9
 800aeaa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aeae:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	dc09      	bgt.n	800aeca <__exponent+0x4c>
 800aeb6:	3130      	adds	r1, #48	; 0x30
 800aeb8:	3b02      	subs	r3, #2
 800aeba:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aebe:	42bb      	cmp	r3, r7
 800aec0:	4622      	mov	r2, r4
 800aec2:	d304      	bcc.n	800aece <__exponent+0x50>
 800aec4:	1a10      	subs	r0, r2, r0
 800aec6:	b003      	add	sp, #12
 800aec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeca:	4613      	mov	r3, r2
 800aecc:	e7e7      	b.n	800ae9e <__exponent+0x20>
 800aece:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed2:	f804 2b01 	strb.w	r2, [r4], #1
 800aed6:	e7f2      	b.n	800aebe <__exponent+0x40>
 800aed8:	2330      	movs	r3, #48	; 0x30
 800aeda:	4419      	add	r1, r3
 800aedc:	7083      	strb	r3, [r0, #2]
 800aede:	1d02      	adds	r2, r0, #4
 800aee0:	70c1      	strb	r1, [r0, #3]
 800aee2:	e7ef      	b.n	800aec4 <__exponent+0x46>

0800aee4 <_printf_float>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	b08d      	sub	sp, #52	; 0x34
 800aeea:	460c      	mov	r4, r1
 800aeec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800aef0:	4616      	mov	r6, r2
 800aef2:	461f      	mov	r7, r3
 800aef4:	4605      	mov	r5, r0
 800aef6:	f001 fa4b 	bl	800c390 <_localeconv_r>
 800aefa:	6803      	ldr	r3, [r0, #0]
 800aefc:	9304      	str	r3, [sp, #16]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7f5 f976 	bl	80001f0 <strlen>
 800af04:	2300      	movs	r3, #0
 800af06:	930a      	str	r3, [sp, #40]	; 0x28
 800af08:	f8d8 3000 	ldr.w	r3, [r8]
 800af0c:	9005      	str	r0, [sp, #20]
 800af0e:	3307      	adds	r3, #7
 800af10:	f023 0307 	bic.w	r3, r3, #7
 800af14:	f103 0208 	add.w	r2, r3, #8
 800af18:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af1c:	f8d4 b000 	ldr.w	fp, [r4]
 800af20:	f8c8 2000 	str.w	r2, [r8]
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af2c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af34:	9307      	str	r3, [sp, #28]
 800af36:	f8cd 8018 	str.w	r8, [sp, #24]
 800af3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af3e:	4ba7      	ldr	r3, [pc, #668]	; (800b1dc <_printf_float+0x2f8>)
 800af40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af44:	f7f5 fe02 	bl	8000b4c <__aeabi_dcmpun>
 800af48:	bb70      	cbnz	r0, 800afa8 <_printf_float+0xc4>
 800af4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af4e:	4ba3      	ldr	r3, [pc, #652]	; (800b1dc <_printf_float+0x2f8>)
 800af50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af54:	f7f5 fddc 	bl	8000b10 <__aeabi_dcmple>
 800af58:	bb30      	cbnz	r0, 800afa8 <_printf_float+0xc4>
 800af5a:	2200      	movs	r2, #0
 800af5c:	2300      	movs	r3, #0
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 fdcb 	bl	8000afc <__aeabi_dcmplt>
 800af66:	b110      	cbz	r0, 800af6e <_printf_float+0x8a>
 800af68:	232d      	movs	r3, #45	; 0x2d
 800af6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af6e:	4a9c      	ldr	r2, [pc, #624]	; (800b1e0 <_printf_float+0x2fc>)
 800af70:	4b9c      	ldr	r3, [pc, #624]	; (800b1e4 <_printf_float+0x300>)
 800af72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800af76:	bf8c      	ite	hi
 800af78:	4690      	movhi	r8, r2
 800af7a:	4698      	movls	r8, r3
 800af7c:	2303      	movs	r3, #3
 800af7e:	f02b 0204 	bic.w	r2, fp, #4
 800af82:	6123      	str	r3, [r4, #16]
 800af84:	6022      	str	r2, [r4, #0]
 800af86:	f04f 0900 	mov.w	r9, #0
 800af8a:	9700      	str	r7, [sp, #0]
 800af8c:	4633      	mov	r3, r6
 800af8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800af90:	4621      	mov	r1, r4
 800af92:	4628      	mov	r0, r5
 800af94:	f000 f9e6 	bl	800b364 <_printf_common>
 800af98:	3001      	adds	r0, #1
 800af9a:	f040 808d 	bne.w	800b0b8 <_printf_float+0x1d4>
 800af9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afa2:	b00d      	add	sp, #52	; 0x34
 800afa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa8:	4642      	mov	r2, r8
 800afaa:	464b      	mov	r3, r9
 800afac:	4640      	mov	r0, r8
 800afae:	4649      	mov	r1, r9
 800afb0:	f7f5 fdcc 	bl	8000b4c <__aeabi_dcmpun>
 800afb4:	b110      	cbz	r0, 800afbc <_printf_float+0xd8>
 800afb6:	4a8c      	ldr	r2, [pc, #560]	; (800b1e8 <_printf_float+0x304>)
 800afb8:	4b8c      	ldr	r3, [pc, #560]	; (800b1ec <_printf_float+0x308>)
 800afba:	e7da      	b.n	800af72 <_printf_float+0x8e>
 800afbc:	6861      	ldr	r1, [r4, #4]
 800afbe:	1c4b      	adds	r3, r1, #1
 800afc0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800afc4:	a80a      	add	r0, sp, #40	; 0x28
 800afc6:	d13e      	bne.n	800b046 <_printf_float+0x162>
 800afc8:	2306      	movs	r3, #6
 800afca:	6063      	str	r3, [r4, #4]
 800afcc:	2300      	movs	r3, #0
 800afce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800afd2:	ab09      	add	r3, sp, #36	; 0x24
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	ec49 8b10 	vmov	d0, r8, r9
 800afda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800afde:	6022      	str	r2, [r4, #0]
 800afe0:	f8cd a004 	str.w	sl, [sp, #4]
 800afe4:	6861      	ldr	r1, [r4, #4]
 800afe6:	4628      	mov	r0, r5
 800afe8:	f7ff fee8 	bl	800adbc <__cvt>
 800afec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800aff0:	2b47      	cmp	r3, #71	; 0x47
 800aff2:	4680      	mov	r8, r0
 800aff4:	d109      	bne.n	800b00a <_printf_float+0x126>
 800aff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff8:	1cd8      	adds	r0, r3, #3
 800affa:	db02      	blt.n	800b002 <_printf_float+0x11e>
 800affc:	6862      	ldr	r2, [r4, #4]
 800affe:	4293      	cmp	r3, r2
 800b000:	dd47      	ble.n	800b092 <_printf_float+0x1ae>
 800b002:	f1aa 0a02 	sub.w	sl, sl, #2
 800b006:	fa5f fa8a 	uxtb.w	sl, sl
 800b00a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b00e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b010:	d824      	bhi.n	800b05c <_printf_float+0x178>
 800b012:	3901      	subs	r1, #1
 800b014:	4652      	mov	r2, sl
 800b016:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b01a:	9109      	str	r1, [sp, #36]	; 0x24
 800b01c:	f7ff ff2f 	bl	800ae7e <__exponent>
 800b020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b022:	1813      	adds	r3, r2, r0
 800b024:	2a01      	cmp	r2, #1
 800b026:	4681      	mov	r9, r0
 800b028:	6123      	str	r3, [r4, #16]
 800b02a:	dc02      	bgt.n	800b032 <_printf_float+0x14e>
 800b02c:	6822      	ldr	r2, [r4, #0]
 800b02e:	07d1      	lsls	r1, r2, #31
 800b030:	d501      	bpl.n	800b036 <_printf_float+0x152>
 800b032:	3301      	adds	r3, #1
 800b034:	6123      	str	r3, [r4, #16]
 800b036:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0a5      	beq.n	800af8a <_printf_float+0xa6>
 800b03e:	232d      	movs	r3, #45	; 0x2d
 800b040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b044:	e7a1      	b.n	800af8a <_printf_float+0xa6>
 800b046:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b04a:	f000 8177 	beq.w	800b33c <_printf_float+0x458>
 800b04e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b052:	d1bb      	bne.n	800afcc <_printf_float+0xe8>
 800b054:	2900      	cmp	r1, #0
 800b056:	d1b9      	bne.n	800afcc <_printf_float+0xe8>
 800b058:	2301      	movs	r3, #1
 800b05a:	e7b6      	b.n	800afca <_printf_float+0xe6>
 800b05c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b060:	d119      	bne.n	800b096 <_printf_float+0x1b2>
 800b062:	2900      	cmp	r1, #0
 800b064:	6863      	ldr	r3, [r4, #4]
 800b066:	dd0c      	ble.n	800b082 <_printf_float+0x19e>
 800b068:	6121      	str	r1, [r4, #16]
 800b06a:	b913      	cbnz	r3, 800b072 <_printf_float+0x18e>
 800b06c:	6822      	ldr	r2, [r4, #0]
 800b06e:	07d2      	lsls	r2, r2, #31
 800b070:	d502      	bpl.n	800b078 <_printf_float+0x194>
 800b072:	3301      	adds	r3, #1
 800b074:	440b      	add	r3, r1
 800b076:	6123      	str	r3, [r4, #16]
 800b078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b07a:	65a3      	str	r3, [r4, #88]	; 0x58
 800b07c:	f04f 0900 	mov.w	r9, #0
 800b080:	e7d9      	b.n	800b036 <_printf_float+0x152>
 800b082:	b913      	cbnz	r3, 800b08a <_printf_float+0x1a6>
 800b084:	6822      	ldr	r2, [r4, #0]
 800b086:	07d0      	lsls	r0, r2, #31
 800b088:	d501      	bpl.n	800b08e <_printf_float+0x1aa>
 800b08a:	3302      	adds	r3, #2
 800b08c:	e7f3      	b.n	800b076 <_printf_float+0x192>
 800b08e:	2301      	movs	r3, #1
 800b090:	e7f1      	b.n	800b076 <_printf_float+0x192>
 800b092:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b096:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b09a:	4293      	cmp	r3, r2
 800b09c:	db05      	blt.n	800b0aa <_printf_float+0x1c6>
 800b09e:	6822      	ldr	r2, [r4, #0]
 800b0a0:	6123      	str	r3, [r4, #16]
 800b0a2:	07d1      	lsls	r1, r2, #31
 800b0a4:	d5e8      	bpl.n	800b078 <_printf_float+0x194>
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	e7e5      	b.n	800b076 <_printf_float+0x192>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	bfd4      	ite	le
 800b0ae:	f1c3 0302 	rsble	r3, r3, #2
 800b0b2:	2301      	movgt	r3, #1
 800b0b4:	4413      	add	r3, r2
 800b0b6:	e7de      	b.n	800b076 <_printf_float+0x192>
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	055a      	lsls	r2, r3, #21
 800b0bc:	d407      	bmi.n	800b0ce <_printf_float+0x1ea>
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	4642      	mov	r2, r8
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	47b8      	blx	r7
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d12b      	bne.n	800b124 <_printf_float+0x240>
 800b0cc:	e767      	b.n	800af9e <_printf_float+0xba>
 800b0ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b0d2:	f240 80dc 	bls.w	800b28e <_printf_float+0x3aa>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	2300      	movs	r3, #0
 800b0da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0de:	f7f5 fd03 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d033      	beq.n	800b14e <_printf_float+0x26a>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4a41      	ldr	r2, [pc, #260]	; (800b1f0 <_printf_float+0x30c>)
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	47b8      	blx	r7
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	f43f af54 	beq.w	800af9e <_printf_float+0xba>
 800b0f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	db02      	blt.n	800b104 <_printf_float+0x220>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	07d8      	lsls	r0, r3, #31
 800b102:	d50f      	bpl.n	800b124 <_printf_float+0x240>
 800b104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b8      	blx	r7
 800b10e:	3001      	adds	r0, #1
 800b110:	f43f af45 	beq.w	800af9e <_printf_float+0xba>
 800b114:	f04f 0800 	mov.w	r8, #0
 800b118:	f104 091a 	add.w	r9, r4, #26
 800b11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b11e:	3b01      	subs	r3, #1
 800b120:	4543      	cmp	r3, r8
 800b122:	dc09      	bgt.n	800b138 <_printf_float+0x254>
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	079b      	lsls	r3, r3, #30
 800b128:	f100 8103 	bmi.w	800b332 <_printf_float+0x44e>
 800b12c:	68e0      	ldr	r0, [r4, #12]
 800b12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b130:	4298      	cmp	r0, r3
 800b132:	bfb8      	it	lt
 800b134:	4618      	movlt	r0, r3
 800b136:	e734      	b.n	800afa2 <_printf_float+0xbe>
 800b138:	2301      	movs	r3, #1
 800b13a:	464a      	mov	r2, r9
 800b13c:	4631      	mov	r1, r6
 800b13e:	4628      	mov	r0, r5
 800b140:	47b8      	blx	r7
 800b142:	3001      	adds	r0, #1
 800b144:	f43f af2b 	beq.w	800af9e <_printf_float+0xba>
 800b148:	f108 0801 	add.w	r8, r8, #1
 800b14c:	e7e6      	b.n	800b11c <_printf_float+0x238>
 800b14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b150:	2b00      	cmp	r3, #0
 800b152:	dc2b      	bgt.n	800b1ac <_printf_float+0x2c8>
 800b154:	2301      	movs	r3, #1
 800b156:	4a26      	ldr	r2, [pc, #152]	; (800b1f0 <_printf_float+0x30c>)
 800b158:	4631      	mov	r1, r6
 800b15a:	4628      	mov	r0, r5
 800b15c:	47b8      	blx	r7
 800b15e:	3001      	adds	r0, #1
 800b160:	f43f af1d 	beq.w	800af9e <_printf_float+0xba>
 800b164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b166:	b923      	cbnz	r3, 800b172 <_printf_float+0x28e>
 800b168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b16a:	b913      	cbnz	r3, 800b172 <_printf_float+0x28e>
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	07d9      	lsls	r1, r3, #31
 800b170:	d5d8      	bpl.n	800b124 <_printf_float+0x240>
 800b172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b176:	4631      	mov	r1, r6
 800b178:	4628      	mov	r0, r5
 800b17a:	47b8      	blx	r7
 800b17c:	3001      	adds	r0, #1
 800b17e:	f43f af0e 	beq.w	800af9e <_printf_float+0xba>
 800b182:	f04f 0900 	mov.w	r9, #0
 800b186:	f104 0a1a 	add.w	sl, r4, #26
 800b18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b18c:	425b      	negs	r3, r3
 800b18e:	454b      	cmp	r3, r9
 800b190:	dc01      	bgt.n	800b196 <_printf_float+0x2b2>
 800b192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b194:	e794      	b.n	800b0c0 <_printf_float+0x1dc>
 800b196:	2301      	movs	r3, #1
 800b198:	4652      	mov	r2, sl
 800b19a:	4631      	mov	r1, r6
 800b19c:	4628      	mov	r0, r5
 800b19e:	47b8      	blx	r7
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	f43f aefc 	beq.w	800af9e <_printf_float+0xba>
 800b1a6:	f109 0901 	add.w	r9, r9, #1
 800b1aa:	e7ee      	b.n	800b18a <_printf_float+0x2a6>
 800b1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	bfa8      	it	ge
 800b1b4:	461a      	movge	r2, r3
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	4691      	mov	r9, r2
 800b1ba:	dd07      	ble.n	800b1cc <_printf_float+0x2e8>
 800b1bc:	4613      	mov	r3, r2
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	47b8      	blx	r7
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	f43f aee9 	beq.w	800af9e <_printf_float+0xba>
 800b1cc:	f104 031a 	add.w	r3, r4, #26
 800b1d0:	f04f 0b00 	mov.w	fp, #0
 800b1d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1d8:	9306      	str	r3, [sp, #24]
 800b1da:	e015      	b.n	800b208 <_printf_float+0x324>
 800b1dc:	7fefffff 	.word	0x7fefffff
 800b1e0:	0800ce54 	.word	0x0800ce54
 800b1e4:	0800ce50 	.word	0x0800ce50
 800b1e8:	0800ce5c 	.word	0x0800ce5c
 800b1ec:	0800ce58 	.word	0x0800ce58
 800b1f0:	0800ce60 	.word	0x0800ce60
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	9a06      	ldr	r2, [sp, #24]
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	47b8      	blx	r7
 800b1fe:	3001      	adds	r0, #1
 800b200:	f43f aecd 	beq.w	800af9e <_printf_float+0xba>
 800b204:	f10b 0b01 	add.w	fp, fp, #1
 800b208:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b20c:	ebaa 0309 	sub.w	r3, sl, r9
 800b210:	455b      	cmp	r3, fp
 800b212:	dcef      	bgt.n	800b1f4 <_printf_float+0x310>
 800b214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b218:	429a      	cmp	r2, r3
 800b21a:	44d0      	add	r8, sl
 800b21c:	db15      	blt.n	800b24a <_printf_float+0x366>
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	07da      	lsls	r2, r3, #31
 800b222:	d412      	bmi.n	800b24a <_printf_float+0x366>
 800b224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b226:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b228:	eba3 020a 	sub.w	r2, r3, sl
 800b22c:	eba3 0a01 	sub.w	sl, r3, r1
 800b230:	4592      	cmp	sl, r2
 800b232:	bfa8      	it	ge
 800b234:	4692      	movge	sl, r2
 800b236:	f1ba 0f00 	cmp.w	sl, #0
 800b23a:	dc0e      	bgt.n	800b25a <_printf_float+0x376>
 800b23c:	f04f 0800 	mov.w	r8, #0
 800b240:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b244:	f104 091a 	add.w	r9, r4, #26
 800b248:	e019      	b.n	800b27e <_printf_float+0x39a>
 800b24a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b24e:	4631      	mov	r1, r6
 800b250:	4628      	mov	r0, r5
 800b252:	47b8      	blx	r7
 800b254:	3001      	adds	r0, #1
 800b256:	d1e5      	bne.n	800b224 <_printf_float+0x340>
 800b258:	e6a1      	b.n	800af9e <_printf_float+0xba>
 800b25a:	4653      	mov	r3, sl
 800b25c:	4642      	mov	r2, r8
 800b25e:	4631      	mov	r1, r6
 800b260:	4628      	mov	r0, r5
 800b262:	47b8      	blx	r7
 800b264:	3001      	adds	r0, #1
 800b266:	d1e9      	bne.n	800b23c <_printf_float+0x358>
 800b268:	e699      	b.n	800af9e <_printf_float+0xba>
 800b26a:	2301      	movs	r3, #1
 800b26c:	464a      	mov	r2, r9
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	47b8      	blx	r7
 800b274:	3001      	adds	r0, #1
 800b276:	f43f ae92 	beq.w	800af9e <_printf_float+0xba>
 800b27a:	f108 0801 	add.w	r8, r8, #1
 800b27e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b282:	1a9b      	subs	r3, r3, r2
 800b284:	eba3 030a 	sub.w	r3, r3, sl
 800b288:	4543      	cmp	r3, r8
 800b28a:	dcee      	bgt.n	800b26a <_printf_float+0x386>
 800b28c:	e74a      	b.n	800b124 <_printf_float+0x240>
 800b28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b290:	2a01      	cmp	r2, #1
 800b292:	dc01      	bgt.n	800b298 <_printf_float+0x3b4>
 800b294:	07db      	lsls	r3, r3, #31
 800b296:	d53a      	bpl.n	800b30e <_printf_float+0x42a>
 800b298:	2301      	movs	r3, #1
 800b29a:	4642      	mov	r2, r8
 800b29c:	4631      	mov	r1, r6
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b8      	blx	r7
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f43f ae7b 	beq.w	800af9e <_printf_float+0xba>
 800b2a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	47b8      	blx	r7
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	f108 0801 	add.w	r8, r8, #1
 800b2b8:	f43f ae71 	beq.w	800af9e <_printf_float+0xba>
 800b2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800b2c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f7f5 fc0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2ce:	b9c8      	cbnz	r0, 800b304 <_printf_float+0x420>
 800b2d0:	4653      	mov	r3, sl
 800b2d2:	4642      	mov	r2, r8
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	d10e      	bne.n	800b2fc <_printf_float+0x418>
 800b2de:	e65e      	b.n	800af9e <_printf_float+0xba>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	4652      	mov	r2, sl
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	47b8      	blx	r7
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	f43f ae57 	beq.w	800af9e <_printf_float+0xba>
 800b2f0:	f108 0801 	add.w	r8, r8, #1
 800b2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	4543      	cmp	r3, r8
 800b2fa:	dcf1      	bgt.n	800b2e0 <_printf_float+0x3fc>
 800b2fc:	464b      	mov	r3, r9
 800b2fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b302:	e6de      	b.n	800b0c2 <_printf_float+0x1de>
 800b304:	f04f 0800 	mov.w	r8, #0
 800b308:	f104 0a1a 	add.w	sl, r4, #26
 800b30c:	e7f2      	b.n	800b2f4 <_printf_float+0x410>
 800b30e:	2301      	movs	r3, #1
 800b310:	e7df      	b.n	800b2d2 <_printf_float+0x3ee>
 800b312:	2301      	movs	r3, #1
 800b314:	464a      	mov	r2, r9
 800b316:	4631      	mov	r1, r6
 800b318:	4628      	mov	r0, r5
 800b31a:	47b8      	blx	r7
 800b31c:	3001      	adds	r0, #1
 800b31e:	f43f ae3e 	beq.w	800af9e <_printf_float+0xba>
 800b322:	f108 0801 	add.w	r8, r8, #1
 800b326:	68e3      	ldr	r3, [r4, #12]
 800b328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b32a:	1a9b      	subs	r3, r3, r2
 800b32c:	4543      	cmp	r3, r8
 800b32e:	dcf0      	bgt.n	800b312 <_printf_float+0x42e>
 800b330:	e6fc      	b.n	800b12c <_printf_float+0x248>
 800b332:	f04f 0800 	mov.w	r8, #0
 800b336:	f104 0919 	add.w	r9, r4, #25
 800b33a:	e7f4      	b.n	800b326 <_printf_float+0x442>
 800b33c:	2900      	cmp	r1, #0
 800b33e:	f43f ae8b 	beq.w	800b058 <_printf_float+0x174>
 800b342:	2300      	movs	r3, #0
 800b344:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b348:	ab09      	add	r3, sp, #36	; 0x24
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	ec49 8b10 	vmov	d0, r8, r9
 800b350:	6022      	str	r2, [r4, #0]
 800b352:	f8cd a004 	str.w	sl, [sp, #4]
 800b356:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7ff fd2e 	bl	800adbc <__cvt>
 800b360:	4680      	mov	r8, r0
 800b362:	e648      	b.n	800aff6 <_printf_float+0x112>

0800b364 <_printf_common>:
 800b364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b368:	4691      	mov	r9, r2
 800b36a:	461f      	mov	r7, r3
 800b36c:	688a      	ldr	r2, [r1, #8]
 800b36e:	690b      	ldr	r3, [r1, #16]
 800b370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b374:	4293      	cmp	r3, r2
 800b376:	bfb8      	it	lt
 800b378:	4613      	movlt	r3, r2
 800b37a:	f8c9 3000 	str.w	r3, [r9]
 800b37e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b382:	4606      	mov	r6, r0
 800b384:	460c      	mov	r4, r1
 800b386:	b112      	cbz	r2, 800b38e <_printf_common+0x2a>
 800b388:	3301      	adds	r3, #1
 800b38a:	f8c9 3000 	str.w	r3, [r9]
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	0699      	lsls	r1, r3, #26
 800b392:	bf42      	ittt	mi
 800b394:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b398:	3302      	addmi	r3, #2
 800b39a:	f8c9 3000 	strmi.w	r3, [r9]
 800b39e:	6825      	ldr	r5, [r4, #0]
 800b3a0:	f015 0506 	ands.w	r5, r5, #6
 800b3a4:	d107      	bne.n	800b3b6 <_printf_common+0x52>
 800b3a6:	f104 0a19 	add.w	sl, r4, #25
 800b3aa:	68e3      	ldr	r3, [r4, #12]
 800b3ac:	f8d9 2000 	ldr.w	r2, [r9]
 800b3b0:	1a9b      	subs	r3, r3, r2
 800b3b2:	42ab      	cmp	r3, r5
 800b3b4:	dc28      	bgt.n	800b408 <_printf_common+0xa4>
 800b3b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	3300      	adds	r3, #0
 800b3be:	bf18      	it	ne
 800b3c0:	2301      	movne	r3, #1
 800b3c2:	0692      	lsls	r2, r2, #26
 800b3c4:	d42d      	bmi.n	800b422 <_printf_common+0xbe>
 800b3c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	47c0      	blx	r8
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d020      	beq.n	800b416 <_printf_common+0xb2>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	68e5      	ldr	r5, [r4, #12]
 800b3d8:	f8d9 2000 	ldr.w	r2, [r9]
 800b3dc:	f003 0306 	and.w	r3, r3, #6
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	bf08      	it	eq
 800b3e4:	1aad      	subeq	r5, r5, r2
 800b3e6:	68a3      	ldr	r3, [r4, #8]
 800b3e8:	6922      	ldr	r2, [r4, #16]
 800b3ea:	bf0c      	ite	eq
 800b3ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3f0:	2500      	movne	r5, #0
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	bfc4      	itt	gt
 800b3f6:	1a9b      	subgt	r3, r3, r2
 800b3f8:	18ed      	addgt	r5, r5, r3
 800b3fa:	f04f 0900 	mov.w	r9, #0
 800b3fe:	341a      	adds	r4, #26
 800b400:	454d      	cmp	r5, r9
 800b402:	d11a      	bne.n	800b43a <_printf_common+0xd6>
 800b404:	2000      	movs	r0, #0
 800b406:	e008      	b.n	800b41a <_printf_common+0xb6>
 800b408:	2301      	movs	r3, #1
 800b40a:	4652      	mov	r2, sl
 800b40c:	4639      	mov	r1, r7
 800b40e:	4630      	mov	r0, r6
 800b410:	47c0      	blx	r8
 800b412:	3001      	adds	r0, #1
 800b414:	d103      	bne.n	800b41e <_printf_common+0xba>
 800b416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41e:	3501      	adds	r5, #1
 800b420:	e7c3      	b.n	800b3aa <_printf_common+0x46>
 800b422:	18e1      	adds	r1, r4, r3
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	2030      	movs	r0, #48	; 0x30
 800b428:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b42c:	4422      	add	r2, r4
 800b42e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b436:	3302      	adds	r3, #2
 800b438:	e7c5      	b.n	800b3c6 <_printf_common+0x62>
 800b43a:	2301      	movs	r3, #1
 800b43c:	4622      	mov	r2, r4
 800b43e:	4639      	mov	r1, r7
 800b440:	4630      	mov	r0, r6
 800b442:	47c0      	blx	r8
 800b444:	3001      	adds	r0, #1
 800b446:	d0e6      	beq.n	800b416 <_printf_common+0xb2>
 800b448:	f109 0901 	add.w	r9, r9, #1
 800b44c:	e7d8      	b.n	800b400 <_printf_common+0x9c>
	...

0800b450 <_printf_i>:
 800b450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b454:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b458:	460c      	mov	r4, r1
 800b45a:	7e09      	ldrb	r1, [r1, #24]
 800b45c:	b085      	sub	sp, #20
 800b45e:	296e      	cmp	r1, #110	; 0x6e
 800b460:	4617      	mov	r7, r2
 800b462:	4606      	mov	r6, r0
 800b464:	4698      	mov	r8, r3
 800b466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b468:	f000 80b3 	beq.w	800b5d2 <_printf_i+0x182>
 800b46c:	d822      	bhi.n	800b4b4 <_printf_i+0x64>
 800b46e:	2963      	cmp	r1, #99	; 0x63
 800b470:	d036      	beq.n	800b4e0 <_printf_i+0x90>
 800b472:	d80a      	bhi.n	800b48a <_printf_i+0x3a>
 800b474:	2900      	cmp	r1, #0
 800b476:	f000 80b9 	beq.w	800b5ec <_printf_i+0x19c>
 800b47a:	2958      	cmp	r1, #88	; 0x58
 800b47c:	f000 8083 	beq.w	800b586 <_printf_i+0x136>
 800b480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b484:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b488:	e032      	b.n	800b4f0 <_printf_i+0xa0>
 800b48a:	2964      	cmp	r1, #100	; 0x64
 800b48c:	d001      	beq.n	800b492 <_printf_i+0x42>
 800b48e:	2969      	cmp	r1, #105	; 0x69
 800b490:	d1f6      	bne.n	800b480 <_printf_i+0x30>
 800b492:	6820      	ldr	r0, [r4, #0]
 800b494:	6813      	ldr	r3, [r2, #0]
 800b496:	0605      	lsls	r5, r0, #24
 800b498:	f103 0104 	add.w	r1, r3, #4
 800b49c:	d52a      	bpl.n	800b4f4 <_printf_i+0xa4>
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6011      	str	r1, [r2, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	da03      	bge.n	800b4ae <_printf_i+0x5e>
 800b4a6:	222d      	movs	r2, #45	; 0x2d
 800b4a8:	425b      	negs	r3, r3
 800b4aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b4ae:	486f      	ldr	r0, [pc, #444]	; (800b66c <_printf_i+0x21c>)
 800b4b0:	220a      	movs	r2, #10
 800b4b2:	e039      	b.n	800b528 <_printf_i+0xd8>
 800b4b4:	2973      	cmp	r1, #115	; 0x73
 800b4b6:	f000 809d 	beq.w	800b5f4 <_printf_i+0x1a4>
 800b4ba:	d808      	bhi.n	800b4ce <_printf_i+0x7e>
 800b4bc:	296f      	cmp	r1, #111	; 0x6f
 800b4be:	d020      	beq.n	800b502 <_printf_i+0xb2>
 800b4c0:	2970      	cmp	r1, #112	; 0x70
 800b4c2:	d1dd      	bne.n	800b480 <_printf_i+0x30>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	f043 0320 	orr.w	r3, r3, #32
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	e003      	b.n	800b4d6 <_printf_i+0x86>
 800b4ce:	2975      	cmp	r1, #117	; 0x75
 800b4d0:	d017      	beq.n	800b502 <_printf_i+0xb2>
 800b4d2:	2978      	cmp	r1, #120	; 0x78
 800b4d4:	d1d4      	bne.n	800b480 <_printf_i+0x30>
 800b4d6:	2378      	movs	r3, #120	; 0x78
 800b4d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4dc:	4864      	ldr	r0, [pc, #400]	; (800b670 <_printf_i+0x220>)
 800b4de:	e055      	b.n	800b58c <_printf_i+0x13c>
 800b4e0:	6813      	ldr	r3, [r2, #0]
 800b4e2:	1d19      	adds	r1, r3, #4
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6011      	str	r1, [r2, #0]
 800b4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e08c      	b.n	800b60e <_printf_i+0x1be>
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6011      	str	r1, [r2, #0]
 800b4f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4fc:	bf18      	it	ne
 800b4fe:	b21b      	sxthne	r3, r3
 800b500:	e7cf      	b.n	800b4a2 <_printf_i+0x52>
 800b502:	6813      	ldr	r3, [r2, #0]
 800b504:	6825      	ldr	r5, [r4, #0]
 800b506:	1d18      	adds	r0, r3, #4
 800b508:	6010      	str	r0, [r2, #0]
 800b50a:	0628      	lsls	r0, r5, #24
 800b50c:	d501      	bpl.n	800b512 <_printf_i+0xc2>
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	e002      	b.n	800b518 <_printf_i+0xc8>
 800b512:	0668      	lsls	r0, r5, #25
 800b514:	d5fb      	bpl.n	800b50e <_printf_i+0xbe>
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	4854      	ldr	r0, [pc, #336]	; (800b66c <_printf_i+0x21c>)
 800b51a:	296f      	cmp	r1, #111	; 0x6f
 800b51c:	bf14      	ite	ne
 800b51e:	220a      	movne	r2, #10
 800b520:	2208      	moveq	r2, #8
 800b522:	2100      	movs	r1, #0
 800b524:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b528:	6865      	ldr	r5, [r4, #4]
 800b52a:	60a5      	str	r5, [r4, #8]
 800b52c:	2d00      	cmp	r5, #0
 800b52e:	f2c0 8095 	blt.w	800b65c <_printf_i+0x20c>
 800b532:	6821      	ldr	r1, [r4, #0]
 800b534:	f021 0104 	bic.w	r1, r1, #4
 800b538:	6021      	str	r1, [r4, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d13d      	bne.n	800b5ba <_printf_i+0x16a>
 800b53e:	2d00      	cmp	r5, #0
 800b540:	f040 808e 	bne.w	800b660 <_printf_i+0x210>
 800b544:	4665      	mov	r5, ip
 800b546:	2a08      	cmp	r2, #8
 800b548:	d10b      	bne.n	800b562 <_printf_i+0x112>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	07db      	lsls	r3, r3, #31
 800b54e:	d508      	bpl.n	800b562 <_printf_i+0x112>
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	6862      	ldr	r2, [r4, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	bfde      	ittt	le
 800b558:	2330      	movle	r3, #48	; 0x30
 800b55a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b55e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b562:	ebac 0305 	sub.w	r3, ip, r5
 800b566:	6123      	str	r3, [r4, #16]
 800b568:	f8cd 8000 	str.w	r8, [sp]
 800b56c:	463b      	mov	r3, r7
 800b56e:	aa03      	add	r2, sp, #12
 800b570:	4621      	mov	r1, r4
 800b572:	4630      	mov	r0, r6
 800b574:	f7ff fef6 	bl	800b364 <_printf_common>
 800b578:	3001      	adds	r0, #1
 800b57a:	d14d      	bne.n	800b618 <_printf_i+0x1c8>
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b580:	b005      	add	sp, #20
 800b582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b586:	4839      	ldr	r0, [pc, #228]	; (800b66c <_printf_i+0x21c>)
 800b588:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b58c:	6813      	ldr	r3, [r2, #0]
 800b58e:	6821      	ldr	r1, [r4, #0]
 800b590:	1d1d      	adds	r5, r3, #4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6015      	str	r5, [r2, #0]
 800b596:	060a      	lsls	r2, r1, #24
 800b598:	d50b      	bpl.n	800b5b2 <_printf_i+0x162>
 800b59a:	07ca      	lsls	r2, r1, #31
 800b59c:	bf44      	itt	mi
 800b59e:	f041 0120 	orrmi.w	r1, r1, #32
 800b5a2:	6021      	strmi	r1, [r4, #0]
 800b5a4:	b91b      	cbnz	r3, 800b5ae <_printf_i+0x15e>
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	f022 0220 	bic.w	r2, r2, #32
 800b5ac:	6022      	str	r2, [r4, #0]
 800b5ae:	2210      	movs	r2, #16
 800b5b0:	e7b7      	b.n	800b522 <_printf_i+0xd2>
 800b5b2:	064d      	lsls	r5, r1, #25
 800b5b4:	bf48      	it	mi
 800b5b6:	b29b      	uxthmi	r3, r3
 800b5b8:	e7ef      	b.n	800b59a <_printf_i+0x14a>
 800b5ba:	4665      	mov	r5, ip
 800b5bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5c0:	fb02 3311 	mls	r3, r2, r1, r3
 800b5c4:	5cc3      	ldrb	r3, [r0, r3]
 800b5c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	2900      	cmp	r1, #0
 800b5ce:	d1f5      	bne.n	800b5bc <_printf_i+0x16c>
 800b5d0:	e7b9      	b.n	800b546 <_printf_i+0xf6>
 800b5d2:	6813      	ldr	r3, [r2, #0]
 800b5d4:	6825      	ldr	r5, [r4, #0]
 800b5d6:	6961      	ldr	r1, [r4, #20]
 800b5d8:	1d18      	adds	r0, r3, #4
 800b5da:	6010      	str	r0, [r2, #0]
 800b5dc:	0628      	lsls	r0, r5, #24
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	d501      	bpl.n	800b5e6 <_printf_i+0x196>
 800b5e2:	6019      	str	r1, [r3, #0]
 800b5e4:	e002      	b.n	800b5ec <_printf_i+0x19c>
 800b5e6:	066a      	lsls	r2, r5, #25
 800b5e8:	d5fb      	bpl.n	800b5e2 <_printf_i+0x192>
 800b5ea:	8019      	strh	r1, [r3, #0]
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	4665      	mov	r5, ip
 800b5f2:	e7b9      	b.n	800b568 <_printf_i+0x118>
 800b5f4:	6813      	ldr	r3, [r2, #0]
 800b5f6:	1d19      	adds	r1, r3, #4
 800b5f8:	6011      	str	r1, [r2, #0]
 800b5fa:	681d      	ldr	r5, [r3, #0]
 800b5fc:	6862      	ldr	r2, [r4, #4]
 800b5fe:	2100      	movs	r1, #0
 800b600:	4628      	mov	r0, r5
 800b602:	f7f4 fdfd 	bl	8000200 <memchr>
 800b606:	b108      	cbz	r0, 800b60c <_printf_i+0x1bc>
 800b608:	1b40      	subs	r0, r0, r5
 800b60a:	6060      	str	r0, [r4, #4]
 800b60c:	6863      	ldr	r3, [r4, #4]
 800b60e:	6123      	str	r3, [r4, #16]
 800b610:	2300      	movs	r3, #0
 800b612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b616:	e7a7      	b.n	800b568 <_printf_i+0x118>
 800b618:	6923      	ldr	r3, [r4, #16]
 800b61a:	462a      	mov	r2, r5
 800b61c:	4639      	mov	r1, r7
 800b61e:	4630      	mov	r0, r6
 800b620:	47c0      	blx	r8
 800b622:	3001      	adds	r0, #1
 800b624:	d0aa      	beq.n	800b57c <_printf_i+0x12c>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	079b      	lsls	r3, r3, #30
 800b62a:	d413      	bmi.n	800b654 <_printf_i+0x204>
 800b62c:	68e0      	ldr	r0, [r4, #12]
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	4298      	cmp	r0, r3
 800b632:	bfb8      	it	lt
 800b634:	4618      	movlt	r0, r3
 800b636:	e7a3      	b.n	800b580 <_printf_i+0x130>
 800b638:	2301      	movs	r3, #1
 800b63a:	464a      	mov	r2, r9
 800b63c:	4639      	mov	r1, r7
 800b63e:	4630      	mov	r0, r6
 800b640:	47c0      	blx	r8
 800b642:	3001      	adds	r0, #1
 800b644:	d09a      	beq.n	800b57c <_printf_i+0x12c>
 800b646:	3501      	adds	r5, #1
 800b648:	68e3      	ldr	r3, [r4, #12]
 800b64a:	9a03      	ldr	r2, [sp, #12]
 800b64c:	1a9b      	subs	r3, r3, r2
 800b64e:	42ab      	cmp	r3, r5
 800b650:	dcf2      	bgt.n	800b638 <_printf_i+0x1e8>
 800b652:	e7eb      	b.n	800b62c <_printf_i+0x1dc>
 800b654:	2500      	movs	r5, #0
 800b656:	f104 0919 	add.w	r9, r4, #25
 800b65a:	e7f5      	b.n	800b648 <_printf_i+0x1f8>
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1ac      	bne.n	800b5ba <_printf_i+0x16a>
 800b660:	7803      	ldrb	r3, [r0, #0]
 800b662:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b666:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b66a:	e76c      	b.n	800b546 <_printf_i+0xf6>
 800b66c:	0800ce62 	.word	0x0800ce62
 800b670:	0800ce73 	.word	0x0800ce73

0800b674 <_sbrk_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4c06      	ldr	r4, [pc, #24]	; (800b690 <_sbrk_r+0x1c>)
 800b678:	2300      	movs	r3, #0
 800b67a:	4605      	mov	r5, r0
 800b67c:	4608      	mov	r0, r1
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	f001 fb38 	bl	800ccf4 <_sbrk>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_sbrk_r+0x1a>
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_sbrk_r+0x1a>
 800b68c:	602b      	str	r3, [r5, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	200021d4 	.word	0x200021d4

0800b694 <_vsniprintf_r>:
 800b694:	b530      	push	{r4, r5, lr}
 800b696:	1e14      	subs	r4, r2, #0
 800b698:	4605      	mov	r5, r0
 800b69a:	b09b      	sub	sp, #108	; 0x6c
 800b69c:	4618      	mov	r0, r3
 800b69e:	da05      	bge.n	800b6ac <_vsniprintf_r+0x18>
 800b6a0:	238b      	movs	r3, #139	; 0x8b
 800b6a2:	602b      	str	r3, [r5, #0]
 800b6a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6a8:	b01b      	add	sp, #108	; 0x6c
 800b6aa:	bd30      	pop	{r4, r5, pc}
 800b6ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b6b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b6b4:	bf14      	ite	ne
 800b6b6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b6ba:	4623      	moveq	r3, r4
 800b6bc:	9302      	str	r3, [sp, #8]
 800b6be:	9305      	str	r3, [sp, #20]
 800b6c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6c4:	9100      	str	r1, [sp, #0]
 800b6c6:	9104      	str	r1, [sp, #16]
 800b6c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6d0:	4669      	mov	r1, sp
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f001 f9b0 	bl	800ca38 <_svfiprintf_r>
 800b6d8:	1c43      	adds	r3, r0, #1
 800b6da:	bfbc      	itt	lt
 800b6dc:	238b      	movlt	r3, #139	; 0x8b
 800b6de:	602b      	strlt	r3, [r5, #0]
 800b6e0:	2c00      	cmp	r4, #0
 800b6e2:	d0e1      	beq.n	800b6a8 <_vsniprintf_r+0x14>
 800b6e4:	9b00      	ldr	r3, [sp, #0]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	e7dd      	b.n	800b6a8 <_vsniprintf_r+0x14>

0800b6ec <vsniprintf>:
 800b6ec:	b507      	push	{r0, r1, r2, lr}
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	460a      	mov	r2, r1
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	4803      	ldr	r0, [pc, #12]	; (800b704 <vsniprintf+0x18>)
 800b6f8:	6800      	ldr	r0, [r0, #0]
 800b6fa:	f7ff ffcb 	bl	800b694 <_vsniprintf_r>
 800b6fe:	b003      	add	sp, #12
 800b700:	f85d fb04 	ldr.w	pc, [sp], #4
 800b704:	20000018 	.word	0x20000018

0800b708 <quorem>:
 800b708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	6903      	ldr	r3, [r0, #16]
 800b70e:	690c      	ldr	r4, [r1, #16]
 800b710:	42a3      	cmp	r3, r4
 800b712:	4680      	mov	r8, r0
 800b714:	f2c0 8082 	blt.w	800b81c <quorem+0x114>
 800b718:	3c01      	subs	r4, #1
 800b71a:	f101 0714 	add.w	r7, r1, #20
 800b71e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b722:	f100 0614 	add.w	r6, r0, #20
 800b726:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b72a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b72e:	eb06 030c 	add.w	r3, r6, ip
 800b732:	3501      	adds	r5, #1
 800b734:	eb07 090c 	add.w	r9, r7, ip
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	fbb0 f5f5 	udiv	r5, r0, r5
 800b73e:	b395      	cbz	r5, 800b7a6 <quorem+0x9e>
 800b740:	f04f 0a00 	mov.w	sl, #0
 800b744:	4638      	mov	r0, r7
 800b746:	46b6      	mov	lr, r6
 800b748:	46d3      	mov	fp, sl
 800b74a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b74e:	b293      	uxth	r3, r2
 800b750:	fb05 a303 	mla	r3, r5, r3, sl
 800b754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b758:	b29b      	uxth	r3, r3
 800b75a:	ebab 0303 	sub.w	r3, fp, r3
 800b75e:	0c12      	lsrs	r2, r2, #16
 800b760:	f8de b000 	ldr.w	fp, [lr]
 800b764:	fb05 a202 	mla	r2, r5, r2, sl
 800b768:	fa13 f38b 	uxtah	r3, r3, fp
 800b76c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b770:	fa1f fb82 	uxth.w	fp, r2
 800b774:	f8de 2000 	ldr.w	r2, [lr]
 800b778:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b77c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b780:	b29b      	uxth	r3, r3
 800b782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b786:	4581      	cmp	r9, r0
 800b788:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b78c:	f84e 3b04 	str.w	r3, [lr], #4
 800b790:	d2db      	bcs.n	800b74a <quorem+0x42>
 800b792:	f856 300c 	ldr.w	r3, [r6, ip]
 800b796:	b933      	cbnz	r3, 800b7a6 <quorem+0x9e>
 800b798:	9b01      	ldr	r3, [sp, #4]
 800b79a:	3b04      	subs	r3, #4
 800b79c:	429e      	cmp	r6, r3
 800b79e:	461a      	mov	r2, r3
 800b7a0:	d330      	bcc.n	800b804 <quorem+0xfc>
 800b7a2:	f8c8 4010 	str.w	r4, [r8, #16]
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	f001 f818 	bl	800c7dc <__mcmp>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	db25      	blt.n	800b7fc <quorem+0xf4>
 800b7b0:	3501      	adds	r5, #1
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f04f 0c00 	mov.w	ip, #0
 800b7b8:	f857 2b04 	ldr.w	r2, [r7], #4
 800b7bc:	f8d0 e000 	ldr.w	lr, [r0]
 800b7c0:	b293      	uxth	r3, r2
 800b7c2:	ebac 0303 	sub.w	r3, ip, r3
 800b7c6:	0c12      	lsrs	r2, r2, #16
 800b7c8:	fa13 f38e 	uxtah	r3, r3, lr
 800b7cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7da:	45b9      	cmp	r9, r7
 800b7dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7e0:	f840 3b04 	str.w	r3, [r0], #4
 800b7e4:	d2e8      	bcs.n	800b7b8 <quorem+0xb0>
 800b7e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b7ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b7ee:	b92a      	cbnz	r2, 800b7fc <quorem+0xf4>
 800b7f0:	3b04      	subs	r3, #4
 800b7f2:	429e      	cmp	r6, r3
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	d30b      	bcc.n	800b810 <quorem+0x108>
 800b7f8:	f8c8 4010 	str.w	r4, [r8, #16]
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	b003      	add	sp, #12
 800b800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b804:	6812      	ldr	r2, [r2, #0]
 800b806:	3b04      	subs	r3, #4
 800b808:	2a00      	cmp	r2, #0
 800b80a:	d1ca      	bne.n	800b7a2 <quorem+0x9a>
 800b80c:	3c01      	subs	r4, #1
 800b80e:	e7c5      	b.n	800b79c <quorem+0x94>
 800b810:	6812      	ldr	r2, [r2, #0]
 800b812:	3b04      	subs	r3, #4
 800b814:	2a00      	cmp	r2, #0
 800b816:	d1ef      	bne.n	800b7f8 <quorem+0xf0>
 800b818:	3c01      	subs	r4, #1
 800b81a:	e7ea      	b.n	800b7f2 <quorem+0xea>
 800b81c:	2000      	movs	r0, #0
 800b81e:	e7ee      	b.n	800b7fe <quorem+0xf6>

0800b820 <_dtoa_r>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	ec57 6b10 	vmov	r6, r7, d0
 800b828:	b097      	sub	sp, #92	; 0x5c
 800b82a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b82c:	9106      	str	r1, [sp, #24]
 800b82e:	4604      	mov	r4, r0
 800b830:	920b      	str	r2, [sp, #44]	; 0x2c
 800b832:	9312      	str	r3, [sp, #72]	; 0x48
 800b834:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b838:	e9cd 6700 	strd	r6, r7, [sp]
 800b83c:	b93d      	cbnz	r5, 800b84e <_dtoa_r+0x2e>
 800b83e:	2010      	movs	r0, #16
 800b840:	f7ff f9f0 	bl	800ac24 <malloc>
 800b844:	6260      	str	r0, [r4, #36]	; 0x24
 800b846:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b84a:	6005      	str	r5, [r0, #0]
 800b84c:	60c5      	str	r5, [r0, #12]
 800b84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b850:	6819      	ldr	r1, [r3, #0]
 800b852:	b151      	cbz	r1, 800b86a <_dtoa_r+0x4a>
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	604a      	str	r2, [r1, #4]
 800b858:	2301      	movs	r3, #1
 800b85a:	4093      	lsls	r3, r2
 800b85c:	608b      	str	r3, [r1, #8]
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 fdda 	bl	800c418 <_Bfree>
 800b864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b866:	2200      	movs	r2, #0
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	1e3b      	subs	r3, r7, #0
 800b86c:	bfbb      	ittet	lt
 800b86e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b872:	9301      	strlt	r3, [sp, #4]
 800b874:	2300      	movge	r3, #0
 800b876:	2201      	movlt	r2, #1
 800b878:	bfac      	ite	ge
 800b87a:	f8c8 3000 	strge.w	r3, [r8]
 800b87e:	f8c8 2000 	strlt.w	r2, [r8]
 800b882:	4baf      	ldr	r3, [pc, #700]	; (800bb40 <_dtoa_r+0x320>)
 800b884:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b888:	ea33 0308 	bics.w	r3, r3, r8
 800b88c:	d114      	bne.n	800b8b8 <_dtoa_r+0x98>
 800b88e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b890:	f242 730f 	movw	r3, #9999	; 0x270f
 800b894:	6013      	str	r3, [r2, #0]
 800b896:	9b00      	ldr	r3, [sp, #0]
 800b898:	b923      	cbnz	r3, 800b8a4 <_dtoa_r+0x84>
 800b89a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	f000 8542 	beq.w	800c328 <_dtoa_r+0xb08>
 800b8a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bb54 <_dtoa_r+0x334>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 8544 	beq.w	800c338 <_dtoa_r+0xb18>
 800b8b0:	f10b 0303 	add.w	r3, fp, #3
 800b8b4:	f000 bd3e 	b.w	800c334 <_dtoa_r+0xb14>
 800b8b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	4639      	mov	r1, r7
 800b8c4:	f7f5 f910 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8c8:	4681      	mov	r9, r0
 800b8ca:	b168      	cbz	r0, 800b8e8 <_dtoa_r+0xc8>
 800b8cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 8524 	beq.w	800c322 <_dtoa_r+0xb02>
 800b8da:	4b9a      	ldr	r3, [pc, #616]	; (800bb44 <_dtoa_r+0x324>)
 800b8dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8de:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	f000 bd28 	b.w	800c338 <_dtoa_r+0xb18>
 800b8e8:	aa14      	add	r2, sp, #80	; 0x50
 800b8ea:	a915      	add	r1, sp, #84	; 0x54
 800b8ec:	ec47 6b10 	vmov	d0, r6, r7
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f000 ffea 	bl	800c8ca <__d2b>
 800b8f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b8fa:	9004      	str	r0, [sp, #16]
 800b8fc:	2d00      	cmp	r5, #0
 800b8fe:	d07c      	beq.n	800b9fa <_dtoa_r+0x1da>
 800b900:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b904:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b908:	46b2      	mov	sl, r6
 800b90a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b90e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b912:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b916:	2200      	movs	r2, #0
 800b918:	4b8b      	ldr	r3, [pc, #556]	; (800bb48 <_dtoa_r+0x328>)
 800b91a:	4650      	mov	r0, sl
 800b91c:	4659      	mov	r1, fp
 800b91e:	f7f4 fcc3 	bl	80002a8 <__aeabi_dsub>
 800b922:	a381      	add	r3, pc, #516	; (adr r3, 800bb28 <_dtoa_r+0x308>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fe76 	bl	8000618 <__aeabi_dmul>
 800b92c:	a380      	add	r3, pc, #512	; (adr r3, 800bb30 <_dtoa_r+0x310>)
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	f7f4 fcbb 	bl	80002ac <__adddf3>
 800b936:	4606      	mov	r6, r0
 800b938:	4628      	mov	r0, r5
 800b93a:	460f      	mov	r7, r1
 800b93c:	f7f4 fe02 	bl	8000544 <__aeabi_i2d>
 800b940:	a37d      	add	r3, pc, #500	; (adr r3, 800bb38 <_dtoa_r+0x318>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	f7f4 fe67 	bl	8000618 <__aeabi_dmul>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	4630      	mov	r0, r6
 800b950:	4639      	mov	r1, r7
 800b952:	f7f4 fcab 	bl	80002ac <__adddf3>
 800b956:	4606      	mov	r6, r0
 800b958:	460f      	mov	r7, r1
 800b95a:	f7f5 f90d 	bl	8000b78 <__aeabi_d2iz>
 800b95e:	2200      	movs	r2, #0
 800b960:	4682      	mov	sl, r0
 800b962:	2300      	movs	r3, #0
 800b964:	4630      	mov	r0, r6
 800b966:	4639      	mov	r1, r7
 800b968:	f7f5 f8c8 	bl	8000afc <__aeabi_dcmplt>
 800b96c:	b148      	cbz	r0, 800b982 <_dtoa_r+0x162>
 800b96e:	4650      	mov	r0, sl
 800b970:	f7f4 fde8 	bl	8000544 <__aeabi_i2d>
 800b974:	4632      	mov	r2, r6
 800b976:	463b      	mov	r3, r7
 800b978:	f7f5 f8b6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b97c:	b908      	cbnz	r0, 800b982 <_dtoa_r+0x162>
 800b97e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b982:	f1ba 0f16 	cmp.w	sl, #22
 800b986:	d859      	bhi.n	800ba3c <_dtoa_r+0x21c>
 800b988:	4970      	ldr	r1, [pc, #448]	; (800bb4c <_dtoa_r+0x32c>)
 800b98a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b98e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b992:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b996:	f7f5 f8cf 	bl	8000b38 <__aeabi_dcmpgt>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d050      	beq.n	800ba40 <_dtoa_r+0x220>
 800b99e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9a8:	1b5d      	subs	r5, r3, r5
 800b9aa:	f1b5 0801 	subs.w	r8, r5, #1
 800b9ae:	bf49      	itett	mi
 800b9b0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9b4:	2300      	movpl	r3, #0
 800b9b6:	9305      	strmi	r3, [sp, #20]
 800b9b8:	f04f 0800 	movmi.w	r8, #0
 800b9bc:	bf58      	it	pl
 800b9be:	9305      	strpl	r3, [sp, #20]
 800b9c0:	f1ba 0f00 	cmp.w	sl, #0
 800b9c4:	db3e      	blt.n	800ba44 <_dtoa_r+0x224>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	44d0      	add	r8, sl
 800b9ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b9ce:	9307      	str	r3, [sp, #28]
 800b9d0:	9b06      	ldr	r3, [sp, #24]
 800b9d2:	2b09      	cmp	r3, #9
 800b9d4:	f200 8090 	bhi.w	800baf8 <_dtoa_r+0x2d8>
 800b9d8:	2b05      	cmp	r3, #5
 800b9da:	bfc4      	itt	gt
 800b9dc:	3b04      	subgt	r3, #4
 800b9de:	9306      	strgt	r3, [sp, #24]
 800b9e0:	9b06      	ldr	r3, [sp, #24]
 800b9e2:	f1a3 0302 	sub.w	r3, r3, #2
 800b9e6:	bfcc      	ite	gt
 800b9e8:	2500      	movgt	r5, #0
 800b9ea:	2501      	movle	r5, #1
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	f200 808f 	bhi.w	800bb10 <_dtoa_r+0x2f0>
 800b9f2:	e8df f003 	tbb	[pc, r3]
 800b9f6:	7f7d      	.short	0x7f7d
 800b9f8:	7131      	.short	0x7131
 800b9fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b9fe:	441d      	add	r5, r3
 800ba00:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ba04:	2820      	cmp	r0, #32
 800ba06:	dd13      	ble.n	800ba30 <_dtoa_r+0x210>
 800ba08:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ba0c:	9b00      	ldr	r3, [sp, #0]
 800ba0e:	fa08 f800 	lsl.w	r8, r8, r0
 800ba12:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ba16:	fa23 f000 	lsr.w	r0, r3, r0
 800ba1a:	ea48 0000 	orr.w	r0, r8, r0
 800ba1e:	f7f4 fd81 	bl	8000524 <__aeabi_ui2d>
 800ba22:	2301      	movs	r3, #1
 800ba24:	4682      	mov	sl, r0
 800ba26:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ba2a:	3d01      	subs	r5, #1
 800ba2c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba2e:	e772      	b.n	800b916 <_dtoa_r+0xf6>
 800ba30:	9b00      	ldr	r3, [sp, #0]
 800ba32:	f1c0 0020 	rsb	r0, r0, #32
 800ba36:	fa03 f000 	lsl.w	r0, r3, r0
 800ba3a:	e7f0      	b.n	800ba1e <_dtoa_r+0x1fe>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e7b1      	b.n	800b9a4 <_dtoa_r+0x184>
 800ba40:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba42:	e7b0      	b.n	800b9a6 <_dtoa_r+0x186>
 800ba44:	9b05      	ldr	r3, [sp, #20]
 800ba46:	eba3 030a 	sub.w	r3, r3, sl
 800ba4a:	9305      	str	r3, [sp, #20]
 800ba4c:	f1ca 0300 	rsb	r3, sl, #0
 800ba50:	9307      	str	r3, [sp, #28]
 800ba52:	2300      	movs	r3, #0
 800ba54:	930e      	str	r3, [sp, #56]	; 0x38
 800ba56:	e7bb      	b.n	800b9d0 <_dtoa_r+0x1b0>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dd59      	ble.n	800bb16 <_dtoa_r+0x2f6>
 800ba62:	9302      	str	r3, [sp, #8]
 800ba64:	4699      	mov	r9, r3
 800ba66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba68:	2200      	movs	r2, #0
 800ba6a:	6072      	str	r2, [r6, #4]
 800ba6c:	2204      	movs	r2, #4
 800ba6e:	f102 0014 	add.w	r0, r2, #20
 800ba72:	4298      	cmp	r0, r3
 800ba74:	6871      	ldr	r1, [r6, #4]
 800ba76:	d953      	bls.n	800bb20 <_dtoa_r+0x300>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 fc99 	bl	800c3b0 <_Balloc>
 800ba7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba80:	6030      	str	r0, [r6, #0]
 800ba82:	f1b9 0f0e 	cmp.w	r9, #14
 800ba86:	f8d3 b000 	ldr.w	fp, [r3]
 800ba8a:	f200 80e6 	bhi.w	800bc5a <_dtoa_r+0x43a>
 800ba8e:	2d00      	cmp	r5, #0
 800ba90:	f000 80e3 	beq.w	800bc5a <_dtoa_r+0x43a>
 800ba94:	ed9d 7b00 	vldr	d7, [sp]
 800ba98:	f1ba 0f00 	cmp.w	sl, #0
 800ba9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800baa0:	dd74      	ble.n	800bb8c <_dtoa_r+0x36c>
 800baa2:	4a2a      	ldr	r2, [pc, #168]	; (800bb4c <_dtoa_r+0x32c>)
 800baa4:	f00a 030f 	and.w	r3, sl, #15
 800baa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800baac:	ed93 7b00 	vldr	d7, [r3]
 800bab0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bab4:	06f0      	lsls	r0, r6, #27
 800bab6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800baba:	d565      	bpl.n	800bb88 <_dtoa_r+0x368>
 800babc:	4b24      	ldr	r3, [pc, #144]	; (800bb50 <_dtoa_r+0x330>)
 800babe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bac2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bac6:	f7f4 fed1 	bl	800086c <__aeabi_ddiv>
 800baca:	e9cd 0100 	strd	r0, r1, [sp]
 800bace:	f006 060f 	and.w	r6, r6, #15
 800bad2:	2503      	movs	r5, #3
 800bad4:	4f1e      	ldr	r7, [pc, #120]	; (800bb50 <_dtoa_r+0x330>)
 800bad6:	e04c      	b.n	800bb72 <_dtoa_r+0x352>
 800bad8:	2301      	movs	r3, #1
 800bada:	930a      	str	r3, [sp, #40]	; 0x28
 800badc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bade:	4453      	add	r3, sl
 800bae0:	f103 0901 	add.w	r9, r3, #1
 800bae4:	9302      	str	r3, [sp, #8]
 800bae6:	464b      	mov	r3, r9
 800bae8:	2b01      	cmp	r3, #1
 800baea:	bfb8      	it	lt
 800baec:	2301      	movlt	r3, #1
 800baee:	e7ba      	b.n	800ba66 <_dtoa_r+0x246>
 800baf0:	2300      	movs	r3, #0
 800baf2:	e7b2      	b.n	800ba5a <_dtoa_r+0x23a>
 800baf4:	2300      	movs	r3, #0
 800baf6:	e7f0      	b.n	800bada <_dtoa_r+0x2ba>
 800baf8:	2501      	movs	r5, #1
 800bafa:	2300      	movs	r3, #0
 800bafc:	9306      	str	r3, [sp, #24]
 800bafe:	950a      	str	r5, [sp, #40]	; 0x28
 800bb00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb04:	9302      	str	r3, [sp, #8]
 800bb06:	4699      	mov	r9, r3
 800bb08:	2200      	movs	r2, #0
 800bb0a:	2312      	movs	r3, #18
 800bb0c:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb0e:	e7aa      	b.n	800ba66 <_dtoa_r+0x246>
 800bb10:	2301      	movs	r3, #1
 800bb12:	930a      	str	r3, [sp, #40]	; 0x28
 800bb14:	e7f4      	b.n	800bb00 <_dtoa_r+0x2e0>
 800bb16:	2301      	movs	r3, #1
 800bb18:	9302      	str	r3, [sp, #8]
 800bb1a:	4699      	mov	r9, r3
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	e7f5      	b.n	800bb0c <_dtoa_r+0x2ec>
 800bb20:	3101      	adds	r1, #1
 800bb22:	6071      	str	r1, [r6, #4]
 800bb24:	0052      	lsls	r2, r2, #1
 800bb26:	e7a2      	b.n	800ba6e <_dtoa_r+0x24e>
 800bb28:	636f4361 	.word	0x636f4361
 800bb2c:	3fd287a7 	.word	0x3fd287a7
 800bb30:	8b60c8b3 	.word	0x8b60c8b3
 800bb34:	3fc68a28 	.word	0x3fc68a28
 800bb38:	509f79fb 	.word	0x509f79fb
 800bb3c:	3fd34413 	.word	0x3fd34413
 800bb40:	7ff00000 	.word	0x7ff00000
 800bb44:	0800ce61 	.word	0x0800ce61
 800bb48:	3ff80000 	.word	0x3ff80000
 800bb4c:	0800cec0 	.word	0x0800cec0
 800bb50:	0800ce98 	.word	0x0800ce98
 800bb54:	0800ce8d 	.word	0x0800ce8d
 800bb58:	07f1      	lsls	r1, r6, #31
 800bb5a:	d508      	bpl.n	800bb6e <_dtoa_r+0x34e>
 800bb5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb64:	f7f4 fd58 	bl	8000618 <__aeabi_dmul>
 800bb68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	1076      	asrs	r6, r6, #1
 800bb70:	3708      	adds	r7, #8
 800bb72:	2e00      	cmp	r6, #0
 800bb74:	d1f0      	bne.n	800bb58 <_dtoa_r+0x338>
 800bb76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb7e:	f7f4 fe75 	bl	800086c <__aeabi_ddiv>
 800bb82:	e9cd 0100 	strd	r0, r1, [sp]
 800bb86:	e01a      	b.n	800bbbe <_dtoa_r+0x39e>
 800bb88:	2502      	movs	r5, #2
 800bb8a:	e7a3      	b.n	800bad4 <_dtoa_r+0x2b4>
 800bb8c:	f000 80a0 	beq.w	800bcd0 <_dtoa_r+0x4b0>
 800bb90:	f1ca 0600 	rsb	r6, sl, #0
 800bb94:	4b9f      	ldr	r3, [pc, #636]	; (800be14 <_dtoa_r+0x5f4>)
 800bb96:	4fa0      	ldr	r7, [pc, #640]	; (800be18 <_dtoa_r+0x5f8>)
 800bb98:	f006 020f 	and.w	r2, r6, #15
 800bb9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bba8:	f7f4 fd36 	bl	8000618 <__aeabi_dmul>
 800bbac:	e9cd 0100 	strd	r0, r1, [sp]
 800bbb0:	1136      	asrs	r6, r6, #4
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	2502      	movs	r5, #2
 800bbb6:	2e00      	cmp	r6, #0
 800bbb8:	d17f      	bne.n	800bcba <_dtoa_r+0x49a>
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1e1      	bne.n	800bb82 <_dtoa_r+0x362>
 800bbbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 8087 	beq.w	800bcd4 <_dtoa_r+0x4b4>
 800bbc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	4b93      	ldr	r3, [pc, #588]	; (800be1c <_dtoa_r+0x5fc>)
 800bbce:	4630      	mov	r0, r6
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	f7f4 ff93 	bl	8000afc <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d07c      	beq.n	800bcd4 <_dtoa_r+0x4b4>
 800bbda:	f1b9 0f00 	cmp.w	r9, #0
 800bbde:	d079      	beq.n	800bcd4 <_dtoa_r+0x4b4>
 800bbe0:	9b02      	ldr	r3, [sp, #8]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	dd35      	ble.n	800bc52 <_dtoa_r+0x432>
 800bbe6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bbea:	9308      	str	r3, [sp, #32]
 800bbec:	4639      	mov	r1, r7
 800bbee:	2200      	movs	r2, #0
 800bbf0:	4b8b      	ldr	r3, [pc, #556]	; (800be20 <_dtoa_r+0x600>)
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7f4 fd10 	bl	8000618 <__aeabi_dmul>
 800bbf8:	e9cd 0100 	strd	r0, r1, [sp]
 800bbfc:	9f02      	ldr	r7, [sp, #8]
 800bbfe:	3501      	adds	r5, #1
 800bc00:	4628      	mov	r0, r5
 800bc02:	f7f4 fc9f 	bl	8000544 <__aeabi_i2d>
 800bc06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc0a:	f7f4 fd05 	bl	8000618 <__aeabi_dmul>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	4b84      	ldr	r3, [pc, #528]	; (800be24 <_dtoa_r+0x604>)
 800bc12:	f7f4 fb4b 	bl	80002ac <__adddf3>
 800bc16:	4605      	mov	r5, r0
 800bc18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bc1c:	2f00      	cmp	r7, #0
 800bc1e:	d15d      	bne.n	800bcdc <_dtoa_r+0x4bc>
 800bc20:	2200      	movs	r2, #0
 800bc22:	4b81      	ldr	r3, [pc, #516]	; (800be28 <_dtoa_r+0x608>)
 800bc24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc28:	f7f4 fb3e 	bl	80002a8 <__aeabi_dsub>
 800bc2c:	462a      	mov	r2, r5
 800bc2e:	4633      	mov	r3, r6
 800bc30:	e9cd 0100 	strd	r0, r1, [sp]
 800bc34:	f7f4 ff80 	bl	8000b38 <__aeabi_dcmpgt>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	f040 8288 	bne.w	800c14e <_dtoa_r+0x92e>
 800bc3e:	462a      	mov	r2, r5
 800bc40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc48:	f7f4 ff58 	bl	8000afc <__aeabi_dcmplt>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	f040 827c 	bne.w	800c14a <_dtoa_r+0x92a>
 800bc52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc56:	e9cd 2300 	strd	r2, r3, [sp]
 800bc5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f2c0 8150 	blt.w	800bf02 <_dtoa_r+0x6e2>
 800bc62:	f1ba 0f0e 	cmp.w	sl, #14
 800bc66:	f300 814c 	bgt.w	800bf02 <_dtoa_r+0x6e2>
 800bc6a:	4b6a      	ldr	r3, [pc, #424]	; (800be14 <_dtoa_r+0x5f4>)
 800bc6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc70:	ed93 7b00 	vldr	d7, [r3]
 800bc74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc7c:	f280 80d8 	bge.w	800be30 <_dtoa_r+0x610>
 800bc80:	f1b9 0f00 	cmp.w	r9, #0
 800bc84:	f300 80d4 	bgt.w	800be30 <_dtoa_r+0x610>
 800bc88:	f040 825e 	bne.w	800c148 <_dtoa_r+0x928>
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	4b66      	ldr	r3, [pc, #408]	; (800be28 <_dtoa_r+0x608>)
 800bc90:	ec51 0b17 	vmov	r0, r1, d7
 800bc94:	f7f4 fcc0 	bl	8000618 <__aeabi_dmul>
 800bc98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc9c:	f7f4 ff42 	bl	8000b24 <__aeabi_dcmpge>
 800bca0:	464f      	mov	r7, r9
 800bca2:	464e      	mov	r6, r9
 800bca4:	2800      	cmp	r0, #0
 800bca6:	f040 8234 	bne.w	800c112 <_dtoa_r+0x8f2>
 800bcaa:	2331      	movs	r3, #49	; 0x31
 800bcac:	f10b 0501 	add.w	r5, fp, #1
 800bcb0:	f88b 3000 	strb.w	r3, [fp]
 800bcb4:	f10a 0a01 	add.w	sl, sl, #1
 800bcb8:	e22f      	b.n	800c11a <_dtoa_r+0x8fa>
 800bcba:	07f2      	lsls	r2, r6, #31
 800bcbc:	d505      	bpl.n	800bcca <_dtoa_r+0x4aa>
 800bcbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc2:	f7f4 fca9 	bl	8000618 <__aeabi_dmul>
 800bcc6:	3501      	adds	r5, #1
 800bcc8:	2301      	movs	r3, #1
 800bcca:	1076      	asrs	r6, r6, #1
 800bccc:	3708      	adds	r7, #8
 800bcce:	e772      	b.n	800bbb6 <_dtoa_r+0x396>
 800bcd0:	2502      	movs	r5, #2
 800bcd2:	e774      	b.n	800bbbe <_dtoa_r+0x39e>
 800bcd4:	f8cd a020 	str.w	sl, [sp, #32]
 800bcd8:	464f      	mov	r7, r9
 800bcda:	e791      	b.n	800bc00 <_dtoa_r+0x3e0>
 800bcdc:	4b4d      	ldr	r3, [pc, #308]	; (800be14 <_dtoa_r+0x5f4>)
 800bcde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bce2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d047      	beq.n	800bd7c <_dtoa_r+0x55c>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	494e      	ldr	r1, [pc, #312]	; (800be2c <_dtoa_r+0x60c>)
 800bcf4:	f7f4 fdba 	bl	800086c <__aeabi_ddiv>
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	4633      	mov	r3, r6
 800bcfc:	f7f4 fad4 	bl	80002a8 <__aeabi_dsub>
 800bd00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd04:	465d      	mov	r5, fp
 800bd06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd0a:	f7f4 ff35 	bl	8000b78 <__aeabi_d2iz>
 800bd0e:	4606      	mov	r6, r0
 800bd10:	f7f4 fc18 	bl	8000544 <__aeabi_i2d>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd1c:	f7f4 fac4 	bl	80002a8 <__aeabi_dsub>
 800bd20:	3630      	adds	r6, #48	; 0x30
 800bd22:	f805 6b01 	strb.w	r6, [r5], #1
 800bd26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd2a:	e9cd 0100 	strd	r0, r1, [sp]
 800bd2e:	f7f4 fee5 	bl	8000afc <__aeabi_dcmplt>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d163      	bne.n	800bdfe <_dtoa_r+0x5de>
 800bd36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	4937      	ldr	r1, [pc, #220]	; (800be1c <_dtoa_r+0x5fc>)
 800bd3e:	f7f4 fab3 	bl	80002a8 <__aeabi_dsub>
 800bd42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd46:	f7f4 fed9 	bl	8000afc <__aeabi_dcmplt>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	f040 80b7 	bne.w	800bebe <_dtoa_r+0x69e>
 800bd50:	eba5 030b 	sub.w	r3, r5, fp
 800bd54:	429f      	cmp	r7, r3
 800bd56:	f77f af7c 	ble.w	800bc52 <_dtoa_r+0x432>
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4b30      	ldr	r3, [pc, #192]	; (800be20 <_dtoa_r+0x600>)
 800bd5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd62:	f7f4 fc59 	bl	8000618 <__aeabi_dmul>
 800bd66:	2200      	movs	r2, #0
 800bd68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd6c:	4b2c      	ldr	r3, [pc, #176]	; (800be20 <_dtoa_r+0x600>)
 800bd6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd72:	f7f4 fc51 	bl	8000618 <__aeabi_dmul>
 800bd76:	e9cd 0100 	strd	r0, r1, [sp]
 800bd7a:	e7c4      	b.n	800bd06 <_dtoa_r+0x4e6>
 800bd7c:	462a      	mov	r2, r5
 800bd7e:	4633      	mov	r3, r6
 800bd80:	f7f4 fc4a 	bl	8000618 <__aeabi_dmul>
 800bd84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd88:	eb0b 0507 	add.w	r5, fp, r7
 800bd8c:	465e      	mov	r6, fp
 800bd8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd92:	f7f4 fef1 	bl	8000b78 <__aeabi_d2iz>
 800bd96:	4607      	mov	r7, r0
 800bd98:	f7f4 fbd4 	bl	8000544 <__aeabi_i2d>
 800bd9c:	3730      	adds	r7, #48	; 0x30
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bda6:	f7f4 fa7f 	bl	80002a8 <__aeabi_dsub>
 800bdaa:	f806 7b01 	strb.w	r7, [r6], #1
 800bdae:	42ae      	cmp	r6, r5
 800bdb0:	e9cd 0100 	strd	r0, r1, [sp]
 800bdb4:	f04f 0200 	mov.w	r2, #0
 800bdb8:	d126      	bne.n	800be08 <_dtoa_r+0x5e8>
 800bdba:	4b1c      	ldr	r3, [pc, #112]	; (800be2c <_dtoa_r+0x60c>)
 800bdbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdc0:	f7f4 fa74 	bl	80002ac <__adddf3>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdcc:	f7f4 feb4 	bl	8000b38 <__aeabi_dcmpgt>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d174      	bne.n	800bebe <_dtoa_r+0x69e>
 800bdd4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bdd8:	2000      	movs	r0, #0
 800bdda:	4914      	ldr	r1, [pc, #80]	; (800be2c <_dtoa_r+0x60c>)
 800bddc:	f7f4 fa64 	bl	80002a8 <__aeabi_dsub>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bde8:	f7f4 fe88 	bl	8000afc <__aeabi_dcmplt>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	f43f af30 	beq.w	800bc52 <_dtoa_r+0x432>
 800bdf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdf6:	2b30      	cmp	r3, #48	; 0x30
 800bdf8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bdfc:	d002      	beq.n	800be04 <_dtoa_r+0x5e4>
 800bdfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800be02:	e04a      	b.n	800be9a <_dtoa_r+0x67a>
 800be04:	4615      	mov	r5, r2
 800be06:	e7f4      	b.n	800bdf2 <_dtoa_r+0x5d2>
 800be08:	4b05      	ldr	r3, [pc, #20]	; (800be20 <_dtoa_r+0x600>)
 800be0a:	f7f4 fc05 	bl	8000618 <__aeabi_dmul>
 800be0e:	e9cd 0100 	strd	r0, r1, [sp]
 800be12:	e7bc      	b.n	800bd8e <_dtoa_r+0x56e>
 800be14:	0800cec0 	.word	0x0800cec0
 800be18:	0800ce98 	.word	0x0800ce98
 800be1c:	3ff00000 	.word	0x3ff00000
 800be20:	40240000 	.word	0x40240000
 800be24:	401c0000 	.word	0x401c0000
 800be28:	40140000 	.word	0x40140000
 800be2c:	3fe00000 	.word	0x3fe00000
 800be30:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be34:	465d      	mov	r5, fp
 800be36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be3a:	4630      	mov	r0, r6
 800be3c:	4639      	mov	r1, r7
 800be3e:	f7f4 fd15 	bl	800086c <__aeabi_ddiv>
 800be42:	f7f4 fe99 	bl	8000b78 <__aeabi_d2iz>
 800be46:	4680      	mov	r8, r0
 800be48:	f7f4 fb7c 	bl	8000544 <__aeabi_i2d>
 800be4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be50:	f7f4 fbe2 	bl	8000618 <__aeabi_dmul>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4630      	mov	r0, r6
 800be5a:	4639      	mov	r1, r7
 800be5c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800be60:	f7f4 fa22 	bl	80002a8 <__aeabi_dsub>
 800be64:	f805 6b01 	strb.w	r6, [r5], #1
 800be68:	eba5 060b 	sub.w	r6, r5, fp
 800be6c:	45b1      	cmp	r9, r6
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	d139      	bne.n	800bee8 <_dtoa_r+0x6c8>
 800be74:	f7f4 fa1a 	bl	80002ac <__adddf3>
 800be78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be7c:	4606      	mov	r6, r0
 800be7e:	460f      	mov	r7, r1
 800be80:	f7f4 fe5a 	bl	8000b38 <__aeabi_dcmpgt>
 800be84:	b9c8      	cbnz	r0, 800beba <_dtoa_r+0x69a>
 800be86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be8a:	4630      	mov	r0, r6
 800be8c:	4639      	mov	r1, r7
 800be8e:	f7f4 fe2b 	bl	8000ae8 <__aeabi_dcmpeq>
 800be92:	b110      	cbz	r0, 800be9a <_dtoa_r+0x67a>
 800be94:	f018 0f01 	tst.w	r8, #1
 800be98:	d10f      	bne.n	800beba <_dtoa_r+0x69a>
 800be9a:	9904      	ldr	r1, [sp, #16]
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fabb 	bl	800c418 <_Bfree>
 800bea2:	2300      	movs	r3, #0
 800bea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bea6:	702b      	strb	r3, [r5, #0]
 800bea8:	f10a 0301 	add.w	r3, sl, #1
 800beac:	6013      	str	r3, [r2, #0]
 800beae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 8241 	beq.w	800c338 <_dtoa_r+0xb18>
 800beb6:	601d      	str	r5, [r3, #0]
 800beb8:	e23e      	b.n	800c338 <_dtoa_r+0xb18>
 800beba:	f8cd a020 	str.w	sl, [sp, #32]
 800bebe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bec2:	2a39      	cmp	r2, #57	; 0x39
 800bec4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800bec8:	d108      	bne.n	800bedc <_dtoa_r+0x6bc>
 800beca:	459b      	cmp	fp, r3
 800becc:	d10a      	bne.n	800bee4 <_dtoa_r+0x6c4>
 800bece:	9b08      	ldr	r3, [sp, #32]
 800bed0:	3301      	adds	r3, #1
 800bed2:	9308      	str	r3, [sp, #32]
 800bed4:	2330      	movs	r3, #48	; 0x30
 800bed6:	f88b 3000 	strb.w	r3, [fp]
 800beda:	465b      	mov	r3, fp
 800bedc:	781a      	ldrb	r2, [r3, #0]
 800bede:	3201      	adds	r2, #1
 800bee0:	701a      	strb	r2, [r3, #0]
 800bee2:	e78c      	b.n	800bdfe <_dtoa_r+0x5de>
 800bee4:	461d      	mov	r5, r3
 800bee6:	e7ea      	b.n	800bebe <_dtoa_r+0x69e>
 800bee8:	2200      	movs	r2, #0
 800beea:	4b9b      	ldr	r3, [pc, #620]	; (800c158 <_dtoa_r+0x938>)
 800beec:	f7f4 fb94 	bl	8000618 <__aeabi_dmul>
 800bef0:	2200      	movs	r2, #0
 800bef2:	2300      	movs	r3, #0
 800bef4:	4606      	mov	r6, r0
 800bef6:	460f      	mov	r7, r1
 800bef8:	f7f4 fdf6 	bl	8000ae8 <__aeabi_dcmpeq>
 800befc:	2800      	cmp	r0, #0
 800befe:	d09a      	beq.n	800be36 <_dtoa_r+0x616>
 800bf00:	e7cb      	b.n	800be9a <_dtoa_r+0x67a>
 800bf02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf04:	2a00      	cmp	r2, #0
 800bf06:	f000 808b 	beq.w	800c020 <_dtoa_r+0x800>
 800bf0a:	9a06      	ldr	r2, [sp, #24]
 800bf0c:	2a01      	cmp	r2, #1
 800bf0e:	dc6e      	bgt.n	800bfee <_dtoa_r+0x7ce>
 800bf10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf12:	2a00      	cmp	r2, #0
 800bf14:	d067      	beq.n	800bfe6 <_dtoa_r+0x7c6>
 800bf16:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf1a:	9f07      	ldr	r7, [sp, #28]
 800bf1c:	9d05      	ldr	r5, [sp, #20]
 800bf1e:	9a05      	ldr	r2, [sp, #20]
 800bf20:	2101      	movs	r1, #1
 800bf22:	441a      	add	r2, r3
 800bf24:	4620      	mov	r0, r4
 800bf26:	9205      	str	r2, [sp, #20]
 800bf28:	4498      	add	r8, r3
 800bf2a:	f000 fb15 	bl	800c558 <__i2b>
 800bf2e:	4606      	mov	r6, r0
 800bf30:	2d00      	cmp	r5, #0
 800bf32:	dd0c      	ble.n	800bf4e <_dtoa_r+0x72e>
 800bf34:	f1b8 0f00 	cmp.w	r8, #0
 800bf38:	dd09      	ble.n	800bf4e <_dtoa_r+0x72e>
 800bf3a:	4545      	cmp	r5, r8
 800bf3c:	9a05      	ldr	r2, [sp, #20]
 800bf3e:	462b      	mov	r3, r5
 800bf40:	bfa8      	it	ge
 800bf42:	4643      	movge	r3, r8
 800bf44:	1ad2      	subs	r2, r2, r3
 800bf46:	9205      	str	r2, [sp, #20]
 800bf48:	1aed      	subs	r5, r5, r3
 800bf4a:	eba8 0803 	sub.w	r8, r8, r3
 800bf4e:	9b07      	ldr	r3, [sp, #28]
 800bf50:	b1eb      	cbz	r3, 800bf8e <_dtoa_r+0x76e>
 800bf52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d067      	beq.n	800c028 <_dtoa_r+0x808>
 800bf58:	b18f      	cbz	r7, 800bf7e <_dtoa_r+0x75e>
 800bf5a:	4631      	mov	r1, r6
 800bf5c:	463a      	mov	r2, r7
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 fb9a 	bl	800c698 <__pow5mult>
 800bf64:	9a04      	ldr	r2, [sp, #16]
 800bf66:	4601      	mov	r1, r0
 800bf68:	4606      	mov	r6, r0
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 fafd 	bl	800c56a <__multiply>
 800bf70:	9904      	ldr	r1, [sp, #16]
 800bf72:	9008      	str	r0, [sp, #32]
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 fa4f 	bl	800c418 <_Bfree>
 800bf7a:	9b08      	ldr	r3, [sp, #32]
 800bf7c:	9304      	str	r3, [sp, #16]
 800bf7e:	9b07      	ldr	r3, [sp, #28]
 800bf80:	1bda      	subs	r2, r3, r7
 800bf82:	d004      	beq.n	800bf8e <_dtoa_r+0x76e>
 800bf84:	9904      	ldr	r1, [sp, #16]
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 fb86 	bl	800c698 <__pow5mult>
 800bf8c:	9004      	str	r0, [sp, #16]
 800bf8e:	2101      	movs	r1, #1
 800bf90:	4620      	mov	r0, r4
 800bf92:	f000 fae1 	bl	800c558 <__i2b>
 800bf96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf98:	4607      	mov	r7, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 81d0 	beq.w	800c340 <_dtoa_r+0xb20>
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f000 fb77 	bl	800c698 <__pow5mult>
 800bfaa:	9b06      	ldr	r3, [sp, #24]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	4607      	mov	r7, r0
 800bfb0:	dc40      	bgt.n	800c034 <_dtoa_r+0x814>
 800bfb2:	9b00      	ldr	r3, [sp, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d139      	bne.n	800c02c <_dtoa_r+0x80c>
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d136      	bne.n	800c030 <_dtoa_r+0x810>
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfc8:	0d1b      	lsrs	r3, r3, #20
 800bfca:	051b      	lsls	r3, r3, #20
 800bfcc:	b12b      	cbz	r3, 800bfda <_dtoa_r+0x7ba>
 800bfce:	9b05      	ldr	r3, [sp, #20]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	9305      	str	r3, [sp, #20]
 800bfd4:	f108 0801 	add.w	r8, r8, #1
 800bfd8:	2301      	movs	r3, #1
 800bfda:	9307      	str	r3, [sp, #28]
 800bfdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d12a      	bne.n	800c038 <_dtoa_r+0x818>
 800bfe2:	2001      	movs	r0, #1
 800bfe4:	e030      	b.n	800c048 <_dtoa_r+0x828>
 800bfe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfe8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfec:	e795      	b.n	800bf1a <_dtoa_r+0x6fa>
 800bfee:	9b07      	ldr	r3, [sp, #28]
 800bff0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800bff4:	42bb      	cmp	r3, r7
 800bff6:	bfbf      	itttt	lt
 800bff8:	9b07      	ldrlt	r3, [sp, #28]
 800bffa:	9707      	strlt	r7, [sp, #28]
 800bffc:	1afa      	sublt	r2, r7, r3
 800bffe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c000:	bfbb      	ittet	lt
 800c002:	189b      	addlt	r3, r3, r2
 800c004:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c006:	1bdf      	subge	r7, r3, r7
 800c008:	2700      	movlt	r7, #0
 800c00a:	f1b9 0f00 	cmp.w	r9, #0
 800c00e:	bfb5      	itete	lt
 800c010:	9b05      	ldrlt	r3, [sp, #20]
 800c012:	9d05      	ldrge	r5, [sp, #20]
 800c014:	eba3 0509 	sublt.w	r5, r3, r9
 800c018:	464b      	movge	r3, r9
 800c01a:	bfb8      	it	lt
 800c01c:	2300      	movlt	r3, #0
 800c01e:	e77e      	b.n	800bf1e <_dtoa_r+0x6fe>
 800c020:	9f07      	ldr	r7, [sp, #28]
 800c022:	9d05      	ldr	r5, [sp, #20]
 800c024:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c026:	e783      	b.n	800bf30 <_dtoa_r+0x710>
 800c028:	9a07      	ldr	r2, [sp, #28]
 800c02a:	e7ab      	b.n	800bf84 <_dtoa_r+0x764>
 800c02c:	2300      	movs	r3, #0
 800c02e:	e7d4      	b.n	800bfda <_dtoa_r+0x7ba>
 800c030:	9b00      	ldr	r3, [sp, #0]
 800c032:	e7d2      	b.n	800bfda <_dtoa_r+0x7ba>
 800c034:	2300      	movs	r3, #0
 800c036:	9307      	str	r3, [sp, #28]
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c03e:	6918      	ldr	r0, [r3, #16]
 800c040:	f000 fa3c 	bl	800c4bc <__hi0bits>
 800c044:	f1c0 0020 	rsb	r0, r0, #32
 800c048:	4440      	add	r0, r8
 800c04a:	f010 001f 	ands.w	r0, r0, #31
 800c04e:	d047      	beq.n	800c0e0 <_dtoa_r+0x8c0>
 800c050:	f1c0 0320 	rsb	r3, r0, #32
 800c054:	2b04      	cmp	r3, #4
 800c056:	dd3b      	ble.n	800c0d0 <_dtoa_r+0x8b0>
 800c058:	9b05      	ldr	r3, [sp, #20]
 800c05a:	f1c0 001c 	rsb	r0, r0, #28
 800c05e:	4403      	add	r3, r0
 800c060:	9305      	str	r3, [sp, #20]
 800c062:	4405      	add	r5, r0
 800c064:	4480      	add	r8, r0
 800c066:	9b05      	ldr	r3, [sp, #20]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	dd05      	ble.n	800c078 <_dtoa_r+0x858>
 800c06c:	461a      	mov	r2, r3
 800c06e:	9904      	ldr	r1, [sp, #16]
 800c070:	4620      	mov	r0, r4
 800c072:	f000 fb5f 	bl	800c734 <__lshift>
 800c076:	9004      	str	r0, [sp, #16]
 800c078:	f1b8 0f00 	cmp.w	r8, #0
 800c07c:	dd05      	ble.n	800c08a <_dtoa_r+0x86a>
 800c07e:	4639      	mov	r1, r7
 800c080:	4642      	mov	r2, r8
 800c082:	4620      	mov	r0, r4
 800c084:	f000 fb56 	bl	800c734 <__lshift>
 800c088:	4607      	mov	r7, r0
 800c08a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c08c:	b353      	cbz	r3, 800c0e4 <_dtoa_r+0x8c4>
 800c08e:	4639      	mov	r1, r7
 800c090:	9804      	ldr	r0, [sp, #16]
 800c092:	f000 fba3 	bl	800c7dc <__mcmp>
 800c096:	2800      	cmp	r0, #0
 800c098:	da24      	bge.n	800c0e4 <_dtoa_r+0x8c4>
 800c09a:	2300      	movs	r3, #0
 800c09c:	220a      	movs	r2, #10
 800c09e:	9904      	ldr	r1, [sp, #16]
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f000 f9d0 	bl	800c446 <__multadd>
 800c0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0a8:	9004      	str	r0, [sp, #16]
 800c0aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f000 814d 	beq.w	800c34e <_dtoa_r+0xb2e>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4631      	mov	r1, r6
 800c0b8:	220a      	movs	r2, #10
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 f9c3 	bl	800c446 <__multadd>
 800c0c0:	9b02      	ldr	r3, [sp, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	dc4f      	bgt.n	800c168 <_dtoa_r+0x948>
 800c0c8:	9b06      	ldr	r3, [sp, #24]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	dd4c      	ble.n	800c168 <_dtoa_r+0x948>
 800c0ce:	e011      	b.n	800c0f4 <_dtoa_r+0x8d4>
 800c0d0:	d0c9      	beq.n	800c066 <_dtoa_r+0x846>
 800c0d2:	9a05      	ldr	r2, [sp, #20]
 800c0d4:	331c      	adds	r3, #28
 800c0d6:	441a      	add	r2, r3
 800c0d8:	9205      	str	r2, [sp, #20]
 800c0da:	441d      	add	r5, r3
 800c0dc:	4498      	add	r8, r3
 800c0de:	e7c2      	b.n	800c066 <_dtoa_r+0x846>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	e7f6      	b.n	800c0d2 <_dtoa_r+0x8b2>
 800c0e4:	f1b9 0f00 	cmp.w	r9, #0
 800c0e8:	dc38      	bgt.n	800c15c <_dtoa_r+0x93c>
 800c0ea:	9b06      	ldr	r3, [sp, #24]
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	dd35      	ble.n	800c15c <_dtoa_r+0x93c>
 800c0f0:	f8cd 9008 	str.w	r9, [sp, #8]
 800c0f4:	9b02      	ldr	r3, [sp, #8]
 800c0f6:	b963      	cbnz	r3, 800c112 <_dtoa_r+0x8f2>
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	2205      	movs	r2, #5
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f000 f9a2 	bl	800c446 <__multadd>
 800c102:	4601      	mov	r1, r0
 800c104:	4607      	mov	r7, r0
 800c106:	9804      	ldr	r0, [sp, #16]
 800c108:	f000 fb68 	bl	800c7dc <__mcmp>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	f73f adcc 	bgt.w	800bcaa <_dtoa_r+0x48a>
 800c112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c114:	465d      	mov	r5, fp
 800c116:	ea6f 0a03 	mvn.w	sl, r3
 800c11a:	f04f 0900 	mov.w	r9, #0
 800c11e:	4639      	mov	r1, r7
 800c120:	4620      	mov	r0, r4
 800c122:	f000 f979 	bl	800c418 <_Bfree>
 800c126:	2e00      	cmp	r6, #0
 800c128:	f43f aeb7 	beq.w	800be9a <_dtoa_r+0x67a>
 800c12c:	f1b9 0f00 	cmp.w	r9, #0
 800c130:	d005      	beq.n	800c13e <_dtoa_r+0x91e>
 800c132:	45b1      	cmp	r9, r6
 800c134:	d003      	beq.n	800c13e <_dtoa_r+0x91e>
 800c136:	4649      	mov	r1, r9
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 f96d 	bl	800c418 <_Bfree>
 800c13e:	4631      	mov	r1, r6
 800c140:	4620      	mov	r0, r4
 800c142:	f000 f969 	bl	800c418 <_Bfree>
 800c146:	e6a8      	b.n	800be9a <_dtoa_r+0x67a>
 800c148:	2700      	movs	r7, #0
 800c14a:	463e      	mov	r6, r7
 800c14c:	e7e1      	b.n	800c112 <_dtoa_r+0x8f2>
 800c14e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c152:	463e      	mov	r6, r7
 800c154:	e5a9      	b.n	800bcaa <_dtoa_r+0x48a>
 800c156:	bf00      	nop
 800c158:	40240000 	.word	0x40240000
 800c15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c15e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	f000 80fa 	beq.w	800c35c <_dtoa_r+0xb3c>
 800c168:	2d00      	cmp	r5, #0
 800c16a:	dd05      	ble.n	800c178 <_dtoa_r+0x958>
 800c16c:	4631      	mov	r1, r6
 800c16e:	462a      	mov	r2, r5
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fadf 	bl	800c734 <__lshift>
 800c176:	4606      	mov	r6, r0
 800c178:	9b07      	ldr	r3, [sp, #28]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d04c      	beq.n	800c218 <_dtoa_r+0x9f8>
 800c17e:	6871      	ldr	r1, [r6, #4]
 800c180:	4620      	mov	r0, r4
 800c182:	f000 f915 	bl	800c3b0 <_Balloc>
 800c186:	6932      	ldr	r2, [r6, #16]
 800c188:	3202      	adds	r2, #2
 800c18a:	4605      	mov	r5, r0
 800c18c:	0092      	lsls	r2, r2, #2
 800c18e:	f106 010c 	add.w	r1, r6, #12
 800c192:	300c      	adds	r0, #12
 800c194:	f7fe fd56 	bl	800ac44 <memcpy>
 800c198:	2201      	movs	r2, #1
 800c19a:	4629      	mov	r1, r5
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 fac9 	bl	800c734 <__lshift>
 800c1a2:	9b00      	ldr	r3, [sp, #0]
 800c1a4:	f8cd b014 	str.w	fp, [sp, #20]
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	46b1      	mov	r9, r6
 800c1ae:	9307      	str	r3, [sp, #28]
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	9804      	ldr	r0, [sp, #16]
 800c1b6:	f7ff faa7 	bl	800b708 <quorem>
 800c1ba:	4649      	mov	r1, r9
 800c1bc:	4605      	mov	r5, r0
 800c1be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c1c2:	9804      	ldr	r0, [sp, #16]
 800c1c4:	f000 fb0a 	bl	800c7dc <__mcmp>
 800c1c8:	4632      	mov	r2, r6
 800c1ca:	9000      	str	r0, [sp, #0]
 800c1cc:	4639      	mov	r1, r7
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 fb1e 	bl	800c810 <__mdiff>
 800c1d4:	68c3      	ldr	r3, [r0, #12]
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	bb03      	cbnz	r3, 800c21c <_dtoa_r+0x9fc>
 800c1da:	4601      	mov	r1, r0
 800c1dc:	9008      	str	r0, [sp, #32]
 800c1de:	9804      	ldr	r0, [sp, #16]
 800c1e0:	f000 fafc 	bl	800c7dc <__mcmp>
 800c1e4:	9a08      	ldr	r2, [sp, #32]
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	9308      	str	r3, [sp, #32]
 800c1ee:	f000 f913 	bl	800c418 <_Bfree>
 800c1f2:	9b08      	ldr	r3, [sp, #32]
 800c1f4:	b9a3      	cbnz	r3, 800c220 <_dtoa_r+0xa00>
 800c1f6:	9a06      	ldr	r2, [sp, #24]
 800c1f8:	b992      	cbnz	r2, 800c220 <_dtoa_r+0xa00>
 800c1fa:	9a07      	ldr	r2, [sp, #28]
 800c1fc:	b982      	cbnz	r2, 800c220 <_dtoa_r+0xa00>
 800c1fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c202:	d029      	beq.n	800c258 <_dtoa_r+0xa38>
 800c204:	9b00      	ldr	r3, [sp, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	dd01      	ble.n	800c20e <_dtoa_r+0x9ee>
 800c20a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c20e:	9b05      	ldr	r3, [sp, #20]
 800c210:	1c5d      	adds	r5, r3, #1
 800c212:	f883 8000 	strb.w	r8, [r3]
 800c216:	e782      	b.n	800c11e <_dtoa_r+0x8fe>
 800c218:	4630      	mov	r0, r6
 800c21a:	e7c2      	b.n	800c1a2 <_dtoa_r+0x982>
 800c21c:	2301      	movs	r3, #1
 800c21e:	e7e3      	b.n	800c1e8 <_dtoa_r+0x9c8>
 800c220:	9a00      	ldr	r2, [sp, #0]
 800c222:	2a00      	cmp	r2, #0
 800c224:	db04      	blt.n	800c230 <_dtoa_r+0xa10>
 800c226:	d125      	bne.n	800c274 <_dtoa_r+0xa54>
 800c228:	9a06      	ldr	r2, [sp, #24]
 800c22a:	bb1a      	cbnz	r2, 800c274 <_dtoa_r+0xa54>
 800c22c:	9a07      	ldr	r2, [sp, #28]
 800c22e:	bb0a      	cbnz	r2, 800c274 <_dtoa_r+0xa54>
 800c230:	2b00      	cmp	r3, #0
 800c232:	ddec      	ble.n	800c20e <_dtoa_r+0x9ee>
 800c234:	2201      	movs	r2, #1
 800c236:	9904      	ldr	r1, [sp, #16]
 800c238:	4620      	mov	r0, r4
 800c23a:	f000 fa7b 	bl	800c734 <__lshift>
 800c23e:	4639      	mov	r1, r7
 800c240:	9004      	str	r0, [sp, #16]
 800c242:	f000 facb 	bl	800c7dc <__mcmp>
 800c246:	2800      	cmp	r0, #0
 800c248:	dc03      	bgt.n	800c252 <_dtoa_r+0xa32>
 800c24a:	d1e0      	bne.n	800c20e <_dtoa_r+0x9ee>
 800c24c:	f018 0f01 	tst.w	r8, #1
 800c250:	d0dd      	beq.n	800c20e <_dtoa_r+0x9ee>
 800c252:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c256:	d1d8      	bne.n	800c20a <_dtoa_r+0x9ea>
 800c258:	9b05      	ldr	r3, [sp, #20]
 800c25a:	9a05      	ldr	r2, [sp, #20]
 800c25c:	1c5d      	adds	r5, r3, #1
 800c25e:	2339      	movs	r3, #57	; 0x39
 800c260:	7013      	strb	r3, [r2, #0]
 800c262:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c266:	2b39      	cmp	r3, #57	; 0x39
 800c268:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c26c:	d04f      	beq.n	800c30e <_dtoa_r+0xaee>
 800c26e:	3301      	adds	r3, #1
 800c270:	7013      	strb	r3, [r2, #0]
 800c272:	e754      	b.n	800c11e <_dtoa_r+0x8fe>
 800c274:	9a05      	ldr	r2, [sp, #20]
 800c276:	2b00      	cmp	r3, #0
 800c278:	f102 0501 	add.w	r5, r2, #1
 800c27c:	dd06      	ble.n	800c28c <_dtoa_r+0xa6c>
 800c27e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c282:	d0e9      	beq.n	800c258 <_dtoa_r+0xa38>
 800c284:	f108 0801 	add.w	r8, r8, #1
 800c288:	9b05      	ldr	r3, [sp, #20]
 800c28a:	e7c2      	b.n	800c212 <_dtoa_r+0x9f2>
 800c28c:	9a02      	ldr	r2, [sp, #8]
 800c28e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c292:	eba5 030b 	sub.w	r3, r5, fp
 800c296:	4293      	cmp	r3, r2
 800c298:	d021      	beq.n	800c2de <_dtoa_r+0xabe>
 800c29a:	2300      	movs	r3, #0
 800c29c:	220a      	movs	r2, #10
 800c29e:	9904      	ldr	r1, [sp, #16]
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f000 f8d0 	bl	800c446 <__multadd>
 800c2a6:	45b1      	cmp	r9, r6
 800c2a8:	9004      	str	r0, [sp, #16]
 800c2aa:	f04f 0300 	mov.w	r3, #0
 800c2ae:	f04f 020a 	mov.w	r2, #10
 800c2b2:	4649      	mov	r1, r9
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	d105      	bne.n	800c2c4 <_dtoa_r+0xaa4>
 800c2b8:	f000 f8c5 	bl	800c446 <__multadd>
 800c2bc:	4681      	mov	r9, r0
 800c2be:	4606      	mov	r6, r0
 800c2c0:	9505      	str	r5, [sp, #20]
 800c2c2:	e776      	b.n	800c1b2 <_dtoa_r+0x992>
 800c2c4:	f000 f8bf 	bl	800c446 <__multadd>
 800c2c8:	4631      	mov	r1, r6
 800c2ca:	4681      	mov	r9, r0
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	220a      	movs	r2, #10
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 f8b8 	bl	800c446 <__multadd>
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	e7f2      	b.n	800c2c0 <_dtoa_r+0xaa0>
 800c2da:	f04f 0900 	mov.w	r9, #0
 800c2de:	2201      	movs	r2, #1
 800c2e0:	9904      	ldr	r1, [sp, #16]
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f000 fa26 	bl	800c734 <__lshift>
 800c2e8:	4639      	mov	r1, r7
 800c2ea:	9004      	str	r0, [sp, #16]
 800c2ec:	f000 fa76 	bl	800c7dc <__mcmp>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	dcb6      	bgt.n	800c262 <_dtoa_r+0xa42>
 800c2f4:	d102      	bne.n	800c2fc <_dtoa_r+0xadc>
 800c2f6:	f018 0f01 	tst.w	r8, #1
 800c2fa:	d1b2      	bne.n	800c262 <_dtoa_r+0xa42>
 800c2fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c300:	2b30      	cmp	r3, #48	; 0x30
 800c302:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c306:	f47f af0a 	bne.w	800c11e <_dtoa_r+0x8fe>
 800c30a:	4615      	mov	r5, r2
 800c30c:	e7f6      	b.n	800c2fc <_dtoa_r+0xadc>
 800c30e:	4593      	cmp	fp, r2
 800c310:	d105      	bne.n	800c31e <_dtoa_r+0xafe>
 800c312:	2331      	movs	r3, #49	; 0x31
 800c314:	f10a 0a01 	add.w	sl, sl, #1
 800c318:	f88b 3000 	strb.w	r3, [fp]
 800c31c:	e6ff      	b.n	800c11e <_dtoa_r+0x8fe>
 800c31e:	4615      	mov	r5, r2
 800c320:	e79f      	b.n	800c262 <_dtoa_r+0xa42>
 800c322:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c388 <_dtoa_r+0xb68>
 800c326:	e007      	b.n	800c338 <_dtoa_r+0xb18>
 800c328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c32a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c38c <_dtoa_r+0xb6c>
 800c32e:	b11b      	cbz	r3, 800c338 <_dtoa_r+0xb18>
 800c330:	f10b 0308 	add.w	r3, fp, #8
 800c334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c336:	6013      	str	r3, [r2, #0]
 800c338:	4658      	mov	r0, fp
 800c33a:	b017      	add	sp, #92	; 0x5c
 800c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c340:	9b06      	ldr	r3, [sp, #24]
 800c342:	2b01      	cmp	r3, #1
 800c344:	f77f ae35 	ble.w	800bfb2 <_dtoa_r+0x792>
 800c348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c34a:	9307      	str	r3, [sp, #28]
 800c34c:	e649      	b.n	800bfe2 <_dtoa_r+0x7c2>
 800c34e:	9b02      	ldr	r3, [sp, #8]
 800c350:	2b00      	cmp	r3, #0
 800c352:	dc03      	bgt.n	800c35c <_dtoa_r+0xb3c>
 800c354:	9b06      	ldr	r3, [sp, #24]
 800c356:	2b02      	cmp	r3, #2
 800c358:	f73f aecc 	bgt.w	800c0f4 <_dtoa_r+0x8d4>
 800c35c:	465d      	mov	r5, fp
 800c35e:	4639      	mov	r1, r7
 800c360:	9804      	ldr	r0, [sp, #16]
 800c362:	f7ff f9d1 	bl	800b708 <quorem>
 800c366:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c36a:	f805 8b01 	strb.w	r8, [r5], #1
 800c36e:	9a02      	ldr	r2, [sp, #8]
 800c370:	eba5 030b 	sub.w	r3, r5, fp
 800c374:	429a      	cmp	r2, r3
 800c376:	ddb0      	ble.n	800c2da <_dtoa_r+0xaba>
 800c378:	2300      	movs	r3, #0
 800c37a:	220a      	movs	r2, #10
 800c37c:	9904      	ldr	r1, [sp, #16]
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 f861 	bl	800c446 <__multadd>
 800c384:	9004      	str	r0, [sp, #16]
 800c386:	e7ea      	b.n	800c35e <_dtoa_r+0xb3e>
 800c388:	0800ce60 	.word	0x0800ce60
 800c38c:	0800ce84 	.word	0x0800ce84

0800c390 <_localeconv_r>:
 800c390:	4b04      	ldr	r3, [pc, #16]	; (800c3a4 <_localeconv_r+0x14>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6a18      	ldr	r0, [r3, #32]
 800c396:	4b04      	ldr	r3, [pc, #16]	; (800c3a8 <_localeconv_r+0x18>)
 800c398:	2800      	cmp	r0, #0
 800c39a:	bf08      	it	eq
 800c39c:	4618      	moveq	r0, r3
 800c39e:	30f0      	adds	r0, #240	; 0xf0
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	20000018 	.word	0x20000018
 800c3a8:	2000007c 	.word	0x2000007c

0800c3ac <__malloc_lock>:
 800c3ac:	4770      	bx	lr

0800c3ae <__malloc_unlock>:
 800c3ae:	4770      	bx	lr

0800c3b0 <_Balloc>:
 800c3b0:	b570      	push	{r4, r5, r6, lr}
 800c3b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	460e      	mov	r6, r1
 800c3b8:	b93d      	cbnz	r5, 800c3ca <_Balloc+0x1a>
 800c3ba:	2010      	movs	r0, #16
 800c3bc:	f7fe fc32 	bl	800ac24 <malloc>
 800c3c0:	6260      	str	r0, [r4, #36]	; 0x24
 800c3c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3c6:	6005      	str	r5, [r0, #0]
 800c3c8:	60c5      	str	r5, [r0, #12]
 800c3ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c3cc:	68eb      	ldr	r3, [r5, #12]
 800c3ce:	b183      	cbz	r3, 800c3f2 <_Balloc+0x42>
 800c3d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c3d8:	b9b8      	cbnz	r0, 800c40a <_Balloc+0x5a>
 800c3da:	2101      	movs	r1, #1
 800c3dc:	fa01 f506 	lsl.w	r5, r1, r6
 800c3e0:	1d6a      	adds	r2, r5, #5
 800c3e2:	0092      	lsls	r2, r2, #2
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f000 fabf 	bl	800c968 <_calloc_r>
 800c3ea:	b160      	cbz	r0, 800c406 <_Balloc+0x56>
 800c3ec:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c3f0:	e00e      	b.n	800c410 <_Balloc+0x60>
 800c3f2:	2221      	movs	r2, #33	; 0x21
 800c3f4:	2104      	movs	r1, #4
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 fab6 	bl	800c968 <_calloc_r>
 800c3fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3fe:	60e8      	str	r0, [r5, #12]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e4      	bne.n	800c3d0 <_Balloc+0x20>
 800c406:	2000      	movs	r0, #0
 800c408:	bd70      	pop	{r4, r5, r6, pc}
 800c40a:	6802      	ldr	r2, [r0, #0]
 800c40c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c410:	2300      	movs	r3, #0
 800c412:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c416:	e7f7      	b.n	800c408 <_Balloc+0x58>

0800c418 <_Bfree>:
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c41c:	4606      	mov	r6, r0
 800c41e:	460d      	mov	r5, r1
 800c420:	b93c      	cbnz	r4, 800c432 <_Bfree+0x1a>
 800c422:	2010      	movs	r0, #16
 800c424:	f7fe fbfe 	bl	800ac24 <malloc>
 800c428:	6270      	str	r0, [r6, #36]	; 0x24
 800c42a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c42e:	6004      	str	r4, [r0, #0]
 800c430:	60c4      	str	r4, [r0, #12]
 800c432:	b13d      	cbz	r5, 800c444 <_Bfree+0x2c>
 800c434:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c436:	686a      	ldr	r2, [r5, #4]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c43e:	6029      	str	r1, [r5, #0]
 800c440:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c444:	bd70      	pop	{r4, r5, r6, pc}

0800c446 <__multadd>:
 800c446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44a:	690d      	ldr	r5, [r1, #16]
 800c44c:	461f      	mov	r7, r3
 800c44e:	4606      	mov	r6, r0
 800c450:	460c      	mov	r4, r1
 800c452:	f101 0c14 	add.w	ip, r1, #20
 800c456:	2300      	movs	r3, #0
 800c458:	f8dc 0000 	ldr.w	r0, [ip]
 800c45c:	b281      	uxth	r1, r0
 800c45e:	fb02 7101 	mla	r1, r2, r1, r7
 800c462:	0c0f      	lsrs	r7, r1, #16
 800c464:	0c00      	lsrs	r0, r0, #16
 800c466:	fb02 7000 	mla	r0, r2, r0, r7
 800c46a:	b289      	uxth	r1, r1
 800c46c:	3301      	adds	r3, #1
 800c46e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c472:	429d      	cmp	r5, r3
 800c474:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c478:	f84c 1b04 	str.w	r1, [ip], #4
 800c47c:	dcec      	bgt.n	800c458 <__multadd+0x12>
 800c47e:	b1d7      	cbz	r7, 800c4b6 <__multadd+0x70>
 800c480:	68a3      	ldr	r3, [r4, #8]
 800c482:	42ab      	cmp	r3, r5
 800c484:	dc12      	bgt.n	800c4ac <__multadd+0x66>
 800c486:	6861      	ldr	r1, [r4, #4]
 800c488:	4630      	mov	r0, r6
 800c48a:	3101      	adds	r1, #1
 800c48c:	f7ff ff90 	bl	800c3b0 <_Balloc>
 800c490:	6922      	ldr	r2, [r4, #16]
 800c492:	3202      	adds	r2, #2
 800c494:	f104 010c 	add.w	r1, r4, #12
 800c498:	4680      	mov	r8, r0
 800c49a:	0092      	lsls	r2, r2, #2
 800c49c:	300c      	adds	r0, #12
 800c49e:	f7fe fbd1 	bl	800ac44 <memcpy>
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7ff ffb7 	bl	800c418 <_Bfree>
 800c4aa:	4644      	mov	r4, r8
 800c4ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4b0:	3501      	adds	r5, #1
 800c4b2:	615f      	str	r7, [r3, #20]
 800c4b4:	6125      	str	r5, [r4, #16]
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c4bc <__hi0bits>:
 800c4bc:	0c02      	lsrs	r2, r0, #16
 800c4be:	0412      	lsls	r2, r2, #16
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	b9b2      	cbnz	r2, 800c4f2 <__hi0bits+0x36>
 800c4c4:	0403      	lsls	r3, r0, #16
 800c4c6:	2010      	movs	r0, #16
 800c4c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c4cc:	bf04      	itt	eq
 800c4ce:	021b      	lsleq	r3, r3, #8
 800c4d0:	3008      	addeq	r0, #8
 800c4d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c4d6:	bf04      	itt	eq
 800c4d8:	011b      	lsleq	r3, r3, #4
 800c4da:	3004      	addeq	r0, #4
 800c4dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c4e0:	bf04      	itt	eq
 800c4e2:	009b      	lsleq	r3, r3, #2
 800c4e4:	3002      	addeq	r0, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	db06      	blt.n	800c4f8 <__hi0bits+0x3c>
 800c4ea:	005b      	lsls	r3, r3, #1
 800c4ec:	d503      	bpl.n	800c4f6 <__hi0bits+0x3a>
 800c4ee:	3001      	adds	r0, #1
 800c4f0:	4770      	bx	lr
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	e7e8      	b.n	800c4c8 <__hi0bits+0xc>
 800c4f6:	2020      	movs	r0, #32
 800c4f8:	4770      	bx	lr

0800c4fa <__lo0bits>:
 800c4fa:	6803      	ldr	r3, [r0, #0]
 800c4fc:	f013 0207 	ands.w	r2, r3, #7
 800c500:	4601      	mov	r1, r0
 800c502:	d00b      	beq.n	800c51c <__lo0bits+0x22>
 800c504:	07da      	lsls	r2, r3, #31
 800c506:	d423      	bmi.n	800c550 <__lo0bits+0x56>
 800c508:	0798      	lsls	r0, r3, #30
 800c50a:	bf49      	itett	mi
 800c50c:	085b      	lsrmi	r3, r3, #1
 800c50e:	089b      	lsrpl	r3, r3, #2
 800c510:	2001      	movmi	r0, #1
 800c512:	600b      	strmi	r3, [r1, #0]
 800c514:	bf5c      	itt	pl
 800c516:	600b      	strpl	r3, [r1, #0]
 800c518:	2002      	movpl	r0, #2
 800c51a:	4770      	bx	lr
 800c51c:	b298      	uxth	r0, r3
 800c51e:	b9a8      	cbnz	r0, 800c54c <__lo0bits+0x52>
 800c520:	0c1b      	lsrs	r3, r3, #16
 800c522:	2010      	movs	r0, #16
 800c524:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c528:	bf04      	itt	eq
 800c52a:	0a1b      	lsreq	r3, r3, #8
 800c52c:	3008      	addeq	r0, #8
 800c52e:	071a      	lsls	r2, r3, #28
 800c530:	bf04      	itt	eq
 800c532:	091b      	lsreq	r3, r3, #4
 800c534:	3004      	addeq	r0, #4
 800c536:	079a      	lsls	r2, r3, #30
 800c538:	bf04      	itt	eq
 800c53a:	089b      	lsreq	r3, r3, #2
 800c53c:	3002      	addeq	r0, #2
 800c53e:	07da      	lsls	r2, r3, #31
 800c540:	d402      	bmi.n	800c548 <__lo0bits+0x4e>
 800c542:	085b      	lsrs	r3, r3, #1
 800c544:	d006      	beq.n	800c554 <__lo0bits+0x5a>
 800c546:	3001      	adds	r0, #1
 800c548:	600b      	str	r3, [r1, #0]
 800c54a:	4770      	bx	lr
 800c54c:	4610      	mov	r0, r2
 800c54e:	e7e9      	b.n	800c524 <__lo0bits+0x2a>
 800c550:	2000      	movs	r0, #0
 800c552:	4770      	bx	lr
 800c554:	2020      	movs	r0, #32
 800c556:	4770      	bx	lr

0800c558 <__i2b>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	460c      	mov	r4, r1
 800c55c:	2101      	movs	r1, #1
 800c55e:	f7ff ff27 	bl	800c3b0 <_Balloc>
 800c562:	2201      	movs	r2, #1
 800c564:	6144      	str	r4, [r0, #20]
 800c566:	6102      	str	r2, [r0, #16]
 800c568:	bd10      	pop	{r4, pc}

0800c56a <__multiply>:
 800c56a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56e:	4614      	mov	r4, r2
 800c570:	690a      	ldr	r2, [r1, #16]
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	429a      	cmp	r2, r3
 800c576:	bfb8      	it	lt
 800c578:	460b      	movlt	r3, r1
 800c57a:	4688      	mov	r8, r1
 800c57c:	bfbc      	itt	lt
 800c57e:	46a0      	movlt	r8, r4
 800c580:	461c      	movlt	r4, r3
 800c582:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c586:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c58a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c58e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c592:	eb07 0609 	add.w	r6, r7, r9
 800c596:	42b3      	cmp	r3, r6
 800c598:	bfb8      	it	lt
 800c59a:	3101      	addlt	r1, #1
 800c59c:	f7ff ff08 	bl	800c3b0 <_Balloc>
 800c5a0:	f100 0514 	add.w	r5, r0, #20
 800c5a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c5a8:	462b      	mov	r3, r5
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	4573      	cmp	r3, lr
 800c5ae:	d316      	bcc.n	800c5de <__multiply+0x74>
 800c5b0:	f104 0214 	add.w	r2, r4, #20
 800c5b4:	f108 0114 	add.w	r1, r8, #20
 800c5b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c5bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	9b00      	ldr	r3, [sp, #0]
 800c5c4:	9201      	str	r2, [sp, #4]
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d80c      	bhi.n	800c5e4 <__multiply+0x7a>
 800c5ca:	2e00      	cmp	r6, #0
 800c5cc:	dd03      	ble.n	800c5d6 <__multiply+0x6c>
 800c5ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d05d      	beq.n	800c692 <__multiply+0x128>
 800c5d6:	6106      	str	r6, [r0, #16]
 800c5d8:	b003      	add	sp, #12
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	f843 2b04 	str.w	r2, [r3], #4
 800c5e2:	e7e3      	b.n	800c5ac <__multiply+0x42>
 800c5e4:	f8b2 b000 	ldrh.w	fp, [r2]
 800c5e8:	f1bb 0f00 	cmp.w	fp, #0
 800c5ec:	d023      	beq.n	800c636 <__multiply+0xcc>
 800c5ee:	4689      	mov	r9, r1
 800c5f0:	46ac      	mov	ip, r5
 800c5f2:	f04f 0800 	mov.w	r8, #0
 800c5f6:	f859 4b04 	ldr.w	r4, [r9], #4
 800c5fa:	f8dc a000 	ldr.w	sl, [ip]
 800c5fe:	b2a3      	uxth	r3, r4
 800c600:	fa1f fa8a 	uxth.w	sl, sl
 800c604:	fb0b a303 	mla	r3, fp, r3, sl
 800c608:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c60c:	f8dc 4000 	ldr.w	r4, [ip]
 800c610:	4443      	add	r3, r8
 800c612:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c616:	fb0b 840a 	mla	r4, fp, sl, r8
 800c61a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c61e:	46e2      	mov	sl, ip
 800c620:	b29b      	uxth	r3, r3
 800c622:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c626:	454f      	cmp	r7, r9
 800c628:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c62c:	f84a 3b04 	str.w	r3, [sl], #4
 800c630:	d82b      	bhi.n	800c68a <__multiply+0x120>
 800c632:	f8cc 8004 	str.w	r8, [ip, #4]
 800c636:	9b01      	ldr	r3, [sp, #4]
 800c638:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c63c:	3204      	adds	r2, #4
 800c63e:	f1ba 0f00 	cmp.w	sl, #0
 800c642:	d020      	beq.n	800c686 <__multiply+0x11c>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	4689      	mov	r9, r1
 800c648:	46a8      	mov	r8, r5
 800c64a:	f04f 0b00 	mov.w	fp, #0
 800c64e:	f8b9 c000 	ldrh.w	ip, [r9]
 800c652:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c656:	fb0a 440c 	mla	r4, sl, ip, r4
 800c65a:	445c      	add	r4, fp
 800c65c:	46c4      	mov	ip, r8
 800c65e:	b29b      	uxth	r3, r3
 800c660:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c664:	f84c 3b04 	str.w	r3, [ip], #4
 800c668:	f859 3b04 	ldr.w	r3, [r9], #4
 800c66c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c670:	0c1b      	lsrs	r3, r3, #16
 800c672:	fb0a b303 	mla	r3, sl, r3, fp
 800c676:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c67a:	454f      	cmp	r7, r9
 800c67c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c680:	d805      	bhi.n	800c68e <__multiply+0x124>
 800c682:	f8c8 3004 	str.w	r3, [r8, #4]
 800c686:	3504      	adds	r5, #4
 800c688:	e79b      	b.n	800c5c2 <__multiply+0x58>
 800c68a:	46d4      	mov	ip, sl
 800c68c:	e7b3      	b.n	800c5f6 <__multiply+0x8c>
 800c68e:	46e0      	mov	r8, ip
 800c690:	e7dd      	b.n	800c64e <__multiply+0xe4>
 800c692:	3e01      	subs	r6, #1
 800c694:	e799      	b.n	800c5ca <__multiply+0x60>
	...

0800c698 <__pow5mult>:
 800c698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c69c:	4615      	mov	r5, r2
 800c69e:	f012 0203 	ands.w	r2, r2, #3
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	460f      	mov	r7, r1
 800c6a6:	d007      	beq.n	800c6b8 <__pow5mult+0x20>
 800c6a8:	3a01      	subs	r2, #1
 800c6aa:	4c21      	ldr	r4, [pc, #132]	; (800c730 <__pow5mult+0x98>)
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6b2:	f7ff fec8 	bl	800c446 <__multadd>
 800c6b6:	4607      	mov	r7, r0
 800c6b8:	10ad      	asrs	r5, r5, #2
 800c6ba:	d035      	beq.n	800c728 <__pow5mult+0x90>
 800c6bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6be:	b93c      	cbnz	r4, 800c6d0 <__pow5mult+0x38>
 800c6c0:	2010      	movs	r0, #16
 800c6c2:	f7fe faaf 	bl	800ac24 <malloc>
 800c6c6:	6270      	str	r0, [r6, #36]	; 0x24
 800c6c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6cc:	6004      	str	r4, [r0, #0]
 800c6ce:	60c4      	str	r4, [r0, #12]
 800c6d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6d8:	b94c      	cbnz	r4, 800c6ee <__pow5mult+0x56>
 800c6da:	f240 2171 	movw	r1, #625	; 0x271
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7ff ff3a 	bl	800c558 <__i2b>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	6003      	str	r3, [r0, #0]
 800c6ee:	f04f 0800 	mov.w	r8, #0
 800c6f2:	07eb      	lsls	r3, r5, #31
 800c6f4:	d50a      	bpl.n	800c70c <__pow5mult+0x74>
 800c6f6:	4639      	mov	r1, r7
 800c6f8:	4622      	mov	r2, r4
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f7ff ff35 	bl	800c56a <__multiply>
 800c700:	4639      	mov	r1, r7
 800c702:	4681      	mov	r9, r0
 800c704:	4630      	mov	r0, r6
 800c706:	f7ff fe87 	bl	800c418 <_Bfree>
 800c70a:	464f      	mov	r7, r9
 800c70c:	106d      	asrs	r5, r5, #1
 800c70e:	d00b      	beq.n	800c728 <__pow5mult+0x90>
 800c710:	6820      	ldr	r0, [r4, #0]
 800c712:	b938      	cbnz	r0, 800c724 <__pow5mult+0x8c>
 800c714:	4622      	mov	r2, r4
 800c716:	4621      	mov	r1, r4
 800c718:	4630      	mov	r0, r6
 800c71a:	f7ff ff26 	bl	800c56a <__multiply>
 800c71e:	6020      	str	r0, [r4, #0]
 800c720:	f8c0 8000 	str.w	r8, [r0]
 800c724:	4604      	mov	r4, r0
 800c726:	e7e4      	b.n	800c6f2 <__pow5mult+0x5a>
 800c728:	4638      	mov	r0, r7
 800c72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c72e:	bf00      	nop
 800c730:	0800cf88 	.word	0x0800cf88

0800c734 <__lshift>:
 800c734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c738:	460c      	mov	r4, r1
 800c73a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c73e:	6923      	ldr	r3, [r4, #16]
 800c740:	6849      	ldr	r1, [r1, #4]
 800c742:	eb0a 0903 	add.w	r9, sl, r3
 800c746:	68a3      	ldr	r3, [r4, #8]
 800c748:	4607      	mov	r7, r0
 800c74a:	4616      	mov	r6, r2
 800c74c:	f109 0501 	add.w	r5, r9, #1
 800c750:	42ab      	cmp	r3, r5
 800c752:	db32      	blt.n	800c7ba <__lshift+0x86>
 800c754:	4638      	mov	r0, r7
 800c756:	f7ff fe2b 	bl	800c3b0 <_Balloc>
 800c75a:	2300      	movs	r3, #0
 800c75c:	4680      	mov	r8, r0
 800c75e:	f100 0114 	add.w	r1, r0, #20
 800c762:	461a      	mov	r2, r3
 800c764:	4553      	cmp	r3, sl
 800c766:	db2b      	blt.n	800c7c0 <__lshift+0x8c>
 800c768:	6920      	ldr	r0, [r4, #16]
 800c76a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c76e:	f104 0314 	add.w	r3, r4, #20
 800c772:	f016 021f 	ands.w	r2, r6, #31
 800c776:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c77a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c77e:	d025      	beq.n	800c7cc <__lshift+0x98>
 800c780:	f1c2 0e20 	rsb	lr, r2, #32
 800c784:	2000      	movs	r0, #0
 800c786:	681e      	ldr	r6, [r3, #0]
 800c788:	468a      	mov	sl, r1
 800c78a:	4096      	lsls	r6, r2
 800c78c:	4330      	orrs	r0, r6
 800c78e:	f84a 0b04 	str.w	r0, [sl], #4
 800c792:	f853 0b04 	ldr.w	r0, [r3], #4
 800c796:	459c      	cmp	ip, r3
 800c798:	fa20 f00e 	lsr.w	r0, r0, lr
 800c79c:	d814      	bhi.n	800c7c8 <__lshift+0x94>
 800c79e:	6048      	str	r0, [r1, #4]
 800c7a0:	b108      	cbz	r0, 800c7a6 <__lshift+0x72>
 800c7a2:	f109 0502 	add.w	r5, r9, #2
 800c7a6:	3d01      	subs	r5, #1
 800c7a8:	4638      	mov	r0, r7
 800c7aa:	f8c8 5010 	str.w	r5, [r8, #16]
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	f7ff fe32 	bl	800c418 <_Bfree>
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ba:	3101      	adds	r1, #1
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	e7c7      	b.n	800c750 <__lshift+0x1c>
 800c7c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	e7cd      	b.n	800c764 <__lshift+0x30>
 800c7c8:	4651      	mov	r1, sl
 800c7ca:	e7dc      	b.n	800c786 <__lshift+0x52>
 800c7cc:	3904      	subs	r1, #4
 800c7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7d6:	459c      	cmp	ip, r3
 800c7d8:	d8f9      	bhi.n	800c7ce <__lshift+0x9a>
 800c7da:	e7e4      	b.n	800c7a6 <__lshift+0x72>

0800c7dc <__mcmp>:
 800c7dc:	6903      	ldr	r3, [r0, #16]
 800c7de:	690a      	ldr	r2, [r1, #16]
 800c7e0:	1a9b      	subs	r3, r3, r2
 800c7e2:	b530      	push	{r4, r5, lr}
 800c7e4:	d10c      	bne.n	800c800 <__mcmp+0x24>
 800c7e6:	0092      	lsls	r2, r2, #2
 800c7e8:	3014      	adds	r0, #20
 800c7ea:	3114      	adds	r1, #20
 800c7ec:	1884      	adds	r4, r0, r2
 800c7ee:	4411      	add	r1, r2
 800c7f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7f8:	4295      	cmp	r5, r2
 800c7fa:	d003      	beq.n	800c804 <__mcmp+0x28>
 800c7fc:	d305      	bcc.n	800c80a <__mcmp+0x2e>
 800c7fe:	2301      	movs	r3, #1
 800c800:	4618      	mov	r0, r3
 800c802:	bd30      	pop	{r4, r5, pc}
 800c804:	42a0      	cmp	r0, r4
 800c806:	d3f3      	bcc.n	800c7f0 <__mcmp+0x14>
 800c808:	e7fa      	b.n	800c800 <__mcmp+0x24>
 800c80a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c80e:	e7f7      	b.n	800c800 <__mcmp+0x24>

0800c810 <__mdiff>:
 800c810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c814:	460d      	mov	r5, r1
 800c816:	4607      	mov	r7, r0
 800c818:	4611      	mov	r1, r2
 800c81a:	4628      	mov	r0, r5
 800c81c:	4614      	mov	r4, r2
 800c81e:	f7ff ffdd 	bl	800c7dc <__mcmp>
 800c822:	1e06      	subs	r6, r0, #0
 800c824:	d108      	bne.n	800c838 <__mdiff+0x28>
 800c826:	4631      	mov	r1, r6
 800c828:	4638      	mov	r0, r7
 800c82a:	f7ff fdc1 	bl	800c3b0 <_Balloc>
 800c82e:	2301      	movs	r3, #1
 800c830:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c838:	bfa4      	itt	ge
 800c83a:	4623      	movge	r3, r4
 800c83c:	462c      	movge	r4, r5
 800c83e:	4638      	mov	r0, r7
 800c840:	6861      	ldr	r1, [r4, #4]
 800c842:	bfa6      	itte	ge
 800c844:	461d      	movge	r5, r3
 800c846:	2600      	movge	r6, #0
 800c848:	2601      	movlt	r6, #1
 800c84a:	f7ff fdb1 	bl	800c3b0 <_Balloc>
 800c84e:	692b      	ldr	r3, [r5, #16]
 800c850:	60c6      	str	r6, [r0, #12]
 800c852:	6926      	ldr	r6, [r4, #16]
 800c854:	f105 0914 	add.w	r9, r5, #20
 800c858:	f104 0214 	add.w	r2, r4, #20
 800c85c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c860:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c864:	f100 0514 	add.w	r5, r0, #20
 800c868:	f04f 0e00 	mov.w	lr, #0
 800c86c:	f852 ab04 	ldr.w	sl, [r2], #4
 800c870:	f859 4b04 	ldr.w	r4, [r9], #4
 800c874:	fa1e f18a 	uxtah	r1, lr, sl
 800c878:	b2a3      	uxth	r3, r4
 800c87a:	1ac9      	subs	r1, r1, r3
 800c87c:	0c23      	lsrs	r3, r4, #16
 800c87e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c882:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c886:	b289      	uxth	r1, r1
 800c888:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c88c:	45c8      	cmp	r8, r9
 800c88e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c892:	4694      	mov	ip, r2
 800c894:	f845 3b04 	str.w	r3, [r5], #4
 800c898:	d8e8      	bhi.n	800c86c <__mdiff+0x5c>
 800c89a:	45bc      	cmp	ip, r7
 800c89c:	d304      	bcc.n	800c8a8 <__mdiff+0x98>
 800c89e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c8a2:	b183      	cbz	r3, 800c8c6 <__mdiff+0xb6>
 800c8a4:	6106      	str	r6, [r0, #16]
 800c8a6:	e7c5      	b.n	800c834 <__mdiff+0x24>
 800c8a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c8ac:	fa1e f381 	uxtah	r3, lr, r1
 800c8b0:	141a      	asrs	r2, r3, #16
 800c8b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c8c0:	f845 3b04 	str.w	r3, [r5], #4
 800c8c4:	e7e9      	b.n	800c89a <__mdiff+0x8a>
 800c8c6:	3e01      	subs	r6, #1
 800c8c8:	e7e9      	b.n	800c89e <__mdiff+0x8e>

0800c8ca <__d2b>:
 800c8ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8ce:	460e      	mov	r6, r1
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	ec59 8b10 	vmov	r8, r9, d0
 800c8d6:	4615      	mov	r5, r2
 800c8d8:	f7ff fd6a 	bl	800c3b0 <_Balloc>
 800c8dc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c8e0:	4607      	mov	r7, r0
 800c8e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8e6:	bb34      	cbnz	r4, 800c936 <__d2b+0x6c>
 800c8e8:	9301      	str	r3, [sp, #4]
 800c8ea:	f1b8 0300 	subs.w	r3, r8, #0
 800c8ee:	d027      	beq.n	800c940 <__d2b+0x76>
 800c8f0:	a802      	add	r0, sp, #8
 800c8f2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c8f6:	f7ff fe00 	bl	800c4fa <__lo0bits>
 800c8fa:	9900      	ldr	r1, [sp, #0]
 800c8fc:	b1f0      	cbz	r0, 800c93c <__d2b+0x72>
 800c8fe:	9a01      	ldr	r2, [sp, #4]
 800c900:	f1c0 0320 	rsb	r3, r0, #32
 800c904:	fa02 f303 	lsl.w	r3, r2, r3
 800c908:	430b      	orrs	r3, r1
 800c90a:	40c2      	lsrs	r2, r0
 800c90c:	617b      	str	r3, [r7, #20]
 800c90e:	9201      	str	r2, [sp, #4]
 800c910:	9b01      	ldr	r3, [sp, #4]
 800c912:	61bb      	str	r3, [r7, #24]
 800c914:	2b00      	cmp	r3, #0
 800c916:	bf14      	ite	ne
 800c918:	2102      	movne	r1, #2
 800c91a:	2101      	moveq	r1, #1
 800c91c:	6139      	str	r1, [r7, #16]
 800c91e:	b1c4      	cbz	r4, 800c952 <__d2b+0x88>
 800c920:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c924:	4404      	add	r4, r0
 800c926:	6034      	str	r4, [r6, #0]
 800c928:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c92c:	6028      	str	r0, [r5, #0]
 800c92e:	4638      	mov	r0, r7
 800c930:	b003      	add	sp, #12
 800c932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c93a:	e7d5      	b.n	800c8e8 <__d2b+0x1e>
 800c93c:	6179      	str	r1, [r7, #20]
 800c93e:	e7e7      	b.n	800c910 <__d2b+0x46>
 800c940:	a801      	add	r0, sp, #4
 800c942:	f7ff fdda 	bl	800c4fa <__lo0bits>
 800c946:	9b01      	ldr	r3, [sp, #4]
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	2101      	movs	r1, #1
 800c94c:	6139      	str	r1, [r7, #16]
 800c94e:	3020      	adds	r0, #32
 800c950:	e7e5      	b.n	800c91e <__d2b+0x54>
 800c952:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c956:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c95a:	6030      	str	r0, [r6, #0]
 800c95c:	6918      	ldr	r0, [r3, #16]
 800c95e:	f7ff fdad 	bl	800c4bc <__hi0bits>
 800c962:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c966:	e7e1      	b.n	800c92c <__d2b+0x62>

0800c968 <_calloc_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	fb02 f401 	mul.w	r4, r2, r1
 800c96e:	4621      	mov	r1, r4
 800c970:	f7fe f9ca 	bl	800ad08 <_malloc_r>
 800c974:	4605      	mov	r5, r0
 800c976:	b118      	cbz	r0, 800c980 <_calloc_r+0x18>
 800c978:	4622      	mov	r2, r4
 800c97a:	2100      	movs	r1, #0
 800c97c:	f7fe f96d 	bl	800ac5a <memset>
 800c980:	4628      	mov	r0, r5
 800c982:	bd38      	pop	{r3, r4, r5, pc}

0800c984 <__ssputs_r>:
 800c984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c988:	688e      	ldr	r6, [r1, #8]
 800c98a:	429e      	cmp	r6, r3
 800c98c:	4682      	mov	sl, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	4690      	mov	r8, r2
 800c992:	4699      	mov	r9, r3
 800c994:	d837      	bhi.n	800ca06 <__ssputs_r+0x82>
 800c996:	898a      	ldrh	r2, [r1, #12]
 800c998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c99c:	d031      	beq.n	800ca02 <__ssputs_r+0x7e>
 800c99e:	6825      	ldr	r5, [r4, #0]
 800c9a0:	6909      	ldr	r1, [r1, #16]
 800c9a2:	1a6f      	subs	r7, r5, r1
 800c9a4:	6965      	ldr	r5, [r4, #20]
 800c9a6:	2302      	movs	r3, #2
 800c9a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9ac:	fb95 f5f3 	sdiv	r5, r5, r3
 800c9b0:	f109 0301 	add.w	r3, r9, #1
 800c9b4:	443b      	add	r3, r7
 800c9b6:	429d      	cmp	r5, r3
 800c9b8:	bf38      	it	cc
 800c9ba:	461d      	movcc	r5, r3
 800c9bc:	0553      	lsls	r3, r2, #21
 800c9be:	d530      	bpl.n	800ca22 <__ssputs_r+0x9e>
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	f7fe f9a1 	bl	800ad08 <_malloc_r>
 800c9c6:	4606      	mov	r6, r0
 800c9c8:	b950      	cbnz	r0, 800c9e0 <__ssputs_r+0x5c>
 800c9ca:	230c      	movs	r3, #12
 800c9cc:	f8ca 3000 	str.w	r3, [sl]
 800c9d0:	89a3      	ldrh	r3, [r4, #12]
 800c9d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d6:	81a3      	strh	r3, [r4, #12]
 800c9d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e0:	463a      	mov	r2, r7
 800c9e2:	6921      	ldr	r1, [r4, #16]
 800c9e4:	f7fe f92e 	bl	800ac44 <memcpy>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f2:	81a3      	strh	r3, [r4, #12]
 800c9f4:	6126      	str	r6, [r4, #16]
 800c9f6:	6165      	str	r5, [r4, #20]
 800c9f8:	443e      	add	r6, r7
 800c9fa:	1bed      	subs	r5, r5, r7
 800c9fc:	6026      	str	r6, [r4, #0]
 800c9fe:	60a5      	str	r5, [r4, #8]
 800ca00:	464e      	mov	r6, r9
 800ca02:	454e      	cmp	r6, r9
 800ca04:	d900      	bls.n	800ca08 <__ssputs_r+0x84>
 800ca06:	464e      	mov	r6, r9
 800ca08:	4632      	mov	r2, r6
 800ca0a:	4641      	mov	r1, r8
 800ca0c:	6820      	ldr	r0, [r4, #0]
 800ca0e:	f000 f91d 	bl	800cc4c <memmove>
 800ca12:	68a3      	ldr	r3, [r4, #8]
 800ca14:	1b9b      	subs	r3, r3, r6
 800ca16:	60a3      	str	r3, [r4, #8]
 800ca18:	6823      	ldr	r3, [r4, #0]
 800ca1a:	441e      	add	r6, r3
 800ca1c:	6026      	str	r6, [r4, #0]
 800ca1e:	2000      	movs	r0, #0
 800ca20:	e7dc      	b.n	800c9dc <__ssputs_r+0x58>
 800ca22:	462a      	mov	r2, r5
 800ca24:	f000 f92b 	bl	800cc7e <_realloc_r>
 800ca28:	4606      	mov	r6, r0
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d1e2      	bne.n	800c9f4 <__ssputs_r+0x70>
 800ca2e:	6921      	ldr	r1, [r4, #16]
 800ca30:	4650      	mov	r0, sl
 800ca32:	f7fe f91b 	bl	800ac6c <_free_r>
 800ca36:	e7c8      	b.n	800c9ca <__ssputs_r+0x46>

0800ca38 <_svfiprintf_r>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	461d      	mov	r5, r3
 800ca3e:	898b      	ldrh	r3, [r1, #12]
 800ca40:	061f      	lsls	r7, r3, #24
 800ca42:	b09d      	sub	sp, #116	; 0x74
 800ca44:	4680      	mov	r8, r0
 800ca46:	460c      	mov	r4, r1
 800ca48:	4616      	mov	r6, r2
 800ca4a:	d50f      	bpl.n	800ca6c <_svfiprintf_r+0x34>
 800ca4c:	690b      	ldr	r3, [r1, #16]
 800ca4e:	b96b      	cbnz	r3, 800ca6c <_svfiprintf_r+0x34>
 800ca50:	2140      	movs	r1, #64	; 0x40
 800ca52:	f7fe f959 	bl	800ad08 <_malloc_r>
 800ca56:	6020      	str	r0, [r4, #0]
 800ca58:	6120      	str	r0, [r4, #16]
 800ca5a:	b928      	cbnz	r0, 800ca68 <_svfiprintf_r+0x30>
 800ca5c:	230c      	movs	r3, #12
 800ca5e:	f8c8 3000 	str.w	r3, [r8]
 800ca62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca66:	e0c8      	b.n	800cbfa <_svfiprintf_r+0x1c2>
 800ca68:	2340      	movs	r3, #64	; 0x40
 800ca6a:	6163      	str	r3, [r4, #20]
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca70:	2320      	movs	r3, #32
 800ca72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca76:	2330      	movs	r3, #48	; 0x30
 800ca78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca7c:	9503      	str	r5, [sp, #12]
 800ca7e:	f04f 0b01 	mov.w	fp, #1
 800ca82:	4637      	mov	r7, r6
 800ca84:	463d      	mov	r5, r7
 800ca86:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca8a:	b10b      	cbz	r3, 800ca90 <_svfiprintf_r+0x58>
 800ca8c:	2b25      	cmp	r3, #37	; 0x25
 800ca8e:	d13e      	bne.n	800cb0e <_svfiprintf_r+0xd6>
 800ca90:	ebb7 0a06 	subs.w	sl, r7, r6
 800ca94:	d00b      	beq.n	800caae <_svfiprintf_r+0x76>
 800ca96:	4653      	mov	r3, sl
 800ca98:	4632      	mov	r2, r6
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	f7ff ff71 	bl	800c984 <__ssputs_r>
 800caa2:	3001      	adds	r0, #1
 800caa4:	f000 80a4 	beq.w	800cbf0 <_svfiprintf_r+0x1b8>
 800caa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caaa:	4453      	add	r3, sl
 800caac:	9309      	str	r3, [sp, #36]	; 0x24
 800caae:	783b      	ldrb	r3, [r7, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f000 809d 	beq.w	800cbf0 <_svfiprintf_r+0x1b8>
 800cab6:	2300      	movs	r3, #0
 800cab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cabc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	9307      	str	r3, [sp, #28]
 800cac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cac8:	931a      	str	r3, [sp, #104]	; 0x68
 800caca:	462f      	mov	r7, r5
 800cacc:	2205      	movs	r2, #5
 800cace:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cad2:	4850      	ldr	r0, [pc, #320]	; (800cc14 <_svfiprintf_r+0x1dc>)
 800cad4:	f7f3 fb94 	bl	8000200 <memchr>
 800cad8:	9b04      	ldr	r3, [sp, #16]
 800cada:	b9d0      	cbnz	r0, 800cb12 <_svfiprintf_r+0xda>
 800cadc:	06d9      	lsls	r1, r3, #27
 800cade:	bf44      	itt	mi
 800cae0:	2220      	movmi	r2, #32
 800cae2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cae6:	071a      	lsls	r2, r3, #28
 800cae8:	bf44      	itt	mi
 800caea:	222b      	movmi	r2, #43	; 0x2b
 800caec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800caf0:	782a      	ldrb	r2, [r5, #0]
 800caf2:	2a2a      	cmp	r2, #42	; 0x2a
 800caf4:	d015      	beq.n	800cb22 <_svfiprintf_r+0xea>
 800caf6:	9a07      	ldr	r2, [sp, #28]
 800caf8:	462f      	mov	r7, r5
 800cafa:	2000      	movs	r0, #0
 800cafc:	250a      	movs	r5, #10
 800cafe:	4639      	mov	r1, r7
 800cb00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb04:	3b30      	subs	r3, #48	; 0x30
 800cb06:	2b09      	cmp	r3, #9
 800cb08:	d94d      	bls.n	800cba6 <_svfiprintf_r+0x16e>
 800cb0a:	b1b8      	cbz	r0, 800cb3c <_svfiprintf_r+0x104>
 800cb0c:	e00f      	b.n	800cb2e <_svfiprintf_r+0xf6>
 800cb0e:	462f      	mov	r7, r5
 800cb10:	e7b8      	b.n	800ca84 <_svfiprintf_r+0x4c>
 800cb12:	4a40      	ldr	r2, [pc, #256]	; (800cc14 <_svfiprintf_r+0x1dc>)
 800cb14:	1a80      	subs	r0, r0, r2
 800cb16:	fa0b f000 	lsl.w	r0, fp, r0
 800cb1a:	4318      	orrs	r0, r3
 800cb1c:	9004      	str	r0, [sp, #16]
 800cb1e:	463d      	mov	r5, r7
 800cb20:	e7d3      	b.n	800caca <_svfiprintf_r+0x92>
 800cb22:	9a03      	ldr	r2, [sp, #12]
 800cb24:	1d11      	adds	r1, r2, #4
 800cb26:	6812      	ldr	r2, [r2, #0]
 800cb28:	9103      	str	r1, [sp, #12]
 800cb2a:	2a00      	cmp	r2, #0
 800cb2c:	db01      	blt.n	800cb32 <_svfiprintf_r+0xfa>
 800cb2e:	9207      	str	r2, [sp, #28]
 800cb30:	e004      	b.n	800cb3c <_svfiprintf_r+0x104>
 800cb32:	4252      	negs	r2, r2
 800cb34:	f043 0302 	orr.w	r3, r3, #2
 800cb38:	9207      	str	r2, [sp, #28]
 800cb3a:	9304      	str	r3, [sp, #16]
 800cb3c:	783b      	ldrb	r3, [r7, #0]
 800cb3e:	2b2e      	cmp	r3, #46	; 0x2e
 800cb40:	d10c      	bne.n	800cb5c <_svfiprintf_r+0x124>
 800cb42:	787b      	ldrb	r3, [r7, #1]
 800cb44:	2b2a      	cmp	r3, #42	; 0x2a
 800cb46:	d133      	bne.n	800cbb0 <_svfiprintf_r+0x178>
 800cb48:	9b03      	ldr	r3, [sp, #12]
 800cb4a:	1d1a      	adds	r2, r3, #4
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	9203      	str	r2, [sp, #12]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bfb8      	it	lt
 800cb54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cb58:	3702      	adds	r7, #2
 800cb5a:	9305      	str	r3, [sp, #20]
 800cb5c:	4d2e      	ldr	r5, [pc, #184]	; (800cc18 <_svfiprintf_r+0x1e0>)
 800cb5e:	7839      	ldrb	r1, [r7, #0]
 800cb60:	2203      	movs	r2, #3
 800cb62:	4628      	mov	r0, r5
 800cb64:	f7f3 fb4c 	bl	8000200 <memchr>
 800cb68:	b138      	cbz	r0, 800cb7a <_svfiprintf_r+0x142>
 800cb6a:	2340      	movs	r3, #64	; 0x40
 800cb6c:	1b40      	subs	r0, r0, r5
 800cb6e:	fa03 f000 	lsl.w	r0, r3, r0
 800cb72:	9b04      	ldr	r3, [sp, #16]
 800cb74:	4303      	orrs	r3, r0
 800cb76:	3701      	adds	r7, #1
 800cb78:	9304      	str	r3, [sp, #16]
 800cb7a:	7839      	ldrb	r1, [r7, #0]
 800cb7c:	4827      	ldr	r0, [pc, #156]	; (800cc1c <_svfiprintf_r+0x1e4>)
 800cb7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb82:	2206      	movs	r2, #6
 800cb84:	1c7e      	adds	r6, r7, #1
 800cb86:	f7f3 fb3b 	bl	8000200 <memchr>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d038      	beq.n	800cc00 <_svfiprintf_r+0x1c8>
 800cb8e:	4b24      	ldr	r3, [pc, #144]	; (800cc20 <_svfiprintf_r+0x1e8>)
 800cb90:	bb13      	cbnz	r3, 800cbd8 <_svfiprintf_r+0x1a0>
 800cb92:	9b03      	ldr	r3, [sp, #12]
 800cb94:	3307      	adds	r3, #7
 800cb96:	f023 0307 	bic.w	r3, r3, #7
 800cb9a:	3308      	adds	r3, #8
 800cb9c:	9303      	str	r3, [sp, #12]
 800cb9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba0:	444b      	add	r3, r9
 800cba2:	9309      	str	r3, [sp, #36]	; 0x24
 800cba4:	e76d      	b.n	800ca82 <_svfiprintf_r+0x4a>
 800cba6:	fb05 3202 	mla	r2, r5, r2, r3
 800cbaa:	2001      	movs	r0, #1
 800cbac:	460f      	mov	r7, r1
 800cbae:	e7a6      	b.n	800cafe <_svfiprintf_r+0xc6>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	3701      	adds	r7, #1
 800cbb4:	9305      	str	r3, [sp, #20]
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	250a      	movs	r5, #10
 800cbba:	4638      	mov	r0, r7
 800cbbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbc0:	3a30      	subs	r2, #48	; 0x30
 800cbc2:	2a09      	cmp	r2, #9
 800cbc4:	d903      	bls.n	800cbce <_svfiprintf_r+0x196>
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d0c8      	beq.n	800cb5c <_svfiprintf_r+0x124>
 800cbca:	9105      	str	r1, [sp, #20]
 800cbcc:	e7c6      	b.n	800cb5c <_svfiprintf_r+0x124>
 800cbce:	fb05 2101 	mla	r1, r5, r1, r2
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	4607      	mov	r7, r0
 800cbd6:	e7f0      	b.n	800cbba <_svfiprintf_r+0x182>
 800cbd8:	ab03      	add	r3, sp, #12
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	4622      	mov	r2, r4
 800cbde:	4b11      	ldr	r3, [pc, #68]	; (800cc24 <_svfiprintf_r+0x1ec>)
 800cbe0:	a904      	add	r1, sp, #16
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	f7fe f97e 	bl	800aee4 <_printf_float>
 800cbe8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cbec:	4681      	mov	r9, r0
 800cbee:	d1d6      	bne.n	800cb9e <_svfiprintf_r+0x166>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	065b      	lsls	r3, r3, #25
 800cbf4:	f53f af35 	bmi.w	800ca62 <_svfiprintf_r+0x2a>
 800cbf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbfa:	b01d      	add	sp, #116	; 0x74
 800cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc00:	ab03      	add	r3, sp, #12
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	4622      	mov	r2, r4
 800cc06:	4b07      	ldr	r3, [pc, #28]	; (800cc24 <_svfiprintf_r+0x1ec>)
 800cc08:	a904      	add	r1, sp, #16
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	f7fe fc20 	bl	800b450 <_printf_i>
 800cc10:	e7ea      	b.n	800cbe8 <_svfiprintf_r+0x1b0>
 800cc12:	bf00      	nop
 800cc14:	0800cf94 	.word	0x0800cf94
 800cc18:	0800cf9a 	.word	0x0800cf9a
 800cc1c:	0800cf9e 	.word	0x0800cf9e
 800cc20:	0800aee5 	.word	0x0800aee5
 800cc24:	0800c985 	.word	0x0800c985

0800cc28 <__ascii_mbtowc>:
 800cc28:	b082      	sub	sp, #8
 800cc2a:	b901      	cbnz	r1, 800cc2e <__ascii_mbtowc+0x6>
 800cc2c:	a901      	add	r1, sp, #4
 800cc2e:	b142      	cbz	r2, 800cc42 <__ascii_mbtowc+0x1a>
 800cc30:	b14b      	cbz	r3, 800cc46 <__ascii_mbtowc+0x1e>
 800cc32:	7813      	ldrb	r3, [r2, #0]
 800cc34:	600b      	str	r3, [r1, #0]
 800cc36:	7812      	ldrb	r2, [r2, #0]
 800cc38:	1c10      	adds	r0, r2, #0
 800cc3a:	bf18      	it	ne
 800cc3c:	2001      	movne	r0, #1
 800cc3e:	b002      	add	sp, #8
 800cc40:	4770      	bx	lr
 800cc42:	4610      	mov	r0, r2
 800cc44:	e7fb      	b.n	800cc3e <__ascii_mbtowc+0x16>
 800cc46:	f06f 0001 	mvn.w	r0, #1
 800cc4a:	e7f8      	b.n	800cc3e <__ascii_mbtowc+0x16>

0800cc4c <memmove>:
 800cc4c:	4288      	cmp	r0, r1
 800cc4e:	b510      	push	{r4, lr}
 800cc50:	eb01 0302 	add.w	r3, r1, r2
 800cc54:	d807      	bhi.n	800cc66 <memmove+0x1a>
 800cc56:	1e42      	subs	r2, r0, #1
 800cc58:	4299      	cmp	r1, r3
 800cc5a:	d00a      	beq.n	800cc72 <memmove+0x26>
 800cc5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc60:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cc64:	e7f8      	b.n	800cc58 <memmove+0xc>
 800cc66:	4283      	cmp	r3, r0
 800cc68:	d9f5      	bls.n	800cc56 <memmove+0xa>
 800cc6a:	1881      	adds	r1, r0, r2
 800cc6c:	1ad2      	subs	r2, r2, r3
 800cc6e:	42d3      	cmn	r3, r2
 800cc70:	d100      	bne.n	800cc74 <memmove+0x28>
 800cc72:	bd10      	pop	{r4, pc}
 800cc74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc78:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cc7c:	e7f7      	b.n	800cc6e <memmove+0x22>

0800cc7e <_realloc_r>:
 800cc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc80:	4607      	mov	r7, r0
 800cc82:	4614      	mov	r4, r2
 800cc84:	460e      	mov	r6, r1
 800cc86:	b921      	cbnz	r1, 800cc92 <_realloc_r+0x14>
 800cc88:	4611      	mov	r1, r2
 800cc8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc8e:	f7fe b83b 	b.w	800ad08 <_malloc_r>
 800cc92:	b922      	cbnz	r2, 800cc9e <_realloc_r+0x20>
 800cc94:	f7fd ffea 	bl	800ac6c <_free_r>
 800cc98:	4625      	mov	r5, r4
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc9e:	f000 f821 	bl	800cce4 <_malloc_usable_size_r>
 800cca2:	42a0      	cmp	r0, r4
 800cca4:	d20f      	bcs.n	800ccc6 <_realloc_r+0x48>
 800cca6:	4621      	mov	r1, r4
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f7fe f82d 	bl	800ad08 <_malloc_r>
 800ccae:	4605      	mov	r5, r0
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d0f2      	beq.n	800cc9a <_realloc_r+0x1c>
 800ccb4:	4631      	mov	r1, r6
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	f7fd ffc4 	bl	800ac44 <memcpy>
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	f7fd ffd4 	bl	800ac6c <_free_r>
 800ccc4:	e7e9      	b.n	800cc9a <_realloc_r+0x1c>
 800ccc6:	4635      	mov	r5, r6
 800ccc8:	e7e7      	b.n	800cc9a <_realloc_r+0x1c>

0800ccca <__ascii_wctomb>:
 800ccca:	b149      	cbz	r1, 800cce0 <__ascii_wctomb+0x16>
 800cccc:	2aff      	cmp	r2, #255	; 0xff
 800ccce:	bf85      	ittet	hi
 800ccd0:	238a      	movhi	r3, #138	; 0x8a
 800ccd2:	6003      	strhi	r3, [r0, #0]
 800ccd4:	700a      	strbls	r2, [r1, #0]
 800ccd6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ccda:	bf98      	it	ls
 800ccdc:	2001      	movls	r0, #1
 800ccde:	4770      	bx	lr
 800cce0:	4608      	mov	r0, r1
 800cce2:	4770      	bx	lr

0800cce4 <_malloc_usable_size_r>:
 800cce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cce8:	1f18      	subs	r0, r3, #4
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	bfbc      	itt	lt
 800ccee:	580b      	ldrlt	r3, [r1, r0]
 800ccf0:	18c0      	addlt	r0, r0, r3
 800ccf2:	4770      	bx	lr

0800ccf4 <_sbrk>:
 800ccf4:	4b04      	ldr	r3, [pc, #16]	; (800cd08 <_sbrk+0x14>)
 800ccf6:	6819      	ldr	r1, [r3, #0]
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	b909      	cbnz	r1, 800cd00 <_sbrk+0xc>
 800ccfc:	4903      	ldr	r1, [pc, #12]	; (800cd0c <_sbrk+0x18>)
 800ccfe:	6019      	str	r1, [r3, #0]
 800cd00:	6818      	ldr	r0, [r3, #0]
 800cd02:	4402      	add	r2, r0
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	4770      	bx	lr
 800cd08:	20000bec 	.word	0x20000bec
 800cd0c:	200021d8 	.word	0x200021d8

0800cd10 <_init>:
 800cd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd12:	bf00      	nop
 800cd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd16:	bc08      	pop	{r3}
 800cd18:	469e      	mov	lr, r3
 800cd1a:	4770      	bx	lr

0800cd1c <_fini>:
 800cd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1e:	bf00      	nop
 800cd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd22:	bc08      	pop	{r3}
 800cd24:	469e      	mov	lr, r3
 800cd26:	4770      	bx	lr

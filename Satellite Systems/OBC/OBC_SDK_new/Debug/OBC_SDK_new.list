
OBC_SDK_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012be4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08012d98  08012d98  00022d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013380  08013380  00023380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013384  08013384  00023384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08013388  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
  7 .bss          00008054  200001ec  200001ec  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20008240  20008240  000301ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00048396  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006f31  00000000  00000000  000785b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002020  00000000  00000000  0007f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d98  00000000  00000000  00081508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ca7c  00000000  00000000  000832a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ed41  00000000  00000000  0008fd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f6e66  00000000  00000000  000bea5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001b58c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009844  00000000  00000000  001b5918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  001bf15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000183  00000000  00000000  001bf210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012d7c 	.word	0x08012d7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08012d7c 	.word	0x08012d7c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = packet[1];
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	733b      	strb	r3, [r7, #12]
    cySatPacket.Command = packet[2];
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	789b      	ldrb	r3, [r3, #2]
 8000bdc:	737b      	strb	r3, [r7, #13]
    cySatPacket.Data_Length = packet[3];
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	78db      	ldrb	r3, [r3, #3]
 8000be2:	73bb      	strb	r3, [r7, #14]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * cySatPacket.Data_Length);
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00e fa0c 	bl	800f004 <malloc>
 8000bec:	4603      	mov	r3, r0
 8000bee:	613b      	str	r3, [r7, #16]
    memcpy(cySatPacket.Data, packet+4, cySatPacket.Data_Length);
 8000bf0:	6938      	ldr	r0, [r7, #16]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	7bba      	ldrb	r2, [r7, #14]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f00e fa13 	bl	800f024 <memcpy>
    cySatPacket.Checksum = packet[cySatPacket.Data_Length+4];
 8000bfe:	7bbb      	ldrb	r3, [r7, #14]
 8000c00:	3304      	adds	r3, #4
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	753b      	strb	r3, [r7, #20]
    return cySatPacket;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	461c      	mov	r4, r3
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
	...

08000c24 <sendCySatPacket>:
 * @brief Takes in a packet and sends it to the Ground Station via UART serial connection
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
HAL_StatusTypeDef sendCySatPacket(CySat_Packet_t packet){
 8000c24:	b5b0      	push	{r4, r5, r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000c30:	466b      	mov	r3, sp
 8000c32:	461d      	mov	r5, r3
    uint8_t message[packet.Data_Length + 5];
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	1d5c      	adds	r4, r3, #5
 8000c38:	1e63      	subs	r3, r4, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	4623      	mov	r3, r4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f04f 0100 	mov.w	r1, #0
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	00cb      	lsls	r3, r1, #3
 8000c4e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c52:	00c2      	lsls	r2, r0, #3
 8000c54:	4623      	mov	r3, r4
 8000c56:	4618      	mov	r0, r3
 8000c58:	f04f 0100 	mov.w	r1, #0
 8000c5c:	f04f 0200 	mov.w	r2, #0
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	00cb      	lsls	r3, r1, #3
 8000c66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c6a:	00c2      	lsls	r2, r0, #3
 8000c6c:	4623      	mov	r3, r4
 8000c6e:	3307      	adds	r3, #7
 8000c70:	08db      	lsrs	r3, r3, #3
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	ebad 0d03 	sub.w	sp, sp, r3
 8000c78:	466b      	mov	r3, sp
 8000c7a:	3300      	adds	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]

    //build byte array
    message[0] = 0xFF; //start byte
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	22ff      	movs	r2, #255	; 0xff
 8000c82:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 8000c84:	793a      	ldrb	r2, [r7, #4]
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	705a      	strb	r2, [r3, #1]
    message[2] = packet.Command;
 8000c8a:	797a      	ldrb	r2, [r7, #5]
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	709a      	strb	r2, [r3, #2]
    message[3] = packet.Data_Length;
 8000c90:	79ba      	ldrb	r2, [r7, #6]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	70da      	strb	r2, [r3, #3]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	e00a      	b.n	8000cb2 <sendCySatPacket+0x8e>
        message[i + 4] = packet.Data[i];
 8000c9c:	68ba      	ldr	r2, [r7, #8]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	441a      	add	r2, r3
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	7811      	ldrb	r1, [r2, #0]
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < packet.Data_Length; i++){
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	dbef      	blt.n	8000c9c <sendCySatPacket+0x78>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	7b39      	ldrb	r1, [r7, #12]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	77fb      	strb	r3, [r7, #31]
    if(packet.Subsystem_Type == OBC_SUBSYSTEM_TYPE){
 8000cca:	793b      	ldrb	r3, [r7, #4]
 8000ccc:	2b0a      	cmp	r3, #10
 8000cce:	d10c      	bne.n	8000cea <sendCySatPacket+0xc6>
        status = HAL_UART_Transmit(&huart1, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 8000cd0:	6939      	ldr	r1, [r7, #16]
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	3305      	adds	r3, #5
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <sendCySatPacket+0xf0>)
 8000ce0:	f006 fad3 	bl	800728a <HAL_UART_Transmit>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	77fb      	strb	r3, [r7, #31]
 8000ce8:	e00e      	b.n	8000d08 <sendCySatPacket+0xe4>
    }
    else if(packet.Subsystem_Type == PAYLOAD_SUBSYSTEM_TYPE){
 8000cea:	793b      	ldrb	r3, [r7, #4]
 8000cec:	2b28      	cmp	r3, #40	; 0x28
 8000cee:	d10b      	bne.n	8000d08 <sendCySatPacket+0xe4>
        status = HAL_UART_Transmit(&huart6, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 8000cf0:	6939      	ldr	r1, [r7, #16]
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3305      	adds	r3, #5
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <sendCySatPacket+0xf4>)
 8000d00:	f006 fac3 	bl	800728a <HAL_UART_Transmit>
 8000d04:	4603      	mov	r3, r0
 8000d06:	77fb      	strb	r3, [r7, #31]
    }
    return status;
 8000d08:	7ffb      	ldrb	r3, [r7, #31]
 8000d0a:	46ad      	mov	sp, r5
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bdb0      	pop	{r4, r5, r7, pc}
 8000d14:	20007f78 	.word	0x20007f78
 8000d18:	200080d4 	.word	0x200080d4

08000d1c <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 8000d2c:	793b      	ldrb	r3, [r7, #4]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	4413      	add	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 8000d36:	797b      	ldrb	r3, [r7, #5]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	461a      	mov	r2, r3
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	4413      	add	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	e00a      	b.n	8000d66 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	4413      	add	r3, r2
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	3301      	adds	r3, #1
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	dbef      	blt.n	8000d50 <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 8000d86:	b480      	push	{r7}
 8000d88:	b087      	sub	sp, #28
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 8000d96:	793b      	ldrb	r3, [r7, #4]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	461a      	mov	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4413      	add	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	461a      	mov	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4413      	add	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e00a      	b.n	8000dd0 <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	dbef      	blt.n	8000dba <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 8000dda:	7b3b      	ldrb	r3, [r7, #12]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4413      	add	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	d101      	bne.n	8000df0 <validateCySatChecksum+0x6a>
        return 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 8000df0:	2300      	movs	r3, #0
    }
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	371c      	adds	r7, #28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <READ_EPS_BATTERY_VOLTAGE>:
/**
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(float* volt_ptr){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 1; //battery voltage command
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8000e10:	f107 0208 	add.w	r2, r7, #8
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fdcb 	bl	80019b4 <EPS_READ>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <READ_EPS_BATTERY_VOLTAGE+0x2c>
        return status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	e014      	b.n	8000e56 <READ_EPS_BATTERY_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8000e2c:	7a3b      	ldrb	r3, [r7, #8]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	7a7b      	ldrb	r3, [r7, #9]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 8000e3c:	89bb      	ldrh	r3, [r7, #12]
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e46:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e60 <READ_EPS_BATTERY_VOLTAGE+0x60>
 8000e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58
    return status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	3b1951eb 	.word	0x3b1951eb

08000e64 <READ_EPS_BATTERY_CURRENT>:
/**
  * @brief Reads the current level of the EPS battery bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_CURRENT(float* curr_ptr){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 2; //battery current command
 8000e70:	2302      	movs	r3, #2
 8000e72:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fd99 	bl	80019b4 <EPS_READ>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <READ_EPS_BATTERY_CURRENT+0x2c>
        return status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	e014      	b.n	8000eba <READ_EPS_BATTERY_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	7a7b      	ldrb	r3, [r7, #9]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0030517578f * (float) raw_value; //multiply by the conversion coeff
 8000ea0:	89bb      	ldrh	r3, [r7, #12]
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eaa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ec4 <READ_EPS_BATTERY_CURRENT+0x60>
 8000eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0030517578f * 4095 = 12.497 A
    return status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	3b480000 	.word	0x3b480000

08000ec8 <READ_EPS_SOLAR_X_VOLTAGE>:
/**
  * @brief Reads the voltage of the X-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_VOLTAGE(float* volt_ptr){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 5; //solar panel x-axis voltage command
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8000ed8:	f107 0208 	add.w	r2, r7, #8
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fd67 	bl	80019b4 <EPS_READ>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <READ_EPS_SOLAR_X_VOLTAGE+0x2c>
        return status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	e014      	b.n	8000f1e <READ_EPS_SOLAR_X_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8000ef4:	7a3b      	ldrb	r3, [r7, #8]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	7a7b      	ldrb	r3, [r7, #9]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8000f04:	89bb      	ldrh	r3, [r7, #12]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000f28 <READ_EPS_SOLAR_X_VOLTAGE+0x60>
 8000f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	3b200000 	.word	0x3b200000

08000f2c <READ_EPS_SOLAR_X_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the X- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_NEG_CURRENT(float* curr_ptr){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 6; //solar panel x- current command
 8000f38:	2306      	movs	r3, #6
 8000f3a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8000f3c:	f107 0208 	add.w	r2, r7, #8
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fd35 	bl	80019b4 <EPS_READ>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <READ_EPS_SOLAR_X_NEG_CURRENT+0x2c>
        return status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	e014      	b.n	8000f82 <READ_EPS_SOLAR_X_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8000f58:	7a3b      	ldrb	r3, [r7, #8]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	7a7b      	ldrb	r3, [r7, #9]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f72:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000f8c <READ_EPS_SOLAR_X_NEG_CURRENT+0x60>
 8000f76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	3a200001 	.word	0x3a200001

08000f90 <READ_EPS_SOLAR_X_POS_CURRENT>:
/**
  * @brief Reads the voltage of the X+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_POS_CURRENT(float* curr_ptr){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 7; //solar panel x+ current command
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8000fa0:	f107 0208 	add.w	r2, r7, #8
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fd03 	bl	80019b4 <EPS_READ>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <READ_EPS_SOLAR_X_POS_CURRENT+0x2c>
        return status;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	e014      	b.n	8000fe6 <READ_EPS_SOLAR_X_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8000fbc:	7a3b      	ldrb	r3, [r7, #8]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	7a7b      	ldrb	r3, [r7, #9]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4413      	add	r3, r2
 8000fca:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8000fcc:	89bb      	ldrh	r3, [r7, #12]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ff0 <READ_EPS_SOLAR_X_POS_CURRENT+0x60>
 8000fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	3a200001 	.word	0x3a200001

08000ff4 <READ_EPS_SOLAR_Y_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_VOLTAGE(float* volt_ptr){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 8; //solar panel y-axis voltage command
 8001000:	2308      	movs	r3, #8
 8001002:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001004:	f107 0208 	add.w	r2, r7, #8
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fcd1 	bl	80019b4 <EPS_READ>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <READ_EPS_SOLAR_Y_VOLTAGE+0x2c>
        return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	e014      	b.n	800104a <READ_EPS_SOLAR_Y_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001020:	7a3b      	ldrb	r3, [r7, #8]
 8001022:	b29b      	uxth	r3, r3
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b29a      	uxth	r2, r3
 8001028:	7a7b      	ldrb	r3, [r7, #9]
 800102a:	b29b      	uxth	r3, r3
 800102c:	4413      	add	r3, r2
 800102e:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001030:	89bb      	ldrh	r3, [r7, #12]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001054 <READ_EPS_SOLAR_Y_VOLTAGE+0x60>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	3b200000 	.word	0x3b200000

08001058 <READ_EPS_SOLAR_Y_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Y- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_NEG_CURRENT(float* curr_ptr){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 9; //solar panel y- current command
 8001064:	2309      	movs	r3, #9
 8001066:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001068:	f107 0208 	add.w	r2, r7, #8
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fc9f 	bl	80019b4 <EPS_READ>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x2c>
        return status;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	e014      	b.n	80010ae <READ_EPS_SOLAR_Y_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001084:	7a3b      	ldrb	r3, [r7, #8]
 8001086:	b29b      	uxth	r3, r3
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b29a      	uxth	r2, r3
 800108c:	7a7b      	ldrb	r3, [r7, #9]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4413      	add	r3, r2
 8001092:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001094:	89bb      	ldrh	r3, [r7, #12]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010b8 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x60>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	3a200001 	.word	0x3a200001

080010bc <READ_EPS_SOLAR_Y_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Y+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_POS_CURRENT(float* curr_ptr){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 10; //solar panel y+ current command
 80010c8:	230a      	movs	r3, #10
 80010ca:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80010cc:	f107 0208 	add.w	r2, r7, #8
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fc6d 	bl	80019b4 <EPS_READ>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <READ_EPS_SOLAR_Y_POS_CURRENT+0x2c>
        return status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	e014      	b.n	8001112 <READ_EPS_SOLAR_Y_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80010e8:	7a3b      	ldrb	r3, [r7, #8]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	7a7b      	ldrb	r3, [r7, #9]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80010f8:	89bb      	ldrh	r3, [r7, #12]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001102:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800111c <READ_EPS_SOLAR_Y_POS_CURRENT+0x60>
 8001106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	3a200001 	.word	0x3a200001

08001120 <READ_EPS_SOLAR_Z_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_VOLTAGE(float* volt_ptr){
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 11; //solar panel z-axis voltage command
 800112c:	230b      	movs	r3, #11
 800112e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001130:	f107 0208 	add.w	r2, r7, #8
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fc3b 	bl	80019b4 <EPS_READ>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <READ_EPS_SOLAR_Z_VOLTAGE+0x2c>
        return status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	e014      	b.n	8001176 <READ_EPS_SOLAR_Z_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800114c:	7a3b      	ldrb	r3, [r7, #8]
 800114e:	b29b      	uxth	r3, r3
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b29a      	uxth	r2, r3
 8001154:	7a7b      	ldrb	r3, [r7, #9]
 8001156:	b29b      	uxth	r3, r3
 8001158:	4413      	add	r3, r2
 800115a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 800115c:	89bb      	ldrh	r3, [r7, #12]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001166:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001180 <READ_EPS_SOLAR_Z_VOLTAGE+0x60>
 800116a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	3b200000 	.word	0x3b200000

08001184 <READ_EPS_SOLAR_Z_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Z- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_NEG_CURRENT(float* curr_ptr){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 12; //solar panel z- current command
 8001190:	230c      	movs	r3, #12
 8001192:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001194:	f107 0208 	add.w	r2, r7, #8
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fc09 	bl	80019b4 <EPS_READ>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x2c>
        return status;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	e014      	b.n	80011da <READ_EPS_SOLAR_Z_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80011b0:	7a3b      	ldrb	r3, [r7, #8]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	7a7b      	ldrb	r3, [r7, #9]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80011c0:	89bb      	ldrh	r3, [r7, #12]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011e4 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x60>
 80011ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	3a200001 	.word	0x3a200001

080011e8 <READ_EPS_SOLAR_Z_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Z+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_POS_CURRENT(float* curr_ptr){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 13; //solar panel z+ current command
 80011f4:	230d      	movs	r3, #13
 80011f6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80011f8:	f107 0208 	add.w	r2, r7, #8
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fbd7 	bl	80019b4 <EPS_READ>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <READ_EPS_SOLAR_Z_POS_CURRENT+0x2c>
        return status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	e014      	b.n	800123e <READ_EPS_SOLAR_Z_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001214:	7a3b      	ldrb	r3, [r7, #8]
 8001216:	b29b      	uxth	r3, r3
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b29a      	uxth	r2, r3
 800121c:	7a7b      	ldrb	r3, [r7, #9]
 800121e:	b29b      	uxth	r3, r3
 8001220:	4413      	add	r3, r2
 8001222:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001224:	89bb      	ldrh	r3, [r7, #12]
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001248 <READ_EPS_SOLAR_Z_POS_CURRENT+0x60>
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	3a200001 	.word	0x3a200001

0800124c <READ_EPS_3V_CURRENT>:
/**
  * @brief Reads the current of the EPS 3.3v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_3V_CURRENT(float* curr_ptr){
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 14; //3.3v bus current command
 8001258:	230e      	movs	r3, #14
 800125a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800125c:	f107 0208 	add.w	r2, r7, #8
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fba5 	bl	80019b4 <EPS_READ>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <READ_EPS_3V_CURRENT+0x2c>
        return status;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	e014      	b.n	80012a2 <READ_EPS_3V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001278:	7a3b      	ldrb	r3, [r7, #8]
 800127a:	b29b      	uxth	r3, r3
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b29a      	uxth	r2, r3
 8001280:	7a7b      	ldrb	r3, [r7, #9]
 8001282:	b29b      	uxth	r3, r3
 8001284:	4413      	add	r3, r2
 8001286:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 8001288:	89bb      	ldrh	r3, [r7, #12]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001292:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80012ac <READ_EPS_3V_CURRENT+0x60>
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	3b055555 	.word	0x3b055555

080012b0 <READ_EPS_5V_CURRENT>:
/**
  * @brief Reads the current of the EPS 5v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_5V_CURRENT(float* curr_ptr){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 15; //5v bus current command
 80012bc:	230f      	movs	r3, #15
 80012be:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80012c0:	f107 0208 	add.w	r2, r7, #8
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fb73 	bl	80019b4 <EPS_READ>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <READ_EPS_5V_CURRENT+0x2c>
        return status;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	e014      	b.n	8001306 <READ_EPS_5V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80012dc:	7a3b      	ldrb	r3, [r7, #8]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001310 <READ_EPS_5V_CURRENT+0x60>
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	3b055555 	.word	0x3b055555

08001314 <READ_EPS_MCU_TEMP>:
/**
  * @brief Reads the temperature of the EPS microcontroller in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_MCU_TEMP(float* temp_ptr){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 18; //MCU temperature command
 8001320:	2312      	movs	r3, #18
 8001322:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001324:	f107 0208 	add.w	r2, r7, #8
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fb41 	bl	80019b4 <EPS_READ>
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <READ_EPS_MCU_TEMP+0x2c>
        return status;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	e01c      	b.n	800137a <READ_EPS_MCU_TEMP+0x66>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001340:	7a3b      	ldrb	r3, [r7, #8]
 8001342:	b29b      	uxth	r3, r3
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b29a      	uxth	r2, r3
 8001348:	7a7b      	ldrb	r3, [r7, #9]
 800134a:	b29b      	uxth	r3, r3
 800134c:	4413      	add	r3, r2
 800134e:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = (((float) raw_value * 0.0006103516f) - 0.986f) / 0.00355f;
 8001350:	89bb      	ldrh	r3, [r7, #12]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001384 <READ_EPS_MCU_TEMP+0x70>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001388 <READ_EPS_MCU_TEMP+0x74>
 8001366:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800136a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800138c <READ_EPS_MCU_TEMP+0x78>
 800136e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	3a200001 	.word	0x3a200001
 8001388:	3f7c6a7f 	.word	0x3f7c6a7f
 800138c:	3b68a71e 	.word	0x3b68a71e

08001390 <READ_EPS_BATT_1_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 1 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_1_TEMP(float* temp_ptr){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 19; //battery cell 1 temperature command
 800139c:	2313      	movs	r3, #19
 800139e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80013a0:	f107 0208 	add.w	r2, r7, #8
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fb03 	bl	80019b4 <EPS_READ>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <READ_EPS_BATT_1_TEMP+0x2c>
        return status;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	e014      	b.n	80013e6 <READ_EPS_BATT_1_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80013bc:	7a3b      	ldrb	r3, [r7, #8]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	7a7b      	ldrb	r3, [r7, #9]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80013cc:	89bb      	ldrh	r3, [r7, #12]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013f0 <READ_EPS_BATT_1_TEMP+0x60>
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	3b800000 	.word	0x3b800000

080013f4 <READ_EPS_BATT_2_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 2 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_2_TEMP(float* temp_ptr){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 20; //battery cell 2 temperature command
 8001400:	2314      	movs	r3, #20
 8001402:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001404:	f107 0208 	add.w	r2, r7, #8
 8001408:	7bbb      	ldrb	r3, [r7, #14]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fad1 	bl	80019b4 <EPS_READ>
 8001412:	4603      	mov	r3, r0
 8001414:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <READ_EPS_BATT_2_TEMP+0x2c>
        return status;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	e014      	b.n	800144a <READ_EPS_BATT_2_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001420:	7a3b      	ldrb	r3, [r7, #8]
 8001422:	b29b      	uxth	r3, r3
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b29a      	uxth	r2, r3
 8001428:	7a7b      	ldrb	r3, [r7, #9]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4413      	add	r3, r2
 800142e:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001430:	89bb      	ldrh	r3, [r7, #12]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001454 <READ_EPS_BATT_2_TEMP+0x60>
 800143e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	3b800000 	.word	0x3b800000

08001458 <READ_EPS_BATT_3_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 3 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_3_TEMP(float* temp_ptr){
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 21; //battery cell 3 temperature command
 8001464:	2315      	movs	r3, #21
 8001466:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001468:	f107 0208 	add.w	r2, r7, #8
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fa9f 	bl	80019b4 <EPS_READ>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <READ_EPS_BATT_3_TEMP+0x2c>
        return status;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	e014      	b.n	80014ae <READ_EPS_BATT_3_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001484:	7a3b      	ldrb	r3, [r7, #8]
 8001486:	b29b      	uxth	r3, r3
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b29a      	uxth	r2, r3
 800148c:	7a7b      	ldrb	r3, [r7, #9]
 800148e:	b29b      	uxth	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001494:	89bb      	ldrh	r3, [r7, #12]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014b8 <READ_EPS_BATT_3_TEMP+0x60>
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	3b800000 	.word	0x3b800000

080014bc <READ_EPS_BATT_4_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 4 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_4_TEMP(float* temp_ptr){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 22; //battery cell 4 temperature command
 80014c8:	2316      	movs	r3, #22
 80014ca:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80014cc:	f107 0208 	add.w	r2, r7, #8
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fa6d 	bl	80019b4 <EPS_READ>
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <READ_EPS_BATT_4_TEMP+0x2c>
        return status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	e014      	b.n	8001512 <READ_EPS_BATT_4_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80014e8:	7a3b      	ldrb	r3, [r7, #8]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	7a7b      	ldrb	r3, [r7, #9]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80014f8:	89bb      	ldrh	r3, [r7, #12]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001502:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800151c <READ_EPS_BATT_4_TEMP+0x60>
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	3b800000 	.word	0x3b800000

08001520 <READ_EPS_INPUT_CONDITION>:
/**
  * @brief Reads raw return value of the Input Condition command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_INPUT_CONDITION(uint16_t *cond_ptr){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 23; //input conditions command
 800152c:	2317      	movs	r3, #23
 800152e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001530:	f107 020c 	add.w	r2, r7, #12
 8001534:	7bbb      	ldrb	r3, [r7, #14]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fa3b 	bl	80019b4 <EPS_READ>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <READ_EPS_INPUT_CONDITION+0x2c>
        return status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	e00a      	b.n	8001562 <READ_EPS_INPUT_CONDITION+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800154c:	7b3b      	ldrb	r3, [r7, #12]
 800154e:	b29b      	uxth	r3, r3
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b29a      	uxth	r2, r3
 8001554:	7b7b      	ldrb	r3, [r7, #13]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4413      	add	r3, r2
 800155a:	b29a      	uxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	801a      	strh	r2, [r3, #0]
    return status;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <READ_EPS_OUTPUT_CONDITION1>:
/**
  * @brief Reads raw return value of the Output Condition 1 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION1(uint16_t *cond_ptr){
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001572:	2301      	movs	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 8001576:	2318      	movs	r3, #24
 8001578:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800157a:	f107 020c 	add.w	r2, r7, #12
 800157e:	7bbb      	ldrb	r3, [r7, #14]
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fa16 	bl	80019b4 <EPS_READ>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <READ_EPS_OUTPUT_CONDITION1+0x2c>
        return status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	e00a      	b.n	80015ac <READ_EPS_OUTPUT_CONDITION1+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	b29b      	uxth	r3, r3
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b29a      	uxth	r2, r3
 800159e:	7b7b      	ldrb	r3, [r7, #13]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	801a      	strh	r2, [r3, #0]
    return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <READ_EPS_OUTPUT_CONDITION2>:
/**
  * @brief Reads raw return value of the Output Condition 2 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION2(uint16_t *cond_ptr){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 80015c0:	2318      	movs	r3, #24
 80015c2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80015c4:	f107 020c 	add.w	r2, r7, #12
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f9f1 	bl	80019b4 <EPS_READ>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <READ_EPS_OUTPUT_CONDITION2+0x2c>
        return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	e00a      	b.n	80015f6 <READ_EPS_OUTPUT_CONDITION2+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80015e0:	7b3b      	ldrb	r3, [r7, #12]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	801a      	strh	r2, [r3, #0]
    return status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <READ_EPS_POWER_ON_CYCLES>:
/**
  * @brief Reads the current count of EPS power cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_POWER_ON_CYCLES(uint16_t *count_ptr){
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 26; //power on cycles count command
 800160a:	231a      	movs	r3, #26
 800160c:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800160e:	f107 020c 	add.w	r2, r7, #12
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f9cc 	bl	80019b4 <EPS_READ>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <READ_EPS_POWER_ON_CYCLES+0x2c>
        return status;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	e00a      	b.n	8001640 <READ_EPS_POWER_ON_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800162a:	7b3b      	ldrb	r3, [r7, #12]
 800162c:	b29b      	uxth	r3, r3
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b29a      	uxth	r2, r3
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	b29b      	uxth	r3, r3
 8001636:	4413      	add	r3, r2
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	801a      	strh	r2, [r3, #0]
    return status;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <READ_EPS_UNDER_VOLT_COUNT>:
/**
  * @brief Reads the current count of EPS under-voltage occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_UNDER_VOLT_COUNT(uint16_t *count_ptr){
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 27; //under voltage count command
 8001654:	231b      	movs	r3, #27
 8001656:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001658:	f107 020c 	add.w	r2, r7, #12
 800165c:	7bbb      	ldrb	r3, [r7, #14]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f9a7 	bl	80019b4 <EPS_READ>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <READ_EPS_UNDER_VOLT_COUNT+0x2c>
        return status;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	e00a      	b.n	800168a <READ_EPS_UNDER_VOLT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001674:	7b3b      	ldrb	r3, [r7, #12]
 8001676:	b29b      	uxth	r3, r3
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	b29a      	uxth	r2, r3
 800167c:	7b7b      	ldrb	r3, [r7, #13]
 800167e:	b29b      	uxth	r3, r3
 8001680:	4413      	add	r3, r2
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	801a      	strh	r2, [r3, #0]
    return status;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <READ_EPS_SHORT_CIRCUIT_COUNT>:
/**
  * @brief Reads the current count of EPS short-circuit occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SHORT_CIRCUIT_COUNT(uint16_t *count_ptr){
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800169a:	2301      	movs	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 28; //short circuit count command
 800169e:	231c      	movs	r3, #28
 80016a0:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80016a2:	f107 020c 	add.w	r2, r7, #12
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f982 	bl	80019b4 <EPS_READ>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <READ_EPS_SHORT_CIRCUIT_COUNT+0x2c>
        return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	e00a      	b.n	80016d4 <READ_EPS_SHORT_CIRCUIT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80016be:	7b3b      	ldrb	r3, [r7, #12]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	7b7b      	ldrb	r3, [r7, #13]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	801a      	strh	r2, [r3, #0]
    return status;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <READ_EPS_OVER_TEMP_COUNT>:
/**
  * @brief Reads the current count of EPS over-temp occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OVER_TEMP_COUNT(uint16_t *count_ptr){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 29; //over temperature count command
 80016e8:	231d      	movs	r3, #29
 80016ea:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	7bbb      	ldrb	r3, [r7, #14]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f95d 	bl	80019b4 <EPS_READ>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <READ_EPS_OVER_TEMP_COUNT+0x2c>
        return status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	e00a      	b.n	800171e <READ_EPS_OVER_TEMP_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001708:	7b3b      	ldrb	r3, [r7, #12]
 800170a:	b29b      	uxth	r3, r3
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	b29a      	uxth	r2, r3
 8001710:	7b7b      	ldrb	r3, [r7, #13]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4413      	add	r3, r2
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	801a      	strh	r2, [r3, #0]
    return status;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <READ_EPS_CHARGE_CYCLES>:
/**
  * @brief Reads the current count of EPS battery charge cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_CHARGE_CYCLES(uint16_t *count_ptr){
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 48; //charging cycles count command
 8001732:	2330      	movs	r3, #48	; 0x30
 8001734:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001736:	f107 020c 	add.w	r2, r7, #12
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f938 	bl	80019b4 <EPS_READ>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <READ_EPS_CHARGE_CYCLES+0x2c>
        return status;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	e00a      	b.n	8001768 <READ_EPS_CHARGE_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001752:	7b3b      	ldrb	r3, [r7, #12]
 8001754:	b29b      	uxth	r3, r3
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b29a      	uxth	r2, r3
 800175a:	7b7b      	ldrb	r3, [r7, #13]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b29a      	uxth	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	801a      	strh	r2, [r3, #0]
    return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <READ_EPS_DEFAULTS1>:
/**
  * @brief Reads the default values of LUPs and fast charge modes and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS1(uint16_t *default_ptr){
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 43; //output 1 default value command
 800177c:	232b      	movs	r3, #43	; 0x2b
 800177e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001780:	f107 020c 	add.w	r2, r7, #12
 8001784:	7bbb      	ldrb	r3, [r7, #14]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f913 	bl	80019b4 <EPS_READ>
 800178e:	4603      	mov	r3, r0
 8001790:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <READ_EPS_DEFAULTS1+0x2c>
        return status;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	e00a      	b.n	80017b2 <READ_EPS_DEFAULTS1+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800179c:	7b3b      	ldrb	r3, [r7, #12]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	7b7b      	ldrb	r3, [r7, #13]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	801a      	strh	r2, [r3, #0]
    return status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <READ_EPS_DEFAULTS2>:
/**
  * @brief Reads the default values of OUT1-OUT6 and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS2(uint16_t *default_ptr){
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80017c2:	2301      	movs	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 44; //output 3 default value command
 80017c6:	232c      	movs	r3, #44	; 0x2c
 80017c8:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80017ca:	f107 020c 	add.w	r2, r7, #12
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f8ee 	bl	80019b4 <EPS_READ>
 80017d8:	4603      	mov	r3, r0
 80017da:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <READ_EPS_DEFAULTS2+0x2c>
        return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	e00a      	b.n	80017fc <READ_EPS_DEFAULTS2+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80017e6:	7b3b      	ldrb	r3, [r7, #12]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	7b7b      	ldrb	r3, [r7, #13]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	801a      	strh	r2, [r3, #0]
    return status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <enable_EPS_Vbatt_Bus>:


/********************************************** WRITE FUNCTIONS **********************************************************************************/
HAL_StatusTypeDef enable_EPS_Vbatt_Bus(){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 1); //turn command 1 to the ON state
 8001808:	2101      	movs	r1, #1
 800180a:	2001      	movs	r0, #1
 800180c:	f000 f8fc 	bl	8001a08 <EPS_WRITE>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}

08001816 <disable_EPS_Vbatt_Bus>:

HAL_StatusTypeDef disable_EPS_Vbatt_Bus(){
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 0); //turn command 1 to the OFF state
 800181a:	2100      	movs	r1, #0
 800181c:	2001      	movs	r0, #1
 800181e:	f000 f8f3 	bl	8001a08 <EPS_WRITE>
 8001822:	4603      	mov	r3, r0
}
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}

08001828 <enable_EPS_5v_Bus>:

HAL_StatusTypeDef enable_EPS_5v_Bus(){
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 1); //turn command 4 to the ON state
 800182c:	2101      	movs	r1, #1
 800182e:	2004      	movs	r0, #4
 8001830:	f000 f8ea 	bl	8001a08 <EPS_WRITE>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}

0800183a <disable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_5v_Bus(){
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 0); //turn command 4 to the OFF state
 800183e:	2100      	movs	r1, #0
 8001840:	2004      	movs	r0, #4
 8001842:	f000 f8e1 	bl	8001a08 <EPS_WRITE>
 8001846:	4603      	mov	r3, r0
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}

0800184c <enable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_LUP_5v(){
    return EPS_WRITE(5, 1); //turn command 6 to the OFF state
}

HAL_StatusTypeDef enable_EPS_Fast_Charge1(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 1); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001850:	2101      	movs	r1, #1
 8001852:	2008      	movs	r0, #8
 8001854:	f000 f8d8 	bl	8001a08 <EPS_WRITE>
 8001858:	4603      	mov	r3, r0
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}

0800185e <disable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_Fast_Charge1(){
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 0); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001862:	2100      	movs	r1, #0
 8001864:	2008      	movs	r0, #8
 8001866:	f000 f8cf 	bl	8001a08 <EPS_WRITE>
 800186a:	4603      	mov	r3, r0
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}

08001870 <enable_EPS_Fast_Charge2>:

HAL_StatusTypeDef enable_EPS_Fast_Charge2(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 1); //turn command 9 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001874:	2101      	movs	r1, #1
 8001876:	2009      	movs	r0, #9
 8001878:	f000 f8c6 	bl	8001a08 <EPS_WRITE>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}

08001882 <disable_EPS_Fast_Charge2>:

HAL_StatusTypeDef disable_EPS_Fast_Charge2(){
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 0); //turn command 9 to the OFF state (HIGH = Fast?, LOW = Slow?)
 8001886:	2100      	movs	r1, #0
 8001888:	2009      	movs	r0, #9
 800188a:	f000 f8bd 	bl	8001a08 <EPS_WRITE>
 800188e:	4603      	mov	r3, r0
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}

08001894 <enable_EPS_Output_1>:

HAL_StatusTypeDef enable_EPS_Output_1(){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 1); //turn command 10 to the ON state
 8001898:	2101      	movs	r1, #1
 800189a:	200a      	movs	r0, #10
 800189c:	f000 f8b4 	bl	8001a08 <EPS_WRITE>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <disable_EPS_Output_1>:

HAL_StatusTypeDef disable_EPS_Output_1(){
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 0); //turn command 10 to the OFF state
 80018aa:	2100      	movs	r1, #0
 80018ac:	200a      	movs	r0, #10
 80018ae:	f000 f8ab 	bl	8001a08 <EPS_WRITE>
 80018b2:	4603      	mov	r3, r0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <enable_EPS_Output_2>:

HAL_StatusTypeDef enable_EPS_Output_2(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 1); //turn command 11 to the ON state
 80018bc:	2101      	movs	r1, #1
 80018be:	200b      	movs	r0, #11
 80018c0:	f000 f8a2 	bl	8001a08 <EPS_WRITE>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}

080018ca <disable_EPS_Output_2>:

HAL_StatusTypeDef disable_EPS_Output_2(){
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 0); //turn command 11 to the OFF state
 80018ce:	2100      	movs	r1, #0
 80018d0:	200b      	movs	r0, #11
 80018d2:	f000 f899 	bl	8001a08 <EPS_WRITE>
 80018d6:	4603      	mov	r3, r0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}

080018dc <enable_EPS_Output_3>:

HAL_StatusTypeDef enable_EPS_Output_3(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 1); //turn command 12 to the ON state
 80018e0:	2101      	movs	r1, #1
 80018e2:	200c      	movs	r0, #12
 80018e4:	f000 f890 	bl	8001a08 <EPS_WRITE>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}

080018ee <disable_EPS_Output_3>:

HAL_StatusTypeDef disable_EPS_Output_3(){
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 0); //turn command 12 to the OFF state
 80018f2:	2100      	movs	r1, #0
 80018f4:	200c      	movs	r0, #12
 80018f6:	f000 f887 	bl	8001a08 <EPS_WRITE>
 80018fa:	4603      	mov	r3, r0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	bd80      	pop	{r7, pc}

08001900 <enable_EPS_Output_5>:

HAL_StatusTypeDef enable_EPS_Output_5(){
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 1); //turn command 14 to the ON state
 8001904:	2101      	movs	r1, #1
 8001906:	200e      	movs	r0, #14
 8001908:	f000 f87e 	bl	8001a08 <EPS_WRITE>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}

08001912 <disable_EPS_Output_5>:

HAL_StatusTypeDef disable_EPS_Output_5(){
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 0); //turn command 14 to the OFF state
 8001916:	2100      	movs	r1, #0
 8001918:	200e      	movs	r0, #14
 800191a:	f000 f875 	bl	8001a08 <EPS_WRITE>
 800191e:	4603      	mov	r3, r0
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}

08001924 <enable_EPS_Output_6>:

HAL_StatusTypeDef enable_EPS_Output_6(){
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 1); //turn command 15 to the ON state
 8001928:	2101      	movs	r1, #1
 800192a:	200f      	movs	r0, #15
 800192c:	f000 f86c 	bl	8001a08 <EPS_WRITE>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}

08001936 <disable_EPS_Output_6>:

HAL_StatusTypeDef disable_EPS_Output_6(){
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 0); //turn command 15 to the OFF state
 800193a:	2100      	movs	r1, #0
 800193c:	200f      	movs	r0, #15
 800193e:	f000 f863 	bl	8001a08 <EPS_WRITE>
 8001942:	4603      	mov	r3, r0
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}

08001948 <enable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_1(){
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 1); //turn command 16 to the ON state
 800194c:	2101      	movs	r1, #1
 800194e:	2010      	movs	r0, #16
 8001950:	f000 f85a 	bl	8001a08 <EPS_WRITE>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	bd80      	pop	{r7, pc}

0800195a <disable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_1(){
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 0); //turn command 16 to the OFF state
 800195e:	2100      	movs	r1, #0
 8001960:	2010      	movs	r0, #16
 8001962:	f000 f851 	bl	8001a08 <EPS_WRITE>
 8001966:	4603      	mov	r3, r0
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}

0800196c <enable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_2(){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 1); //turn command 17 to the ON state
 8001970:	2101      	movs	r1, #1
 8001972:	2011      	movs	r0, #17
 8001974:	f000 f848 	bl	8001a08 <EPS_WRITE>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}

0800197e <disable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_2(){
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 0); //turn command 17 to the OFF state
 8001982:	2100      	movs	r1, #0
 8001984:	2011      	movs	r0, #17
 8001986:	f000 f83f 	bl	8001a08 <EPS_WRITE>
 800198a:	4603      	mov	r3, r0
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}

08001990 <enable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_3(){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 1); //turn command 18 to the ON state
 8001994:	2101      	movs	r1, #1
 8001996:	2012      	movs	r0, #18
 8001998:	f000 f836 	bl	8001a08 <EPS_WRITE>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <disable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_3(){
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 0); //turn command 18 to the OFF state
 80019a6:	2100      	movs	r1, #0
 80019a8:	2012      	movs	r0, #18
 80019aa:	f000 f82d 	bl	8001a08 <EPS_WRITE>
 80019ae:	4603      	mov	r3, r0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <EPS_READ>:
  * @brief Sends a write command to the EPS module over a given I2C instance and reads back a response
  * @param command : the command to be used on the transceiver
  * @param data_ptr : A pointer to allow information from the health check to be viewed.
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_READ(uint8_t command, uint8_t* data_ptr){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
        HAL_StatusTypeDef status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 80019c4:	1dfa      	adds	r2, r7, #7
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	2130      	movs	r1, #48	; 0x30
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <EPS_READ+0x50>)
 80019d2:	f002 f92b 	bl	8003c2c <HAL_I2C_Master_Transmit>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK){
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <EPS_READ+0x30>
            return status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	e00b      	b.n	80019fc <EPS_READ+0x48>
        }
        status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 80019e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2302      	movs	r3, #2
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	2130      	movs	r1, #48	; 0x30
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <EPS_READ+0x50>)
 80019f2:	f002 fa29 	bl	8003e48 <HAL_I2C_Master_Receive>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
        return status;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20007d90 	.word	0x20007d90

08001a08 <EPS_WRITE>:
/**
  * @brief Sends a write command to the EPS module over a given I2C instance
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(uint8_t command, uint8_t state){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	4603      	mov	r3, r0
 8001a10:	460a      	mov	r2, r1
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	4613      	mov	r3, r2
 8001a16:	71bb      	strb	r3, [r7, #6]
        HAL_StatusTypeDef status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
        uint8_t data[2];
        data[0] = command;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	733b      	strb	r3, [r7, #12]
        data[1] = state;
 8001a20:	79bb      	ldrb	r3, [r7, #6]
 8001a22:	737b      	strb	r3, [r7, #13]
        status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT);
 8001a24:	f107 020c 	add.w	r2, r7, #12
 8001a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2302      	movs	r3, #2
 8001a30:	2130      	movs	r1, #48	; 0x30
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <EPS_WRITE+0x40>)
 8001a34:	f002 f8fa 	bl	8003c2c <HAL_I2C_Master_Transmit>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73fb      	strb	r3, [r7, #15]
        return status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20007d90 	.word	0x20007d90

08001a4c <sendErrorPacket>:
/**
 * @brief This function sends an error packet to the Ground Station
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendErrorPacket(){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 8001a52:	230a      	movs	r3, #10
 8001a54:	713b      	strb	r3, [r7, #4]
    cySatPacket.Command = 0xFF;
 8001a56:	23ff      	movs	r3, #255	; 0xff
 8001a58:	717b      	strb	r3, [r7, #5]
    cySatPacket.Data_Length = 0x02;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	71bb      	strb	r3, [r7, #6]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f00d fad0 	bl	800f004 <malloc>
 8001a64:	4603      	mov	r3, r0
 8001a66:	60bb      	str	r3, [r7, #8]
    cySatPacket.Data[0] = 0xFF;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	22ff      	movs	r2, #255	; 0xff
 8001a6c:	701a      	strb	r2, [r3, #0]
    cySatPacket.Data[1] = 0xFF;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3301      	adds	r3, #1
 8001a72:	22ff      	movs	r2, #255	; 0xff
 8001a74:	701a      	strb	r2, [r3, #0]
    cySatPacket.Checksum = generateCySatChecksum(cySatPacket);
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a7c:	f7ff f94e 	bl	8000d1c <generateCySatChecksum>
 8001a80:	4603      	mov	r3, r0
 8001a82:	733b      	strb	r3, [r7, #12]
    return sendCySatPacket(cySatPacket);
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a8a:	f7ff f8cb 	bl	8000c24 <sendCySatPacket>
 8001a8e:	4603      	mov	r3, r0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b0a9      	sub	sp, #164	; 0xa4
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    HAL_StatusTypeDef status;
    CySat_Packet_t outgoingPacket;
    switch(packet.Subsystem_Type){
 8001aa4:	793b      	ldrb	r3, [r7, #4]
 8001aa6:	2b28      	cmp	r3, #40	; 0x28
 8001aa8:	dc48      	bgt.n	8001b3c <handleCySatPacket+0xa4>
 8001aaa:	2b0a      	cmp	r3, #10
 8001aac:	f2c0 86df 	blt.w	800286e <handleCySatPacket+0xdd6>
 8001ab0:	3b0a      	subs	r3, #10
 8001ab2:	2b1e      	cmp	r3, #30
 8001ab4:	f200 86db 	bhi.w	800286e <handleCySatPacket+0xdd6>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <handleCySatPacket+0x28>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08002875 	.word	0x08002875
 8001ac4:	0800286f 	.word	0x0800286f
 8001ac8:	0800286f 	.word	0x0800286f
 8001acc:	0800286f 	.word	0x0800286f
 8001ad0:	0800286f 	.word	0x0800286f
 8001ad4:	0800286f 	.word	0x0800286f
 8001ad8:	0800286f 	.word	0x0800286f
 8001adc:	0800286f 	.word	0x0800286f
 8001ae0:	0800286f 	.word	0x0800286f
 8001ae4:	0800286f 	.word	0x0800286f
 8001ae8:	08002875 	.word	0x08002875
 8001aec:	0800286f 	.word	0x0800286f
 8001af0:	0800286f 	.word	0x0800286f
 8001af4:	0800286f 	.word	0x0800286f
 8001af8:	0800286f 	.word	0x0800286f
 8001afc:	0800286f 	.word	0x0800286f
 8001b00:	0800286f 	.word	0x0800286f
 8001b04:	0800286f 	.word	0x0800286f
 8001b08:	0800286f 	.word	0x0800286f
 8001b0c:	0800286f 	.word	0x0800286f
 8001b10:	08001b47 	.word	0x08001b47
 8001b14:	0800286f 	.word	0x0800286f
 8001b18:	0800286f 	.word	0x0800286f
 8001b1c:	0800286f 	.word	0x0800286f
 8001b20:	0800286f 	.word	0x0800286f
 8001b24:	0800286f 	.word	0x0800286f
 8001b28:	0800286f 	.word	0x0800286f
 8001b2c:	0800286f 	.word	0x0800286f
 8001b30:	0800286f 	.word	0x0800286f
 8001b34:	0800286f 	.word	0x0800286f
 8001b38:	08002875 	.word	0x08002875
 8001b3c:	2b5a      	cmp	r3, #90	; 0x5a
 8001b3e:	f000 869b 	beq.w	8002878 <handleCySatPacket+0xde0>
 8001b42:	f000 be94 	b.w	800286e <handleCySatPacket+0xdd6>
        case ADCS_SUBSYSTEM_TYPE: //ADCS

            break;

        case EPS_SUBSYSTEM_TYPE: //EPS
            switch(packet.Command){
 8001b46:	797b      	ldrb	r3, [r7, #5]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	f200 8696 	bhi.w	800287c <handleCySatPacket+0xde4>
 8001b50:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <handleCySatPacket+0xc0>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b9d 	.word	0x08001b9d
 8001b5c:	0800287d 	.word	0x0800287d
 8001b60:	08001c77 	.word	0x08001c77
 8001b64:	0800287d 	.word	0x0800287d
 8001b68:	08001daf 	.word	0x08001daf
 8001b6c:	0800287d 	.word	0x0800287d
 8001b70:	08001ee7 	.word	0x08001ee7
 8001b74:	0800287d 	.word	0x0800287d
 8001b78:	0800201f 	.word	0x0800201f
 8001b7c:	0800287d 	.word	0x0800287d
 8001b80:	08002107 	.word	0x08002107
 8001b84:	0800287d 	.word	0x0800287d
 8001b88:	080022cf 	.word	0x080022cf
 8001b8c:	0800287d 	.word	0x0800287d
 8001b90:	080023f1 	.word	0x080023f1
 8001b94:	0800287d 	.word	0x0800287d
 8001b98:	0800254b 	.word	0x0800254b
                case 0x01: { //Battery Pack Voltage/Current Request
                    float voltage, current;
                    status = READ_EPS_BATTERY_VOLTAGE(&voltage); //read the voltage from the EPS Battery Pack
 8001b9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f92d 	bl	8000e00 <READ_EPS_BATTERY_VOLTAGE>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001bac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <handleCySatPacket+0x124>
                        return -1;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb8:	f000 be62 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATTERY_CURRENT(&current); //read the current from the EPS Battery Pack
 8001bbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f94f 	bl	8000e64 <READ_EPS_BATTERY_CURRENT>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001bcc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <handleCySatPacket+0x144>
                        return -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd8:	f000 be52 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(voltage);
 8001bdc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001be0:	eeb0 0a67 	vmov.f32	s0, s15
 8001be4:	f001 f97a 	bl	8002edc <FloatToUnsigned16bits>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
                    uint16_t data2 = FloatToUnsigned16bits(current);
 8001bee:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	f001 f971 	bl	8002edc <FloatToUnsigned16bits>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8001c00:	231e      	movs	r3, #30
 8001c02:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x00; //Battery Pack Voltage/Current Response
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8001c12:	2004      	movs	r0, #4
 8001c14:	f00d f9f6 	bl	800f004 <malloc>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8001c1c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8001c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8001c36:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c40:	3302      	adds	r3, #2
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8001c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c48:	3303      	adds	r3, #3
 8001c4a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001c52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c5a:	f7ff f85f 	bl	8000d1c <generateCySatChecksum>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    return sendCySatPacket(outgoingPacket); //send the response
 8001c64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c6c:	f7fe ffda 	bl	8000c24 <sendCySatPacket>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f000 be05 	b.w	8002880 <handleCySatPacket+0xde8>
                }
                case 0x03: { //Solar Panel X Status Request
                    float x_voltage, x_neg_current, x_pos_current;
                    status = READ_EPS_SOLAR_X_VOLTAGE(&x_voltage); //read the Solar Panel X axis voltage
 8001c76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f924 	bl	8000ec8 <READ_EPS_SOLAR_X_VOLTAGE>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001c86:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <handleCySatPacket+0x1fe>
                        return -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c92:	f000 bdf5 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current); //read the Solar Panel X- current
 8001c96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f946 	bl	8000f2c <READ_EPS_SOLAR_X_NEG_CURRENT>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001ca6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <handleCySatPacket+0x21e>
                        return -1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb2:	f000 bde5 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current); //read the Solar Panel X+ current
 8001cb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f968 	bl	8000f90 <READ_EPS_SOLAR_X_POS_CURRENT>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001cc6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <handleCySatPacket+0x23e>
                        return -1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd2:	f000 bdd5 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(x_voltage);
 8001cd6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cda:	eeb0 0a67 	vmov.f32	s0, s15
 8001cde:	f001 f8fd 	bl	8002edc <FloatToUnsigned16bits>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                    uint16_t data2 = FloatToUnsigned16bits(x_neg_current);
 8001ce8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cec:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf0:	f001 f8f4 	bl	8002edc <FloatToUnsigned16bits>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                    uint16_t data3 = FloatToUnsigned16bits(x_pos_current);
 8001cfa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001d02:	f001 f8eb 	bl	8002edc <FloatToUnsigned16bits>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8001d0c:	231e      	movs	r3, #30
 8001d0e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x02; //Solar Panel X Status Response
 8001d12:	2302      	movs	r3, #2
 8001d14:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8001d1e:	2006      	movs	r0, #6
 8001d20:	f00d f970 	bl	800f004 <malloc>
 8001d24:	4603      	mov	r3, r0
 8001d26:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8001d28:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8001d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8001d42:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8001d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d54:	3303      	adds	r3, #3
 8001d56:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8001d5e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d68:	3304      	adds	r3, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	3305      	adds	r3, #5
 8001d72:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001d7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d82:	f7fe ffcb 	bl	8000d1c <generateCySatChecksum>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8001d8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d94:	f7fe ff46 	bl	8000c24 <sendCySatPacket>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8001d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001da0:	4618      	mov	r0, r3
 8001da2:	f00d f937 	bl	800f014 <free>
                    return status; //send the response
 8001da6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001daa:	f000 bd69 	b.w	8002880 <handleCySatPacket+0xde8>
                }
                case 0x05: { //Solar Panel Y Status Request
                    float y_voltage, y_neg_current, y_pos_current;
                    status = READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage); //read the Solar Panel Y axis voltage
 8001dae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f91e 	bl	8000ff4 <READ_EPS_SOLAR_Y_VOLTAGE>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001dbe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <handleCySatPacket+0x336>
                        return -1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dca:	f000 bd59 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current); //read the Solar Panel Y- current
 8001dce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f940 	bl	8001058 <READ_EPS_SOLAR_Y_NEG_CURRENT>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001dde:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <handleCySatPacket+0x356>
                        return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dea:	f000 bd49 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current); //read the Solar Panel Y+ current
 8001dee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f962 	bl	80010bc <READ_EPS_SOLAR_Y_POS_CURRENT>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001dfe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <handleCySatPacket+0x376>
                        return -1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e0a:	f000 bd39 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(y_voltage);
 8001e0e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	f001 f861 	bl	8002edc <FloatToUnsigned16bits>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                    uint16_t data2 = FloatToUnsigned16bits(y_neg_current);
 8001e20:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	f001 f858 	bl	8002edc <FloatToUnsigned16bits>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                    uint16_t data3 = FloatToUnsigned16bits(y_pos_current);
 8001e32:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001e36:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3a:	f001 f84f 	bl	8002edc <FloatToUnsigned16bits>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8001e44:	231e      	movs	r3, #30
 8001e46:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x04; //Solar Panel Y Status Response
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8001e50:	2306      	movs	r3, #6
 8001e52:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8001e56:	2006      	movs	r0, #6
 8001e58:	f00d f8d4 	bl	800f004 <malloc>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8001e60:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e70:	3301      	adds	r3, #1
 8001e72:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8001e7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e84:	3302      	adds	r3, #2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8001e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8001e96:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8001ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea8:	3305      	adds	r3, #5
 8001eaa:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001eb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eba:	f7fe ff2f 	bl	8000d1c <generateCySatChecksum>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8001ec4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ec8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ecc:	f7fe feaa 	bl	8000c24 <sendCySatPacket>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8001ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f00d f89b 	bl	800f014 <free>
                    return status; //send the response
 8001ede:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001ee2:	f000 bccd 	b.w	8002880 <handleCySatPacket+0xde8>
                }
                case 0x07: { //Solar Panel Z Status Request
                    float z_voltage, z_neg_current, z_pos_current;
                    status = READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage); //read the Solar Panel Z axis voltage
 8001ee6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f918 	bl	8001120 <READ_EPS_SOLAR_Z_VOLTAGE>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001ef6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <handleCySatPacket+0x46e>
                        return -1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f02:	f000 bcbd 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current); //read the Solar Panel Z- current
 8001f06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f93a 	bl	8001184 <READ_EPS_SOLAR_Z_NEG_CURRENT>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001f16:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <handleCySatPacket+0x48e>
                        return -1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f22:	f000 bcad 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current); //read the Solar Panel Z+ current
 8001f26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f95c 	bl	80011e8 <READ_EPS_SOLAR_Z_POS_CURRENT>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001f36:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <handleCySatPacket+0x4ae>
                        return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f42:	f000 bc9d 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(z_voltage);
 8001f46:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4e:	f000 ffc5 	bl	8002edc <FloatToUnsigned16bits>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
                    uint16_t data2 = FloatToUnsigned16bits(z_neg_current);
 8001f58:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f60:	f000 ffbc 	bl	8002edc <FloatToUnsigned16bits>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                    uint16_t data3 = FloatToUnsigned16bits(z_pos_current);
 8001f6a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f72:	f000 ffb3 	bl	8002edc <FloatToUnsigned16bits>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8001f7c:	231e      	movs	r3, #30
 8001f7e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x06; //Solar Panel Z Status Response
 8001f82:	2306      	movs	r3, #6
 8001f84:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8001f88:	2306      	movs	r3, #6
 8001f8a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8001f8e:	2006      	movs	r0, #6
 8001f90:	f00d f838 	bl	800f004 <malloc>
 8001f94:	4603      	mov	r3, r0
 8001f96:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8001f98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8001fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8001fb2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8001fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8001fce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd8:	3304      	adds	r3, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8001fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe0:	3305      	adds	r3, #5
 8001fe2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001fea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ff2:	f7fe fe93 	bl	8000d1c <generateCySatChecksum>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8001ffc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002000:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002004:	f7fe fe0e 	bl	8000c24 <sendCySatPacket>
 8002008:	4603      	mov	r3, r0
 800200a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 800200e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002010:	4618      	mov	r0, r3
 8002012:	f00c ffff 	bl	800f014 <free>
                    return status; //send the response
 8002016:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800201a:	f000 bc31 	b.w	8002880 <handleCySatPacket+0xde8>
                }
                case 0x09: { //BUS Current Request
                    float current_3, current_5;
                    status = READ_EPS_3V_CURRENT(&current_3); //read the 3.3v BUS current
 800201e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f912 	bl	800124c <READ_EPS_3V_CURRENT>
 8002028:	4603      	mov	r3, r0
 800202a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800202e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <handleCySatPacket+0x5a6>
                        return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800203a:	f000 bc21 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_5V_CURRENT(&current_5); //read the 5v BUS current
 800203e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f934 	bl	80012b0 <READ_EPS_5V_CURRENT>
 8002048:	4603      	mov	r3, r0
 800204a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800204e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <handleCySatPacket+0x5c6>
                        return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205a:	f000 bc11 	b.w	8002880 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(current_3);
 800205e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	f000 ff39 	bl	8002edc <FloatToUnsigned16bits>
 800206a:	4603      	mov	r3, r0
 800206c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
                    uint16_t data2 = FloatToUnsigned16bits(current_5);
 8002070:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	f000 ff30 	bl	8002edc <FloatToUnsigned16bits>
 800207c:	4603      	mov	r3, r0
 800207e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002082:	231e      	movs	r3, #30
 8002084:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x08; //BUS Current Response
 8002088:	2308      	movs	r3, #8
 800208a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 800208e:	2304      	movs	r3, #4
 8002090:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8002094:	2004      	movs	r0, #4
 8002096:	f00c ffb5 	bl	800f004 <malloc>
 800209a:	4603      	mov	r3, r0
 800209c:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 800209e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80020ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ae:	3301      	adds	r3, #1
 80020b0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80020b8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	b29a      	uxth	r2, r3
 80020c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c2:	3302      	adds	r3, #2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80020c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ca:	3303      	adds	r3, #3
 80020cc:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80020d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020dc:	f7fe fe1e 	bl	8000d1c <generateCySatChecksum>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 80020e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020ee:	f7fe fd99 	bl	8000c24 <sendCySatPacket>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 80020f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020fa:	4618      	mov	r0, r3
 80020fc:	f00c ff8a 	bl	800f014 <free>
                    return status; //send the response
 8002100:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002104:	e3bc      	b.n	8002880 <handleCySatPacket+0xde8>
                }
                case 0x0B: { //Temperature Request
                    float mcu_temp, battery1_temp, battery2_temp, battery3_temp, battery4_temp;
                    status = READ_EPS_MCU_TEMP(&mcu_temp); //read the MCU Temperature
 8002106:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f902 	bl	8001314 <READ_EPS_MCU_TEMP>
 8002110:	4603      	mov	r3, r0
 8002112:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002116:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <handleCySatPacket+0x68c>
                        return -1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002122:	e3ad      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_1_TEMP(&battery1_temp); //read the Battery Cell 1 Temperature
 8002124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff f931 	bl	8001390 <READ_EPS_BATT_1_TEMP>
 800212e:	4603      	mov	r3, r0
 8002130:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002134:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <handleCySatPacket+0x6aa>
                        return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002140:	e39e      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_2_TEMP(&battery2_temp); //read the Battery Cell 2 Temperature
 8002142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f954 	bl	80013f4 <READ_EPS_BATT_2_TEMP>
 800214c:	4603      	mov	r3, r0
 800214e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002152:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <handleCySatPacket+0x6c8>
                        return -1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215e:	e38f      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_3_TEMP(&battery3_temp); //read the Battery Cell 3 Temperature
 8002160:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f977 	bl	8001458 <READ_EPS_BATT_3_TEMP>
 800216a:	4603      	mov	r3, r0
 800216c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002170:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <handleCySatPacket+0x6e6>
                        return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800217c:	e380      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_4_TEMP(&battery4_temp); //read the Battery Cell 4 Temperature
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f99a 	bl	80014bc <READ_EPS_BATT_4_TEMP>
 8002188:	4603      	mov	r3, r0
 800218a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800218e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <handleCySatPacket+0x704>
                        return -1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219a:	e371      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(mcu_temp);
 800219c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	f000 fe9a 	bl	8002edc <FloatToUnsigned16bits>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                    uint16_t data2 = FloatToUnsigned16bits(battery1_temp);
 80021ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021b2:	eeb0 0a67 	vmov.f32	s0, s15
 80021b6:	f000 fe91 	bl	8002edc <FloatToUnsigned16bits>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                    uint16_t data3 = FloatToUnsigned16bits(battery2_temp);
 80021c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021c4:	eeb0 0a67 	vmov.f32	s0, s15
 80021c8:	f000 fe88 	bl	8002edc <FloatToUnsigned16bits>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                    uint16_t data4 = FloatToUnsigned16bits(battery3_temp);
 80021d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021d6:	eeb0 0a67 	vmov.f32	s0, s15
 80021da:	f000 fe7f 	bl	8002edc <FloatToUnsigned16bits>
 80021de:	4603      	mov	r3, r0
 80021e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
                    uint16_t data5 = FloatToUnsigned16bits(battery4_temp);
 80021e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021e8:	eeb0 0a67 	vmov.f32	s0, s15
 80021ec:	f000 fe76 	bl	8002edc <FloatToUnsigned16bits>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80021f6:	231e      	movs	r3, #30
 80021f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0A; //Temperature Response
 80021fc:	230a      	movs	r3, #10
 80021fe:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 8002202:	230a      	movs	r3, #10
 8002204:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002208:	200a      	movs	r0, #10
 800220a:	f00c fefb 	bl	800f004 <malloc>
 800220e:	4603      	mov	r3, r0
 8002210:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002212:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	b29a      	uxth	r2, r3
 800221a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002222:	3301      	adds	r3, #1
 8002224:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800222c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	b29a      	uxth	r2, r3
 8002234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002236:	3302      	adds	r3, #2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 800223c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800223e:	3303      	adds	r3, #3
 8002240:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002248:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	b29a      	uxth	r2, r3
 8002250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002252:	3304      	adds	r3, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800225a:	3305      	adds	r3, #5
 800225c:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (data4 & 0xFF00) >> 8;
 8002264:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	b29a      	uxth	r2, r3
 800226c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800226e:	3306      	adds	r3, #6
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = data4 & 0xFF;
 8002274:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002276:	3307      	adds	r3, #7
 8002278:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (data5 & 0xFF00) >> 8;
 8002280:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b29a      	uxth	r2, r3
 8002288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800228a:	3308      	adds	r3, #8
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = data5 & 0xFF;
 8002290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002292:	3309      	adds	r3, #9
 8002294:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800229c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022a4:	f7fe fd3a 	bl	8000d1c <generateCySatChecksum>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 80022ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022b6:	f7fe fcb5 	bl	8000c24 <sendCySatPacket>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 80022c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022c2:	4618      	mov	r0, r3
 80022c4:	f00c fea6 	bl	800f014 <free>
                    return status; //send the response
 80022c8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80022cc:	e2d8      	b.n	8002880 <handleCySatPacket+0xde8>
                }
                case 0x0D: { //Input, Output, and Default Conditions Request
                    uint16_t input, output1, output2, defaults1, defaults2;
                    status = READ_EPS_INPUT_CONDITION(&input); //read the Input Conditions
 80022ce:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f924 	bl	8001520 <READ_EPS_INPUT_CONDITION>
 80022d8:	4603      	mov	r3, r0
 80022da:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80022de:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <handleCySatPacket+0x854>
                        return -1;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ea:	e2c9      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION1(&output1); //read the Output 1 Conditions
 80022ec:	f107 0320 	add.w	r3, r7, #32
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f93a 	bl	800156a <READ_EPS_OUTPUT_CONDITION1>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80022fc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <handleCySatPacket+0x872>
                        return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002308:	e2ba      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION2(&output2); //read the Output 2 Conditions
 800230a:	f107 031e 	add.w	r3, r7, #30
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f950 	bl	80015b4 <READ_EPS_OUTPUT_CONDITION2>
 8002314:	4603      	mov	r3, r0
 8002316:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800231a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <handleCySatPacket+0x890>
                        return -1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002326:	e2ab      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS1(&defaults1); //read the Defaults 1 Conditions
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fa1f 	bl	8001770 <READ_EPS_DEFAULTS1>
 8002332:	4603      	mov	r3, r0
 8002334:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002338:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <handleCySatPacket+0x8ae>
                        return -1;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002344:	e29c      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS2(&defaults2); //read the Defaults 2 Conditions
 8002346:	f107 031a 	add.w	r3, r7, #26
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fa35 	bl	80017ba <READ_EPS_DEFAULTS2>
 8002350:	4603      	mov	r3, r0
 8002352:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002356:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <handleCySatPacket+0x8cc>
                        return -1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002362:	e28d      	b.n	8002880 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002364:	231e      	movs	r3, #30
 8002366:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0C; //Input, Output, and Default Conditions Response
 800236a:	230c      	movs	r3, #12
 800236c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8002370:	2306      	movs	r3, #6
 8002372:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002376:	2006      	movs	r0, #6
 8002378:	f00c fe44 	bl	800f004 <malloc>
 800237c:	4603      	mov	r3, r0
 800237e:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = input & 0xFF;
 8002380:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = (output1 & 0xFF00) >> 8;
 8002388:	8c3b      	ldrh	r3, [r7, #32]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	b29a      	uxth	r2, r3
 800238e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002390:	3301      	adds	r3, #1
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = output1 & 0xFF;
 8002396:	8c3a      	ldrh	r2, [r7, #32]
 8002398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239a:	3302      	adds	r3, #2
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = output2 & 0xFF;
 80023a0:	8bfa      	ldrh	r2, [r7, #30]
 80023a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a4:	3303      	adds	r3, #3
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = defaults1 & 0xFF;
 80023aa:	8bba      	ldrh	r2, [r7, #28]
 80023ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ae:	3304      	adds	r3, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = defaults2 & 0xFF;
 80023b4:	8b7a      	ldrh	r2, [r7, #26]
 80023b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b8:	3305      	adds	r3, #5
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80023be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023c6:	f7fe fca9 	bl	8000d1c <generateCySatChecksum>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 80023d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023d8:	f7fe fc24 	bl	8000c24 <sendCySatPacket>
 80023dc:	4603      	mov	r3, r0
 80023de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 80023e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00c fe15 	bl	800f014 <free>
                    return status; //send the response
 80023ea:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80023ee:	e247      	b.n	8002880 <handleCySatPacket+0xde8>
                }
                case 0x0F: { //Counter Check Request
                    uint16_t power_on, under_voltage, short_circuited, over_temp, charging_cycles;
                    status = READ_EPS_POWER_ON_CYCLES(&power_on); //read the MCU Temperature
 80023f0:	f107 0318 	add.w	r3, r7, #24
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f902 	bl	80015fe <READ_EPS_POWER_ON_CYCLES>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002400:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <handleCySatPacket+0x976>
                        return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240c:	e238      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_UNDER_VOLT_COUNT(&under_voltage); //read the Battery Cell 1 Temperature
 800240e:	f107 0316 	add.w	r3, r7, #22
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f918 	bl	8001648 <READ_EPS_UNDER_VOLT_COUNT>
 8002418:	4603      	mov	r3, r0
 800241a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800241e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <handleCySatPacket+0x994>
                        return -1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800242a:	e229      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SHORT_CIRCUIT_COUNT(&short_circuited); //read the Battery Cell 2 Temperature
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f92e 	bl	8001692 <READ_EPS_SHORT_CIRCUIT_COUNT>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800243c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <handleCySatPacket+0x9b2>
                        return -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002448:	e21a      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OVER_TEMP_COUNT(&over_temp); //read the Battery Cell 3 Temperature
 800244a:	f107 0312 	add.w	r3, r7, #18
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f944 	bl	80016dc <READ_EPS_OVER_TEMP_COUNT>
 8002454:	4603      	mov	r3, r0
 8002456:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800245a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <handleCySatPacket+0x9d0>
                        return -1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002466:	e20b      	b.n	8002880 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_CHARGE_CYCLES(&charging_cycles); //read the Battery Cell 4 Temperature
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff f95a 	bl	8001726 <READ_EPS_CHARGE_CYCLES>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002478:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <handleCySatPacket+0x9ee>
                        return -1;
 8002480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002484:	e1fc      	b.n	8002880 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002486:	231e      	movs	r3, #30
 8002488:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0E; //Temperature Response
 800248c:	230e      	movs	r3, #14
 800248e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 8002492:	230a      	movs	r3, #10
 8002494:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002498:	200a      	movs	r0, #10
 800249a:	f00c fdb3 	bl	800f004 <malloc>
 800249e:	4603      	mov	r3, r0
 80024a0:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (power_on & 0xFF00) >> 8;
 80024a2:	8b3b      	ldrh	r3, [r7, #24]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = power_on & 0xFF;
 80024ae:	8b3a      	ldrh	r2, [r7, #24]
 80024b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b2:	3301      	adds	r3, #1
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (under_voltage & 0xFF00) >> 8;
 80024b8:	8afb      	ldrh	r3, [r7, #22]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	b29a      	uxth	r2, r3
 80024be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c0:	3302      	adds	r3, #2
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = under_voltage & 0xFF;
 80024c6:	8afa      	ldrh	r2, [r7, #22]
 80024c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ca:	3303      	adds	r3, #3
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (short_circuited & 0xFF00) >> 8;
 80024d0:	8abb      	ldrh	r3, [r7, #20]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d8:	3304      	adds	r3, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = short_circuited & 0xFF;
 80024de:	8aba      	ldrh	r2, [r7, #20]
 80024e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e2:	3305      	adds	r3, #5
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (over_temp & 0xFF00) >> 8;
 80024e8:	8a7b      	ldrh	r3, [r7, #18]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f0:	3306      	adds	r3, #6
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = over_temp & 0xFF;
 80024f6:	8a7a      	ldrh	r2, [r7, #18]
 80024f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024fa:	3307      	adds	r3, #7
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (charging_cycles & 0xFF00) >> 8;
 8002500:	8a3b      	ldrh	r3, [r7, #16]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b29a      	uxth	r2, r3
 8002506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002508:	3308      	adds	r3, #8
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = charging_cycles & 0xFF;
 800250e:	8a3a      	ldrh	r2, [r7, #16]
 8002510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002512:	3309      	adds	r3, #9
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002518:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800251c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002520:	f7fe fbfc 	bl	8000d1c <generateCySatChecksum>
 8002524:	4603      	mov	r3, r0
 8002526:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800252a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800252e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002532:	f7fe fb77 	bl	8000c24 <sendCySatPacket>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 800253c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800253e:	4618      	mov	r0, r3
 8002540:	f00c fd68 	bl	800f014 <free>
                    return status; //send the response
 8002544:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002548:	e19a      	b.n	8002880 <handleCySatPacket+0xde8>
                }
                case 0x11: { //Enable/Disable Request
                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800254a:	231e      	movs	r3, #30
 800254c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x10; //Enable/Disable Response
 8002550:	2310      	movs	r3, #16
 8002552:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x01;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t));
 800255c:	2001      	movs	r0, #1
 800255e:	f00c fd51 	bl	800f004 <malloc>
 8002562:	4603      	mov	r3, r0
 8002564:	673b      	str	r3, [r7, #112]	; 0x70
                    if(validateCySatChecksum(packet)==0){
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800256c:	f7fe fc0b 	bl	8000d86 <validateCySatChecksum>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <handleCySatPacket+0xae6>
                        outgoingPacket.Data[0] = 0;
 8002576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e15e      	b.n	800283c <handleCySatPacket+0xda4>
                    }
                    else{
                        switch(packet.Data[0]){
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3b01      	subs	r3, #1
 8002584:	2b0e      	cmp	r3, #14
 8002586:	f200 8159 	bhi.w	800283c <handleCySatPacket+0xda4>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <handleCySatPacket+0xaf8>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025cd 	.word	0x080025cd
 8002594:	0800283d 	.word	0x0800283d
 8002598:	0800283d 	.word	0x0800283d
 800259c:	08002601 	.word	0x08002601
 80025a0:	0800283d 	.word	0x0800283d
 80025a4:	08002635 	.word	0x08002635
 80025a8:	08002669 	.word	0x08002669
 80025ac:	0800269d 	.word	0x0800269d
 80025b0:	080026d1 	.word	0x080026d1
 80025b4:	08002705 	.word	0x08002705
 80025b8:	08002739 	.word	0x08002739
 80025bc:	0800276d 	.word	0x0800276d
 80025c0:	080027a1 	.word	0x080027a1
 80025c4:	080027d5 	.word	0x080027d5
 80025c8:	08002809 	.word	0x08002809
                            case 0x01:{ //Enable/Disable Battery BUS
                                if(packet.Data[1] == 0){
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	3301      	adds	r3, #1
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <handleCySatPacket+0xb4a>
                                    outgoingPacket.Data[0] = disable_EPS_Vbatt_Bus();
 80025d6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80025d8:	f7ff f91d 	bl	8001816 <disable_EPS_Vbatt_Bus>
 80025dc:	4603      	mov	r3, r0
 80025de:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80025e0:	e12c      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	3301      	adds	r3, #1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <handleCySatPacket+0xb60>
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
 80025ec:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80025ee:	f7ff f909 	bl	8001804 <enable_EPS_Vbatt_Bus>
 80025f2:	4603      	mov	r3, r0
 80025f4:	7023      	strb	r3, [r4, #0]
                                break;
 80025f6:	e121      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80025f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
                                break;
 80025fe:	e11d      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x04:{ //Enable/Disable 5v BUS
                                if(packet.Data[1] == 0){
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3301      	adds	r3, #1
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <handleCySatPacket+0xb7e>
                                    outgoingPacket.Data[0] = disable_EPS_5v_Bus();
 800260a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800260c:	f7ff f915 	bl	800183a <disable_EPS_5v_Bus>
 8002610:	4603      	mov	r3, r0
 8002612:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002614:	e112      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <handleCySatPacket+0xb94>
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
 8002620:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002622:	f7ff f901 	bl	8001828 <enable_EPS_5v_Bus>
 8002626:	4603      	mov	r3, r0
 8002628:	7023      	strb	r3, [r4, #0]
                                break;
 800262a:	e107      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 800262c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
                                break;
 8002632:	e103      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x06:{ //Enable/Disable Fast/Slow Battery Charge 1
                                if(packet.Data[1] == 0){
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	3301      	adds	r3, #1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <handleCySatPacket+0xbb2>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge1();
 800263e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002640:	f7ff f90d 	bl	800185e <disable_EPS_Fast_Charge1>
 8002644:	4603      	mov	r3, r0
 8002646:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002648:	e0f8      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3301      	adds	r3, #1
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <handleCySatPacket+0xbc8>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
 8002654:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002656:	f7ff f8f9 	bl	800184c <enable_EPS_Fast_Charge1>
 800265a:	4603      	mov	r3, r0
 800265c:	7023      	strb	r3, [r4, #0]
                                break;
 800265e:	e0ed      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
                                break;
 8002666:	e0e9      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x07:{ //Enable/Disable Fast/Slow Battery Charge 2
                                if(packet.Data[1] == 0){
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	3301      	adds	r3, #1
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d105      	bne.n	800267e <handleCySatPacket+0xbe6>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge2();
 8002672:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002674:	f7ff f905 	bl	8001882 <disable_EPS_Fast_Charge2>
 8002678:	4603      	mov	r3, r0
 800267a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800267c:	e0de      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <handleCySatPacket+0xbfc>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
 8002688:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800268a:	f7ff f8f1 	bl	8001870 <enable_EPS_Fast_Charge2>
 800268e:	4603      	mov	r3, r0
 8002690:	7023      	strb	r3, [r4, #0]
                                break;
 8002692:	e0d3      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
                                break;
 800269a:	e0cf      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x08:{ //Enable/Disable Out1/Boost Board
                                if(packet.Data[1] == 0){
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	3301      	adds	r3, #1
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <handleCySatPacket+0xc1a>
                                    outgoingPacket.Data[0] = disable_EPS_Output_1();
 80026a6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80026a8:	f7ff f8fd 	bl	80018a6 <disable_EPS_Output_1>
 80026ac:	4603      	mov	r3, r0
 80026ae:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80026b0:	e0c4      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3301      	adds	r3, #1
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <handleCySatPacket+0xc30>
                                    outgoingPacket.Data[0] = enable_EPS_Output_1();
 80026bc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80026be:	f7ff f8e9 	bl	8001894 <enable_EPS_Output_1>
 80026c2:	4603      	mov	r3, r0
 80026c4:	7023      	strb	r3, [r4, #0]
                                break;
 80026c6:	e0b9      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80026c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
                                break;
 80026ce:	e0b5      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x09:{ //Enable/Disable Out2
                                if(packet.Data[1] == 0){
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	3301      	adds	r3, #1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d105      	bne.n	80026e6 <handleCySatPacket+0xc4e>
                                    outgoingPacket.Data[0] = disable_EPS_Output_2();
 80026da:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80026dc:	f7ff f8f5 	bl	80018ca <disable_EPS_Output_2>
 80026e0:	4603      	mov	r3, r0
 80026e2:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80026e4:	e0aa      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	3301      	adds	r3, #1
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <handleCySatPacket+0xc64>
                                    outgoingPacket.Data[0] = enable_EPS_Output_2();
 80026f0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80026f2:	f7ff f8e1 	bl	80018b8 <enable_EPS_Output_2>
 80026f6:	4603      	mov	r3, r0
 80026f8:	7023      	strb	r3, [r4, #0]
                                break;
 80026fa:	e09f      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80026fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
                                break;
 8002702:	e09b      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x0A:{ //Enable/Disable Out3
                                if(packet.Data[1] == 0){
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3301      	adds	r3, #1
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <handleCySatPacket+0xc82>
                                    outgoingPacket.Data[0] = disable_EPS_Output_3();
 800270e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002710:	f7ff f8ed 	bl	80018ee <disable_EPS_Output_3>
 8002714:	4603      	mov	r3, r0
 8002716:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002718:	e090      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3301      	adds	r3, #1
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <handleCySatPacket+0xc98>
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
 8002724:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002726:	f7ff f8d9 	bl	80018dc <enable_EPS_Output_3>
 800272a:	4603      	mov	r3, r0
 800272c:	7023      	strb	r3, [r4, #0]
                                break;
 800272e:	e085      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
                                break;
 8002736:	e081      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x0B:{ //Enable/Disable Out5/UHF
                                if(packet.Data[1] == 0){
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3301      	adds	r3, #1
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <handleCySatPacket+0xcb6>
                                    outgoingPacket.Data[0] = disable_EPS_Output_5();
 8002742:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002744:	f7ff f8e5 	bl	8001912 <disable_EPS_Output_5>
 8002748:	4603      	mov	r3, r0
 800274a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_5();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800274c:	e076      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3301      	adds	r3, #1
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <handleCySatPacket+0xccc>
                                    outgoingPacket.Data[0] = enable_EPS_Output_5();
 8002758:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800275a:	f7ff f8d1 	bl	8001900 <enable_EPS_Output_5>
 800275e:	4603      	mov	r3, r0
 8002760:	7023      	strb	r3, [r4, #0]
                                break;
 8002762:	e06b      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
                                break;
 800276a:	e067      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x0C:{ //Enable/Disable Out6
                                if(packet.Data[1] == 0){
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	3301      	adds	r3, #1
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <handleCySatPacket+0xcea>
                                    outgoingPacket.Data[0] = disable_EPS_Output_6();
 8002776:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002778:	f7ff f8dd 	bl	8001936 <disable_EPS_Output_6>
 800277c:	4603      	mov	r3, r0
 800277e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002780:	e05c      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3301      	adds	r3, #1
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <handleCySatPacket+0xd00>
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
 800278c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800278e:	f7ff f8c9 	bl	8001924 <enable_EPS_Output_6>
 8002792:	4603      	mov	r3, r0
 8002794:	7023      	strb	r3, [r4, #0]
                                break;
 8002796:	e051      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
                                break;
 800279e:	e04d      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x0D:{ //Enable/Disable Heater 1
                                if(packet.Data[1] == 0){
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	3301      	adds	r3, #1
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <handleCySatPacket+0xd1e>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_1();
 80027aa:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80027ac:	f7ff f8d5 	bl	800195a <disable_EPS_Batt_Heater_1>
 80027b0:	4603      	mov	r3, r0
 80027b2:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80027b4:	e042      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3301      	adds	r3, #1
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d105      	bne.n	80027cc <handleCySatPacket+0xd34>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
 80027c0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80027c2:	f7ff f8c1 	bl	8001948 <enable_EPS_Batt_Heater_1>
 80027c6:	4603      	mov	r3, r0
 80027c8:	7023      	strb	r3, [r4, #0]
                                break;
 80027ca:	e037      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80027cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
                                break;
 80027d2:	e033      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x0E:{ //Enable/Disable Heater 2
                                if(packet.Data[1] == 0){
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	3301      	adds	r3, #1
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <handleCySatPacket+0xd52>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_2();
 80027de:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80027e0:	f7ff f8cd 	bl	800197e <disable_EPS_Batt_Heater_2>
 80027e4:	4603      	mov	r3, r0
 80027e6:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80027e8:	e028      	b.n	800283c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <handleCySatPacket+0xd68>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
 80027f4:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80027f6:	f7ff f8b9 	bl	800196c <enable_EPS_Batt_Heater_2>
 80027fa:	4603      	mov	r3, r0
 80027fc:	7023      	strb	r3, [r4, #0]
                                break;
 80027fe:	e01d      	b.n	800283c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
                                break;
 8002806:	e019      	b.n	800283c <handleCySatPacket+0xda4>
                            }
                            case 0x0F:{ //Enable/Disable Heater 3
                                if(packet.Data[1] == 0){
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	3301      	adds	r3, #1
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <handleCySatPacket+0xd86>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_3();
 8002812:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002814:	f7ff f8c5 	bl	80019a2 <disable_EPS_Batt_Heater_3>
 8002818:	4603      	mov	r3, r0
 800281a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800281c:	e00d      	b.n	800283a <handleCySatPacket+0xda2>
                                else if(packet.Data[1] == 1){
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3301      	adds	r3, #1
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <handleCySatPacket+0xd9c>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
 8002828:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800282a:	f7ff f8b1 	bl	8001990 <enable_EPS_Batt_Heater_3>
 800282e:	4603      	mov	r3, r0
 8002830:	7023      	strb	r3, [r4, #0]
                                break;
 8002832:	e002      	b.n	800283a <handleCySatPacket+0xda2>
                                    outgoingPacket.Data[0] = 0x00;
 8002834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
                                break;
 800283a:	bf00      	nop
                            }
                        }
                    }
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800283c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002840:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002844:	f7fe fa6a 	bl	8000d1c <generateCySatChecksum>
 8002848:	4603      	mov	r3, r0
 800284a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800284e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002852:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002856:	f7fe f9e5 	bl	8000c24 <sendCySatPacket>
 800285a:	4603      	mov	r3, r0
 800285c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002862:	4618      	mov	r0, r3
 8002864:	f00c fbd6 	bl	800f014 <free>
                    return status; //send the response
 8002868:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800286c:	e008      	b.n	8002880 <handleCySatPacket+0xde8>
        case EOL_SUBSYSTEM_TYPE: //End of Life

            break;

        default:
            return -1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002872:	e005      	b.n	8002880 <handleCySatPacket+0xde8>
            break;
 8002874:	bf00      	nop
 8002876:	e002      	b.n	800287e <handleCySatPacket+0xde6>
            break;
 8002878:	bf00      	nop
 800287a:	e000      	b.n	800287e <handleCySatPacket+0xde6>
            break;
 800287c:	bf00      	nop
    }

    return 0;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	37a4      	adds	r7, #164	; 0xa4
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}

08002888 <TAKE_MEASUREMENT>:
 * @brief Commands the payload to take a measurement
 *
 * @param time: The time that the measurement will take place for
 * @param measurement_tatus: The status of taking the measurement. (0=error, 1=success)
 */
HAL_StatusTypeDef TAKE_MEASUREMENT(uint16_t time){
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
    CySat_Packet_t packet;
    packet.Subsystem_Type = PAYLOAD_SUBSYSTEM_TYPE;
 8002892:	2328      	movs	r3, #40	; 0x28
 8002894:	763b      	strb	r3, [r7, #24]
    packet.Command = 0x19;
 8002896:	2319      	movs	r3, #25
 8002898:	767b      	strb	r3, [r7, #25]
    packet.Data_Length = 2;
 800289a:	2302      	movs	r3, #2
 800289c:	76bb      	strb	r3, [r7, #26]
    uint8_t data[2];
    convert_to_bytes(data, time, 2);
 800289e:	88f9      	ldrh	r1, [r7, #6]
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2202      	movs	r2, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fa66 	bl	8002d78 <convert_to_bytes>
    packet.Data = data;
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	61fb      	str	r3, [r7, #28]
    packet.Checksum = generateCySatChecksum(packet);
 80028b2:	f107 0318 	add.w	r3, r7, #24
 80028b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ba:	f7fe fa2f 	bl	8000d1c <generateCySatChecksum>
 80028be:	4603      	mov	r3, r0
 80028c0:	f887 3020 	strb.w	r3, [r7, #32]
    HAL_StatusTypeDef status = sendCySatPacket(packet);
 80028c4:	f107 0318 	add.w	r3, r7, #24
 80028c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028cc:	f7fe f9aa 	bl	8000c24 <sendCySatPacket>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(status != HAL_OK){
 80028d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <TAKE_MEASUREMENT+0x5c>
        return status;
 80028de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e2:	e03e      	b.n	8002962 <TAKE_MEASUREMENT+0xda>
    }
    HAL_Delay(time*1000);
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fbfa 	bl	80030e8 <HAL_Delay>
    uint8_t data_ptr[6];
    status = HAL_UART_Receive(&huart6, data_ptr, 6, PAYLOAD_UART_TIMEOUT);
 80028f4:	f107 010c 	add.w	r1, r7, #12
 80028f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80028fc:	2206      	movs	r2, #6
 80028fe:	481b      	ldr	r0, [pc, #108]	; (800296c <TAKE_MEASUREMENT+0xe4>)
 8002900:	f004 fd5c 	bl	80073bc <HAL_UART_Receive>
 8002904:	4603      	mov	r3, r0
 8002906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(status != HAL_OK){
 800290a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <TAKE_MEASUREMENT+0x90>
        return status;
 8002912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002916:	e024      	b.n	8002962 <TAKE_MEASUREMENT+0xda>
    }
    packet = parseCySatPacket(data_ptr);
 8002918:	f107 0318 	add.w	r3, r7, #24
 800291c:	f107 020c 	add.w	r2, r7, #12
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f950 	bl	8000bc8 <parseCySatPacket>
    if(packet.Data[0] != 1)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <TAKE_MEASUREMENT+0xac>
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e016      	b.n	8002962 <TAKE_MEASUREMENT+0xda>
    else if(packet.Subsystem_Type != PAYLOAD_SUBSYSTEM_TYPE)
 8002934:	7e3b      	ldrb	r3, [r7, #24]
 8002936:	2b28      	cmp	r3, #40	; 0x28
 8002938:	d001      	beq.n	800293e <TAKE_MEASUREMENT+0xb6>
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e011      	b.n	8002962 <TAKE_MEASUREMENT+0xda>
    else if(packet.Command != 0x18)
 800293e:	7e7b      	ldrb	r3, [r7, #25]
 8002940:	2b18      	cmp	r3, #24
 8002942:	d001      	beq.n	8002948 <TAKE_MEASUREMENT+0xc0>
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e00c      	b.n	8002962 <TAKE_MEASUREMENT+0xda>
    else if(validateCySatChecksum(packet) != 1)
 8002948:	f107 0318 	add.w	r3, r7, #24
 800294c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002950:	f7fe fa19 	bl	8000d86 <validateCySatChecksum>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <TAKE_MEASUREMENT+0xd6>
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e001      	b.n	8002962 <TAKE_MEASUREMENT+0xda>
    return status;
 800295e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002962:	4618      	mov	r0, r3
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200080d4 	.word	0x200080d4

08002970 <FILE_TRANSFER>:
/**
 * @brief Private function to transfer file type
 *
 * @param file_type: 0 = dat file and 1 = kelvin file
 */
HAL_StatusTypeDef FILE_TRANSFER(int file_type){
 8002970:	b5b0      	push	{r4, r5, r7, lr}
 8002972:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8002976:	af00      	add	r7, sp, #0
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	6018      	str	r0, [r3, #0]
 800297e:	466b      	mov	r3, sp
 8002980:	461d      	mov	r5, r3
    // Start transfer request to payload
    CySat_Packet_t packet;
    packet.Subsystem_Type = PAYLOAD_SUBSYSTEM_TYPE;
 8002982:	2328      	movs	r3, #40	; 0x28
 8002984:	f887 348c 	strb.w	r3, [r7, #1164]	; 0x48c
    packet.Command = 0x1B;
 8002988:	231b      	movs	r3, #27
 800298a:	f887 348d 	strb.w	r3, [r7, #1165]	; 0x48d
    packet.Data_Length = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 348e 	strb.w	r3, [r7, #1166]	; 0x48e
    packet.Data = &file_type;
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
    packet.Checksum = generateCySatChecksum(packet);
 800299c:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 80029a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029a4:	f7fe f9ba 	bl	8000d1c <generateCySatChecksum>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f887 3494 	strb.w	r3, [r7, #1172]	; 0x494
    HAL_StatusTypeDef status = sendCySatPacket(packet);
 80029ae:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 80029b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029b6:	f7fe f935 	bl	8000c24 <sendCySatPacket>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
    if(status != HAL_OK){
 80029c0:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <FILE_TRANSFER+0x5e>
        return status;
 80029c8:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80029cc:	e139      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
    }
    // Start transfer response with file size
    uint8_t data_ptr[8];
    status = HAL_UART_Receive(&huart6, data_ptr, 8, PAYLOAD_UART_TIMEOUT);
 80029ce:	f207 4184 	addw	r1, r7, #1156	; 0x484
 80029d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80029d6:	2208      	movs	r2, #8
 80029d8:	489d      	ldr	r0, [pc, #628]	; (8002c50 <FILE_TRANSFER+0x2e0>)
 80029da:	f004 fcef 	bl	80073bc <HAL_UART_Receive>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
    if(status != HAL_OK){
 80029e4:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <FILE_TRANSFER+0x82>
        return status;
 80029ec:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80029f0:	e127      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
    }
    packet = parseCySatPacket(data_ptr);
 80029f2:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 80029f6:	f207 4284 	addw	r2, r7, #1156	; 0x484
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe f8e3 	bl	8000bc8 <parseCySatPacket>
    if(packet.Subsystem_Type != PAYLOAD_SUBSYSTEM_TYPE)
 8002a02:	f897 348c 	ldrb.w	r3, [r7, #1164]	; 0x48c
 8002a06:	2b28      	cmp	r3, #40	; 0x28
 8002a08:	d001      	beq.n	8002a0e <FILE_TRANSFER+0x9e>
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e119      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
    else if(packet.Command != 0x1A)
 8002a0e:	f897 348d 	ldrb.w	r3, [r7, #1165]	; 0x48d
 8002a12:	2b1a      	cmp	r3, #26
 8002a14:	d001      	beq.n	8002a1a <FILE_TRANSFER+0xaa>
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e113      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
    else if(validateCySatChecksum(packet) != 1)
 8002a1a:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002a1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a22:	f7fe f9b0 	bl	8000d86 <validateCySatChecksum>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d001      	beq.n	8002a30 <FILE_TRANSFER+0xc0>
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e108      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
    int file_size = convert_to_int(packet.Data, 3);
 8002a30:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8002a34:	2103      	movs	r1, #3
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f926 	bl	8002c88 <convert_to_int>
 8002a3c:	f8c7 04a0 	str.w	r0, [r7, #1184]	; 0x4a0

    // Transfer of data occurs
    uint8_t data[file_size];
 8002a40:	f8d7 44a0 	ldr.w	r4, [r7, #1184]	; 0x4a0
 8002a44:	1e63      	subs	r3, r4, #1
 8002a46:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f04f 0100 	mov.w	r1, #0
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	00cb      	lsls	r3, r1, #3
 8002a5c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a60:	00c2      	lsls	r2, r0, #3
 8002a62:	4623      	mov	r3, r4
 8002a64:	4618      	mov	r0, r3
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	00cb      	lsls	r3, r1, #3
 8002a74:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a78:	00c2      	lsls	r2, r0, #3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	3307      	adds	r3, #7
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	ebad 0d03 	sub.w	sp, sp, r3
 8002a86:	466b      	mov	r3, sp
 8002a88:	3300      	adds	r3, #0
 8002a8a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
    status = HAL_UART_Receive(&huart6, data, file_size, PAYLOAD_UART_TIMEOUT*file_size);
 8002a8e:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8002a92:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8002a9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002aa0:	fb00 f303 	mul.w	r3, r0, r3
 8002aa4:	486a      	ldr	r0, [pc, #424]	; (8002c50 <FILE_TRANSFER+0x2e0>)
 8002aa6:	f004 fc89 	bl	80073bc <HAL_UART_Receive>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
    if(status != HAL_OK){
 8002ab0:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <FILE_TRANSFER+0x14e>
        return status;
 8002ab8:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8002abc:	e0c1      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
    }

    // File checksum arrives in CySat packet
    uint8_t checksum_data[6];
    status = HAL_UART_Receive(&huart6, checksum_data, 6, PAYLOAD_UART_TIMEOUT);
 8002abe:	f207 417c 	addw	r1, r7, #1148	; 0x47c
 8002ac2:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ac6:	2206      	movs	r2, #6
 8002ac8:	4861      	ldr	r0, [pc, #388]	; (8002c50 <FILE_TRANSFER+0x2e0>)
 8002aca:	f004 fc77 	bl	80073bc <HAL_UART_Receive>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
    if(status != HAL_OK){
 8002ad4:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <FILE_TRANSFER+0x172>
        return status;
 8002adc:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8002ae0:	e0af      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
    }
    packet = parseCySatPacket(checksum_data);
 8002ae2:	463b      	mov	r3, r7
 8002ae4:	f207 427c 	addw	r2, r7, #1148	; 0x47c
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe f86c 	bl	8000bc8 <parseCySatPacket>
 8002af0:	463a      	mov	r2, r7
 8002af2:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002af6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002af8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(packet.Subsystem_Type != PAYLOAD_SUBSYSTEM_TYPE)
 8002afc:	f897 348c 	ldrb.w	r3, [r7, #1164]	; 0x48c
 8002b00:	2b28      	cmp	r3, #40	; 0x28
 8002b02:	d001      	beq.n	8002b08 <FILE_TRANSFER+0x198>
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e09c      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
    else if(packet.Command != 0x1C)
 8002b08:	f897 348d 	ldrb.w	r3, [r7, #1165]	; 0x48d
 8002b0c:	2b1c      	cmp	r3, #28
 8002b0e:	d001      	beq.n	8002b14 <FILE_TRANSFER+0x1a4>
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e096      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
    else if(validateCySatChecksum(packet) != 1)
 8002b14:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002b18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b1c:	f7fe f933 	bl	8000d86 <validateCySatChecksum>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d001      	beq.n	8002b2a <FILE_TRANSFER+0x1ba>
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e08b      	b.n	8002c42 <FILE_TRANSFER+0x2d2>

    // Validate file checksum
    uint32_t byte_sum;
    for(int i = 0; i < file_size; i++){
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8002b30:	e010      	b.n	8002b54 <FILE_TRANSFER+0x1e4>
        byte_sum += data[i];
 8002b32:	f8d7 2498 	ldr.w	r2, [r7, #1176]	; 0x498
 8002b36:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8002b44:	4413      	add	r3, r2
 8002b46:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
    for(int i = 0; i < file_size; i++){
 8002b4a:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8002b54:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8002b58:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	dbe8      	blt.n	8002b32 <FILE_TRANSFER+0x1c2>
    }



    if(packet.Data[0] == (0xFF - (byte_sum & 0xFF))){
 8002b60:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d165      	bne.n	8002c40 <FILE_TRANSFER+0x2d0>
        //Transfer data to computer for debugging
        for(int i = 0; i < file_size; i++){
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 8002b7a:	e00e      	b.n	8002b9a <FILE_TRANSFER+0x22a>
            debug_printf("%d", data[i]);
 8002b7c:	f8d7 2498 	ldr.w	r2, [r7, #1176]	; 0x498
 8002b80:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 8002b84:	4413      	add	r3, r2
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4832      	ldr	r0, [pc, #200]	; (8002c54 <FILE_TRANSFER+0x2e4>)
 8002b8c:	f000 f940 	bl	8002e10 <debug_printf>
        for(int i = 0; i < file_size; i++){
 8002b90:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 8002b94:	3301      	adds	r3, #1
 8002b96:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 8002b9a:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 8002b9e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dbea      	blt.n	8002b7c <FILE_TRANSFER+0x20c>
        FATFS FatFs; //Fatfs handle
        FIL fil; //File handle
        FRESULT fres; //Result after operations

        //Open the file system
        fres = f_mount(&FatFs, "0", 1);
 8002ba6:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002baa:	2201      	movs	r2, #1
 8002bac:	492a      	ldr	r1, [pc, #168]	; (8002c58 <FILE_TRANSFER+0x2e8>)
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f008 fdf0 	bl	800b794 <f_mount>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
        if(fres != FR_OK){
 8002bba:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <FILE_TRANSFER+0x256>
            return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e03d      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
        }
        if(file_type == 0)
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <FILE_TRANSFER+0x276>
            fres = f_open(&fil, "test_dat.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002bd0:	f107 0318 	add.w	r3, r7, #24
 8002bd4:	221a      	movs	r2, #26
 8002bd6:	4921      	ldr	r1, [pc, #132]	; (8002c5c <FILE_TRANSFER+0x2ec>)
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f008 fe43 	bl	800b864 <f_open>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
 8002be4:	e009      	b.n	8002bfa <FILE_TRANSFER+0x28a>
        else
            fres = f_open(&fil, "test_kelvin.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002be6:	f107 0318 	add.w	r3, r7, #24
 8002bea:	221a      	movs	r2, #26
 8002bec:	491c      	ldr	r1, [pc, #112]	; (8002c60 <FILE_TRANSFER+0x2f0>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f008 fe38 	bl	800b864 <f_open>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
        if(fres != FR_OK){
 8002bfa:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <FILE_TRANSFER+0x296>
            return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e01d      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
        }
        UINT bytes;
        fres = f_write(&fil, (char*)data, (UINT)file_size, &bytes);
 8002c06:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8002c0a:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8002c0e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002c12:	f107 0018 	add.w	r0, r7, #24
 8002c16:	f009 f83a 	bl	800bc8e <f_write>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
        if(fres != FR_OK || bytes!= file_size){
 8002c20:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8002c24:	2b00      	cmp	r3, #0
            //status = HAL_ERROR;
        }
        f_close(&fil); //Close the file
 8002c26:	f107 0318 	add.w	r3, r7, #24
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f009 faef 	bl	800c20e <f_close>
        f_mount(NULL, "", 0); //De-mount the drive
 8002c30:	2200      	movs	r2, #0
 8002c32:	490c      	ldr	r1, [pc, #48]	; (8002c64 <FILE_TRANSFER+0x2f4>)
 8002c34:	2000      	movs	r0, #0
 8002c36:	f008 fdad 	bl	800b794 <f_mount>
    }
    else{
        return HAL_ERROR;
    }
    return status;
 8002c3a:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8002c3e:	e000      	b.n	8002c42 <FILE_TRANSFER+0x2d2>
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	46ad      	mov	sp, r5
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200080d4 	.word	0x200080d4
 8002c54:	08012d98 	.word	0x08012d98
 8002c58:	08012d9c 	.word	0x08012d9c
 8002c5c:	08012da0 	.word	0x08012da0
 8002c60:	08012db0 	.word	0x08012db0
 8002c64:	08012dc0 	.word	0x08012dc0

08002c68 <DAT_FILE_TRANSFER>:

/**
 * @brief Commands the payload to transfer the DAT file
 *
 */
HAL_StatusTypeDef DAT_FILE_TRANSFER(){
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
    return FILE_TRANSFER(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff fe7f 	bl	8002970 <FILE_TRANSFER>
 8002c72:	4603      	mov	r3, r0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <KELVIN_FILE_TRANSFER>:

/**
 * @brief Commands the payload to transfer the KELVIN file
 *
 */
HAL_StatusTypeDef KELVIN_FILE_TRANSFER(){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
    return FILE_TRANSFER(0x01);
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f7ff fe77 	bl	8002970 <FILE_TRANSFER>
 8002c82:	4603      	mov	r3, r0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <convert_to_int>:
/**
 * @brief Converts an array of bytes(little endian) to int
 * @param data_ptr: A pointer to the array of bytes
 * @param length : The length of the array
 */
int convert_to_int(uint8_t* data_ptr, int length){
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
    int result = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
    int index = length - 1;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < length; i++){
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e036      	b.n	8002d10 <convert_to_int+0x88>
        result += data_ptr[i] * pow(2, 8*index);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc4a 	bl	8000544 <__aeabi_i2d>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc43 	bl	8000544 <__aeabi_i2d>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	ec43 2b11 	vmov	d1, r2, r3
 8002cc6:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8002d70 <convert_to_int+0xe8>
 8002cca:	f00f f859 	bl	8011d80 <pow>
 8002cce:	ec53 2b10 	vmov	r2, r3, d0
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f7fd fc9f 	bl	8000618 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4614      	mov	r4, r2
 8002ce0:	461d      	mov	r5, r3
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7fd fc2e 	bl	8000544 <__aeabi_i2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4620      	mov	r0, r4
 8002cee:	4629      	mov	r1, r5
 8002cf0:	f7fd fadc 	bl	80002ac <__adddf3>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7fd ff3c 	bl	8000b78 <__aeabi_d2iz>
 8002d00:	4603      	mov	r3, r0
 8002d02:	617b      	str	r3, [r7, #20]
        index--;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	613b      	str	r3, [r7, #16]
    for(int i = 0; i < length; i++){
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	dbc4      	blt.n	8002ca2 <convert_to_int+0x1a>
    }
    if(data_ptr[0] & 0x80)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	da1f      	bge.n	8002d62 <convert_to_int+0xda>
        return result - pow(2,8*length);
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7fd fc0e 	bl	8000544 <__aeabi_i2d>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	460d      	mov	r5, r1
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fc07 	bl	8000544 <__aeabi_i2d>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	ec43 2b11 	vmov	d1, r2, r3
 8002d3e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8002d70 <convert_to_int+0xe8>
 8002d42:	f00f f81d 	bl	8011d80 <pow>
 8002d46:	ec53 2b10 	vmov	r2, r3, d0
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f7fd faab 	bl	80002a8 <__aeabi_dsub>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fd ff0d 	bl	8000b78 <__aeabi_d2iz>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	e000      	b.n	8002d64 <convert_to_int+0xdc>
    return result;
 8002d62:	697b      	ldr	r3, [r7, #20]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6c:	f3af 8000 	nop.w
 8002d70:	00000000 	.word	0x00000000
 8002d74:	40000000 	.word	0x40000000

08002d78 <convert_to_bytes>:
 * @brief Converts an int to an array of bytes(little endian)
 * @param data: A pointer to the array of bytes that will be returned
 * @param num: The integer that is being converted
 * @param length : The length of the array that will be returned
 */
void convert_to_bytes(uint8_t* data, int num, int length){
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
    if (num < 0)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da1f      	bge.n	8002dca <convert_to_bytes+0x52>
        num += pow(2, 8*length);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fbd8 	bl	8000544 <__aeabi_i2d>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	ec43 2b11 	vmov	d1, r2, r3
 8002d9c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002e08 <convert_to_bytes+0x90>
 8002da0:	f00e ffee 	bl	8011d80 <pow>
 8002da4:	ec55 4b10 	vmov	r4, r5, d0
 8002da8:	68b8      	ldr	r0, [r7, #8]
 8002daa:	f7fd fbcb 	bl	8000544 <__aeabi_i2d>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4620      	mov	r0, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	f7fd fa79 	bl	80002ac <__adddf3>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd fed9 	bl	8000b78 <__aeabi_d2iz>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	60bb      	str	r3, [r7, #8]
    int index = length - 1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < length; i++){
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e00f      	b.n	8002df6 <convert_to_bytes+0x7e>
        data[i] = (num >> (index*8)) & 0xFF;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	fa42 f103 	asr.w	r1, r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	b2ca      	uxtb	r2, r1
 8002de8:	701a      	strb	r2, [r3, #0]
        index--;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < length; i++){
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	3301      	adds	r3, #1
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	dbeb      	blt.n	8002dd6 <convert_to_bytes+0x5e>
    }
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bdb0      	pop	{r4, r5, r7, pc}
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	40000000 	.word	0x40000000

08002e10 <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 8002e10:	b40f      	push	{r0, r1, r2, r3}
 8002e12:	b5b0      	push	{r4, r5, r7, lr}
 8002e14:	b088      	sub	sp, #32
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	466b      	mov	r3, sp
 8002e1a:	461d      	mov	r5, r3

    uint32_t bufferSize = 512;
 8002e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e20:	61bb      	str	r3, [r7, #24]
    uint8_t formatBuffer[bufferSize];
 8002e22:	69bc      	ldr	r4, [r7, #24]
 8002e24:	4623      	mov	r3, r4
 8002e26:	3b01      	subs	r3, #1
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f04f 0100 	mov.w	r1, #0
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	00cb      	lsls	r3, r1, #3
 8002e3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e3e:	00c2      	lsls	r2, r0, #3
 8002e40:	4620      	mov	r0, r4
 8002e42:	f04f 0100 	mov.w	r1, #0
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	00cb      	lsls	r3, r1, #3
 8002e50:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e54:	00c2      	lsls	r2, r0, #3
 8002e56:	1de3      	adds	r3, r4, #7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	ebad 0d03 	sub.w	sp, sp, r3
 8002e60:	466b      	mov	r3, sp
 8002e62:	3300      	adds	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]

    va_list args;
    va_start(args, format);
 8002e66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e6a:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 8002e6c:	6938      	ldr	r0, [r7, #16]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e72:	69b9      	ldr	r1, [r7, #24]
 8002e74:	f00c fe3c 	bl	800faf0 <vsniprintf>
 8002e78:	60f8      	str	r0, [r7, #12]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	77fb      	strb	r3, [r7, #31]
    if (len > 0) {
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	dd1b      	ble.n	8002ebc <debug_printf+0xac>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 8002e84:	6939      	ldr	r1, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e8e:	4811      	ldr	r0, [pc, #68]	; (8002ed4 <debug_printf+0xc4>)
 8002e90:	f004 f9fb 	bl	800728a <HAL_UART_Transmit>
 8002e94:	4603      	mov	r3, r0
 8002e96:	77fb      	strb	r3, [r7, #31]
        uint8_t crlf[] = "\r\n";
 8002e98:	4a0f      	ldr	r2, [pc, #60]	; (8002ed8 <debug_printf+0xc8>)
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	8019      	strh	r1, [r3, #0]
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	0c12      	lsrs	r2, r2, #16
 8002ea6:	701a      	strb	r2, [r3, #0]
        status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
 8002ea8:	1d39      	adds	r1, r7, #4
 8002eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <debug_printf+0xc4>)
 8002eb2:	f004 f9ea 	bl	800728a <HAL_UART_Transmit>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e001      	b.n	8002ec0 <debug_printf+0xb0>
    }
    else{
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	46ad      	mov	sp, r5
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ece:	b004      	add	sp, #16
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	200080d4 	.word	0x200080d4
 8002ed8:	08012dc4 	.word	0x08012dc4

08002edc <FloatToUnsigned16bits>:
  * @brief Converts a float into a uint16_t
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a uint16_t
  * @retval The 16 bit unsigned integer
  */
uint16_t FloatToUnsigned16bits(float float_value){
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t x = *((uint32_t*)&float_value);
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
    return ((x>>16)&0x8000)|((((x&0x7f800000)-0x38000000)>>13)&0x7c00)|((x>>13)&0x03ff);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	0c1b      	lsrs	r3, r3, #16
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ef6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8002f02:	f103 4348 	add.w	r3, r3, #3355443200	; 0xc8000000
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	0b5b      	lsrs	r3, r3, #13
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b29b      	uxth	r3, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <main>:
    enable_EPS_Batt_Heater_3();
}


int main(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
      //SCB->VTOR = APPL_ADDRESS;

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002f36:	f000 f89b 	bl	8003070 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8002f3a:	f005 fd8f 	bl	8008a5c <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002f3e:	f005 fe0f 	bl	8008b60 <MX_GPIO_Init>
    MX_I2C1_Init();
 8002f42:	f005 ffa9 	bl	8008e98 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8002f46:	f006 f81f 	bl	8008f88 <MX_USART1_UART_Init>
    MX_UART4_Init();
 8002f4a:	f005 fff3 	bl	8008f34 <MX_UART4_Init>
    MX_USART6_UART_Init();
 8002f4e:	f006 f845 	bl	8008fdc <MX_USART6_UART_Init>
    MX_SDIO_SD_Init();
 8002f52:	f005 ffcf 	bl	8008ef4 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8002f56:	f006 f947 	bl	80091e8 <MX_FATFS_Init>
    /* Create the threads */
    //    osThreadDef(myStartDefaultTask, StartDefaultTask, osPriorityLow, 0, 6*128);
    //    osThreadCreate(osThread(myStartDefaultTask), NULL);

    /* Start scheduler */
    osKernelStart();
 8002f5a:	f009 fa40 	bl	800c3de <osKernelStart>

    bool test;
    while(1){
        test = PAYLOAD_TEST_RETRIEVING_DATA();
 8002f5e:	f000 f863 	bl	8003028 <PAYLOAD_TEST_RETRIEVING_DATA>
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
 8002f66:	e7fa      	b.n	8002f5e <main+0x2e>

08002f68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f7a:	f000 f89b 	bl	80030b4 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000

08002f8c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
#ifdef DEBUG_ENABLE
  while(1)
  {
      GREEN_LED_ON();
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <Error_Handler+0x48>)
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <Error_Handler+0x48>)
 8002f96:	f043 0310 	orr.w	r3, r3, #16
 8002f9a:	6153      	str	r3, [r2, #20]
      AMBER_LED_ON();
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <Error_Handler+0x48>)
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <Error_Handler+0x48>)
 8002fa2:	f043 0320 	orr.w	r3, r3, #32
 8002fa6:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8002fa8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fac:	f000 f89c 	bl	80030e8 <HAL_Delay>
      GREEN_LED_OFF();
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <Error_Handler+0x48>)
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <Error_Handler+0x48>)
 8002fb6:	f023 0310 	bic.w	r3, r3, #16
 8002fba:	6153      	str	r3, [r2, #20]
      AMBER_LED_OFF();
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <Error_Handler+0x48>)
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <Error_Handler+0x48>)
 8002fc2:	f023 0320 	bic.w	r3, r3, #32
 8002fc6:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8002fc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fcc:	f000 f88c 	bl	80030e8 <HAL_Delay>
      GREEN_LED_ON();
 8002fd0:	e7de      	b.n	8002f90 <Error_Handler+0x4>
 8002fd2:	bf00      	nop
 8002fd4:	40020800 	.word	0x40020800

08002fd8 <HAL_UART_RxCpltCallback>:
{
    Error_Handler();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    if(huart == &huart6){ //OBC connected to Payload/USB
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a0f      	ldr	r2, [pc, #60]	; (8003020 <HAL_UART_RxCpltCallback+0x48>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d116      	bne.n	8003016 <HAL_UART_RxCpltCallback+0x3e>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	490d      	ldr	r1, [pc, #52]	; (8003024 <HAL_UART_RxCpltCallback+0x4c>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd fdea 	bl	8000bc8 <parseCySatPacket>
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ffc:	f7fe fd4c 	bl	8001a98 <handleCySatPacket>
 8003000:	4603      	mov	r3, r0
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003006:	d101      	bne.n	800300c <HAL_UART_RxCpltCallback+0x34>
            sendErrorPacket();
 8003008:	f7fe fd20 	bl	8001a4c <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
 800300c:	2204      	movs	r2, #4
 800300e:	4905      	ldr	r1, [pc, #20]	; (8003024 <HAL_UART_RxCpltCallback+0x4c>)
 8003010:	4803      	ldr	r0, [pc, #12]	; (8003020 <HAL_UART_RxCpltCallback+0x48>)
 8003012:	f004 fa79 	bl	8007508 <HAL_UART_Receive_IT>
    }
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200080d4 	.word	0x200080d4
 8003024:	20007c10 	.word	0x20007c10

08003028 <PAYLOAD_TEST_RETRIEVING_DATA>:
}

/*
 * @brief Tests that we can successfully retrieve data from the payload
 */
bool PAYLOAD_TEST_RETRIEVING_DATA(){
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    status = TAKE_MEASUREMENT(10);
 800302e:	200a      	movs	r0, #10
 8003030:	f7ff fc2a 	bl	8002888 <TAKE_MEASUREMENT>
 8003034:	4603      	mov	r3, r0
 8003036:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <PAYLOAD_TEST_RETRIEVING_DATA+0x1a>
        return false;
 800303e:	2300      	movs	r3, #0
 8003040:	e012      	b.n	8003068 <PAYLOAD_TEST_RETRIEVING_DATA+0x40>
    status = DAT_FILE_TRANSFER();
 8003042:	f7ff fe11 	bl	8002c68 <DAT_FILE_TRANSFER>
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK)
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <PAYLOAD_TEST_RETRIEVING_DATA+0x2c>
        return false;
 8003050:	2300      	movs	r3, #0
 8003052:	e009      	b.n	8003068 <PAYLOAD_TEST_RETRIEVING_DATA+0x40>
    status = KELVIN_FILE_TRANSFER();
 8003054:	f7ff fe10 	bl	8002c78 <KELVIN_FILE_TRANSFER>
 8003058:	4603      	mov	r3, r0
 800305a:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <PAYLOAD_TEST_RETRIEVING_DATA+0x3e>
        return false;
 8003062:	2300      	movs	r3, #0
 8003064:	e000      	b.n	8003068 <PAYLOAD_TEST_RETRIEVING_DATA+0x40>
    return true;
 8003066:	2301      	movs	r3, #1
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_Init+0x40>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_Init+0x40>)
 800307a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_Init+0x40>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_Init+0x40>)
 8003086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_Init+0x40>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <HAL_Init+0x40>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003098:	2003      	movs	r0, #3
 800309a:	f000 f90f 	bl	80032bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800309e:	200f      	movs	r0, #15
 80030a0:	f006 fb9e 	bl	80097e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80030a4:	f006 f9c0 	bl	8009428 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00

080030b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  uwTick++;
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <HAL_IncTick+0x18>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a03      	ldr	r2, [pc, #12]	; (80030cc <HAL_IncTick+0x18>)
 80030c0:	6013      	str	r3, [r2, #0]
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	20007c28 	.word	0x20007c28

080030d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return uwTick;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_GetTick+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20007c28 	.word	0x20007c28

080030e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff ffee 	bl	80030d0 <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003100:	d002      	beq.n	8003108 <HAL_Delay+0x20>
  {
     wait++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3301      	adds	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003108:	bf00      	nop
 800310a:	f7ff ffe1 	bl	80030d0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	429a      	cmp	r2, r3
 8003118:	d8f7      	bhi.n	800310a <HAL_Delay+0x22>
  {
  }
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <NVIC_SetPriorityGrouping+0x44>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003140:	4013      	ands	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800314c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003156:	4a04      	ldr	r2, [pc, #16]	; (8003168 <NVIC_SetPriorityGrouping+0x44>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	60d3      	str	r3, [r2, #12]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <NVIC_GetPriorityGrouping+0x18>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	f003 0307 	and.w	r3, r3, #7
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4907      	ldr	r1, [pc, #28]	; (80031b8 <NVIC_EnableIRQ+0x30>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2001      	movs	r0, #1
 80031a2:	fa00 f202 	lsl.w	r2, r0, r2
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000e100 	.word	0xe000e100

080031bc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	da0b      	bge.n	80031e8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	; (8003208 <NVIC_SetPriority+0x4c>)
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	3b04      	subs	r3, #4
 80031de:	0112      	lsls	r2, r2, #4
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	440b      	add	r3, r1
 80031e4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e6:	e009      	b.n	80031fc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	4907      	ldr	r1, [pc, #28]	; (800320c <NVIC_SetPriority+0x50>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00
 800320c:	e000e100 	.word	0xe000e100

08003210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
         );
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003288:	d301      	bcc.n	800328e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328a:	2301      	movs	r3, #1
 800328c:	e00f      	b.n	80032ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <SysTick_Config+0x40>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003296:	210f      	movs	r1, #15
 8003298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800329c:	f7ff ff8e 	bl	80031bc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <SysTick_Config+0x40>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <SysTick_Config+0x40>)
 80032a8:	2207      	movs	r2, #7
 80032aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	e000e010 	.word	0xe000e010

080032bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff2d 	bl	8003124 <NVIC_SetPriorityGrouping>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e4:	f7ff ff42 	bl	800316c <NVIC_GetPriorityGrouping>
 80032e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6978      	ldr	r0, [r7, #20]
 80032f0:	f7ff ff8e 	bl	8003210 <NVIC_EncodePriority>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff5d 	bl	80031bc <NVIC_SetPriority>
}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff35 	bl	8003188 <NVIC_EnableIRQ>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ffa2 	bl	8003278 <SysTick_Config>
 8003334:	4603      	mov	r3, r0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b04      	cmp	r3, #4
 800334c:	d106      	bne.n	800335c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800335a:	e005      	b.n	8003368 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003362:	f023 0304 	bic.w	r3, r3, #4
 8003366:	6013      	str	r3, [r2, #0]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000e010 	.word	0xe000e010

08003378 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d004      	beq.n	8003396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e00c      	b.n	80033b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2205      	movs	r2, #5
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033c8:	4b93      	ldr	r3, [pc, #588]	; (8003618 <HAL_DMA_IRQHandler+0x25c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a93      	ldr	r2, [pc, #588]	; (800361c <HAL_DMA_IRQHandler+0x260>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	0a9b      	lsrs	r3, r3, #10
 80033d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	2208      	movs	r2, #8
 80033e8:	409a      	lsls	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01a      	beq.n	8003428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0204 	bic.w	r2, r2, #4
 800340e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	2208      	movs	r2, #8
 8003416:	409a      	lsls	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	4a7c      	ldr	r2, [pc, #496]	; (8003620 <HAL_DMA_IRQHandler+0x264>)
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d012      	beq.n	800345e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	4a75      	ldr	r2, [pc, #468]	; (8003620 <HAL_DMA_IRQHandler+0x264>)
 800344c:	409a      	lsls	r2, r3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	4a70      	ldr	r2, [pc, #448]	; (8003624 <HAL_DMA_IRQHandler+0x268>)
 8003464:	409a      	lsls	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <HAL_DMA_IRQHandler+0x268>)
 8003482:	409a      	lsls	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	2210      	movs	r2, #16
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d043      	beq.n	800352c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d03c      	beq.n	800352c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	2210      	movs	r2, #16
 80034b8:	409a      	lsls	r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d108      	bne.n	80034ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d024      	beq.n	800352c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
 80034ea:	e01f      	b.n	800352c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01b      	beq.n	800352c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
 80034fc:	e016      	b.n	800352c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d107      	bne.n	800351c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0208 	bic.w	r2, r2, #8
 800351a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	2220      	movs	r2, #32
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8094 	beq.w	8003666 <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 808c 	beq.w	8003666 <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	2220      	movs	r2, #32
 8003554:	409a      	lsls	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b05      	cmp	r3, #5
 8003564:	d137      	bne.n	80035d6 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0216 	bic.w	r2, r2, #22
 8003574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <HAL_DMA_IRQHandler+0x1da>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0208 	bic.w	r2, r2, #8
 80035a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	223f      	movs	r2, #63	; 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8083 	beq.w	80036d2 <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
        }
        return;
 80035d4:	e07d      	b.n	80036d2 <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d021      	beq.n	8003628 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d108      	bne.n	8003604 <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d035      	beq.n	8003666 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
 8003602:	e030      	b.n	8003666 <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d02c      	beq.n	8003666 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
 8003614:	e027      	b.n	8003666 <HAL_DMA_IRQHandler+0x2aa>
 8003616:	bf00      	nop
 8003618:	20000010 	.word	0x20000010
 800361c:	1b4e81b5 	.word	0x1b4e81b5
 8003620:	00800001 	.word	0x00800001
 8003624:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	2b00      	cmp	r3, #0
 800366c:	d032      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2205      	movs	r2, #5
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	3301      	adds	r3, #1
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	429a      	cmp	r2, r3
 800369c:	d307      	bcc.n	80036ae <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f2      	bne.n	8003692 <HAL_DMA_IRQHandler+0x2d6>
 80036ac:	e000      	b.n	80036b0 <HAL_DMA_IRQHandler+0x2f4>
          break;
 80036ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
 80036d0:	e000      	b.n	80036d4 <HAL_DMA_IRQHandler+0x318>
        return;
 80036d2:	bf00      	nop
    }
  }
}
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e177      	b.n	80039e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 8166 	bne.w	80039e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x4a>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b12      	cmp	r3, #18
 8003724:	d123      	bne.n	800376e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	08da      	lsrs	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3208      	adds	r2, #8
 800372e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	220f      	movs	r2, #15
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	08da      	lsrs	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3208      	adds	r2, #8
 8003768:	69b9      	ldr	r1, [r7, #24]
 800376a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	2203      	movs	r2, #3
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0203 	and.w	r2, r3, #3
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d00b      	beq.n	80037c2 <HAL_GPIO_Init+0xe6>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d007      	beq.n	80037c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037b6:	2b11      	cmp	r3, #17
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b12      	cmp	r3, #18
 80037c0:	d130      	bne.n	8003824 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037f8:	2201      	movs	r2, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 0201 	and.w	r2, r3, #1
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80c0 	beq.w	80039e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_GPIO_Init+0x324>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b63      	ldr	r3, [pc, #396]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387e:	4a61      	ldr	r2, [pc, #388]	; (8003a04 <HAL_GPIO_Init+0x328>)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a58      	ldr	r2, [pc, #352]	; (8003a08 <HAL_GPIO_Init+0x32c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d037      	beq.n	800391a <HAL_GPIO_Init+0x23e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a57      	ldr	r2, [pc, #348]	; (8003a0c <HAL_GPIO_Init+0x330>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d031      	beq.n	8003916 <HAL_GPIO_Init+0x23a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a56      	ldr	r2, [pc, #344]	; (8003a10 <HAL_GPIO_Init+0x334>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <HAL_GPIO_Init+0x236>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_GPIO_Init+0x338>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d025      	beq.n	800390e <HAL_GPIO_Init+0x232>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a54      	ldr	r2, [pc, #336]	; (8003a18 <HAL_GPIO_Init+0x33c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01f      	beq.n	800390a <HAL_GPIO_Init+0x22e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a53      	ldr	r2, [pc, #332]	; (8003a1c <HAL_GPIO_Init+0x340>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d019      	beq.n	8003906 <HAL_GPIO_Init+0x22a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <HAL_GPIO_Init+0x344>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x226>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a51      	ldr	r2, [pc, #324]	; (8003a24 <HAL_GPIO_Init+0x348>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00d      	beq.n	80038fe <HAL_GPIO_Init+0x222>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a50      	ldr	r2, [pc, #320]	; (8003a28 <HAL_GPIO_Init+0x34c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <HAL_GPIO_Init+0x21e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4f      	ldr	r2, [pc, #316]	; (8003a2c <HAL_GPIO_Init+0x350>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_GPIO_Init+0x21a>
 80038f2:	2309      	movs	r3, #9
 80038f4:	e012      	b.n	800391c <HAL_GPIO_Init+0x240>
 80038f6:	230a      	movs	r3, #10
 80038f8:	e010      	b.n	800391c <HAL_GPIO_Init+0x240>
 80038fa:	2308      	movs	r3, #8
 80038fc:	e00e      	b.n	800391c <HAL_GPIO_Init+0x240>
 80038fe:	2307      	movs	r3, #7
 8003900:	e00c      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003902:	2306      	movs	r3, #6
 8003904:	e00a      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003906:	2305      	movs	r3, #5
 8003908:	e008      	b.n	800391c <HAL_GPIO_Init+0x240>
 800390a:	2304      	movs	r3, #4
 800390c:	e006      	b.n	800391c <HAL_GPIO_Init+0x240>
 800390e:	2303      	movs	r3, #3
 8003910:	e004      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003912:	2302      	movs	r3, #2
 8003914:	e002      	b.n	800391c <HAL_GPIO_Init+0x240>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_GPIO_Init+0x240>
 800391a:	2300      	movs	r3, #0
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f002 0203 	and.w	r2, r2, #3
 8003922:	0092      	lsls	r2, r2, #2
 8003924:	4093      	lsls	r3, r2
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800392c:	4935      	ldr	r1, [pc, #212]	; (8003a04 <HAL_GPIO_Init+0x328>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800393a:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_GPIO_Init+0x354>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800395e:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <HAL_GPIO_Init+0x354>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003964:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <HAL_GPIO_Init+0x354>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003988:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <HAL_GPIO_Init+0x354>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800398e:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_GPIO_Init+0x354>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b2:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <HAL_GPIO_Init+0x354>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_GPIO_Init+0x354>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <HAL_GPIO_Init+0x354>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3301      	adds	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b0f      	cmp	r3, #15
 80039ec:	f67f ae84 	bls.w	80036f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40013800 	.word	0x40013800
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	40020400 	.word	0x40020400
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40020c00 	.word	0x40020c00
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40021400 	.word	0x40021400
 8003a20:	40021800 	.word	0x40021800
 8003a24:	40021c00 	.word	0x40021c00
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40022400 	.word	0x40022400
 8003a30:	40013c00 	.word	0x40013c00

08003a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
 8003a40:	4613      	mov	r3, r2
 8003a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a44:	787b      	ldrb	r3, [r7, #1]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a50:	e003      	b.n	8003a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	041a      	lsls	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	619a      	str	r2, [r3, #24]
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0c9      	b.n	8003c16 <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f005 fcf8 	bl	800948c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f001 fae8 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8003ab8:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <HAL_I2C_Init+0x1b8>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	0c9b      	lsrs	r3, r3, #18
 8003ac4:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4a54      	ldr	r2, [pc, #336]	; (8003c24 <HAL_I2C_Init+0x1bc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d802      	bhi.n	8003ade <HAL_I2C_Init+0x76>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	e009      	b.n	8003af2 <HAL_I2C_Init+0x8a>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	4a4f      	ldr	r2, [pc, #316]	; (8003c28 <HAL_I2C_Init+0x1c0>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	3301      	adds	r3, #1
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a49      	ldr	r2, [pc, #292]	; (8003c24 <HAL_I2C_Init+0x1bc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d813      	bhi.n	8003b2a <HAL_I2C_Init+0xc2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b0e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <HAL_I2C_Init+0xbe>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	e045      	b.n	8003bb2 <HAL_I2C_Init+0x14a>
 8003b26:	2304      	movs	r3, #4
 8003b28:	e043      	b.n	8003bb2 <HAL_I2C_Init+0x14a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_I2C_Init+0xea>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	e010      	b.n	8003b74 <HAL_I2C_Init+0x10c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009a      	lsls	r2, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Init+0x114>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e01a      	b.n	8003bb2 <HAL_I2C_Init+0x14a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <HAL_I2C_Init+0x132>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b98:	e00b      	b.n	8003bb2 <HAL_I2C_Init+0x14a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69d9      	ldr	r1, [r3, #28]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6919      	ldr	r1, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6959      	ldr	r1, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	431bde83 	.word	0x431bde83
 8003c24:	000186a0 	.word	0x000186a0
 8003c28:	10624dd3 	.word	0x10624dd3

08003c2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	461a      	mov	r2, r3
 8003c38:	460b      	mov	r3, r1
 8003c3a:	817b      	strh	r3, [r7, #10]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c44:	f7ff fa44 	bl	80030d0 <HAL_GetTick>
 8003c48:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	f040 80ee 	bne.w	8003e34 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2319      	movs	r3, #25
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4977      	ldr	r1, [pc, #476]	; (8003e40 <HAL_I2C_Master_Transmit+0x214>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fc6c 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e0e1      	b.n	8003e36 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_I2C_Master_Transmit+0x54>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e0da      	b.n	8003e36 <HAL_I2C_Master_Transmit+0x20a>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d007      	beq.n	8003ca6 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0201 	orr.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2221      	movs	r2, #33	; 0x21
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	893a      	ldrh	r2, [r7, #8]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a5a      	ldr	r2, [pc, #360]	; (8003e44 <HAL_I2C_Master_Transmit+0x218>)
 8003cdc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ce8:	8979      	ldrh	r1, [r7, #10]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fadc 	bl	80042ac <I2C_MasterRequestWrite>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00f      	beq.n	8003d1a <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d105      	bne.n	8003d0e <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e093      	b.n	8003e36 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e08d      	b.n	8003e36 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8003d30:	e066      	b.n	8003e00 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	6a39      	ldr	r1, [r7, #32]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fcc1 	bl	80046be <I2C_WaitOnTXEFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00f      	beq.n	8003d62 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d109      	bne.n	8003d5e <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d58:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06b      	b.n	8003e36 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e069      	b.n	8003e36 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	1c59      	adds	r1, r3, #1
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	6251      	str	r1, [r2, #36]	; 0x24
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d119      	bne.n	8003dd0 <HAL_I2C_Master_Transmit+0x1a4>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d015      	beq.n	8003dd0 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	6251      	str	r1, [r2, #36]	; 0x24
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	6a39      	ldr	r1, [r7, #32]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fcaf 	bl	8004738 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00f      	beq.n	8003e00 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d109      	bne.n	8003dfc <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e01c      	b.n	8003e36 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e01a      	b.n	8003e36 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d194      	bne.n	8003d32 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	00100002 	.word	0x00100002
 8003e44:	ffff0000 	.word	0xffff0000

08003e48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	461a      	mov	r2, r3
 8003e54:	460b      	mov	r3, r1
 8003e56:	817b      	strh	r3, [r7, #10]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e60:	f7ff f936 	bl	80030d0 <HAL_GetTick>
 8003e64:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	f040 8215 	bne.w	800429e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2319      	movs	r3, #25
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4985      	ldr	r1, [pc, #532]	; (8004094 <HAL_I2C_Master_Receive+0x24c>)
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fb5e 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e208      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_I2C_Master_Receive+0x54>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e201      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d007      	beq.n	8003ec2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2222      	movs	r2, #34	; 0x22
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2210      	movs	r2, #16
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	893a      	ldrh	r2, [r7, #8]
 8003ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a68      	ldr	r2, [pc, #416]	; (8004098 <HAL_I2C_Master_Receive+0x250>)
 8003ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f04:	8979      	ldrh	r1, [r7, #10]
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fa50 	bl	80043b0 <I2C_MasterRequestRead>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00f      	beq.n	8003f36 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d105      	bne.n	8003f2a <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e1ba      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e1b4      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d113      	bne.n	8003f66 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e188      	b.n	8004278 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d11b      	bne.n	8003fa6 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e168      	b.n	8004278 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d11b      	bne.n	8003fe6 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	e148      	b.n	8004278 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 800400c:	e134      	b.n	8004278 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004012:	2b03      	cmp	r3, #3
 8004014:	f200 80eb 	bhi.w	80041ee <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	2b01      	cmp	r3, #1
 800401e:	d127      	bne.n	8004070 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fbc4 	bl	80047b2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	2b20      	cmp	r3, #32
 8004036:	d101      	bne.n	800403c <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e131      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e12f      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6918      	ldr	r0, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	1c59      	adds	r1, r3, #1
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	6251      	str	r1, [r2, #36]	; 0x24
 8004050:	b2c2      	uxtb	r2, r0
 8004052:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800406e:	e103      	b.n	8004278 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b02      	cmp	r3, #2
 8004076:	d14a      	bne.n	800410e <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	2200      	movs	r2, #0
 8004080:	4906      	ldr	r1, [pc, #24]	; (800409c <HAL_I2C_Master_Receive+0x254>)
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fa5c 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e106      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
 8004092:	bf00      	nop
 8004094:	00100002 	.word	0x00100002
 8004098:	ffff0000 	.word	0xffff0000
 800409c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6918      	ldr	r0, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	6251      	str	r1, [r2, #36]	; 0x24
 80040c0:	b2c2      	uxtb	r2, r0
 80040c2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6918      	ldr	r0, [r3, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c59      	adds	r1, r3, #1
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	6251      	str	r1, [r2, #36]	; 0x24
 80040ee:	b2c2      	uxtb	r2, r0
 80040f0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800410c:	e0b4      	b.n	8004278 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2200      	movs	r2, #0
 8004116:	4964      	ldr	r1, [pc, #400]	; (80042a8 <HAL_I2C_Master_Receive+0x460>)
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fa11 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e0bb      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6918      	ldr	r0, [r3, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	1c59      	adds	r1, r3, #1
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	6251      	str	r1, [r2, #36]	; 0x24
 8004148:	b2c2      	uxtb	r2, r0
 800414a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	2200      	movs	r2, #0
 800416e:	494e      	ldr	r1, [pc, #312]	; (80042a8 <HAL_I2C_Master_Receive+0x460>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f9e5 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e08f      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6918      	ldr	r0, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	6251      	str	r1, [r2, #36]	; 0x24
 80041a0:	b2c2      	uxtb	r2, r0
 80041a2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6918      	ldr	r0, [r3, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	1c59      	adds	r1, r3, #1
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	6251      	str	r1, [r2, #36]	; 0x24
 80041ce:	b2c2      	uxtb	r2, r0
 80041d0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041ec:	e044      	b.n	8004278 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80041ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fadd 	bl	80047b2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2b20      	cmp	r3, #32
 8004204:	d101      	bne.n	800420a <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e04a      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e048      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6918      	ldr	r0, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	1c59      	adds	r1, r3, #1
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	6251      	str	r1, [r2, #36]	; 0x24
 800421e:	b2c2      	uxtb	r2, r0
 8004220:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d116      	bne.n	8004278 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6918      	ldr	r0, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c59      	adds	r1, r3, #1
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	6251      	str	r1, [r2, #36]	; 0x24
 800425a:	b2c2      	uxtb	r2, r0
 800425c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	2b00      	cmp	r3, #0
 800427e:	f47f aec6 	bne.w	800400e <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3728      	adds	r7, #40	; 0x28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	00010004 	.word	0x00010004

080042ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	460b      	mov	r3, r1
 80042ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d006      	beq.n	80042d6 <I2C_MasterRequestWrite+0x2a>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d003      	beq.n	80042d6 <I2C_MasterRequestWrite+0x2a>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d4:	d108      	bne.n	80042e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e00b      	b.n	8004300 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	2b12      	cmp	r3, #18
 80042ee:	d107      	bne.n	8004300 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fe:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f917 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e041      	b.n	80043a0 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004324:	d108      	bne.n	8004338 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004334:	611a      	str	r2, [r3, #16]
 8004336:	e021      	b.n	800437c <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004338:	897b      	ldrh	r3, [r7, #10]
 800433a:	11db      	asrs	r3, r3, #7
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0306 	and.w	r3, r3, #6
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f063 030f 	orn	r3, r3, #15
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4914      	ldr	r1, [pc, #80]	; (80043a8 <I2C_MasterRequestWrite+0xfc>)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f943 	bl	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b04      	cmp	r3, #4
 8004368:	d101      	bne.n	800436e <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e018      	b.n	80043a0 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e016      	b.n	80043a0 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004372:	897b      	ldrh	r3, [r7, #10]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	490a      	ldr	r1, [pc, #40]	; (80043ac <I2C_MasterRequestWrite+0x100>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f92d 	bl	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b04      	cmp	r3, #4
 8004394:	d101      	bne.n	800439a <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e002      	b.n	80043a0 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e000      	b.n	80043a0 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	00010008 	.word	0x00010008
 80043ac:	00010002 	.word	0x00010002

080043b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	460b      	mov	r3, r1
 80043be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d006      	beq.n	80043ea <I2C_MasterRequestRead+0x3a>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d003      	beq.n	80043ea <I2C_MasterRequestRead+0x3a>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043e8:	d108      	bne.n	80043fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e00b      	b.n	8004414 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	2b11      	cmp	r3, #17
 8004402:	d107      	bne.n	8004414 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f88d 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e07f      	b.n	8004530 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004438:	d108      	bne.n	800444c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800443a:	897b      	ldrh	r3, [r7, #10]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	611a      	str	r2, [r3, #16]
 800444a:	e05f      	b.n	800450c <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800444c:	897b      	ldrh	r3, [r7, #10]
 800444e:	11db      	asrs	r3, r3, #7
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 0306 	and.w	r3, r3, #6
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f063 030f 	orn	r3, r3, #15
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4933      	ldr	r1, [pc, #204]	; (8004538 <I2C_MasterRequestRead+0x188>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f8b9 	bl	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	2b04      	cmp	r3, #4
 800447c:	d101      	bne.n	8004482 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e056      	b.n	8004530 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e054      	b.n	8004530 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004486:	897b      	ldrh	r3, [r7, #10]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4929      	ldr	r1, [pc, #164]	; (800453c <I2C_MasterRequestRead+0x18c>)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f8a3 	bl	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d101      	bne.n	80044ae <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e040      	b.n	8004530 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e03e      	b.n	8004530 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f82b 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e01d      	b.n	8004530 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80044f4:	897b      	ldrh	r3, [r7, #10]
 80044f6:	11db      	asrs	r3, r3, #7
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 0306 	and.w	r3, r3, #6
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f063 030e 	orn	r3, r3, #14
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	490a      	ldr	r1, [pc, #40]	; (800453c <I2C_MasterRequestRead+0x18c>)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f865 	bl	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	2b04      	cmp	r3, #4
 8004524:	d101      	bne.n	800452a <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e002      	b.n	8004530 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e000      	b.n	8004530 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	00010008 	.word	0x00010008
 800453c:	00010002 	.word	0x00010002

08004540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004550:	e01f      	b.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004558:	d01b      	beq.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004560:	f7fe fdb6 	bl	80030d0 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d210      	bcs.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e023      	b.n	80045da <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10d      	bne.n	80045b8 <I2C_WaitOnFlagUntilTimeout+0x78>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	e00c      	b.n	80045d2 <I2C_WaitOnFlagUntilTimeout+0x92>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf0c      	ite	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	2300      	movne	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d0bc      	beq.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045f0:	e040      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d11c      	bne.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004610:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800461a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2204      	movs	r2, #4
 8004620:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e03c      	b.n	80046b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004642:	d017      	beq.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800464a:	f7fe fd41 	bl	80030d0 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d20c      	bcs.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e020      	b.n	80046b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10c      	bne.n	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	43da      	mvns	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e00b      	b.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4013      	ands	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d19e      	bne.n	80045f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ca:	e029      	b.n	8004720 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f8ba 	bl	8004846 <I2C_IsAcknowledgeFailed>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e029      	b.n	8004730 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e2:	d01d      	beq.n	8004720 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046ea:	f7fe fcf1 	bl	80030d0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d212      	bcs.n	8004720 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e007      	b.n	8004730 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d1ce      	bne.n	80046cc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004744:	e029      	b.n	800479a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f87d 	bl	8004846 <I2C_IsAcknowledgeFailed>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e029      	b.n	80047aa <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800475c:	d01d      	beq.n	800479a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004764:	f7fe fcb4 	bl	80030d0 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	429a      	cmp	r2, r3
 8004772:	d212      	bcs.n	800479a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e007      	b.n	80047aa <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d1ce      	bne.n	8004746 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047be:	e036      	b.n	800482e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b10      	cmp	r3, #16
 80047cc:	d114      	bne.n	80047f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0210 	mvn.w	r2, #16
 80047d6:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e022      	b.n	800483e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80047fe:	f7fe fc67 	bl	80030d0 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d20f      	bcs.n	800482e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0220 	orr.w	r2, r3, #32
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e007      	b.n	800483e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d1c1      	bne.n	80047c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485c:	d114      	bne.n	8004888 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004866:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2204      	movs	r2, #4
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08e      	sub	sp, #56	; 0x38
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 80048a0:	2300      	movs	r3, #0
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d075      	beq.n	800499c <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048b0:	4ba4      	ldr	r3, [pc, #656]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d00c      	beq.n	80048d6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048bc:	4ba1      	ldr	r3, [pc, #644]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d112      	bne.n	80048ee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c8:	4b9e      	ldr	r3, [pc, #632]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d4:	d10b      	bne.n	80048ee <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d6:	4b9b      	ldr	r3, [pc, #620]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d05b      	beq.n	800499a <HAL_RCC_OscConfig+0x102>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d157      	bne.n	800499a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e224      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f6:	d106      	bne.n	8004906 <HAL_RCC_OscConfig+0x6e>
 80048f8:	4b92      	ldr	r3, [pc, #584]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a91      	ldr	r2, [pc, #580]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	e01d      	b.n	8004942 <HAL_RCC_OscConfig+0xaa>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800490e:	d10c      	bne.n	800492a <HAL_RCC_OscConfig+0x92>
 8004910:	4b8c      	ldr	r3, [pc, #560]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a8b      	ldr	r2, [pc, #556]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b89      	ldr	r3, [pc, #548]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a88      	ldr	r2, [pc, #544]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e00b      	b.n	8004942 <HAL_RCC_OscConfig+0xaa>
 800492a:	4b86      	ldr	r3, [pc, #536]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a85      	ldr	r2, [pc, #532]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b83      	ldr	r3, [pc, #524]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a82      	ldr	r2, [pc, #520]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004940:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d013      	beq.n	8004972 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fe fbc1 	bl	80030d0 <HAL_GetTick>
 800494e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004952:	f7fe fbbd 	bl	80030d0 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b64      	cmp	r3, #100	; 0x64
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e1e9      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004964:	4b77      	ldr	r3, [pc, #476]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0xba>
 8004970:	e014      	b.n	800499c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004972:	f7fe fbad 	bl	80030d0 <HAL_GetTick>
 8004976:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800497a:	f7fe fba9 	bl	80030d0 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b64      	cmp	r3, #100	; 0x64
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e1d5      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498c:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0xe2>
 8004998:	e000      	b.n	800499c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d077      	beq.n	8004a98 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049a8:	4b66      	ldr	r3, [pc, #408]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049b4:	4b63      	ldr	r3, [pc, #396]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d126      	bne.n	8004a0e <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c0:	4b60      	ldr	r3, [pc, #384]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d120      	bne.n	8004a0e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049cc:	4b5d      	ldr	r3, [pc, #372]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_OscConfig+0x14c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e1a9      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e4:	4b57      	ldr	r3, [pc, #348]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6919      	ldr	r1, [r3, #16]
 80049f0:	23f8      	movs	r3, #248	; 0xf8
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	494f      	ldr	r1, [pc, #316]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0c:	e044      	b.n	8004a98 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02a      	beq.n	8004a6c <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a16:	4b4c      	ldr	r3, [pc, #304]	; (8004b48 <HAL_RCC_OscConfig+0x2b0>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fe fb58 	bl	80030d0 <HAL_GetTick>
 8004a20:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a24:	f7fe fb54 	bl	80030d0 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e180      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a36:	4b43      	ldr	r3, [pc, #268]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a42:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6919      	ldr	r1, [r3, #16]
 8004a4e:	23f8      	movs	r3, #248	; 0xf8
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	4937      	ldr	r1, [pc, #220]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
 8004a6a:	e015      	b.n	8004a98 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6c:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <HAL_RCC_OscConfig+0x2b0>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fe fb2d 	bl	80030d0 <HAL_GetTick>
 8004a76:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fe fb29 	bl	80030d0 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e155      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8c:	4b2d      	ldr	r3, [pc, #180]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f0      	bne.n	8004a7a <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d030      	beq.n	8004b06 <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d016      	beq.n	8004ada <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aac:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <HAL_RCC_OscConfig+0x2b4>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab2:	f7fe fb0d 	bl	80030d0 <HAL_GetTick>
 8004ab6:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aba:	f7fe fb09 	bl	80030d0 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e135      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x222>
 8004ad8:	e015      	b.n	8004b06 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ada:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <HAL_RCC_OscConfig+0x2b4>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fe faf6 	bl	80030d0 <HAL_GetTick>
 8004ae4:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae8:	f7fe faf2 	bl	80030d0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e11e      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8086 	beq.w	8004c20 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6413      	str	r3, [r2, #64]	; 0x40
 8004b24:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3a:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8004b3c:	f7fe fac8 	bl	80030d0 <HAL_GetTick>
 8004b40:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b42:	e010      	b.n	8004b66 <HAL_RCC_OscConfig+0x2ce>
 8004b44:	40023800 	.word	0x40023800
 8004b48:	42470000 	.word	0x42470000
 8004b4c:	42470e80 	.word	0x42470e80
 8004b50:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b54:	f7fe fabc 	bl	80030d0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0e8      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b66:	4b76      	ldr	r3, [pc, #472]	; (8004d40 <HAL_RCC_OscConfig+0x4a8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
 8004b7a:	4b72      	ldr	r3, [pc, #456]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	4a71      	ldr	r2, [pc, #452]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	; 0x70
 8004b86:	e01c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x32a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCC_OscConfig+0x312>
 8004b90:	4b6c      	ldr	r3, [pc, #432]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a6b      	ldr	r2, [pc, #428]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b96:	f043 0304 	orr.w	r3, r3, #4
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9c:	4b69      	ldr	r3, [pc, #420]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4a68      	ldr	r2, [pc, #416]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba8:	e00b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x32a>
 8004baa:	4b66      	ldr	r3, [pc, #408]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	4a65      	ldr	r2, [pc, #404]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb6:	4b63      	ldr	r3, [pc, #396]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a62      	ldr	r2, [pc, #392]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d015      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fe fa81 	bl	80030d0 <HAL_GetTick>
 8004bce:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fe fa7d 	bl	80030d0 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0a7      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	4b56      	ldr	r3, [pc, #344]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ee      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x33a>
 8004bf4:	e014      	b.n	8004c20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf6:	f7fe fa6b 	bl	80030d0 <HAL_GetTick>
 8004bfa:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fe fa67 	bl	80030d0 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e091      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	4b4b      	ldr	r3, [pc, #300]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ee      	bne.n	8004bfe <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8086 	beq.w	8004d36 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c2a:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d07d      	beq.n	8004d32 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d162      	bne.n	8004d04 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <HAL_RCC_OscConfig+0x4b0>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fe fa44 	bl	80030d0 <HAL_GetTick>
 8004c48:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fe fa40 	bl	80030d0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e06c      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	4b39      	ldr	r3, [pc, #228]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	1e59      	subs	r1, r3, #1
 8004c9a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	617b      	str	r3, [r7, #20]
  return(result);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fab3 f383 	clz	r3, r3
 8004cae:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cb8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	fab3 f383 	clz	r3, r3
 8004ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd0:	491c      	ldr	r1, [pc, #112]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd6:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <HAL_RCC_OscConfig+0x4b0>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fe f9f8 	bl	80030d0 <HAL_GetTick>
 8004ce0:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fe f9f4 	bl	80030d0 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e020      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x44c>
 8004d02:	e018      	b.n	8004d36 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d04:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <HAL_RCC_OscConfig+0x4b0>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7fe f9e1 	bl	80030d0 <HAL_GetTick>
 8004d0e:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d12:	f7fe f9dd 	bl	80030d0 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e009      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d24:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f0      	bne.n	8004d12 <HAL_RCC_OscConfig+0x47a>
 8004d30:	e001      	b.n	8004d36 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3738      	adds	r7, #56	; 0x38
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40007000 	.word	0x40007000
 8004d44:	40023800 	.word	0x40023800
 8004d48:	42470060 	.word	0x42470060

08004d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004d5a:	4b81      	ldr	r3, [pc, #516]	; (8004f60 <HAL_RCC_ClockConfig+0x214>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d90c      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d68:	4b7d      	ldr	r3, [pc, #500]	; (8004f60 <HAL_RCC_ClockConfig+0x214>)
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d70:	4b7b      	ldr	r3, [pc, #492]	; (8004f60 <HAL_RCC_ClockConfig+0x214>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d001      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0ea      	b.n	8004f58 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d8e:	4b75      	ldr	r3, [pc, #468]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4972      	ldr	r1, [pc, #456]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8086 	beq.w	8004eba <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db6:	4b6b      	ldr	r3, [pc, #428]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d119      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e0c8      	b.n	8004f58 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d003      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d107      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd6:	4b63      	ldr	r3, [pc, #396]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e0b8      	b.n	8004f58 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de6:	4b5f      	ldr	r3, [pc, #380]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0b0      	b.n	8004f58 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004df6:	4b5b      	ldr	r3, [pc, #364]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f023 0203 	bic.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4958      	ldr	r1, [pc, #352]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e08:	f7fe f962 	bl	80030d0 <HAL_GetTick>
 8004e0c:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d112      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e18:	f7fe f95a 	bl	80030d0 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e094      	b.n	8004f58 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e2e:	4b4d      	ldr	r3, [pc, #308]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d1ee      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xcc>
 8004e3a:	e03e      	b.n	8004eba <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d112      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e46:	f7fe f943 	bl	80030d0 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e07d      	b.n	8004f58 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e5c:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d1ee      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xfa>
 8004e68:	e027      	b.n	8004eba <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d11d      	bne.n	8004eae <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fe f92c 	bl	80030d0 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e066      	b.n	8004f58 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004e8a:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d1ee      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x128>
 8004e96:	e010      	b.n	8004eba <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e98:	f7fe f91a 	bl	80030d0 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e054      	b.n	8004f58 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eae:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1ee      	bne.n	8004e98 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004eba:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_RCC_ClockConfig+0x214>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d20c      	bcs.n	8004ee2 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec8:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <HAL_RCC_ClockConfig+0x214>)
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ed0:	4b23      	ldr	r3, [pc, #140]	; (8004f60 <HAL_RCC_ClockConfig+0x214>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e03a      	b.n	8004f58 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eee:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	491a      	ldr	r1, [pc, #104]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d009      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0c:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4912      	ldr	r1, [pc, #72]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004f20:	f000 f826 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f24:	4601      	mov	r1, r0
 8004f26:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <HAL_RCC_ClockConfig+0x218>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f2e:	23f0      	movs	r3, #240	; 0xf0
 8004f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	fab3 f383 	clz	r3, r3
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	4a08      	ldr	r2, [pc, #32]	; (8004f68 <HAL_RCC_ClockConfig+0x21c>)
 8004f46:	5cd3      	ldrb	r3, [r2, r3]
 8004f48:	fa21 f303 	lsr.w	r3, r1, r3
 8004f4c:	4a07      	ldr	r2, [pc, #28]	; (8004f6c <HAL_RCC_ClockConfig+0x220>)
 8004f4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004f50:	200f      	movs	r0, #15
 8004f52:	f004 fc45 	bl	80097e0 <HAL_InitTick>
  
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40023c00 	.word	0x40023c00
 8004f64:	40023800 	.word	0x40023800
 8004f68:	08012e34 	.word	0x08012e34
 8004f6c:	20000010 	.word	0x20000010

08004f70 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b08b      	sub	sp, #44	; 0x2c
 8004f74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f86:	4b38      	ldr	r3, [pc, #224]	; (8005068 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d00c      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x3c>
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d85d      	bhi.n	8005052 <HAL_RCC_GetSysClockFreq+0xe2>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x30>
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x36>
 8004f9e:	e058      	b.n	8005052 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b32      	ldr	r3, [pc, #200]	; (800506c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004fa2:	623b      	str	r3, [r7, #32]
       break;
 8004fa4:	e058      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa6:	4b31      	ldr	r3, [pc, #196]	; (800506c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004fa8:	623b      	str	r3, [r7, #32]
      break;
 8004faa:	e055      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fac:	4b2e      	ldr	r3, [pc, #184]	; (8005068 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb4:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fb6:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d017      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	; (800506c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fca:	4b27      	ldr	r3, [pc, #156]	; (8005068 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fd2:	400b      	ands	r3, r1
 8004fd4:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004fd8:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	6979      	ldr	r1, [r7, #20]
 8004fdc:	fa91 f1a1 	rbit	r1, r1
 8004fe0:	6139      	str	r1, [r7, #16]
  return(result);
 8004fe2:	6939      	ldr	r1, [r7, #16]
 8004fe4:	fab1 f181 	clz	r1, r1
 8004fe8:	40cb      	lsrs	r3, r1
 8004fea:	fb03 f302 	mul.w	r3, r3, r2
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff0:	e016      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	; (800506c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005002:	400b      	ands	r3, r1
 8005004:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005008:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	fa91 f1a1 	rbit	r1, r1
 8005010:	60b9      	str	r1, [r7, #8]
  return(result);
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	fab1 f181 	clz	r1, r1
 8005018:	40cb      	lsrs	r3, r1
 800501a:	fb03 f302 	mul.w	r3, r3, r2
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8005020:	4b11      	ldr	r3, [pc, #68]	; (8005068 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005028:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800502c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	fa93 f3a3 	rbit	r3, r3
 8005034:	603b      	str	r3, [r7, #0]
  return(result);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	fab3 f383 	clz	r3, r3
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
 8005040:	3301      	adds	r3, #1
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8005046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	623b      	str	r3, [r7, #32]
      break;
 8005050:	e002      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005054:	623b      	str	r3, [r7, #32]
      break;
 8005056:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005058:	6a3b      	ldr	r3, [r7, #32]
}
 800505a:	4618      	mov	r0, r3
 800505c:	372c      	adds	r7, #44	; 0x2c
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	00f42400 	.word	0x00f42400

08005070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005074:	4b03      	ldr	r3, [pc, #12]	; (8005084 <HAL_RCC_GetHCLKFreq+0x14>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000010 	.word	0x20000010

08005088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800508e:	f7ff ffef 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 8005092:	4601      	mov	r1, r0
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800509c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80050a0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	fa93 f3a3 	rbit	r3, r3
 80050a8:	603b      	str	r3, [r7, #0]
  return(result);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	fab3 f383 	clz	r3, r3
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
 80050b4:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80050b6:	5cd3      	ldrb	r3, [r2, r3]
 80050b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	08012e44 	.word	0x08012e44

080050cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80050d2:	f7ff ffcd 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 80050d6:	4601      	mov	r1, r0
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80050e0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80050e4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	fa93 f3a3 	rbit	r3, r3
 80050ec:	603b      	str	r3, [r7, #0]
  return(result);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	fab3 f383 	clz	r3, r3
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	4a04      	ldr	r2, [pc, #16]	; (800510c <HAL_RCC_GetPCLK2Freq+0x40>)
 80050fa:	5cd3      	ldrb	r3, [r2, r3]
 80050fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	08012e44 	.word	0x08012e44

08005110 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	220f      	movs	r2, #15
 800511e:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <HAL_RCC_GetClockConfig+0x5c>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0203 	and.w	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <HAL_RCC_GetClockConfig+0x5c>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <HAL_RCC_GetClockConfig+0x5c>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005144:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_RCC_GetClockConfig+0x5c>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	08db      	lsrs	r3, r3, #3
 800514a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <HAL_RCC_GetClockConfig+0x60>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 020f 	and.w	r2, r3, #15
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	40023c00 	.word	0x40023c00

08005174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b09c      	sub	sp, #112	; 0x70
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t tmpreg1 = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x2a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8082 	beq.w	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 800519e:	4bac      	ldr	r3, [pc, #688]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051a4:	f7fd ff94 	bl	80030d0 <HAL_GetTick>
 80051a8:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051ac:	f7fd ff90 	bl	80030d0 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x4a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e1eb      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051be:	4ba5      	ldr	r3, [pc, #660]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x38>
    }
    
    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01e      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e2:	fa93 f3a3 	rbit	r3, r3
 80051e6:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 80051e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ea:	fab3 f383 	clz	r3, r3
 80051ee:	409a      	lsls	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6899      	ldr	r1, [r3, #8]
 80051f4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80051f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051fc:	fa93 f3a3 	rbit	r3, r3
 8005200:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005204:	fab3 f383 	clz	r3, r3
 8005208:	fa01 f303 	lsl.w	r3, r1, r3
 800520c:	4991      	ldr	r1, [pc, #580]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d02a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005220:	4b8c      	ldr	r3, [pc, #560]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005226:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800522a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800522e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005232:	fa93 f3a3 	rbit	r3, r3
 8005236:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8005238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523a:	fab3 f383 	clz	r3, r3
 800523e:	fa22 f303 	lsr.w	r3, r2, r3
 8005242:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	019a      	lsls	r2, r3, #6
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	431a      	orrs	r2, r3
 8005252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	497f      	ldr	r1, [pc, #508]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800525e:	4b7d      	ldr	r3, [pc, #500]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005264:	f023 021f 	bic.w	r2, r3, #31
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	3b01      	subs	r3, #1
 800526e:	4979      	ldr	r1, [pc, #484]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005276:	4b76      	ldr	r3, [pc, #472]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800527c:	f7fd ff28 	bl	80030d0 <HAL_GetTick>
 8005280:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005284:	f7fd ff24 	bl	80030d0 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e17f      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005296:	4b6f      	ldr	r3, [pc, #444]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x110>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x148>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80d7 	beq.w	800546a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80052bc:	4b66      	ldr	r3, [pc, #408]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c2:	f7fd ff05 	bl	80030d0 <HAL_GetTick>
 80052c6:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052c8:	e008      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052ca:	f7fd ff01 	bl	80030d0 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x168>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e15c      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052dc:	4b5d      	ldr	r3, [pc, #372]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e8:	d0ef      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d04b      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80052f6:	4b57      	ldr	r3, [pc, #348]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005300:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005308:	fa93 f3a3 	rbit	r3, r3
 800530c:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	fab3 f383 	clz	r3, r3
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005326:	fa93 f3a3 	rbit	r3, r3
 800532a:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	fab3 f383 	clz	r3, r3
 8005332:	409a      	lsls	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6959      	ldr	r1, [r3, #20]
 8005338:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005340:	fa93 f3a3 	rbit	r3, r3
 8005344:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005348:	fab3 f383 	clz	r3, r3
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535a:	fa93 f3a3 	rbit	r3, r3
 800535e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005362:	fab3 f383 	clz	r3, r3
 8005366:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005368:	fa01 f303 	lsl.w	r3, r1, r3
 800536c:	4939      	ldr	r1, [pc, #228]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005374:	4b37      	ldr	r3, [pc, #220]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	3b01      	subs	r3, #1
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	4933      	ldr	r1, [pc, #204]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d049      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800539a:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053a4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80053a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	fa93 f3a3 	rbit	r3, r3
 80053b0:	613b      	str	r3, [r7, #16]
  return(result);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	fab3 f383 	clz	r3, r3
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	fa93 f3a3 	rbit	r3, r3
 80053ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	fab3 f383 	clz	r3, r3
 80053d6:	409a      	lsls	r2, r3
 80053d8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	fa93 f3a3 	rbit	r3, r3
 80053e4:	623b      	str	r3, [r7, #32]
  return(result);
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	fab3 f383 	clz	r3, r3
 80053ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6999      	ldr	r1, [r3, #24]
 80053f8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	4910      	ldr	r1, [pc, #64]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005418:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800541a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	490b      	ldr	r1, [pc, #44]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005434:	f7fd fe4c 	bl	80030d0 <HAL_GetTick>
 8005438:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800543a:	e00f      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800543c:	f7fd fe48 	bl	80030d0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d908      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e0a3      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x422>
 800544e:	bf00      	nop
 8005450:	42470068 	.word	0x42470068
 8005454:	40023800 	.word	0x40023800
 8005458:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800545c:	4b50      	ldr	r3, [pc, #320]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005468:	d1e8      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 8083 	beq.w	800557e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	4b48      	ldr	r3, [pc, #288]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	4a47      	ldr	r2, [pc, #284]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005486:	6413      	str	r3, [r2, #64]	; 0x40
 8005488:	4b45      	ldr	r3, [pc, #276]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	68fb      	ldr	r3, [r7, #12]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005494:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a42      	ldr	r2, [pc, #264]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800549a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549e:	6013      	str	r3, [r2, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 80054a0:	f7fd fe16 	bl	80030d0 <HAL_GetTick>
 80054a4:	66f8      	str	r0, [r7, #108]	; 0x6c
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x346>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054a8:	f7fd fe12 	bl	80030d0 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x346>
      {
        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e06d      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054ba:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054c6:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ce:	66bb      	str	r3, [r7, #104]	; 0x68
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d02f      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d028      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054e4:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ec:	66bb      	str	r3, [r7, #104]	; 0x68
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ee:	4b2e      	ldr	r3, [pc, #184]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054f4:	4b2c      	ldr	r3, [pc, #176]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054fa:	4a29      	ldr	r2, [pc, #164]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005500:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d014      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800550c:	f7fd fde0 	bl	80030d0 <HAL_GetTick>
 8005510:	66f8      	str	r0, [r7, #108]	; 0x6c
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005512:	e00a      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005514:	f7fd fddc 	bl	80030d0 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005522:	4293      	cmp	r3, r2
 8005524:	d901      	bls.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e035      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552a:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0ee      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005542:	d10d      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005544:	4b16      	ldr	r3, [pc, #88]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005558:	4911      	ldr	r1, [pc, #68]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
 800555e:	e005      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	4a0e      	ldr	r2, [pc, #56]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005566:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800556a:	6093      	str	r3, [r2, #8]
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800556e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005578:	4909      	ldr	r1, [pc, #36]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800557a:	4313      	orrs	r3, r2
 800557c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005592:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3770      	adds	r7, #112	; 0x70
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40007000 	.word	0x40007000
 80055a8:	42470e40 	.word	0x42470e40
 80055ac:	424711e0 	.word	0x424711e0

080055b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e01d      	b.n	80055fe <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d105      	bne.n	80055da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f003 ffdb 	bl	8009590 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2203      	movs	r2, #3
 80055de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f810 	bl	8005608 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005608:	b5b0      	push	{r4, r5, r7, lr}
 800560a:	b08e      	sub	sp, #56	; 0x38
 800560c:	af04      	add	r7, sp, #16
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005610:	2300      	movs	r3, #0
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005618:	2300      	movs	r3, #0
 800561a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005628:	2376      	movs	r3, #118	; 0x76
 800562a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681d      	ldr	r5, [r3, #0]
 8005630:	466c      	mov	r4, sp
 8005632:	f107 0318 	add.w	r3, r7, #24
 8005636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800563a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800563e:	f107 030c 	add.w	r3, r7, #12
 8005642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005644:	4628      	mov	r0, r5
 8005646:	f002 fc7d 	bl	8007f44 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800564a:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <HAL_SD_InitCard+0xb4>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f002 fcbe 	bl	8007fd6 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800565a:	4b18      	ldr	r3, [pc, #96]	; (80056bc <HAL_SD_InitCard+0xb4>)
 800565c:	2201      	movs	r2, #1
 800565e:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8005660:	2002      	movs	r0, #2
 8005662:	f7fd fd41 	bl	80030e8 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 f90a 	bl	8006880 <SD_PowerON>
 800566c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e013      	b.n	80056b4 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 f82f 	bl	80066f0 <SD_InitCard>
 8005692:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bdb0      	pop	{r4, r5, r7, pc}
 80056bc:	422580a0 	.word	0x422580a0

080056c0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b08f      	sub	sp, #60	; 0x3c
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80056d2:	f7fd fcfd 	bl	80030d0 <HAL_GetTick>
 80056d6:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 80056d8:	2300      	movs	r3, #0
 80056da:	633b      	str	r3, [r7, #48]	; 0x30
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d107      	bne.n	80056f6 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e177      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	f040 816a 	bne.w	80059d8 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	441a      	add	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005714:	429a      	cmp	r2, r3
 8005716:	d907      	bls.n	8005728 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e15e      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2203      	movs	r2, #3
 800572c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2200      	movs	r2, #0
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	2b01      	cmp	r3, #1
 800573e:	d002      	beq.n	8005746 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	025b      	lsls	r3, r3, #9
 8005744:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800574e:	4618      	mov	r0, r3
 8005750:	f002 fcd5 	bl	80080fe <SDMMC_CmdBlockLength>
 8005754:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8005756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	431a      	orrs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e133      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800577e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005782:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	025b      	lsls	r3, r3, #9
 8005788:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800578a:	2390      	movs	r3, #144	; 0x90
 800578c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800578e:	2302      	movs	r3, #2
 8005790:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005792:	2300      	movs	r3, #0
 8005794:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005796:	2301      	movs	r3, #1
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f107 0210 	add.w	r2, r7, #16
 80057a2:	4611      	mov	r1, r2
 80057a4:	4618      	mov	r0, r3
 80057a6:	f002 fc7e 	bl	80080a6 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d90a      	bls.n	80057c6 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2202      	movs	r2, #2
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4618      	mov	r0, r3
 80057be:	f002 fce6 	bl	800818e <SDMMC_CmdReadMultiBlock>
 80057c2:	6378      	str	r0, [r7, #52]	; 0x34
 80057c4:	e009      	b.n	80057da <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f002 fcb7 	bl	8008146 <SDMMC_CmdReadSingleBlock>
 80057d8:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d04a      	beq.n	8005876 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	431a      	orrs	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0f1      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d016      	beq.n	800583e <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005810:	2300      	movs	r3, #0
 8005812:	633b      	str	r3, [r7, #48]	; 0x30
 8005814:	e00d      	b.n	8005832 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005820:	18d4      	adds	r4, r2, r3
 8005822:	4608      	mov	r0, r1
 8005824:	f002 fbb9 	bl	8007f9a <SDIO_ReadFIFO>
 8005828:	4603      	mov	r3, r0
 800582a:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	3301      	adds	r3, #1
 8005830:	633b      	str	r3, [r7, #48]	; 0x30
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	2b07      	cmp	r3, #7
 8005836:	d9ee      	bls.n	8005816 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	3320      	adds	r3, #32
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800583e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <HAL_SD_ReadBlocks+0x194>
 8005844:	f7fd fc44 	bl	80030d0 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005850:	429a      	cmp	r2, r3
 8005852:	d810      	bhi.n	8005876 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e0b7      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587c:	f240 332a 	movw	r3, #810	; 0x32a
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0bd      	beq.n	8005802 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d020      	beq.n	80058d6 <HAL_SD_ReadBlocks+0x216>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d91d      	bls.n	80058d6 <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d019      	beq.n	80058d6 <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f002 fcde 	bl	8008268 <SDMMC_CmdStopTransfer>
 80058ac:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d010      	beq.n	80058d6 <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e087      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d010      	beq.n	8005906 <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	f043 0208 	orr.w	r2, r3, #8
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e06f      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d010      	beq.n	8005936 <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	f043 0202 	orr.w	r2, r3, #2
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e057      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d037      	beq.n	80059b4 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	f043 0220 	orr.w	r2, r3, #32
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e03f      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f002 fb15 	bl	8007f9a <SDIO_ReadFIFO>
 8005970:	4602      	mov	r2, r0
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	3304      	adds	r3, #4
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800597c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <HAL_SD_ReadBlocks+0x2d2>
 8005982:	f7fd fba5 	bl	80030d0 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800598e:	429a      	cmp	r2, r3
 8005990:	d810      	bhi.n	80059b4 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e018      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1d1      	bne.n	8005966 <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e006      	b.n	80059e6 <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
  }
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	373c      	adds	r7, #60	; 0x3c
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd90      	pop	{r4, r7, pc}

080059ee <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b08e      	sub	sp, #56	; 0x38
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8005a00:	f7fd fb66 	bl	80030d0 <HAL_GetTick>
 8005a04:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d107      	bne.n	8005a24 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e160      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	f040 8153 	bne.w	8005cd8 <HAL_SD_WriteBlocks+0x2ea>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	441a      	add	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d907      	bls.n	8005a56 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e147      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2203      	movs	r2, #3
 8005a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2200      	movs	r2, #0
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d002      	beq.n	8005a74 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	025b      	lsls	r3, r3, #9
 8005a72:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f002 fb3e 	bl	80080fe <SDMMC_CmdBlockLength>
 8005a82:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d010      	beq.n	8005aac <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e11c      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d90a      	bls.n	8005ac8 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f002 fbad 	bl	800821e <SDMMC_CmdWriteMultiBlock>
 8005ac4:	6378      	str	r0, [r7, #52]	; 0x34
 8005ac6:	e009      	b.n	8005adc <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2210      	movs	r2, #16
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f002 fb7e 	bl	80081d6 <SDMMC_CmdWriteSingleBlock>
 8005ada:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af2:	431a      	orrs	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0f0      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b08:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	025b      	lsls	r3, r3, #9
 8005b0e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005b10:	2390      	movs	r3, #144	; 0x90
 8005b12:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f107 0210 	add.w	r2, r7, #16
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 fabb 	bl	80080a6 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b30:	e037      	b.n	8005ba2 <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, /*SDIO_FLAG_TXUNDERR |*/ SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d014      	beq.n	8005b6a <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005b40:	2300      	movs	r3, #0
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
 8005b44:	e00b      	b.n	8005b5e <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b50:	4413      	add	r3, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	f002 fa2e 	bl	8007fb4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	2b07      	cmp	r3, #7
 8005b62:	d9f0      	bls.n	8005b46 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	3320      	adds	r3, #32
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_SD_WriteBlocks+0x192>
 8005b70:	f7fd faae 	bl	80030d0 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d810      	bhi.n	8005ba2 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e0a1      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba8:	f240 331a 	movw	r3, #794	; 0x31a
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0bf      	beq.n	8005b32 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d020      	beq.n	8005c02 <HAL_SD_WriteBlocks+0x214>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d91d      	bls.n	8005c02 <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d019      	beq.n	8005c02 <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f002 fb48 	bl	8008268 <SDMMC_CmdStopTransfer>
 8005bd8:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8005bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d010      	beq.n	8005c02 <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e071      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d010      	beq.n	8005c32 <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	f043 0208 	orr.w	r2, r3, #8
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e059      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d010      	beq.n	8005c62 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	f043 0202 	orr.w	r2, r3, #2
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e041      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d010      	beq.n	8005c92 <HAL_SD_WriteBlocks+0x2a4>
    {
      // Clear all the static flags
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	f043 0210 	orr.w	r2, r3, #16
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e029      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_STA_STBITERR))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <HAL_SD_WriteBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_GENERAL_UNKNOWN_ERR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e011      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e006      	b.n	8005ce6 <HAL_SD_WriteBlocks+0x2f8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3738      	adds	r7, #56	; 0x38
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 808d 	beq.w	8005e26 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005d24:	f023 0302 	bic.w	r3, r3, #2
 8005d28:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d03a      	beq.n	8005dac <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d105      	bne.n	8005d4e <HAL_SD_IRQHandler+0x5e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d011      	beq.n	8005d72 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f002 fa88 	bl	8008268 <SDMMC_CmdStopTransfer>
 8005d58:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f939 	bl	8005fe4 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d105      	bne.n	8005d9c <HAL_SD_IRQHandler+0xac>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f917 	bl	8005fd0 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8005da2:	e103      	b.n	8005fac <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f909 	bl	8005fbc <HAL_SD_TxCpltCallback>
}
 8005daa:	e0ff      	b.n	8005fac <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80f9 	beq.w	8005fac <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d011      	beq.n	8005dea <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f002 fa4c 	bl	8008268 <SDMMC_CmdStopTransfer>
 8005dd0:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f8fd 	bl	8005fe4 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f040 80da 	bne.w	8005fac <HAL_SD_IRQHandler+0x2bc>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f040 80d3 	bne.w	8005fac <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0208 	bic.w	r2, r2, #8
 8005e14:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f8cc 	bl	8005fbc <HAL_SD_TxCpltCallback>
}
 8005e24:	e0c2      	b.n	8005fac <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 ff7b 	bl	8006d3a <SD_Write_IT>
}
 8005e44:	e0b2      	b.n	8005fac <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 ff43 	bl	8006cea <SD_Read_IT>
}
 8005e64:	e0a2      	b.n	8005fac <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6c:	f240 233a 	movw	r3, #570	; 0x23a
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 809a 	beq.w	8005fac <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	f043 0202 	orr.w	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	f043 0208 	orr.w	r2, r3, #8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	f043 0220 	orr.w	r2, r3, #32
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	f043 0210 	orr.w	r2, r3, #16
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	f043 0208 	orr.w	r2, r3, #8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005f12:	f023 0302 	bic.w	r3, r3, #2
 8005f16:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d036      	beq.n	8005f92 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d011      	beq.n	8005f50 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <HAL_SD_IRQHandler+0x2c4>)
 8005f32:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd fa1d 	bl	8003378 <HAL_DMA_Abort_IT>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d033      	beq.n	8005fac <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fb55 	bl	80065f8 <SD_DMATxAbort>
}
 8005f4e:	e02d      	b.n	8005fac <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d011      	beq.n	8005f7c <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5c:	4a16      	ldr	r2, [pc, #88]	; (8005fb8 <HAL_SD_IRQHandler+0x2c8>)
 8005f5e:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fd fa07 	bl	8003378 <HAL_DMA_Abort_IT>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01d      	beq.n	8005fac <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fb7d 	bl	8006674 <SD_DMARxAbort>
}
 8005f7a:	e017      	b.n	8005fac <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f834 	bl	8005ff8 <HAL_SD_AbortCallback>
}
 8005f90:	e00c      	b.n	8005fac <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d006      	beq.n	8005fac <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f81c 	bl	8005fe4 <HAL_SD_ErrorCallback>
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	080065f9 	.word	0x080065f9
 8005fb8:	08006675 	.word	0x08006675

08005fbc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800601e:	0e1b      	lsrs	r3, r3, #24
 8006020:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	099b      	lsrs	r3, r3, #6
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	b2da      	uxtb	r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	089b      	lsrs	r3, r3, #2
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	b2da      	uxtb	r2, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	b2da      	uxtb	r2, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	b2db      	uxtb	r3, r3
 8006058:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	b2db      	uxtb	r3, r3
 800606a:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006078:	b2db      	uxtb	r3, r3
 800607a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006088:	0e1b      	lsrs	r3, r3, #24
 800608a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	b29b      	uxth	r3, r3
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	b29a      	uxth	r2, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800609c:	0c1b      	lsrs	r3, r3, #16
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	88db      	ldrh	r3, [r3, #6]
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4313      	orrs	r3, r2
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ce:	0a1b      	lsrs	r3, r3, #8
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	09db      	lsrs	r3, r3, #7
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	099b      	lsrs	r3, r3, #6
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	b2db      	uxtb	r3, r3
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	b2da      	uxtb	r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 8087 	bne.w	8006232 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	029b      	lsls	r3, r3, #10
 8006128:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006134:	b2db      	uxtb	r3, r3
 8006136:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	431a      	orrs	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800614a:	0e1b      	lsrs	r3, r3, #24
 800614c:	b2db      	uxtb	r3, r3
 800614e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	099b      	lsrs	r3, r3, #6
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	431a      	orrs	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	08db      	lsrs	r3, r3, #3
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	b2da      	uxtb	r2, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	b2da      	uxtb	r2, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006184:	0c1b      	lsrs	r3, r3, #16
 8006186:	b2db      	uxtb	r3, r3
 8006188:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	b2db      	uxtb	r3, r3
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	b2da      	uxtb	r2, r3
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	089b      	lsrs	r3, r3, #2
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f003 0306 	and.w	r3, r3, #6
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c0:	0a1b      	lsrs	r3, r3, #8
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	7e1b      	ldrb	r3, [r3, #24]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	09db      	lsrs	r3, r3, #7
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	4313      	orrs	r3, r2
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	7e1b      	ldrb	r3, [r3, #24]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	3302      	adds	r3, #2
 80061f2:	2201      	movs	r2, #1
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80061fc:	fb02 f203 	mul.w	r2, r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	7a1b      	ldrb	r3, [r3, #8]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	2301      	movs	r3, #1
 800620e:	fa03 f202 	lsl.w	r2, r3, r2
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800621e:	0a52      	lsrs	r2, r2, #9
 8006220:	fb02 f203 	mul.w	r2, r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800622e:	661a      	str	r2, [r3, #96]	; 0x60
 8006230:	e04d      	b.n	80062ce <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	2b01      	cmp	r3, #1
 8006238:	d138      	bne.n	80062ac <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800623e:	b2db      	uxtb	r3, r3
 8006240:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006252:	0e1b      	lsrs	r3, r3, #24
 8006254:	b2db      	uxtb	r3, r3
 8006256:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	431a      	orrs	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	b2db      	uxtb	r3, r3
 800626e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	431a      	orrs	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	b2db      	uxtb	r3, r3
 8006284:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	3301      	adds	r3, #1
 800628c:	029a      	lsls	r2, r3, #10
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	655a      	str	r2, [r3, #84]	; 0x54
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a0:	659a      	str	r2, [r3, #88]	; 0x58
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	661a      	str	r2, [r3, #96]	; 0x60
 80062aa:	e010      	b.n	80062ce <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e0c1      	b.n	8006452 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	099b      	lsrs	r3, r3, #6
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	7e9b      	ldrb	r3, [r3, #26]
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	09db      	lsrs	r3, r3, #7
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4313      	orrs	r3, r2
 800630c:	b2da      	uxtb	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800631a:	b2da      	uxtb	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006324:	0e1b      	lsrs	r3, r3, #24
 8006326:	b2db      	uxtb	r3, r3
 8006328:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	09db      	lsrs	r3, r3, #7
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	b2da      	uxtb	r2, r3
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	089b      	lsrs	r3, r3, #2
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	b2da      	uxtb	r2, r3
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 030c 	and.w	r3, r3, #12
 8006366:	b2da      	uxtb	r2, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	b2db      	uxtb	r3, r3
 8006374:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	7fdb      	ldrb	r3, [r3, #31]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	099b      	lsrs	r3, r3, #6
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	b2db      	uxtb	r3, r3
 8006388:	4313      	orrs	r3, r2
 800638a:	b2da      	uxtb	r2, r3
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	09db      	lsrs	r3, r3, #7
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	099b      	lsrs	r3, r3, #6
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	089b      	lsrs	r3, r3, #2
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	b2da      	uxtb	r2, r3
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	b2da      	uxtb	r2, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	b2db      	uxtb	r3, r3
 8006434:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	085b      	lsrs	r3, r3, #1
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006440:	b2da      	uxtb	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80064b6:	b5b0      	push	{r4, r5, r7, lr}
 80064b8:	b08e      	sub	sp, #56	; 0x38
 80064ba:	af04      	add	r7, sp, #16
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2203      	movs	r2, #3
 80064c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d02e      	beq.n	8006532 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064da:	d106      	bne.n	80064ea <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
 80064e8:	e029      	b.n	800653e <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f0:	d10a      	bne.n	8006508 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa96 	bl	8006a24 <SD_WideBus_Enable>
 80064f8:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
 8006506:	e01a      	b.n	800653e <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fad5 	bl	8006abe <SD_WideBus_Disable>
 8006514:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
 8006522:	e00c      	b.n	800653e <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
 8006530:	e005      	b.n	800653e <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800654e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e024      	b.n	80065a6 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681d      	ldr	r5, [r3, #0]
 8006582:	466c      	mov	r4, sp
 8006584:	f107 0318 	add.w	r3, r7, #24
 8006588:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800658c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006590:	f107 030c 	add.w	r3, r7, #12
 8006594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006596:	4628      	mov	r0, r5
 8006598:	f001 fcd4 	bl	8007f44 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3728      	adds	r7, #40	; 0x28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bdb0      	pop	{r4, r5, r7, pc}

080065ae <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80065b6:	2304      	movs	r3, #4
 80065b8:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fa01 	bl	80069d0 <SD_SendStatus>
 80065ce:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	0a5b      	lsrs	r3, r3, #9
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d127      	bne.n	800666c <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff ffc6 	bl	80065ae <HAL_SD_GetCardState>
 8006622:	4603      	mov	r3, r0
 8006624:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006634:	7afb      	ldrb	r3, [r7, #11]
 8006636:	2b06      	cmp	r3, #6
 8006638:	d002      	beq.n	8006640 <SD_DMATxAbort+0x48>
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	2b05      	cmp	r3, #5
 800663e:	d115      	bne.n	800666c <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f001 fe0f 	bl	8008268 <SDMMC_CmdStopTransfer>
 800664a:	4602      	mov	r2, r0
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	431a      	orrs	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff fcca 	bl	8005ff8 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8006664:	e002      	b.n	800666c <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff fcbc 	bl	8005fe4 <HAL_SD_ErrorCallback>
}
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d127      	bne.n	80066e8 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff ff88 	bl	80065ae <HAL_SD_GetCardState>
 800669e:	4603      	mov	r3, r0
 80066a0:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80066b0:	7afb      	ldrb	r3, [r7, #11]
 80066b2:	2b06      	cmp	r3, #6
 80066b4:	d002      	beq.n	80066bc <SD_DMARxAbort+0x48>
 80066b6:	7afb      	ldrb	r3, [r7, #11]
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	d115      	bne.n	80066e8 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fdd1 	bl	8008268 <SDMMC_CmdStopTransfer>
 80066c6:	4602      	mov	r2, r0
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	431a      	orrs	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7ff fc8c 	bl	8005ff8 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 80066e0:	e002      	b.n	80066e8 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff fc7e 	bl	8005fe4 <HAL_SD_ErrorCallback>
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066f0:	b5b0      	push	{r4, r5, r7, lr}
 80066f2:	b094      	sub	sp, #80	; 0x50
 80066f4:	af04      	add	r7, sp, #16
 80066f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80066fc:	2301      	movs	r3, #1
 80066fe:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fc74 	bl	8007ff2 <SDIO_GetPowerState>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006710:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006714:	e0b0      	b.n	8006878 <SD_InitCard+0x188>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671a:	2b03      	cmp	r3, #3
 800671c:	d02f      	beq.n	800677e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f001 feba 	bl	800849c <SDMMC_CmdSendCID>
 8006728:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <SD_InitCard+0x44>
    {
      return errorstate;
 8006730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006732:	e0a1      	b.n	8006878 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f001 fc9e 	bl	800807c <SDIO_GetResponse>
 8006740:	4602      	mov	r2, r0
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2104      	movs	r1, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f001 fc95 	bl	800807c <SDIO_GetResponse>
 8006752:	4602      	mov	r2, r0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2108      	movs	r1, #8
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fc8c 	bl	800807c <SDIO_GetResponse>
 8006764:	4602      	mov	r2, r0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	210c      	movs	r1, #12
 8006770:	4618      	mov	r0, r3
 8006772:	f001 fc83 	bl	800807c <SDIO_GetResponse>
 8006776:	4602      	mov	r2, r0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	2b03      	cmp	r3, #3
 8006784:	d00d      	beq.n	80067a2 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f107 020e 	add.w	r2, r7, #14
 800678e:	4611      	mov	r1, r2
 8006790:	4618      	mov	r0, r3
 8006792:	f001 fec4 	bl	800851e <SDMMC_CmdSetRelAdd>
 8006796:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <SD_InitCard+0xb2>
    {
      return errorstate;
 800679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a0:	e06a      	b.n	8006878 <SD_InitCard+0x188>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d036      	beq.n	8006818 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067aa:	89fb      	ldrh	r3, [r7, #14]
 80067ac:	461a      	mov	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f001 fe8c 	bl	80084dc <SDMMC_CmdSendCSD>
 80067c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <SD_InitCard+0xe0>
    {
      return errorstate;
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	e053      	b.n	8006878 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 fc50 	bl	800807c <SDIO_GetResponse>
 80067dc:	4602      	mov	r2, r0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2104      	movs	r1, #4
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 fc47 	bl	800807c <SDIO_GetResponse>
 80067ee:	4602      	mov	r2, r0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2108      	movs	r1, #8
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 fc3e 	bl	800807c <SDIO_GetResponse>
 8006800:	4602      	mov	r2, r0
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	210c      	movs	r1, #12
 800680c:	4618      	mov	r0, r3
 800680e:	f001 fc35 	bl	800807c <SDIO_GetResponse>
 8006812:	4602      	mov	r2, r0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2104      	movs	r1, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f001 fc2c 	bl	800807c <SDIO_GetResponse>
 8006824:	4603      	mov	r3, r0
 8006826:	0d1a      	lsrs	r2, r3, #20
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800682c:	f107 0310 	add.w	r3, r7, #16
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff fbea 	bl	800600c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006840:	041b      	lsls	r3, r3, #16
 8006842:	461a      	mov	r2, r3
 8006844:	f04f 0300 	mov.w	r3, #0
 8006848:	4608      	mov	r0, r1
 800684a:	f001 fd31 	bl	80082b0 <SDMMC_CmdSelDesel>
 800684e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <SD_InitCard+0x16a>
  {
    return errorstate;
 8006856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006858:	e00e      	b.n	8006878 <SD_InitCard+0x188>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681d      	ldr	r5, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	466c      	mov	r4, sp
 8006862:	f103 0210 	add.w	r2, r3, #16
 8006866:	ca07      	ldmia	r2, {r0, r1, r2}
 8006868:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800686c:	3304      	adds	r3, #4
 800686e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006870:	4628      	mov	r0, r5
 8006872:	f001 fb67 	bl	8007f44 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3740      	adds	r7, #64	; 0x40
 800687c:	46bd      	mov	sp, r7
 800687e:	bdb0      	pop	{r4, r5, r7, pc}

08006880 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f001 fd2c 	bl	80082fa <SDMMC_CmdGoIdleState>
 80068a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <SD_PowerON+0x2e>
  {
    return errorstate;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	e08c      	b.n	80069c8 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 fd41 	bl	800833a <SDMMC_CmdOperCond>
 80068b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d03d      	beq.n	800693c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80068c6:	e032      	b.n	800692e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	60ba      	str	r2, [r7, #8]
 80068ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d102      	bne.n	80068dc <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80068d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068da:	e075      	b.n	80069c8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2100      	movs	r1, #0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 fd4a 	bl	800837c <SDMMC_CmdAppCommand>
 80068e8:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068f4:	e068      	b.n	80069c8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f001 fd61 	bl	80083c4 <SDMMC_CmdAppOperCommand>
 8006902:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800690a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800690e:	e05b      	b.n	80069c8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fbb0 	bl	800807c <SDIO_GetResponse>
 800691c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	0fdb      	lsrs	r3, r3, #31
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <SD_PowerON+0xaa>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <SD_PowerON+0xac>
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0c9      	beq.n	80068c8 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	645a      	str	r2, [r3, #68]	; 0x44
 800693a:	e044      	b.n	80069c6 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8006942:	e031      	b.n	80069a8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	60ba      	str	r2, [r7, #8]
 800694a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800694e:	4293      	cmp	r3, r2
 8006950:	d102      	bne.n	8006958 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006956:	e037      	b.n	80069c8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f001 fd0c 	bl	800837c <SDMMC_CmdAppCommand>
 8006964:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <SD_PowerON+0xf0>
      {
        return errorstate;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	e02b      	b.n	80069c8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006978:	4618      	mov	r0, r3
 800697a:	f001 fd23 	bl	80083c4 <SDMMC_CmdAppOperCommand>
 800697e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <SD_PowerON+0x10a>
      {
        return errorstate;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	e01e      	b.n	80069c8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fb73 	bl	800807c <SDIO_GetResponse>
 8006996:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	0fdb      	lsrs	r3, r3, #31
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <SD_PowerON+0x124>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <SD_PowerON+0x126>
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0ca      	beq.n	8006944 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	645a      	str	r2, [r3, #68]	; 0x44
 80069be:	e002      	b.n	80069c6 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80069e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069e8:	e018      	b.n	8006a1c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f2:	041b      	lsls	r3, r3, #16
 80069f4:	4619      	mov	r1, r3
 80069f6:	4610      	mov	r0, r2
 80069f8:	f001 fdb4 	bl	8008564 <SDMMC_CmdSendStatus>
 80069fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <SD_SendStatus+0x38>
  {
    return errorstate;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	e009      	b.n	8006a1c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 fb34 	bl	800807c <SDIO_GetResponse>
 8006a14:	4602      	mov	r2, r0
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	2300      	movs	r3, #0
 8006a32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 fb1c 	bl	800807c <SDIO_GetResponse>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a4e:	d102      	bne.n	8006a56 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a54:	e02f      	b.n	8006ab6 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a56:	f107 030c 	add.w	r3, r7, #12
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f87b 	bl	8006b58 <SD_FindSCR>
 8006a62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	e023      	b.n	8006ab6 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01c      	beq.n	8006ab2 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a80:	041b      	lsls	r3, r3, #16
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f001 fc79 	bl	800837c <SDMMC_CmdAppCommand>
 8006a8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	e00f      	b.n	8006ab6 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2102      	movs	r1, #2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fcb6 	bl	800840e <SDMMC_CmdBusWidth>
 8006aa2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	e003      	b.n	8006ab6 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e001      	b.n	8006ab6 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ab2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b086      	sub	sp, #24
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	2300      	movs	r3, #0
 8006acc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 facf 	bl	800807c <SDIO_GetResponse>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ae8:	d102      	bne.n	8006af0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006aee:	e02f      	b.n	8006b50 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006af0:	f107 030c 	add.w	r3, r7, #12
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f82e 	bl	8006b58 <SD_FindSCR>
 8006afc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	e023      	b.n	8006b50 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01c      	beq.n	8006b4c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1a:	041b      	lsls	r3, r3, #16
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f001 fc2c 	bl	800837c <SDMMC_CmdAppCommand>
 8006b24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	e00f      	b.n	8006b50 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2100      	movs	r1, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 fc69 	bl	800840e <SDMMC_CmdBusWidth>
 8006b3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	e003      	b.n	8006b50 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e001      	b.n	8006b50 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b08f      	sub	sp, #60	; 0x3c
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8006b66:	f7fc fab3 	bl	80030d0 <HAL_GetTick>
 8006b6a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2108      	movs	r1, #8
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 fabd 	bl	80080fe <SDMMC_CmdBlockLength>
 8006b84:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	e0a8      	b.n	8006ce2 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	041b      	lsls	r3, r3, #16
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f001 fbed 	bl	800837c <SDMMC_CmdAppCommand>
 8006ba2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <SD_FindSCR+0x56>
  {
    return errorstate;
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	e099      	b.n	8006ce2 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bb2:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8006bb4:	2308      	movs	r3, #8
 8006bb6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006bb8:	2330      	movs	r3, #48	; 0x30
 8006bba:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f107 0214 	add.w	r2, r7, #20
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 fa67 	bl	80080a6 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 fc3a 	bl	8008456 <SDMMC_CmdSendSCR>
 8006be2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d022      	beq.n	8006c30 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	e079      	b.n	8006ce2 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00e      	beq.n	8006c1a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	f107 020c 	add.w	r2, r7, #12
 8006c08:	18d4      	adds	r4, r2, r3
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	f001 f9c5 	bl	8007f9a <SDIO_ReadFIFO>
 8006c10:	4603      	mov	r3, r0
 8006c12:	6023      	str	r3, [r4, #0]
      index++;
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	3301      	adds	r3, #1
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c1a:	f7fc fa59 	bl	80030d0 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c28:	d102      	bne.n	8006c30 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006c2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c2e:	e058      	b.n	8006ce2 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c36:	f240 432a 	movw	r3, #1066	; 0x42a
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0d6      	beq.n	8006bee <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2208      	movs	r2, #8
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c56:	2308      	movs	r3, #8
 8006c58:	e043      	b.n	8006ce2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c70:	2302      	movs	r3, #2
 8006c72:	e036      	b.n	8006ce2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2220      	movs	r2, #32
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8006c8a:	2320      	movs	r3, #32
 8006c8c:	e029      	b.n	8006ce2 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	061a      	lsls	r2, r3, #24
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ca4:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	0a1b      	lsrs	r3, r3, #8
 8006caa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006cae:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006cba:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006cbc:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	061a      	lsls	r2, r3, #24
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cca:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	0a1b      	lsrs	r3, r3, #8
 8006cd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006cd4:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	0e1b      	lsrs	r3, r3, #24
 8006cda:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	373c      	adds	r7, #60	; 0x3c
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd90      	pop	{r4, r7, pc}

08006cea <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006cea:	b590      	push	{r4, r7, lr}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e00d      	b.n	8006d1e <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6819      	ldr	r1, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	18d4      	adds	r4, r2, r3
 8006d0e:	4608      	mov	r0, r1
 8006d10:	f001 f943 	bl	8007f9a <SDIO_ReadFIFO>
 8006d14:	4603      	mov	r3, r0
 8006d16:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b07      	cmp	r3, #7
 8006d22:	d9ee      	bls.n	8006d02 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	f103 0220 	add.w	r2, r3, #32
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd90      	pop	{r4, r7, pc}

08006d3a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e00b      	b.n	8006d6a <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f001 f928 	bl	8007fb4 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b07      	cmp	r3, #7
 8006d6e:	d9f0      	bls.n	8006d52 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	f103 0220 	add.w	r2, r3, #32
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e01d      	b.n	8006dd4 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f002 fc3b 	bl	8009628 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f000 f955 	bl	8007074 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d122      	bne.n	8006e6e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d11b      	bne.n	8006e6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f06f 0202 	mvn.w	r2, #2
 8006e3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8ee 	bl	8007036 <HAL_TIM_IC_CaptureCallback>
 8006e5a:	e005      	b.n	8006e68 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f8e0 	bl	8007022 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f8f1 	bl	800704a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d122      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d11b      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f06f 0204 	mvn.w	r2, #4
 8006e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f8c4 	bl	8007036 <HAL_TIM_IC_CaptureCallback>
 8006eae:	e005      	b.n	8006ebc <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f8b6 	bl	8007022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f8c7 	bl	800704a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d122      	bne.n	8006f16 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	d11b      	bne.n	8006f16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f06f 0208 	mvn.w	r2, #8
 8006ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2204      	movs	r2, #4
 8006eec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f003 0303 	and.w	r3, r3, #3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f89a 	bl	8007036 <HAL_TIM_IC_CaptureCallback>
 8006f02:	e005      	b.n	8006f10 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f88c 	bl	8007022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f89d 	bl	800704a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b10      	cmp	r3, #16
 8006f22:	d122      	bne.n	8006f6a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d11b      	bne.n	8006f6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f06f 0210 	mvn.w	r2, #16
 8006f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2208      	movs	r2, #8
 8006f40:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f870 	bl	8007036 <HAL_TIM_IC_CaptureCallback>
 8006f56:	e005      	b.n	8006f64 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f862 	bl	8007022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f873 	bl	800704a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d10e      	bne.n	8006f96 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d107      	bne.n	8006f96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f06f 0201 	mvn.w	r2, #1
 8006f8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7fb ffe9 	bl	8002f68 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa0:	2b80      	cmp	r3, #128	; 0x80
 8006fa2:	d10e      	bne.n	8006fc2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fae:	2b80      	cmp	r3, #128	; 0x80
 8006fb0:	d107      	bne.n	8006fc2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f90d 	bl	80071dc <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fcc:	2b40      	cmp	r3, #64	; 0x40
 8006fce:	d10e      	bne.n	8006fee <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d107      	bne.n	8006fee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fe6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f838 	bl	800705e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f003 0320 	and.w	r3, r3, #32
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d10e      	bne.n	800701a <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b20      	cmp	r3, #32
 8007008:	d107      	bne.n	800701a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f06f 0220 	mvn.w	r2, #32
 8007012:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f8d7 	bl	80071c8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800703e:	bf00      	nop
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a44      	ldr	r2, [pc, #272]	; (800719c <TIM_Base_SetConfig+0x128>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d013      	beq.n	80070b8 <TIM_Base_SetConfig+0x44>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007096:	d00f      	beq.n	80070b8 <TIM_Base_SetConfig+0x44>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a41      	ldr	r2, [pc, #260]	; (80071a0 <TIM_Base_SetConfig+0x12c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00b      	beq.n	80070b8 <TIM_Base_SetConfig+0x44>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a40      	ldr	r2, [pc, #256]	; (80071a4 <TIM_Base_SetConfig+0x130>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d007      	beq.n	80070b8 <TIM_Base_SetConfig+0x44>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a3f      	ldr	r2, [pc, #252]	; (80071a8 <TIM_Base_SetConfig+0x134>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_Base_SetConfig+0x44>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a3e      	ldr	r2, [pc, #248]	; (80071ac <TIM_Base_SetConfig+0x138>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d101      	bne.n	80070bc <TIM_Base_SetConfig+0x48>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <TIM_Base_SetConfig+0x4a>
 80070bc:	2300      	movs	r3, #0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d008      	beq.n	80070d4 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a31      	ldr	r2, [pc, #196]	; (800719c <TIM_Base_SetConfig+0x128>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d02b      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e2:	d027      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a2e      	ldr	r2, [pc, #184]	; (80071a0 <TIM_Base_SetConfig+0x12c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d023      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <TIM_Base_SetConfig+0x130>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d01f      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a2c      	ldr	r2, [pc, #176]	; (80071a8 <TIM_Base_SetConfig+0x134>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d01b      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a2b      	ldr	r2, [pc, #172]	; (80071ac <TIM_Base_SetConfig+0x138>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d017      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <TIM_Base_SetConfig+0x13c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d013      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a29      	ldr	r2, [pc, #164]	; (80071b4 <TIM_Base_SetConfig+0x140>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00f      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a28      	ldr	r2, [pc, #160]	; (80071b8 <TIM_Base_SetConfig+0x144>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00b      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a27      	ldr	r2, [pc, #156]	; (80071bc <TIM_Base_SetConfig+0x148>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d007      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a26      	ldr	r2, [pc, #152]	; (80071c0 <TIM_Base_SetConfig+0x14c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_Base_SetConfig+0xc0>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a25      	ldr	r2, [pc, #148]	; (80071c4 <TIM_Base_SetConfig+0x150>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d101      	bne.n	8007138 <TIM_Base_SetConfig+0xc4>
 8007134:	2301      	movs	r3, #1
 8007136:	e000      	b.n	800713a <TIM_Base_SetConfig+0xc6>
 8007138:	2300      	movs	r3, #0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a0c      	ldr	r2, [pc, #48]	; (800719c <TIM_Base_SetConfig+0x128>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_Base_SetConfig+0x102>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a0e      	ldr	r2, [pc, #56]	; (80071ac <TIM_Base_SetConfig+0x138>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d101      	bne.n	800717a <TIM_Base_SetConfig+0x106>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <TIM_Base_SetConfig+0x108>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	615a      	str	r2, [r3, #20]
}
 800718e:	bf00      	nop
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40010000 	.word	0x40010000
 80071a0:	40000400 	.word	0x40000400
 80071a4:	40000800 	.word	0x40000800
 80071a8:	40000c00 	.word	0x40000c00
 80071ac:	40010400 	.word	0x40010400
 80071b0:	40014000 	.word	0x40014000
 80071b4:	40014400 	.word	0x40014400
 80071b8:	40014800 	.word	0x40014800
 80071bc:	40001800 	.word	0x40001800
 80071c0:	40001c00 	.word	0x40001c00
 80071c4:	40002000 	.word	0x40002000

080071c8 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e03f      	b.n	8007282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d106      	bne.n	800721c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f002 fa28 	bl	800966c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2224      	movs	r2, #36	; 0x24
 8007220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007232:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fc45 	bl	8007ac4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695a      	ldr	r2, [r3, #20]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007258:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007268:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b088      	sub	sp, #32
 800728e:	af02      	add	r7, sp, #8
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	603b      	str	r3, [r7, #0]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	f040 8083 	bne.w	80073b2 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_UART_Transmit+0x2e>
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e07b      	b.n	80073b4 <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Transmit+0x40>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e074      	b.n	80073b4 <HAL_UART_Transmit+0x12a>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2221      	movs	r2, #33	; 0x21
 80072dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80072e0:	f7fb fef6 	bl	80030d0 <HAL_GetTick>
 80072e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80072f2:	e042      	b.n	800737a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730a:	d122      	bne.n	8007352 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2200      	movs	r2, #0
 8007314:	2180      	movs	r1, #128	; 0x80
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 fa52 	bl	80077c0 <UART_WaitOnFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e046      	b.n	80073b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007338:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	3302      	adds	r3, #2
 8007346:	60bb      	str	r3, [r7, #8]
 8007348:	e017      	b.n	800737a <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3301      	adds	r3, #1
 800734e:	60bb      	str	r3, [r7, #8]
 8007350:	e013      	b.n	800737a <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2200      	movs	r2, #0
 800735a:	2180      	movs	r1, #128	; 0x80
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fa2f 	bl	80077c0 <UART_WaitOnFlagUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e023      	b.n	80073b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	60ba      	str	r2, [r7, #8]
 8007372:	781a      	ldrb	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1b7      	bne.n	80072f4 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2200      	movs	r2, #0
 800738c:	2140      	movs	r1, #64	; 0x40
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 fa16 	bl	80077c0 <UART_WaitOnFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e00a      	b.n	80073b4 <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	e000      	b.n	80073b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80073b2:	2302      	movs	r3, #2
  }
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b20      	cmp	r3, #32
 80073da:	f040 8090 	bne.w	80074fe <HAL_UART_Receive+0x142>
  { 
    if((pData == NULL ) || (Size == 0)) 
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_UART_Receive+0x2e>
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e088      	b.n	8007500 <HAL_UART_Receive+0x144>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_UART_Receive+0x40>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e081      	b.n	8007500 <HAL_UART_Receive+0x144>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2222      	movs	r2, #34	; 0x22
 800740e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007412:	f7fb fe5d 	bl	80030d0 <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]
        
    huart->RxXferSize = Size; 
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	88fa      	ldrh	r2, [r7, #6]
 8007422:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8007424:	e05c      	b.n	80074e0 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743c:	d12b      	bne.n	8007496 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2200      	movs	r2, #0
 8007446:	2120      	movs	r1, #32
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f9b9 	bl	80077c0 <UART_WaitOnFlagUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <HAL_UART_Receive+0x9c>
        { 
          return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e053      	b.n	8007500 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*) pData;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10c      	bne.n	800747e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	b29b      	uxth	r3, r3
 800746c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007470:	b29a      	uxth	r2, r3
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	3302      	adds	r3, #2
 800747a:	60bb      	str	r3, [r7, #8]
 800747c:	e030      	b.n	80074e0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	b29b      	uxth	r3, r3
 8007486:	b2db      	uxtb	r3, r3
 8007488:	b29a      	uxth	r2, r3
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	3301      	adds	r3, #1
 8007492:	60bb      	str	r3, [r7, #8]
 8007494:	e024      	b.n	80074e0 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2200      	movs	r2, #0
 800749e:	2120      	movs	r1, #32
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 f98d 	bl	80077c0 <UART_WaitOnFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <HAL_UART_Receive+0xf4>
        { 
          return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e027      	b.n	8007500 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d108      	bne.n	80074ca <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6859      	ldr	r1, [r3, #4]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	60ba      	str	r2, [r7, #8]
 80074c4:	b2ca      	uxtb	r2, r1
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	e00a      	b.n	80074e0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	1c59      	adds	r1, r3, #1
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d19d      	bne.n	8007426 <HAL_UART_Receive+0x6a>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e000      	b.n	8007500 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;   
 80074fe:	2302      	movs	r3, #2
  }
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b20      	cmp	r3, #32
 8007520:	d138      	bne.n	8007594 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_UART_Receive_IT+0x26>
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e031      	b.n	8007596 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_UART_Receive_IT+0x38>
 800753c:	2302      	movs	r3, #2
 800753e:	e02a      	b.n	8007596 <HAL_UART_Receive_IT+0x8e>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	88fa      	ldrh	r2, [r7, #6]
 8007552:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	88fa      	ldrh	r2, [r7, #6]
 8007558:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2222      	movs	r2, #34	; 0x22
 8007564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695a      	ldr	r2, [r3, #20]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800758e:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	e000      	b.n	8007596 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8007594:	2302      	movs	r3, #2
  }
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
	...

080075a4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10d      	bne.n	80075f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d008      	beq.n	80075f6 <HAL_UART_IRQHandler+0x52>
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f003 0320 	and.w	r3, r3, #32
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f9d0 	bl	8007994 <UART_Receive_IT>
      return;
 80075f4:	e0cb      	b.n	800778e <HAL_UART_IRQHandler+0x1ea>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 80ab 	beq.w	8007754 <HAL_UART_IRQHandler+0x1b0>
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d105      	bne.n	8007614 <HAL_UART_IRQHandler+0x70>
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 80a0 	beq.w	8007754 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_UART_IRQHandler+0x90>
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007624:	2b00      	cmp	r3, #0
 8007626:	d005      	beq.n	8007634 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	f043 0201 	orr.w	r2, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <HAL_UART_IRQHandler+0xb0>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764c:	f043 0202 	orr.w	r2, r3, #2
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_UART_IRQHandler+0xd0>
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766c:	f043 0204 	orr.w	r2, r3, #4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	f003 0308 	and.w	r3, r3, #8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <HAL_UART_IRQHandler+0xf0>
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768c:	f043 0208 	orr.w	r2, r3, #8
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d077      	beq.n	800778c <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <HAL_UART_IRQHandler+0x112>
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	f003 0320 	and.w	r3, r3, #32
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f96f 	bl	8007994 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bf14      	ite	ne
 80076c4:	2301      	movne	r3, #1
 80076c6:	2300      	moveq	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <HAL_UART_IRQHandler+0x13a>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d031      	beq.n	8007742 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f8b8 	bl	8007854 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d023      	beq.n	800773a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	695a      	ldr	r2, [r3, #20]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007700:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007706:	2b00      	cmp	r3, #0
 8007708:	d013      	beq.n	8007732 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	4a21      	ldr	r2, [pc, #132]	; (8007794 <HAL_UART_IRQHandler+0x1f0>)
 8007710:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007716:	4618      	mov	r0, r3
 8007718:	f7fb fe2e 	bl	8003378 <HAL_DMA_Abort_IT>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d016      	beq.n	8007750 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007730:	e00e      	b.n	8007750 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f83a 	bl	80077ac <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007738:	e00a      	b.n	8007750 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f836 	bl	80077ac <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007740:	e006      	b.n	8007750 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f832 	bl	80077ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800774e:	e01d      	b.n	800778c <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007750:	bf00      	nop
    return;
 8007752:	e01b      	b.n	800778c <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <HAL_UART_IRQHandler+0x1cc>
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f8a5 	bl	80078b8 <UART_Transmit_IT>
    return;
 800776e:	e00e      	b.n	800778e <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <HAL_UART_IRQHandler+0x1ea>
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f8ed 	bl	8007964 <UART_EndTransmit_IT>
    return;
 800778a:	e000      	b.n	800778e <HAL_UART_IRQHandler+0x1ea>
    return;
 800778c:	bf00      	nop
  }
}
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	08007891 	.word	0x08007891

08007798 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	4613      	mov	r3, r2
 80077ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80077d0:	e02c      	b.n	800782c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077d8:	d028      	beq.n	800782c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077e0:	f7fb fc76 	bl	80030d0 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d21d      	bcs.n	800782c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695a      	ldr	r2, [r3, #20]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e00f      	b.n	800784c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	4013      	ands	r3, r2
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	429a      	cmp	r2, r3
 800783a:	bf0c      	ite	eq
 800783c:	2301      	moveq	r3, #1
 800783e:	2300      	movne	r3, #0
 8007840:	b2db      	uxtb	r3, r3
 8007842:	461a      	mov	r2, r3
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	429a      	cmp	r2, r3
 8007848:	d0c3      	beq.n	80077d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800786a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695a      	ldr	r2, [r3, #20]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0201 	bic.w	r2, r2, #1
 800787a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7ff ff7e 	bl	80077ac <HAL_UART_ErrorCallback>
}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b21      	cmp	r3, #33	; 0x21
 80078ca:	d144      	bne.n	8007956 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d4:	d11a      	bne.n	800790c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078ea:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d105      	bne.n	8007900 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	621a      	str	r2, [r3, #32]
 80078fe:	e00e      	b.n	800791e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	621a      	str	r2, [r3, #32]
 800790a:	e008      	b.n	800791e <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	1c59      	adds	r1, r3, #1
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6211      	str	r1, [r2, #32]
 8007916:	781a      	ldrb	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007922:	b29b      	uxth	r3, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	b29b      	uxth	r3, r3
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	4619      	mov	r1, r3
 800792c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10f      	bne.n	8007952 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	e000      	b.n	8007958 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007956:	2302      	movs	r3, #2
  }
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797a:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff ff07 	bl	8007798 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]


  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b22      	cmp	r3, #34	; 0x22
 80079a6:	f040 8088 	bne.w	8007aba <UART_Receive_IT+0x126>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b2:	d123      	bne.n	80079fc <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10e      	bne.n	80079e0 <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d8:	1c9a      	adds	r2, r3, #2
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	629a      	str	r2, [r3, #40]	; 0x28
 80079de:	e029      	b.n	8007a34 <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	629a      	str	r2, [r3, #40]	; 0x28
 80079fa:	e01b      	b.n	8007a34 <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6858      	ldr	r0, [r3, #4]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	1c59      	adds	r1, r3, #1
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6291      	str	r1, [r2, #40]	; 0x28
 8007a14:	b2c2      	uxtb	r2, r0
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e00c      	b.n	8007a34 <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	1c58      	adds	r0, r3, #1
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	6288      	str	r0, [r1, #40]	; 0x28
 8007a2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	4619      	mov	r1, r3
 8007a42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d136      	bne.n	8007ab6 <UART_Receive_IT+0x122>
    {
        //This allows the buffer to resize based on length of the Ground Station commands over UART
        if((*(huart->pRxBuffPtr-1)!= 0) && (huart->RxXferSize == 4)){
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d017      	beq.n	8007a84 <UART_Receive_IT+0xf0>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d113      	bne.n	8007a84 <UART_Receive_IT+0xf0>
            huart->RxXferCount = *(huart->pRxBuffPtr-1) + 1;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	3b01      	subs	r3, #1
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3301      	adds	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	85da      	strh	r2, [r3, #46]	; 0x2e
            huart->RxXferSize = *(huart->pRxBuffPtr-1) + 5;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	3b01      	subs	r3, #1
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3305      	adds	r3, #5
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	859a      	strh	r2, [r3, #44]	; 0x2c
            return HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	e01b      	b.n	8007abc <UART_Receive_IT+0x128>
        }
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695a      	ldr	r2, [r3, #20]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0201 	bic.w	r2, r2, #1
 8007aa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7fb fa93 	bl	8002fd8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e002      	b.n	8007abc <UART_Receive_IT+0x128>
    }
    return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e000      	b.n	8007abc <UART_Receive_IT+0x128>
  }
  else
  {
    return HAL_BUSY;
 8007aba:	2302      	movs	r3, #2
  }

#endif
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac4:	b5b0      	push	{r4, r5, r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b00:	f023 030c 	bic.w	r3, r3, #12
 8007b04:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b38:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b54:	f040 80e4 	bne.w	8007d20 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4aab      	ldr	r2, [pc, #684]	; (8007e0c <UART_SetConfig+0x348>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d004      	beq.n	8007b6c <UART_SetConfig+0xa8>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4aaa      	ldr	r2, [pc, #680]	; (8007e10 <UART_SetConfig+0x34c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d16c      	bne.n	8007c46 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007b6c:	f7fd faae 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007b70:	4602      	mov	r2, r0
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009a      	lsls	r2, r3, #2
 8007b7a:	441a      	add	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b86:	4aa3      	ldr	r2, [pc, #652]	; (8007e14 <UART_SetConfig+0x350>)
 8007b88:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	011c      	lsls	r4, r3, #4
 8007b90:	f7fd fa9c 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007b94:	4602      	mov	r2, r0
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009a      	lsls	r2, r3, #2
 8007b9e:	441a      	add	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	fbb2 f5f3 	udiv	r5, r2, r3
 8007baa:	f7fd fa8f 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009a      	lsls	r2, r3, #2
 8007bb8:	441a      	add	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	005b      	lsls	r3, r3, #1
 8007bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc4:	4a93      	ldr	r2, [pc, #588]	; (8007e14 <UART_SetConfig+0x350>)
 8007bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	2264      	movs	r2, #100	; 0x64
 8007bce:	fb02 f303 	mul.w	r3, r2, r3
 8007bd2:	1aeb      	subs	r3, r5, r3
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	3332      	adds	r3, #50	; 0x32
 8007bd8:	4a8e      	ldr	r2, [pc, #568]	; (8007e14 <UART_SetConfig+0x350>)
 8007bda:	fba2 2303 	umull	r2, r3, r2, r3
 8007bde:	095b      	lsrs	r3, r3, #5
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007be6:	441c      	add	r4, r3
 8007be8:	f7fd fa70 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007bec:	4602      	mov	r2, r0
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009a      	lsls	r2, r3, #2
 8007bf6:	441a      	add	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	fbb2 f5f3 	udiv	r5, r2, r3
 8007c02:	f7fd fa63 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007c06:	4602      	mov	r2, r0
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009a      	lsls	r2, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1c:	4a7d      	ldr	r2, [pc, #500]	; (8007e14 <UART_SetConfig+0x350>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	2264      	movs	r2, #100	; 0x64
 8007c26:	fb02 f303 	mul.w	r3, r2, r3
 8007c2a:	1aeb      	subs	r3, r5, r3
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	3332      	adds	r3, #50	; 0x32
 8007c30:	4a78      	ldr	r2, [pc, #480]	; (8007e14 <UART_SetConfig+0x350>)
 8007c32:	fba2 2303 	umull	r2, r3, r2, r3
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	f003 0207 	and.w	r2, r3, #7
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4422      	add	r2, r4
 8007c42:	609a      	str	r2, [r3, #8]
 8007c44:	e154      	b.n	8007ef0 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007c46:	f7fd fa1f 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009a      	lsls	r2, r3, #2
 8007c54:	441a      	add	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c60:	4a6c      	ldr	r2, [pc, #432]	; (8007e14 <UART_SetConfig+0x350>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	011c      	lsls	r4, r3, #4
 8007c6a:	f7fd fa0d 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	4613      	mov	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	009a      	lsls	r2, r3, #2
 8007c78:	441a      	add	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	fbb2 f5f3 	udiv	r5, r2, r3
 8007c84:	f7fd fa00 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009a      	lsls	r2, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9e:	4a5d      	ldr	r2, [pc, #372]	; (8007e14 <UART_SetConfig+0x350>)
 8007ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca4:	095b      	lsrs	r3, r3, #5
 8007ca6:	2264      	movs	r2, #100	; 0x64
 8007ca8:	fb02 f303 	mul.w	r3, r2, r3
 8007cac:	1aeb      	subs	r3, r5, r3
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	3332      	adds	r3, #50	; 0x32
 8007cb2:	4a58      	ldr	r2, [pc, #352]	; (8007e14 <UART_SetConfig+0x350>)
 8007cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cc0:	441c      	add	r4, r3
 8007cc2:	f7fd f9e1 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009a      	lsls	r2, r3, #2
 8007cd0:	441a      	add	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	fbb2 f5f3 	udiv	r5, r2, r3
 8007cdc:	f7fd f9d4 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009a      	lsls	r2, r3, #2
 8007cea:	441a      	add	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf6:	4a47      	ldr	r2, [pc, #284]	; (8007e14 <UART_SetConfig+0x350>)
 8007cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	2264      	movs	r2, #100	; 0x64
 8007d00:	fb02 f303 	mul.w	r3, r2, r3
 8007d04:	1aeb      	subs	r3, r5, r3
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	3332      	adds	r3, #50	; 0x32
 8007d0a:	4a42      	ldr	r2, [pc, #264]	; (8007e14 <UART_SetConfig+0x350>)
 8007d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	f003 0207 	and.w	r2, r3, #7
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4422      	add	r2, r4
 8007d1c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007d1e:	e0e7      	b.n	8007ef0 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a39      	ldr	r2, [pc, #228]	; (8007e0c <UART_SetConfig+0x348>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d004      	beq.n	8007d34 <UART_SetConfig+0x270>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a38      	ldr	r2, [pc, #224]	; (8007e10 <UART_SetConfig+0x34c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d171      	bne.n	8007e18 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007d34:	f7fd f9ca 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	009a      	lsls	r2, r3, #2
 8007d42:	441a      	add	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4e:	4a31      	ldr	r2, [pc, #196]	; (8007e14 <UART_SetConfig+0x350>)
 8007d50:	fba2 2303 	umull	r2, r3, r2, r3
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	011c      	lsls	r4, r3, #4
 8007d58:	f7fd f9b8 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009a      	lsls	r2, r3, #2
 8007d66:	441a      	add	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007d72:	f7fd f9ab 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007d76:	4602      	mov	r2, r0
 8007d78:	4613      	mov	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009a      	lsls	r2, r3, #2
 8007d80:	441a      	add	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8c:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <UART_SetConfig+0x350>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	2264      	movs	r2, #100	; 0x64
 8007d96:	fb02 f303 	mul.w	r3, r2, r3
 8007d9a:	1aeb      	subs	r3, r5, r3
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	3332      	adds	r3, #50	; 0x32
 8007da0:	4a1c      	ldr	r2, [pc, #112]	; (8007e14 <UART_SetConfig+0x350>)
 8007da2:	fba2 2303 	umull	r2, r3, r2, r3
 8007da6:	095b      	lsrs	r3, r3, #5
 8007da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dac:	441c      	add	r4, r3
 8007dae:	f7fd f98d 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007db2:	4602      	mov	r2, r0
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009a      	lsls	r2, r3, #2
 8007dbc:	441a      	add	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	fbb2 f5f3 	udiv	r5, r2, r3
 8007dc8:	f7fd f980 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009a      	lsls	r2, r3, #2
 8007dd6:	441a      	add	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de2:	4a0c      	ldr	r2, [pc, #48]	; (8007e14 <UART_SetConfig+0x350>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	2264      	movs	r2, #100	; 0x64
 8007dec:	fb02 f303 	mul.w	r3, r2, r3
 8007df0:	1aeb      	subs	r3, r5, r3
 8007df2:	011b      	lsls	r3, r3, #4
 8007df4:	3332      	adds	r3, #50	; 0x32
 8007df6:	4a07      	ldr	r2, [pc, #28]	; (8007e14 <UART_SetConfig+0x350>)
 8007df8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfc:	095b      	lsrs	r3, r3, #5
 8007dfe:	f003 020f 	and.w	r2, r3, #15
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4422      	add	r2, r4
 8007e08:	609a      	str	r2, [r3, #8]
 8007e0a:	e071      	b.n	8007ef0 <UART_SetConfig+0x42c>
 8007e0c:	40011000 	.word	0x40011000
 8007e10:	40011400 	.word	0x40011400
 8007e14:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007e18:	f7fd f936 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	009a      	lsls	r2, r3, #2
 8007e26:	441a      	add	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e32:	4a31      	ldr	r2, [pc, #196]	; (8007ef8 <UART_SetConfig+0x434>)
 8007e34:	fba2 2303 	umull	r2, r3, r2, r3
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	011c      	lsls	r4, r3, #4
 8007e3c:	f7fd f924 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007e40:	4602      	mov	r2, r0
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009a      	lsls	r2, r3, #2
 8007e4a:	441a      	add	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	fbb2 f5f3 	udiv	r5, r2, r3
 8007e56:	f7fd f917 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	009a      	lsls	r2, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e70:	4a21      	ldr	r2, [pc, #132]	; (8007ef8 <UART_SetConfig+0x434>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	095b      	lsrs	r3, r3, #5
 8007e78:	2264      	movs	r2, #100	; 0x64
 8007e7a:	fb02 f303 	mul.w	r3, r2, r3
 8007e7e:	1aeb      	subs	r3, r5, r3
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	3332      	adds	r3, #50	; 0x32
 8007e84:	4a1c      	ldr	r2, [pc, #112]	; (8007ef8 <UART_SetConfig+0x434>)
 8007e86:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e90:	441c      	add	r4, r3
 8007e92:	f7fd f8f9 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007e96:	4602      	mov	r2, r0
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	009a      	lsls	r2, r3, #2
 8007ea0:	441a      	add	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	fbb2 f5f3 	udiv	r5, r2, r3
 8007eac:	f7fd f8ec 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009a      	lsls	r2, r3, #2
 8007eba:	441a      	add	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec6:	4a0c      	ldr	r2, [pc, #48]	; (8007ef8 <UART_SetConfig+0x434>)
 8007ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	2264      	movs	r2, #100	; 0x64
 8007ed0:	fb02 f303 	mul.w	r3, r2, r3
 8007ed4:	1aeb      	subs	r3, r5, r3
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	3332      	adds	r3, #50	; 0x32
 8007eda:	4a07      	ldr	r2, [pc, #28]	; (8007ef8 <UART_SetConfig+0x434>)
 8007edc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	f003 020f 	and.w	r2, r3, #15
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4422      	add	r2, r4
 8007eec:	609a      	str	r2, [r3, #8]
}
 8007eee:	e7ff      	b.n	8007ef0 <UART_SetConfig+0x42c>
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef8:	51eb851f 	.word	0x51eb851f

08007efc <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e016      	b.n	8007f3c <HAL_WWDG_Init+0x40>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fc44 	bl	800979c <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f20:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691a      	ldr	r2, [r3, #16]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	ea42 0103 	orr.w	r1, r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689a      	ldr	r2, [r3, #8]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007f44:	b084      	sub	sp, #16
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	f107 001c 	add.w	r0, r7, #28
 8007f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007f5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007f5e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007f62:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007f66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007f6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007f6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007f7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	b004      	add	sp, #16
 8007f98:	4770      	bx	lr

08007f9a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2203      	movs	r2, #3
 8007fe2:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0303 	and.w	r3, r3, #3
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800802c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008032:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008038:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008048:	f023 030f 	bic.w	r3, r3, #15
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	b2db      	uxtb	r3, r3
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3314      	adds	r3, #20
 800808e:	461a      	mov	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	4413      	add	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
}  
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080cc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80080d2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80080d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80080f0:	2300      	movs	r3, #0

}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b088      	sub	sp, #32
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008108:	2300      	movs	r3, #0
 800810a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008110:	2310      	movs	r3, #16
 8008112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008114:	2340      	movs	r3, #64	; 0x40
 8008116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800811c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008120:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff ff70 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800812e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008132:	2110      	movs	r1, #16
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fa63 	bl	8008600 <SDMMC_GetCmdResp1>
 800813a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800813c:	69fb      	ldr	r3, [r7, #28]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3720      	adds	r7, #32
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b088      	sub	sp, #32
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008150:	2300      	movs	r3, #0
 8008152:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008158:	2311      	movs	r3, #17
 800815a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800815c:	2340      	movs	r3, #64	; 0x40
 800815e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008168:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800816a:	f107 0308 	add.w	r3, r7, #8
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ff4c 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008176:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800817a:	2111      	movs	r1, #17
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fa3f 	bl	8008600 <SDMMC_GetCmdResp1>
 8008182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008184:	69fb      	ldr	r3, [r7, #28]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b088      	sub	sp, #32
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008198:	2300      	movs	r3, #0
 800819a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80081a0:	2312      	movs	r3, #18
 80081a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081a4:	2340      	movs	r3, #64	; 0x40
 80081a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081b0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081b2:	f107 0308 	add.w	r3, r7, #8
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff ff28 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80081be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80081c2:	2112      	movs	r1, #18
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa1b 	bl	8008600 <SDMMC_GetCmdResp1>
 80081ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081cc:	69fb      	ldr	r3, [r7, #28]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3720      	adds	r7, #32
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b088      	sub	sp, #32
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80081e8:	2318      	movs	r3, #24
 80081ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081ec:	2340      	movs	r3, #64	; 0x40
 80081ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081f0:	2300      	movs	r3, #0
 80081f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081f8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081fa:	f107 0308 	add.w	r3, r7, #8
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff ff04 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008206:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800820a:	2118      	movs	r1, #24
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f9f7 	bl	8008600 <SDMMC_GetCmdResp1>
 8008212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008214:	69fb      	ldr	r3, [r7, #28]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b088      	sub	sp, #32
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008228:	2300      	movs	r3, #0
 800822a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008230:	2319      	movs	r3, #25
 8008232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800823c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008240:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008242:	f107 0308 	add.w	r3, r7, #8
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff fee0 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800824e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008252:	2119      	movs	r1, #25
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f9d3 	bl	8008600 <SDMMC_GetCmdResp1>
 800825a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800825c:	69fb      	ldr	r3, [r7, #28]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008270:	2300      	movs	r3, #0
 8008272:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008278:	230c      	movs	r3, #12
 800827a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008280:	2300      	movs	r3, #0
 8008282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008288:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800828a:	f107 0308 	add.w	r3, r7, #8
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff febc 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8008296:	4a05      	ldr	r2, [pc, #20]	; (80082ac <SDMMC_CmdStopTransfer+0x44>)
 8008298:	210c      	movs	r1, #12
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f9b0 	bl	8008600 <SDMMC_GetCmdResp1>
 80082a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082a2:	69fb      	ldr	r3, [r7, #28]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3720      	adds	r7, #32
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	05f5e100 	.word	0x05f5e100

080082b0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08a      	sub	sp, #40	; 0x28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80082bc:	2300      	movs	r3, #0
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80082c4:	2307      	movs	r3, #7
 80082c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082c8:	2340      	movs	r3, #64	; 0x40
 80082ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082d4:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082d6:	f107 0310 	add.w	r3, r7, #16
 80082da:	4619      	mov	r1, r3
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f7ff fe96 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80082e2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80082e6:	2107      	movs	r1, #7
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 f989 	bl	8008600 <SDMMC_GetCmdResp1>
 80082ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3728      	adds	r7, #40	; 0x28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b088      	sub	sp, #32
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800830e:	2300      	movs	r3, #0
 8008310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800831a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800831c:	f107 0308 	add.w	r3, r7, #8
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff fe73 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f93f 	bl	80085ac <SDMMC_GetCmdError>
 800832e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008330:	69fb      	ldr	r3, [r7, #28]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3720      	adds	r7, #32
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b088      	sub	sp, #32
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008342:	2300      	movs	r3, #0
 8008344:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008346:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800834a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800834c:	2308      	movs	r3, #8
 800834e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008350:	2340      	movs	r3, #64	; 0x40
 8008352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800835c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800835e:	f107 0308 	add.w	r3, r7, #8
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff fe52 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fb10 	bl	8008990 <SDMMC_GetCmdResp7>
 8008370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008372:	69fb      	ldr	r3, [r7, #28]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800838e:	2337      	movs	r3, #55	; 0x37
 8008390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008392:	2340      	movs	r3, #64	; 0x40
 8008394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008396:	2300      	movs	r3, #0
 8008398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800839a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800839e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083a0:	f107 0308 	add.w	r3, r7, #8
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff fe31 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80083ac:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80083b0:	2137      	movs	r1, #55	; 0x37
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f924 	bl	8008600 <SDMMC_GetCmdResp1>
 80083b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ba:	69fb      	ldr	r3, [r7, #28]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3720      	adds	r7, #32
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80083de:	2329      	movs	r3, #41	; 0x29
 80083e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083e2:	2340      	movs	r3, #64	; 0x40
 80083e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ee:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083f0:	f107 0308 	add.w	r3, r7, #8
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff fe09 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fa25 	bl	800884c <SDMMC_GetCmdResp3>
 8008402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008404:	69fb      	ldr	r3, [r7, #28]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b088      	sub	sp, #32
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008420:	2306      	movs	r3, #6
 8008422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008424:	2340      	movs	r3, #64	; 0x40
 8008426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800842c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008430:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008432:	f107 0308 	add.w	r3, r7, #8
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff fde8 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800843e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008442:	2106      	movs	r1, #6
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f8db 	bl	8008600 <SDMMC_GetCmdResp1>
 800844a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800844c:	69fb      	ldr	r3, [r7, #28]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3720      	adds	r7, #32
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b088      	sub	sp, #32
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800845e:	2300      	movs	r3, #0
 8008460:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008466:	2333      	movs	r3, #51	; 0x33
 8008468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800846a:	2340      	movs	r3, #64	; 0x40
 800846c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008476:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008478:	f107 0308 	add.w	r3, r7, #8
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fdc5 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008484:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008488:	2133      	movs	r1, #51	; 0x33
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f8b8 	bl	8008600 <SDMMC_GetCmdResp1>
 8008490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008492:	69fb      	ldr	r3, [r7, #28]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3720      	adds	r7, #32
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80084ac:	2302      	movs	r3, #2
 80084ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80084b0:	23c0      	movs	r3, #192	; 0xc0
 80084b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084bc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff fda2 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f97e 	bl	80087cc <SDMMC_GetCmdResp2>
 80084d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084d2:	69fb      	ldr	r3, [r7, #28]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80084ee:	2309      	movs	r3, #9
 80084f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80084f2:	23c0      	movs	r3, #192	; 0xc0
 80084f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084fe:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008500:	f107 0308 	add.w	r3, r7, #8
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fd81 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f95d 	bl	80087cc <SDMMC_GetCmdResp2>
 8008512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008514:	69fb      	ldr	r3, [r7, #28]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3720      	adds	r7, #32
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b088      	sub	sp, #32
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008530:	2303      	movs	r3, #3
 8008532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008534:	2340      	movs	r3, #64	; 0x40
 8008536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800853c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008540:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008542:	f107 0308 	add.w	r3, r7, #8
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff fd60 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	2103      	movs	r1, #3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f9ae 	bl	80088b4 <SDMMC_GetCmdResp6>
 8008558:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800855a:	69fb      	ldr	r3, [r7, #28]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3720      	adds	r7, #32
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800856e:	2300      	movs	r3, #0
 8008570:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008576:	230d      	movs	r3, #13
 8008578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800857a:	2340      	movs	r3, #64	; 0x40
 800857c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008586:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008588:	f107 0308 	add.w	r3, r7, #8
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff fd3d 	bl	800800e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008594:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008598:	210d      	movs	r1, #13
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f830 	bl	8008600 <SDMMC_GetCmdResp1>
 80085a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a2:	69fb      	ldr	r3, [r7, #28]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80085ac:	b490      	push	{r4, r7}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085b4:	4b10      	ldr	r3, [pc, #64]	; (80085f8 <SDMMC_GetCmdError+0x4c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a10      	ldr	r2, [pc, #64]	; (80085fc <SDMMC_GetCmdError+0x50>)
 80085ba:	fba2 2303 	umull	r2, r3, r2, r3
 80085be:	0a5b      	lsrs	r3, r3, #9
 80085c0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80085c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80085c8:	4623      	mov	r3, r4
 80085ca:	1e5c      	subs	r4, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085d4:	e00a      	b.n	80085ec <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0f2      	beq.n	80085c8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80085e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc90      	pop	{r4, r7}
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	20000010 	.word	0x20000010
 80085fc:	10624dd3 	.word	0x10624dd3

08008600 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008600:	b590      	push	{r4, r7, lr}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	460b      	mov	r3, r1
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800860e:	4b6c      	ldr	r3, [pc, #432]	; (80087c0 <SDMMC_GetCmdResp1+0x1c0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a6c      	ldr	r2, [pc, #432]	; (80087c4 <SDMMC_GetCmdResp1+0x1c4>)
 8008614:	fba2 2303 	umull	r2, r3, r2, r3
 8008618:	0a5b      	lsrs	r3, r3, #9
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008620:	4623      	mov	r3, r4
 8008622:	1e5c      	subs	r4, r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800862c:	e0c3      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008636:	2b00      	cmp	r3, #0
 8008638:	d0f2      	beq.n	8008620 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b00      	cmp	r3, #0
 8008644:	d004      	beq.n	8008650 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2204      	movs	r2, #4
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800864c:	2304      	movs	r3, #4
 800864e:	e0b2      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2201      	movs	r2, #1
 8008660:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008662:	2301      	movs	r3, #1
 8008664:	e0a7      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff fcfb 	bl	8008062 <SDIO_GetCommandResponse>
 800866c:	4603      	mov	r3, r0
 800866e:	461a      	mov	r2, r3
 8008670:	7afb      	ldrb	r3, [r7, #11]
 8008672:	4293      	cmp	r3, r2
 8008674:	d001      	beq.n	800867a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008676:	2301      	movs	r3, #1
 8008678:	e09d      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008680:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008682:	2100      	movs	r1, #0
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7ff fcf9 	bl	800807c <SDIO_GetResponse>
 800868a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4b4e      	ldr	r3, [pc, #312]	; (80087c8 <SDMMC_GetCmdResp1+0x1c8>)
 8008690:	4013      	ands	r3, r2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8008696:	2300      	movs	r3, #0
 8008698:	e08d      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	da02      	bge.n	80086a6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80086a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086a4:	e087      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80086b0:	2340      	movs	r3, #64	; 0x40
 80086b2:	e080      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80086be:	2380      	movs	r3, #128	; 0x80
 80086c0:	e079      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80086cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086d0:	e071      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80086dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086e0:	e069      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80086ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086f0:	e061      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80086fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008700:	e059      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800870c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008710:	e051      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800871c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008720:	e049      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800872c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008730:	e041      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800873c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008740:	e039      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800874c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008750:	e031      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800875c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008760:	e029      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800876c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008770:	e021      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800877c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008780:	e019      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800878c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008790:	e011      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800879c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80087a0:	e009      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f003 0308 	and.w	r3, r3, #8
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80087ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80087b0:	e001      	b.n	80087b6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd90      	pop	{r4, r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000010 	.word	0x20000010
 80087c4:	10624dd3 	.word	0x10624dd3
 80087c8:	fdffe008 	.word	0xfdffe008

080087cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80087cc:	b490      	push	{r4, r7}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087d4:	4b1b      	ldr	r3, [pc, #108]	; (8008844 <SDMMC_GetCmdResp2+0x78>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a1b      	ldr	r2, [pc, #108]	; (8008848 <SDMMC_GetCmdResp2+0x7c>)
 80087da:	fba2 2303 	umull	r2, r3, r2, r3
 80087de:	0a5b      	lsrs	r3, r3, #9
 80087e0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80087e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80087e8:	4623      	mov	r3, r4
 80087ea:	1e5c      	subs	r4, r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d102      	bne.n	80087f6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087f4:	e020      	b.n	8008838 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0f2      	beq.n	80087e8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	2b00      	cmp	r3, #0
 800880c:	d004      	beq.n	8008818 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2204      	movs	r2, #4
 8008812:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008814:	2304      	movs	r3, #4
 8008816:	e00f      	b.n	8008838 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800882a:	2301      	movs	r3, #1
 800882c:	e004      	b.n	8008838 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bc90      	pop	{r4, r7}
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	20000010 	.word	0x20000010
 8008848:	10624dd3 	.word	0x10624dd3

0800884c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800884c:	b490      	push	{r4, r7}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008854:	4b15      	ldr	r3, [pc, #84]	; (80088ac <SDMMC_GetCmdResp3+0x60>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <SDMMC_GetCmdResp3+0x64>)
 800885a:	fba2 2303 	umull	r2, r3, r2, r3
 800885e:	0a5b      	lsrs	r3, r3, #9
 8008860:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008864:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008868:	4623      	mov	r3, r4
 800886a:	1e5c      	subs	r4, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008874:	e015      	b.n	80088a2 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0f2      	beq.n	8008868 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b00      	cmp	r3, #0
 800888c:	d004      	beq.n	8008898 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2204      	movs	r2, #4
 8008892:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008894:	2304      	movs	r3, #4
 8008896:	e004      	b.n	80088a2 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800889e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bc90      	pop	{r4, r7}
 80088aa:	4770      	bx	lr
 80088ac:	20000010 	.word	0x20000010
 80088b0:	10624dd3 	.word	0x10624dd3

080088b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80088b4:	b590      	push	{r4, r7, lr}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	460b      	mov	r3, r1
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088c2:	4b31      	ldr	r3, [pc, #196]	; (8008988 <SDMMC_GetCmdResp6+0xd4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a31      	ldr	r2, [pc, #196]	; (800898c <SDMMC_GetCmdResp6+0xd8>)
 80088c8:	fba2 2303 	umull	r2, r3, r2, r3
 80088cc:	0a5b      	lsrs	r3, r3, #9
 80088ce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80088d2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80088d6:	4623      	mov	r3, r4
 80088d8:	1e5c      	subs	r4, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d102      	bne.n	80088e4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088e2:	e04c      	b.n	800897e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f2      	beq.n	80088d6 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2204      	movs	r2, #4
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008902:	2304      	movs	r3, #4
 8008904:	e03b      	b.n	800897e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008918:	2301      	movs	r3, #1
 800891a:	e030      	b.n	800897e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f7ff fba0 	bl	8008062 <SDIO_GetCommandResponse>
 8008922:	4603      	mov	r3, r0
 8008924:	461a      	mov	r2, r3
 8008926:	7afb      	ldrb	r3, [r7, #11]
 8008928:	4293      	cmp	r3, r2
 800892a:	d001      	beq.n	8008930 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800892c:	2301      	movs	r3, #1
 800892e:	e026      	b.n	800897e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008936:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008938:	2100      	movs	r1, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fb9e 	bl	800807c <SDIO_GetResponse>
 8008940:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d106      	bne.n	800895a <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	0c1b      	lsrs	r3, r3, #16
 8008950:	b29a      	uxth	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008956:	2300      	movs	r3, #0
 8008958:	e011      	b.n	800897e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008968:	e009      	b.n	800897e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008978:	e001      	b.n	800897e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800897a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800897e:	4618      	mov	r0, r3
 8008980:	371c      	adds	r7, #28
 8008982:	46bd      	mov	sp, r7
 8008984:	bd90      	pop	{r4, r7, pc}
 8008986:	bf00      	nop
 8008988:	20000010 	.word	0x20000010
 800898c:	10624dd3 	.word	0x10624dd3

08008990 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008990:	b490      	push	{r4, r7}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008998:	4b18      	ldr	r3, [pc, #96]	; (80089fc <SDMMC_GetCmdResp7+0x6c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a18      	ldr	r2, [pc, #96]	; (8008a00 <SDMMC_GetCmdResp7+0x70>)
 800899e:	fba2 2303 	umull	r2, r3, r2, r3
 80089a2:	0a5b      	lsrs	r3, r3, #9
 80089a4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80089a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80089ac:	4623      	mov	r3, r4
 80089ae:	1e5c      	subs	r4, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d102      	bne.n	80089ba <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089b8:	e01a      	b.n	80089f0 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0f2      	beq.n	80089ac <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2240      	movs	r2, #64	; 0x40
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089d8:	2304      	movs	r3, #4
 80089da:	e009      	b.n	80089f0 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2240      	movs	r2, #64	; 0x40
 80089ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089ee:	2300      	movs	r3, #0
  
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bc90      	pop	{r4, r7}
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20000010 	.word	0x20000010
 8008a00:	10624dd3 	.word	0x10624dd3

08008a04 <_write>:
//
//	return _n;
//}

int _write(int file, char *data, int len)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d00a      	beq.n	8008a2c <_write+0x28>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d007      	beq.n	8008a2c <_write+0x28>
   {
      errno = EBADF;
 8008a1c:	f006 fac8 	bl	800efb0 <__errno>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2209      	movs	r2, #9
 8008a24:	601a      	str	r2, [r3, #0]
      return -1;
 8008a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a2a:	e010      	b.n	8008a4e <_write+0x4a>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit((UART_HandleTypeDef *)COMM, (uint8_t*)data, len, 1000);
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <_write+0x54>)
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	f7fe fc26 	bl	800728a <HAL_UART_Transmit>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <_write+0x48>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	e000      	b.n	8008a4e <_write+0x4a>
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000000 	.word	0x20000000

08008a5c <SystemClock_Config>:
*/

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b0a0      	sub	sp, #128	; 0x80
 8008a60:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a62:	2300      	movs	r3, #0
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	4b3b      	ldr	r3, [pc, #236]	; (8008b54 <SystemClock_Config+0xf8>)
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	4a3a      	ldr	r2, [pc, #232]	; (8008b54 <SystemClock_Config+0xf8>)
 8008a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a70:	6413      	str	r3, [r2, #64]	; 0x40
 8008a72:	4b38      	ldr	r3, [pc, #224]	; (8008b54 <SystemClock_Config+0xf8>)
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008a7e:	2300      	movs	r3, #0
 8008a80:	607b      	str	r3, [r7, #4]
 8008a82:	4b35      	ldr	r3, [pc, #212]	; (8008b58 <SystemClock_Config+0xfc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008a8a:	4a33      	ldr	r2, [pc, #204]	; (8008b58 <SystemClock_Config+0xfc>)
 8008a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	4b31      	ldr	r3, [pc, #196]	; (8008b58 <SystemClock_Config+0xfc>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008a9a:	607b      	str	r3, [r7, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8008a9e:	2305      	movs	r3, #5
 8008aa0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008aa6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008aac:	2302      	movs	r3, #2
 8008aae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008ab0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008ab6:	2310      	movs	r3, #16
 8008ab8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008aba:	23c0      	movs	r3, #192	; 0xc0
 8008abc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008ac2:	2304      	movs	r3, #4
 8008ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ac6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fb fee4 	bl	8004898 <HAL_RCC_OscConfig>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8008ad6:	f7fa fa59 	bl	8002f8c <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008ada:	230f      	movs	r3, #15
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ade:	2302      	movs	r3, #2
 8008ae0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008ae6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008af0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008af2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008af6:	2103      	movs	r1, #3
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fc f927 	bl	8004d4c <HAL_RCC_ClockConfig>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008b04:	f7fa fa42 	bl	8002f8c <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008b08:	2320      	movs	r3, #32
 8008b0a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008b12:	f107 030c 	add.w	r3, r7, #12
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fc fb2c 	bl	8005174 <HAL_RCCEx_PeriphCLKConfig>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8008b22:	f7fa fa33 	bl	8002f8c <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008b26:	f7fc faa3 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	4a0b      	ldr	r2, [pc, #44]	; (8008b5c <SystemClock_Config+0x100>)
 8008b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b32:	099b      	lsrs	r3, r3, #6
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fa fbf6 	bl	8003326 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008b3a:	2004      	movs	r0, #4
 8008b3c:	f7fa fc00 	bl	8003340 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8008b40:	2200      	movs	r2, #0
 8008b42:	210f      	movs	r1, #15
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b48:	f7fa fbc3 	bl	80032d2 <HAL_NVIC_SetPriority>
}
 8008b4c:	bf00      	nop
 8008b4e:	3780      	adds	r7, #128	; 0x80
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	40023800 	.word	0x40023800
 8008b58:	40007000 	.word	0x40007000
 8008b5c:	10624dd3 	.word	0x10624dd3

08008b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08e      	sub	sp, #56	; 0x38
 8008b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008b66:	2300      	movs	r3, #0
 8008b68:	623b      	str	r3, [r7, #32]
 8008b6a:	4bb2      	ldr	r3, [pc, #712]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	4ab1      	ldr	r2, [pc, #708]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008b70:	f043 0310 	orr.w	r3, r3, #16
 8008b74:	6313      	str	r3, [r2, #48]	; 0x30
 8008b76:	4baf      	ldr	r3, [pc, #700]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7a:	f003 0310 	and.w	r3, r3, #16
 8008b7e:	623b      	str	r3, [r7, #32]
 8008b80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008b82:	2300      	movs	r3, #0
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	4bab      	ldr	r3, [pc, #684]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	4aaa      	ldr	r2, [pc, #680]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b90:	6313      	str	r3, [r2, #48]	; 0x30
 8008b92:	4ba8      	ldr	r3, [pc, #672]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	4ba4      	ldr	r3, [pc, #656]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	4aa3      	ldr	r2, [pc, #652]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008ba8:	f043 0304 	orr.w	r3, r3, #4
 8008bac:	6313      	str	r3, [r2, #48]	; 0x30
 8008bae:	4ba1      	ldr	r3, [pc, #644]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	61bb      	str	r3, [r7, #24]
 8008bb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	4b9d      	ldr	r3, [pc, #628]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	4a9c      	ldr	r2, [pc, #624]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008bc4:	f043 0320 	orr.w	r3, r3, #32
 8008bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8008bca:	4b9a      	ldr	r3, [pc, #616]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	617b      	str	r3, [r7, #20]
 8008bd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	4b96      	ldr	r3, [pc, #600]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	4a95      	ldr	r2, [pc, #596]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be4:	6313      	str	r3, [r2, #48]	; 0x30
 8008be6:	4b93      	ldr	r3, [pc, #588]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bee:	613b      	str	r3, [r7, #16]
 8008bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	4b8f      	ldr	r3, [pc, #572]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfa:	4a8e      	ldr	r2, [pc, #568]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008bfc:	f043 0301 	orr.w	r3, r3, #1
 8008c00:	6313      	str	r3, [r2, #48]	; 0x30
 8008c02:	4b8c      	ldr	r3, [pc, #560]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	4b88      	ldr	r3, [pc, #544]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	4a87      	ldr	r2, [pc, #540]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c18:	f043 0302 	orr.w	r3, r3, #2
 8008c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c1e:	4b85      	ldr	r3, [pc, #532]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	60bb      	str	r3, [r7, #8]
 8008c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	607b      	str	r3, [r7, #4]
 8008c2e:	4b81      	ldr	r3, [pc, #516]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	4a80      	ldr	r2, [pc, #512]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c38:	6313      	str	r3, [r2, #48]	; 0x30
 8008c3a:	4b7e      	ldr	r3, [pc, #504]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c42:	607b      	str	r3, [r7, #4]
 8008c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c46:	2300      	movs	r3, #0
 8008c48:	603b      	str	r3, [r7, #0]
 8008c4a:	4b7a      	ldr	r3, [pc, #488]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4e:	4a79      	ldr	r2, [pc, #484]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c50:	f043 0308 	orr.w	r3, r3, #8
 8008c54:	6313      	str	r3, [r2, #48]	; 0x30
 8008c56:	4b77      	ldr	r3, [pc, #476]	; (8008e34 <MX_GPIO_Init+0x2d4>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f003 0308 	and.w	r3, r3, #8
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAN4_VGY_GPIO_Port, PAN4_VGY_Pin, GPIO_PIN_RESET);
 8008c62:	2200      	movs	r2, #0
 8008c64:	2104      	movs	r1, #4
 8008c66:	4874      	ldr	r0, [pc, #464]	; (8008e38 <MX_GPIO_Init+0x2d8>)
 8008c68:	f7fa fee4 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin, GPIO_PIN_SET);
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f242 0130 	movw	r1, #8240	; 0x2030
 8008c72:	4872      	ldr	r0, [pc, #456]	; (8008e3c <MX_GPIO_Init+0x2dc>)
 8008c74:	f7fa fede 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f640 61ff 	movw	r1, #3839	; 0xeff
 8008c7e:	4870      	ldr	r0, [pc, #448]	; (8008e40 <MX_GPIO_Init+0x2e0>)
 8008c80:	f7fa fed8 	bl	8003a34 <HAL_GPIO_WritePin>
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBAND_CS_GPIO_Port, SBAND_CS_Pin, GPIO_PIN_RESET);
 8008c84:	2200      	movs	r2, #0
 8008c86:	2140      	movs	r1, #64	; 0x40
 8008c88:	486e      	ldr	r0, [pc, #440]	; (8008e44 <MX_GPIO_Init+0x2e4>)
 8008c8a:	f7fa fed3 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f24e 217c 	movw	r1, #57980	; 0xe27c
 8008c94:	486c      	ldr	r0, [pc, #432]	; (8008e48 <MX_GPIO_Init+0x2e8>)
 8008c96:	f7fa fecd 	bl	8003a34 <HAL_GPIO_WritePin>
  // Turn-off the second MAG sensor due lack of I2C arbitration MAG1/MAG2
  HAL_GPIO_WritePin(GPIOH, MAG1_EN_Pin|MAG2_EN_Pin, GPIO_PIN_SET);
#endif

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	2110      	movs	r1, #16
 8008c9e:	486b      	ldr	r0, [pc, #428]	; (8008e4c <MX_GPIO_Init+0x2ec>)
 8008ca0:	f7fa fec8 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	21e6      	movs	r1, #230	; 0xe6
 8008ca8:	4869      	ldr	r0, [pc, #420]	; (8008e50 <MX_GPIO_Init+0x2f0>)
 8008caa:	f7fa fec3 	bl	8003a34 <HAL_GPIO_WritePin>
                          |PAN3_VGY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8008cb4:	4867      	ldr	r0, [pc, #412]	; (8008e54 <MX_GPIO_Init+0x2f4>)
 8008cb6:	f7fa febd 	bl	8003a34 <HAL_GPIO_WritePin>
                          |OBC_OUT2_Pin|OBC_OUT1_Pin, GPIO_PIN_RESET);

  /* Camera power supply disable by default */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT1_Pin, GPIO_PIN_RESET);
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008cc0:	4864      	ldr	r0, [pc, #400]	; (8008e54 <MX_GPIO_Init+0x2f4>)
 8008cc2:	f7fa feb7 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_EN_Pin|OBC_OUT4_Pin, GPIO_PIN_RESET);
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	2148      	movs	r1, #72	; 0x48
 8008cca:	4863      	ldr	r0, [pc, #396]	; (8008e58 <MX_GPIO_Init+0x2f8>)
 8008ccc:	f7fa feb2 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PAN4_VGY_Pin */
  GPIO_InitStruct.Pin = PAN4_VGY_Pin;
 8008cd0:	2304      	movs	r3, #4
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008cd4:	2311      	movs	r3, #17
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN4_VGY_GPIO_Port, &GPIO_InitStruct);
 8008ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4854      	ldr	r0, [pc, #336]	; (8008e38 <MX_GPIO_Init+0x2d8>)
 8008ce8:	f7fa fcf8 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IRQ_Pin */
  GPIO_InitStruct.Pin = M2_IRQ_Pin;
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008cf0:	4b5a      	ldr	r3, [pc, #360]	; (8008e5c <MX_GPIO_Init+0x2fc>)
 8008cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	484e      	ldr	r0, [pc, #312]	; (8008e38 <MX_GPIO_Init+0x2d8>)
 8008d00:	f7fa fcec 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IRQ_Pin */
  GPIO_InitStruct.Pin = M1_IRQ_Pin;
 8008d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008d0a:	4b54      	ldr	r3, [pc, #336]	; (8008e5c <MX_GPIO_Init+0x2fc>)
 8008d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d16:	4619      	mov	r1, r3
 8008d18:	4849      	ldr	r0, [pc, #292]	; (8008e40 <MX_GPIO_Init+0x2e0>)
 8008d1a:	f7fa fcdf 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS2_Pin LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin;
 8008d1e:	f242 0330 	movw	r3, #8240	; 0x2030
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d24:	2301      	movs	r3, #1
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d34:	4619      	mov	r1, r3
 8008d36:	4841      	ldr	r0, [pc, #260]	; (8008e3c <MX_GPIO_Init+0x2dc>)
 8008d38:	f7fa fcd0 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS1_Pin PAN6_CS2_Pin PAN6_CS1_Pin PAN1_CS2_Pin
                           PAN1_CS1_Pin PAN2_CS2_Pin PAN2_CS1_Pin PAN3_CS2_Pin
                           PAN3_CS1_Pin PAN4_CS2_Pin PAN4_CS1_Pin */
  GPIO_InitStruct.Pin = PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8008d3c:	f640 63ff 	movw	r3, #3839	; 0xeff
 8008d40:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d42:	2301      	movs	r3, #1
 8008d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d52:	4619      	mov	r1, r3
 8008d54:	483a      	ldr	r0, [pc, #232]	; (8008e40 <MX_GPIO_Init+0x2e0>)
 8008d56:	f7fa fcc1 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_CS_Pin */
  GPIO_InitStruct.Pin = SBAND_CS_Pin;
 8008d5a:	2340      	movs	r3, #64	; 0x40
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d66:	2300      	movs	r3, #0
 8008d68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SBAND_CS_GPIO_Port, &GPIO_InitStruct);
 8008d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4834      	ldr	r0, [pc, #208]	; (8008e44 <MX_GPIO_Init+0x2e4>)
 8008d72:	f7fa fcb3 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_IRQ_Pin */
  GPIO_InitStruct.Pin = SBAND_IRQ_Pin;
 8008d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008d7c:	4b37      	ldr	r3, [pc, #220]	; (8008e5c <MX_GPIO_Init+0x2fc>)
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d80:	2300      	movs	r3, #0
 8008d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SBAND_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d88:	4619      	mov	r1, r3
 8008d8a:	482e      	ldr	r0, [pc, #184]	; (8008e44 <MX_GPIO_Init+0x2e4>)
 8008d8c:	f7fa fca6 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_DIR1_Pin PAN5_DIR2_Pin PAN6_DIR1_Pin PAN6_DIR2_Pin
                           ACC1_EN_Pin ACC2_EN_Pin MAG1_EN_Pin MAG2_EN_Pin
                           PAN4_DIR2_Pin */
  GPIO_InitStruct.Pin = PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8008d90:	f24e 033c 	movw	r3, #57404	; 0xe03c
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
                          |MAG1_EN_Pin|MAG2_EN_Pin
                          |PAN4_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d96:	2301      	movs	r3, #1
 8008d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008da6:	4619      	mov	r1, r3
 8008da8:	4827      	ldr	r0, [pc, #156]	; (8008e48 <MX_GPIO_Init+0x2e8>)
 8008daa:	f7fa fc97 	bl	80036dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACC1_EN_Pin|ACC2_EN_Pin;
 8008dae:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008db4:	2311      	movs	r3, #17
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008db8:	2300      	movs	r3, #0
 8008dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4820      	ldr	r0, [pc, #128]	; (8008e48 <MX_GPIO_Init+0x2e8>)
 8008dc8:	f7fa fc88 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8008dcc:	2310      	movs	r3, #16
 8008dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de0:	4619      	mov	r1, r3
 8008de2:	481a      	ldr	r0, [pc, #104]	; (8008e4c <MX_GPIO_Init+0x2ec>)
 8008de4:	f7fa fc7a 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_VGY_Pin PAN6_VGY_Pin PAN1_VGY_Pin PAN2_VGY_Pin
                           PAN3_VGY_Pin */
  GPIO_InitStruct.Pin = PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8008de8:	23e6      	movs	r3, #230	; 0xe6
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN3_VGY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008dec:	2311      	movs	r3, #17
 8008dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008df4:	2300      	movs	r3, #0
 8008df6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4814      	ldr	r0, [pc, #80]	; (8008e50 <MX_GPIO_Init+0x2f0>)
 8008e00:	f7fa fc6c 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OBC_OUT5_Pin PAN4_DIR1_Pin FLASH_NCS_Pin OBC_OUT3_Pin
                           OBC_OUT2_Pin OBC_OUT1_Pin */
  GPIO_InitStruct.Pin = OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8008e04:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
                          |OBC_OUT2_Pin|OBC_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e12:	2300      	movs	r3, #0
 8008e14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	480d      	ldr	r0, [pc, #52]	; (8008e54 <MX_GPIO_Init+0x2f4>)
 8008e1e:	f7fa fc5d 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_EN_Pin OBC_OUT4_Pin */
  GPIO_InitStruct.Pin = SD_EN_Pin|OBC_OUT4_Pin;
 8008e22:	2348      	movs	r3, #72	; 0x48
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e26:	2301      	movs	r3, #1
 8008e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e016      	b.n	8008e60 <MX_GPIO_Init+0x300>
 8008e32:	bf00      	nop
 8008e34:	40023800 	.word	0x40023800
 8008e38:	40021000 	.word	0x40021000
 8008e3c:	40020800 	.word	0x40020800
 8008e40:	40022000 	.word	0x40022000
 8008e44:	40021400 	.word	0x40021400
 8008e48:	40021c00 	.word	0x40021c00
 8008e4c:	40020000 	.word	0x40020000
 8008e50:	40020400 	.word	0x40020400
 8008e54:	40021800 	.word	0x40021800
 8008e58:	40020c00 	.word	0x40020c00
 8008e5c:	10110000 	.word	0x10110000
 8008e60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e66:	4619      	mov	r1, r3
 8008e68:	4809      	ldr	r0, [pc, #36]	; (8008e90 <MX_GPIO_Init+0x330>)
 8008e6a:	f7fa fc37 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8008e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e74:	2300      	movs	r3, #0
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8008e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e80:	4619      	mov	r1, r3
 8008e82:	4804      	ldr	r0, [pc, #16]	; (8008e94 <MX_GPIO_Init+0x334>)
 8008e84:	f7fa fc2a 	bl	80036dc <HAL_GPIO_Init>

}
 8008e88:	bf00      	nop
 8008e8a:	3738      	adds	r7, #56	; 0x38
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	40020c00 	.word	0x40020c00
 8008e94:	40021800 	.word	0x40021800

08008e98 <MX_I2C1_Init>:

}

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008e9c:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008e9e:	4a13      	ldr	r2, [pc, #76]	; (8008eec <MX_I2C1_Init+0x54>)
 8008ea0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008ea2:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008ea4:	4a12      	ldr	r2, [pc, #72]	; (8008ef0 <MX_I2C1_Init+0x58>)
 8008ea6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008ea8:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008eae:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008eba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008ec2:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008ec8:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008ece:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008ed4:	4804      	ldr	r0, [pc, #16]	; (8008ee8 <MX_I2C1_Init+0x50>)
 8008ed6:	f7fa fdc7 	bl	8003a68 <HAL_I2C_Init>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008ee0:	f7fa f854 	bl	8002f8c <Error_Handler>
  }

}
 8008ee4:	bf00      	nop
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20007d90 	.word	0x20007d90
 8008eec:	40005400 	.word	0x40005400
 8008ef0:	00061a80 	.word	0x00061a80

08008ef4 <MX_SDIO_SD_Init>:

}

/* SDIO init function */
void MX_SDIO_SD_Init(void)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <MX_SDIO_SD_Init+0x38>)
 8008efa:	4a0d      	ldr	r2, [pc, #52]	; (8008f30 <MX_SDIO_SD_Init+0x3c>)
 8008efc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8008efe:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <MX_SDIO_SD_Init+0x38>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8008f04:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <MX_SDIO_SD_Init+0x38>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008f0a:	4b08      	ldr	r3, [pc, #32]	; (8008f2c <MX_SDIO_SD_Init+0x38>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8008f10:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <MX_SDIO_SD_Init+0x38>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008f16:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <MX_SDIO_SD_Init+0x38>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8008f1c:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <MX_SDIO_SD_Init+0x38>)
 8008f1e:	2203      	movs	r2, #3
 8008f20:	619a      	str	r2, [r3, #24]

}
 8008f22:	bf00      	nop
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	20008050 	.word	0x20008050
 8008f30:	40012c00 	.word	0x40012c00

08008f34 <MX_UART4_Init>:

}

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8008f38:	4b11      	ldr	r3, [pc, #68]	; (8008f80 <MX_UART4_Init+0x4c>)
 8008f3a:	4a12      	ldr	r2, [pc, #72]	; (8008f84 <MX_UART4_Init+0x50>)
 8008f3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8008f3e:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <MX_UART4_Init+0x4c>)
 8008f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008f44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008f46:	4b0e      	ldr	r3, [pc, #56]	; (8008f80 <MX_UART4_Init+0x4c>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <MX_UART4_Init+0x4c>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008f52:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <MX_UART4_Init+0x4c>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008f58:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <MX_UART4_Init+0x4c>)
 8008f5a:	220c      	movs	r2, #12
 8008f5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f5e:	4b08      	ldr	r3, [pc, #32]	; (8008f80 <MX_UART4_Init+0x4c>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f64:	4b06      	ldr	r3, [pc, #24]	; (8008f80 <MX_UART4_Init+0x4c>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008f6a:	4805      	ldr	r0, [pc, #20]	; (8008f80 <MX_UART4_Init+0x4c>)
 8008f6c:	f7fe f940 	bl	80071f0 <HAL_UART_Init>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8008f76:	f7fa f809 	bl	8002f8c <Error_Handler>
  }

}
 8008f7a:	bf00      	nop
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	20008114 	.word	0x20008114
 8008f84:	40004c00 	.word	0x40004c00

08008f88 <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008f8c:	4b11      	ldr	r3, [pc, #68]	; (8008fd4 <MX_USART1_UART_Init+0x4c>)
 8008f8e:	4a12      	ldr	r2, [pc, #72]	; (8008fd8 <MX_USART1_UART_Init+0x50>)
 8008f90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008f92:	4b10      	ldr	r3, [pc, #64]	; (8008fd4 <MX_USART1_UART_Init+0x4c>)
 8008f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008f98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008f9a:	4b0e      	ldr	r3, [pc, #56]	; (8008fd4 <MX_USART1_UART_Init+0x4c>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008fa0:	4b0c      	ldr	r3, [pc, #48]	; (8008fd4 <MX_USART1_UART_Init+0x4c>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	; (8008fd4 <MX_USART1_UART_Init+0x4c>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008fac:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <MX_USART1_UART_Init+0x4c>)
 8008fae:	220c      	movs	r2, #12
 8008fb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008fb2:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <MX_USART1_UART_Init+0x4c>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008fb8:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <MX_USART1_UART_Init+0x4c>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008fbe:	4805      	ldr	r0, [pc, #20]	; (8008fd4 <MX_USART1_UART_Init+0x4c>)
 8008fc0:	f7fe f916 	bl	80071f0 <HAL_UART_Init>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008fca:	f7f9 ffdf 	bl	8002f8c <Error_Handler>
  }

}
 8008fce:	bf00      	nop
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20007f78 	.word	0x20007f78
 8008fd8:	40011000 	.word	0x40011000

08008fdc <MX_USART6_UART_Init>:

/* USART6 init function */
void MX_USART6_UART_Init(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8008fe0:	4b15      	ldr	r3, [pc, #84]	; (8009038 <MX_USART6_UART_Init+0x5c>)
 8008fe2:	4a16      	ldr	r2, [pc, #88]	; (800903c <MX_USART6_UART_Init+0x60>)
 8008fe4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8008fe6:	4b14      	ldr	r3, [pc, #80]	; (8009038 <MX_USART6_UART_Init+0x5c>)
 8008fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008fec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <MX_USART6_UART_Init+0x5c>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008ff4:	4b10      	ldr	r3, [pc, #64]	; (8009038 <MX_USART6_UART_Init+0x5c>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008ffa:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <MX_USART6_UART_Init+0x5c>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009000:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <MX_USART6_UART_Init+0x5c>)
 8009002:	220c      	movs	r2, #12
 8009004:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009006:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <MX_USART6_UART_Init+0x5c>)
 8009008:	2200      	movs	r2, #0
 800900a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <MX_USART6_UART_Init+0x5c>)
 800900e:	2200      	movs	r2, #0
 8009010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009012:	4809      	ldr	r0, [pc, #36]	; (8009038 <MX_USART6_UART_Init+0x5c>)
 8009014:	f7fe f8ec 	bl	80071f0 <HAL_UART_Init>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800901e:	f7f9 ffb5 	bl	8002f8c <Error_Handler>
  }
  //Enable interrupts
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8009022:	2200      	movs	r2, #0
 8009024:	2100      	movs	r1, #0
 8009026:	2047      	movs	r0, #71	; 0x47
 8009028:	f7fa f953 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 800902c:	2047      	movs	r0, #71	; 0x47
 800902e:	f7fa f96c 	bl	800330a <HAL_NVIC_EnableIRQ>
}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	200080d4 	.word	0x200080d4
 800903c:	40011400 	.word	0x40011400

08009040 <MX_WWDG_Init>:

}

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 8009044:	4b0d      	ldr	r3, [pc, #52]	; (800907c <MX_WWDG_Init+0x3c>)
 8009046:	4a0e      	ldr	r2, [pc, #56]	; (8009080 <MX_WWDG_Init+0x40>)
 8009048:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800904a:	4b0c      	ldr	r3, [pc, #48]	; (800907c <MX_WWDG_Init+0x3c>)
 800904c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009050:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8009052:	4b0a      	ldr	r3, [pc, #40]	; (800907c <MX_WWDG_Init+0x3c>)
 8009054:	2240      	movs	r2, #64	; 0x40
 8009056:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8009058:	4b08      	ldr	r3, [pc, #32]	; (800907c <MX_WWDG_Init+0x3c>)
 800905a:	2240      	movs	r2, #64	; 0x40
 800905c:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 800905e:	4b07      	ldr	r3, [pc, #28]	; (800907c <MX_WWDG_Init+0x3c>)
 8009060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009064:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8009066:	4805      	ldr	r0, [pc, #20]	; (800907c <MX_WWDG_Init+0x3c>)
 8009068:	f7fe ff48 	bl	8007efc <HAL_WWDG_Init>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 8009072:	f7f9 ff8b 	bl	8002f8c <Error_Handler>
  }

}
 8009076:	bf00      	nop
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	2000803c 	.word	0x2000803c
 8009080:	40002c00 	.word	0x40002c00

08009084 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800908e:	f000 f89d 	bl	80091cc <BSP_SD_IsDetected>
 8009092:	4603      	mov	r3, r0
 8009094:	2b01      	cmp	r3, #1
 8009096:	d001      	beq.n	800909c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e012      	b.n	80090c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800909c:	480b      	ldr	r0, [pc, #44]	; (80090cc <BSP_SD_Init+0x48>)
 800909e:	f7fc fa87 	bl	80055b0 <HAL_SD_Init>
 80090a2:	4603      	mov	r3, r0
 80090a4:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d109      	bne.n	80090c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80090ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090b0:	4806      	ldr	r0, [pc, #24]	; (80090cc <BSP_SD_Init+0x48>)
 80090b2:	f7fd fa00 	bl	80064b6 <HAL_SD_ConfigWideBusOperation>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 80090c0:	79fb      	ldrb	r3, [r7, #7]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20008050 	.word	0x20008050

080090d0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state;

  __HAL_LOCK(&hsd);
 80090de:	4b0d      	ldr	r3, [pc, #52]	; (8009114 <BSP_SD_ReadBlocks+0x44>)
 80090e0:	7f1b      	ldrb	r3, [r3, #28]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <BSP_SD_ReadBlocks+0x1a>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e010      	b.n	800910c <BSP_SD_ReadBlocks+0x3c>
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <BSP_SD_ReadBlocks+0x44>)
 80090ec:	2201      	movs	r2, #1
 80090ee:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	68f9      	ldr	r1, [r7, #12]
 80090fa:	4806      	ldr	r0, [pc, #24]	; (8009114 <BSP_SD_ReadBlocks+0x44>)
 80090fc:	f7fc fae0 	bl	80056c0 <HAL_SD_ReadBlocks>
 8009100:	4603      	mov	r3, r0
 8009102:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009104:	4b03      	ldr	r3, [pc, #12]	; (8009114 <BSP_SD_ReadBlocks+0x44>)
 8009106:	2200      	movs	r2, #0
 8009108:	771a      	strb	r2, [r3, #28]
  
  return sd_state;  
 800910a:	7dfb      	ldrb	r3, [r7, #23]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	20008050 	.word	0x20008050

08009118 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af02      	add	r7, sp, #8
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	75fb      	strb	r3, [r7, #23]

  __HAL_LOCK(&hsd);
 800912a:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <BSP_SD_WriteBlocks+0x48>)
 800912c:	7f1b      	ldrb	r3, [r3, #28]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d101      	bne.n	8009136 <BSP_SD_WriteBlocks+0x1e>
 8009132:	2302      	movs	r3, #2
 8009134:	e010      	b.n	8009158 <BSP_SD_WriteBlocks+0x40>
 8009136:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <BSP_SD_WriteBlocks+0x48>)
 8009138:	2201      	movs	r2, #1
 800913a:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	68f9      	ldr	r1, [r7, #12]
 8009146:	4806      	ldr	r0, [pc, #24]	; (8009160 <BSP_SD_WriteBlocks+0x48>)
 8009148:	f7fc fc51 	bl	80059ee <HAL_SD_WriteBlocks>
 800914c:	4603      	mov	r3, r0
 800914e:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009150:	4b03      	ldr	r3, [pc, #12]	; (8009160 <BSP_SD_WriteBlocks+0x48>)
 8009152:	2200      	movs	r2, #0
 8009154:	771a      	strb	r2, [r3, #28]

  return sd_state;  
 8009156:	7dfb      	ldrb	r3, [r7, #23]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	20008050 	.word	0x20008050

08009164 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
  uint8_t sd_state;  

  __HAL_LOCK(&hsd);
 800916a:	4b0e      	ldr	r3, [pc, #56]	; (80091a4 <BSP_SD_GetCardState+0x40>)
 800916c:	7f1b      	ldrb	r3, [r3, #28]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d101      	bne.n	8009176 <BSP_SD_GetCardState+0x12>
 8009172:	2302      	movs	r3, #2
 8009174:	e011      	b.n	800919a <BSP_SD_GetCardState+0x36>
 8009176:	4b0b      	ldr	r3, [pc, #44]	; (80091a4 <BSP_SD_GetCardState+0x40>)
 8009178:	2201      	movs	r2, #1
 800917a:	771a      	strb	r2, [r3, #28]
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 800917c:	4809      	ldr	r0, [pc, #36]	; (80091a4 <BSP_SD_GetCardState+0x40>)
 800917e:	f7fd fa16 	bl	80065ae <HAL_SD_GetCardState>
 8009182:	4603      	mov	r3, r0
 8009184:	2b04      	cmp	r3, #4
 8009186:	d102      	bne.n	800918e <BSP_SD_GetCardState+0x2a>
    sd_state = HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	71fb      	strb	r3, [r7, #7]
 800918c:	e001      	b.n	8009192 <BSP_SD_GetCardState+0x2e>
  else
    sd_state = HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	71fb      	strb	r3, [r7, #7]
  __HAL_UNLOCK(&hsd);
 8009192:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <BSP_SD_GetCardState+0x40>)
 8009194:	2200      	movs	r2, #0
 8009196:	771a      	strb	r2, [r3, #28]
  
  return sd_state;
 8009198:	79fb      	ldrb	r3, [r7, #7]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20008050 	.word	0x20008050

080091a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80091b0:	b672      	cpsid	i
}
 80091b2:	bf00      	nop
  /* Get SD card Information */
    __disable_irq();
    HAL_SD_GetCardInfo(&hsd, CardInfo);
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	4804      	ldr	r0, [pc, #16]	; (80091c8 <BSP_SD_GetCardInfo+0x20>)
 80091b8:	f7fd f951 	bl	800645e <HAL_SD_GetCardInfo>
  __ASM volatile ("cpsie i" : : : "memory");
 80091bc:	b662      	cpsie	i
}
 80091be:	bf00      	nop
    __enable_irq();
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20008050 	.word	0x20008050

080091cc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80091d2:	2301      	movs	r3, #1
 80091d4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	b2db      	uxtb	r3, r3
}
 80091da:	4618      	mov	r0, r3
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
	...

080091e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver((Diskio_drvTypeDef*)&SD_Driver, SD_Path);
 80091ec:	4904      	ldr	r1, [pc, #16]	; (8009200 <MX_FATFS_Init+0x18>)
 80091ee:	4805      	ldr	r0, [pc, #20]	; (8009204 <MX_FATFS_Init+0x1c>)
 80091f0:	f003 f88a 	bl	800c308 <FATFS_LinkDriver>
 80091f4:	4603      	mov	r3, r0
 80091f6:	461a      	mov	r2, r3
 80091f8:	4b03      	ldr	r3, [pc, #12]	; (8009208 <MX_FATFS_Init+0x20>)
 80091fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80091fc:	bf00      	nop
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200081b0 	.word	0x200081b0
 8009204:	08012e20 	.word	0x08012e20
 8009208:	200081ac 	.word	0x200081ac

0800920c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009210:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009212:	4618      	mov	r0, r3
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009226:	4b0b      	ldr	r3, [pc, #44]	; (8009254 <SD_initialize+0x38>)
 8009228:	2201      	movs	r2, #1
 800922a:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800922c:	f7ff ff2a 	bl	8009084 <BSP_SD_Init>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d107      	bne.n	8009246 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009236:	4b07      	ldr	r3, [pc, #28]	; (8009254 <SD_initialize+0x38>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	b2db      	uxtb	r3, r3
 800923c:	f023 0301 	bic.w	r3, r3, #1
 8009240:	b2da      	uxtb	r2, r3
 8009242:	4b04      	ldr	r3, [pc, #16]	; (8009254 <SD_initialize+0x38>)
 8009244:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009246:	4b03      	ldr	r3, [pc, #12]	; (8009254 <SD_initialize+0x38>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	b2db      	uxtb	r3, r3
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	2000000c 	.word	0x2000000c

08009258 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	71fb      	strb	r3, [r7, #7]
  
  if(BSP_SD_GetCardState() != SD_TRANSFER_BUSY)
 8009262:	f7ff ff7f 	bl	8009164 <BSP_SD_GetCardState>
 8009266:	4603      	mov	r3, r0
 8009268:	2b01      	cmp	r3, #1
 800926a:	d008      	beq.n	800927e <SD_status+0x26>
    Stat &= ~STA_BUSY;
 800926c:	4b0b      	ldr	r3, [pc, #44]	; (800929c <SD_status+0x44>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	f023 0308 	bic.w	r3, r3, #8
 8009276:	b2da      	uxtb	r2, r3
 8009278:	4b08      	ldr	r3, [pc, #32]	; (800929c <SD_status+0x44>)
 800927a:	701a      	strb	r2, [r3, #0]
 800927c:	e007      	b.n	800928e <SD_status+0x36>
  else
    Stat |= STA_BUSY;
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <SD_status+0x44>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	f043 0308 	orr.w	r3, r3, #8
 8009288:	b2da      	uxtb	r2, r3
 800928a:	4b04      	ldr	r3, [pc, #16]	; (800929c <SD_status+0x44>)
 800928c:	701a      	strb	r2, [r3, #0]
  
  return Stat;
 800928e:	4b03      	ldr	r3, [pc, #12]	; (800929c <SD_status+0x44>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	b2db      	uxtb	r3, r3
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	2000000c 	.word	0x2000000c

080092a0 <SD_read>:
  */
    
#define MMC_RDWR_TRIES       20
#define MMC_STATUS_TRIES     500
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 80092b0:	2314      	movs	r3, #20
 80092b2:	617b      	str	r3, [r7, #20]

  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 80092b4:	e009      	b.n	80092ca <SD_read+0x2a>
  {
    if (timeout-- == 0)
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	1e5a      	subs	r2, r3, #1
 80092ba:	617a      	str	r2, [r7, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <SD_read+0x24>
    {
      return RES_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e020      	b.n	8009306 <SD_read+0x66>
    }
    osDelay(1);
 80092c4:	2001      	movs	r0, #1
 80092c6:	f003 f891 	bl	800c3ec <osDelay>
  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 80092ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	68b8      	ldr	r0, [r7, #8]
 80092d4:	f7ff fefc 	bl	80090d0 <BSP_SD_ReadBlocks>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1eb      	bne.n	80092b6 <SD_read+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 80092de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80092e2:	617b      	str	r3, [r7, #20]
  while (BSP_SD_GetCardState() != HAL_OK)
 80092e4:	e009      	b.n	80092fa <SD_read+0x5a>
  {
    if (timeout-- == 0)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	1e5a      	subs	r2, r3, #1
 80092ea:	617a      	str	r2, [r7, #20]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <SD_read+0x54>
    {
      return RES_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e008      	b.n	8009306 <SD_read+0x66>
    }
    osDelay(1);
 80092f4:	2001      	movs	r0, #1
 80092f6:	f003 f879 	bl	800c3ec <osDelay>
  while (BSP_SD_GetCardState() != HAL_OK)
 80092fa:	f7ff ff33 	bl	8009164 <BSP_SD_GetCardState>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1f0      	bne.n	80092e6 <SD_read+0x46>
  }
  return RES_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b086      	sub	sp, #24
 8009312:	af00      	add	r7, sp, #0
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 800931e:	2314      	movs	r3, #20
 8009320:	617b      	str	r3, [r7, #20]

  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009322:	e009      	b.n	8009338 <SD_write+0x2a>
  {
    if (timeout-- == 0)
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	1e5a      	subs	r2, r3, #1
 8009328:	617a      	str	r2, [r7, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <SD_write+0x24>
    {
      return RES_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e020      	b.n	8009374 <SD_write+0x66>
    }
    osDelay(1);
 8009332:	2001      	movs	r0, #1
 8009334:	f003 f85a 	bl	800c3ec <osDelay>
  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009338:	f241 3388 	movw	r3, #5000	; 0x1388
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	68b8      	ldr	r0, [r7, #8]
 8009342:	f7ff fee9 	bl	8009118 <BSP_SD_WriteBlocks>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1eb      	bne.n	8009324 <SD_write+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 800934c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009350:	617b      	str	r3, [r7, #20]
  while(BSP_SD_GetCardState() != HAL_OK)
 8009352:	e009      	b.n	8009368 <SD_write+0x5a>
  {
    if (timeout-- == 0)
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	1e5a      	subs	r2, r3, #1
 8009358:	617a      	str	r2, [r7, #20]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <SD_write+0x54>
    {
      return RES_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e008      	b.n	8009374 <SD_write+0x66>
    }
    osDelay(1);
 8009362:	2001      	movs	r0, #1
 8009364:	f003 f842 	bl	800c3ec <osDelay>
  while(BSP_SD_GetCardState() != HAL_OK)
 8009368:	f7ff fefc 	bl	8009164 <BSP_SD_GetCardState>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1f0      	bne.n	8009354 <SD_write+0x46>
  }    
  return RES_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08c      	sub	sp, #48	; 0x30
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	603a      	str	r2, [r7, #0]
 8009386:	71fb      	strb	r3, [r7, #7]
 8009388:	460b      	mov	r3, r1
 800938a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) 
 8009392:	4b24      	ldr	r3, [pc, #144]	; (8009424 <SD_ioctl+0xa8>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <SD_ioctl+0x28>
    return RES_NOTRDY;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e03b      	b.n	800941c <SD_ioctl+0xa0>
  
  switch (cmd)
 80093a4:	79bb      	ldrb	r3, [r7, #6]
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d833      	bhi.n	8009412 <SD_ioctl+0x96>
 80093aa:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <SD_ioctl+0x34>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	080093c1 	.word	0x080093c1
 80093b4:	080093c9 	.word	0x080093c9
 80093b8:	080093e1 	.word	0x080093e1
 80093bc:	080093fb 	.word	0x080093fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80093c6:	e027      	b.n	8009418 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80093c8:	f107 030c 	add.w	r3, r7, #12
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff feeb 	bl	80091a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80093d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80093de:	e01b      	b.n	8009418 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80093e0:	f107 030c 	add.w	r3, r7, #12
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff fedf 	bl	80091a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80093f8:	e00e      	b.n	8009418 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80093fa:	f107 030c 	add.w	r3, r7, #12
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff fed2 	bl	80091a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8009404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009410:	e002      	b.n	8009418 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8009412:	2304      	movs	r3, #4
 8009414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8009418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800941c:	4618      	mov	r0, r3
 800941e:	3730      	adds	r7, #48	; 0x30
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	2000000c 	.word	0x2000000c

08009428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800942c:	2003      	movs	r0, #3
 800942e:	f7f9 ff45 	bl	80032bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	f06f 000b 	mvn.w	r0, #11
 800943a:	f7f9 ff4a 	bl	80032d2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800943e:	2200      	movs	r2, #0
 8009440:	2100      	movs	r1, #0
 8009442:	f06f 000a 	mvn.w	r0, #10
 8009446:	f7f9 ff44 	bl	80032d2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800944a:	2200      	movs	r2, #0
 800944c:	2100      	movs	r1, #0
 800944e:	f06f 0009 	mvn.w	r0, #9
 8009452:	f7f9 ff3e 	bl	80032d2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8009456:	2200      	movs	r2, #0
 8009458:	2100      	movs	r1, #0
 800945a:	f06f 0004 	mvn.w	r0, #4
 800945e:	f7f9 ff38 	bl	80032d2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8009462:	2200      	movs	r2, #0
 8009464:	2100      	movs	r1, #0
 8009466:	f06f 0003 	mvn.w	r0, #3
 800946a:	f7f9 ff32 	bl	80032d2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800946e:	2200      	movs	r2, #0
 8009470:	210f      	movs	r1, #15
 8009472:	f06f 0001 	mvn.w	r0, #1
 8009476:	f7f9 ff2c 	bl	80032d2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800947a:	2200      	movs	r2, #0
 800947c:	210f      	movs	r1, #15
 800947e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009482:	f7f9 ff26 	bl	80032d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009486:	bf00      	nop
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <HAL_I2C_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08a      	sub	sp, #40	; 0x28
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a37      	ldr	r2, [pc, #220]	; (8009578 <HAL_I2C_MspInit+0xec>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d11f      	bne.n	80094de <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 800949e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80094a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80094a4:	2312      	movs	r3, #18
 80094a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094a8:	2301      	movs	r3, #1
 80094aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094ac:	2303      	movs	r3, #3
 80094ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80094b0:	2304      	movs	r3, #4
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094b4:	f107 0314 	add.w	r3, r7, #20
 80094b8:	4619      	mov	r1, r3
 80094ba:	4830      	ldr	r0, [pc, #192]	; (800957c <HAL_I2C_MspInit+0xf0>)
 80094bc:	f7fa f90e 	bl	80036dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80094c0:	2300      	movs	r3, #0
 80094c2:	613b      	str	r3, [r7, #16]
 80094c4:	4b2e      	ldr	r3, [pc, #184]	; (8009580 <HAL_I2C_MspInit+0xf4>)
 80094c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c8:	4a2d      	ldr	r2, [pc, #180]	; (8009580 <HAL_I2C_MspInit+0xf4>)
 80094ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094ce:	6413      	str	r3, [r2, #64]	; 0x40
 80094d0:	4b2b      	ldr	r3, [pc, #172]	; (8009580 <HAL_I2C_MspInit+0xf4>)
 80094d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094d8:	613b      	str	r3, [r7, #16]
 80094da:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80094dc:	e048      	b.n	8009570 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C2)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a28      	ldr	r2, [pc, #160]	; (8009584 <HAL_I2C_MspInit+0xf8>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d11f      	bne.n	8009528 <HAL_I2C_MspInit+0x9c>
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 80094e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80094ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80094ee:	2312      	movs	r3, #18
 80094f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094f2:	2301      	movs	r3, #1
 80094f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094f6:	2303      	movs	r3, #3
 80094f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80094fa:	2304      	movs	r3, #4
 80094fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094fe:	f107 0314 	add.w	r3, r7, #20
 8009502:	4619      	mov	r1, r3
 8009504:	481d      	ldr	r0, [pc, #116]	; (800957c <HAL_I2C_MspInit+0xf0>)
 8009506:	f7fa f8e9 	bl	80036dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
 800950e:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <HAL_I2C_MspInit+0xf4>)
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	4a1b      	ldr	r2, [pc, #108]	; (8009580 <HAL_I2C_MspInit+0xf4>)
 8009514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009518:	6413      	str	r3, [r2, #64]	; 0x40
 800951a:	4b19      	ldr	r3, [pc, #100]	; (8009580 <HAL_I2C_MspInit+0xf4>)
 800951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]
}
 8009526:	e023      	b.n	8009570 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C3)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a16      	ldr	r2, [pc, #88]	; (8009588 <HAL_I2C_MspInit+0xfc>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d11e      	bne.n	8009570 <HAL_I2C_MspInit+0xe4>
    GPIO_InitStruct.Pin = PAY_SCL_Pin|PAY_SDA_Pin;
 8009532:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009538:	2312      	movs	r3, #18
 800953a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800953c:	2301      	movs	r3, #1
 800953e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009540:	2303      	movs	r3, #3
 8009542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009544:	2304      	movs	r3, #4
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009548:	f107 0314 	add.w	r3, r7, #20
 800954c:	4619      	mov	r1, r3
 800954e:	480f      	ldr	r0, [pc, #60]	; (800958c <HAL_I2C_MspInit+0x100>)
 8009550:	f7fa f8c4 	bl	80036dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009554:	2300      	movs	r3, #0
 8009556:	60bb      	str	r3, [r7, #8]
 8009558:	4b09      	ldr	r3, [pc, #36]	; (8009580 <HAL_I2C_MspInit+0xf4>)
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	4a08      	ldr	r2, [pc, #32]	; (8009580 <HAL_I2C_MspInit+0xf4>)
 800955e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009562:	6413      	str	r3, [r2, #64]	; 0x40
 8009564:	4b06      	ldr	r3, [pc, #24]	; (8009580 <HAL_I2C_MspInit+0xf4>)
 8009566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800956c:	60bb      	str	r3, [r7, #8]
 800956e:	68bb      	ldr	r3, [r7, #8]
}
 8009570:	bf00      	nop
 8009572:	3728      	adds	r7, #40	; 0x28
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	40005400 	.word	0x40005400
 800957c:	40020400 	.word	0x40020400
 8009580:	40023800 	.word	0x40023800
 8009584:	40005800 	.word	0x40005800
 8009588:	40005c00 	.word	0x40005c00
 800958c:	40021c00 	.word	0x40021c00

08009590 <HAL_SD_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a1e      	ldr	r2, [pc, #120]	; (8009618 <HAL_SD_MspInit+0x88>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d136      	bne.n	8009610 <HAL_SD_MspInit+0x80>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80095a2:	2300      	movs	r3, #0
 80095a4:	60bb      	str	r3, [r7, #8]
 80095a6:	4b1d      	ldr	r3, [pc, #116]	; (800961c <HAL_SD_MspInit+0x8c>)
 80095a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095aa:	4a1c      	ldr	r2, [pc, #112]	; (800961c <HAL_SD_MspInit+0x8c>)
 80095ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80095b0:	6453      	str	r3, [r2, #68]	; 0x44
 80095b2:	4b1a      	ldr	r3, [pc, #104]	; (800961c <HAL_SD_MspInit+0x8c>)
 80095b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095ba:	60bb      	str	r3, [r7, #8]
 80095bc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80095be:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80095c2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095c4:	2302      	movs	r3, #2
 80095c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c8:	2300      	movs	r3, #0
 80095ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095cc:	2303      	movs	r3, #3
 80095ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80095d0:	230c      	movs	r3, #12
 80095d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80095d4:	f107 030c 	add.w	r3, r7, #12
 80095d8:	4619      	mov	r1, r3
 80095da:	4811      	ldr	r0, [pc, #68]	; (8009620 <HAL_SD_MspInit+0x90>)
 80095dc:	f7fa f87e 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80095e0:	2304      	movs	r3, #4
 80095e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095e4:	2302      	movs	r3, #2
 80095e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095ec:	2303      	movs	r3, #3
 80095ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80095f0:	230c      	movs	r3, #12
 80095f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	4619      	mov	r1, r3
 80095fa:	480a      	ldr	r0, [pc, #40]	; (8009624 <HAL_SD_MspInit+0x94>)
 80095fc:	f7fa f86e 	bl	80036dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, USER_INT_PRIORITY, 0);
 8009600:	2200      	movs	r2, #0
 8009602:	2106      	movs	r1, #6
 8009604:	2031      	movs	r0, #49	; 0x31
 8009606:	f7f9 fe64 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800960a:	2031      	movs	r0, #49	; 0x31
 800960c:	f7f9 fe7d 	bl	800330a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8009610:	bf00      	nop
 8009612:	3720      	adds	r7, #32
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	40012c00 	.word	0x40012c00
 800961c:	40023800 	.word	0x40023800
 8009620:	40020800 	.word	0x40020800
 8009624:	40020c00 	.word	0x40020c00

08009628 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM5)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a0b      	ldr	r2, [pc, #44]	; (8009664 <HAL_TIM_Base_MspInit+0x3c>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d10d      	bne.n	8009656 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800963a:	2300      	movs	r3, #0
 800963c:	60fb      	str	r3, [r7, #12]
 800963e:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <HAL_TIM_Base_MspInit+0x40>)
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	4a09      	ldr	r2, [pc, #36]	; (8009668 <HAL_TIM_Base_MspInit+0x40>)
 8009644:	f043 0308 	orr.w	r3, r3, #8
 8009648:	6413      	str	r3, [r2, #64]	; 0x40
 800964a:	4b07      	ldr	r3, [pc, #28]	; (8009668 <HAL_TIM_Base_MspInit+0x40>)
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	f003 0308 	and.w	r3, r3, #8
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8009656:	bf00      	nop
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	40000c00 	.word	0x40000c00
 8009668:	40023800 	.word	0x40023800

0800966c <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08a      	sub	sp, #40	; 0x28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a42      	ldr	r2, [pc, #264]	; (8009784 <HAL_UART_MspInit+0x118>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d126      	bne.n	80096cc <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800967e:	2300      	movs	r3, #0
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	4b41      	ldr	r3, [pc, #260]	; (8009788 <HAL_UART_MspInit+0x11c>)
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	4a40      	ldr	r2, [pc, #256]	; (8009788 <HAL_UART_MspInit+0x11c>)
 8009688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800968c:	6413      	str	r3, [r2, #64]	; 0x40
 800968e:	4b3e      	ldr	r3, [pc, #248]	; (8009788 <HAL_UART_MspInit+0x11c>)
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800969a:	2303      	movs	r3, #3
 800969c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800969e:	2302      	movs	r3, #2
 80096a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80096a2:	2301      	movs	r3, #1
 80096a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096a6:	2303      	movs	r3, #3
 80096a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80096aa:	2308      	movs	r3, #8
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096ae:	f107 0314 	add.w	r3, r7, #20
 80096b2:	4619      	mov	r1, r3
 80096b4:	4835      	ldr	r0, [pc, #212]	; (800978c <HAL_UART_MspInit+0x120>)
 80096b6:	f7fa f811 	bl	80036dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, USER_INT_PRIORITY, 0);
 80096ba:	2200      	movs	r2, #0
 80096bc:	2106      	movs	r1, #6
 80096be:	2034      	movs	r0, #52	; 0x34
 80096c0:	f7f9 fe07 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80096c4:	2034      	movs	r0, #52	; 0x34
 80096c6:	f7f9 fe20 	bl	800330a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80096ca:	e057      	b.n	800977c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART1)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a2f      	ldr	r2, [pc, #188]	; (8009790 <HAL_UART_MspInit+0x124>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d127      	bne.n	8009726 <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	4b2b      	ldr	r3, [pc, #172]	; (8009788 <HAL_UART_MspInit+0x11c>)
 80096dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096de:	4a2a      	ldr	r2, [pc, #168]	; (8009788 <HAL_UART_MspInit+0x11c>)
 80096e0:	f043 0310 	orr.w	r3, r3, #16
 80096e4:	6453      	str	r3, [r2, #68]	; 0x44
 80096e6:	4b28      	ldr	r3, [pc, #160]	; (8009788 <HAL_UART_MspInit+0x11c>)
 80096e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ea:	f003 0310 	and.w	r3, r3, #16
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80096f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80096f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f8:	2302      	movs	r3, #2
 80096fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80096fc:	2301      	movs	r3, #1
 80096fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009700:	2303      	movs	r3, #3
 8009702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009704:	2307      	movs	r3, #7
 8009706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009708:	f107 0314 	add.w	r3, r7, #20
 800970c:	4619      	mov	r1, r3
 800970e:	481f      	ldr	r0, [pc, #124]	; (800978c <HAL_UART_MspInit+0x120>)
 8009710:	f7f9 ffe4 	bl	80036dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, USER_INT_PRIORITY, 0);
 8009714:	2200      	movs	r2, #0
 8009716:	2106      	movs	r1, #6
 8009718:	2025      	movs	r0, #37	; 0x25
 800971a:	f7f9 fdda 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);    
 800971e:	2025      	movs	r0, #37	; 0x25
 8009720:	f7f9 fdf3 	bl	800330a <HAL_NVIC_EnableIRQ>
}
 8009724:	e02a      	b.n	800977c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART6)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a1a      	ldr	r2, [pc, #104]	; (8009794 <HAL_UART_MspInit+0x128>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d125      	bne.n	800977c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009730:	2300      	movs	r3, #0
 8009732:	60bb      	str	r3, [r7, #8]
 8009734:	4b14      	ldr	r3, [pc, #80]	; (8009788 <HAL_UART_MspInit+0x11c>)
 8009736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009738:	4a13      	ldr	r2, [pc, #76]	; (8009788 <HAL_UART_MspInit+0x11c>)
 800973a:	f043 0320 	orr.w	r3, r3, #32
 800973e:	6453      	str	r3, [r2, #68]	; 0x44
 8009740:	4b11      	ldr	r3, [pc, #68]	; (8009788 <HAL_UART_MspInit+0x11c>)
 8009742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009744:	f003 0320 	and.w	r3, r3, #32
 8009748:	60bb      	str	r3, [r7, #8]
 800974a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PAY_TX_Pin|PAY_RX_Pin;
 800974c:	23c0      	movs	r3, #192	; 0xc0
 800974e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009750:	2302      	movs	r3, #2
 8009752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009754:	2301      	movs	r3, #1
 8009756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009758:	2303      	movs	r3, #3
 800975a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800975c:	2308      	movs	r3, #8
 800975e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009760:	f107 0314 	add.w	r3, r7, #20
 8009764:	4619      	mov	r1, r3
 8009766:	480c      	ldr	r0, [pc, #48]	; (8009798 <HAL_UART_MspInit+0x12c>)
 8009768:	f7f9 ffb8 	bl	80036dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, USER_INT_PRIORITY, 0);
 800976c:	2200      	movs	r2, #0
 800976e:	2106      	movs	r1, #6
 8009770:	2047      	movs	r0, #71	; 0x47
 8009772:	f7f9 fdae 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8009776:	2047      	movs	r0, #71	; 0x47
 8009778:	f7f9 fdc7 	bl	800330a <HAL_NVIC_EnableIRQ>
}
 800977c:	bf00      	nop
 800977e:	3728      	adds	r7, #40	; 0x28
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	40004c00 	.word	0x40004c00
 8009788:	40023800 	.word	0x40023800
 800978c:	40020000 	.word	0x40020000
 8009790:	40011000 	.word	0x40011000
 8009794:	40011400 	.word	0x40011400
 8009798:	40020800 	.word	0x40020800

0800979c <HAL_WWDG_MspInit>:
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]

  if(hwwdg->Instance==WWDG)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a0b      	ldr	r2, [pc, #44]	; (80097d8 <HAL_WWDG_MspInit+0x3c>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d10d      	bne.n	80097ca <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
 80097b2:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <HAL_WWDG_MspInit+0x40>)
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	4a09      	ldr	r2, [pc, #36]	; (80097dc <HAL_WWDG_MspInit+0x40>)
 80097b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80097bc:	6413      	str	r3, [r2, #64]	; 0x40
 80097be:	4b07      	ldr	r3, [pc, #28]	; (80097dc <HAL_WWDG_MspInit+0x40>)
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 80097ca:	bf00      	nop
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40002c00 	.word	0x40002c00
 80097dc:	40023800 	.word	0x40023800

080097e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08c      	sub	sp, #48	; 0x30
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80097e8:	2300      	movs	r3, #0
 80097ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80097f0:	2200      	movs	r2, #0
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	2019      	movs	r0, #25
 80097f6:	f7f9 fd6c 	bl	80032d2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80097fa:	2019      	movs	r0, #25
 80097fc:	f7f9 fd85 	bl	800330a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	4b1f      	ldr	r3, [pc, #124]	; (8009884 <HAL_InitTick+0xa4>)
 8009806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009808:	4a1e      	ldr	r2, [pc, #120]	; (8009884 <HAL_InitTick+0xa4>)
 800980a:	f043 0301 	orr.w	r3, r3, #1
 800980e:	6453      	str	r3, [r2, #68]	; 0x44
 8009810:	4b1c      	ldr	r3, [pc, #112]	; (8009884 <HAL_InitTick+0xa4>)
 8009812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800981c:	f107 0210 	add.w	r2, r7, #16
 8009820:	f107 0314 	add.w	r3, r7, #20
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7fb fc72 	bl	8005110 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800982c:	f7fb fc4e 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8009830:	4603      	mov	r3, r0
 8009832:	005b      	lsls	r3, r3, #1
 8009834:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	4a13      	ldr	r2, [pc, #76]	; (8009888 <HAL_InitTick+0xa8>)
 800983a:	fba2 2303 	umull	r2, r3, r2, r3
 800983e:	0c9b      	lsrs	r3, r3, #18
 8009840:	3b01      	subs	r3, #1
 8009842:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8009844:	4b11      	ldr	r3, [pc, #68]	; (800988c <HAL_InitTick+0xac>)
 8009846:	4a12      	ldr	r2, [pc, #72]	; (8009890 <HAL_InitTick+0xb0>)
 8009848:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800984a:	4b10      	ldr	r3, [pc, #64]	; (800988c <HAL_InitTick+0xac>)
 800984c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009850:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8009852:	4a0e      	ldr	r2, [pc, #56]	; (800988c <HAL_InitTick+0xac>)
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8009858:	4b0c      	ldr	r3, [pc, #48]	; (800988c <HAL_InitTick+0xac>)
 800985a:	2200      	movs	r2, #0
 800985c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800985e:	4b0b      	ldr	r3, [pc, #44]	; (800988c <HAL_InitTick+0xac>)
 8009860:	2200      	movs	r2, #0
 8009862:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8009864:	4809      	ldr	r0, [pc, #36]	; (800988c <HAL_InitTick+0xac>)
 8009866:	f7fd fa8e 	bl	8006d86 <HAL_TIM_Base_Init>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d104      	bne.n	800987a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8009870:	4806      	ldr	r0, [pc, #24]	; (800988c <HAL_InitTick+0xac>)
 8009872:	f7fd fab3 	bl	8006ddc <HAL_TIM_Base_Start_IT>
 8009876:	4603      	mov	r3, r0
 8009878:	e000      	b.n	800987c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
}
 800987c:	4618      	mov	r0, r3
 800987e:	3730      	adds	r7, #48	; 0x30
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	40023800 	.word	0x40023800
 8009888:	431bde83 	.word	0x431bde83
 800988c:	200081b4 	.word	0x200081b4
 8009890:	40010000 	.word	0x40010000

08009894 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009898:	bf00      	nop
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
	...

080098a4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  *((__IO uint32_t*)MAILBOX_ADDRESS) = MAILBOX_VAL_HARD;
 80098a8:	4b03      	ldr	r3, [pc, #12]	; (80098b8 <HardFault_Handler+0x14>)
 80098aa:	4a04      	ldr	r2, [pc, #16]	; (80098bc <HardFault_Handler+0x18>)
 80098ac:	601a      	str	r2, [r3, #0]
  MX_WWDG_Init();
 80098ae:	f7ff fbc7 	bl	8009040 <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	Error_Handler();
 80098b2:	f7f9 fb6b 	bl	8002f8c <Error_Handler>
 80098b6:	e7fc      	b.n	80098b2 <HardFault_Handler+0xe>
 80098b8:	40002854 	.word	0x40002854
 80098bc:	0bad0bad 	.word	0x0bad0bad

080098c0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80098c0:	b480      	push	{r7}
 80098c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80098c4:	e7fe      	b.n	80098c4 <MemManage_Handler+0x4>

080098c6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80098c6:	b480      	push	{r7}
 80098c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80098ca:	e7fe      	b.n	80098ca <BusFault_Handler+0x4>

080098cc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80098d0:	e7fe      	b.n	80098d0 <UsageFault_Handler+0x4>

080098d2 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80098d2:	b480      	push	{r7}
 80098d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80098d6:	bf00      	nop
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80098e4:	f002 fe4d 	bl	800c582 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80098e8:	bf00      	nop
 80098ea:	bd80      	pop	{r7, pc}

080098ec <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80098f0:	4802      	ldr	r0, [pc, #8]	; (80098fc <SDIO_IRQHandler+0x10>)
 80098f2:	f7fc f9fd 	bl	8005cf0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80098f6:	bf00      	nop
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20008050 	.word	0x20008050

08009900 <USART1_IRQHandler>:

void  USART1_IRQHandler(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8009904:	4802      	ldr	r0, [pc, #8]	; (8009910 <USART1_IRQHandler+0x10>)
 8009906:	f7fd fe4d 	bl	80075a4 <HAL_UART_IRQHandler>
}
 800990a:	bf00      	nop
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20007f78 	.word	0x20007f78

08009914 <UART4_IRQHandler>:
void  UART4_IRQHandler(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 8009918:	4802      	ldr	r0, [pc, #8]	; (8009924 <UART4_IRQHandler+0x10>)
 800991a:	f7fd fe43 	bl	80075a4 <HAL_UART_IRQHandler>
}
 800991e:	bf00      	nop
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20008114 	.word	0x20008114

08009928 <USART6_IRQHandler>:
void  USART6_IRQHandler(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart6);
 800992c:	4802      	ldr	r0, [pc, #8]	; (8009938 <USART6_IRQHandler+0x10>)
 800992e:	f7fd fe39 	bl	80075a4 <HAL_UART_IRQHandler>
}
 8009932:	bf00      	nop
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	200080d4 	.word	0x200080d4

0800993c <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009940:	4802      	ldr	r0, [pc, #8]	; (800994c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009942:	f7fd fa66 	bl	8006e12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009946:	bf00      	nop
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	200081b4 	.word	0x200081b4

08009950 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8009954:	4802      	ldr	r0, [pc, #8]	; (8009960 <DMA2_Stream3_IRQHandler+0x10>)
 8009956:	f7f9 fd31 	bl	80033bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800995a:	bf00      	nop
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20007c2c 	.word	0x20007c2c

08009964 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8009968:	4802      	ldr	r0, [pc, #8]	; (8009974 <DMA2_Stream6_IRQHandler+0x10>)
 800996a:	f7f9 fd27 	bl	80033bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800996e:	bf00      	nop
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	20007fdc 	.word	0x20007fdc

08009978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800997c:	4b16      	ldr	r3, [pc, #88]	; (80099d8 <SystemInit+0x60>)
 800997e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009982:	4a15      	ldr	r2, [pc, #84]	; (80099d8 <SystemInit+0x60>)
 8009984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800998c:	4b13      	ldr	r3, [pc, #76]	; (80099dc <SystemInit+0x64>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a12      	ldr	r2, [pc, #72]	; (80099dc <SystemInit+0x64>)
 8009992:	f043 0301 	orr.w	r3, r3, #1
 8009996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009998:	4b10      	ldr	r3, [pc, #64]	; (80099dc <SystemInit+0x64>)
 800999a:	2200      	movs	r2, #0
 800999c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800999e:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <SystemInit+0x64>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a0e      	ldr	r2, [pc, #56]	; (80099dc <SystemInit+0x64>)
 80099a4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80099a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80099ae:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <SystemInit+0x64>)
 80099b0:	4a0b      	ldr	r2, [pc, #44]	; (80099e0 <SystemInit+0x68>)
 80099b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80099b4:	4b09      	ldr	r3, [pc, #36]	; (80099dc <SystemInit+0x64>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a08      	ldr	r2, [pc, #32]	; (80099dc <SystemInit+0x64>)
 80099ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80099c0:	4b06      	ldr	r3, [pc, #24]	; (80099dc <SystemInit+0x64>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80099c6:	4b04      	ldr	r3, [pc, #16]	; (80099d8 <SystemInit+0x60>)
 80099c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80099cc:	609a      	str	r2, [r3, #8]
#endif
}
 80099ce:	bf00      	nop
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	e000ed00 	.word	0xe000ed00
 80099dc:	40023800 	.word	0x40023800
 80099e0:	24003010 	.word	0x24003010

080099e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	4a08      	ldr	r2, [pc, #32]	; (8009a14 <disk_status+0x30>)
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	79fa      	ldrb	r2, [r7, #7]
 80099fc:	4905      	ldr	r1, [pc, #20]	; (8009a14 <disk_status+0x30>)
 80099fe:	440a      	add	r2, r1
 8009a00:	7a12      	ldrb	r2, [r2, #8]
 8009a02:	4610      	mov	r0, r2
 8009a04:	4798      	blx	r3
 8009a06:	4603      	mov	r3, r0
 8009a08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	20000270 	.word	0x20000270

08009a18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	4a0d      	ldr	r2, [pc, #52]	; (8009a60 <disk_initialize+0x48>)
 8009a2a:	5cd3      	ldrb	r3, [r2, r3]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d111      	bne.n	8009a54 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	4a0b      	ldr	r2, [pc, #44]	; (8009a60 <disk_initialize+0x48>)
 8009a34:	2101      	movs	r1, #1
 8009a36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <disk_initialize+0x48>)
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	79fa      	ldrb	r2, [r7, #7]
 8009a46:	4906      	ldr	r1, [pc, #24]	; (8009a60 <disk_initialize+0x48>)
 8009a48:	440a      	add	r2, r1
 8009a4a:	7a12      	ldrb	r2, [r2, #8]
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4798      	blx	r3
 8009a50:	4603      	mov	r3, r0
 8009a52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000270 	.word	0x20000270

08009a64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009a64:	b590      	push	{r4, r7, lr}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60b9      	str	r1, [r7, #8]
 8009a6c:	607a      	str	r2, [r7, #4]
 8009a6e:	603b      	str	r3, [r7, #0]
 8009a70:	4603      	mov	r3, r0
 8009a72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	4a0a      	ldr	r2, [pc, #40]	; (8009aa0 <disk_read+0x3c>)
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	689c      	ldr	r4, [r3, #8]
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	4a07      	ldr	r2, [pc, #28]	; (8009aa0 <disk_read+0x3c>)
 8009a84:	4413      	add	r3, r2
 8009a86:	7a18      	ldrb	r0, [r3, #8]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	47a0      	blx	r4
 8009a90:	4603      	mov	r3, r0
 8009a92:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd90      	pop	{r4, r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20000270 	.word	0x20000270

08009aa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009aa4:	b590      	push	{r4, r7, lr}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	607a      	str	r2, [r7, #4]
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	4a0a      	ldr	r2, [pc, #40]	; (8009ae0 <disk_write+0x3c>)
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	68dc      	ldr	r4, [r3, #12]
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4a07      	ldr	r2, [pc, #28]	; (8009ae0 <disk_write+0x3c>)
 8009ac4:	4413      	add	r3, r2
 8009ac6:	7a18      	ldrb	r0, [r3, #8]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	47a0      	blx	r4
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd90      	pop	{r4, r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	20000270 	.word	0x20000270

08009ae4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	603a      	str	r2, [r7, #0]
 8009aee:	71fb      	strb	r3, [r7, #7]
 8009af0:	460b      	mov	r3, r1
 8009af2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	4a09      	ldr	r2, [pc, #36]	; (8009b1c <disk_ioctl+0x38>)
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	79fa      	ldrb	r2, [r7, #7]
 8009b02:	4906      	ldr	r1, [pc, #24]	; (8009b1c <disk_ioctl+0x38>)
 8009b04:	440a      	add	r2, r1
 8009b06:	7a10      	ldrb	r0, [r2, #8]
 8009b08:	79b9      	ldrb	r1, [r7, #6]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	4798      	blx	r3
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73fb      	strb	r3, [r7, #15]
  return res;
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	20000270 	.word	0x20000270

08009b20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b20:	b480      	push	{r7}
 8009b22:	b087      	sub	sp, #28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009b34:	e007      	b.n	8009b46 <mem_cpy+0x26>
		*d++ = *s++;
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	1c53      	adds	r3, r2, #1
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	1c59      	adds	r1, r3, #1
 8009b40:	6179      	str	r1, [r7, #20]
 8009b42:	7812      	ldrb	r2, [r2, #0]
 8009b44:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	1e5a      	subs	r2, r3, #1
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1f2      	bne.n	8009b36 <mem_cpy+0x16>
}
 8009b50:	bf00      	nop
 8009b52:	bf00      	nop
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b5e:	b480      	push	{r7}
 8009b60:	b087      	sub	sp, #28
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	60b9      	str	r1, [r7, #8]
 8009b68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009b6e:	e005      	b.n	8009b7c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	617a      	str	r2, [r7, #20]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	b2d2      	uxtb	r2, r2
 8009b7a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	1e5a      	subs	r2, r3, #1
 8009b80:	607a      	str	r2, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1f4      	bne.n	8009b70 <mem_set+0x12>
}
 8009b86:	bf00      	nop
 8009b88:	bf00      	nop
 8009b8a:	371c      	adds	r7, #28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009b94:	b480      	push	{r7}
 8009b96:	b089      	sub	sp, #36	; 0x24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	61fb      	str	r3, [r7, #28]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009bac:	bf00      	nop
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	1e5a      	subs	r2, r3, #1
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00d      	beq.n	8009bd4 <mem_cmp+0x40>
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	61fa      	str	r2, [r7, #28]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	61ba      	str	r2, [r7, #24]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	1acb      	subs	r3, r1, r3
 8009bcc:	617b      	str	r3, [r7, #20]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d0ec      	beq.n	8009bae <mem_cmp+0x1a>
	return r;
 8009bd4:	697b      	ldr	r3, [r7, #20]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3724      	adds	r7, #36	; 0x24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009be2:	b480      	push	{r7}
 8009be4:	b083      	sub	sp, #12
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009bec:	e002      	b.n	8009bf4 <chk_chr+0x12>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <chk_chr+0x26>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	461a      	mov	r2, r3
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d1f2      	bne.n	8009bee <chk_chr+0xc>
	return *str;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009c26:	4618      	mov	r0, r3
 8009c28:	f002 fba7 	bl	800c37a <ff_req_grant>
 8009c2c:	4603      	mov	r3, r0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b082      	sub	sp, #8
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d011      	beq.n	8009c6c <unlock_fs+0x36>
 8009c48:	78fb      	ldrb	r3, [r7, #3]
 8009c4a:	2b0c      	cmp	r3, #12
 8009c4c:	d00e      	beq.n	8009c6c <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8009c4e:	78fb      	ldrb	r3, [r7, #3]
 8009c50:	2b0b      	cmp	r3, #11
 8009c52:	d00b      	beq.n	8009c6c <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	2b09      	cmp	r3, #9
 8009c58:	d008      	beq.n	8009c6c <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	2b0f      	cmp	r3, #15
 8009c5e:	d005      	beq.n	8009c6c <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009c66:	4618      	mov	r0, r3
 8009c68:	f002 fb9c 	bl	800c3a4 <ff_rel_grant>
	}
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60bb      	str	r3, [r7, #8]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	e038      	b.n	8009cfa <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8009c88:	4930      	ldr	r1, [pc, #192]	; (8009d4c <chk_lock+0xd8>)
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	4413      	add	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	440b      	add	r3, r1
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d029      	beq.n	8009cf0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009c9c:	492b      	ldr	r1, [pc, #172]	; (8009d4c <chk_lock+0xd8>)
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	005b      	lsls	r3, r3, #1
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d11e      	bne.n	8009cf4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8009cb6:	4925      	ldr	r1, [pc, #148]	; (8009d4c <chk_lock+0xd8>)
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	005b      	lsls	r3, r3, #1
 8009cbe:	4413      	add	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	440b      	add	r3, r1
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d110      	bne.n	8009cf4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009cd2:	491e      	ldr	r1, [pc, #120]	; (8009d4c <chk_lock+0xd8>)
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	440b      	add	r3, r1
 8009ce0:	3308      	adds	r3, #8
 8009ce2:	881a      	ldrh	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d102      	bne.n	8009cf4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009cee:	e007      	b.n	8009d00 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	60fb      	str	r3, [r7, #12]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b07      	cmp	r3, #7
 8009cfe:	d9c3      	bls.n	8009c88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b08      	cmp	r3, #8
 8009d04:	d109      	bne.n	8009d1a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <chk_lock+0x9e>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d101      	bne.n	8009d16 <chk_lock+0xa2>
 8009d12:	2300      	movs	r3, #0
 8009d14:	e013      	b.n	8009d3e <chk_lock+0xca>
 8009d16:	2312      	movs	r3, #18
 8009d18:	e011      	b.n	8009d3e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10b      	bne.n	8009d38 <chk_lock+0xc4>
 8009d20:	490a      	ldr	r1, [pc, #40]	; (8009d4c <chk_lock+0xd8>)
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4613      	mov	r3, r2
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	440b      	add	r3, r1
 8009d2e:	330a      	adds	r3, #10
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d36:	d101      	bne.n	8009d3c <chk_lock+0xc8>
 8009d38:	2310      	movs	r3, #16
 8009d3a:	e000      	b.n	8009d3e <chk_lock+0xca>
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	20000210 	.word	0x20000210

08009d50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d56:	2300      	movs	r3, #0
 8009d58:	607b      	str	r3, [r7, #4]
 8009d5a:	e002      	b.n	8009d62 <enq_lock+0x12>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	607b      	str	r3, [r7, #4]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b07      	cmp	r3, #7
 8009d66:	d809      	bhi.n	8009d7c <enq_lock+0x2c>
 8009d68:	490a      	ldr	r1, [pc, #40]	; (8009d94 <enq_lock+0x44>)
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1ef      	bne.n	8009d5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b08      	cmp	r3, #8
 8009d80:	bf14      	ite	ne
 8009d82:	2301      	movne	r3, #1
 8009d84:	2300      	moveq	r3, #0
 8009d86:	b2db      	uxtb	r3, r3
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	20000210 	.word	0x20000210

08009d98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	e02b      	b.n	8009e00 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009da8:	4956      	ldr	r1, [pc, #344]	; (8009f04 <inc_lock+0x16c>)
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4613      	mov	r3, r2
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	440b      	add	r3, r1
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d11b      	bne.n	8009dfa <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8009dc2:	4950      	ldr	r1, [pc, #320]	; (8009f04 <inc_lock+0x16c>)
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	4413      	add	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	440b      	add	r3, r1
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d10d      	bne.n	8009dfa <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009dde:	4949      	ldr	r1, [pc, #292]	; (8009f04 <inc_lock+0x16c>)
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	4613      	mov	r3, r2
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	4413      	add	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	440b      	add	r3, r1
 8009dec:	3308      	adds	r3, #8
 8009dee:	881a      	ldrh	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d006      	beq.n	8009e08 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2b07      	cmp	r3, #7
 8009e04:	d9d0      	bls.n	8009da8 <inc_lock+0x10>
 8009e06:	e000      	b.n	8009e0a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8009e08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b08      	cmp	r3, #8
 8009e0e:	d145      	bne.n	8009e9c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	e002      	b.n	8009e1c <inc_lock+0x84>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b07      	cmp	r3, #7
 8009e20:	d809      	bhi.n	8009e36 <inc_lock+0x9e>
 8009e22:	4938      	ldr	r1, [pc, #224]	; (8009f04 <inc_lock+0x16c>)
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4613      	mov	r3, r2
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	4413      	add	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	440b      	add	r3, r1
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1ef      	bne.n	8009e16 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	d101      	bne.n	8009e40 <inc_lock+0xa8>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e05a      	b.n	8009ef6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8009e46:	482f      	ldr	r0, [pc, #188]	; (8009f04 <inc_lock+0x16c>)
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4403      	add	r3, r0
 8009e54:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009e5c:	4829      	ldr	r0, [pc, #164]	; (8009f04 <inc_lock+0x16c>)
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	4613      	mov	r3, r2
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4403      	add	r3, r0
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8009e74:	4923      	ldr	r1, [pc, #140]	; (8009f04 <inc_lock+0x16c>)
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	005b      	lsls	r3, r3, #1
 8009e7c:	4413      	add	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	440b      	add	r3, r1
 8009e82:	3308      	adds	r3, #8
 8009e84:	4602      	mov	r2, r0
 8009e86:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e88:	491e      	ldr	r1, [pc, #120]	; (8009f04 <inc_lock+0x16c>)
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	005b      	lsls	r3, r3, #1
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	440b      	add	r3, r1
 8009e96:	330a      	adds	r3, #10
 8009e98:	2200      	movs	r2, #0
 8009e9a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00c      	beq.n	8009ebc <inc_lock+0x124>
 8009ea2:	4918      	ldr	r1, [pc, #96]	; (8009f04 <inc_lock+0x16c>)
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	330a      	adds	r3, #10
 8009eb2:	881b      	ldrh	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <inc_lock+0x124>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e01c      	b.n	8009ef6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10b      	bne.n	8009eda <inc_lock+0x142>
 8009ec2:	4910      	ldr	r1, [pc, #64]	; (8009f04 <inc_lock+0x16c>)
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	440b      	add	r3, r1
 8009ed0:	330a      	adds	r3, #10
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	b299      	uxth	r1, r3
 8009ed8:	e001      	b.n	8009ede <inc_lock+0x146>
 8009eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ede:	4809      	ldr	r0, [pc, #36]	; (8009f04 <inc_lock+0x16c>)
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	4413      	add	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4403      	add	r3, r0
 8009eec:	330a      	adds	r3, #10
 8009eee:	460a      	mov	r2, r1
 8009ef0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3301      	adds	r3, #1
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20000210 	.word	0x20000210

08009f08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3b01      	subs	r3, #1
 8009f14:	607b      	str	r3, [r7, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b07      	cmp	r3, #7
 8009f1a:	d82e      	bhi.n	8009f7a <dec_lock+0x72>
		n = Files[i].ctr;
 8009f1c:	491b      	ldr	r1, [pc, #108]	; (8009f8c <dec_lock+0x84>)
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	4613      	mov	r3, r2
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	330a      	adds	r3, #10
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f36:	d101      	bne.n	8009f3c <dec_lock+0x34>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009f3c:	89fb      	ldrh	r3, [r7, #14]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <dec_lock+0x40>
 8009f42:	89fb      	ldrh	r3, [r7, #14]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009f48:	4910      	ldr	r1, [pc, #64]	; (8009f8c <dec_lock+0x84>)
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	330a      	adds	r3, #10
 8009f58:	89fa      	ldrh	r2, [r7, #14]
 8009f5a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009f5c:	89fb      	ldrh	r3, [r7, #14]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d108      	bne.n	8009f74 <dec_lock+0x6c>
 8009f62:	490a      	ldr	r1, [pc, #40]	; (8009f8c <dec_lock+0x84>)
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	4613      	mov	r3, r2
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	440b      	add	r3, r1
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	737b      	strb	r3, [r7, #13]
 8009f78:	e001      	b.n	8009f7e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009f7e:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	20000210 	.word	0x20000210

08009f90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f98:	2300      	movs	r3, #0
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e016      	b.n	8009fcc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f9e:	4910      	ldr	r1, [pc, #64]	; (8009fe0 <clear_lock+0x50>)
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	005b      	lsls	r3, r3, #1
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	440b      	add	r3, r1
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d108      	bne.n	8009fc6 <clear_lock+0x36>
 8009fb4:	490a      	ldr	r1, [pc, #40]	; (8009fe0 <clear_lock+0x50>)
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b07      	cmp	r3, #7
 8009fd0:	d9e5      	bls.n	8009f9e <clear_lock+0xe>
	}
}
 8009fd2:	bf00      	nop
 8009fd4:	bf00      	nop
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	20000210 	.word	0x20000210

08009fe4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d038      	beq.n	800a06c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800a000:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	2301      	movs	r3, #1
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	f7ff fd49 	bl	8009aa4 <disk_write>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <sync_window+0x3a>
			res = FR_DISK_ERR;
 800a018:	2301      	movs	r3, #1
 800a01a:	73fb      	strb	r3, [r7, #15]
 800a01c:	e026      	b.n	800a06c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	1ad2      	subs	r2, r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a036:	429a      	cmp	r2, r3
 800a038:	d218      	bcs.n	800a06c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a040:	613b      	str	r3, [r7, #16]
 800a042:	e010      	b.n	800a066 <sync_window+0x82>
					wsect += fs->fsize;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	4413      	add	r3, r2
 800a04e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	2301      	movs	r3, #1
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	f7ff fd22 	bl	8009aa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	3b01      	subs	r3, #1
 800a064:	613b      	str	r3, [r7, #16]
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d8eb      	bhi.n	800a044 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d01b      	beq.n	800a0c8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff ffa7 	bl	8009fe4 <sync_window>
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d113      	bne.n	800a0c8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	f7ff fcda 	bl	8009a64 <disk_read>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d004      	beq.n	800a0c0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ba:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff ff82 	bl	8009fe4 <sync_window>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f040 809b 	bne.w	800a222 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	f040 8088 	bne.w	800a208 <sync_fs+0x136>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	f040 8082 	bne.w	800a208 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fd26 	bl	8009b5e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2255      	movs	r2, #85	; 0x55
 800a116:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	22aa      	movs	r2, #170	; 0xaa
 800a11e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2252      	movs	r2, #82	; 0x52
 800a126:	701a      	strb	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2252      	movs	r2, #82	; 0x52
 800a12c:	705a      	strb	r2, [r3, #1]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2261      	movs	r2, #97	; 0x61
 800a132:	709a      	strb	r2, [r3, #2]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2241      	movs	r2, #65	; 0x41
 800a138:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2272      	movs	r2, #114	; 0x72
 800a13e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2272      	movs	r2, #114	; 0x72
 800a146:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2241      	movs	r2, #65	; 0x41
 800a14e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2261      	movs	r2, #97	; 0x61
 800a156:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a160:	b2da      	uxtb	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a16e:	b29b      	uxth	r3, r3
 800a170:	0a1b      	lsrs	r3, r3, #8
 800a172:	b29b      	uxth	r3, r3
 800a174:	b2da      	uxtb	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a182:	0c1b      	lsrs	r3, r3, #16
 800a184:	b2da      	uxtb	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a192:	0e1b      	lsrs	r3, r3, #24
 800a194:	b2da      	uxtb	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a1a2:	b2da      	uxtb	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	0a1b      	lsrs	r3, r3, #8
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a1c4:	0c1b      	lsrs	r3, r3, #16
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a1d4:	0e1b      	lsrs	r3, r3, #24
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	f7ff fc52 	bl	8009aa4 <disk_write>
			fs->fsi_flag = 0;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a20e:	2200      	movs	r2, #0
 800a210:	2100      	movs	r1, #0
 800a212:	4618      	mov	r0, r3
 800a214:	f7ff fc66 	bl	8009ae4 <disk_ioctl>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800a21e:	2301      	movs	r3, #1
 800a220:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a222:	7bfb      	ldrb	r3, [r7, #15]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	3b02      	subs	r3, #2
 800a23a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a242:	3b02      	subs	r3, #2
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d301      	bcc.n	800a24e <clust2sect+0x22>
 800a24a:	2300      	movs	r3, #0
 800a24c:	e00a      	b.n	800a264 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a254:	461a      	mov	r2, r3
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	fb03 f202 	mul.w	r2, r3, r2
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800a262:	4413      	add	r3, r2
}
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d905      	bls.n	800a28c <get_fat+0x1c>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d302      	bcc.n	800a292 <get_fat+0x22>
		val = 1;	/* Internal error */
 800a28c:	2301      	movs	r3, #1
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	e0a3      	b.n	800a3da <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a296:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d068      	beq.n	800a374 <get_fat+0x104>
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	f300 808f 	bgt.w	800a3c6 <get_fat+0x156>
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d002      	beq.n	800a2b2 <get_fat+0x42>
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d040      	beq.n	800a332 <get_fat+0xc2>
 800a2b0:	e089      	b.n	800a3c6 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	60fb      	str	r3, [r7, #12]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	085b      	lsrs	r3, r3, #1
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	4413      	add	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	0a5b      	lsrs	r3, r3, #9
 800a2ca:	4413      	add	r3, r2
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fed1 	bl	800a076 <move_window>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d178      	bne.n	800a3cc <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	60fa      	str	r2, [r7, #12]
 800a2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	5cd3      	ldrb	r3, [r2, r3]
 800a2e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	0a5b      	lsrs	r3, r3, #9
 800a2f4:	4413      	add	r3, r2
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff febc 	bl	800a076 <move_window>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d165      	bne.n	800a3d0 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	5cd3      	ldrb	r3, [r2, r3]
 800a30e:	021b      	lsls	r3, r3, #8
 800a310:	461a      	mov	r2, r3
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	4313      	orrs	r3, r2
 800a316:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d002      	beq.n	800a328 <get_fat+0xb8>
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	091b      	lsrs	r3, r3, #4
 800a326:	e002      	b.n	800a32e <get_fat+0xbe>
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a32e:	617b      	str	r3, [r7, #20]
			break;
 800a330:	e053      	b.n	800a3da <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	0a1b      	lsrs	r3, r3, #8
 800a33c:	4413      	add	r3, r2
 800a33e:	4619      	mov	r1, r3
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7ff fe98 	bl	800a076 <move_window>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d143      	bne.n	800a3d4 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	4413      	add	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	3301      	adds	r3, #1
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	b21a      	sxth	r2, r3
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	b21b      	sxth	r3, r3
 800a36a:	4313      	orrs	r3, r2
 800a36c:	b21b      	sxth	r3, r3
 800a36e:	b29b      	uxth	r3, r3
 800a370:	617b      	str	r3, [r7, #20]
			break;
 800a372:	e032      	b.n	800a3da <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	09db      	lsrs	r3, r3, #7
 800a37e:	4413      	add	r3, r2
 800a380:	4619      	mov	r1, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7ff fe77 	bl	800a076 <move_window>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d124      	bne.n	800a3d8 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	4413      	add	r3, r2
 800a39a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	3303      	adds	r3, #3
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	061a      	lsls	r2, r3, #24
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	3302      	adds	r3, #2
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	041b      	lsls	r3, r3, #16
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	3201      	adds	r2, #1
 800a3b2:	7812      	ldrb	r2, [r2, #0]
 800a3b4:	0212      	lsls	r2, r2, #8
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	7812      	ldrb	r2, [r2, #0]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a3c2:	617b      	str	r3, [r7, #20]
			break;
 800a3c4:	e009      	b.n	800a3da <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	e006      	b.n	800a3da <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3cc:	bf00      	nop
 800a3ce:	e004      	b.n	800a3da <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3d0:	bf00      	nop
 800a3d2:	e002      	b.n	800a3da <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3d4:	bf00      	nop
 800a3d6:	e000      	b.n	800a3da <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a3d8:	bf00      	nop
		}
	}

	return val;
 800a3da:	697b      	ldr	r3, [r7, #20]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d905      	bls.n	800a402 <put_fat+0x1e>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d302      	bcc.n	800a408 <put_fat+0x24>
		res = FR_INT_ERR;
 800a402:	2302      	movs	r3, #2
 800a404:	77fb      	strb	r3, [r7, #31]
 800a406:	e0f6      	b.n	800a5f6 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a40e:	2b03      	cmp	r3, #3
 800a410:	f000 809e 	beq.w	800a550 <put_fat+0x16c>
 800a414:	2b03      	cmp	r3, #3
 800a416:	f300 80e4 	bgt.w	800a5e2 <put_fat+0x1fe>
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d002      	beq.n	800a424 <put_fat+0x40>
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d06f      	beq.n	800a502 <put_fat+0x11e>
 800a422:	e0de      	b.n	800a5e2 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	085b      	lsrs	r3, r3, #1
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	4413      	add	r3, r2
 800a430:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	0a5b      	lsrs	r3, r3, #9
 800a43c:	4413      	add	r3, r2
 800a43e:	4619      	mov	r1, r3
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f7ff fe18 	bl	800a076 <move_window>
 800a446:	4603      	mov	r3, r0
 800a448:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a44a:	7ffb      	ldrb	r3, [r7, #31]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f040 80cb 	bne.w	800a5e8 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	1c5a      	adds	r2, r3, #1
 800a456:	617a      	str	r2, [r7, #20]
 800a458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00d      	beq.n	800a488 <put_fat+0xa4>
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	b25b      	sxtb	r3, r3
 800a472:	f003 030f 	and.w	r3, r3, #15
 800a476:	b25a      	sxtb	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	011b      	lsls	r3, r3, #4
 800a47e:	b25b      	sxtb	r3, r3
 800a480:	4313      	orrs	r3, r2
 800a482:	b25b      	sxtb	r3, r3
 800a484:	b2db      	uxtb	r3, r3
 800a486:	e001      	b.n	800a48c <put_fat+0xa8>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	69ba      	ldr	r2, [r7, #24]
 800a48e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	0a5b      	lsrs	r3, r3, #9
 800a4a2:	4413      	add	r3, r2
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7ff fde5 	bl	800a076 <move_window>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4b0:	7ffb      	ldrb	r3, [r7, #31]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f040 809a 	bne.w	800a5ec <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <put_fat+0xf2>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	091b      	lsrs	r3, r3, #4
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	e00e      	b.n	800a4f4 <put_fat+0x110>
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	b25b      	sxtb	r3, r3
 800a4dc:	f023 030f 	bic.w	r3, r3, #15
 800a4e0:	b25a      	sxtb	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	0a1b      	lsrs	r3, r3, #8
 800a4e6:	b25b      	sxtb	r3, r3
 800a4e8:	f003 030f 	and.w	r3, r3, #15
 800a4ec:	b25b      	sxtb	r3, r3
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	b25b      	sxtb	r3, r3
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	69ba      	ldr	r2, [r7, #24]
 800a4f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a500:	e079      	b.n	800a5f6 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	0a1b      	lsrs	r3, r3, #8
 800a50c:	4413      	add	r3, r2
 800a50e:	4619      	mov	r1, r3
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7ff fdb0 	bl	800a076 <move_window>
 800a516:	4603      	mov	r3, r0
 800a518:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a51a:	7ffb      	ldrb	r3, [r7, #31]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d167      	bne.n	800a5f0 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4413      	add	r3, r2
 800a52c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	b2da      	uxtb	r2, r3
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	701a      	strb	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	0a1b      	lsrs	r3, r3, #8
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	3301      	adds	r3, #1
 800a542:	b2d2      	uxtb	r2, r2
 800a544:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a54e:	e052      	b.n	800a5f6 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	09db      	lsrs	r3, r3, #7
 800a55a:	4413      	add	r3, r2
 800a55c:	4619      	mov	r1, r3
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f7ff fd89 	bl	800a076 <move_window>
 800a564:	4603      	mov	r3, r0
 800a566:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a568:	7ffb      	ldrb	r3, [r7, #31]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d142      	bne.n	800a5f4 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	4413      	add	r3, r2
 800a57a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	3303      	adds	r3, #3
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	061a      	lsls	r2, r3, #24
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	3302      	adds	r3, #2
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	041b      	lsls	r3, r3, #16
 800a58c:	4313      	orrs	r3, r2
 800a58e:	69ba      	ldr	r2, [r7, #24]
 800a590:	3201      	adds	r2, #1
 800a592:	7812      	ldrb	r2, [r2, #0]
 800a594:	0212      	lsls	r2, r2, #8
 800a596:	4313      	orrs	r3, r2
 800a598:	69ba      	ldr	r2, [r7, #24]
 800a59a:	7812      	ldrb	r2, [r2, #0]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	701a      	strb	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	0a1b      	lsrs	r3, r3, #8
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	b2d2      	uxtb	r2, r2
 800a5be:	701a      	strb	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	0c1a      	lsrs	r2, r3, #16
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	3302      	adds	r3, #2
 800a5c8:	b2d2      	uxtb	r2, r2
 800a5ca:	701a      	strb	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	0e1a      	lsrs	r2, r3, #24
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	3303      	adds	r3, #3
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a5e0:	e009      	b.n	800a5f6 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	77fb      	strb	r3, [r7, #31]
 800a5e6:	e006      	b.n	800a5f6 <put_fat+0x212>
			if (res != FR_OK) break;
 800a5e8:	bf00      	nop
 800a5ea:	e004      	b.n	800a5f6 <put_fat+0x212>
			if (res != FR_OK) break;
 800a5ec:	bf00      	nop
 800a5ee:	e002      	b.n	800a5f6 <put_fat+0x212>
			if (res != FR_OK) break;
 800a5f0:	bf00      	nop
 800a5f2:	e000      	b.n	800a5f6 <put_fat+0x212>
			if (res != FR_OK) break;
 800a5f4:	bf00      	nop
		}
	}

	return res;
 800a5f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3720      	adds	r7, #32
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d905      	bls.n	800a61c <remove_chain+0x1c>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d302      	bcc.n	800a622 <remove_chain+0x22>
		res = FR_INT_ERR;
 800a61c:	2302      	movs	r3, #2
 800a61e:	73fb      	strb	r3, [r7, #15]
 800a620:	e043      	b.n	800a6aa <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a626:	e036      	b.n	800a696 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a628:	6839      	ldr	r1, [r7, #0]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff fe20 	bl	800a270 <get_fat>
 800a630:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d035      	beq.n	800a6a4 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d102      	bne.n	800a644 <remove_chain+0x44>
 800a63e:	2302      	movs	r3, #2
 800a640:	73fb      	strb	r3, [r7, #15]
 800a642:	e032      	b.n	800a6aa <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a64a:	d102      	bne.n	800a652 <remove_chain+0x52>
 800a64c:	2301      	movs	r3, #1
 800a64e:	73fb      	strb	r3, [r7, #15]
 800a650:	e02b      	b.n	800a6aa <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a652:	2200      	movs	r2, #0
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7ff fec4 	bl	800a3e4 <put_fat>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d120      	bne.n	800a6a8 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a66c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a670:	d00f      	beq.n	800a692 <remove_chain+0x92>
				fs->free_clust++;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a686:	f043 0301 	orr.w	r3, r3, #1
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d3c2      	bcc.n	800a628 <remove_chain+0x28>
 800a6a2:	e002      	b.n	800a6aa <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a6a4:	bf00      	nop
 800a6a6:	e000      	b.n	800a6aa <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a6a8:	bf00      	nop
		}
	}

	return res;
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10f      	bne.n	800a6e4 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a6ca:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d005      	beq.n	800a6de <create_chain+0x2a>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d31c      	bcc.n	800a718 <create_chain+0x64>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	613b      	str	r3, [r7, #16]
 800a6e2:	e019      	b.n	800a718 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff fdc2 	bl	800a270 <get_fat>
 800a6ec:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d801      	bhi.n	800a6f8 <create_chain+0x44>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e076      	b.n	800a7e6 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6fe:	d101      	bne.n	800a704 <create_chain+0x50>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	e070      	b.n	800a7e6 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d201      	bcs.n	800a714 <create_chain+0x60>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	e068      	b.n	800a7e6 <create_chain+0x132>
		scl = clst;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	3301      	adds	r3, #1
 800a720:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d307      	bcc.n	800a73e <create_chain+0x8a>
			ncl = 2;
 800a72e:	2302      	movs	r3, #2
 800a730:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	429a      	cmp	r2, r3
 800a738:	d901      	bls.n	800a73e <create_chain+0x8a>
 800a73a:	2300      	movs	r3, #0
 800a73c:	e053      	b.n	800a7e6 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a73e:	6979      	ldr	r1, [r7, #20]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff fd95 	bl	800a270 <get_fat>
 800a746:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00e      	beq.n	800a76c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a754:	d002      	beq.n	800a75c <create_chain+0xa8>
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d101      	bne.n	800a760 <create_chain+0xac>
			return cs;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	e042      	b.n	800a7e6 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	429a      	cmp	r2, r3
 800a766:	d1d9      	bne.n	800a71c <create_chain+0x68>
 800a768:	2300      	movs	r3, #0
 800a76a:	e03c      	b.n	800a7e6 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a76c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a76e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a772:	6979      	ldr	r1, [r7, #20]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7ff fe35 	bl	800a3e4 <put_fat>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d109      	bne.n	800a798 <create_chain+0xe4>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d006      	beq.n	800a798 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7ff fe28 	bl	800a3e4 <put_fat>
 800a794:	4603      	mov	r3, r0
 800a796:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d11a      	bne.n	800a7d4 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7b0:	d018      	beq.n	800a7e4 <create_chain+0x130>
			fs->free_clust--;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7b8:	1e5a      	subs	r2, r3, #1
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a7c6:	f043 0301 	orr.w	r3, r3, #1
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800a7d2:	e007      	b.n	800a7e4 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d102      	bne.n	800a7e0 <create_chain+0x12c>
 800a7da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7de:	e000      	b.n	800a7e2 <create_chain+0x12e>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a7e4:	697b      	ldr	r3, [r7, #20]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b087      	sub	sp, #28
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a7fe:	3304      	adds	r3, #4
 800a800:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	0a5b      	lsrs	r3, r3, #9
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a80c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a810:	fbb3 f3f2 	udiv	r3, r3, r2
 800a814:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	1d1a      	adds	r2, r3, #4
 800a81a:	613a      	str	r2, [r7, #16]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d101      	bne.n	800a82a <clmt_clust+0x3c>
 800a826:	2300      	movs	r3, #0
 800a828:	e010      	b.n	800a84c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d307      	bcc.n	800a842 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	617b      	str	r3, [r7, #20]
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	3304      	adds	r3, #4
 800a83e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a840:	e7e9      	b.n	800a816 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800a842:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	4413      	add	r3, r2
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	371c      	adds	r7, #28
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	b29a      	uxth	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a872:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d007      	beq.n	800a88a <dir_sdi+0x32>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a880:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	429a      	cmp	r2, r3
 800a888:	d301      	bcc.n	800a88e <dir_sdi+0x36>
		return FR_INT_ERR;
 800a88a:	2302      	movs	r3, #2
 800a88c:	e074      	b.n	800a978 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10c      	bne.n	800a8ae <dir_sdi+0x56>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a89a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d105      	bne.n	800a8ae <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8a8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800a8ac:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d111      	bne.n	800a8d8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8ba:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a8be:	461a      	mov	r2, r3
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d301      	bcc.n	800a8ca <dir_sdi+0x72>
			return FR_INT_ERR;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e056      	b.n	800a978 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8d0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800a8d4:	613b      	str	r3, [r7, #16]
 800a8d6:	e032      	b.n	800a93e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8de:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a8e2:	011b      	lsls	r3, r3, #4
 800a8e4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a8e6:	e01e      	b.n	800a926 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8ee:	6979      	ldr	r1, [r7, #20]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7ff fcbd 	bl	800a270 <get_fat>
 800a8f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8fe:	d101      	bne.n	800a904 <dir_sdi+0xac>
 800a900:	2301      	movs	r3, #1
 800a902:	e039      	b.n	800a978 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d907      	bls.n	800a91a <dir_sdi+0xc2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a910:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	429a      	cmp	r2, r3
 800a918:	d301      	bcc.n	800a91e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800a91a:	2302      	movs	r3, #2
 800a91c:	e02c      	b.n	800a978 <dir_sdi+0x120>
			idx -= ic;
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d2dc      	bcs.n	800a8e8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a934:	6979      	ldr	r1, [r7, #20]
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fc78 	bl	800a22c <clust2sect>
 800a93c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <dir_sdi+0xf8>
 800a94c:	2302      	movs	r3, #2
 800a94e:	e013      	b.n	800a978 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	091a      	lsrs	r2, r3, #4
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	441a      	add	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a964:	461a      	mov	r2, r3
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	f003 030f 	and.w	r3, r3, #15
 800a96c:	015b      	lsls	r3, r3, #5
 800a96e:	441a      	add	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3718      	adds	r7, #24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a980:	b590      	push	{r4, r7, lr}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800a990:	3301      	adds	r3, #1
 800a992:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	b29b      	uxth	r3, r3
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <dir_next+0x26>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <dir_next+0x2a>
		return FR_NO_FILE;
 800a9a6:	2304      	movs	r3, #4
 800a9a8:	e0dd      	b.n	800ab66 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f003 030f 	and.w	r3, r3, #15
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f040 80c6 	bne.w	800ab42 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10b      	bne.n	800a9e6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a9d4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a9d8:	461a      	mov	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	f0c0 80b0 	bcc.w	800ab42 <dir_next+0x1c2>
				return FR_NO_FILE;
 800a9e2:	2304      	movs	r3, #4
 800a9e4:	e0bf      	b.n	800ab66 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	091b      	lsrs	r3, r3, #4
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a9f0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a9f4:	3a01      	subs	r2, #1
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f040 80a2 	bne.w	800ab42 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	f7ff fc2f 	bl	800a270 <get_fat>
 800aa12:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d801      	bhi.n	800aa1e <dir_next+0x9e>
 800aa1a:	2302      	movs	r3, #2
 800aa1c:	e0a3      	b.n	800ab66 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa24:	d101      	bne.n	800aa2a <dir_next+0xaa>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e09d      	b.n	800ab66 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d374      	bcc.n	800ab24 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <dir_next+0xc4>
 800aa40:	2304      	movs	r3, #4
 800aa42:	e090      	b.n	800ab66 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aa50:	4619      	mov	r1, r3
 800aa52:	4610      	mov	r0, r2
 800aa54:	f7ff fe2e 	bl	800a6b4 <create_chain>
 800aa58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <dir_next+0xe4>
 800aa60:	2307      	movs	r3, #7
 800aa62:	e080      	b.n	800ab66 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d101      	bne.n	800aa6e <dir_next+0xee>
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	e07b      	b.n	800ab66 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa74:	d101      	bne.n	800aa7a <dir_next+0xfa>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e075      	b.n	800ab66 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7ff faaf 	bl	8009fe4 <sync_window>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <dir_next+0x110>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e06a      	b.n	800ab66 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7ff f85e 	bl	8009b5e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800aaae:	6979      	ldr	r1, [r7, #20]
 800aab0:	4610      	mov	r0, r2
 800aab2:	f7ff fbbb 	bl	800a22c <clust2sect>
 800aab6:	4603      	mov	r3, r0
 800aab8:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800aabc:	2300      	movs	r3, #0
 800aabe:	613b      	str	r3, [r7, #16]
 800aac0:	e01b      	b.n	800aafa <dir_next+0x17a>
						dp->fs->wflag = 1;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7ff fa85 	bl	8009fe4 <sync_window>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <dir_next+0x164>
 800aae0:	2301      	movs	r3, #1
 800aae2:	e040      	b.n	800ab66 <dir_next+0x1e6>
						dp->fs->winsect++;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aaea:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800aaee:	3201      	adds	r2, #1
 800aaf0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	613b      	str	r3, [r7, #16]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab00:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ab04:	461a      	mov	r2, r3
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d3da      	bcc.n	800aac2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab12:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	1a8a      	subs	r2, r1, r2
 800ab20:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab32:	6979      	ldr	r1, [r7, #20]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff fb79 	bl	800a22c <clust2sect>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab52:	461a      	mov	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f003 030f 	and.w	r3, r3, #15
 800ab5a:	015b      	lsls	r3, r3, #5
 800ab5c:	441a      	add	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	371c      	adds	r7, #28
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd90      	pop	{r4, r7, pc}

0800ab6e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800ab78:	2100      	movs	r1, #0
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff fe6c 	bl	800a858 <dir_sdi>
 800ab80:	4603      	mov	r3, r0
 800ab82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d131      	bne.n	800abee <dir_alloc+0x80>
		n = 0;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	f7ff fa6a 	bl	800a076 <move_window>
 800aba2:	4603      	mov	r3, r0
 800aba4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d11f      	bne.n	800abec <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2be5      	cmp	r3, #229	; 0xe5
 800abb6:	d005      	beq.n	800abc4 <dir_alloc+0x56>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d107      	bne.n	800abd4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	3301      	adds	r3, #1
 800abc8:	60bb      	str	r3, [r7, #8]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d102      	bne.n	800abd8 <dir_alloc+0x6a>
 800abd2:	e00c      	b.n	800abee <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800abd4:	2300      	movs	r3, #0
 800abd6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800abd8:	2101      	movs	r1, #1
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff fed0 	bl	800a980 <dir_next>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0d1      	beq.n	800ab8e <dir_alloc+0x20>
 800abea:	e000      	b.n	800abee <dir_alloc+0x80>
			if (res != FR_OK) break;
 800abec:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d101      	bne.n	800abf8 <dir_alloc+0x8a>
 800abf4:	2307      	movs	r3, #7
 800abf6:	73fb      	strb	r3, [r7, #15]
	return res;
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800ac02:	b480      	push	{r7}
 800ac04:	b085      	sub	sp, #20
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	331b      	adds	r3, #27
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	b21a      	sxth	r2, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	331a      	adds	r3, #26
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	b21b      	sxth	r3, r3
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	b21b      	sxth	r3, r3
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac2c:	2b03      	cmp	r3, #3
 800ac2e:	d10f      	bne.n	800ac50 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	3315      	adds	r3, #21
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	021b      	lsls	r3, r3, #8
 800ac38:	b21a      	sxth	r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	3314      	adds	r3, #20
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	b21b      	sxth	r3, r3
 800ac42:	4313      	orrs	r3, r2
 800ac44:	b21b      	sxth	r3, r3
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	041b      	lsls	r3, r3, #16
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]

	return cl;
 800ac50:	68fb      	ldr	r3, [r7, #12]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	331a      	adds	r3, #26
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	b2d2      	uxtb	r2, r2
 800ac70:	701a      	strb	r2, [r3, #0]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	0a1b      	lsrs	r3, r3, #8
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	331b      	adds	r3, #27
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	0c1a      	lsrs	r2, r3, #16
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3314      	adds	r3, #20
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	701a      	strb	r2, [r3, #0]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	0c1b      	lsrs	r3, r3, #16
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	0a1b      	lsrs	r3, r3, #8
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3315      	adds	r3, #21
 800ac9c:	b2d2      	uxtb	r2, r2
 800ac9e:	701a      	strb	r2, [r3, #0]
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800acb4:	2100      	movs	r1, #0
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fdce 	bl	800a858 <dir_sdi>
 800acbc:	4603      	mov	r3, r0
 800acbe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <dir_find+0x1e>
 800acc6:	7dfb      	ldrb	r3, [r7, #23]
 800acc8:	e03b      	b.n	800ad42 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800acd6:	4619      	mov	r1, r3
 800acd8:	4610      	mov	r0, r2
 800acda:	f7ff f9cc 	bl	800a076 <move_window>
 800acde:	4603      	mov	r3, r0
 800ace0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d128      	bne.n	800ad3a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800acee:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d102      	bne.n	800ad02 <dir_find+0x56>
 800acfc:	2304      	movs	r3, #4
 800acfe:	75fb      	strb	r3, [r7, #23]
 800ad00:	e01e      	b.n	800ad40 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	330b      	adds	r3, #11
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	f003 0308 	and.w	r3, r3, #8
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10a      	bne.n	800ad26 <dir_find+0x7a>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ad16:	220b      	movs	r2, #11
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6938      	ldr	r0, [r7, #16]
 800ad1c:	f7fe ff3a 	bl	8009b94 <mem_cmp>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00b      	beq.n	800ad3e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800ad26:	2100      	movs	r1, #0
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff fe29 	bl	800a980 <dir_next>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d0c8      	beq.n	800acca <dir_find+0x1e>
 800ad38:	e002      	b.n	800ad40 <dir_find+0x94>
		if (res != FR_OK) break;
 800ad3a:	bf00      	nop
 800ad3c:	e000      	b.n	800ad40 <dir_find+0x94>
			break;
 800ad3e:	bf00      	nop

	return res;
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ad52:	2101      	movs	r1, #1
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff ff0a 	bl	800ab6e <dir_alloc>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d126      	bne.n	800adb2 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f7ff f97f 	bl	800a076 <move_window>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d117      	bne.n	800adb2 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad88:	2220      	movs	r2, #32
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fe fee6 	bl	8009b5e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ad9e:	220b      	movs	r2, #11
 800ada0:	4619      	mov	r1, r3
 800ada2:	f7fe febd 	bl	8009b20 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800adac:	2201      	movs	r2, #1
 800adae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b088      	sub	sp, #32
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	e002      	b.n	800add4 <create_name+0x18>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	3301      	adds	r3, #1
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	2b2f      	cmp	r3, #47	; 0x2f
 800adda:	d0f8      	beq.n	800adce <create_name+0x12>
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2b5c      	cmp	r3, #92	; 0x5c
 800ade2:	d0f4      	beq.n	800adce <create_name+0x12>
	sfn = dp->fn;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800adea:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800adec:	220b      	movs	r2, #11
 800adee:	2120      	movs	r1, #32
 800adf0:	68b8      	ldr	r0, [r7, #8]
 800adf2:	f7fe feb4 	bl	8009b5e <mem_set>
	si = i = b = 0; ni = 8;
 800adf6:	2300      	movs	r3, #0
 800adf8:	77fb      	strb	r3, [r7, #31]
 800adfa:	2300      	movs	r3, #0
 800adfc:	613b      	str	r3, [r7, #16]
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	617b      	str	r3, [r7, #20]
 800ae02:	2308      	movs	r3, #8
 800ae04:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	617a      	str	r2, [r7, #20]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4413      	add	r3, r2
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800ae14:	7fbb      	ldrb	r3, [r7, #30]
 800ae16:	2b20      	cmp	r3, #32
 800ae18:	d953      	bls.n	800aec2 <create_name+0x106>
 800ae1a:	7fbb      	ldrb	r3, [r7, #30]
 800ae1c:	2b2f      	cmp	r3, #47	; 0x2f
 800ae1e:	d050      	beq.n	800aec2 <create_name+0x106>
 800ae20:	7fbb      	ldrb	r3, [r7, #30]
 800ae22:	2b5c      	cmp	r3, #92	; 0x5c
 800ae24:	d04d      	beq.n	800aec2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800ae26:	7fbb      	ldrb	r3, [r7, #30]
 800ae28:	2b2e      	cmp	r3, #46	; 0x2e
 800ae2a:	d003      	beq.n	800ae34 <create_name+0x78>
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d30f      	bcc.n	800ae54 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	2b08      	cmp	r3, #8
 800ae38:	d102      	bne.n	800ae40 <create_name+0x84>
 800ae3a:	7fbb      	ldrb	r3, [r7, #30]
 800ae3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae3e:	d001      	beq.n	800ae44 <create_name+0x88>
 800ae40:	2306      	movs	r3, #6
 800ae42:	e073      	b.n	800af2c <create_name+0x170>
			i = 8; ni = 11;
 800ae44:	2308      	movs	r3, #8
 800ae46:	613b      	str	r3, [r7, #16]
 800ae48:	230b      	movs	r3, #11
 800ae4a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800ae4c:	7ffb      	ldrb	r3, [r7, #31]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	77fb      	strb	r3, [r7, #31]
 800ae52:	e035      	b.n	800aec0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ae54:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	da08      	bge.n	800ae6e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800ae5c:	7ffb      	ldrb	r3, [r7, #31]
 800ae5e:	f043 0303 	orr.w	r3, r3, #3
 800ae62:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ae64:	7fbb      	ldrb	r3, [r7, #30]
 800ae66:	3b80      	subs	r3, #128	; 0x80
 800ae68:	4a32      	ldr	r2, [pc, #200]	; (800af34 <create_name+0x178>)
 800ae6a:	5cd3      	ldrb	r3, [r2, r3]
 800ae6c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800ae6e:	7fbb      	ldrb	r3, [r7, #30]
 800ae70:	4619      	mov	r1, r3
 800ae72:	4831      	ldr	r0, [pc, #196]	; (800af38 <create_name+0x17c>)
 800ae74:	f7fe feb5 	bl	8009be2 <chk_chr>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <create_name+0xc6>
				return FR_INVALID_NAME;
 800ae7e:	2306      	movs	r3, #6
 800ae80:	e054      	b.n	800af2c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800ae82:	7fbb      	ldrb	r3, [r7, #30]
 800ae84:	2b40      	cmp	r3, #64	; 0x40
 800ae86:	d907      	bls.n	800ae98 <create_name+0xdc>
 800ae88:	7fbb      	ldrb	r3, [r7, #30]
 800ae8a:	2b5a      	cmp	r3, #90	; 0x5a
 800ae8c:	d804      	bhi.n	800ae98 <create_name+0xdc>
				b |= 2;
 800ae8e:	7ffb      	ldrb	r3, [r7, #31]
 800ae90:	f043 0302 	orr.w	r3, r3, #2
 800ae94:	77fb      	strb	r3, [r7, #31]
 800ae96:	e00c      	b.n	800aeb2 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800ae98:	7fbb      	ldrb	r3, [r7, #30]
 800ae9a:	2b60      	cmp	r3, #96	; 0x60
 800ae9c:	d909      	bls.n	800aeb2 <create_name+0xf6>
 800ae9e:	7fbb      	ldrb	r3, [r7, #30]
 800aea0:	2b7a      	cmp	r3, #122	; 0x7a
 800aea2:	d806      	bhi.n	800aeb2 <create_name+0xf6>
					b |= 1; c -= 0x20;
 800aea4:	7ffb      	ldrb	r3, [r7, #31]
 800aea6:	f043 0301 	orr.w	r3, r3, #1
 800aeaa:	77fb      	strb	r3, [r7, #31]
 800aeac:	7fbb      	ldrb	r3, [r7, #30]
 800aeae:	3b20      	subs	r3, #32
 800aeb0:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	613a      	str	r2, [r7, #16]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	4413      	add	r3, r2
 800aebc:	7fba      	ldrb	r2, [r7, #30]
 800aebe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800aec0:	e7a1      	b.n	800ae06 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	441a      	add	r2, r3
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800aecc:	7fbb      	ldrb	r3, [r7, #30]
 800aece:	2b20      	cmp	r3, #32
 800aed0:	d801      	bhi.n	800aed6 <create_name+0x11a>
 800aed2:	2304      	movs	r3, #4
 800aed4:	e000      	b.n	800aed8 <create_name+0x11c>
 800aed6:	2300      	movs	r3, #0
 800aed8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <create_name+0x128>
 800aee0:	2306      	movs	r3, #6
 800aee2:	e023      	b.n	800af2c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2be5      	cmp	r3, #229	; 0xe5
 800aeea:	d102      	bne.n	800aef2 <create_name+0x136>
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2205      	movs	r2, #5
 800aef0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	2b08      	cmp	r3, #8
 800aef6:	d102      	bne.n	800aefe <create_name+0x142>
 800aef8:	7ffb      	ldrb	r3, [r7, #31]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800aefe:	7ffb      	ldrb	r3, [r7, #31]
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	2b01      	cmp	r3, #1
 800af06:	d103      	bne.n	800af10 <create_name+0x154>
 800af08:	7fbb      	ldrb	r3, [r7, #30]
 800af0a:	f043 0310 	orr.w	r3, r3, #16
 800af0e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800af10:	7ffb      	ldrb	r3, [r7, #31]
 800af12:	f003 030c 	and.w	r3, r3, #12
 800af16:	2b04      	cmp	r3, #4
 800af18:	d103      	bne.n	800af22 <create_name+0x166>
 800af1a:	7fbb      	ldrb	r3, [r7, #30]
 800af1c:	f043 0308 	orr.w	r3, r3, #8
 800af20:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	330b      	adds	r3, #11
 800af26:	7fba      	ldrb	r2, [r7, #30]
 800af28:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800af2a:	2300      	movs	r3, #0
#endif
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3720      	adds	r7, #32
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	08012e4c 	.word	0x08012e4c
 800af38:	08012ecc 	.word	0x08012ecc

0800af3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2b2f      	cmp	r3, #47	; 0x2f
 800af4c:	d003      	beq.n	800af56 <follow_path+0x1a>
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	2b5c      	cmp	r3, #92	; 0x5c
 800af54:	d102      	bne.n	800af5c <follow_path+0x20>
		path++;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	3301      	adds	r3, #1
 800af5a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	2b1f      	cmp	r3, #31
 800af6a:	d80a      	bhi.n	800af82 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800af6c:	2100      	movs	r1, #0
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7ff fc72 	bl	800a858 <dir_sdi>
 800af74:	4603      	mov	r3, r0
 800af76:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800af80:	e045      	b.n	800b00e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af82:	463b      	mov	r3, r7
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff ff18 	bl	800adbc <create_name>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d136      	bne.n	800b004 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff fe88 	bl	800acac <dir_find>
 800af9c:	4603      	mov	r3, r0
 800af9e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800afa6:	7adb      	ldrb	r3, [r3, #11]
 800afa8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00a      	beq.n	800afc6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800afb0:	7bfb      	ldrb	r3, [r7, #15]
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	d128      	bne.n	800b008 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800afb6:	7bbb      	ldrb	r3, [r7, #14]
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d123      	bne.n	800b008 <follow_path+0xcc>
 800afc0:	2305      	movs	r3, #5
 800afc2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800afc4:	e020      	b.n	800b008 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	f003 0304 	and.w	r3, r3, #4
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d11d      	bne.n	800b00c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afd6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	330b      	adds	r3, #11
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	f003 0310 	and.w	r3, r3, #16
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d102      	bne.n	800afec <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800afe6:	2305      	movs	r3, #5
 800afe8:	73fb      	strb	r3, [r7, #15]
 800afea:	e010      	b.n	800b00e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aff2:	68b9      	ldr	r1, [r7, #8]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff fe04 	bl	800ac02 <ld_clust>
 800affa:	4602      	mov	r2, r0
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b002:	e7be      	b.n	800af82 <follow_path+0x46>
			if (res != FR_OK) break;
 800b004:	bf00      	nop
 800b006:	e002      	b.n	800b00e <follow_path+0xd2>
				break;
 800b008:	bf00      	nop
 800b00a:	e000      	b.n	800b00e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b00c:	bf00      	nop
		}
	}

	return res;
 800b00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b018:	b480      	push	{r7}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b024:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d031      	beq.n	800b092 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	e002      	b.n	800b03c <get_ldnumber+0x24>
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	3301      	adds	r3, #1
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	2b20      	cmp	r3, #32
 800b042:	d903      	bls.n	800b04c <get_ldnumber+0x34>
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	2b3a      	cmp	r3, #58	; 0x3a
 800b04a:	d1f4      	bne.n	800b036 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b3a      	cmp	r3, #58	; 0x3a
 800b052:	d11c      	bne.n	800b08e <get_ldnumber+0x76>
			tp = *path;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	60fa      	str	r2, [r7, #12]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	3b30      	subs	r3, #48	; 0x30
 800b064:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	2b09      	cmp	r3, #9
 800b06a:	d80e      	bhi.n	800b08a <get_ldnumber+0x72>
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	429a      	cmp	r2, r3
 800b072:	d10a      	bne.n	800b08a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d107      	bne.n	800b08a <get_ldnumber+0x72>
					vol = (int)i;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	3301      	adds	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	e002      	b.n	800b094 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b08e:	2300      	movs	r3, #0
 800b090:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b092:	693b      	ldr	r3, [r7, #16]
}
 800b094:	4618      	mov	r0, r3
 800b096:	371c      	adds	r7, #28
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0b8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7fe ffd9 	bl	800a076 <move_window>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <check_fs+0x2e>
		return 3;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e04a      	b.n	800b164 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	021b      	lsls	r3, r3, #8
 800b0da:	b21a      	sxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b0e2:	b21b      	sxth	r3, r3
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	b21b      	sxth	r3, r3
 800b0e8:	4a20      	ldr	r2, [pc, #128]	; (800b16c <check_fs+0xcc>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d001      	beq.n	800b0f2 <check_fs+0x52>
		return 2;
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	e038      	b.n	800b164 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3336      	adds	r3, #54	; 0x36
 800b0f6:	3303      	adds	r3, #3
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	061a      	lsls	r2, r3, #24
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3336      	adds	r3, #54	; 0x36
 800b100:	3302      	adds	r3, #2
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	041b      	lsls	r3, r3, #16
 800b106:	4313      	orrs	r3, r2
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	3236      	adds	r2, #54	; 0x36
 800b10c:	3201      	adds	r2, #1
 800b10e:	7812      	ldrb	r2, [r2, #0]
 800b110:	0212      	lsls	r2, r2, #8
 800b112:	4313      	orrs	r3, r2
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b11a:	4313      	orrs	r3, r2
 800b11c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b120:	4a13      	ldr	r2, [pc, #76]	; (800b170 <check_fs+0xd0>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d101      	bne.n	800b12a <check_fs+0x8a>
		return 0;
 800b126:	2300      	movs	r3, #0
 800b128:	e01c      	b.n	800b164 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	3352      	adds	r3, #82	; 0x52
 800b12e:	3303      	adds	r3, #3
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	061a      	lsls	r2, r3, #24
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3352      	adds	r3, #82	; 0x52
 800b138:	3302      	adds	r3, #2
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	041b      	lsls	r3, r3, #16
 800b13e:	4313      	orrs	r3, r2
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	3252      	adds	r2, #82	; 0x52
 800b144:	3201      	adds	r2, #1
 800b146:	7812      	ldrb	r2, [r2, #0]
 800b148:	0212      	lsls	r2, r2, #8
 800b14a:	4313      	orrs	r3, r2
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b152:	4313      	orrs	r3, r2
 800b154:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b158:	4a05      	ldr	r2, [pc, #20]	; (800b170 <check_fs+0xd0>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d101      	bne.n	800b162 <check_fs+0xc2>
		return 0;
 800b15e:	2300      	movs	r3, #0
 800b160:	e000      	b.n	800b164 <check_fs+0xc4>

	return 1;
 800b162:	2301      	movs	r3, #1
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	ffffaa55 	.word	0xffffaa55
 800b170:	00544146 	.word	0x00544146

0800b174 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b096      	sub	sp, #88	; 0x58
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b188:	68b8      	ldr	r0, [r7, #8]
 800b18a:	f7ff ff45 	bl	800b018 <get_ldnumber>
 800b18e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b192:	2b00      	cmp	r3, #0
 800b194:	da01      	bge.n	800b19a <find_volume+0x26>
 800b196:	230b      	movs	r3, #11
 800b198:	e2b2      	b.n	800b700 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b19a:	4aa2      	ldr	r2, [pc, #648]	; (800b424 <find_volume+0x2b0>)
 800b19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <find_volume+0x3a>
 800b1aa:	230c      	movs	r3, #12
 800b1ac:	e2a8      	b.n	800b700 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 800b1ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1b0:	f7fe fd32 	bl	8009c18 <lock_fs>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <find_volume+0x4a>
 800b1ba:	230f      	movs	r3, #15
 800b1bc:	e2a0      	b.n	800b700 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1c2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d01b      	beq.n	800b206 <find_volume+0x92>
		stat = disk_status(fs->drv);
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe fc05 	bl	80099e4 <disk_status>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b1e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10c      	bne.n	800b206 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b1ec:	79fb      	ldrb	r3, [r7, #7]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d007      	beq.n	800b202 <find_volume+0x8e>
 800b1f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1f6:	f003 0304 	and.w	r3, r3, #4
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800b1fe:	230a      	movs	r3, #10
 800b200:	e27e      	b.n	800b700 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 800b202:	2300      	movs	r3, #0
 800b204:	e27c      	b.n	800b700 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b210:	b2da      	uxtb	r2, r3
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe fbfa 	bl	8009a18 <disk_initialize>
 800b224:	4603      	mov	r3, r0
 800b226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b22a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b22e:	f003 0301 	and.w	r3, r3, #1
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b236:	2303      	movs	r3, #3
 800b238:	e262      	b.n	800b700 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d007      	beq.n	800b250 <find_volume+0xdc>
 800b240:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b244:	f003 0304 	and.w	r3, r3, #4
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800b24c:	230a      	movs	r3, #10
 800b24e:	e257      	b.n	800b700 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b254:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b256:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b258:	f7ff ff22 	bl	800b0a0 <check_fs>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b262:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b266:	2b01      	cmp	r3, #1
 800b268:	d155      	bne.n	800b316 <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b26a:	2300      	movs	r3, #0
 800b26c:	643b      	str	r3, [r7, #64]	; 0x40
 800b26e:	e029      	b.n	800b2c4 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b274:	011b      	lsls	r3, r3, #4
 800b276:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b27a:	4413      	add	r3, r2
 800b27c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	3304      	adds	r3, #4
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d012      	beq.n	800b2ae <find_volume+0x13a>
 800b288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28a:	330b      	adds	r3, #11
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	061a      	lsls	r2, r3, #24
 800b290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b292:	330a      	adds	r3, #10
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	041b      	lsls	r3, r3, #16
 800b298:	4313      	orrs	r3, r2
 800b29a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b29c:	3209      	adds	r2, #9
 800b29e:	7812      	ldrb	r2, [r2, #0]
 800b2a0:	0212      	lsls	r2, r2, #8
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a6:	3208      	adds	r2, #8
 800b2a8:	7812      	ldrb	r2, [r2, #0]
 800b2aa:	431a      	orrs	r2, r3
 800b2ac:	e000      	b.n	800b2b0 <find_volume+0x13c>
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b2b8:	440b      	add	r3, r1
 800b2ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	643b      	str	r3, [r7, #64]	; 0x40
 800b2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d9d2      	bls.n	800b270 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <find_volume+0x166>
 800b2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b2e8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b2ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d005      	beq.n	800b2fc <find_volume+0x188>
 800b2f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2f4:	f7ff fed4 	bl	800b0a0 <check_fs>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	e000      	b.n	800b2fe <find_volume+0x18a>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b302:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b306:	2b00      	cmp	r3, #0
 800b308:	d005      	beq.n	800b316 <find_volume+0x1a2>
 800b30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b30c:	3301      	adds	r3, #1
 800b30e:	643b      	str	r3, [r7, #64]	; 0x40
 800b310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b312:	2b03      	cmp	r3, #3
 800b314:	d9e1      	bls.n	800b2da <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b316:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d101      	bne.n	800b322 <find_volume+0x1ae>
 800b31e:	2301      	movs	r3, #1
 800b320:	e1ee      	b.n	800b700 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b322:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <find_volume+0x1ba>
 800b32a:	230d      	movs	r3, #13
 800b32c:	e1e8      	b.n	800b700 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b330:	7b1b      	ldrb	r3, [r3, #12]
 800b332:	021b      	lsls	r3, r3, #8
 800b334:	b21a      	sxth	r2, r3
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	7adb      	ldrb	r3, [r3, #11]
 800b33a:	b21b      	sxth	r3, r3
 800b33c:	4313      	orrs	r3, r2
 800b33e:	b21b      	sxth	r3, r3
 800b340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b344:	d001      	beq.n	800b34a <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 800b346:	230d      	movs	r3, #13
 800b348:	e1da      	b.n	800b700 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34c:	7ddb      	ldrb	r3, [r3, #23]
 800b34e:	021b      	lsls	r3, r3, #8
 800b350:	b21a      	sxth	r2, r3
 800b352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b354:	7d9b      	ldrb	r3, [r3, #22]
 800b356:	b21b      	sxth	r3, r3
 800b358:	4313      	orrs	r3, r2
 800b35a:	b21b      	sxth	r3, r3
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b362:	2b00      	cmp	r3, #0
 800b364:	d112      	bne.n	800b38c <find_volume+0x218>
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b36c:	061a      	lsls	r2, r3, #24
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b374:	041b      	lsls	r3, r3, #16
 800b376:	4313      	orrs	r3, r2
 800b378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b37a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b37e:	0212      	lsls	r2, r2, #8
 800b380:	4313      	orrs	r3, r2
 800b382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b384:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b388:	4313      	orrs	r3, r2
 800b38a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b390:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	7c1a      	ldrb	r2, [r3, #16]
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d006      	beq.n	800b3b6 <find_volume+0x242>
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d001      	beq.n	800b3b6 <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 800b3b2:	230d      	movs	r3, #13
 800b3b4:	e1a4      	b.n	800b700 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c0:	fb02 f303 	mul.w	r3, r2, r3
 800b3c4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c8:	7b5a      	ldrb	r2, [r3, #13]
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3cc:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00a      	beq.n	800b3f0 <find_volume+0x27c>
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 800b3f0:	230d      	movs	r3, #13
 800b3f2:	e185      	b.n	800b700 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	7c9b      	ldrb	r3, [r3, #18]
 800b3f8:	021b      	lsls	r3, r3, #8
 800b3fa:	b21a      	sxth	r2, r3
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	7c5b      	ldrb	r3, [r3, #17]
 800b400:	b21b      	sxth	r3, r3
 800b402:	4313      	orrs	r3, r2
 800b404:	b21b      	sxth	r3, r3
 800b406:	b29a      	uxth	r2, r3
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b410:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	b29b      	uxth	r3, r3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d004      	beq.n	800b428 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 800b41e:	230d      	movs	r3, #13
 800b420:	e16e      	b.n	800b700 <find_volume+0x58c>
 800b422:	bf00      	nop
 800b424:	20000208 	.word	0x20000208

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42a:	7d1b      	ldrb	r3, [r3, #20]
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	b21a      	sxth	r2, r3
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	7cdb      	ldrb	r3, [r3, #19]
 800b434:	b21b      	sxth	r3, r3
 800b436:	4313      	orrs	r3, r2
 800b438:	b21b      	sxth	r3, r3
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b43e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b440:	2b00      	cmp	r3, #0
 800b442:	d112      	bne.n	800b46a <find_volume+0x2f6>
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b44a:	061a      	lsls	r2, r3, #24
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b452:	041b      	lsls	r3, r3, #16
 800b454:	4313      	orrs	r3, r2
 800b456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b458:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b45c:	0212      	lsls	r2, r2, #8
 800b45e:	4313      	orrs	r3, r2
 800b460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b462:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b466:	4313      	orrs	r3, r2
 800b468:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	7bdb      	ldrb	r3, [r3, #15]
 800b46e:	021b      	lsls	r3, r3, #8
 800b470:	b21a      	sxth	r2, r3
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	7b9b      	ldrb	r3, [r3, #14]
 800b476:	b21b      	sxth	r3, r3
 800b478:	4313      	orrs	r3, r2
 800b47a:	b21b      	sxth	r3, r3
 800b47c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b47e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <find_volume+0x314>
 800b484:	230d      	movs	r3, #13
 800b486:	e13b      	b.n	800b700 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b488:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b48c:	4413      	add	r3, r2
 800b48e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b490:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800b494:	0912      	lsrs	r2, r2, #4
 800b496:	b292      	uxth	r2, r2
 800b498:	4413      	add	r3, r2
 800b49a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b49c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d201      	bcs.n	800b4a8 <find_volume+0x334>
 800b4a4:	230d      	movs	r3, #13
 800b4a6:	e12b      	b.n	800b700 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b4a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4b0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b4b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4b8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <find_volume+0x350>
 800b4c0:	230d      	movs	r3, #13
 800b4c2:	e11d      	b.n	800b700 <find_volume+0x58c>
	fmt = FS_FAT12;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d902      	bls.n	800b4da <find_volume+0x366>
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d902      	bls.n	800b4ea <find_volume+0x376>
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	1c9a      	adds	r2, r3, #2
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4f8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b4fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b500:	441a      	add	r2, r3
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800b508:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50c:	441a      	add	r2, r3
 800b50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b510:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 800b514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d121      	bne.n	800b560 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <find_volume+0x3b6>
 800b526:	230d      	movs	r3, #13
 800b528:	e0ea      	b.n	800b700 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b530:	061a      	lsls	r2, r3, #24
 800b532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b534:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b538:	041b      	lsls	r3, r3, #16
 800b53a:	4313      	orrs	r3, r2
 800b53c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b53e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b542:	0212      	lsls	r2, r2, #8
 800b544:	4313      	orrs	r3, r2
 800b546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b548:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b54c:	431a      	orrs	r2, r3
 800b54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b550:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	647b      	str	r3, [r7, #68]	; 0x44
 800b55e:	e025      	b.n	800b5ac <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <find_volume+0x3fa>
 800b56a:	230d      	movs	r3, #13
 800b56c:	e0c8      	b.n	800b700 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800b574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b576:	441a      	add	r2, r3
 800b578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b57e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b582:	2b02      	cmp	r3, #2
 800b584:	d104      	bne.n	800b590 <find_volume+0x41c>
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b58c:	005b      	lsls	r3, r3, #1
 800b58e:	e00c      	b.n	800b5aa <find_volume+0x436>
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b596:	4613      	mov	r3, r2
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	4413      	add	r3, r2
 800b59c:	085a      	lsrs	r2, r3, #1
 800b59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b5aa:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b5b8:	0a5b      	lsrs	r3, r3, #9
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d201      	bcs.n	800b5c2 <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 800b5be:	230d      	movs	r3, #13
 800b5c0:	e09e      	b.n	800b700 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5da:	2280      	movs	r2, #128	; 0x80
 800b5dc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b5e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	d177      	bne.n	800b6d8 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b5ee:	021b      	lsls	r3, r3, #8
 800b5f0:	b21a      	sxth	r2, r3
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5f8:	b21b      	sxth	r3, r3
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	b21b      	sxth	r3, r3
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d16a      	bne.n	800b6d8 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b604:	3301      	adds	r3, #1
 800b606:	4619      	mov	r1, r3
 800b608:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b60a:	f7fe fd34 	bl	800a076 <move_window>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d161      	bne.n	800b6d8 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 800b614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b616:	2200      	movs	r2, #0
 800b618:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b622:	021b      	lsls	r3, r3, #8
 800b624:	b21a      	sxth	r2, r3
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b62c:	b21b      	sxth	r3, r3
 800b62e:	4313      	orrs	r3, r2
 800b630:	b21b      	sxth	r3, r3
 800b632:	4a35      	ldr	r2, [pc, #212]	; (800b708 <find_volume+0x594>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d14f      	bne.n	800b6d8 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	78db      	ldrb	r3, [r3, #3]
 800b63c:	061a      	lsls	r2, r3, #24
 800b63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b640:	789b      	ldrb	r3, [r3, #2]
 800b642:	041b      	lsls	r3, r3, #16
 800b644:	4313      	orrs	r3, r2
 800b646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b648:	7852      	ldrb	r2, [r2, #1]
 800b64a:	0212      	lsls	r2, r2, #8
 800b64c:	4313      	orrs	r3, r2
 800b64e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b650:	7812      	ldrb	r2, [r2, #0]
 800b652:	4313      	orrs	r3, r2
 800b654:	4a2d      	ldr	r2, [pc, #180]	; (800b70c <find_volume+0x598>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d13e      	bne.n	800b6d8 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b660:	061a      	lsls	r2, r3, #24
 800b662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b664:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b668:	041b      	lsls	r3, r3, #16
 800b66a:	4313      	orrs	r3, r2
 800b66c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b66e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b672:	0212      	lsls	r2, r2, #8
 800b674:	4313      	orrs	r3, r2
 800b676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b678:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b67c:	4313      	orrs	r3, r2
 800b67e:	4a24      	ldr	r2, [pc, #144]	; (800b710 <find_volume+0x59c>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d129      	bne.n	800b6d8 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b68a:	061a      	lsls	r2, r3, #24
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b692:	041b      	lsls	r3, r3, #16
 800b694:	4313      	orrs	r3, r2
 800b696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b698:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b69c:	0212      	lsls	r2, r2, #8
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b6a6:	431a      	orrs	r2, r3
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b6b4:	061a      	lsls	r2, r3, #24
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b6bc:	041b      	lsls	r3, r3, #16
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6c2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b6c6:	0212      	lsls	r2, r2, #8
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6cc:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b6d0:	431a      	orrs	r2, r3
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6da:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b6de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800b6e2:	4b0c      	ldr	r3, [pc, #48]	; (800b714 <find_volume+0x5a0>)
 800b6e4:	881b      	ldrh	r3, [r3, #0]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	4b0a      	ldr	r3, [pc, #40]	; (800b714 <find_volume+0x5a0>)
 800b6ec:	801a      	strh	r2, [r3, #0]
 800b6ee:	4b09      	ldr	r3, [pc, #36]	; (800b714 <find_volume+0x5a0>)
 800b6f0:	881a      	ldrh	r2, [r3, #0]
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b6f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6fa:	f7fe fc49 	bl	8009f90 <clear_lock>
#endif

	return FR_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3758      	adds	r7, #88	; 0x58
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	ffffaa55 	.word	0xffffaa55
 800b70c:	41615252 	.word	0x41615252
 800b710:	61417272 	.word	0x61417272
 800b714:	2000020c 	.word	0x2000020c

0800b718 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d022      	beq.n	800b770 <validate+0x58>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b730:	2b00      	cmp	r3, #0
 800b732:	d01d      	beq.n	800b770 <validate+0x58>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b73a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d016      	beq.n	800b770 <validate+0x58>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b748:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800b752:	429a      	cmp	r2, r3
 800b754:	d10c      	bne.n	800b770 <validate+0x58>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b75c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe f93f 	bl	80099e4 <disk_status>
 800b766:	4603      	mov	r3, r0
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800b770:	2309      	movs	r3, #9
 800b772:	e00b      	b.n	800b78c <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fe fa4c 	bl	8009c18 <lock_fs>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <validate+0x72>
 800b786:	230f      	movs	r3, #15
 800b788:	e000      	b.n	800b78c <validate+0x74>

	return FR_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b7a6:	f107 0310 	add.w	r3, r7, #16
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff fc34 	bl	800b018 <get_ldnumber>
 800b7b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	da01      	bge.n	800b7bc <f_mount+0x28>
 800b7b8:	230b      	movs	r3, #11
 800b7ba:	e04c      	b.n	800b856 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b7bc:	4a28      	ldr	r2, [pc, #160]	; (800b860 <f_mount+0xcc>)
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d011      	beq.n	800b7f0 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800b7cc:	69b8      	ldr	r0, [r7, #24]
 800b7ce:	f7fe fbdf 	bl	8009f90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 fdc2 	bl	800c362 <ff_del_syncobj>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <f_mount+0x54>
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	e036      	b.n	800b856 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d011      	beq.n	800b81a <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	b2da      	uxtb	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800b808:	4619      	mov	r1, r3
 800b80a:	4610      	mov	r0, r2
 800b80c:	f000 fd8b 	bl	800c326 <ff_cre_syncobj>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <f_mount+0x86>
 800b816:	2302      	movs	r3, #2
 800b818:	e01d      	b.n	800b856 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	4910      	ldr	r1, [pc, #64]	; (800b860 <f_mount+0xcc>)
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d002      	beq.n	800b830 <f_mount+0x9c>
 800b82a:	79fb      	ldrb	r3, [r7, #7]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d001      	beq.n	800b834 <f_mount+0xa0>
 800b830:	2300      	movs	r3, #0
 800b832:	e010      	b.n	800b856 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b834:	f107 0108 	add.w	r1, r7, #8
 800b838:	f107 030c 	add.w	r3, r7, #12
 800b83c:	2200      	movs	r2, #0
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff fc98 	bl	800b174 <find_volume>
 800b844:	4603      	mov	r3, r0
 800b846:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	7dfa      	ldrb	r2, [r7, #23]
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe f9f1 	bl	8009c36 <unlock_fs>
 800b854:	7dfb      	ldrb	r3, [r7, #23]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3720      	adds	r7, #32
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000208 	.word	0x20000208

0800b864 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	f107 030c 	add.w	r3, r7, #12
 800b870:	6018      	str	r0, [r3, #0]
 800b872:	f107 0308 	add.w	r3, r7, #8
 800b876:	6019      	str	r1, [r3, #0]
 800b878:	1dfb      	adds	r3, r7, #7
 800b87a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b87c:	f107 030c 	add.w	r3, r7, #12
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <f_open+0x26>
 800b886:	2309      	movs	r3, #9
 800b888:	e1fc      	b.n	800bc84 <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 800b88a:	f107 030c 	add.w	r3, r7, #12
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2200      	movs	r2, #0
 800b892:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b896:	1dfb      	adds	r3, r7, #7
 800b898:	1dfa      	adds	r2, r7, #7
 800b89a:	7812      	ldrb	r2, [r2, #0]
 800b89c:	f002 021f 	and.w	r2, r2, #31
 800b8a0:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b8a2:	1dfb      	adds	r3, r7, #7
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	f023 0301 	bic.w	r3, r3, #1
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	f107 0108 	add.w	r1, r7, #8
 800b8b0:	f107 031c 	add.w	r3, r7, #28
 800b8b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff fc5b 	bl	800b174 <find_volume>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b8c4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f040 81cf 	bne.w	800bc6c <f_open+0x408>
		INIT_BUF(dj);
 800b8ce:	f107 031c 	add.w	r3, r7, #28
 800b8d2:	f107 0210 	add.w	r2, r7, #16
 800b8d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800b8da:	f107 0308 	add.w	r3, r7, #8
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	f107 031c 	add.w	r3, r7, #28
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff fb28 	bl	800af3c <follow_path>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800b8f2:	f107 031c 	add.w	r3, r7, #28
 800b8f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8fa:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b8fe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b902:	2b00      	cmp	r3, #0
 800b904:	d11a      	bne.n	800b93c <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800b906:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d103      	bne.n	800b916 <f_open+0xb2>
				res = FR_INVALID_NAME;
 800b90e:	2306      	movs	r3, #6
 800b910:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b914:	e012      	b.n	800b93c <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b916:	1dfb      	adds	r3, r7, #7
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	f023 0301 	bic.w	r3, r3, #1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	bf14      	ite	ne
 800b922:	2301      	movne	r3, #1
 800b924:	2300      	moveq	r3, #0
 800b926:	b2db      	uxtb	r3, r3
 800b928:	461a      	mov	r2, r3
 800b92a:	f107 031c 	add.w	r3, r7, #28
 800b92e:	4611      	mov	r1, r2
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe f99f 	bl	8009c74 <chk_lock>
 800b936:	4603      	mov	r3, r0
 800b938:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b93c:	1dfb      	adds	r3, r7, #7
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	f003 031c 	and.w	r3, r3, #28
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 80cc 	beq.w	800bae2 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 800b94a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d01f      	beq.n	800b992 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b952:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b956:	2b04      	cmp	r3, #4
 800b958:	d10e      	bne.n	800b978 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b95a:	f7fe f9f9 	bl	8009d50 <enq_lock>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d006      	beq.n	800b972 <f_open+0x10e>
 800b964:	f107 031c 	add.w	r3, r7, #28
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff f9ee 	bl	800ad4a <dir_register>
 800b96e:	4603      	mov	r3, r0
 800b970:	e000      	b.n	800b974 <f_open+0x110>
 800b972:	2312      	movs	r3, #18
 800b974:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b978:	1dfb      	adds	r3, r7, #7
 800b97a:	1dfa      	adds	r2, r7, #7
 800b97c:	7812      	ldrb	r2, [r2, #0]
 800b97e:	f042 0208 	orr.w	r2, r2, #8
 800b982:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800b984:	f107 031c 	add.w	r3, r7, #28
 800b988:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b98c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800b990:	e014      	b.n	800b9bc <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b992:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b996:	330b      	adds	r3, #11
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	f003 0311 	and.w	r3, r3, #17
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <f_open+0x146>
					res = FR_DENIED;
 800b9a2:	2307      	movs	r3, #7
 800b9a4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b9a8:	e008      	b.n	800b9bc <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b9aa:	1dfb      	adds	r3, r7, #7
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	f003 0304 	and.w	r3, r3, #4
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d002      	beq.n	800b9bc <f_open+0x158>
						res = FR_EXIST;
 800b9b6:	2308      	movs	r3, #8
 800b9b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b9bc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f040 80af 	bne.w	800bb24 <f_open+0x2c0>
 800b9c6:	1dfb      	adds	r3, r7, #7
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	f003 0308 	and.w	r3, r3, #8
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f000 80a8 	beq.w	800bb24 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800b9d4:	f7fd fc1a 	bl	800920c <get_fattime>
 800b9d8:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b9dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b9e0:	330e      	adds	r3, #14
 800b9e2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800b9e6:	b2d2      	uxtb	r2, r2
 800b9e8:	701a      	strb	r2, [r3, #0]
 800b9ea:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	0a1b      	lsrs	r3, r3, #8
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b9f8:	330f      	adds	r3, #15
 800b9fa:	b2d2      	uxtb	r2, r2
 800b9fc:	701a      	strb	r2, [r3, #0]
 800b9fe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800ba02:	0c1a      	lsrs	r2, r3, #16
 800ba04:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba08:	3310      	adds	r3, #16
 800ba0a:	b2d2      	uxtb	r2, r2
 800ba0c:	701a      	strb	r2, [r3, #0]
 800ba0e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800ba12:	0e1a      	lsrs	r2, r3, #24
 800ba14:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba18:	3311      	adds	r3, #17
 800ba1a:	b2d2      	uxtb	r2, r2
 800ba1c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800ba1e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba22:	330b      	adds	r3, #11
 800ba24:	2200      	movs	r2, #0
 800ba26:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800ba28:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba2c:	331c      	adds	r3, #28
 800ba2e:	2200      	movs	r2, #0
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba36:	331d      	adds	r3, #29
 800ba38:	2200      	movs	r2, #0
 800ba3a:	701a      	strb	r2, [r3, #0]
 800ba3c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba40:	331e      	adds	r3, #30
 800ba42:	2200      	movs	r2, #0
 800ba44:	701a      	strb	r2, [r3, #0]
 800ba46:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba4a:	331f      	adds	r3, #31
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800ba50:	f107 031c 	add.w	r3, r7, #28
 800ba54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba58:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff f8d0 	bl	800ac02 <ld_clust>
 800ba62:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800ba66:	2100      	movs	r1, #0
 800ba68:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800ba6c:	f7ff f8f7 	bl	800ac5e <st_clust>
				dj.fs->wflag = 1;
 800ba70:	f107 031c 	add.w	r3, r7, #28
 800ba74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800ba7e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d04e      	beq.n	800bb24 <f_open+0x2c0>
					dw = dj.fs->winsect;
 800ba86:	f107 031c 	add.w	r3, r7, #28
 800ba8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba8e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800ba92:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800ba96:	f107 031c 	add.w	r3, r7, #28
 800ba9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba9e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe fdac 	bl	800a600 <remove_chain>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800baae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d136      	bne.n	800bb24 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bab6:	f107 031c 	add.w	r3, r7, #28
 800baba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800babe:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800bac2:	3a01      	subs	r2, #1
 800bac4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 800bac8:	f107 031c 	add.w	r3, r7, #28
 800bacc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bad0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fe face 	bl	800a076 <move_window>
 800bada:	4603      	mov	r3, r0
 800badc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800bae0:	e020      	b.n	800bb24 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800bae2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d11c      	bne.n	800bb24 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800baea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800baee:	330b      	adds	r3, #11
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	f003 0310 	and.w	r3, r3, #16
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <f_open+0x29e>
					res = FR_NO_FILE;
 800bafa:	2304      	movs	r3, #4
 800bafc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800bb00:	e010      	b.n	800bb24 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800bb02:	1dfb      	adds	r3, r7, #7
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	f003 0302 	and.w	r3, r3, #2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00a      	beq.n	800bb24 <f_open+0x2c0>
 800bb0e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bb12:	330b      	adds	r3, #11
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d002      	beq.n	800bb24 <f_open+0x2c0>
						res = FR_DENIED;
 800bb1e:	2307      	movs	r3, #7
 800bb20:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800bb24:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d13d      	bne.n	800bba8 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bb2c:	1dfb      	adds	r3, r7, #7
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	f003 0308 	and.w	r3, r3, #8
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d005      	beq.n	800bb44 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 800bb38:	1dfb      	adds	r3, r7, #7
 800bb3a:	1dfa      	adds	r2, r7, #7
 800bb3c:	7812      	ldrb	r2, [r2, #0]
 800bb3e:	f042 0220 	orr.w	r2, r2, #32
 800bb42:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800bb44:	f107 031c 	add.w	r3, r7, #28
 800bb48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb4c:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800bb50:	f107 030c 	add.w	r3, r7, #12
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800bb5a:	f107 030c 	add.w	r3, r7, #12
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bb64:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bb68:	1dfb      	adds	r3, r7, #7
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	f023 0301 	bic.w	r3, r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	bf14      	ite	ne
 800bb74:	2301      	movne	r3, #1
 800bb76:	2300      	moveq	r3, #0
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f107 031c 	add.w	r3, r7, #28
 800bb80:	4611      	mov	r1, r2
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fe f908 	bl	8009d98 <inc_lock>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	f107 030c 	add.w	r3, r7, #12
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800bb94:	f107 030c 	add.w	r3, r7, #12
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d102      	bne.n	800bba8 <f_open+0x344>
 800bba2:	2302      	movs	r3, #2
 800bba4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800bba8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d15d      	bne.n	800bc6c <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800bbb0:	f107 030c 	add.w	r3, r7, #12
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	1dfa      	adds	r2, r7, #7
 800bbb8:	7812      	ldrb	r2, [r2, #0]
 800bbba:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800bbbe:	f107 030c 	add.w	r3, r7, #12
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bbca:	f107 031c 	add.w	r3, r7, #28
 800bbce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbd2:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff f813 	bl	800ac02 <ld_clust>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	f107 030c 	add.w	r3, r7, #12
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800bbe8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bbec:	331f      	adds	r3, #31
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	061a      	lsls	r2, r3, #24
 800bbf2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bbf6:	331e      	adds	r3, #30
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	041b      	lsls	r3, r3, #16
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bc02:	321d      	adds	r2, #29
 800bc04:	7812      	ldrb	r2, [r2, #0]
 800bc06:	0212      	lsls	r2, r2, #8
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bc0e:	321c      	adds	r2, #28
 800bc10:	7812      	ldrb	r2, [r2, #0]
 800bc12:	431a      	orrs	r2, r3
 800bc14:	f107 030c 	add.w	r3, r7, #12
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800bc1e:	f107 030c 	add.w	r3, r7, #12
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800bc2a:	f107 030c 	add.w	r3, r7, #12
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800bc36:	f107 030c 	add.w	r3, r7, #12
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800bc42:	f107 031c 	add.w	r3, r7, #28
 800bc46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bc4a:	f107 030c 	add.w	r3, r7, #12
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800bc54:	f107 030c 	add.w	r3, r7, #12
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc5e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800bc62:	f107 030c 	add.w	r3, r7, #12
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800bc6c:	f107 031c 	add.w	r3, r7, #28
 800bc70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc74:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 800bc78:	4611      	mov	r1, r2
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fd ffdb 	bl	8009c36 <unlock_fs>
 800bc80:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b08a      	sub	sp, #40	; 0x28
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	60f8      	str	r0, [r7, #12]
 800bc96:	60b9      	str	r1, [r7, #8]
 800bc98:	607a      	str	r2, [r7, #4]
 800bc9a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f7ff fd36 	bl	800b718 <validate>
 800bcac:	4603      	mov	r3, r0
 800bcae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d009      	beq.n	800bcca <f_write+0x3c>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bcbc:	7dfa      	ldrb	r2, [r7, #23]
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fd ffb8 	bl	8009c36 <unlock_fs>
 800bcc6:	7dfb      	ldrb	r3, [r7, #23]
 800bcc8:	e1d4      	b.n	800c074 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00d      	beq.n	800bcf0 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800bce0:	4619      	mov	r1, r3
 800bce2:	4610      	mov	r0, r2
 800bce4:	f7fd ffa7 	bl	8009c36 <unlock_fs>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800bcee:	e1c1      	b.n	800c074 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bcf6:	f003 0302 	and.w	r3, r3, #2
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d108      	bne.n	800bd10 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd04:	2107      	movs	r1, #7
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fd ff95 	bl	8009c36 <unlock_fs>
 800bd0c:	2307      	movs	r3, #7
 800bd0e:	e1b1      	b.n	800c074 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	441a      	add	r2, r3
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd20:	429a      	cmp	r2, r3
 800bd22:	f080 8182 	bcs.w	800c02a <f_write+0x39c>
 800bd26:	2300      	movs	r3, #0
 800bd28:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800bd2a:	e17e      	b.n	800c02a <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f040 813e 	bne.w	800bfb8 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd42:	0a5b      	lsrs	r3, r3, #9
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd4c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	4013      	ands	r3, r2
 800bd56:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800bd58:	7dbb      	ldrb	r3, [r7, #22]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d15f      	bne.n	800be1e <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10f      	bne.n	800bd88 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bd6e:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d121      	bne.n	800bdba <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe fc98 	bl	800a6b4 <create_chain>
 800bd84:	6278      	str	r0, [r7, #36]	; 0x24
 800bd86:	e018      	b.n	800bdba <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d008      	beq.n	800bda4 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd98:	4619      	mov	r1, r3
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f7fe fd27 	bl	800a7ee <clmt_clust>
 800bda0:	6278      	str	r0, [r7, #36]	; 0x24
 800bda2:	e00a      	b.n	800bdba <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	f7fe fc7e 	bl	800a6b4 <create_chain>
 800bdb8:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 8139 	beq.w	800c034 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d10c      	bne.n	800bde2 <f_write+0x154>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2202      	movs	r2, #2
 800bdcc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdd6:	2102      	movs	r1, #2
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7fd ff2c 	bl	8009c36 <unlock_fs>
 800bdde:	2302      	movs	r3, #2
 800bde0:	e148      	b.n	800c074 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bde8:	d10c      	bne.n	800be04 <f_write+0x176>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fd ff1b 	bl	8009c36 <unlock_fs>
 800be00:	2301      	movs	r3, #1
 800be02:	e137      	b.n	800c074 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be12:	2b00      	cmp	r3, #0
 800be14:	d103      	bne.n	800be1e <f_write+0x190>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800be24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d024      	beq.n	800be76 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be32:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800be36:	68f9      	ldr	r1, [r7, #12]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800be3e:	2301      	movs	r3, #1
 800be40:	f7fd fe30 	bl	8009aa4 <disk_write>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00c      	beq.n	800be64 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be58:	2101      	movs	r1, #1
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fd feeb 	bl	8009c36 <unlock_fs>
 800be60:	2301      	movs	r3, #1
 800be62:	e107      	b.n	800c074 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800be6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be82:	4619      	mov	r1, r3
 800be84:	4610      	mov	r0, r2
 800be86:	f7fe f9d1 	bl	800a22c <clust2sect>
 800be8a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10c      	bne.n	800beac <f_write+0x21e>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2202      	movs	r2, #2
 800be96:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bea0:	2102      	movs	r1, #2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fd fec7 	bl	8009c36 <unlock_fs>
 800bea8:	2302      	movs	r3, #2
 800beaa:	e0e3      	b.n	800c074 <f_write+0x3e6>
			sect += csect;
 800beac:	7dbb      	ldrb	r3, [r7, #22]
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	4413      	add	r3, r2
 800beb2:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	0a5b      	lsrs	r3, r3, #9
 800beb8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d04f      	beq.n	800bf60 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bec0:	7dba      	ldrb	r2, [r7, #22]
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	4413      	add	r3, r2
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800becc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d908      	bls.n	800bee6 <f_write+0x258>
					cc = fp->fs->csize - csect;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800beda:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bede:	461a      	mov	r2, r3
 800bee0:	7dbb      	ldrb	r3, [r7, #22]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800beec:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	693a      	ldr	r2, [r7, #16]
 800bef4:	69b9      	ldr	r1, [r7, #24]
 800bef6:	f7fd fdd5 	bl	8009aa4 <disk_write>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00c      	beq.n	800bf1a <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf0e:	2101      	movs	r1, #1
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fd fe90 	bl	8009c36 <unlock_fs>
 800bf16:	2301      	movs	r3, #1
 800bf18:	e0ac      	b.n	800c074 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	69fa      	ldr	r2, [r7, #28]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d916      	bls.n	800bf58 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	025b      	lsls	r3, r3, #9
 800bf38:	69ba      	ldr	r2, [r7, #24]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf40:	4619      	mov	r1, r3
 800bf42:	f7fd fded 	bl	8009b20 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bf4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	025b      	lsls	r3, r3, #9
 800bf5c:	623b      	str	r3, [r7, #32]
				continue;
 800bf5e:	e04e      	b.n	800bffe <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d021      	beq.n	800bfb0 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d219      	bcs.n	800bfb0 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf82:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bf86:	68f9      	ldr	r1, [r7, #12]
 800bf88:	2301      	movs	r3, #1
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	f7fd fd6a 	bl	8009a64 <disk_read>
 800bf90:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00c      	beq.n	800bfb0 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fd fe45 	bl	8009c36 <unlock_fs>
 800bfac:	2301      	movs	r3, #1
 800bfae:	e061      	b.n	800c074 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bfbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bfc6:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bfc8:	6a3a      	ldr	r2, [r7, #32]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d901      	bls.n	800bfd4 <f_write+0x346>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bfda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	6a3a      	ldr	r2, [r7, #32]
 800bfe4:	69b9      	ldr	r1, [r7, #24]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fd fd9a 	bl	8009b20 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	4413      	add	r3, r2
 800c004:	61bb      	str	r3, [r7, #24]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	441a      	add	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	441a      	add	r2, r3
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	601a      	str	r2, [r3, #0]
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f47f ae7d 	bne.w	800bd2c <f_write+0x9e>
 800c032:	e000      	b.n	800c036 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c034:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c042:	429a      	cmp	r2, r3
 800c044:	d905      	bls.n	800c052 <f_write+0x3c4>
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c058:	f043 0320 	orr.w	r3, r3, #32
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c06a:	2100      	movs	r1, #0
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fd fde2 	bl	8009c36 <unlock_fs>
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3728      	adds	r7, #40	; 0x28
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7ff fb47 	bl	800b718 <validate>
 800c08a:	4603      	mov	r3, r0
 800c08c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	2b00      	cmp	r3, #0
 800c092:	f040 80af 	bne.w	800c1f4 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c09c:	f003 0320 	and.w	r3, r3, #32
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 80a7 	beq.w	800c1f4 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d020      	beq.n	800c0f6 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c0ba:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	f7fd fcec 	bl	8009aa4 <disk_write>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d008      	beq.n	800c0e4 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c0d8:	2101      	movs	r1, #1
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fd fdab 	bl	8009c36 <unlock_fs>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e090      	b.n	800c206 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c0ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c102:	4619      	mov	r1, r3
 800c104:	4610      	mov	r0, r2
 800c106:	f7fd ffb6 	bl	800a076 <move_window>
 800c10a:	4603      	mov	r3, r0
 800c10c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c10e:	7dfb      	ldrb	r3, [r7, #23]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d16f      	bne.n	800c1f4 <f_sync+0x178>
				dir = fp->dir_ptr;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c11a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	330b      	adds	r3, #11
 800c120:	781a      	ldrb	r2, [r3, #0]
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	330b      	adds	r3, #11
 800c126:	f042 0220 	orr.w	r2, r2, #32
 800c12a:	b2d2      	uxtb	r2, r2
 800c12c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	331c      	adds	r3, #28
 800c138:	b2d2      	uxtb	r2, r2
 800c13a:	701a      	strb	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c142:	b29b      	uxth	r3, r3
 800c144:	0a1b      	lsrs	r3, r3, #8
 800c146:	b29a      	uxth	r2, r3
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	331d      	adds	r3, #29
 800c14c:	b2d2      	uxtb	r2, r2
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c156:	0c1a      	lsrs	r2, r3, #16
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	331e      	adds	r3, #30
 800c15c:	b2d2      	uxtb	r2, r2
 800c15e:	701a      	strb	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c166:	0e1a      	lsrs	r2, r3, #24
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	331f      	adds	r3, #31
 800c16c:	b2d2      	uxtb	r2, r2
 800c16e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c176:	4619      	mov	r1, r3
 800c178:	6938      	ldr	r0, [r7, #16]
 800c17a:	f7fe fd70 	bl	800ac5e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c17e:	f7fd f845 	bl	800920c <get_fattime>
 800c182:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	3316      	adds	r3, #22
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	b2d2      	uxtb	r2, r2
 800c18c:	701a      	strb	r2, [r3, #0]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	b29b      	uxth	r3, r3
 800c192:	0a1b      	lsrs	r3, r3, #8
 800c194:	b29a      	uxth	r2, r3
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	3317      	adds	r3, #23
 800c19a:	b2d2      	uxtb	r2, r2
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	0c1a      	lsrs	r2, r3, #16
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	3318      	adds	r3, #24
 800c1a6:	b2d2      	uxtb	r2, r2
 800c1a8:	701a      	strb	r2, [r3, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	0e1a      	lsrs	r2, r3, #24
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	3319      	adds	r3, #25
 800c1b2:	b2d2      	uxtb	r2, r2
 800c1b4:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	3312      	adds	r3, #18
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	3313      	adds	r3, #19
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c1cc:	f023 0320 	bic.w	r3, r3, #32
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fd ff71 	bl	800a0d2 <sync_fs>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c1fa:	7dfa      	ldrb	r2, [r7, #23]
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fd fd19 	bl	8009c36 <unlock_fs>
 800c204:	7dfb      	ldrb	r3, [r7, #23]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3718      	adds	r7, #24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b084      	sub	sp, #16
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff ff30 	bl	800c07c <f_sync>
 800c21c:	4603      	mov	r3, r0
 800c21e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c220:	7bfb      	ldrb	r3, [r7, #15]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d11e      	bne.n	800c264 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff fa76 	bl	800b718 <validate>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d116      	bne.n	800c264 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c23c:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c244:	4618      	mov	r0, r3
 800c246:	f7fd fe5f 	bl	8009f08 <dec_lock>
 800c24a:	4603      	mov	r3, r0
 800c24c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d103      	bne.n	800c25c <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c25c:	2100      	movs	r1, #0
 800c25e:	68b8      	ldr	r0, [r7, #8]
 800c260:	f7fd fce9 	bl	8009c36 <unlock_fs>
#endif
		}
	}
	return res;
 800c264:	7bfb      	ldrb	r3, [r7, #15]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
	...

0800c270 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c270:	b480      	push	{r7}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	4613      	mov	r3, r2
 800c27c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c27e:	2301      	movs	r3, #1
 800c280:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c282:	2300      	movs	r3, #0
 800c284:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c286:	4b1f      	ldr	r3, [pc, #124]	; (800c304 <FATFS_LinkDriverEx+0x94>)
 800c288:	7a5b      	ldrb	r3, [r3, #9]
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d831      	bhi.n	800c2f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c290:	4b1c      	ldr	r3, [pc, #112]	; (800c304 <FATFS_LinkDriverEx+0x94>)
 800c292:	7a5b      	ldrb	r3, [r3, #9]
 800c294:	b2db      	uxtb	r3, r3
 800c296:	461a      	mov	r2, r3
 800c298:	4b1a      	ldr	r3, [pc, #104]	; (800c304 <FATFS_LinkDriverEx+0x94>)
 800c29a:	2100      	movs	r1, #0
 800c29c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c29e:	4b19      	ldr	r3, [pc, #100]	; (800c304 <FATFS_LinkDriverEx+0x94>)
 800c2a0:	7a5b      	ldrb	r3, [r3, #9]
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	4a17      	ldr	r2, [pc, #92]	; (800c304 <FATFS_LinkDriverEx+0x94>)
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4413      	add	r3, r2
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c2ae:	4b15      	ldr	r3, [pc, #84]	; (800c304 <FATFS_LinkDriverEx+0x94>)
 800c2b0:	7a5b      	ldrb	r3, [r3, #9]
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4b13      	ldr	r3, [pc, #76]	; (800c304 <FATFS_LinkDriverEx+0x94>)
 800c2b8:	4413      	add	r3, r2
 800c2ba:	79fa      	ldrb	r2, [r7, #7]
 800c2bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c2be:	4b11      	ldr	r3, [pc, #68]	; (800c304 <FATFS_LinkDriverEx+0x94>)
 800c2c0:	7a5b      	ldrb	r3, [r3, #9]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	1c5a      	adds	r2, r3, #1
 800c2c6:	b2d1      	uxtb	r1, r2
 800c2c8:	4a0e      	ldr	r2, [pc, #56]	; (800c304 <FATFS_LinkDriverEx+0x94>)
 800c2ca:	7251      	strb	r1, [r2, #9]
 800c2cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c2ce:	7dbb      	ldrb	r3, [r7, #22]
 800c2d0:	3330      	adds	r3, #48	; 0x30
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	223a      	movs	r2, #58	; 0x3a
 800c2de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	3302      	adds	r3, #2
 800c2e4:	222f      	movs	r2, #47	; 0x2f
 800c2e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	3303      	adds	r3, #3
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	20000270 	.word	0x20000270

0800c308 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c312:	2200      	movs	r2, #0
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7ff ffaa 	bl	800c270 <FATFS_LinkDriverEx>
 800c31c:	4603      	mov	r3, r0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	4603      	mov	r3, r0
 800c32e:	6039      	str	r1, [r7, #0]
 800c330:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800c332:	2300      	movs	r3, #0
 800c334:	60bb      	str	r3, [r7, #8]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800c336:	f107 0308 	add.w	r3, r7, #8
 800c33a:	2101      	movs	r1, #1
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 f869 	bl	800c414 <osSemaphoreCreate>
 800c342:	4602      	mov	r2, r0
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bf14      	ite	ne
 800c350:	2301      	movne	r3, #1
 800c352:	2300      	moveq	r3, #0
 800c354:	b2db      	uxtb	r3, r3
 800c356:	60fb      	str	r3, [r7, #12]
  
  return ret;
 800c358:	68fb      	ldr	r3, [r7, #12]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b082      	sub	sp, #8
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f8f6 	bl	800c55c <osSemaphoreDelete>
  return 1;
 800c370:	2301      	movs	r3, #1
}
 800c372:	4618      	mov	r0, r3
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b084      	sub	sp, #16
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c386:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f860 	bl	800c450 <osSemaphoreWait>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d101      	bne.n	800c39a <ff_req_grant+0x20>
  {
    ret = 1;
 800c396:	2301      	movs	r3, #1
 800c398:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800c39a:	68fb      	ldr	r3, [r7, #12]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f89f 	bl	800c4f0 <osSemaphoreRelease>
}
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b083      	sub	sp, #12
 800c3be:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3c0:	f3ef 8305 	mrs	r3, IPSR
 800c3c4:	607b      	str	r3, [r7, #4]
  return(result);
 800c3c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	bf14      	ite	ne
 800c3cc:	2301      	movne	r3, #1
 800c3ce:	2300      	moveq	r3, #0
 800c3d0:	b2db      	uxtb	r3, r3
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c3e2:	f001 f92d 	bl	800d640 <vTaskStartScheduler>
  
  return osOK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <osDelay+0x16>
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	e000      	b.n	800c404 <osDelay+0x18>
 800c402:	2301      	movs	r3, #1
 800c404:	4618      	mov	r0, r3
 800c406:	f001 f8e7 	bl	800d5d8 <vTaskDelay>
  
  return osOK;
 800c40a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b01      	cmp	r3, #1
 800c422:	d110      	bne.n	800c446 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800c424:	2203      	movs	r2, #3
 800c426:	2100      	movs	r1, #0
 800c428:	2001      	movs	r0, #1
 800c42a:	f000 f9d1 	bl	800c7d0 <xQueueGenericCreate>
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d005      	beq.n	800c442 <osSemaphoreCreate+0x2e>
 800c436:	2300      	movs	r3, #0
 800c438:	2200      	movs	r2, #0
 800c43a:	2100      	movs	r1, #0
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f000 fa25 	bl	800c88c <xQueueGenericSend>
    return sema;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	e000      	b.n	800c448 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800c446:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c45a:	2300      	movs	r3, #0
 800c45c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c464:	2380      	movs	r3, #128	; 0x80
 800c466:	e03c      	b.n	800c4e2 <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c472:	d103      	bne.n	800c47c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c478:	60fb      	str	r3, [r7, #12]
 800c47a:	e009      	b.n	800c490 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d006      	beq.n	800c490 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <osSemaphoreWait+0x40>
      ticks = 1;
 800c48c:	2301      	movs	r3, #1
 800c48e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c490:	f7ff ff93 	bl	800c3ba <inHandlerMode>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d017      	beq.n	800c4ca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c49a:	f107 0308 	add.w	r3, r7, #8
 800c49e:	461a      	mov	r2, r3
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fd2c 	bl	800cf00 <xQueueReceiveFromISR>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d001      	beq.n	800c4b2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c4ae:	23ff      	movs	r3, #255	; 0xff
 800c4b0:	e017      	b.n	800c4e2 <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d013      	beq.n	800c4e0 <osSemaphoreWait+0x90>
 800c4b8:	4b0c      	ldr	r3, [pc, #48]	; (800c4ec <osSemaphoreWait+0x9c>)
 800c4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4be:	601a      	str	r2, [r3, #0]
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	e00a      	b.n	800c4e0 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fbff 	bl	800ccd4 <xQueueGenericReceive>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d001      	beq.n	800c4e0 <osSemaphoreWait+0x90>
    return osErrorOS;
 800c4dc:	23ff      	movs	r3, #255	; 0xff
 800c4de:	e000      	b.n	800c4e2 <osSemaphoreWait+0x92>
  }
  
  return osOK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	e000ed04 	.word	0xe000ed04

0800c4f0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c500:	f7ff ff5b 	bl	800c3ba <inHandlerMode>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d016      	beq.n	800c538 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c50a:	f107 0308 	add.w	r3, r7, #8
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fb51 	bl	800cbb8 <xQueueGiveFromISR>
 800c516:	4603      	mov	r3, r0
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d001      	beq.n	800c520 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c51c:	23ff      	movs	r3, #255	; 0xff
 800c51e:	e017      	b.n	800c550 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d013      	beq.n	800c54e <osSemaphoreRelease+0x5e>
 800c526:	4b0c      	ldr	r3, [pc, #48]	; (800c558 <osSemaphoreRelease+0x68>)
 800c528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c52c:	601a      	str	r2, [r3, #0]
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	e00a      	b.n	800c54e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c538:	2300      	movs	r3, #0
 800c53a:	2200      	movs	r2, #0
 800c53c:	2100      	movs	r1, #0
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f9a4 	bl	800c88c <xQueueGenericSend>
 800c544:	4603      	mov	r3, r0
 800c546:	2b01      	cmp	r3, #1
 800c548:	d001      	beq.n	800c54e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c54a:	23ff      	movs	r3, #255	; 0xff
 800c54c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c54e:	68fb      	ldr	r3, [r7, #12]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	e000ed04 	.word	0xe000ed04

0800c55c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c564:	f7ff ff29 	bl	800c3ba <inHandlerMode>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d001      	beq.n	800c572 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c56e:	2382      	movs	r3, #130	; 0x82
 800c570:	e003      	b.n	800c57a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fd44 	bl	800d000 <vQueueDelete>

  return osOK; 
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800c586:	f001 fc89 	bl	800de9c <xTaskGetSchedulerState>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d001      	beq.n	800c594 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800c590:	f002 fa82 	bl	800ea98 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800c594:	bf00      	nop
 800c596:	bd80      	pop	{r7, pc}

0800c598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f103 0208 	add.w	r2, r3, #8
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f103 0208 	add.w	r2, r3, #8
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f103 0208 	add.w	r2, r3, #8
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5e6:	bf00      	nop
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b085      	sub	sp, #20
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	689a      	ldr	r2, [r3, #8]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	601a      	str	r2, [r3, #0]
}
 800c62e:	bf00      	nop
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c63a:	b480      	push	{r7}
 800c63c:	b085      	sub	sp, #20
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c650:	d103      	bne.n	800c65a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	e00c      	b.n	800c674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3308      	adds	r3, #8
 800c65e:	60fb      	str	r3, [r7, #12]
 800c660:	e002      	b.n	800c668 <vListInsert+0x2e>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	429a      	cmp	r2, r3
 800c672:	d2f6      	bcs.n	800c662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	601a      	str	r2, [r3, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	6892      	ldr	r2, [r2, #8]
 800c6c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	6852      	ldr	r2, [r2, #4]
 800c6cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d103      	bne.n	800c6e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	689a      	ldr	r2, [r3, #8]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	1e5a      	subs	r2, r3, #1
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d10a      	bne.n	800c72a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c718:	f383 8811 	msr	BASEPRI, r3
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	f3bf 8f4f 	dsb	sy
 800c724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800c726:	bf00      	nop
 800c728:	e7fe      	b.n	800c728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c72a:	f002 f923 	bl	800e974 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c736:	68f9      	ldr	r1, [r7, #12]
 800c738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c73a:	fb01 f303 	mul.w	r3, r1, r3
 800c73e:	441a      	add	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75a:	3b01      	subs	r3, #1
 800c75c:	68f9      	ldr	r1, [r7, #12]
 800c75e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c760:	fb01 f303 	mul.w	r3, r1, r3
 800c764:	441a      	add	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	22ff      	movs	r2, #255	; 0xff
 800c76e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	22ff      	movs	r2, #255	; 0xff
 800c776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d114      	bne.n	800c7aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d01a      	beq.n	800c7be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	3310      	adds	r3, #16
 800c78c:	4618      	mov	r0, r3
 800c78e:	f001 f9c9 	bl	800db24 <xTaskRemoveFromEventList>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d012      	beq.n	800c7be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c798:	4b0c      	ldr	r3, [pc, #48]	; (800c7cc <xQueueGenericReset+0xcc>)
 800c79a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c79e:	601a      	str	r2, [r3, #0]
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	e009      	b.n	800c7be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3310      	adds	r3, #16
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff fef2 	bl	800c598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	3324      	adds	r3, #36	; 0x24
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff feed 	bl	800c598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c7be:	f002 f909 	bl	800e9d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c7c2:	2301      	movs	r3, #1
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	e000ed04 	.word	0xe000ed04

0800c7d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08a      	sub	sp, #40	; 0x28
 800c7d4:	af02      	add	r7, sp, #8
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10a      	bne.n	800c7fa <xQueueGenericCreate+0x2a>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	613b      	str	r3, [r7, #16]
}
 800c7f6:	bf00      	nop
 800c7f8:	e7fe      	b.n	800c7f8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c800:	2300      	movs	r3, #0
 800c802:	61fb      	str	r3, [r7, #28]
 800c804:	e004      	b.n	800c810 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	fb02 f303 	mul.w	r3, r2, r3
 800c80e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	3350      	adds	r3, #80	; 0x50
 800c814:	4618      	mov	r0, r3
 800c816:	f002 f9c7 	bl	800eba8 <pvPortMalloc>
 800c81a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00b      	beq.n	800c83a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	3350      	adds	r3, #80	; 0x50
 800c826:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c828:	79fa      	ldrb	r2, [r7, #7]
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	4613      	mov	r3, r2
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	68b9      	ldr	r1, [r7, #8]
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f000 f805 	bl	800c844 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800c83a:	69bb      	ldr	r3, [r7, #24]
	}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3720      	adds	r7, #32
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d103      	bne.n	800c860 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	69ba      	ldr	r2, [r7, #24]
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	e002      	b.n	800c866 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	68ba      	ldr	r2, [r7, #8]
 800c870:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c872:	2101      	movs	r1, #1
 800c874:	69b8      	ldr	r0, [r7, #24]
 800c876:	f7ff ff43 	bl	800c700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	78fa      	ldrb	r2, [r7, #3]
 800c87e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c882:	bf00      	nop
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b08e      	sub	sp, #56	; 0x38
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c89a:	2300      	movs	r3, #0
 800c89c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10a      	bne.n	800c8be <xQueueGenericSend+0x32>
	__asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8ba:	bf00      	nop
 800c8bc:	e7fe      	b.n	800c8bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d103      	bne.n	800c8cc <xQueueGenericSend+0x40>
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <xQueueGenericSend+0x44>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e000      	b.n	800c8d2 <xQueueGenericSend+0x46>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10a      	bne.n	800c8ec <xQueueGenericSend+0x60>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8e8:	bf00      	nop
 800c8ea:	e7fe      	b.n	800c8ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d103      	bne.n	800c8fa <xQueueGenericSend+0x6e>
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d101      	bne.n	800c8fe <xQueueGenericSend+0x72>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e000      	b.n	800c900 <xQueueGenericSend+0x74>
 800c8fe:	2300      	movs	r3, #0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <xQueueGenericSend+0x8e>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	623b      	str	r3, [r7, #32]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c91a:	f001 fabf 	bl	800de9c <xTaskGetSchedulerState>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d102      	bne.n	800c92a <xQueueGenericSend+0x9e>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d101      	bne.n	800c92e <xQueueGenericSend+0xa2>
 800c92a:	2301      	movs	r3, #1
 800c92c:	e000      	b.n	800c930 <xQueueGenericSend+0xa4>
 800c92e:	2300      	movs	r3, #0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10a      	bne.n	800c94a <xQueueGenericSend+0xbe>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	61fb      	str	r3, [r7, #28]
}
 800c946:	bf00      	nop
 800c948:	e7fe      	b.n	800c948 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c94a:	f002 f813 	bl	800e974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c956:	429a      	cmp	r2, r3
 800c958:	d302      	bcc.n	800c960 <xQueueGenericSend+0xd4>
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d129      	bne.n	800c9b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c966:	f000 fb69 	bl	800d03c <prvCopyDataToQueue>
 800c96a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c970:	2b00      	cmp	r3, #0
 800c972:	d010      	beq.n	800c996 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c976:	3324      	adds	r3, #36	; 0x24
 800c978:	4618      	mov	r0, r3
 800c97a:	f001 f8d3 	bl	800db24 <xTaskRemoveFromEventList>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d013      	beq.n	800c9ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c984:	4b3f      	ldr	r3, [pc, #252]	; (800ca84 <xQueueGenericSend+0x1f8>)
 800c986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	e00a      	b.n	800c9ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d007      	beq.n	800c9ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c99c:	4b39      	ldr	r3, [pc, #228]	; (800ca84 <xQueueGenericSend+0x1f8>)
 800c99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c9ac:	f002 f812 	bl	800e9d4 <vPortExitCritical>
				return pdPASS;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e063      	b.n	800ca7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d103      	bne.n	800c9c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9ba:	f002 f80b 	bl	800e9d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e05c      	b.n	800ca7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d106      	bne.n	800c9d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800c9c8:	f107 0314 	add.w	r3, r7, #20
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f001 f90b 	bl	800dbe8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9d6:	f001 fffd 	bl	800e9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9da:	f000 fe7f 	bl	800d6dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9de:	f001 ffc9 	bl	800e974 <vPortEnterCritical>
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9e8:	b25b      	sxtb	r3, r3
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9ee:	d103      	bne.n	800c9f8 <xQueueGenericSend+0x16c>
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9fe:	b25b      	sxtb	r3, r3
 800ca00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca04:	d103      	bne.n	800ca0e <xQueueGenericSend+0x182>
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca0e:	f001 ffe1 	bl	800e9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca12:	1d3a      	adds	r2, r7, #4
 800ca14:	f107 0314 	add.w	r3, r7, #20
 800ca18:	4611      	mov	r1, r2
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f001 f908 	bl	800dc30 <xTaskCheckForTimeOut>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d124      	bne.n	800ca70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca28:	f000 fc00 	bl	800d22c <prvIsQueueFull>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d018      	beq.n	800ca64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca34:	3310      	adds	r3, #16
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	4611      	mov	r1, r2
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f001 f822 	bl	800da84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca42:	f000 fb8b 	bl	800d15c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca46:	f000 fe57 	bl	800d6f8 <xTaskResumeAll>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f47f af7c 	bne.w	800c94a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ca52:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <xQueueGenericSend+0x1f8>)
 800ca54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	e772      	b.n	800c94a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca66:	f000 fb79 	bl	800d15c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca6a:	f000 fe45 	bl	800d6f8 <xTaskResumeAll>
 800ca6e:	e76c      	b.n	800c94a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca72:	f000 fb73 	bl	800d15c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca76:	f000 fe3f 	bl	800d6f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca7a:	2300      	movs	r3, #0
		}
	}
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3738      	adds	r7, #56	; 0x38
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	e000ed04 	.word	0xe000ed04

0800ca88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08e      	sub	sp, #56	; 0x38
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
 800ca94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10a      	bne.n	800cab6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cab2:	bf00      	nop
 800cab4:	e7fe      	b.n	800cab4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d103      	bne.n	800cac4 <xQueueGenericSendFromISR+0x3c>
 800cabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d101      	bne.n	800cac8 <xQueueGenericSendFromISR+0x40>
 800cac4:	2301      	movs	r3, #1
 800cac6:	e000      	b.n	800caca <xQueueGenericSendFromISR+0x42>
 800cac8:	2300      	movs	r3, #0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d10a      	bne.n	800cae4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	623b      	str	r3, [r7, #32]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d103      	bne.n	800caf2 <xQueueGenericSendFromISR+0x6a>
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d101      	bne.n	800caf6 <xQueueGenericSendFromISR+0x6e>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e000      	b.n	800caf8 <xQueueGenericSendFromISR+0x70>
 800caf6:	2300      	movs	r3, #0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	61fb      	str	r3, [r7, #28]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb12:	f002 f809 	bl	800eb28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb16:	f3ef 8211 	mrs	r2, BASEPRI
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	61ba      	str	r2, [r7, #24]
 800cb2c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb2e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d302      	bcc.n	800cb44 <xQueueGenericSendFromISR+0xbc>
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d12c      	bne.n	800cb9e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	68b9      	ldr	r1, [r7, #8]
 800cb52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb54:	f000 fa72 	bl	800d03c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb58:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cb5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb60:	d112      	bne.n	800cb88 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d016      	beq.n	800cb98 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	3324      	adds	r3, #36	; 0x24
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 ffd8 	bl	800db24 <xTaskRemoveFromEventList>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00e      	beq.n	800cb98 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00b      	beq.n	800cb98 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	e007      	b.n	800cb98 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	b25a      	sxtb	r2, r3
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cb9c:	e001      	b.n	800cba2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	637b      	str	r3, [r7, #52]	; 0x34
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 800cbac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3738      	adds	r7, #56	; 0x38
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08e      	sub	sp, #56	; 0x38
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10a      	bne.n	800cbe2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	623b      	str	r3, [r7, #32]
}
 800cbde:	bf00      	nop
 800cbe0:	e7fe      	b.n	800cbe0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	61fb      	str	r3, [r7, #28]
}
 800cbfc:	bf00      	nop
 800cbfe:	e7fe      	b.n	800cbfe <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d103      	bne.n	800cc10 <xQueueGiveFromISR+0x58>
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <xQueueGiveFromISR+0x5c>
 800cc10:	2301      	movs	r3, #1
 800cc12:	e000      	b.n	800cc16 <xQueueGiveFromISR+0x5e>
 800cc14:	2300      	movs	r3, #0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10a      	bne.n	800cc30 <xQueueGiveFromISR+0x78>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	61bb      	str	r3, [r7, #24]
}
 800cc2c:	bf00      	nop
 800cc2e:	e7fe      	b.n	800cc2e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc30:	f001 ff7a 	bl	800eb28 <vPortValidateInterruptPriority>
	__asm volatile
 800cc34:	f3ef 8211 	mrs	r2, BASEPRI
 800cc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	617a      	str	r2, [r7, #20]
 800cc4a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cc4c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc54:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d22b      	bcs.n	800ccb8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc7a:	d112      	bne.n	800cca2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d016      	beq.n	800ccb2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc86:	3324      	adds	r3, #36	; 0x24
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f000 ff4b 	bl	800db24 <xTaskRemoveFromEventList>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00e      	beq.n	800ccb2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00b      	beq.n	800ccb2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	e007      	b.n	800ccb2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cca6:	3301      	adds	r3, #1
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	b25a      	sxtb	r2, r3
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	637b      	str	r3, [r7, #52]	; 0x34
 800ccb6:	e001      	b.n	800ccbc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	637b      	str	r3, [r7, #52]	; 0x34
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f383 8811 	msr	BASEPRI, r3
}
 800ccc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3738      	adds	r7, #56	; 0x38
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
	...

0800ccd4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08e      	sub	sp, #56	; 0x38
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cce2:	2300      	movs	r3, #0
 800cce4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ccea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10a      	bne.n	800cd06 <xQueueGenericReceive+0x32>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d103      	bne.n	800cd14 <xQueueGenericReceive+0x40>
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d101      	bne.n	800cd18 <xQueueGenericReceive+0x44>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e000      	b.n	800cd1a <xQueueGenericReceive+0x46>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10a      	bne.n	800cd34 <xQueueGenericReceive+0x60>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	623b      	str	r3, [r7, #32]
}
 800cd30:	bf00      	nop
 800cd32:	e7fe      	b.n	800cd32 <xQueueGenericReceive+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd34:	f001 f8b2 	bl	800de9c <xTaskGetSchedulerState>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d102      	bne.n	800cd44 <xQueueGenericReceive+0x70>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d101      	bne.n	800cd48 <xQueueGenericReceive+0x74>
 800cd44:	2301      	movs	r3, #1
 800cd46:	e000      	b.n	800cd4a <xQueueGenericReceive+0x76>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d10a      	bne.n	800cd64 <xQueueGenericReceive+0x90>
	__asm volatile
 800cd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd52:	f383 8811 	msr	BASEPRI, r3
 800cd56:	f3bf 8f6f 	isb	sy
 800cd5a:	f3bf 8f4f 	dsb	sy
 800cd5e:	61fb      	str	r3, [r7, #28]
}
 800cd60:	bf00      	nop
 800cd62:	e7fe      	b.n	800cd62 <xQueueGenericReceive+0x8e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd64:	f001 fe06 	bl	800e974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd6c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d046      	beq.n	800ce02 <xQueueGenericReceive+0x12e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd7e:	f000 f9c7 	bl	800d110 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d121      	bne.n	800cdcc <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	1e5a      	subs	r2, r3, #1
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d104      	bne.n	800cda2 <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800cd98:	f001 f99a 	bl	800e0d0 <pvTaskIncrementMutexHeldCount>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d027      	beq.n	800cdfa <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	3310      	adds	r3, #16
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 feb8 	bl	800db24 <xTaskRemoveFromEventList>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d01f      	beq.n	800cdfa <xQueueGenericReceive+0x126>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800cdba:	4b50      	ldr	r3, [pc, #320]	; (800cefc <xQueueGenericReceive+0x228>)
 800cdbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc0:	601a      	str	r2, [r3, #0]
 800cdc2:	f3bf 8f4f 	dsb	sy
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	e016      	b.n	800cdfa <xQueueGenericReceive+0x126>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdd0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00f      	beq.n	800cdfa <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	3324      	adds	r3, #36	; 0x24
 800cdde:	4618      	mov	r0, r3
 800cde0:	f000 fea0 	bl	800db24 <xTaskRemoveFromEventList>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d007      	beq.n	800cdfa <xQueueGenericReceive+0x126>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800cdea:	4b44      	ldr	r3, [pc, #272]	; (800cefc <xQueueGenericReceive+0x228>)
 800cdec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf0:	601a      	str	r2, [r3, #0]
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800cdfa:	f001 fdeb 	bl	800e9d4 <vPortExitCritical>
				return pdPASS;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e077      	b.n	800cef2 <xQueueGenericReceive+0x21e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d103      	bne.n	800ce10 <xQueueGenericReceive+0x13c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce08:	f001 fde4 	bl	800e9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	e070      	b.n	800cef2 <xQueueGenericReceive+0x21e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d106      	bne.n	800ce24 <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800ce16:	f107 0314 	add.w	r3, r7, #20
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 fee4 	bl	800dbe8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce20:	2301      	movs	r3, #1
 800ce22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce24:	f001 fdd6 	bl	800e9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce28:	f000 fc58 	bl	800d6dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce2c:	f001 fda2 	bl	800e974 <vPortEnterCritical>
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce36:	b25b      	sxtb	r3, r3
 800ce38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce3c:	d103      	bne.n	800ce46 <xQueueGenericReceive+0x172>
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce4c:	b25b      	sxtb	r3, r3
 800ce4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce52:	d103      	bne.n	800ce5c <xQueueGenericReceive+0x188>
 800ce54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce5c:	f001 fdba 	bl	800e9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce60:	1d3a      	adds	r2, r7, #4
 800ce62:	f107 0314 	add.w	r3, r7, #20
 800ce66:	4611      	mov	r1, r2
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 fee1 	bl	800dc30 <xTaskCheckForTimeOut>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d131      	bne.n	800ced8 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce76:	f000 f9c3 	bl	800d200 <prvIsQueueEmpty>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d025      	beq.n	800cecc <xQueueGenericReceive+0x1f8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d108      	bne.n	800ce9a <xQueueGenericReceive+0x1c6>
					{
						taskENTER_CRITICAL();
 800ce88:	f001 fd74 	bl	800e974 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ce8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f001 f821 	bl	800ded8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800ce96:	f001 fd9d 	bl	800e9d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9c:	3324      	adds	r3, #36	; 0x24
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	4611      	mov	r1, r2
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 fdee 	bl	800da84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceaa:	f000 f957 	bl	800d15c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ceae:	f000 fc23 	bl	800d6f8 <xTaskResumeAll>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f47f af55 	bne.w	800cd64 <xQueueGenericReceive+0x90>
				{
					portYIELD_WITHIN_API();
 800ceba:	4b10      	ldr	r3, [pc, #64]	; (800cefc <xQueueGenericReceive+0x228>)
 800cebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	e74b      	b.n	800cd64 <xQueueGenericReceive+0x90>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cece:	f000 f945 	bl	800d15c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ced2:	f000 fc11 	bl	800d6f8 <xTaskResumeAll>
 800ced6:	e745      	b.n	800cd64 <xQueueGenericReceive+0x90>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800ced8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceda:	f000 f93f 	bl	800d15c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cede:	f000 fc0b 	bl	800d6f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cee4:	f000 f98c 	bl	800d200 <prvIsQueueEmpty>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f43f af3a 	beq.w	800cd64 <xQueueGenericReceive+0x90>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cef0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3738      	adds	r7, #56	; 0x38
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	e000ed04 	.word	0xe000ed04

0800cf00 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b08e      	sub	sp, #56	; 0x38
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10a      	bne.n	800cf2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	623b      	str	r3, [r7, #32]
}
 800cf28:	bf00      	nop
 800cf2a:	e7fe      	b.n	800cf2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d103      	bne.n	800cf3a <xQueueReceiveFromISR+0x3a>
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <xQueueReceiveFromISR+0x3e>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e000      	b.n	800cf40 <xQueueReceiveFromISR+0x40>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10a      	bne.n	800cf5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	61fb      	str	r3, [r7, #28]
}
 800cf56:	bf00      	nop
 800cf58:	e7fe      	b.n	800cf58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf5a:	f001 fde5 	bl	800eb28 <vPortValidateInterruptPriority>
	__asm volatile
 800cf5e:	f3ef 8211 	mrs	r2, BASEPRI
 800cf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	61ba      	str	r2, [r7, #24]
 800cf74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cf76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d02f      	beq.n	800cfe6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf94:	f000 f8bc 	bl	800d110 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9a:	1e5a      	subs	r2, r3, #1
 800cf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cfa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cfa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfa8:	d112      	bne.n	800cfd0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d016      	beq.n	800cfe0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	3310      	adds	r3, #16
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 fdb4 	bl	800db24 <xTaskRemoveFromEventList>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00e      	beq.n	800cfe0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00b      	beq.n	800cfe0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	601a      	str	r2, [r3, #0]
 800cfce:	e007      	b.n	800cfe0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	b25a      	sxtb	r2, r3
 800cfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	637b      	str	r3, [r7, #52]	; 0x34
 800cfe4:	e001      	b.n	800cfea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	637b      	str	r3, [r7, #52]	; 0x34
 800cfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	f383 8811 	msr	BASEPRI, r3
}
 800cff4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3738      	adds	r7, #56	; 0x38
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10a      	bne.n	800d028 <vQueueDelete+0x28>
	__asm volatile
 800d012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d016:	f383 8811 	msr	BASEPRI, r3
 800d01a:	f3bf 8f6f 	isb	sy
 800d01e:	f3bf 8f4f 	dsb	sy
 800d022:	60bb      	str	r3, [r7, #8]
}
 800d024:	bf00      	nop
 800d026:	e7fe      	b.n	800d026 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f000 f941 	bl	800d2b0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f001 fe7e 	bl	800ed30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d034:	bf00      	nop
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d048:	2300      	movs	r3, #0
 800d04a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d050:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d056:	2b00      	cmp	r3, #0
 800d058:	d10d      	bne.n	800d076 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d14d      	bne.n	800d0fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	4618      	mov	r0, r3
 800d068:	f000 ffac 	bl	800dfc4 <xTaskPriorityDisinherit>
 800d06c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	605a      	str	r2, [r3, #4]
 800d074:	e043      	b.n	800d0fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d119      	bne.n	800d0b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6898      	ldr	r0, [r3, #8]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d084:	461a      	mov	r2, r3
 800d086:	68b9      	ldr	r1, [r7, #8]
 800d088:	f001 ffcc 	bl	800f024 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	689a      	ldr	r2, [r3, #8]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d094:	441a      	add	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	689a      	ldr	r2, [r3, #8]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d32b      	bcc.n	800d0fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	609a      	str	r2, [r3, #8]
 800d0ae:	e026      	b.n	800d0fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	68d8      	ldr	r0, [r3, #12]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	68b9      	ldr	r1, [r7, #8]
 800d0bc:	f001 ffb2 	bl	800f024 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	68da      	ldr	r2, [r3, #12]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c8:	425b      	negs	r3, r3
 800d0ca:	441a      	add	r2, r3
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	68da      	ldr	r2, [r3, #12]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d207      	bcs.n	800d0ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	685a      	ldr	r2, [r3, #4]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e4:	425b      	negs	r3, r3
 800d0e6:	441a      	add	r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d105      	bne.n	800d0fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d106:	697b      	ldr	r3, [r7, #20]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3718      	adds	r7, #24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d018      	beq.n	800d154 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	68da      	ldr	r2, [r3, #12]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12a:	441a      	add	r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	68da      	ldr	r2, [r3, #12]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d303      	bcc.n	800d144 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	68d9      	ldr	r1, [r3, #12]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14c:	461a      	mov	r2, r3
 800d14e:	6838      	ldr	r0, [r7, #0]
 800d150:	f001 ff68 	bl	800f024 <memcpy>
	}
}
 800d154:	bf00      	nop
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d164:	f001 fc06 	bl	800e974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d16e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d170:	e011      	b.n	800d196 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d176:	2b00      	cmp	r3, #0
 800d178:	d012      	beq.n	800d1a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	3324      	adds	r3, #36	; 0x24
 800d17e:	4618      	mov	r0, r3
 800d180:	f000 fcd0 	bl	800db24 <xTaskRemoveFromEventList>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d001      	beq.n	800d18e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d18a:	f000 fdb1 	bl	800dcf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	3b01      	subs	r3, #1
 800d192:	b2db      	uxtb	r3, r3
 800d194:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	dce9      	bgt.n	800d172 <prvUnlockQueue+0x16>
 800d19e:	e000      	b.n	800d1a2 <prvUnlockQueue+0x46>
					break;
 800d1a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	22ff      	movs	r2, #255	; 0xff
 800d1a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d1aa:	f001 fc13 	bl	800e9d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d1ae:	f001 fbe1 	bl	800e974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1ba:	e011      	b.n	800d1e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	691b      	ldr	r3, [r3, #16]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d012      	beq.n	800d1ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3310      	adds	r3, #16
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f000 fcab 	bl	800db24 <xTaskRemoveFromEventList>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d1d4:	f000 fd8c 	bl	800dcf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d1d8:	7bbb      	ldrb	r3, [r7, #14]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	dce9      	bgt.n	800d1bc <prvUnlockQueue+0x60>
 800d1e8:	e000      	b.n	800d1ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d1ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	22ff      	movs	r2, #255	; 0xff
 800d1f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d1f4:	f001 fbee 	bl	800e9d4 <vPortExitCritical>
}
 800d1f8:	bf00      	nop
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d208:	f001 fbb4 	bl	800e974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d214:	2301      	movs	r3, #1
 800d216:	60fb      	str	r3, [r7, #12]
 800d218:	e001      	b.n	800d21e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d21a:	2300      	movs	r3, #0
 800d21c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d21e:	f001 fbd9 	bl	800e9d4 <vPortExitCritical>

	return xReturn;
 800d222:	68fb      	ldr	r3, [r7, #12]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d234:	f001 fb9e 	bl	800e974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d240:	429a      	cmp	r2, r3
 800d242:	d102      	bne.n	800d24a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d244:	2301      	movs	r3, #1
 800d246:	60fb      	str	r3, [r7, #12]
 800d248:	e001      	b.n	800d24e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d24a:	2300      	movs	r3, #0
 800d24c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d24e:	f001 fbc1 	bl	800e9d4 <vPortExitCritical>

	return xReturn;
 800d252:	68fb      	ldr	r3, [r7, #12]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3710      	adds	r7, #16
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d266:	2300      	movs	r3, #0
 800d268:	60fb      	str	r3, [r7, #12]
 800d26a:	e014      	b.n	800d296 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d26c:	4a0f      	ldr	r2, [pc, #60]	; (800d2ac <vQueueAddToRegistry+0x50>)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10b      	bne.n	800d290 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d278:	490c      	ldr	r1, [pc, #48]	; (800d2ac <vQueueAddToRegistry+0x50>)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d282:	4a0a      	ldr	r2, [pc, #40]	; (800d2ac <vQueueAddToRegistry+0x50>)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	00db      	lsls	r3, r3, #3
 800d288:	4413      	add	r3, r2
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d28e:	e006      	b.n	800d29e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	3301      	adds	r3, #1
 800d294:	60fb      	str	r3, [r7, #12]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2b07      	cmp	r3, #7
 800d29a:	d9e7      	bls.n	800d26c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d29c:	bf00      	nop
 800d29e:	bf00      	nop
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	200081f0 	.word	0x200081f0

0800d2b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	e016      	b.n	800d2ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d2be:	4a10      	ldr	r2, [pc, #64]	; (800d300 <vQueueUnregisterQueue+0x50>)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	4413      	add	r3, r2
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d10b      	bne.n	800d2e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d2ce:	4a0c      	ldr	r2, [pc, #48]	; (800d300 <vQueueUnregisterQueue+0x50>)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d2d8:	4a09      	ldr	r2, [pc, #36]	; (800d300 <vQueueUnregisterQueue+0x50>)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	00db      	lsls	r3, r3, #3
 800d2de:	4413      	add	r3, r2
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	605a      	str	r2, [r3, #4]
				break;
 800d2e4:	e006      	b.n	800d2f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	60fb      	str	r3, [r7, #12]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2b07      	cmp	r3, #7
 800d2f0:	d9e5      	bls.n	800d2be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d2f2:	bf00      	nop
 800d2f4:	bf00      	nop
 800d2f6:	3714      	adds	r7, #20
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr
 800d300:	200081f0 	.word	0x200081f0

0800d304 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d314:	f001 fb2e 	bl	800e974 <vPortEnterCritical>
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d31e:	b25b      	sxtb	r3, r3
 800d320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d324:	d103      	bne.n	800d32e <vQueueWaitForMessageRestricted+0x2a>
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	2200      	movs	r2, #0
 800d32a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d334:	b25b      	sxtb	r3, r3
 800d336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d33a:	d103      	bne.n	800d344 <vQueueWaitForMessageRestricted+0x40>
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d344:	f001 fb46 	bl	800e9d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d106      	bne.n	800d35e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	3324      	adds	r3, #36	; 0x24
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	68b9      	ldr	r1, [r7, #8]
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 fbb7 	bl	800dacc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d35e:	6978      	ldr	r0, [r7, #20]
 800d360:	f7ff fefc 	bl	800d15c <prvUnlockQueue>
	}
 800d364:	bf00      	nop
 800d366:	3718      	adds	r7, #24
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b08c      	sub	sp, #48	; 0x30
 800d370:	af04      	add	r7, sp, #16
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	603b      	str	r3, [r7, #0]
 800d378:	4613      	mov	r3, r2
 800d37a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d37c:	88fb      	ldrh	r3, [r7, #6]
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4618      	mov	r0, r3
 800d382:	f001 fc11 	bl	800eba8 <pvPortMalloc>
 800d386:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00e      	beq.n	800d3ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d38e:	205c      	movs	r0, #92	; 0x5c
 800d390:	f001 fc0a 	bl	800eba8 <pvPortMalloc>
 800d394:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d003      	beq.n	800d3a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	697a      	ldr	r2, [r7, #20]
 800d3a0:	631a      	str	r2, [r3, #48]	; 0x30
 800d3a2:	e005      	b.n	800d3b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d3a4:	6978      	ldr	r0, [r7, #20]
 800d3a6:	f001 fcc3 	bl	800ed30 <vPortFree>
 800d3aa:	e001      	b.n	800d3b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d013      	beq.n	800d3de <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d3b6:	88fa      	ldrh	r2, [r7, #6]
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	9303      	str	r3, [sp, #12]
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	9302      	str	r3, [sp, #8]
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	68b9      	ldr	r1, [r7, #8]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f000 f80e 	bl	800d3ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3d2:	69f8      	ldr	r0, [r7, #28]
 800d3d4:	f000 f892 	bl	800d4fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	61bb      	str	r3, [r7, #24]
 800d3dc:	e002      	b.n	800d3e4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d3e4:	69bb      	ldr	r3, [r7, #24]
	}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3720      	adds	r7, #32
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b088      	sub	sp, #32
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	60b9      	str	r1, [r7, #8]
 800d3f8:	607a      	str	r2, [r7, #4]
 800d3fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	461a      	mov	r2, r3
 800d406:	21a5      	movs	r1, #165	; 0xa5
 800d408:	f001 fe1a 	bl	800f040 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d416:	3b01      	subs	r3, #1
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	f023 0307 	bic.w	r3, r3, #7
 800d424:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	f003 0307 	and.w	r3, r3, #7
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00a      	beq.n	800d446 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	617b      	str	r3, [r7, #20]
}
 800d442:	bf00      	nop
 800d444:	e7fe      	b.n	800d444 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d446:	2300      	movs	r3, #0
 800d448:	61fb      	str	r3, [r7, #28]
 800d44a:	e012      	b.n	800d472 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	4413      	add	r3, r2
 800d452:	7819      	ldrb	r1, [r3, #0]
 800d454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	4413      	add	r3, r2
 800d45a:	3334      	adds	r3, #52	; 0x34
 800d45c:	460a      	mov	r2, r1
 800d45e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800d460:	68ba      	ldr	r2, [r7, #8]
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	4413      	add	r3, r2
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d006      	beq.n	800d47a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	3301      	adds	r3, #1
 800d470:	61fb      	str	r3, [r7, #28]
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	2b0f      	cmp	r3, #15
 800d476:	d9e9      	bls.n	800d44c <prvInitialiseNewTask+0x5e>
 800d478:	e000      	b.n	800d47c <prvInitialiseNewTask+0x8e>
		{
			break;
 800d47a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	2200      	movs	r2, #0
 800d480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d486:	2b06      	cmp	r3, #6
 800d488:	d901      	bls.n	800d48e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d48a:	2306      	movs	r3, #6
 800d48c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d492:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d498:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	2200      	movs	r2, #0
 800d49e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7ff f897 	bl	800c5d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ac:	3318      	adds	r3, #24
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7ff f892 	bl	800c5d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	f1c3 0207 	rsb	r2, r3, #7
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	68f9      	ldr	r1, [r7, #12]
 800d4dc:	69b8      	ldr	r0, [r7, #24]
 800d4de:	f001 f943 	bl	800e768 <pxPortInitialiseStack>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d002      	beq.n	800d4f4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4f4:	bf00      	nop
 800d4f6:	3720      	adds	r7, #32
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d504:	f001 fa36 	bl	800e974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d508:	4b2c      	ldr	r3, [pc, #176]	; (800d5bc <prvAddNewTaskToReadyList+0xc0>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3301      	adds	r3, #1
 800d50e:	4a2b      	ldr	r2, [pc, #172]	; (800d5bc <prvAddNewTaskToReadyList+0xc0>)
 800d510:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d512:	4b2b      	ldr	r3, [pc, #172]	; (800d5c0 <prvAddNewTaskToReadyList+0xc4>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d109      	bne.n	800d52e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d51a:	4a29      	ldr	r2, [pc, #164]	; (800d5c0 <prvAddNewTaskToReadyList+0xc4>)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d520:	4b26      	ldr	r3, [pc, #152]	; (800d5bc <prvAddNewTaskToReadyList+0xc0>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b01      	cmp	r3, #1
 800d526:	d110      	bne.n	800d54a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d528:	f000 fc06 	bl	800dd38 <prvInitialiseTaskLists>
 800d52c:	e00d      	b.n	800d54a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d52e:	4b25      	ldr	r3, [pc, #148]	; (800d5c4 <prvAddNewTaskToReadyList+0xc8>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d109      	bne.n	800d54a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d536:	4b22      	ldr	r3, [pc, #136]	; (800d5c0 <prvAddNewTaskToReadyList+0xc4>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d540:	429a      	cmp	r2, r3
 800d542:	d802      	bhi.n	800d54a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d544:	4a1e      	ldr	r2, [pc, #120]	; (800d5c0 <prvAddNewTaskToReadyList+0xc4>)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d54a:	4b1f      	ldr	r3, [pc, #124]	; (800d5c8 <prvAddNewTaskToReadyList+0xcc>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3301      	adds	r3, #1
 800d550:	4a1d      	ldr	r2, [pc, #116]	; (800d5c8 <prvAddNewTaskToReadyList+0xcc>)
 800d552:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d554:	4b1c      	ldr	r3, [pc, #112]	; (800d5c8 <prvAddNewTaskToReadyList+0xcc>)
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d560:	2201      	movs	r2, #1
 800d562:	409a      	lsls	r2, r3
 800d564:	4b19      	ldr	r3, [pc, #100]	; (800d5cc <prvAddNewTaskToReadyList+0xd0>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4313      	orrs	r3, r2
 800d56a:	4a18      	ldr	r2, [pc, #96]	; (800d5cc <prvAddNewTaskToReadyList+0xd0>)
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d572:	4613      	mov	r3, r2
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	4413      	add	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4a15      	ldr	r2, [pc, #84]	; (800d5d0 <prvAddNewTaskToReadyList+0xd4>)
 800d57c:	441a      	add	r2, r3
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	3304      	adds	r3, #4
 800d582:	4619      	mov	r1, r3
 800d584:	4610      	mov	r0, r2
 800d586:	f7ff f834 	bl	800c5f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d58a:	f001 fa23 	bl	800e9d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d58e:	4b0d      	ldr	r3, [pc, #52]	; (800d5c4 <prvAddNewTaskToReadyList+0xc8>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00e      	beq.n	800d5b4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d596:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <prvAddNewTaskToReadyList+0xc4>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d207      	bcs.n	800d5b4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d5a4:	4b0b      	ldr	r3, [pc, #44]	; (800d5d4 <prvAddNewTaskToReadyList+0xd8>)
 800d5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5aa:	601a      	str	r2, [r3, #0]
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5b4:	bf00      	nop
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	2000037c 	.word	0x2000037c
 800d5c0:	2000027c 	.word	0x2000027c
 800d5c4:	20000388 	.word	0x20000388
 800d5c8:	20000398 	.word	0x20000398
 800d5cc:	20000384 	.word	0x20000384
 800d5d0:	20000280 	.word	0x20000280
 800d5d4:	e000ed04 	.word	0xe000ed04

0800d5d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d017      	beq.n	800d61a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d5ea:	4b13      	ldr	r3, [pc, #76]	; (800d638 <vTaskDelay+0x60>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00a      	beq.n	800d608 <vTaskDelay+0x30>
	__asm volatile
 800d5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f6:	f383 8811 	msr	BASEPRI, r3
 800d5fa:	f3bf 8f6f 	isb	sy
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	60bb      	str	r3, [r7, #8]
}
 800d604:	bf00      	nop
 800d606:	e7fe      	b.n	800d606 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d608:	f000 f868 	bl	800d6dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d60c:	2100      	movs	r1, #0
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 fd72 	bl	800e0f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d614:	f000 f870 	bl	800d6f8 <xTaskResumeAll>
 800d618:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d107      	bne.n	800d630 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d620:	4b06      	ldr	r3, [pc, #24]	; (800d63c <vTaskDelay+0x64>)
 800d622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d626:	601a      	str	r2, [r3, #0]
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d630:	bf00      	nop
 800d632:	3710      	adds	r7, #16
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	200003a4 	.word	0x200003a4
 800d63c:	e000ed04 	.word	0xe000ed04

0800d640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800d646:	4b1f      	ldr	r3, [pc, #124]	; (800d6c4 <vTaskStartScheduler+0x84>)
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	2300      	movs	r3, #0
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	2300      	movs	r3, #0
 800d650:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d654:	491c      	ldr	r1, [pc, #112]	; (800d6c8 <vTaskStartScheduler+0x88>)
 800d656:	481d      	ldr	r0, [pc, #116]	; (800d6cc <vTaskStartScheduler+0x8c>)
 800d658:	f7ff fe88 	bl	800d36c <xTaskCreate>
 800d65c:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d102      	bne.n	800d66a <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800d664:	f000 fdae 	bl	800e1c4 <xTimerCreateTimerTask>
 800d668:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d116      	bne.n	800d69e <vTaskStartScheduler+0x5e>
	__asm volatile
 800d670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d674:	f383 8811 	msr	BASEPRI, r3
 800d678:	f3bf 8f6f 	isb	sy
 800d67c:	f3bf 8f4f 	dsb	sy
 800d680:	60bb      	str	r3, [r7, #8]
}
 800d682:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d684:	4b12      	ldr	r3, [pc, #72]	; (800d6d0 <vTaskStartScheduler+0x90>)
 800d686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d68a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d68c:	4b11      	ldr	r3, [pc, #68]	; (800d6d4 <vTaskStartScheduler+0x94>)
 800d68e:	2201      	movs	r2, #1
 800d690:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d692:	4b11      	ldr	r3, [pc, #68]	; (800d6d8 <vTaskStartScheduler+0x98>)
 800d694:	2200      	movs	r2, #0
 800d696:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d698:	f001 f8de 	bl	800e858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d69c:	e00e      	b.n	800d6bc <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6a4:	d10a      	bne.n	800d6bc <vTaskStartScheduler+0x7c>
	__asm volatile
 800d6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6aa:	f383 8811 	msr	BASEPRI, r3
 800d6ae:	f3bf 8f6f 	isb	sy
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	607b      	str	r3, [r7, #4]
}
 800d6b8:	bf00      	nop
 800d6ba:	e7fe      	b.n	800d6ba <vTaskStartScheduler+0x7a>
}
 800d6bc:	bf00      	nop
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	200003a0 	.word	0x200003a0
 800d6c8:	08012f40 	.word	0x08012f40
 800d6cc:	0800dd09 	.word	0x0800dd09
 800d6d0:	2000039c 	.word	0x2000039c
 800d6d4:	20000388 	.word	0x20000388
 800d6d8:	20000380 	.word	0x20000380

0800d6dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d6e0:	4b04      	ldr	r3, [pc, #16]	; (800d6f4 <vTaskSuspendAll+0x18>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	4a03      	ldr	r2, [pc, #12]	; (800d6f4 <vTaskSuspendAll+0x18>)
 800d6e8:	6013      	str	r3, [r2, #0]
}
 800d6ea:	bf00      	nop
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr
 800d6f4:	200003a4 	.word	0x200003a4

0800d6f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d6fe:	2300      	movs	r3, #0
 800d700:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d702:	2300      	movs	r3, #0
 800d704:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d706:	4b41      	ldr	r3, [pc, #260]	; (800d80c <xTaskResumeAll+0x114>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10a      	bne.n	800d724 <xTaskResumeAll+0x2c>
	__asm volatile
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	603b      	str	r3, [r7, #0]
}
 800d720:	bf00      	nop
 800d722:	e7fe      	b.n	800d722 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d724:	f001 f926 	bl	800e974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d728:	4b38      	ldr	r3, [pc, #224]	; (800d80c <xTaskResumeAll+0x114>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	3b01      	subs	r3, #1
 800d72e:	4a37      	ldr	r2, [pc, #220]	; (800d80c <xTaskResumeAll+0x114>)
 800d730:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d732:	4b36      	ldr	r3, [pc, #216]	; (800d80c <xTaskResumeAll+0x114>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d161      	bne.n	800d7fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d73a:	4b35      	ldr	r3, [pc, #212]	; (800d810 <xTaskResumeAll+0x118>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d05d      	beq.n	800d7fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d742:	e02e      	b.n	800d7a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d744:	4b33      	ldr	r3, [pc, #204]	; (800d814 <xTaskResumeAll+0x11c>)
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	3318      	adds	r3, #24
 800d750:	4618      	mov	r0, r3
 800d752:	f7fe ffab 	bl	800c6ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	3304      	adds	r3, #4
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fe ffa6 	bl	800c6ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d764:	2201      	movs	r2, #1
 800d766:	409a      	lsls	r2, r3
 800d768:	4b2b      	ldr	r3, [pc, #172]	; (800d818 <xTaskResumeAll+0x120>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	4a2a      	ldr	r2, [pc, #168]	; (800d818 <xTaskResumeAll+0x120>)
 800d770:	6013      	str	r3, [r2, #0]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d776:	4613      	mov	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4413      	add	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4a27      	ldr	r2, [pc, #156]	; (800d81c <xTaskResumeAll+0x124>)
 800d780:	441a      	add	r2, r3
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3304      	adds	r3, #4
 800d786:	4619      	mov	r1, r3
 800d788:	4610      	mov	r0, r2
 800d78a:	f7fe ff32 	bl	800c5f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d792:	4b23      	ldr	r3, [pc, #140]	; (800d820 <xTaskResumeAll+0x128>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d798:	429a      	cmp	r2, r3
 800d79a:	d302      	bcc.n	800d7a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d79c:	4b21      	ldr	r3, [pc, #132]	; (800d824 <xTaskResumeAll+0x12c>)
 800d79e:	2201      	movs	r2, #1
 800d7a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7a2:	4b1c      	ldr	r3, [pc, #112]	; (800d814 <xTaskResumeAll+0x11c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d1cc      	bne.n	800d744 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d7b0:	f000 fb4e 	bl	800de50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d7b4:	4b1c      	ldr	r3, [pc, #112]	; (800d828 <xTaskResumeAll+0x130>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d010      	beq.n	800d7e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d7c0:	f000 f846 	bl	800d850 <xTaskIncrementTick>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d7ca:	4b16      	ldr	r3, [pc, #88]	; (800d824 <xTaskResumeAll+0x12c>)
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1f1      	bne.n	800d7c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d7dc:	4b12      	ldr	r3, [pc, #72]	; (800d828 <xTaskResumeAll+0x130>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d7e2:	4b10      	ldr	r3, [pc, #64]	; (800d824 <xTaskResumeAll+0x12c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d009      	beq.n	800d7fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	; (800d82c <xTaskResumeAll+0x134>)
 800d7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7fe:	f001 f8e9 	bl	800e9d4 <vPortExitCritical>

	return xAlreadyYielded;
 800d802:	68bb      	ldr	r3, [r7, #8]
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	200003a4 	.word	0x200003a4
 800d810:	2000037c 	.word	0x2000037c
 800d814:	2000033c 	.word	0x2000033c
 800d818:	20000384 	.word	0x20000384
 800d81c:	20000280 	.word	0x20000280
 800d820:	2000027c 	.word	0x2000027c
 800d824:	20000390 	.word	0x20000390
 800d828:	2000038c 	.word	0x2000038c
 800d82c:	e000ed04 	.word	0xe000ed04

0800d830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d836:	4b05      	ldr	r3, [pc, #20]	; (800d84c <xTaskGetTickCount+0x1c>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d83c:	687b      	ldr	r3, [r7, #4]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	20000380 	.word	0x20000380

0800d850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b086      	sub	sp, #24
 800d854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d856:	2300      	movs	r3, #0
 800d858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d85a:	4b51      	ldr	r3, [pc, #324]	; (800d9a0 <xTaskIncrementTick+0x150>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f040 808d 	bne.w	800d97e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800d864:	4b4f      	ldr	r3, [pc, #316]	; (800d9a4 <xTaskIncrementTick+0x154>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	3301      	adds	r3, #1
 800d86a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d86c:	4a4d      	ldr	r2, [pc, #308]	; (800d9a4 <xTaskIncrementTick+0x154>)
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d120      	bne.n	800d8ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d878:	4b4b      	ldr	r3, [pc, #300]	; (800d9a8 <xTaskIncrementTick+0x158>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00a      	beq.n	800d898 <xTaskIncrementTick+0x48>
	__asm volatile
 800d882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d886:	f383 8811 	msr	BASEPRI, r3
 800d88a:	f3bf 8f6f 	isb	sy
 800d88e:	f3bf 8f4f 	dsb	sy
 800d892:	603b      	str	r3, [r7, #0]
}
 800d894:	bf00      	nop
 800d896:	e7fe      	b.n	800d896 <xTaskIncrementTick+0x46>
 800d898:	4b43      	ldr	r3, [pc, #268]	; (800d9a8 <xTaskIncrementTick+0x158>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	60fb      	str	r3, [r7, #12]
 800d89e:	4b43      	ldr	r3, [pc, #268]	; (800d9ac <xTaskIncrementTick+0x15c>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a41      	ldr	r2, [pc, #260]	; (800d9a8 <xTaskIncrementTick+0x158>)
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	4a41      	ldr	r2, [pc, #260]	; (800d9ac <xTaskIncrementTick+0x15c>)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6013      	str	r3, [r2, #0]
 800d8ac:	4b40      	ldr	r3, [pc, #256]	; (800d9b0 <xTaskIncrementTick+0x160>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	4a3f      	ldr	r2, [pc, #252]	; (800d9b0 <xTaskIncrementTick+0x160>)
 800d8b4:	6013      	str	r3, [r2, #0]
 800d8b6:	f000 facb 	bl	800de50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d8ba:	4b3e      	ldr	r3, [pc, #248]	; (800d9b4 <xTaskIncrementTick+0x164>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	693a      	ldr	r2, [r7, #16]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d34d      	bcc.n	800d960 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8c4:	4b38      	ldr	r3, [pc, #224]	; (800d9a8 <xTaskIncrementTick+0x158>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <xTaskIncrementTick+0x82>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e000      	b.n	800d8d4 <xTaskIncrementTick+0x84>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d004      	beq.n	800d8e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8d8:	4b36      	ldr	r3, [pc, #216]	; (800d9b4 <xTaskIncrementTick+0x164>)
 800d8da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8de:	601a      	str	r2, [r3, #0]
					break;
 800d8e0:	e03e      	b.n	800d960 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d8e2:	4b31      	ldr	r3, [pc, #196]	; (800d9a8 <xTaskIncrementTick+0x158>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d203      	bcs.n	800d902 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d8fa:	4a2e      	ldr	r2, [pc, #184]	; (800d9b4 <xTaskIncrementTick+0x164>)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6013      	str	r3, [r2, #0]
						break;
 800d900:	e02e      	b.n	800d960 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	3304      	adds	r3, #4
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fed0 	bl	800c6ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d910:	2b00      	cmp	r3, #0
 800d912:	d004      	beq.n	800d91e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	3318      	adds	r3, #24
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fe fec7 	bl	800c6ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d922:	2201      	movs	r2, #1
 800d924:	409a      	lsls	r2, r3
 800d926:	4b24      	ldr	r3, [pc, #144]	; (800d9b8 <xTaskIncrementTick+0x168>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	4a22      	ldr	r2, [pc, #136]	; (800d9b8 <xTaskIncrementTick+0x168>)
 800d92e:	6013      	str	r3, [r2, #0]
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d934:	4613      	mov	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4413      	add	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	4a1f      	ldr	r2, [pc, #124]	; (800d9bc <xTaskIncrementTick+0x16c>)
 800d93e:	441a      	add	r2, r3
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	3304      	adds	r3, #4
 800d944:	4619      	mov	r1, r3
 800d946:	4610      	mov	r0, r2
 800d948:	f7fe fe53 	bl	800c5f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d950:	4b1b      	ldr	r3, [pc, #108]	; (800d9c0 <xTaskIncrementTick+0x170>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d956:	429a      	cmp	r2, r3
 800d958:	d3b4      	bcc.n	800d8c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d95a:	2301      	movs	r3, #1
 800d95c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d95e:	e7b1      	b.n	800d8c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d960:	4b17      	ldr	r3, [pc, #92]	; (800d9c0 <xTaskIncrementTick+0x170>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d966:	4915      	ldr	r1, [pc, #84]	; (800d9bc <xTaskIncrementTick+0x16c>)
 800d968:	4613      	mov	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	440b      	add	r3, r1
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d907      	bls.n	800d988 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800d978:	2301      	movs	r3, #1
 800d97a:	617b      	str	r3, [r7, #20]
 800d97c:	e004      	b.n	800d988 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d97e:	4b11      	ldr	r3, [pc, #68]	; (800d9c4 <xTaskIncrementTick+0x174>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	3301      	adds	r3, #1
 800d984:	4a0f      	ldr	r2, [pc, #60]	; (800d9c4 <xTaskIncrementTick+0x174>)
 800d986:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d988:	4b0f      	ldr	r3, [pc, #60]	; (800d9c8 <xTaskIncrementTick+0x178>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800d990:	2301      	movs	r3, #1
 800d992:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d994:	697b      	ldr	r3, [r7, #20]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	200003a4 	.word	0x200003a4
 800d9a4:	20000380 	.word	0x20000380
 800d9a8:	20000334 	.word	0x20000334
 800d9ac:	20000338 	.word	0x20000338
 800d9b0:	20000394 	.word	0x20000394
 800d9b4:	2000039c 	.word	0x2000039c
 800d9b8:	20000384 	.word	0x20000384
 800d9bc:	20000280 	.word	0x20000280
 800d9c0:	2000027c 	.word	0x2000027c
 800d9c4:	2000038c 	.word	0x2000038c
 800d9c8:	20000390 	.word	0x20000390

0800d9cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d9d2:	4b27      	ldr	r3, [pc, #156]	; (800da70 <vTaskSwitchContext+0xa4>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d003      	beq.n	800d9e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d9da:	4b26      	ldr	r3, [pc, #152]	; (800da74 <vTaskSwitchContext+0xa8>)
 800d9dc:	2201      	movs	r2, #1
 800d9de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d9e0:	e03f      	b.n	800da62 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d9e2:	4b24      	ldr	r3, [pc, #144]	; (800da74 <vTaskSwitchContext+0xa8>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d9e8:	4b23      	ldr	r3, [pc, #140]	; (800da78 <vTaskSwitchContext+0xac>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	fab3 f383 	clz	r3, r3
 800d9f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d9f6:	7afb      	ldrb	r3, [r7, #11]
 800d9f8:	f1c3 031f 	rsb	r3, r3, #31
 800d9fc:	617b      	str	r3, [r7, #20]
 800d9fe:	491f      	ldr	r1, [pc, #124]	; (800da7c <vTaskSwitchContext+0xb0>)
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	4613      	mov	r3, r2
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	4413      	add	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	440b      	add	r3, r1
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10a      	bne.n	800da28 <vTaskSwitchContext+0x5c>
	__asm volatile
 800da12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da16:	f383 8811 	msr	BASEPRI, r3
 800da1a:	f3bf 8f6f 	isb	sy
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	607b      	str	r3, [r7, #4]
}
 800da24:	bf00      	nop
 800da26:	e7fe      	b.n	800da26 <vTaskSwitchContext+0x5a>
 800da28:	697a      	ldr	r2, [r7, #20]
 800da2a:	4613      	mov	r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4413      	add	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4a12      	ldr	r2, [pc, #72]	; (800da7c <vTaskSwitchContext+0xb0>)
 800da34:	4413      	add	r3, r2
 800da36:	613b      	str	r3, [r7, #16]
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	605a      	str	r2, [r3, #4]
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	685a      	ldr	r2, [r3, #4]
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	3308      	adds	r3, #8
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d104      	bne.n	800da58 <vTaskSwitchContext+0x8c>
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	685a      	ldr	r2, [r3, #4]
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	605a      	str	r2, [r3, #4]
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	4a08      	ldr	r2, [pc, #32]	; (800da80 <vTaskSwitchContext+0xb4>)
 800da60:	6013      	str	r3, [r2, #0]
}
 800da62:	bf00      	nop
 800da64:	371c      	adds	r7, #28
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop
 800da70:	200003a4 	.word	0x200003a4
 800da74:	20000390 	.word	0x20000390
 800da78:	20000384 	.word	0x20000384
 800da7c:	20000280 	.word	0x20000280
 800da80:	2000027c 	.word	0x2000027c

0800da84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d10a      	bne.n	800daaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800da94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	60fb      	str	r3, [r7, #12]
}
 800daa6:	bf00      	nop
 800daa8:	e7fe      	b.n	800daa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800daaa:	4b07      	ldr	r3, [pc, #28]	; (800dac8 <vTaskPlaceOnEventList+0x44>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3318      	adds	r3, #24
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7fe fdc1 	bl	800c63a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dab8:	2101      	movs	r1, #1
 800daba:	6838      	ldr	r0, [r7, #0]
 800dabc:	f000 fb1c 	bl	800e0f8 <prvAddCurrentTaskToDelayedList>
}
 800dac0:	bf00      	nop
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	2000027c 	.word	0x2000027c

0800dacc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b086      	sub	sp, #24
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10a      	bne.n	800daf4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	617b      	str	r3, [r7, #20]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800daf4:	4b0a      	ldr	r3, [pc, #40]	; (800db20 <vTaskPlaceOnEventListRestricted+0x54>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	3318      	adds	r3, #24
 800dafa:	4619      	mov	r1, r3
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7fe fd78 	bl	800c5f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d002      	beq.n	800db0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800db08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800db0e:	6879      	ldr	r1, [r7, #4]
 800db10:	68b8      	ldr	r0, [r7, #8]
 800db12:	f000 faf1 	bl	800e0f8 <prvAddCurrentTaskToDelayedList>
	}
 800db16:	bf00      	nop
 800db18:	3718      	adds	r7, #24
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	2000027c 	.word	0x2000027c

0800db24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10a      	bne.n	800db50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	60fb      	str	r3, [r7, #12]
}
 800db4c:	bf00      	nop
 800db4e:	e7fe      	b.n	800db4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	3318      	adds	r3, #24
 800db54:	4618      	mov	r0, r3
 800db56:	f7fe fda9 	bl	800c6ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db5a:	4b1d      	ldr	r3, [pc, #116]	; (800dbd0 <xTaskRemoveFromEventList+0xac>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d11c      	bne.n	800db9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	3304      	adds	r3, #4
 800db66:	4618      	mov	r0, r3
 800db68:	f7fe fda0 	bl	800c6ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db70:	2201      	movs	r2, #1
 800db72:	409a      	lsls	r2, r3
 800db74:	4b17      	ldr	r3, [pc, #92]	; (800dbd4 <xTaskRemoveFromEventList+0xb0>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4313      	orrs	r3, r2
 800db7a:	4a16      	ldr	r2, [pc, #88]	; (800dbd4 <xTaskRemoveFromEventList+0xb0>)
 800db7c:	6013      	str	r3, [r2, #0]
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db82:	4613      	mov	r3, r2
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	4413      	add	r3, r2
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	4a13      	ldr	r2, [pc, #76]	; (800dbd8 <xTaskRemoveFromEventList+0xb4>)
 800db8c:	441a      	add	r2, r3
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	3304      	adds	r3, #4
 800db92:	4619      	mov	r1, r3
 800db94:	4610      	mov	r0, r2
 800db96:	f7fe fd2c 	bl	800c5f2 <vListInsertEnd>
 800db9a:	e005      	b.n	800dba8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	3318      	adds	r3, #24
 800dba0:	4619      	mov	r1, r3
 800dba2:	480e      	ldr	r0, [pc, #56]	; (800dbdc <xTaskRemoveFromEventList+0xb8>)
 800dba4:	f7fe fd25 	bl	800c5f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbac:	4b0c      	ldr	r3, [pc, #48]	; (800dbe0 <xTaskRemoveFromEventList+0xbc>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d905      	bls.n	800dbc2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dbba:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <xTaskRemoveFromEventList+0xc0>)
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	e001      	b.n	800dbc6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800dbc6:	697b      	ldr	r3, [r7, #20]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3718      	adds	r7, #24
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	200003a4 	.word	0x200003a4
 800dbd4:	20000384 	.word	0x20000384
 800dbd8:	20000280 	.word	0x20000280
 800dbdc:	2000033c 	.word	0x2000033c
 800dbe0:	2000027c 	.word	0x2000027c
 800dbe4:	20000390 	.word	0x20000390

0800dbe8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b085      	sub	sp, #20
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10a      	bne.n	800dc0c <vTaskSetTimeOutState+0x24>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	60fb      	str	r3, [r7, #12]
}
 800dc08:	bf00      	nop
 800dc0a:	e7fe      	b.n	800dc0a <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc0c:	4b06      	ldr	r3, [pc, #24]	; (800dc28 <vTaskSetTimeOutState+0x40>)
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc14:	4b05      	ldr	r3, [pc, #20]	; (800dc2c <vTaskSetTimeOutState+0x44>)
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	605a      	str	r2, [r3, #4]
}
 800dc1c:	bf00      	nop
 800dc1e:	3714      	adds	r7, #20
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr
 800dc28:	20000394 	.word	0x20000394
 800dc2c:	20000380 	.word	0x20000380

0800dc30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b086      	sub	sp, #24
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10a      	bne.n	800dc56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	60fb      	str	r3, [r7, #12]
}
 800dc52:	bf00      	nop
 800dc54:	e7fe      	b.n	800dc54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d10a      	bne.n	800dc72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc60:	f383 8811 	msr	BASEPRI, r3
 800dc64:	f3bf 8f6f 	isb	sy
 800dc68:	f3bf 8f4f 	dsb	sy
 800dc6c:	60bb      	str	r3, [r7, #8]
}
 800dc6e:	bf00      	nop
 800dc70:	e7fe      	b.n	800dc70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dc72:	f000 fe7f 	bl	800e974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dc76:	4b1c      	ldr	r3, [pc, #112]	; (800dce8 <xTaskCheckForTimeOut+0xb8>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc84:	d102      	bne.n	800dc8c <xTaskCheckForTimeOut+0x5c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc86:	2300      	movs	r3, #0
 800dc88:	617b      	str	r3, [r7, #20]
 800dc8a:	e026      	b.n	800dcda <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	4b16      	ldr	r3, [pc, #88]	; (800dcec <xTaskCheckForTimeOut+0xbc>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d007      	beq.n	800dca8 <xTaskCheckForTimeOut+0x78>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	693a      	ldr	r2, [r7, #16]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d302      	bcc.n	800dca8 <xTaskCheckForTimeOut+0x78>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dca2:	2301      	movs	r3, #1
 800dca4:	617b      	str	r3, [r7, #20]
 800dca6:	e018      	b.n	800dcda <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	1ad2      	subs	r2, r2, r3
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d20e      	bcs.n	800dcd6 <xTaskCheckForTimeOut+0xa6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6859      	ldr	r1, [r3, #4]
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	1acb      	subs	r3, r1, r3
 800dcc4:	441a      	add	r2, r3
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f7ff ff8c 	bl	800dbe8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	e001      	b.n	800dcda <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800dcda:	f000 fe7b 	bl	800e9d4 <vPortExitCritical>

	return xReturn;
 800dcde:	697b      	ldr	r3, [r7, #20]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	20000380 	.word	0x20000380
 800dcec:	20000394 	.word	0x20000394

0800dcf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dcf4:	4b03      	ldr	r3, [pc, #12]	; (800dd04 <vTaskMissedYield+0x14>)
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	601a      	str	r2, [r3, #0]
}
 800dcfa:	bf00      	nop
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr
 800dd04:	20000390 	.word	0x20000390

0800dd08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd10:	f000 f852 	bl	800ddb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd14:	4b06      	ldr	r3, [pc, #24]	; (800dd30 <prvIdleTask+0x28>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d9f9      	bls.n	800dd10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dd1c:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <prvIdleTask+0x2c>)
 800dd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dd2c:	e7f0      	b.n	800dd10 <prvIdleTask+0x8>
 800dd2e:	bf00      	nop
 800dd30:	20000280 	.word	0x20000280
 800dd34:	e000ed04 	.word	0xe000ed04

0800dd38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd3e:	2300      	movs	r3, #0
 800dd40:	607b      	str	r3, [r7, #4]
 800dd42:	e00c      	b.n	800dd5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	4613      	mov	r3, r2
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	4413      	add	r3, r2
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	4a12      	ldr	r2, [pc, #72]	; (800dd98 <prvInitialiseTaskLists+0x60>)
 800dd50:	4413      	add	r3, r2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe fc20 	bl	800c598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	607b      	str	r3, [r7, #4]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2b06      	cmp	r3, #6
 800dd62:	d9ef      	bls.n	800dd44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd64:	480d      	ldr	r0, [pc, #52]	; (800dd9c <prvInitialiseTaskLists+0x64>)
 800dd66:	f7fe fc17 	bl	800c598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd6a:	480d      	ldr	r0, [pc, #52]	; (800dda0 <prvInitialiseTaskLists+0x68>)
 800dd6c:	f7fe fc14 	bl	800c598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd70:	480c      	ldr	r0, [pc, #48]	; (800dda4 <prvInitialiseTaskLists+0x6c>)
 800dd72:	f7fe fc11 	bl	800c598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd76:	480c      	ldr	r0, [pc, #48]	; (800dda8 <prvInitialiseTaskLists+0x70>)
 800dd78:	f7fe fc0e 	bl	800c598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd7c:	480b      	ldr	r0, [pc, #44]	; (800ddac <prvInitialiseTaskLists+0x74>)
 800dd7e:	f7fe fc0b 	bl	800c598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd82:	4b0b      	ldr	r3, [pc, #44]	; (800ddb0 <prvInitialiseTaskLists+0x78>)
 800dd84:	4a05      	ldr	r2, [pc, #20]	; (800dd9c <prvInitialiseTaskLists+0x64>)
 800dd86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd88:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <prvInitialiseTaskLists+0x7c>)
 800dd8a:	4a05      	ldr	r2, [pc, #20]	; (800dda0 <prvInitialiseTaskLists+0x68>)
 800dd8c:	601a      	str	r2, [r3, #0]
}
 800dd8e:	bf00      	nop
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20000280 	.word	0x20000280
 800dd9c:	2000030c 	.word	0x2000030c
 800dda0:	20000320 	.word	0x20000320
 800dda4:	2000033c 	.word	0x2000033c
 800dda8:	20000350 	.word	0x20000350
 800ddac:	20000368 	.word	0x20000368
 800ddb0:	20000334 	.word	0x20000334
 800ddb4:	20000338 	.word	0x20000338

0800ddb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddbe:	e028      	b.n	800de12 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800ddc0:	f7ff fc8c 	bl	800d6dc <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800ddc4:	4b17      	ldr	r3, [pc, #92]	; (800de24 <prvCheckTasksWaitingTermination+0x6c>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	bf0c      	ite	eq
 800ddcc:	2301      	moveq	r3, #1
 800ddce:	2300      	movne	r3, #0
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800ddd4:	f7ff fc90 	bl	800d6f8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d119      	bne.n	800de12 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800ddde:	f000 fdc9 	bl	800e974 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800dde2:	4b10      	ldr	r3, [pc, #64]	; (800de24 <prvCheckTasksWaitingTermination+0x6c>)
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	3304      	adds	r3, #4
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fe fc5c 	bl	800c6ac <uxListRemove>
					--uxCurrentNumberOfTasks;
 800ddf4:	4b0c      	ldr	r3, [pc, #48]	; (800de28 <prvCheckTasksWaitingTermination+0x70>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	4a0b      	ldr	r2, [pc, #44]	; (800de28 <prvCheckTasksWaitingTermination+0x70>)
 800ddfc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800ddfe:	4b0b      	ldr	r3, [pc, #44]	; (800de2c <prvCheckTasksWaitingTermination+0x74>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	3b01      	subs	r3, #1
 800de04:	4a09      	ldr	r2, [pc, #36]	; (800de2c <prvCheckTasksWaitingTermination+0x74>)
 800de06:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800de08:	f000 fde4 	bl	800e9d4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800de0c:	6838      	ldr	r0, [r7, #0]
 800de0e:	f000 f80f 	bl	800de30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de12:	4b06      	ldr	r3, [pc, #24]	; (800de2c <prvCheckTasksWaitingTermination+0x74>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1d2      	bne.n	800ddc0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de1a:	bf00      	nop
 800de1c:	bf00      	nop
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	20000350 	.word	0x20000350
 800de28:	2000037c 	.word	0x2000037c
 800de2c:	20000364 	.word	0x20000364

0800de30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3c:	4618      	mov	r0, r3
 800de3e:	f000 ff77 	bl	800ed30 <vPortFree>
			vPortFree( pxTCB );
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 ff74 	bl	800ed30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de48:	bf00      	nop
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de56:	4b0f      	ldr	r3, [pc, #60]	; (800de94 <prvResetNextTaskUnblockTime+0x44>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d101      	bne.n	800de64 <prvResetNextTaskUnblockTime+0x14>
 800de60:	2301      	movs	r3, #1
 800de62:	e000      	b.n	800de66 <prvResetNextTaskUnblockTime+0x16>
 800de64:	2300      	movs	r3, #0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d004      	beq.n	800de74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de6a:	4b0b      	ldr	r3, [pc, #44]	; (800de98 <prvResetNextTaskUnblockTime+0x48>)
 800de6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de72:	e008      	b.n	800de86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800de74:	4b07      	ldr	r3, [pc, #28]	; (800de94 <prvResetNextTaskUnblockTime+0x44>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	4a05      	ldr	r2, [pc, #20]	; (800de98 <prvResetNextTaskUnblockTime+0x48>)
 800de84:	6013      	str	r3, [r2, #0]
}
 800de86:	bf00      	nop
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	20000334 	.word	0x20000334
 800de98:	2000039c 	.word	0x2000039c

0800de9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dea2:	4b0b      	ldr	r3, [pc, #44]	; (800ded0 <xTaskGetSchedulerState+0x34>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d102      	bne.n	800deb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800deaa:	2301      	movs	r3, #1
 800deac:	607b      	str	r3, [r7, #4]
 800deae:	e008      	b.n	800dec2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deb0:	4b08      	ldr	r3, [pc, #32]	; (800ded4 <xTaskGetSchedulerState+0x38>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d102      	bne.n	800debe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800deb8:	2302      	movs	r3, #2
 800deba:	607b      	str	r3, [r7, #4]
 800debc:	e001      	b.n	800dec2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800debe:	2300      	movs	r3, #0
 800dec0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dec2:	687b      	ldr	r3, [r7, #4]
	}
 800dec4:	4618      	mov	r0, r3
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	20000388 	.word	0x20000388
 800ded4:	200003a4 	.word	0x200003a4

0800ded8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d062      	beq.n	800dfb0 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deee:	4b32      	ldr	r3, [pc, #200]	; (800dfb8 <vTaskPriorityInherit+0xe0>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def4:	429a      	cmp	r2, r3
 800def6:	d25b      	bcs.n	800dfb0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	699b      	ldr	r3, [r3, #24]
 800defc:	2b00      	cmp	r3, #0
 800defe:	db06      	blt.n	800df0e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df00:	4b2d      	ldr	r3, [pc, #180]	; (800dfb8 <vTaskPriorityInherit+0xe0>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df06:	f1c3 0207 	rsb	r2, r3, #7
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6959      	ldr	r1, [r3, #20]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df16:	4613      	mov	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4413      	add	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4a27      	ldr	r2, [pc, #156]	; (800dfbc <vTaskPriorityInherit+0xe4>)
 800df20:	4413      	add	r3, r2
 800df22:	4299      	cmp	r1, r3
 800df24:	d101      	bne.n	800df2a <vTaskPriorityInherit+0x52>
 800df26:	2301      	movs	r3, #1
 800df28:	e000      	b.n	800df2c <vTaskPriorityInherit+0x54>
 800df2a:	2300      	movs	r3, #0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d03a      	beq.n	800dfa6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	3304      	adds	r3, #4
 800df34:	4618      	mov	r0, r3
 800df36:	f7fe fbb9 	bl	800c6ac <uxListRemove>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d115      	bne.n	800df6c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df44:	491d      	ldr	r1, [pc, #116]	; (800dfbc <vTaskPriorityInherit+0xe4>)
 800df46:	4613      	mov	r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	4413      	add	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	440b      	add	r3, r1
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10a      	bne.n	800df6c <vTaskPriorityInherit+0x94>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5a:	2201      	movs	r2, #1
 800df5c:	fa02 f303 	lsl.w	r3, r2, r3
 800df60:	43da      	mvns	r2, r3
 800df62:	4b17      	ldr	r3, [pc, #92]	; (800dfc0 <vTaskPriorityInherit+0xe8>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4013      	ands	r3, r2
 800df68:	4a15      	ldr	r2, [pc, #84]	; (800dfc0 <vTaskPriorityInherit+0xe8>)
 800df6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df6c:	4b12      	ldr	r3, [pc, #72]	; (800dfb8 <vTaskPriorityInherit+0xe0>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df7a:	2201      	movs	r2, #1
 800df7c:	409a      	lsls	r2, r3
 800df7e:	4b10      	ldr	r3, [pc, #64]	; (800dfc0 <vTaskPriorityInherit+0xe8>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4313      	orrs	r3, r2
 800df84:	4a0e      	ldr	r2, [pc, #56]	; (800dfc0 <vTaskPriorityInherit+0xe8>)
 800df86:	6013      	str	r3, [r2, #0]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df8c:	4613      	mov	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4413      	add	r3, r2
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	4a09      	ldr	r2, [pc, #36]	; (800dfbc <vTaskPriorityInherit+0xe4>)
 800df96:	441a      	add	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	3304      	adds	r3, #4
 800df9c:	4619      	mov	r1, r3
 800df9e:	4610      	mov	r0, r2
 800dfa0:	f7fe fb27 	bl	800c5f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfa4:	e004      	b.n	800dfb0 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dfa6:	4b04      	ldr	r3, [pc, #16]	; (800dfb8 <vTaskPriorityInherit+0xe0>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800dfb0:	bf00      	nop
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	2000027c 	.word	0x2000027c
 800dfbc:	20000280 	.word	0x20000280
 800dfc0:	20000384 	.word	0x20000384

0800dfc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d06e      	beq.n	800e0b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dfda:	4b3a      	ldr	r3, [pc, #232]	; (800e0c4 <xTaskPriorityDisinherit+0x100>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d00a      	beq.n	800dffa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	60fb      	str	r3, [r7, #12]
}
 800dff6:	bf00      	nop
 800dff8:	e7fe      	b.n	800dff8 <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10a      	bne.n	800e018 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	60bb      	str	r3, [r7, #8]
}
 800e014:	bf00      	nop
 800e016:	e7fe      	b.n	800e016 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e01c:	1e5a      	subs	r2, r3, #1
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d044      	beq.n	800e0b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e032:	2b00      	cmp	r3, #0
 800e034:	d140      	bne.n	800e0b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	3304      	adds	r3, #4
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe fb36 	bl	800c6ac <uxListRemove>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d115      	bne.n	800e072 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e04a:	491f      	ldr	r1, [pc, #124]	; (800e0c8 <xTaskPriorityDisinherit+0x104>)
 800e04c:	4613      	mov	r3, r2
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4413      	add	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	440b      	add	r3, r1
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10a      	bne.n	800e072 <xTaskPriorityDisinherit+0xae>
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e060:	2201      	movs	r2, #1
 800e062:	fa02 f303 	lsl.w	r3, r2, r3
 800e066:	43da      	mvns	r2, r3
 800e068:	4b18      	ldr	r3, [pc, #96]	; (800e0cc <xTaskPriorityDisinherit+0x108>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4013      	ands	r3, r2
 800e06e:	4a17      	ldr	r2, [pc, #92]	; (800e0cc <xTaskPriorityDisinherit+0x108>)
 800e070:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07e:	f1c3 0207 	rsb	r2, r3, #7
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08a:	2201      	movs	r2, #1
 800e08c:	409a      	lsls	r2, r3
 800e08e:	4b0f      	ldr	r3, [pc, #60]	; (800e0cc <xTaskPriorityDisinherit+0x108>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4313      	orrs	r3, r2
 800e094:	4a0d      	ldr	r2, [pc, #52]	; (800e0cc <xTaskPriorityDisinherit+0x108>)
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e09c:	4613      	mov	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	4413      	add	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	4a08      	ldr	r2, [pc, #32]	; (800e0c8 <xTaskPriorityDisinherit+0x104>)
 800e0a6:	441a      	add	r2, r3
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	4610      	mov	r0, r2
 800e0b0:	f7fe fa9f 	bl	800c5f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0b8:	697b      	ldr	r3, [r7, #20]
	}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3718      	adds	r7, #24
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	2000027c 	.word	0x2000027c
 800e0c8:	20000280 	.word	0x20000280
 800e0cc:	20000384 	.word	0x20000384

0800e0d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800e0d0:	b480      	push	{r7}
 800e0d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e0d4:	4b07      	ldr	r3, [pc, #28]	; (800e0f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d004      	beq.n	800e0e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e0dc:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0e2:	3201      	adds	r2, #1
 800e0e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e0e6:	4b03      	ldr	r3, [pc, #12]	; (800e0f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
	}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr
 800e0f4:	2000027c 	.word	0x2000027c

0800e0f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e102:	4b29      	ldr	r3, [pc, #164]	; (800e1a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e108:	4b28      	ldr	r3, [pc, #160]	; (800e1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	3304      	adds	r3, #4
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe facc 	bl	800c6ac <uxListRemove>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d10b      	bne.n	800e132 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e11a:	4b24      	ldr	r3, [pc, #144]	; (800e1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e120:	2201      	movs	r2, #1
 800e122:	fa02 f303 	lsl.w	r3, r2, r3
 800e126:	43da      	mvns	r2, r3
 800e128:	4b21      	ldr	r3, [pc, #132]	; (800e1b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4013      	ands	r3, r2
 800e12e:	4a20      	ldr	r2, [pc, #128]	; (800e1b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e130:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e138:	d10a      	bne.n	800e150 <prvAddCurrentTaskToDelayedList+0x58>
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d007      	beq.n	800e150 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e140:	4b1a      	ldr	r3, [pc, #104]	; (800e1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	3304      	adds	r3, #4
 800e146:	4619      	mov	r1, r3
 800e148:	481a      	ldr	r0, [pc, #104]	; (800e1b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e14a:	f7fe fa52 	bl	800c5f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e14e:	e026      	b.n	800e19e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4413      	add	r3, r2
 800e156:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e158:	4b14      	ldr	r3, [pc, #80]	; (800e1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e160:	68ba      	ldr	r2, [r7, #8]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	429a      	cmp	r2, r3
 800e166:	d209      	bcs.n	800e17c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e168:	4b13      	ldr	r3, [pc, #76]	; (800e1b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	4b0f      	ldr	r3, [pc, #60]	; (800e1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	3304      	adds	r3, #4
 800e172:	4619      	mov	r1, r3
 800e174:	4610      	mov	r0, r2
 800e176:	f7fe fa60 	bl	800c63a <vListInsert>
}
 800e17a:	e010      	b.n	800e19e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e17c:	4b0f      	ldr	r3, [pc, #60]	; (800e1bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	4b0a      	ldr	r3, [pc, #40]	; (800e1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	3304      	adds	r3, #4
 800e186:	4619      	mov	r1, r3
 800e188:	4610      	mov	r0, r2
 800e18a:	f7fe fa56 	bl	800c63a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e18e:	4b0c      	ldr	r3, [pc, #48]	; (800e1c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	429a      	cmp	r2, r3
 800e196:	d202      	bcs.n	800e19e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e198:	4a09      	ldr	r2, [pc, #36]	; (800e1c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	6013      	str	r3, [r2, #0]
}
 800e19e:	bf00      	nop
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	20000380 	.word	0x20000380
 800e1ac:	2000027c 	.word	0x2000027c
 800e1b0:	20000384 	.word	0x20000384
 800e1b4:	20000368 	.word	0x20000368
 800e1b8:	20000338 	.word	0x20000338
 800e1bc:	20000334 	.word	0x20000334
 800e1c0:	2000039c 	.word	0x2000039c

0800e1c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e1ce:	f000 fa95 	bl	800e6fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e1d2:	4b11      	ldr	r3, [pc, #68]	; (800e218 <xTimerCreateTimerTask+0x54>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00b      	beq.n	800e1f2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800e1da:	4b10      	ldr	r3, [pc, #64]	; (800e21c <xTimerCreateTimerTask+0x58>)
 800e1dc:	9301      	str	r3, [sp, #4]
 800e1de:	2303      	movs	r3, #3
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1e8:	490d      	ldr	r1, [pc, #52]	; (800e220 <xTimerCreateTimerTask+0x5c>)
 800e1ea:	480e      	ldr	r0, [pc, #56]	; (800e224 <xTimerCreateTimerTask+0x60>)
 800e1ec:	f7ff f8be 	bl	800d36c <xTaskCreate>
 800e1f0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10a      	bne.n	800e20e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	603b      	str	r3, [r7, #0]
}
 800e20a:	bf00      	nop
 800e20c:	e7fe      	b.n	800e20c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800e20e:	687b      	ldr	r3, [r7, #4]
}
 800e210:	4618      	mov	r0, r3
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	200003d8 	.word	0x200003d8
 800e21c:	200003dc 	.word	0x200003dc
 800e220:	08012f48 	.word	0x08012f48
 800e224:	0800e345 	.word	0x0800e345

0800e228 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08a      	sub	sp, #40	; 0x28
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	607a      	str	r2, [r7, #4]
 800e234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e236:	2300      	movs	r3, #0
 800e238:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10a      	bne.n	800e256 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	623b      	str	r3, [r7, #32]
}
 800e252:	bf00      	nop
 800e254:	e7fe      	b.n	800e254 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e256:	4b1a      	ldr	r3, [pc, #104]	; (800e2c0 <xTimerGenericCommand+0x98>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d02a      	beq.n	800e2b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	2b05      	cmp	r3, #5
 800e26e:	dc18      	bgt.n	800e2a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e270:	f7ff fe14 	bl	800de9c <xTaskGetSchedulerState>
 800e274:	4603      	mov	r3, r0
 800e276:	2b02      	cmp	r3, #2
 800e278:	d109      	bne.n	800e28e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e27a:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <xTimerGenericCommand+0x98>)
 800e27c:	6818      	ldr	r0, [r3, #0]
 800e27e:	f107 0114 	add.w	r1, r7, #20
 800e282:	2300      	movs	r3, #0
 800e284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e286:	f7fe fb01 	bl	800c88c <xQueueGenericSend>
 800e28a:	6278      	str	r0, [r7, #36]	; 0x24
 800e28c:	e012      	b.n	800e2b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e28e:	4b0c      	ldr	r3, [pc, #48]	; (800e2c0 <xTimerGenericCommand+0x98>)
 800e290:	6818      	ldr	r0, [r3, #0]
 800e292:	f107 0114 	add.w	r1, r7, #20
 800e296:	2300      	movs	r3, #0
 800e298:	2200      	movs	r2, #0
 800e29a:	f7fe faf7 	bl	800c88c <xQueueGenericSend>
 800e29e:	6278      	str	r0, [r7, #36]	; 0x24
 800e2a0:	e008      	b.n	800e2b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e2a2:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <xTimerGenericCommand+0x98>)
 800e2a4:	6818      	ldr	r0, [r3, #0]
 800e2a6:	f107 0114 	add.w	r1, r7, #20
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	f7fe fbeb 	bl	800ca88 <xQueueGenericSendFromISR>
 800e2b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3728      	adds	r7, #40	; 0x28
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	200003d8 	.word	0x200003d8

0800e2c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b088      	sub	sp, #32
 800e2c8:	af02      	add	r7, sp, #8
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2ce:	4b1c      	ldr	r3, [pc, #112]	; (800e340 <prvProcessExpiredTimer+0x7c>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	3304      	adds	r3, #4
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7fe f9e5 	bl	800c6ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	69db      	ldr	r3, [r3, #28]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d122      	bne.n	800e330 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	699a      	ldr	r2, [r3, #24]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	18d1      	adds	r1, r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	6978      	ldr	r0, [r7, #20]
 800e2f8:	f000 f8c8 	bl	800e48c <prvInsertTimerInActiveList>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d016      	beq.n	800e330 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e302:	2300      	movs	r3, #0
 800e304:	9300      	str	r3, [sp, #0]
 800e306:	2300      	movs	r3, #0
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	2100      	movs	r1, #0
 800e30c:	6978      	ldr	r0, [r7, #20]
 800e30e:	f7ff ff8b 	bl	800e228 <xTimerGenericCommand>
 800e312:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10a      	bne.n	800e330 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	60fb      	str	r3, [r7, #12]
}
 800e32c:	bf00      	nop
 800e32e:	e7fe      	b.n	800e32e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e334:	6978      	ldr	r0, [r7, #20]
 800e336:	4798      	blx	r3
}
 800e338:	bf00      	nop
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	200003d0 	.word	0x200003d0

0800e344 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e34c:	f107 0308 	add.w	r3, r7, #8
 800e350:	4618      	mov	r0, r3
 800e352:	f000 f857 	bl	800e404 <prvGetNextExpireTime>
 800e356:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	4619      	mov	r1, r3
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	f000 f803 	bl	800e368 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e362:	f000 f8d5 	bl	800e510 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e366:	e7f1      	b.n	800e34c <prvTimerTask+0x8>

0800e368 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e372:	f7ff f9b3 	bl	800d6dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e376:	f107 0308 	add.w	r3, r7, #8
 800e37a:	4618      	mov	r0, r3
 800e37c:	f000 f866 	bl	800e44c <prvSampleTimeNow>
 800e380:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d130      	bne.n	800e3ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d10a      	bne.n	800e3a4 <prvProcessTimerOrBlockTask+0x3c>
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	429a      	cmp	r2, r3
 800e394:	d806      	bhi.n	800e3a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e396:	f7ff f9af 	bl	800d6f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e39a:	68f9      	ldr	r1, [r7, #12]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7ff ff91 	bl	800e2c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e3a2:	e024      	b.n	800e3ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d008      	beq.n	800e3bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e3aa:	4b13      	ldr	r3, [pc, #76]	; (800e3f8 <prvProcessTimerOrBlockTask+0x90>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	bf0c      	ite	eq
 800e3b4:	2301      	moveq	r3, #1
 800e3b6:	2300      	movne	r3, #0
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e3bc:	4b0f      	ldr	r3, [pc, #60]	; (800e3fc <prvProcessTimerOrBlockTask+0x94>)
 800e3be:	6818      	ldr	r0, [r3, #0]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	683a      	ldr	r2, [r7, #0]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	f7fe ff9b 	bl	800d304 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e3ce:	f7ff f993 	bl	800d6f8 <xTaskResumeAll>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d10a      	bne.n	800e3ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e3d8:	4b09      	ldr	r3, [pc, #36]	; (800e400 <prvProcessTimerOrBlockTask+0x98>)
 800e3da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3de:	601a      	str	r2, [r3, #0]
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	f3bf 8f6f 	isb	sy
}
 800e3e8:	e001      	b.n	800e3ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e3ea:	f7ff f985 	bl	800d6f8 <xTaskResumeAll>
}
 800e3ee:	bf00      	nop
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	200003d4 	.word	0x200003d4
 800e3fc:	200003d8 	.word	0x200003d8
 800e400:	e000ed04 	.word	0xe000ed04

0800e404 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e40c:	4b0e      	ldr	r3, [pc, #56]	; (800e448 <prvGetNextExpireTime+0x44>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	bf0c      	ite	eq
 800e416:	2301      	moveq	r3, #1
 800e418:	2300      	movne	r3, #0
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	461a      	mov	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d105      	bne.n	800e436 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e42a:	4b07      	ldr	r3, [pc, #28]	; (800e448 <prvGetNextExpireTime+0x44>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	60fb      	str	r3, [r7, #12]
 800e434:	e001      	b.n	800e43a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e43a:	68fb      	ldr	r3, [r7, #12]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3714      	adds	r7, #20
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	200003d0 	.word	0x200003d0

0800e44c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e454:	f7ff f9ec 	bl	800d830 <xTaskGetTickCount>
 800e458:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e45a:	4b0b      	ldr	r3, [pc, #44]	; (800e488 <prvSampleTimeNow+0x3c>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	429a      	cmp	r2, r3
 800e462:	d205      	bcs.n	800e470 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e464:	f000 f8e8 	bl	800e638 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2201      	movs	r2, #1
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	e002      	b.n	800e476 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e476:	4a04      	ldr	r2, [pc, #16]	; (800e488 <prvSampleTimeNow+0x3c>)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e47c:	68fb      	ldr	r3, [r7, #12]
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	200003e0 	.word	0x200003e0

0800e48c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b086      	sub	sp, #24
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
 800e498:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e49a:	2300      	movs	r3, #0
 800e49c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	68ba      	ldr	r2, [r7, #8]
 800e4a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	68fa      	ldr	r2, [r7, #12]
 800e4a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d812      	bhi.n	800e4d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	1ad2      	subs	r2, r2, r3
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d302      	bcc.n	800e4c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	617b      	str	r3, [r7, #20]
 800e4c4:	e01b      	b.n	800e4fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e4c6:	4b10      	ldr	r3, [pc, #64]	; (800e508 <prvInsertTimerInActiveList+0x7c>)
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	4610      	mov	r0, r2
 800e4d2:	f7fe f8b2 	bl	800c63a <vListInsert>
 800e4d6:	e012      	b.n	800e4fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d206      	bcs.n	800e4ee <prvInsertTimerInActiveList+0x62>
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d302      	bcc.n	800e4ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	617b      	str	r3, [r7, #20]
 800e4ec:	e007      	b.n	800e4fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e4ee:	4b07      	ldr	r3, [pc, #28]	; (800e50c <prvInsertTimerInActiveList+0x80>)
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3304      	adds	r3, #4
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	4610      	mov	r0, r2
 800e4fa:	f7fe f89e 	bl	800c63a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e4fe:	697b      	ldr	r3, [r7, #20]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	200003d4 	.word	0x200003d4
 800e50c:	200003d0 	.word	0x200003d0

0800e510 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08c      	sub	sp, #48	; 0x30
 800e514:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e516:	e07c      	b.n	800e612 <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	db78      	blt.n	800e610 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	695b      	ldr	r3, [r3, #20]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d004      	beq.n	800e534 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	3304      	adds	r3, #4
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe f8bc 	bl	800c6ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e534:	1d3b      	adds	r3, r7, #4
 800e536:	4618      	mov	r0, r3
 800e538:	f7ff ff88 	bl	800e44c <prvSampleTimeNow>
 800e53c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	2b09      	cmp	r3, #9
 800e542:	d866      	bhi.n	800e612 <prvProcessReceivedCommands+0x102>
 800e544:	a201      	add	r2, pc, #4	; (adr r2, 800e54c <prvProcessReceivedCommands+0x3c>)
 800e546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54a:	bf00      	nop
 800e54c:	0800e575 	.word	0x0800e575
 800e550:	0800e575 	.word	0x0800e575
 800e554:	0800e575 	.word	0x0800e575
 800e558:	0800e613 	.word	0x0800e613
 800e55c:	0800e5d1 	.word	0x0800e5d1
 800e560:	0800e609 	.word	0x0800e609
 800e564:	0800e575 	.word	0x0800e575
 800e568:	0800e575 	.word	0x0800e575
 800e56c:	0800e613 	.word	0x0800e613
 800e570:	0800e5d1 	.word	0x0800e5d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e578:	699b      	ldr	r3, [r3, #24]
 800e57a:	18d1      	adds	r1, r2, r3
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	6a3a      	ldr	r2, [r7, #32]
 800e580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e582:	f7ff ff83 	bl	800e48c <prvInsertTimerInActiveList>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d042      	beq.n	800e612 <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e592:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	69db      	ldr	r3, [r3, #28]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d13a      	bne.n	800e612 <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a0:	699b      	ldr	r3, [r3, #24]
 800e5a2:	441a      	add	r2, r3
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	9300      	str	r3, [sp, #0]
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5ae:	f7ff fe3b 	bl	800e228 <xTimerGenericCommand>
 800e5b2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d12b      	bne.n	800e612 <prvProcessReceivedCommands+0x102>
	__asm volatile
 800e5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5be:	f383 8811 	msr	BASEPRI, r3
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	f3bf 8f4f 	dsb	sy
 800e5ca:	61bb      	str	r3, [r7, #24]
}
 800e5cc:	bf00      	nop
 800e5ce:	e7fe      	b.n	800e5ce <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	699b      	ldr	r3, [r3, #24]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10a      	bne.n	800e5f4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	617b      	str	r3, [r7, #20]
}
 800e5f0:	bf00      	nop
 800e5f2:	e7fe      	b.n	800e5f2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f6:	699a      	ldr	r2, [r3, #24]
 800e5f8:	6a3b      	ldr	r3, [r7, #32]
 800e5fa:	18d1      	adds	r1, r2, r3
 800e5fc:	6a3b      	ldr	r3, [r7, #32]
 800e5fe:	6a3a      	ldr	r2, [r7, #32]
 800e600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e602:	f7ff ff43 	bl	800e48c <prvInsertTimerInActiveList>
					break;
 800e606:	e004      	b.n	800e612 <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800e608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e60a:	f000 fb91 	bl	800ed30 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e60e:	e000      	b.n	800e612 <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e612:	4b08      	ldr	r3, [pc, #32]	; (800e634 <prvProcessReceivedCommands+0x124>)
 800e614:	6818      	ldr	r0, [r3, #0]
 800e616:	f107 0108 	add.w	r1, r7, #8
 800e61a:	2300      	movs	r3, #0
 800e61c:	2200      	movs	r2, #0
 800e61e:	f7fe fb59 	bl	800ccd4 <xQueueGenericReceive>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	f47f af77 	bne.w	800e518 <prvProcessReceivedCommands+0x8>
	}
}
 800e62a:	bf00      	nop
 800e62c:	bf00      	nop
 800e62e:	3728      	adds	r7, #40	; 0x28
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	200003d8 	.word	0x200003d8

0800e638 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b088      	sub	sp, #32
 800e63c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e63e:	e045      	b.n	800e6cc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e640:	4b2c      	ldr	r3, [pc, #176]	; (800e6f4 <prvSwitchTimerLists+0xbc>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e64a:	4b2a      	ldr	r3, [pc, #168]	; (800e6f4 <prvSwitchTimerLists+0xbc>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	3304      	adds	r3, #4
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fe f827 	bl	800c6ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	69db      	ldr	r3, [r3, #28]
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d12e      	bne.n	800e6cc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	699b      	ldr	r3, [r3, #24]
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	4413      	add	r3, r2
 800e676:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e678:	68ba      	ldr	r2, [r7, #8]
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d90e      	bls.n	800e69e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e68c:	4b19      	ldr	r3, [pc, #100]	; (800e6f4 <prvSwitchTimerLists+0xbc>)
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	3304      	adds	r3, #4
 800e694:	4619      	mov	r1, r3
 800e696:	4610      	mov	r0, r2
 800e698:	f7fd ffcf 	bl	800c63a <vListInsert>
 800e69c:	e016      	b.n	800e6cc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e69e:	2300      	movs	r3, #0
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	693a      	ldr	r2, [r7, #16]
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f7ff fdbd 	bl	800e228 <xTimerGenericCommand>
 800e6ae:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d10a      	bne.n	800e6cc <prvSwitchTimerLists+0x94>
	__asm volatile
 800e6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ba:	f383 8811 	msr	BASEPRI, r3
 800e6be:	f3bf 8f6f 	isb	sy
 800e6c2:	f3bf 8f4f 	dsb	sy
 800e6c6:	603b      	str	r3, [r7, #0]
}
 800e6c8:	bf00      	nop
 800e6ca:	e7fe      	b.n	800e6ca <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e6cc:	4b09      	ldr	r3, [pc, #36]	; (800e6f4 <prvSwitchTimerLists+0xbc>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d1b4      	bne.n	800e640 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e6d6:	4b07      	ldr	r3, [pc, #28]	; (800e6f4 <prvSwitchTimerLists+0xbc>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e6dc:	4b06      	ldr	r3, [pc, #24]	; (800e6f8 <prvSwitchTimerLists+0xc0>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a04      	ldr	r2, [pc, #16]	; (800e6f4 <prvSwitchTimerLists+0xbc>)
 800e6e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e6e4:	4a04      	ldr	r2, [pc, #16]	; (800e6f8 <prvSwitchTimerLists+0xc0>)
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	6013      	str	r3, [r2, #0]
}
 800e6ea:	bf00      	nop
 800e6ec:	3718      	adds	r7, #24
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	200003d0 	.word	0x200003d0
 800e6f8:	200003d4 	.word	0x200003d4

0800e6fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e700:	f000 f938 	bl	800e974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e704:	4b12      	ldr	r3, [pc, #72]	; (800e750 <prvCheckForValidListAndQueue+0x54>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d11d      	bne.n	800e748 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800e70c:	4811      	ldr	r0, [pc, #68]	; (800e754 <prvCheckForValidListAndQueue+0x58>)
 800e70e:	f7fd ff43 	bl	800c598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e712:	4811      	ldr	r0, [pc, #68]	; (800e758 <prvCheckForValidListAndQueue+0x5c>)
 800e714:	f7fd ff40 	bl	800c598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e718:	4b10      	ldr	r3, [pc, #64]	; (800e75c <prvCheckForValidListAndQueue+0x60>)
 800e71a:	4a0e      	ldr	r2, [pc, #56]	; (800e754 <prvCheckForValidListAndQueue+0x58>)
 800e71c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e71e:	4b10      	ldr	r3, [pc, #64]	; (800e760 <prvCheckForValidListAndQueue+0x64>)
 800e720:	4a0d      	ldr	r2, [pc, #52]	; (800e758 <prvCheckForValidListAndQueue+0x5c>)
 800e722:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e724:	2200      	movs	r2, #0
 800e726:	210c      	movs	r1, #12
 800e728:	200a      	movs	r0, #10
 800e72a:	f7fe f851 	bl	800c7d0 <xQueueGenericCreate>
 800e72e:	4603      	mov	r3, r0
 800e730:	4a07      	ldr	r2, [pc, #28]	; (800e750 <prvCheckForValidListAndQueue+0x54>)
 800e732:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e734:	4b06      	ldr	r3, [pc, #24]	; (800e750 <prvCheckForValidListAndQueue+0x54>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d005      	beq.n	800e748 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e73c:	4b04      	ldr	r3, [pc, #16]	; (800e750 <prvCheckForValidListAndQueue+0x54>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4908      	ldr	r1, [pc, #32]	; (800e764 <prvCheckForValidListAndQueue+0x68>)
 800e742:	4618      	mov	r0, r3
 800e744:	f7fe fd8a 	bl	800d25c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e748:	f000 f944 	bl	800e9d4 <vPortExitCritical>
}
 800e74c:	bf00      	nop
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	200003d8 	.word	0x200003d8
 800e754:	200003a8 	.word	0x200003a8
 800e758:	200003bc 	.word	0x200003bc
 800e75c:	200003d0 	.word	0x200003d0
 800e760:	200003d4 	.word	0x200003d4
 800e764:	08012f50 	.word	0x08012f50

0800e768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	3b04      	subs	r3, #4
 800e778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	3b04      	subs	r3, #4
 800e786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	f023 0201 	bic.w	r2, r3, #1
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	3b04      	subs	r3, #4
 800e796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e798:	4a0c      	ldr	r2, [pc, #48]	; (800e7cc <pxPortInitialiseStack+0x64>)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	3b14      	subs	r3, #20
 800e7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	3b04      	subs	r3, #4
 800e7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f06f 0202 	mvn.w	r2, #2
 800e7b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	3b20      	subs	r3, #32
 800e7bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e7be:	68fb      	ldr	r3, [r7, #12]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	0800e7d1 	.word	0x0800e7d1

0800e7d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7d6:	4b0d      	ldr	r3, [pc, #52]	; (800e80c <prvTaskExitError+0x3c>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7de:	d00a      	beq.n	800e7f6 <prvTaskExitError+0x26>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	607b      	str	r3, [r7, #4]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <prvTaskExitError+0x24>
	__asm volatile
 800e7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	603b      	str	r3, [r7, #0]
}
 800e808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 800e80a:	e7fe      	b.n	800e80a <prvTaskExitError+0x3a>
 800e80c:	20000014 	.word	0x20000014

0800e810 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e810:	4b07      	ldr	r3, [pc, #28]	; (800e830 <pxCurrentTCBConst2>)
 800e812:	6819      	ldr	r1, [r3, #0]
 800e814:	6808      	ldr	r0, [r1, #0]
 800e816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81a:	f380 8809 	msr	PSP, r0
 800e81e:	f3bf 8f6f 	isb	sy
 800e822:	f04f 0000 	mov.w	r0, #0
 800e826:	f380 8811 	msr	BASEPRI, r0
 800e82a:	4770      	bx	lr
 800e82c:	f3af 8000 	nop.w

0800e830 <pxCurrentTCBConst2>:
 800e830:	2000027c 	.word	0x2000027c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e834:	bf00      	nop
 800e836:	bf00      	nop

0800e838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800e838:	4806      	ldr	r0, [pc, #24]	; (800e854 <prvPortStartFirstTask+0x1c>)
 800e83a:	6800      	ldr	r0, [r0, #0]
 800e83c:	6800      	ldr	r0, [r0, #0]
 800e83e:	f380 8808 	msr	MSP, r0
 800e842:	b662      	cpsie	i
 800e844:	b661      	cpsie	f
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	f3bf 8f6f 	isb	sy
 800e84e:	df00      	svc	0
 800e850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e852:	bf00      	nop
 800e854:	e000ed08 	.word	0xe000ed08

0800e858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e85e:	4b3c      	ldr	r3, [pc, #240]	; (800e950 <xPortStartScheduler+0xf8>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a3c      	ldr	r2, [pc, #240]	; (800e954 <xPortStartScheduler+0xfc>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d10a      	bne.n	800e87e <xPortStartScheduler+0x26>
	__asm volatile
 800e868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86c:	f383 8811 	msr	BASEPRI, r3
 800e870:	f3bf 8f6f 	isb	sy
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	613b      	str	r3, [r7, #16]
}
 800e87a:	bf00      	nop
 800e87c:	e7fe      	b.n	800e87c <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e87e:	4b34      	ldr	r3, [pc, #208]	; (800e950 <xPortStartScheduler+0xf8>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4a35      	ldr	r2, [pc, #212]	; (800e958 <xPortStartScheduler+0x100>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d10a      	bne.n	800e89e <xPortStartScheduler+0x46>
	__asm volatile
 800e888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88c:	f383 8811 	msr	BASEPRI, r3
 800e890:	f3bf 8f6f 	isb	sy
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	60fb      	str	r3, [r7, #12]
}
 800e89a:	bf00      	nop
 800e89c:	e7fe      	b.n	800e89c <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e89e:	4b2f      	ldr	r3, [pc, #188]	; (800e95c <xPortStartScheduler+0x104>)
 800e8a0:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	22ff      	movs	r2, #255	; 0xff
 800e8ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8b8:	79fb      	ldrb	r3, [r7, #7]
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	4b27      	ldr	r3, [pc, #156]	; (800e960 <xPortStartScheduler+0x108>)
 800e8c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8c6:	4b27      	ldr	r3, [pc, #156]	; (800e964 <xPortStartScheduler+0x10c>)
 800e8c8:	2207      	movs	r2, #7
 800e8ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8cc:	e009      	b.n	800e8e2 <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e8ce:	4b25      	ldr	r3, [pc, #148]	; (800e964 <xPortStartScheduler+0x10c>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	4a23      	ldr	r2, [pc, #140]	; (800e964 <xPortStartScheduler+0x10c>)
 800e8d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8d8:	79fb      	ldrb	r3, [r7, #7]
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	005b      	lsls	r3, r3, #1
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8e2:	79fb      	ldrb	r3, [r7, #7]
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ea:	2b80      	cmp	r3, #128	; 0x80
 800e8ec:	d0ef      	beq.n	800e8ce <xPortStartScheduler+0x76>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e8ee:	4b1d      	ldr	r3, [pc, #116]	; (800e964 <xPortStartScheduler+0x10c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	021b      	lsls	r3, r3, #8
 800e8f4:	4a1b      	ldr	r2, [pc, #108]	; (800e964 <xPortStartScheduler+0x10c>)
 800e8f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e8f8:	4b1a      	ldr	r3, [pc, #104]	; (800e964 <xPortStartScheduler+0x10c>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e900:	4a18      	ldr	r2, [pc, #96]	; (800e964 <xPortStartScheduler+0x10c>)
 800e902:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	b2da      	uxtb	r2, r3
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e90c:	4b16      	ldr	r3, [pc, #88]	; (800e968 <xPortStartScheduler+0x110>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a15      	ldr	r2, [pc, #84]	; (800e968 <xPortStartScheduler+0x110>)
 800e912:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e916:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e918:	4b13      	ldr	r3, [pc, #76]	; (800e968 <xPortStartScheduler+0x110>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a12      	ldr	r2, [pc, #72]	; (800e968 <xPortStartScheduler+0x110>)
 800e91e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e922:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e924:	f000 f8da 	bl	800eadc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e928:	4b10      	ldr	r3, [pc, #64]	; (800e96c <xPortStartScheduler+0x114>)
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e92e:	f000 f8f1 	bl	800eb14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e932:	4b0f      	ldr	r3, [pc, #60]	; (800e970 <xPortStartScheduler+0x118>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a0e      	ldr	r2, [pc, #56]	; (800e970 <xPortStartScheduler+0x118>)
 800e938:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e93c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e93e:	f7ff ff7b 	bl	800e838 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800e942:	f7ff ff45 	bl	800e7d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3718      	adds	r7, #24
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	e000ed00 	.word	0xe000ed00
 800e954:	410fc271 	.word	0x410fc271
 800e958:	410fc270 	.word	0x410fc270
 800e95c:	e000e400 	.word	0xe000e400
 800e960:	200003e4 	.word	0x200003e4
 800e964:	200003e8 	.word	0x200003e8
 800e968:	e000ed20 	.word	0xe000ed20
 800e96c:	20000014 	.word	0x20000014
 800e970:	e000ef34 	.word	0xe000ef34

0800e974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
	__asm volatile
 800e97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97e:	f383 8811 	msr	BASEPRI, r3
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	f3bf 8f4f 	dsb	sy
 800e98a:	607b      	str	r3, [r7, #4]
}
 800e98c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e98e:	4b0f      	ldr	r3, [pc, #60]	; (800e9cc <vPortEnterCritical+0x58>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3301      	adds	r3, #1
 800e994:	4a0d      	ldr	r2, [pc, #52]	; (800e9cc <vPortEnterCritical+0x58>)
 800e996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e998:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <vPortEnterCritical+0x58>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d10f      	bne.n	800e9c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9a0:	4b0b      	ldr	r3, [pc, #44]	; (800e9d0 <vPortEnterCritical+0x5c>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00a      	beq.n	800e9c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	603b      	str	r3, [r7, #0]
}
 800e9bc:	bf00      	nop
 800e9be:	e7fe      	b.n	800e9be <vPortEnterCritical+0x4a>
	}
}
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr
 800e9cc:	20000014 	.word	0x20000014
 800e9d0:	e000ed04 	.word	0xe000ed04

0800e9d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e9da:	4b12      	ldr	r3, [pc, #72]	; (800ea24 <vPortExitCritical+0x50>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d10a      	bne.n	800e9f8 <vPortExitCritical+0x24>
	__asm volatile
 800e9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	607b      	str	r3, [r7, #4]
}
 800e9f4:	bf00      	nop
 800e9f6:	e7fe      	b.n	800e9f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <vPortExitCritical+0x50>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	4a09      	ldr	r2, [pc, #36]	; (800ea24 <vPortExitCritical+0x50>)
 800ea00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea02:	4b08      	ldr	r3, [pc, #32]	; (800ea24 <vPortExitCritical+0x50>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d105      	bne.n	800ea16 <vPortExitCritical+0x42>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	f383 8811 	msr	BASEPRI, r3
}
 800ea14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea16:	bf00      	nop
 800ea18:	370c      	adds	r7, #12
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	20000014 	.word	0x20000014
	...

0800ea30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea30:	f3ef 8009 	mrs	r0, PSP
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	4b15      	ldr	r3, [pc, #84]	; (800ea90 <pxCurrentTCBConst>)
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	f01e 0f10 	tst.w	lr, #16
 800ea40:	bf08      	it	eq
 800ea42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4a:	6010      	str	r0, [r2, #0]
 800ea4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800ea50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea54:	f380 8811 	msr	BASEPRI, r0
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f7fe ffb4 	bl	800d9cc <vTaskSwitchContext>
 800ea64:	f04f 0000 	mov.w	r0, #0
 800ea68:	f380 8811 	msr	BASEPRI, r0
 800ea6c:	bc08      	pop	{r3}
 800ea6e:	6819      	ldr	r1, [r3, #0]
 800ea70:	6808      	ldr	r0, [r1, #0]
 800ea72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea76:	f01e 0f10 	tst.w	lr, #16
 800ea7a:	bf08      	it	eq
 800ea7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea80:	f380 8809 	msr	PSP, r0
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	f3af 8000 	nop.w

0800ea90 <pxCurrentTCBConst>:
 800ea90:	2000027c 	.word	0x2000027c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea94:	bf00      	nop
 800ea96:	bf00      	nop

0800ea98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	607b      	str	r3, [r7, #4]
}
 800eab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eab2:	f7fe fecd 	bl	800d850 <xTaskIncrementTick>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d003      	beq.n	800eac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eabc:	4b06      	ldr	r3, [pc, #24]	; (800ead8 <xPortSysTickHandler+0x40>)
 800eabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eac2:	601a      	str	r2, [r3, #0]
 800eac4:	2300      	movs	r3, #0
 800eac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	f383 8811 	msr	BASEPRI, r3
}
 800eace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	e000ed04 	.word	0xe000ed04

0800eadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eadc:	b480      	push	{r7}
 800eade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eae0:	4b08      	ldr	r3, [pc, #32]	; (800eb04 <vPortSetupTimerInterrupt+0x28>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a08      	ldr	r2, [pc, #32]	; (800eb08 <vPortSetupTimerInterrupt+0x2c>)
 800eae6:	fba2 2303 	umull	r2, r3, r2, r3
 800eaea:	099b      	lsrs	r3, r3, #6
 800eaec:	4a07      	ldr	r2, [pc, #28]	; (800eb0c <vPortSetupTimerInterrupt+0x30>)
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eaf2:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <vPortSetupTimerInterrupt+0x34>)
 800eaf4:	2207      	movs	r2, #7
 800eaf6:	601a      	str	r2, [r3, #0]
}
 800eaf8:	bf00      	nop
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	20000010 	.word	0x20000010
 800eb08:	10624dd3 	.word	0x10624dd3
 800eb0c:	e000e014 	.word	0xe000e014
 800eb10:	e000e010 	.word	0xe000e010

0800eb14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb24 <vPortEnableVFP+0x10>
 800eb18:	6801      	ldr	r1, [r0, #0]
 800eb1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb1e:	6001      	str	r1, [r0, #0]
 800eb20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb22:	bf00      	nop
 800eb24:	e000ed88 	.word	0xe000ed88

0800eb28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800eb2e:	f3ef 8305 	mrs	r3, IPSR
 800eb32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2b0f      	cmp	r3, #15
 800eb38:	d914      	bls.n	800eb64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb3a:	4a17      	ldr	r2, [pc, #92]	; (800eb98 <vPortValidateInterruptPriority+0x70>)
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	4413      	add	r3, r2
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb44:	4b15      	ldr	r3, [pc, #84]	; (800eb9c <vPortValidateInterruptPriority+0x74>)
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	7afa      	ldrb	r2, [r7, #11]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d20a      	bcs.n	800eb64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb52:	f383 8811 	msr	BASEPRI, r3
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	607b      	str	r3, [r7, #4]
}
 800eb60:	bf00      	nop
 800eb62:	e7fe      	b.n	800eb62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb64:	4b0e      	ldr	r3, [pc, #56]	; (800eba0 <vPortValidateInterruptPriority+0x78>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb6c:	4b0d      	ldr	r3, [pc, #52]	; (800eba4 <vPortValidateInterruptPriority+0x7c>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d90a      	bls.n	800eb8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	603b      	str	r3, [r7, #0]
}
 800eb86:	bf00      	nop
 800eb88:	e7fe      	b.n	800eb88 <vPortValidateInterruptPriority+0x60>
	}
 800eb8a:	bf00      	nop
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	e000e3f0 	.word	0xe000e3f0
 800eb9c:	200003e4 	.word	0x200003e4
 800eba0:	e000ed0c 	.word	0xe000ed0c
 800eba4:	200003e8 	.word	0x200003e8

0800eba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b08a      	sub	sp, #40	; 0x28
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebb4:	f7fe fd92 	bl	800d6dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebb8:	4b58      	ldr	r3, [pc, #352]	; (800ed1c <pvPortMalloc+0x174>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ebc0:	f000 f910 	bl	800ede4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebc4:	4b56      	ldr	r3, [pc, #344]	; (800ed20 <pvPortMalloc+0x178>)
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	4013      	ands	r3, r2
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f040 808e 	bne.w	800ecee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d01d      	beq.n	800ec14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ebd8:	2208      	movs	r2, #8
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4413      	add	r3, r2
 800ebde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f003 0307 	and.w	r3, r3, #7
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d014      	beq.n	800ec14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f023 0307 	bic.w	r3, r3, #7
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f003 0307 	and.w	r3, r3, #7
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d00a      	beq.n	800ec14 <pvPortMalloc+0x6c>
	__asm volatile
 800ebfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec02:	f383 8811 	msr	BASEPRI, r3
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	617b      	str	r3, [r7, #20]
}
 800ec10:	bf00      	nop
 800ec12:	e7fe      	b.n	800ec12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d069      	beq.n	800ecee <pvPortMalloc+0x146>
 800ec1a:	4b42      	ldr	r3, [pc, #264]	; (800ed24 <pvPortMalloc+0x17c>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d864      	bhi.n	800ecee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec24:	4b40      	ldr	r3, [pc, #256]	; (800ed28 <pvPortMalloc+0x180>)
 800ec26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec28:	4b3f      	ldr	r3, [pc, #252]	; (800ed28 <pvPortMalloc+0x180>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec2e:	e004      	b.n	800ec3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ec30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d903      	bls.n	800ec4c <pvPortMalloc+0xa4>
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1f1      	bne.n	800ec30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec4c:	4b33      	ldr	r3, [pc, #204]	; (800ed1c <pvPortMalloc+0x174>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d04b      	beq.n	800ecee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec56:	6a3b      	ldr	r3, [r7, #32]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2208      	movs	r2, #8
 800ec5c:	4413      	add	r3, r2
 800ec5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	1ad2      	subs	r2, r2, r3
 800ec70:	2308      	movs	r3, #8
 800ec72:	005b      	lsls	r3, r3, #1
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d91f      	bls.n	800ecb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	f003 0307 	and.w	r3, r3, #7
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d00a      	beq.n	800eca0 <pvPortMalloc+0xf8>
	__asm volatile
 800ec8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8e:	f383 8811 	msr	BASEPRI, r3
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	f3bf 8f4f 	dsb	sy
 800ec9a:	613b      	str	r3, [r7, #16]
}
 800ec9c:	bf00      	nop
 800ec9e:	e7fe      	b.n	800ec9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	1ad2      	subs	r2, r2, r3
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ecb2:	69b8      	ldr	r0, [r7, #24]
 800ecb4:	f000 f8f8 	bl	800eea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ecb8:	4b1a      	ldr	r3, [pc, #104]	; (800ed24 <pvPortMalloc+0x17c>)
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	4a18      	ldr	r2, [pc, #96]	; (800ed24 <pvPortMalloc+0x17c>)
 800ecc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ecc6:	4b17      	ldr	r3, [pc, #92]	; (800ed24 <pvPortMalloc+0x17c>)
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	4b18      	ldr	r3, [pc, #96]	; (800ed2c <pvPortMalloc+0x184>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d203      	bcs.n	800ecda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ecd2:	4b14      	ldr	r3, [pc, #80]	; (800ed24 <pvPortMalloc+0x17c>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a15      	ldr	r2, [pc, #84]	; (800ed2c <pvPortMalloc+0x184>)
 800ecd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ecda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecdc:	685a      	ldr	r2, [r3, #4]
 800ecde:	4b10      	ldr	r3, [pc, #64]	; (800ed20 <pvPortMalloc+0x178>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	431a      	orrs	r2, r3
 800ece4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ece8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecea:	2200      	movs	r2, #0
 800ecec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ecee:	f7fe fd03 	bl	800d6f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	f003 0307 	and.w	r3, r3, #7
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00a      	beq.n	800ed12 <pvPortMalloc+0x16a>
	__asm volatile
 800ecfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed00:	f383 8811 	msr	BASEPRI, r3
 800ed04:	f3bf 8f6f 	isb	sy
 800ed08:	f3bf 8f4f 	dsb	sy
 800ed0c:	60fb      	str	r3, [r7, #12]
}
 800ed0e:	bf00      	nop
 800ed10:	e7fe      	b.n	800ed10 <pvPortMalloc+0x168>
	return pvReturn;
 800ed12:	69fb      	ldr	r3, [r7, #28]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3728      	adds	r7, #40	; 0x28
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	20007bf4 	.word	0x20007bf4
 800ed20:	20007c00 	.word	0x20007c00
 800ed24:	20007bf8 	.word	0x20007bf8
 800ed28:	20007bec 	.word	0x20007bec
 800ed2c:	20007bfc 	.word	0x20007bfc

0800ed30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d048      	beq.n	800edd4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed42:	2308      	movs	r3, #8
 800ed44:	425b      	negs	r3, r3
 800ed46:	697a      	ldr	r2, [r7, #20]
 800ed48:	4413      	add	r3, r2
 800ed4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	685a      	ldr	r2, [r3, #4]
 800ed54:	4b21      	ldr	r3, [pc, #132]	; (800eddc <vPortFree+0xac>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4013      	ands	r3, r2
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d10a      	bne.n	800ed74 <vPortFree+0x44>
	__asm volatile
 800ed5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed62:	f383 8811 	msr	BASEPRI, r3
 800ed66:	f3bf 8f6f 	isb	sy
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	60fb      	str	r3, [r7, #12]
}
 800ed70:	bf00      	nop
 800ed72:	e7fe      	b.n	800ed72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00a      	beq.n	800ed92 <vPortFree+0x62>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	60bb      	str	r3, [r7, #8]
}
 800ed8e:	bf00      	nop
 800ed90:	e7fe      	b.n	800ed90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	685a      	ldr	r2, [r3, #4]
 800ed96:	4b11      	ldr	r3, [pc, #68]	; (800eddc <vPortFree+0xac>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d019      	beq.n	800edd4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d115      	bne.n	800edd4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	685a      	ldr	r2, [r3, #4]
 800edac:	4b0b      	ldr	r3, [pc, #44]	; (800eddc <vPortFree+0xac>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	43db      	mvns	r3, r3
 800edb2:	401a      	ands	r2, r3
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800edb8:	f7fe fc90 	bl	800d6dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	685a      	ldr	r2, [r3, #4]
 800edc0:	4b07      	ldr	r3, [pc, #28]	; (800ede0 <vPortFree+0xb0>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4413      	add	r3, r2
 800edc6:	4a06      	ldr	r2, [pc, #24]	; (800ede0 <vPortFree+0xb0>)
 800edc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800edca:	6938      	ldr	r0, [r7, #16]
 800edcc:	f000 f86c 	bl	800eea8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800edd0:	f7fe fc92 	bl	800d6f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edd4:	bf00      	nop
 800edd6:	3718      	adds	r7, #24
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20007c00 	.word	0x20007c00
 800ede0:	20007bf8 	.word	0x20007bf8

0800ede4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ede4:	b480      	push	{r7}
 800ede6:	b085      	sub	sp, #20
 800ede8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800edea:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800edee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800edf0:	4b27      	ldr	r3, [pc, #156]	; (800ee90 <prvHeapInit+0xac>)
 800edf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f003 0307 	and.w	r3, r3, #7
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00c      	beq.n	800ee18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	3307      	adds	r3, #7
 800ee02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f023 0307 	bic.w	r3, r3, #7
 800ee0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	1ad3      	subs	r3, r2, r3
 800ee12:	4a1f      	ldr	r2, [pc, #124]	; (800ee90 <prvHeapInit+0xac>)
 800ee14:	4413      	add	r3, r2
 800ee16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee1c:	4a1d      	ldr	r2, [pc, #116]	; (800ee94 <prvHeapInit+0xb0>)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee22:	4b1c      	ldr	r3, [pc, #112]	; (800ee94 <prvHeapInit+0xb0>)
 800ee24:	2200      	movs	r2, #0
 800ee26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee30:	2208      	movs	r2, #8
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	1a9b      	subs	r3, r3, r2
 800ee36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f023 0307 	bic.w	r3, r3, #7
 800ee3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	4a15      	ldr	r2, [pc, #84]	; (800ee98 <prvHeapInit+0xb4>)
 800ee44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee46:	4b14      	ldr	r3, [pc, #80]	; (800ee98 <prvHeapInit+0xb4>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee4e:	4b12      	ldr	r3, [pc, #72]	; (800ee98 <prvHeapInit+0xb4>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2200      	movs	r2, #0
 800ee54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	68fa      	ldr	r2, [r7, #12]
 800ee5e:	1ad2      	subs	r2, r2, r3
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee64:	4b0c      	ldr	r3, [pc, #48]	; (800ee98 <prvHeapInit+0xb4>)
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	4a0a      	ldr	r2, [pc, #40]	; (800ee9c <prvHeapInit+0xb8>)
 800ee72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	4a09      	ldr	r2, [pc, #36]	; (800eea0 <prvHeapInit+0xbc>)
 800ee7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee7c:	4b09      	ldr	r3, [pc, #36]	; (800eea4 <prvHeapInit+0xc0>)
 800ee7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee82:	601a      	str	r2, [r3, #0]
}
 800ee84:	bf00      	nop
 800ee86:	3714      	adds	r7, #20
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr
 800ee90:	200003ec 	.word	0x200003ec
 800ee94:	20007bec 	.word	0x20007bec
 800ee98:	20007bf4 	.word	0x20007bf4
 800ee9c:	20007bfc 	.word	0x20007bfc
 800eea0:	20007bf8 	.word	0x20007bf8
 800eea4:	20007c00 	.word	0x20007c00

0800eea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b085      	sub	sp, #20
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eeb0:	4b28      	ldr	r3, [pc, #160]	; (800ef54 <prvInsertBlockIntoFreeList+0xac>)
 800eeb2:	60fb      	str	r3, [r7, #12]
 800eeb4:	e002      	b.n	800eebc <prvInsertBlockIntoFreeList+0x14>
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	60fb      	str	r3, [r7, #12]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d8f7      	bhi.n	800eeb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	68ba      	ldr	r2, [r7, #8]
 800eed0:	4413      	add	r3, r2
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d108      	bne.n	800eeea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	685a      	ldr	r2, [r3, #4]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	441a      	add	r2, r3
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	441a      	add	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d118      	bne.n	800ef30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	4b15      	ldr	r3, [pc, #84]	; (800ef58 <prvInsertBlockIntoFreeList+0xb0>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d00d      	beq.n	800ef26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	685a      	ldr	r2, [r3, #4]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	441a      	add	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	e008      	b.n	800ef38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef26:	4b0c      	ldr	r3, [pc, #48]	; (800ef58 <prvInsertBlockIntoFreeList+0xb0>)
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	601a      	str	r2, [r3, #0]
 800ef2e:	e003      	b.n	800ef38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d002      	beq.n	800ef46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef46:	bf00      	nop
 800ef48:	3714      	adds	r7, #20
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	20007bec 	.word	0x20007bec
 800ef58:	20007bf4 	.word	0x20007bf4

0800ef5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ef5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ef94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ef60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ef62:	e003      	b.n	800ef6c <LoopCopyDataInit>

0800ef64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ef64:	4b0c      	ldr	r3, [pc, #48]	; (800ef98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ef66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ef68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ef6a:	3104      	adds	r1, #4

0800ef6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ef6c:	480b      	ldr	r0, [pc, #44]	; (800ef9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ef6e:	4b0c      	ldr	r3, [pc, #48]	; (800efa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ef70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ef72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ef74:	d3f6      	bcc.n	800ef64 <CopyDataInit>
  ldr  r2, =_sbss
 800ef76:	4a0b      	ldr	r2, [pc, #44]	; (800efa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ef78:	e002      	b.n	800ef80 <LoopFillZerobss>

0800ef7a <FillZerobss>:

/* Zero fill the bss segment. */  
 FillZerobss:
  movs  r3, #0
 800ef7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ef7c:	f842 3b04 	str.w	r3, [r2], #4

0800ef80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ef80:	4b09      	ldr	r3, [pc, #36]	; (800efa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ef82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ef84:	d3f9      	bcc.n	800ef7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ef86:	f7fa fcf7 	bl	8009978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ef8a:	f000 f817 	bl	800efbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ef8e:	f7f3 ffcf 	bl	8002f30 <main>
  bx  lr    
 800ef92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ef94:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800ef98:	08013388 	.word	0x08013388
  ldr  r0, =_sdata
 800ef9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800efa0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800efa4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800efa8:	20008240 	.word	0x20008240

0800efac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800efac:	e7fe      	b.n	800efac <ADC_IRQHandler>
	...

0800efb0 <__errno>:
 800efb0:	4b01      	ldr	r3, [pc, #4]	; (800efb8 <__errno+0x8>)
 800efb2:	6818      	ldr	r0, [r3, #0]
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop
 800efb8:	20000018 	.word	0x20000018

0800efbc <__libc_init_array>:
 800efbc:	b570      	push	{r4, r5, r6, lr}
 800efbe:	4d0d      	ldr	r5, [pc, #52]	; (800eff4 <__libc_init_array+0x38>)
 800efc0:	4c0d      	ldr	r4, [pc, #52]	; (800eff8 <__libc_init_array+0x3c>)
 800efc2:	1b64      	subs	r4, r4, r5
 800efc4:	10a4      	asrs	r4, r4, #2
 800efc6:	2600      	movs	r6, #0
 800efc8:	42a6      	cmp	r6, r4
 800efca:	d109      	bne.n	800efe0 <__libc_init_array+0x24>
 800efcc:	4d0b      	ldr	r5, [pc, #44]	; (800effc <__libc_init_array+0x40>)
 800efce:	4c0c      	ldr	r4, [pc, #48]	; (800f000 <__libc_init_array+0x44>)
 800efd0:	f003 fed4 	bl	8012d7c <_init>
 800efd4:	1b64      	subs	r4, r4, r5
 800efd6:	10a4      	asrs	r4, r4, #2
 800efd8:	2600      	movs	r6, #0
 800efda:	42a6      	cmp	r6, r4
 800efdc:	d105      	bne.n	800efea <__libc_init_array+0x2e>
 800efde:	bd70      	pop	{r4, r5, r6, pc}
 800efe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800efe4:	4798      	blx	r3
 800efe6:	3601      	adds	r6, #1
 800efe8:	e7ee      	b.n	800efc8 <__libc_init_array+0xc>
 800efea:	f855 3b04 	ldr.w	r3, [r5], #4
 800efee:	4798      	blx	r3
 800eff0:	3601      	adds	r6, #1
 800eff2:	e7f2      	b.n	800efda <__libc_init_array+0x1e>
 800eff4:	08013380 	.word	0x08013380
 800eff8:	08013380 	.word	0x08013380
 800effc:	08013380 	.word	0x08013380
 800f000:	08013384 	.word	0x08013384

0800f004 <malloc>:
 800f004:	4b02      	ldr	r3, [pc, #8]	; (800f010 <malloc+0xc>)
 800f006:	4601      	mov	r1, r0
 800f008:	6818      	ldr	r0, [r3, #0]
 800f00a:	f000 b871 	b.w	800f0f0 <_malloc_r>
 800f00e:	bf00      	nop
 800f010:	20000018 	.word	0x20000018

0800f014 <free>:
 800f014:	4b02      	ldr	r3, [pc, #8]	; (800f020 <free+0xc>)
 800f016:	4601      	mov	r1, r0
 800f018:	6818      	ldr	r0, [r3, #0]
 800f01a:	f000 b819 	b.w	800f050 <_free_r>
 800f01e:	bf00      	nop
 800f020:	20000018 	.word	0x20000018

0800f024 <memcpy>:
 800f024:	440a      	add	r2, r1
 800f026:	4291      	cmp	r1, r2
 800f028:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f02c:	d100      	bne.n	800f030 <memcpy+0xc>
 800f02e:	4770      	bx	lr
 800f030:	b510      	push	{r4, lr}
 800f032:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f03a:	4291      	cmp	r1, r2
 800f03c:	d1f9      	bne.n	800f032 <memcpy+0xe>
 800f03e:	bd10      	pop	{r4, pc}

0800f040 <memset>:
 800f040:	4402      	add	r2, r0
 800f042:	4603      	mov	r3, r0
 800f044:	4293      	cmp	r3, r2
 800f046:	d100      	bne.n	800f04a <memset+0xa>
 800f048:	4770      	bx	lr
 800f04a:	f803 1b01 	strb.w	r1, [r3], #1
 800f04e:	e7f9      	b.n	800f044 <memset+0x4>

0800f050 <_free_r>:
 800f050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f052:	2900      	cmp	r1, #0
 800f054:	d048      	beq.n	800f0e8 <_free_r+0x98>
 800f056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f05a:	9001      	str	r0, [sp, #4]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f1a1 0404 	sub.w	r4, r1, #4
 800f062:	bfb8      	it	lt
 800f064:	18e4      	addlt	r4, r4, r3
 800f066:	f001 fbcf 	bl	8010808 <__malloc_lock>
 800f06a:	4a20      	ldr	r2, [pc, #128]	; (800f0ec <_free_r+0x9c>)
 800f06c:	9801      	ldr	r0, [sp, #4]
 800f06e:	6813      	ldr	r3, [r2, #0]
 800f070:	4615      	mov	r5, r2
 800f072:	b933      	cbnz	r3, 800f082 <_free_r+0x32>
 800f074:	6063      	str	r3, [r4, #4]
 800f076:	6014      	str	r4, [r2, #0]
 800f078:	b003      	add	sp, #12
 800f07a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f07e:	f001 bbc9 	b.w	8010814 <__malloc_unlock>
 800f082:	42a3      	cmp	r3, r4
 800f084:	d90b      	bls.n	800f09e <_free_r+0x4e>
 800f086:	6821      	ldr	r1, [r4, #0]
 800f088:	1862      	adds	r2, r4, r1
 800f08a:	4293      	cmp	r3, r2
 800f08c:	bf04      	itt	eq
 800f08e:	681a      	ldreq	r2, [r3, #0]
 800f090:	685b      	ldreq	r3, [r3, #4]
 800f092:	6063      	str	r3, [r4, #4]
 800f094:	bf04      	itt	eq
 800f096:	1852      	addeq	r2, r2, r1
 800f098:	6022      	streq	r2, [r4, #0]
 800f09a:	602c      	str	r4, [r5, #0]
 800f09c:	e7ec      	b.n	800f078 <_free_r+0x28>
 800f09e:	461a      	mov	r2, r3
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	b10b      	cbz	r3, 800f0a8 <_free_r+0x58>
 800f0a4:	42a3      	cmp	r3, r4
 800f0a6:	d9fa      	bls.n	800f09e <_free_r+0x4e>
 800f0a8:	6811      	ldr	r1, [r2, #0]
 800f0aa:	1855      	adds	r5, r2, r1
 800f0ac:	42a5      	cmp	r5, r4
 800f0ae:	d10b      	bne.n	800f0c8 <_free_r+0x78>
 800f0b0:	6824      	ldr	r4, [r4, #0]
 800f0b2:	4421      	add	r1, r4
 800f0b4:	1854      	adds	r4, r2, r1
 800f0b6:	42a3      	cmp	r3, r4
 800f0b8:	6011      	str	r1, [r2, #0]
 800f0ba:	d1dd      	bne.n	800f078 <_free_r+0x28>
 800f0bc:	681c      	ldr	r4, [r3, #0]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	6053      	str	r3, [r2, #4]
 800f0c2:	4421      	add	r1, r4
 800f0c4:	6011      	str	r1, [r2, #0]
 800f0c6:	e7d7      	b.n	800f078 <_free_r+0x28>
 800f0c8:	d902      	bls.n	800f0d0 <_free_r+0x80>
 800f0ca:	230c      	movs	r3, #12
 800f0cc:	6003      	str	r3, [r0, #0]
 800f0ce:	e7d3      	b.n	800f078 <_free_r+0x28>
 800f0d0:	6825      	ldr	r5, [r4, #0]
 800f0d2:	1961      	adds	r1, r4, r5
 800f0d4:	428b      	cmp	r3, r1
 800f0d6:	bf04      	itt	eq
 800f0d8:	6819      	ldreq	r1, [r3, #0]
 800f0da:	685b      	ldreq	r3, [r3, #4]
 800f0dc:	6063      	str	r3, [r4, #4]
 800f0de:	bf04      	itt	eq
 800f0e0:	1949      	addeq	r1, r1, r5
 800f0e2:	6021      	streq	r1, [r4, #0]
 800f0e4:	6054      	str	r4, [r2, #4]
 800f0e6:	e7c7      	b.n	800f078 <_free_r+0x28>
 800f0e8:	b003      	add	sp, #12
 800f0ea:	bd30      	pop	{r4, r5, pc}
 800f0ec:	20007c04 	.word	0x20007c04

0800f0f0 <_malloc_r>:
 800f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f2:	1ccd      	adds	r5, r1, #3
 800f0f4:	f025 0503 	bic.w	r5, r5, #3
 800f0f8:	3508      	adds	r5, #8
 800f0fa:	2d0c      	cmp	r5, #12
 800f0fc:	bf38      	it	cc
 800f0fe:	250c      	movcc	r5, #12
 800f100:	2d00      	cmp	r5, #0
 800f102:	4606      	mov	r6, r0
 800f104:	db01      	blt.n	800f10a <_malloc_r+0x1a>
 800f106:	42a9      	cmp	r1, r5
 800f108:	d903      	bls.n	800f112 <_malloc_r+0x22>
 800f10a:	230c      	movs	r3, #12
 800f10c:	6033      	str	r3, [r6, #0]
 800f10e:	2000      	movs	r0, #0
 800f110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f112:	f001 fb79 	bl	8010808 <__malloc_lock>
 800f116:	4921      	ldr	r1, [pc, #132]	; (800f19c <_malloc_r+0xac>)
 800f118:	680a      	ldr	r2, [r1, #0]
 800f11a:	4614      	mov	r4, r2
 800f11c:	b99c      	cbnz	r4, 800f146 <_malloc_r+0x56>
 800f11e:	4f20      	ldr	r7, [pc, #128]	; (800f1a0 <_malloc_r+0xb0>)
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	b923      	cbnz	r3, 800f12e <_malloc_r+0x3e>
 800f124:	4621      	mov	r1, r4
 800f126:	4630      	mov	r0, r6
 800f128:	f000 fca6 	bl	800fa78 <_sbrk_r>
 800f12c:	6038      	str	r0, [r7, #0]
 800f12e:	4629      	mov	r1, r5
 800f130:	4630      	mov	r0, r6
 800f132:	f000 fca1 	bl	800fa78 <_sbrk_r>
 800f136:	1c43      	adds	r3, r0, #1
 800f138:	d123      	bne.n	800f182 <_malloc_r+0x92>
 800f13a:	230c      	movs	r3, #12
 800f13c:	6033      	str	r3, [r6, #0]
 800f13e:	4630      	mov	r0, r6
 800f140:	f001 fb68 	bl	8010814 <__malloc_unlock>
 800f144:	e7e3      	b.n	800f10e <_malloc_r+0x1e>
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	1b5b      	subs	r3, r3, r5
 800f14a:	d417      	bmi.n	800f17c <_malloc_r+0x8c>
 800f14c:	2b0b      	cmp	r3, #11
 800f14e:	d903      	bls.n	800f158 <_malloc_r+0x68>
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	441c      	add	r4, r3
 800f154:	6025      	str	r5, [r4, #0]
 800f156:	e004      	b.n	800f162 <_malloc_r+0x72>
 800f158:	6863      	ldr	r3, [r4, #4]
 800f15a:	42a2      	cmp	r2, r4
 800f15c:	bf0c      	ite	eq
 800f15e:	600b      	streq	r3, [r1, #0]
 800f160:	6053      	strne	r3, [r2, #4]
 800f162:	4630      	mov	r0, r6
 800f164:	f001 fb56 	bl	8010814 <__malloc_unlock>
 800f168:	f104 000b 	add.w	r0, r4, #11
 800f16c:	1d23      	adds	r3, r4, #4
 800f16e:	f020 0007 	bic.w	r0, r0, #7
 800f172:	1ac2      	subs	r2, r0, r3
 800f174:	d0cc      	beq.n	800f110 <_malloc_r+0x20>
 800f176:	1a1b      	subs	r3, r3, r0
 800f178:	50a3      	str	r3, [r4, r2]
 800f17a:	e7c9      	b.n	800f110 <_malloc_r+0x20>
 800f17c:	4622      	mov	r2, r4
 800f17e:	6864      	ldr	r4, [r4, #4]
 800f180:	e7cc      	b.n	800f11c <_malloc_r+0x2c>
 800f182:	1cc4      	adds	r4, r0, #3
 800f184:	f024 0403 	bic.w	r4, r4, #3
 800f188:	42a0      	cmp	r0, r4
 800f18a:	d0e3      	beq.n	800f154 <_malloc_r+0x64>
 800f18c:	1a21      	subs	r1, r4, r0
 800f18e:	4630      	mov	r0, r6
 800f190:	f000 fc72 	bl	800fa78 <_sbrk_r>
 800f194:	3001      	adds	r0, #1
 800f196:	d1dd      	bne.n	800f154 <_malloc_r+0x64>
 800f198:	e7cf      	b.n	800f13a <_malloc_r+0x4a>
 800f19a:	bf00      	nop
 800f19c:	20007c04 	.word	0x20007c04
 800f1a0:	20007c08 	.word	0x20007c08

0800f1a4 <__cvt>:
 800f1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a8:	ec55 4b10 	vmov	r4, r5, d0
 800f1ac:	2d00      	cmp	r5, #0
 800f1ae:	460e      	mov	r6, r1
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	462b      	mov	r3, r5
 800f1b4:	bfbb      	ittet	lt
 800f1b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f1ba:	461d      	movlt	r5, r3
 800f1bc:	2300      	movge	r3, #0
 800f1be:	232d      	movlt	r3, #45	; 0x2d
 800f1c0:	700b      	strb	r3, [r1, #0]
 800f1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f1c8:	4691      	mov	r9, r2
 800f1ca:	f023 0820 	bic.w	r8, r3, #32
 800f1ce:	bfbc      	itt	lt
 800f1d0:	4622      	movlt	r2, r4
 800f1d2:	4614      	movlt	r4, r2
 800f1d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f1d8:	d005      	beq.n	800f1e6 <__cvt+0x42>
 800f1da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f1de:	d100      	bne.n	800f1e2 <__cvt+0x3e>
 800f1e0:	3601      	adds	r6, #1
 800f1e2:	2102      	movs	r1, #2
 800f1e4:	e000      	b.n	800f1e8 <__cvt+0x44>
 800f1e6:	2103      	movs	r1, #3
 800f1e8:	ab03      	add	r3, sp, #12
 800f1ea:	9301      	str	r3, [sp, #4]
 800f1ec:	ab02      	add	r3, sp, #8
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	ec45 4b10 	vmov	d0, r4, r5
 800f1f4:	4653      	mov	r3, sl
 800f1f6:	4632      	mov	r2, r6
 800f1f8:	f000 fd16 	bl	800fc28 <_dtoa_r>
 800f1fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f200:	4607      	mov	r7, r0
 800f202:	d102      	bne.n	800f20a <__cvt+0x66>
 800f204:	f019 0f01 	tst.w	r9, #1
 800f208:	d022      	beq.n	800f250 <__cvt+0xac>
 800f20a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f20e:	eb07 0906 	add.w	r9, r7, r6
 800f212:	d110      	bne.n	800f236 <__cvt+0x92>
 800f214:	783b      	ldrb	r3, [r7, #0]
 800f216:	2b30      	cmp	r3, #48	; 0x30
 800f218:	d10a      	bne.n	800f230 <__cvt+0x8c>
 800f21a:	2200      	movs	r2, #0
 800f21c:	2300      	movs	r3, #0
 800f21e:	4620      	mov	r0, r4
 800f220:	4629      	mov	r1, r5
 800f222:	f7f1 fc61 	bl	8000ae8 <__aeabi_dcmpeq>
 800f226:	b918      	cbnz	r0, 800f230 <__cvt+0x8c>
 800f228:	f1c6 0601 	rsb	r6, r6, #1
 800f22c:	f8ca 6000 	str.w	r6, [sl]
 800f230:	f8da 3000 	ldr.w	r3, [sl]
 800f234:	4499      	add	r9, r3
 800f236:	2200      	movs	r2, #0
 800f238:	2300      	movs	r3, #0
 800f23a:	4620      	mov	r0, r4
 800f23c:	4629      	mov	r1, r5
 800f23e:	f7f1 fc53 	bl	8000ae8 <__aeabi_dcmpeq>
 800f242:	b108      	cbz	r0, 800f248 <__cvt+0xa4>
 800f244:	f8cd 900c 	str.w	r9, [sp, #12]
 800f248:	2230      	movs	r2, #48	; 0x30
 800f24a:	9b03      	ldr	r3, [sp, #12]
 800f24c:	454b      	cmp	r3, r9
 800f24e:	d307      	bcc.n	800f260 <__cvt+0xbc>
 800f250:	9b03      	ldr	r3, [sp, #12]
 800f252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f254:	1bdb      	subs	r3, r3, r7
 800f256:	4638      	mov	r0, r7
 800f258:	6013      	str	r3, [r2, #0]
 800f25a:	b004      	add	sp, #16
 800f25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f260:	1c59      	adds	r1, r3, #1
 800f262:	9103      	str	r1, [sp, #12]
 800f264:	701a      	strb	r2, [r3, #0]
 800f266:	e7f0      	b.n	800f24a <__cvt+0xa6>

0800f268 <__exponent>:
 800f268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f26a:	4603      	mov	r3, r0
 800f26c:	2900      	cmp	r1, #0
 800f26e:	bfb8      	it	lt
 800f270:	4249      	neglt	r1, r1
 800f272:	f803 2b02 	strb.w	r2, [r3], #2
 800f276:	bfb4      	ite	lt
 800f278:	222d      	movlt	r2, #45	; 0x2d
 800f27a:	222b      	movge	r2, #43	; 0x2b
 800f27c:	2909      	cmp	r1, #9
 800f27e:	7042      	strb	r2, [r0, #1]
 800f280:	dd2a      	ble.n	800f2d8 <__exponent+0x70>
 800f282:	f10d 0407 	add.w	r4, sp, #7
 800f286:	46a4      	mov	ip, r4
 800f288:	270a      	movs	r7, #10
 800f28a:	46a6      	mov	lr, r4
 800f28c:	460a      	mov	r2, r1
 800f28e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f292:	fb07 1516 	mls	r5, r7, r6, r1
 800f296:	3530      	adds	r5, #48	; 0x30
 800f298:	2a63      	cmp	r2, #99	; 0x63
 800f29a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f29e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	dcf1      	bgt.n	800f28a <__exponent+0x22>
 800f2a6:	3130      	adds	r1, #48	; 0x30
 800f2a8:	f1ae 0502 	sub.w	r5, lr, #2
 800f2ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f2b0:	1c44      	adds	r4, r0, #1
 800f2b2:	4629      	mov	r1, r5
 800f2b4:	4561      	cmp	r1, ip
 800f2b6:	d30a      	bcc.n	800f2ce <__exponent+0x66>
 800f2b8:	f10d 0209 	add.w	r2, sp, #9
 800f2bc:	eba2 020e 	sub.w	r2, r2, lr
 800f2c0:	4565      	cmp	r5, ip
 800f2c2:	bf88      	it	hi
 800f2c4:	2200      	movhi	r2, #0
 800f2c6:	4413      	add	r3, r2
 800f2c8:	1a18      	subs	r0, r3, r0
 800f2ca:	b003      	add	sp, #12
 800f2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f2d6:	e7ed      	b.n	800f2b4 <__exponent+0x4c>
 800f2d8:	2330      	movs	r3, #48	; 0x30
 800f2da:	3130      	adds	r1, #48	; 0x30
 800f2dc:	7083      	strb	r3, [r0, #2]
 800f2de:	70c1      	strb	r1, [r0, #3]
 800f2e0:	1d03      	adds	r3, r0, #4
 800f2e2:	e7f1      	b.n	800f2c8 <__exponent+0x60>

0800f2e4 <_printf_float>:
 800f2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e8:	ed2d 8b02 	vpush	{d8}
 800f2ec:	b08d      	sub	sp, #52	; 0x34
 800f2ee:	460c      	mov	r4, r1
 800f2f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f2f4:	4616      	mov	r6, r2
 800f2f6:	461f      	mov	r7, r3
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	f001 fa81 	bl	8010800 <_localeconv_r>
 800f2fe:	f8d0 a000 	ldr.w	sl, [r0]
 800f302:	4650      	mov	r0, sl
 800f304:	f7f0 ff74 	bl	80001f0 <strlen>
 800f308:	2300      	movs	r3, #0
 800f30a:	930a      	str	r3, [sp, #40]	; 0x28
 800f30c:	6823      	ldr	r3, [r4, #0]
 800f30e:	9305      	str	r3, [sp, #20]
 800f310:	f8d8 3000 	ldr.w	r3, [r8]
 800f314:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f318:	3307      	adds	r3, #7
 800f31a:	f023 0307 	bic.w	r3, r3, #7
 800f31e:	f103 0208 	add.w	r2, r3, #8
 800f322:	f8c8 2000 	str.w	r2, [r8]
 800f326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f32e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f332:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f336:	9307      	str	r3, [sp, #28]
 800f338:	f8cd 8018 	str.w	r8, [sp, #24]
 800f33c:	ee08 0a10 	vmov	s16, r0
 800f340:	4b9f      	ldr	r3, [pc, #636]	; (800f5c0 <_printf_float+0x2dc>)
 800f342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f34a:	f7f1 fbff 	bl	8000b4c <__aeabi_dcmpun>
 800f34e:	bb88      	cbnz	r0, 800f3b4 <_printf_float+0xd0>
 800f350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f354:	4b9a      	ldr	r3, [pc, #616]	; (800f5c0 <_printf_float+0x2dc>)
 800f356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f35a:	f7f1 fbd9 	bl	8000b10 <__aeabi_dcmple>
 800f35e:	bb48      	cbnz	r0, 800f3b4 <_printf_float+0xd0>
 800f360:	2200      	movs	r2, #0
 800f362:	2300      	movs	r3, #0
 800f364:	4640      	mov	r0, r8
 800f366:	4649      	mov	r1, r9
 800f368:	f7f1 fbc8 	bl	8000afc <__aeabi_dcmplt>
 800f36c:	b110      	cbz	r0, 800f374 <_printf_float+0x90>
 800f36e:	232d      	movs	r3, #45	; 0x2d
 800f370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f374:	4b93      	ldr	r3, [pc, #588]	; (800f5c4 <_printf_float+0x2e0>)
 800f376:	4894      	ldr	r0, [pc, #592]	; (800f5c8 <_printf_float+0x2e4>)
 800f378:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f37c:	bf94      	ite	ls
 800f37e:	4698      	movls	r8, r3
 800f380:	4680      	movhi	r8, r0
 800f382:	2303      	movs	r3, #3
 800f384:	6123      	str	r3, [r4, #16]
 800f386:	9b05      	ldr	r3, [sp, #20]
 800f388:	f023 0204 	bic.w	r2, r3, #4
 800f38c:	6022      	str	r2, [r4, #0]
 800f38e:	f04f 0900 	mov.w	r9, #0
 800f392:	9700      	str	r7, [sp, #0]
 800f394:	4633      	mov	r3, r6
 800f396:	aa0b      	add	r2, sp, #44	; 0x2c
 800f398:	4621      	mov	r1, r4
 800f39a:	4628      	mov	r0, r5
 800f39c:	f000 f9d8 	bl	800f750 <_printf_common>
 800f3a0:	3001      	adds	r0, #1
 800f3a2:	f040 8090 	bne.w	800f4c6 <_printf_float+0x1e2>
 800f3a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3aa:	b00d      	add	sp, #52	; 0x34
 800f3ac:	ecbd 8b02 	vpop	{d8}
 800f3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b4:	4642      	mov	r2, r8
 800f3b6:	464b      	mov	r3, r9
 800f3b8:	4640      	mov	r0, r8
 800f3ba:	4649      	mov	r1, r9
 800f3bc:	f7f1 fbc6 	bl	8000b4c <__aeabi_dcmpun>
 800f3c0:	b140      	cbz	r0, 800f3d4 <_printf_float+0xf0>
 800f3c2:	464b      	mov	r3, r9
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	bfbc      	itt	lt
 800f3c8:	232d      	movlt	r3, #45	; 0x2d
 800f3ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f3ce:	487f      	ldr	r0, [pc, #508]	; (800f5cc <_printf_float+0x2e8>)
 800f3d0:	4b7f      	ldr	r3, [pc, #508]	; (800f5d0 <_printf_float+0x2ec>)
 800f3d2:	e7d1      	b.n	800f378 <_printf_float+0x94>
 800f3d4:	6863      	ldr	r3, [r4, #4]
 800f3d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f3da:	9206      	str	r2, [sp, #24]
 800f3dc:	1c5a      	adds	r2, r3, #1
 800f3de:	d13f      	bne.n	800f460 <_printf_float+0x17c>
 800f3e0:	2306      	movs	r3, #6
 800f3e2:	6063      	str	r3, [r4, #4]
 800f3e4:	9b05      	ldr	r3, [sp, #20]
 800f3e6:	6861      	ldr	r1, [r4, #4]
 800f3e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	9303      	str	r3, [sp, #12]
 800f3f0:	ab0a      	add	r3, sp, #40	; 0x28
 800f3f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f3f6:	ab09      	add	r3, sp, #36	; 0x24
 800f3f8:	ec49 8b10 	vmov	d0, r8, r9
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	6022      	str	r2, [r4, #0]
 800f400:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f404:	4628      	mov	r0, r5
 800f406:	f7ff fecd 	bl	800f1a4 <__cvt>
 800f40a:	9b06      	ldr	r3, [sp, #24]
 800f40c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f40e:	2b47      	cmp	r3, #71	; 0x47
 800f410:	4680      	mov	r8, r0
 800f412:	d108      	bne.n	800f426 <_printf_float+0x142>
 800f414:	1cc8      	adds	r0, r1, #3
 800f416:	db02      	blt.n	800f41e <_printf_float+0x13a>
 800f418:	6863      	ldr	r3, [r4, #4]
 800f41a:	4299      	cmp	r1, r3
 800f41c:	dd41      	ble.n	800f4a2 <_printf_float+0x1be>
 800f41e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f422:	fa5f fb8b 	uxtb.w	fp, fp
 800f426:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f42a:	d820      	bhi.n	800f46e <_printf_float+0x18a>
 800f42c:	3901      	subs	r1, #1
 800f42e:	465a      	mov	r2, fp
 800f430:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f434:	9109      	str	r1, [sp, #36]	; 0x24
 800f436:	f7ff ff17 	bl	800f268 <__exponent>
 800f43a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f43c:	1813      	adds	r3, r2, r0
 800f43e:	2a01      	cmp	r2, #1
 800f440:	4681      	mov	r9, r0
 800f442:	6123      	str	r3, [r4, #16]
 800f444:	dc02      	bgt.n	800f44c <_printf_float+0x168>
 800f446:	6822      	ldr	r2, [r4, #0]
 800f448:	07d2      	lsls	r2, r2, #31
 800f44a:	d501      	bpl.n	800f450 <_printf_float+0x16c>
 800f44c:	3301      	adds	r3, #1
 800f44e:	6123      	str	r3, [r4, #16]
 800f450:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f454:	2b00      	cmp	r3, #0
 800f456:	d09c      	beq.n	800f392 <_printf_float+0xae>
 800f458:	232d      	movs	r3, #45	; 0x2d
 800f45a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f45e:	e798      	b.n	800f392 <_printf_float+0xae>
 800f460:	9a06      	ldr	r2, [sp, #24]
 800f462:	2a47      	cmp	r2, #71	; 0x47
 800f464:	d1be      	bne.n	800f3e4 <_printf_float+0x100>
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1bc      	bne.n	800f3e4 <_printf_float+0x100>
 800f46a:	2301      	movs	r3, #1
 800f46c:	e7b9      	b.n	800f3e2 <_printf_float+0xfe>
 800f46e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f472:	d118      	bne.n	800f4a6 <_printf_float+0x1c2>
 800f474:	2900      	cmp	r1, #0
 800f476:	6863      	ldr	r3, [r4, #4]
 800f478:	dd0b      	ble.n	800f492 <_printf_float+0x1ae>
 800f47a:	6121      	str	r1, [r4, #16]
 800f47c:	b913      	cbnz	r3, 800f484 <_printf_float+0x1a0>
 800f47e:	6822      	ldr	r2, [r4, #0]
 800f480:	07d0      	lsls	r0, r2, #31
 800f482:	d502      	bpl.n	800f48a <_printf_float+0x1a6>
 800f484:	3301      	adds	r3, #1
 800f486:	440b      	add	r3, r1
 800f488:	6123      	str	r3, [r4, #16]
 800f48a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f48c:	f04f 0900 	mov.w	r9, #0
 800f490:	e7de      	b.n	800f450 <_printf_float+0x16c>
 800f492:	b913      	cbnz	r3, 800f49a <_printf_float+0x1b6>
 800f494:	6822      	ldr	r2, [r4, #0]
 800f496:	07d2      	lsls	r2, r2, #31
 800f498:	d501      	bpl.n	800f49e <_printf_float+0x1ba>
 800f49a:	3302      	adds	r3, #2
 800f49c:	e7f4      	b.n	800f488 <_printf_float+0x1a4>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e7f2      	b.n	800f488 <_printf_float+0x1a4>
 800f4a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4a8:	4299      	cmp	r1, r3
 800f4aa:	db05      	blt.n	800f4b8 <_printf_float+0x1d4>
 800f4ac:	6823      	ldr	r3, [r4, #0]
 800f4ae:	6121      	str	r1, [r4, #16]
 800f4b0:	07d8      	lsls	r0, r3, #31
 800f4b2:	d5ea      	bpl.n	800f48a <_printf_float+0x1a6>
 800f4b4:	1c4b      	adds	r3, r1, #1
 800f4b6:	e7e7      	b.n	800f488 <_printf_float+0x1a4>
 800f4b8:	2900      	cmp	r1, #0
 800f4ba:	bfd4      	ite	le
 800f4bc:	f1c1 0202 	rsble	r2, r1, #2
 800f4c0:	2201      	movgt	r2, #1
 800f4c2:	4413      	add	r3, r2
 800f4c4:	e7e0      	b.n	800f488 <_printf_float+0x1a4>
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	055a      	lsls	r2, r3, #21
 800f4ca:	d407      	bmi.n	800f4dc <_printf_float+0x1f8>
 800f4cc:	6923      	ldr	r3, [r4, #16]
 800f4ce:	4642      	mov	r2, r8
 800f4d0:	4631      	mov	r1, r6
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	47b8      	blx	r7
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	d12c      	bne.n	800f534 <_printf_float+0x250>
 800f4da:	e764      	b.n	800f3a6 <_printf_float+0xc2>
 800f4dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f4e0:	f240 80e0 	bls.w	800f6a4 <_printf_float+0x3c0>
 800f4e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	f7f1 fafc 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d034      	beq.n	800f55e <_printf_float+0x27a>
 800f4f4:	4a37      	ldr	r2, [pc, #220]	; (800f5d4 <_printf_float+0x2f0>)
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	4631      	mov	r1, r6
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	47b8      	blx	r7
 800f4fe:	3001      	adds	r0, #1
 800f500:	f43f af51 	beq.w	800f3a6 <_printf_float+0xc2>
 800f504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f508:	429a      	cmp	r2, r3
 800f50a:	db02      	blt.n	800f512 <_printf_float+0x22e>
 800f50c:	6823      	ldr	r3, [r4, #0]
 800f50e:	07d8      	lsls	r0, r3, #31
 800f510:	d510      	bpl.n	800f534 <_printf_float+0x250>
 800f512:	ee18 3a10 	vmov	r3, s16
 800f516:	4652      	mov	r2, sl
 800f518:	4631      	mov	r1, r6
 800f51a:	4628      	mov	r0, r5
 800f51c:	47b8      	blx	r7
 800f51e:	3001      	adds	r0, #1
 800f520:	f43f af41 	beq.w	800f3a6 <_printf_float+0xc2>
 800f524:	f04f 0800 	mov.w	r8, #0
 800f528:	f104 091a 	add.w	r9, r4, #26
 800f52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f52e:	3b01      	subs	r3, #1
 800f530:	4543      	cmp	r3, r8
 800f532:	dc09      	bgt.n	800f548 <_printf_float+0x264>
 800f534:	6823      	ldr	r3, [r4, #0]
 800f536:	079b      	lsls	r3, r3, #30
 800f538:	f100 8105 	bmi.w	800f746 <_printf_float+0x462>
 800f53c:	68e0      	ldr	r0, [r4, #12]
 800f53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f540:	4298      	cmp	r0, r3
 800f542:	bfb8      	it	lt
 800f544:	4618      	movlt	r0, r3
 800f546:	e730      	b.n	800f3aa <_printf_float+0xc6>
 800f548:	2301      	movs	r3, #1
 800f54a:	464a      	mov	r2, r9
 800f54c:	4631      	mov	r1, r6
 800f54e:	4628      	mov	r0, r5
 800f550:	47b8      	blx	r7
 800f552:	3001      	adds	r0, #1
 800f554:	f43f af27 	beq.w	800f3a6 <_printf_float+0xc2>
 800f558:	f108 0801 	add.w	r8, r8, #1
 800f55c:	e7e6      	b.n	800f52c <_printf_float+0x248>
 800f55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f560:	2b00      	cmp	r3, #0
 800f562:	dc39      	bgt.n	800f5d8 <_printf_float+0x2f4>
 800f564:	4a1b      	ldr	r2, [pc, #108]	; (800f5d4 <_printf_float+0x2f0>)
 800f566:	2301      	movs	r3, #1
 800f568:	4631      	mov	r1, r6
 800f56a:	4628      	mov	r0, r5
 800f56c:	47b8      	blx	r7
 800f56e:	3001      	adds	r0, #1
 800f570:	f43f af19 	beq.w	800f3a6 <_printf_float+0xc2>
 800f574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f578:	4313      	orrs	r3, r2
 800f57a:	d102      	bne.n	800f582 <_printf_float+0x29e>
 800f57c:	6823      	ldr	r3, [r4, #0]
 800f57e:	07d9      	lsls	r1, r3, #31
 800f580:	d5d8      	bpl.n	800f534 <_printf_float+0x250>
 800f582:	ee18 3a10 	vmov	r3, s16
 800f586:	4652      	mov	r2, sl
 800f588:	4631      	mov	r1, r6
 800f58a:	4628      	mov	r0, r5
 800f58c:	47b8      	blx	r7
 800f58e:	3001      	adds	r0, #1
 800f590:	f43f af09 	beq.w	800f3a6 <_printf_float+0xc2>
 800f594:	f04f 0900 	mov.w	r9, #0
 800f598:	f104 0a1a 	add.w	sl, r4, #26
 800f59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f59e:	425b      	negs	r3, r3
 800f5a0:	454b      	cmp	r3, r9
 800f5a2:	dc01      	bgt.n	800f5a8 <_printf_float+0x2c4>
 800f5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5a6:	e792      	b.n	800f4ce <_printf_float+0x1ea>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	4652      	mov	r2, sl
 800f5ac:	4631      	mov	r1, r6
 800f5ae:	4628      	mov	r0, r5
 800f5b0:	47b8      	blx	r7
 800f5b2:	3001      	adds	r0, #1
 800f5b4:	f43f aef7 	beq.w	800f3a6 <_printf_float+0xc2>
 800f5b8:	f109 0901 	add.w	r9, r9, #1
 800f5bc:	e7ee      	b.n	800f59c <_printf_float+0x2b8>
 800f5be:	bf00      	nop
 800f5c0:	7fefffff 	.word	0x7fefffff
 800f5c4:	08012f5c 	.word	0x08012f5c
 800f5c8:	08012f60 	.word	0x08012f60
 800f5cc:	08012f68 	.word	0x08012f68
 800f5d0:	08012f64 	.word	0x08012f64
 800f5d4:	08012f6c 	.word	0x08012f6c
 800f5d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	bfa8      	it	ge
 800f5e0:	461a      	movge	r2, r3
 800f5e2:	2a00      	cmp	r2, #0
 800f5e4:	4691      	mov	r9, r2
 800f5e6:	dc37      	bgt.n	800f658 <_printf_float+0x374>
 800f5e8:	f04f 0b00 	mov.w	fp, #0
 800f5ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5f0:	f104 021a 	add.w	r2, r4, #26
 800f5f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f5f6:	9305      	str	r3, [sp, #20]
 800f5f8:	eba3 0309 	sub.w	r3, r3, r9
 800f5fc:	455b      	cmp	r3, fp
 800f5fe:	dc33      	bgt.n	800f668 <_printf_float+0x384>
 800f600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f604:	429a      	cmp	r2, r3
 800f606:	db3b      	blt.n	800f680 <_printf_float+0x39c>
 800f608:	6823      	ldr	r3, [r4, #0]
 800f60a:	07da      	lsls	r2, r3, #31
 800f60c:	d438      	bmi.n	800f680 <_printf_float+0x39c>
 800f60e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f610:	9b05      	ldr	r3, [sp, #20]
 800f612:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	eba2 0901 	sub.w	r9, r2, r1
 800f61a:	4599      	cmp	r9, r3
 800f61c:	bfa8      	it	ge
 800f61e:	4699      	movge	r9, r3
 800f620:	f1b9 0f00 	cmp.w	r9, #0
 800f624:	dc35      	bgt.n	800f692 <_printf_float+0x3ae>
 800f626:	f04f 0800 	mov.w	r8, #0
 800f62a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f62e:	f104 0a1a 	add.w	sl, r4, #26
 800f632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f636:	1a9b      	subs	r3, r3, r2
 800f638:	eba3 0309 	sub.w	r3, r3, r9
 800f63c:	4543      	cmp	r3, r8
 800f63e:	f77f af79 	ble.w	800f534 <_printf_float+0x250>
 800f642:	2301      	movs	r3, #1
 800f644:	4652      	mov	r2, sl
 800f646:	4631      	mov	r1, r6
 800f648:	4628      	mov	r0, r5
 800f64a:	47b8      	blx	r7
 800f64c:	3001      	adds	r0, #1
 800f64e:	f43f aeaa 	beq.w	800f3a6 <_printf_float+0xc2>
 800f652:	f108 0801 	add.w	r8, r8, #1
 800f656:	e7ec      	b.n	800f632 <_printf_float+0x34e>
 800f658:	4613      	mov	r3, r2
 800f65a:	4631      	mov	r1, r6
 800f65c:	4642      	mov	r2, r8
 800f65e:	4628      	mov	r0, r5
 800f660:	47b8      	blx	r7
 800f662:	3001      	adds	r0, #1
 800f664:	d1c0      	bne.n	800f5e8 <_printf_float+0x304>
 800f666:	e69e      	b.n	800f3a6 <_printf_float+0xc2>
 800f668:	2301      	movs	r3, #1
 800f66a:	4631      	mov	r1, r6
 800f66c:	4628      	mov	r0, r5
 800f66e:	9205      	str	r2, [sp, #20]
 800f670:	47b8      	blx	r7
 800f672:	3001      	adds	r0, #1
 800f674:	f43f ae97 	beq.w	800f3a6 <_printf_float+0xc2>
 800f678:	9a05      	ldr	r2, [sp, #20]
 800f67a:	f10b 0b01 	add.w	fp, fp, #1
 800f67e:	e7b9      	b.n	800f5f4 <_printf_float+0x310>
 800f680:	ee18 3a10 	vmov	r3, s16
 800f684:	4652      	mov	r2, sl
 800f686:	4631      	mov	r1, r6
 800f688:	4628      	mov	r0, r5
 800f68a:	47b8      	blx	r7
 800f68c:	3001      	adds	r0, #1
 800f68e:	d1be      	bne.n	800f60e <_printf_float+0x32a>
 800f690:	e689      	b.n	800f3a6 <_printf_float+0xc2>
 800f692:	9a05      	ldr	r2, [sp, #20]
 800f694:	464b      	mov	r3, r9
 800f696:	4442      	add	r2, r8
 800f698:	4631      	mov	r1, r6
 800f69a:	4628      	mov	r0, r5
 800f69c:	47b8      	blx	r7
 800f69e:	3001      	adds	r0, #1
 800f6a0:	d1c1      	bne.n	800f626 <_printf_float+0x342>
 800f6a2:	e680      	b.n	800f3a6 <_printf_float+0xc2>
 800f6a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6a6:	2a01      	cmp	r2, #1
 800f6a8:	dc01      	bgt.n	800f6ae <_printf_float+0x3ca>
 800f6aa:	07db      	lsls	r3, r3, #31
 800f6ac:	d538      	bpl.n	800f720 <_printf_float+0x43c>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	4642      	mov	r2, r8
 800f6b2:	4631      	mov	r1, r6
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	47b8      	blx	r7
 800f6b8:	3001      	adds	r0, #1
 800f6ba:	f43f ae74 	beq.w	800f3a6 <_printf_float+0xc2>
 800f6be:	ee18 3a10 	vmov	r3, s16
 800f6c2:	4652      	mov	r2, sl
 800f6c4:	4631      	mov	r1, r6
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	47b8      	blx	r7
 800f6ca:	3001      	adds	r0, #1
 800f6cc:	f43f ae6b 	beq.w	800f3a6 <_printf_float+0xc2>
 800f6d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	f7f1 fa06 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6dc:	b9d8      	cbnz	r0, 800f716 <_printf_float+0x432>
 800f6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6e0:	f108 0201 	add.w	r2, r8, #1
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	4631      	mov	r1, r6
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	47b8      	blx	r7
 800f6ec:	3001      	adds	r0, #1
 800f6ee:	d10e      	bne.n	800f70e <_printf_float+0x42a>
 800f6f0:	e659      	b.n	800f3a6 <_printf_float+0xc2>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	4652      	mov	r2, sl
 800f6f6:	4631      	mov	r1, r6
 800f6f8:	4628      	mov	r0, r5
 800f6fa:	47b8      	blx	r7
 800f6fc:	3001      	adds	r0, #1
 800f6fe:	f43f ae52 	beq.w	800f3a6 <_printf_float+0xc2>
 800f702:	f108 0801 	add.w	r8, r8, #1
 800f706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f708:	3b01      	subs	r3, #1
 800f70a:	4543      	cmp	r3, r8
 800f70c:	dcf1      	bgt.n	800f6f2 <_printf_float+0x40e>
 800f70e:	464b      	mov	r3, r9
 800f710:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f714:	e6dc      	b.n	800f4d0 <_printf_float+0x1ec>
 800f716:	f04f 0800 	mov.w	r8, #0
 800f71a:	f104 0a1a 	add.w	sl, r4, #26
 800f71e:	e7f2      	b.n	800f706 <_printf_float+0x422>
 800f720:	2301      	movs	r3, #1
 800f722:	4642      	mov	r2, r8
 800f724:	e7df      	b.n	800f6e6 <_printf_float+0x402>
 800f726:	2301      	movs	r3, #1
 800f728:	464a      	mov	r2, r9
 800f72a:	4631      	mov	r1, r6
 800f72c:	4628      	mov	r0, r5
 800f72e:	47b8      	blx	r7
 800f730:	3001      	adds	r0, #1
 800f732:	f43f ae38 	beq.w	800f3a6 <_printf_float+0xc2>
 800f736:	f108 0801 	add.w	r8, r8, #1
 800f73a:	68e3      	ldr	r3, [r4, #12]
 800f73c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f73e:	1a5b      	subs	r3, r3, r1
 800f740:	4543      	cmp	r3, r8
 800f742:	dcf0      	bgt.n	800f726 <_printf_float+0x442>
 800f744:	e6fa      	b.n	800f53c <_printf_float+0x258>
 800f746:	f04f 0800 	mov.w	r8, #0
 800f74a:	f104 0919 	add.w	r9, r4, #25
 800f74e:	e7f4      	b.n	800f73a <_printf_float+0x456>

0800f750 <_printf_common>:
 800f750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f754:	4616      	mov	r6, r2
 800f756:	4699      	mov	r9, r3
 800f758:	688a      	ldr	r2, [r1, #8]
 800f75a:	690b      	ldr	r3, [r1, #16]
 800f75c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f760:	4293      	cmp	r3, r2
 800f762:	bfb8      	it	lt
 800f764:	4613      	movlt	r3, r2
 800f766:	6033      	str	r3, [r6, #0]
 800f768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f76c:	4607      	mov	r7, r0
 800f76e:	460c      	mov	r4, r1
 800f770:	b10a      	cbz	r2, 800f776 <_printf_common+0x26>
 800f772:	3301      	adds	r3, #1
 800f774:	6033      	str	r3, [r6, #0]
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	0699      	lsls	r1, r3, #26
 800f77a:	bf42      	ittt	mi
 800f77c:	6833      	ldrmi	r3, [r6, #0]
 800f77e:	3302      	addmi	r3, #2
 800f780:	6033      	strmi	r3, [r6, #0]
 800f782:	6825      	ldr	r5, [r4, #0]
 800f784:	f015 0506 	ands.w	r5, r5, #6
 800f788:	d106      	bne.n	800f798 <_printf_common+0x48>
 800f78a:	f104 0a19 	add.w	sl, r4, #25
 800f78e:	68e3      	ldr	r3, [r4, #12]
 800f790:	6832      	ldr	r2, [r6, #0]
 800f792:	1a9b      	subs	r3, r3, r2
 800f794:	42ab      	cmp	r3, r5
 800f796:	dc26      	bgt.n	800f7e6 <_printf_common+0x96>
 800f798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f79c:	1e13      	subs	r3, r2, #0
 800f79e:	6822      	ldr	r2, [r4, #0]
 800f7a0:	bf18      	it	ne
 800f7a2:	2301      	movne	r3, #1
 800f7a4:	0692      	lsls	r2, r2, #26
 800f7a6:	d42b      	bmi.n	800f800 <_printf_common+0xb0>
 800f7a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7ac:	4649      	mov	r1, r9
 800f7ae:	4638      	mov	r0, r7
 800f7b0:	47c0      	blx	r8
 800f7b2:	3001      	adds	r0, #1
 800f7b4:	d01e      	beq.n	800f7f4 <_printf_common+0xa4>
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	68e5      	ldr	r5, [r4, #12]
 800f7ba:	6832      	ldr	r2, [r6, #0]
 800f7bc:	f003 0306 	and.w	r3, r3, #6
 800f7c0:	2b04      	cmp	r3, #4
 800f7c2:	bf08      	it	eq
 800f7c4:	1aad      	subeq	r5, r5, r2
 800f7c6:	68a3      	ldr	r3, [r4, #8]
 800f7c8:	6922      	ldr	r2, [r4, #16]
 800f7ca:	bf0c      	ite	eq
 800f7cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7d0:	2500      	movne	r5, #0
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	bfc4      	itt	gt
 800f7d6:	1a9b      	subgt	r3, r3, r2
 800f7d8:	18ed      	addgt	r5, r5, r3
 800f7da:	2600      	movs	r6, #0
 800f7dc:	341a      	adds	r4, #26
 800f7de:	42b5      	cmp	r5, r6
 800f7e0:	d11a      	bne.n	800f818 <_printf_common+0xc8>
 800f7e2:	2000      	movs	r0, #0
 800f7e4:	e008      	b.n	800f7f8 <_printf_common+0xa8>
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	4652      	mov	r2, sl
 800f7ea:	4649      	mov	r1, r9
 800f7ec:	4638      	mov	r0, r7
 800f7ee:	47c0      	blx	r8
 800f7f0:	3001      	adds	r0, #1
 800f7f2:	d103      	bne.n	800f7fc <_printf_common+0xac>
 800f7f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7fc:	3501      	adds	r5, #1
 800f7fe:	e7c6      	b.n	800f78e <_printf_common+0x3e>
 800f800:	18e1      	adds	r1, r4, r3
 800f802:	1c5a      	adds	r2, r3, #1
 800f804:	2030      	movs	r0, #48	; 0x30
 800f806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f80a:	4422      	add	r2, r4
 800f80c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f814:	3302      	adds	r3, #2
 800f816:	e7c7      	b.n	800f7a8 <_printf_common+0x58>
 800f818:	2301      	movs	r3, #1
 800f81a:	4622      	mov	r2, r4
 800f81c:	4649      	mov	r1, r9
 800f81e:	4638      	mov	r0, r7
 800f820:	47c0      	blx	r8
 800f822:	3001      	adds	r0, #1
 800f824:	d0e6      	beq.n	800f7f4 <_printf_common+0xa4>
 800f826:	3601      	adds	r6, #1
 800f828:	e7d9      	b.n	800f7de <_printf_common+0x8e>
	...

0800f82c <_printf_i>:
 800f82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f830:	460c      	mov	r4, r1
 800f832:	4691      	mov	r9, r2
 800f834:	7e27      	ldrb	r7, [r4, #24]
 800f836:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f838:	2f78      	cmp	r7, #120	; 0x78
 800f83a:	4680      	mov	r8, r0
 800f83c:	469a      	mov	sl, r3
 800f83e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f842:	d807      	bhi.n	800f854 <_printf_i+0x28>
 800f844:	2f62      	cmp	r7, #98	; 0x62
 800f846:	d80a      	bhi.n	800f85e <_printf_i+0x32>
 800f848:	2f00      	cmp	r7, #0
 800f84a:	f000 80d8 	beq.w	800f9fe <_printf_i+0x1d2>
 800f84e:	2f58      	cmp	r7, #88	; 0x58
 800f850:	f000 80a3 	beq.w	800f99a <_printf_i+0x16e>
 800f854:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f85c:	e03a      	b.n	800f8d4 <_printf_i+0xa8>
 800f85e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f862:	2b15      	cmp	r3, #21
 800f864:	d8f6      	bhi.n	800f854 <_printf_i+0x28>
 800f866:	a001      	add	r0, pc, #4	; (adr r0, 800f86c <_printf_i+0x40>)
 800f868:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f86c:	0800f8c5 	.word	0x0800f8c5
 800f870:	0800f8d9 	.word	0x0800f8d9
 800f874:	0800f855 	.word	0x0800f855
 800f878:	0800f855 	.word	0x0800f855
 800f87c:	0800f855 	.word	0x0800f855
 800f880:	0800f855 	.word	0x0800f855
 800f884:	0800f8d9 	.word	0x0800f8d9
 800f888:	0800f855 	.word	0x0800f855
 800f88c:	0800f855 	.word	0x0800f855
 800f890:	0800f855 	.word	0x0800f855
 800f894:	0800f855 	.word	0x0800f855
 800f898:	0800f9e5 	.word	0x0800f9e5
 800f89c:	0800f909 	.word	0x0800f909
 800f8a0:	0800f9c7 	.word	0x0800f9c7
 800f8a4:	0800f855 	.word	0x0800f855
 800f8a8:	0800f855 	.word	0x0800f855
 800f8ac:	0800fa07 	.word	0x0800fa07
 800f8b0:	0800f855 	.word	0x0800f855
 800f8b4:	0800f909 	.word	0x0800f909
 800f8b8:	0800f855 	.word	0x0800f855
 800f8bc:	0800f855 	.word	0x0800f855
 800f8c0:	0800f9cf 	.word	0x0800f9cf
 800f8c4:	680b      	ldr	r3, [r1, #0]
 800f8c6:	1d1a      	adds	r2, r3, #4
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	600a      	str	r2, [r1, #0]
 800f8cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f8d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	e0a3      	b.n	800fa20 <_printf_i+0x1f4>
 800f8d8:	6825      	ldr	r5, [r4, #0]
 800f8da:	6808      	ldr	r0, [r1, #0]
 800f8dc:	062e      	lsls	r6, r5, #24
 800f8de:	f100 0304 	add.w	r3, r0, #4
 800f8e2:	d50a      	bpl.n	800f8fa <_printf_i+0xce>
 800f8e4:	6805      	ldr	r5, [r0, #0]
 800f8e6:	600b      	str	r3, [r1, #0]
 800f8e8:	2d00      	cmp	r5, #0
 800f8ea:	da03      	bge.n	800f8f4 <_printf_i+0xc8>
 800f8ec:	232d      	movs	r3, #45	; 0x2d
 800f8ee:	426d      	negs	r5, r5
 800f8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8f4:	485e      	ldr	r0, [pc, #376]	; (800fa70 <_printf_i+0x244>)
 800f8f6:	230a      	movs	r3, #10
 800f8f8:	e019      	b.n	800f92e <_printf_i+0x102>
 800f8fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f8fe:	6805      	ldr	r5, [r0, #0]
 800f900:	600b      	str	r3, [r1, #0]
 800f902:	bf18      	it	ne
 800f904:	b22d      	sxthne	r5, r5
 800f906:	e7ef      	b.n	800f8e8 <_printf_i+0xbc>
 800f908:	680b      	ldr	r3, [r1, #0]
 800f90a:	6825      	ldr	r5, [r4, #0]
 800f90c:	1d18      	adds	r0, r3, #4
 800f90e:	6008      	str	r0, [r1, #0]
 800f910:	0628      	lsls	r0, r5, #24
 800f912:	d501      	bpl.n	800f918 <_printf_i+0xec>
 800f914:	681d      	ldr	r5, [r3, #0]
 800f916:	e002      	b.n	800f91e <_printf_i+0xf2>
 800f918:	0669      	lsls	r1, r5, #25
 800f91a:	d5fb      	bpl.n	800f914 <_printf_i+0xe8>
 800f91c:	881d      	ldrh	r5, [r3, #0]
 800f91e:	4854      	ldr	r0, [pc, #336]	; (800fa70 <_printf_i+0x244>)
 800f920:	2f6f      	cmp	r7, #111	; 0x6f
 800f922:	bf0c      	ite	eq
 800f924:	2308      	moveq	r3, #8
 800f926:	230a      	movne	r3, #10
 800f928:	2100      	movs	r1, #0
 800f92a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f92e:	6866      	ldr	r6, [r4, #4]
 800f930:	60a6      	str	r6, [r4, #8]
 800f932:	2e00      	cmp	r6, #0
 800f934:	bfa2      	ittt	ge
 800f936:	6821      	ldrge	r1, [r4, #0]
 800f938:	f021 0104 	bicge.w	r1, r1, #4
 800f93c:	6021      	strge	r1, [r4, #0]
 800f93e:	b90d      	cbnz	r5, 800f944 <_printf_i+0x118>
 800f940:	2e00      	cmp	r6, #0
 800f942:	d04d      	beq.n	800f9e0 <_printf_i+0x1b4>
 800f944:	4616      	mov	r6, r2
 800f946:	fbb5 f1f3 	udiv	r1, r5, r3
 800f94a:	fb03 5711 	mls	r7, r3, r1, r5
 800f94e:	5dc7      	ldrb	r7, [r0, r7]
 800f950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f954:	462f      	mov	r7, r5
 800f956:	42bb      	cmp	r3, r7
 800f958:	460d      	mov	r5, r1
 800f95a:	d9f4      	bls.n	800f946 <_printf_i+0x11a>
 800f95c:	2b08      	cmp	r3, #8
 800f95e:	d10b      	bne.n	800f978 <_printf_i+0x14c>
 800f960:	6823      	ldr	r3, [r4, #0]
 800f962:	07df      	lsls	r7, r3, #31
 800f964:	d508      	bpl.n	800f978 <_printf_i+0x14c>
 800f966:	6923      	ldr	r3, [r4, #16]
 800f968:	6861      	ldr	r1, [r4, #4]
 800f96a:	4299      	cmp	r1, r3
 800f96c:	bfde      	ittt	le
 800f96e:	2330      	movle	r3, #48	; 0x30
 800f970:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f974:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f978:	1b92      	subs	r2, r2, r6
 800f97a:	6122      	str	r2, [r4, #16]
 800f97c:	f8cd a000 	str.w	sl, [sp]
 800f980:	464b      	mov	r3, r9
 800f982:	aa03      	add	r2, sp, #12
 800f984:	4621      	mov	r1, r4
 800f986:	4640      	mov	r0, r8
 800f988:	f7ff fee2 	bl	800f750 <_printf_common>
 800f98c:	3001      	adds	r0, #1
 800f98e:	d14c      	bne.n	800fa2a <_printf_i+0x1fe>
 800f990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f994:	b004      	add	sp, #16
 800f996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f99a:	4835      	ldr	r0, [pc, #212]	; (800fa70 <_printf_i+0x244>)
 800f99c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f9a0:	6823      	ldr	r3, [r4, #0]
 800f9a2:	680e      	ldr	r6, [r1, #0]
 800f9a4:	061f      	lsls	r7, r3, #24
 800f9a6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f9aa:	600e      	str	r6, [r1, #0]
 800f9ac:	d514      	bpl.n	800f9d8 <_printf_i+0x1ac>
 800f9ae:	07d9      	lsls	r1, r3, #31
 800f9b0:	bf44      	itt	mi
 800f9b2:	f043 0320 	orrmi.w	r3, r3, #32
 800f9b6:	6023      	strmi	r3, [r4, #0]
 800f9b8:	b91d      	cbnz	r5, 800f9c2 <_printf_i+0x196>
 800f9ba:	6823      	ldr	r3, [r4, #0]
 800f9bc:	f023 0320 	bic.w	r3, r3, #32
 800f9c0:	6023      	str	r3, [r4, #0]
 800f9c2:	2310      	movs	r3, #16
 800f9c4:	e7b0      	b.n	800f928 <_printf_i+0xfc>
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	f043 0320 	orr.w	r3, r3, #32
 800f9cc:	6023      	str	r3, [r4, #0]
 800f9ce:	2378      	movs	r3, #120	; 0x78
 800f9d0:	4828      	ldr	r0, [pc, #160]	; (800fa74 <_printf_i+0x248>)
 800f9d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f9d6:	e7e3      	b.n	800f9a0 <_printf_i+0x174>
 800f9d8:	065e      	lsls	r6, r3, #25
 800f9da:	bf48      	it	mi
 800f9dc:	b2ad      	uxthmi	r5, r5
 800f9de:	e7e6      	b.n	800f9ae <_printf_i+0x182>
 800f9e0:	4616      	mov	r6, r2
 800f9e2:	e7bb      	b.n	800f95c <_printf_i+0x130>
 800f9e4:	680b      	ldr	r3, [r1, #0]
 800f9e6:	6826      	ldr	r6, [r4, #0]
 800f9e8:	6960      	ldr	r0, [r4, #20]
 800f9ea:	1d1d      	adds	r5, r3, #4
 800f9ec:	600d      	str	r5, [r1, #0]
 800f9ee:	0635      	lsls	r5, r6, #24
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	d501      	bpl.n	800f9f8 <_printf_i+0x1cc>
 800f9f4:	6018      	str	r0, [r3, #0]
 800f9f6:	e002      	b.n	800f9fe <_printf_i+0x1d2>
 800f9f8:	0671      	lsls	r1, r6, #25
 800f9fa:	d5fb      	bpl.n	800f9f4 <_printf_i+0x1c8>
 800f9fc:	8018      	strh	r0, [r3, #0]
 800f9fe:	2300      	movs	r3, #0
 800fa00:	6123      	str	r3, [r4, #16]
 800fa02:	4616      	mov	r6, r2
 800fa04:	e7ba      	b.n	800f97c <_printf_i+0x150>
 800fa06:	680b      	ldr	r3, [r1, #0]
 800fa08:	1d1a      	adds	r2, r3, #4
 800fa0a:	600a      	str	r2, [r1, #0]
 800fa0c:	681e      	ldr	r6, [r3, #0]
 800fa0e:	6862      	ldr	r2, [r4, #4]
 800fa10:	2100      	movs	r1, #0
 800fa12:	4630      	mov	r0, r6
 800fa14:	f7f0 fbf4 	bl	8000200 <memchr>
 800fa18:	b108      	cbz	r0, 800fa1e <_printf_i+0x1f2>
 800fa1a:	1b80      	subs	r0, r0, r6
 800fa1c:	6060      	str	r0, [r4, #4]
 800fa1e:	6863      	ldr	r3, [r4, #4]
 800fa20:	6123      	str	r3, [r4, #16]
 800fa22:	2300      	movs	r3, #0
 800fa24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa28:	e7a8      	b.n	800f97c <_printf_i+0x150>
 800fa2a:	6923      	ldr	r3, [r4, #16]
 800fa2c:	4632      	mov	r2, r6
 800fa2e:	4649      	mov	r1, r9
 800fa30:	4640      	mov	r0, r8
 800fa32:	47d0      	blx	sl
 800fa34:	3001      	adds	r0, #1
 800fa36:	d0ab      	beq.n	800f990 <_printf_i+0x164>
 800fa38:	6823      	ldr	r3, [r4, #0]
 800fa3a:	079b      	lsls	r3, r3, #30
 800fa3c:	d413      	bmi.n	800fa66 <_printf_i+0x23a>
 800fa3e:	68e0      	ldr	r0, [r4, #12]
 800fa40:	9b03      	ldr	r3, [sp, #12]
 800fa42:	4298      	cmp	r0, r3
 800fa44:	bfb8      	it	lt
 800fa46:	4618      	movlt	r0, r3
 800fa48:	e7a4      	b.n	800f994 <_printf_i+0x168>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	4632      	mov	r2, r6
 800fa4e:	4649      	mov	r1, r9
 800fa50:	4640      	mov	r0, r8
 800fa52:	47d0      	blx	sl
 800fa54:	3001      	adds	r0, #1
 800fa56:	d09b      	beq.n	800f990 <_printf_i+0x164>
 800fa58:	3501      	adds	r5, #1
 800fa5a:	68e3      	ldr	r3, [r4, #12]
 800fa5c:	9903      	ldr	r1, [sp, #12]
 800fa5e:	1a5b      	subs	r3, r3, r1
 800fa60:	42ab      	cmp	r3, r5
 800fa62:	dcf2      	bgt.n	800fa4a <_printf_i+0x21e>
 800fa64:	e7eb      	b.n	800fa3e <_printf_i+0x212>
 800fa66:	2500      	movs	r5, #0
 800fa68:	f104 0619 	add.w	r6, r4, #25
 800fa6c:	e7f5      	b.n	800fa5a <_printf_i+0x22e>
 800fa6e:	bf00      	nop
 800fa70:	08012f6e 	.word	0x08012f6e
 800fa74:	08012f7f 	.word	0x08012f7f

0800fa78 <_sbrk_r>:
 800fa78:	b538      	push	{r3, r4, r5, lr}
 800fa7a:	4d06      	ldr	r5, [pc, #24]	; (800fa94 <_sbrk_r+0x1c>)
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	4604      	mov	r4, r0
 800fa80:	4608      	mov	r0, r1
 800fa82:	602b      	str	r3, [r5, #0]
 800fa84:	f003 f96a 	bl	8012d5c <_sbrk>
 800fa88:	1c43      	adds	r3, r0, #1
 800fa8a:	d102      	bne.n	800fa92 <_sbrk_r+0x1a>
 800fa8c:	682b      	ldr	r3, [r5, #0]
 800fa8e:	b103      	cbz	r3, 800fa92 <_sbrk_r+0x1a>
 800fa90:	6023      	str	r3, [r4, #0]
 800fa92:	bd38      	pop	{r3, r4, r5, pc}
 800fa94:	20008230 	.word	0x20008230

0800fa98 <_vsniprintf_r>:
 800fa98:	b530      	push	{r4, r5, lr}
 800fa9a:	1e14      	subs	r4, r2, #0
 800fa9c:	4605      	mov	r5, r0
 800fa9e:	b09b      	sub	sp, #108	; 0x6c
 800faa0:	4618      	mov	r0, r3
 800faa2:	da05      	bge.n	800fab0 <_vsniprintf_r+0x18>
 800faa4:	238b      	movs	r3, #139	; 0x8b
 800faa6:	602b      	str	r3, [r5, #0]
 800faa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800faac:	b01b      	add	sp, #108	; 0x6c
 800faae:	bd30      	pop	{r4, r5, pc}
 800fab0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fab4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fab8:	bf14      	ite	ne
 800faba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fabe:	4623      	moveq	r3, r4
 800fac0:	9302      	str	r3, [sp, #8]
 800fac2:	9305      	str	r3, [sp, #20]
 800fac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fac8:	9100      	str	r1, [sp, #0]
 800faca:	9104      	str	r1, [sp, #16]
 800facc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fad0:	4602      	mov	r2, r0
 800fad2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fad4:	4669      	mov	r1, sp
 800fad6:	4628      	mov	r0, r5
 800fad8:	f001 fa8a 	bl	8010ff0 <_svfiprintf_r>
 800fadc:	1c43      	adds	r3, r0, #1
 800fade:	bfbc      	itt	lt
 800fae0:	238b      	movlt	r3, #139	; 0x8b
 800fae2:	602b      	strlt	r3, [r5, #0]
 800fae4:	2c00      	cmp	r4, #0
 800fae6:	d0e1      	beq.n	800faac <_vsniprintf_r+0x14>
 800fae8:	9b00      	ldr	r3, [sp, #0]
 800faea:	2200      	movs	r2, #0
 800faec:	701a      	strb	r2, [r3, #0]
 800faee:	e7dd      	b.n	800faac <_vsniprintf_r+0x14>

0800faf0 <vsniprintf>:
 800faf0:	b507      	push	{r0, r1, r2, lr}
 800faf2:	9300      	str	r3, [sp, #0]
 800faf4:	4613      	mov	r3, r2
 800faf6:	460a      	mov	r2, r1
 800faf8:	4601      	mov	r1, r0
 800fafa:	4803      	ldr	r0, [pc, #12]	; (800fb08 <vsniprintf+0x18>)
 800fafc:	6800      	ldr	r0, [r0, #0]
 800fafe:	f7ff ffcb 	bl	800fa98 <_vsniprintf_r>
 800fb02:	b003      	add	sp, #12
 800fb04:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb08:	20000018 	.word	0x20000018

0800fb0c <quorem>:
 800fb0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb10:	6903      	ldr	r3, [r0, #16]
 800fb12:	690c      	ldr	r4, [r1, #16]
 800fb14:	42a3      	cmp	r3, r4
 800fb16:	4607      	mov	r7, r0
 800fb18:	f2c0 8081 	blt.w	800fc1e <quorem+0x112>
 800fb1c:	3c01      	subs	r4, #1
 800fb1e:	f101 0814 	add.w	r8, r1, #20
 800fb22:	f100 0514 	add.w	r5, r0, #20
 800fb26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb2a:	9301      	str	r3, [sp, #4]
 800fb2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb34:	3301      	adds	r3, #1
 800fb36:	429a      	cmp	r2, r3
 800fb38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb40:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb44:	d331      	bcc.n	800fbaa <quorem+0x9e>
 800fb46:	f04f 0e00 	mov.w	lr, #0
 800fb4a:	4640      	mov	r0, r8
 800fb4c:	46ac      	mov	ip, r5
 800fb4e:	46f2      	mov	sl, lr
 800fb50:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb54:	b293      	uxth	r3, r2
 800fb56:	fb06 e303 	mla	r3, r6, r3, lr
 800fb5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	ebaa 0303 	sub.w	r3, sl, r3
 800fb64:	0c12      	lsrs	r2, r2, #16
 800fb66:	f8dc a000 	ldr.w	sl, [ip]
 800fb6a:	fb06 e202 	mla	r2, r6, r2, lr
 800fb6e:	fa13 f38a 	uxtah	r3, r3, sl
 800fb72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fb76:	fa1f fa82 	uxth.w	sl, r2
 800fb7a:	f8dc 2000 	ldr.w	r2, [ip]
 800fb7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fb82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb8c:	4581      	cmp	r9, r0
 800fb8e:	f84c 3b04 	str.w	r3, [ip], #4
 800fb92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fb96:	d2db      	bcs.n	800fb50 <quorem+0x44>
 800fb98:	f855 300b 	ldr.w	r3, [r5, fp]
 800fb9c:	b92b      	cbnz	r3, 800fbaa <quorem+0x9e>
 800fb9e:	9b01      	ldr	r3, [sp, #4]
 800fba0:	3b04      	subs	r3, #4
 800fba2:	429d      	cmp	r5, r3
 800fba4:	461a      	mov	r2, r3
 800fba6:	d32e      	bcc.n	800fc06 <quorem+0xfa>
 800fba8:	613c      	str	r4, [r7, #16]
 800fbaa:	4638      	mov	r0, r7
 800fbac:	f001 f8b6 	bl	8010d1c <__mcmp>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	db24      	blt.n	800fbfe <quorem+0xf2>
 800fbb4:	3601      	adds	r6, #1
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f04f 0c00 	mov.w	ip, #0
 800fbbc:	f858 2b04 	ldr.w	r2, [r8], #4
 800fbc0:	f8d0 e000 	ldr.w	lr, [r0]
 800fbc4:	b293      	uxth	r3, r2
 800fbc6:	ebac 0303 	sub.w	r3, ip, r3
 800fbca:	0c12      	lsrs	r2, r2, #16
 800fbcc:	fa13 f38e 	uxtah	r3, r3, lr
 800fbd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fbd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbde:	45c1      	cmp	r9, r8
 800fbe0:	f840 3b04 	str.w	r3, [r0], #4
 800fbe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fbe8:	d2e8      	bcs.n	800fbbc <quorem+0xb0>
 800fbea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbf2:	b922      	cbnz	r2, 800fbfe <quorem+0xf2>
 800fbf4:	3b04      	subs	r3, #4
 800fbf6:	429d      	cmp	r5, r3
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	d30a      	bcc.n	800fc12 <quorem+0x106>
 800fbfc:	613c      	str	r4, [r7, #16]
 800fbfe:	4630      	mov	r0, r6
 800fc00:	b003      	add	sp, #12
 800fc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc06:	6812      	ldr	r2, [r2, #0]
 800fc08:	3b04      	subs	r3, #4
 800fc0a:	2a00      	cmp	r2, #0
 800fc0c:	d1cc      	bne.n	800fba8 <quorem+0x9c>
 800fc0e:	3c01      	subs	r4, #1
 800fc10:	e7c7      	b.n	800fba2 <quorem+0x96>
 800fc12:	6812      	ldr	r2, [r2, #0]
 800fc14:	3b04      	subs	r3, #4
 800fc16:	2a00      	cmp	r2, #0
 800fc18:	d1f0      	bne.n	800fbfc <quorem+0xf0>
 800fc1a:	3c01      	subs	r4, #1
 800fc1c:	e7eb      	b.n	800fbf6 <quorem+0xea>
 800fc1e:	2000      	movs	r0, #0
 800fc20:	e7ee      	b.n	800fc00 <quorem+0xf4>
 800fc22:	0000      	movs	r0, r0
 800fc24:	0000      	movs	r0, r0
	...

0800fc28 <_dtoa_r>:
 800fc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2c:	ed2d 8b02 	vpush	{d8}
 800fc30:	ec57 6b10 	vmov	r6, r7, d0
 800fc34:	b095      	sub	sp, #84	; 0x54
 800fc36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc3c:	9105      	str	r1, [sp, #20]
 800fc3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fc42:	4604      	mov	r4, r0
 800fc44:	9209      	str	r2, [sp, #36]	; 0x24
 800fc46:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc48:	b975      	cbnz	r5, 800fc68 <_dtoa_r+0x40>
 800fc4a:	2010      	movs	r0, #16
 800fc4c:	f7ff f9da 	bl	800f004 <malloc>
 800fc50:	4602      	mov	r2, r0
 800fc52:	6260      	str	r0, [r4, #36]	; 0x24
 800fc54:	b920      	cbnz	r0, 800fc60 <_dtoa_r+0x38>
 800fc56:	4bb2      	ldr	r3, [pc, #712]	; (800ff20 <_dtoa_r+0x2f8>)
 800fc58:	21ea      	movs	r1, #234	; 0xea
 800fc5a:	48b2      	ldr	r0, [pc, #712]	; (800ff24 <_dtoa_r+0x2fc>)
 800fc5c:	f001 fac8 	bl	80111f0 <__assert_func>
 800fc60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc64:	6005      	str	r5, [r0, #0]
 800fc66:	60c5      	str	r5, [r0, #12]
 800fc68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc6a:	6819      	ldr	r1, [r3, #0]
 800fc6c:	b151      	cbz	r1, 800fc84 <_dtoa_r+0x5c>
 800fc6e:	685a      	ldr	r2, [r3, #4]
 800fc70:	604a      	str	r2, [r1, #4]
 800fc72:	2301      	movs	r3, #1
 800fc74:	4093      	lsls	r3, r2
 800fc76:	608b      	str	r3, [r1, #8]
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f000 fe11 	bl	80108a0 <_Bfree>
 800fc7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc80:	2200      	movs	r2, #0
 800fc82:	601a      	str	r2, [r3, #0]
 800fc84:	1e3b      	subs	r3, r7, #0
 800fc86:	bfb9      	ittee	lt
 800fc88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fc8c:	9303      	strlt	r3, [sp, #12]
 800fc8e:	2300      	movge	r3, #0
 800fc90:	f8c8 3000 	strge.w	r3, [r8]
 800fc94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fc98:	4ba3      	ldr	r3, [pc, #652]	; (800ff28 <_dtoa_r+0x300>)
 800fc9a:	bfbc      	itt	lt
 800fc9c:	2201      	movlt	r2, #1
 800fc9e:	f8c8 2000 	strlt.w	r2, [r8]
 800fca2:	ea33 0309 	bics.w	r3, r3, r9
 800fca6:	d11b      	bne.n	800fce0 <_dtoa_r+0xb8>
 800fca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fcaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800fcae:	6013      	str	r3, [r2, #0]
 800fcb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcb4:	4333      	orrs	r3, r6
 800fcb6:	f000 857a 	beq.w	80107ae <_dtoa_r+0xb86>
 800fcba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcbc:	b963      	cbnz	r3, 800fcd8 <_dtoa_r+0xb0>
 800fcbe:	4b9b      	ldr	r3, [pc, #620]	; (800ff2c <_dtoa_r+0x304>)
 800fcc0:	e024      	b.n	800fd0c <_dtoa_r+0xe4>
 800fcc2:	4b9b      	ldr	r3, [pc, #620]	; (800ff30 <_dtoa_r+0x308>)
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	3308      	adds	r3, #8
 800fcc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fcca:	6013      	str	r3, [r2, #0]
 800fccc:	9800      	ldr	r0, [sp, #0]
 800fcce:	b015      	add	sp, #84	; 0x54
 800fcd0:	ecbd 8b02 	vpop	{d8}
 800fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd8:	4b94      	ldr	r3, [pc, #592]	; (800ff2c <_dtoa_r+0x304>)
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	3303      	adds	r3, #3
 800fcde:	e7f3      	b.n	800fcc8 <_dtoa_r+0xa0>
 800fce0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fce4:	2200      	movs	r2, #0
 800fce6:	ec51 0b17 	vmov	r0, r1, d7
 800fcea:	2300      	movs	r3, #0
 800fcec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fcf0:	f7f0 fefa 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcf4:	4680      	mov	r8, r0
 800fcf6:	b158      	cbz	r0, 800fd10 <_dtoa_r+0xe8>
 800fcf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	6013      	str	r3, [r2, #0]
 800fcfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	f000 8551 	beq.w	80107a8 <_dtoa_r+0xb80>
 800fd06:	488b      	ldr	r0, [pc, #556]	; (800ff34 <_dtoa_r+0x30c>)
 800fd08:	6018      	str	r0, [r3, #0]
 800fd0a:	1e43      	subs	r3, r0, #1
 800fd0c:	9300      	str	r3, [sp, #0]
 800fd0e:	e7dd      	b.n	800fccc <_dtoa_r+0xa4>
 800fd10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fd14:	aa12      	add	r2, sp, #72	; 0x48
 800fd16:	a913      	add	r1, sp, #76	; 0x4c
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f001 f8a3 	bl	8010e64 <__d2b>
 800fd1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd22:	4683      	mov	fp, r0
 800fd24:	2d00      	cmp	r5, #0
 800fd26:	d07c      	beq.n	800fe22 <_dtoa_r+0x1fa>
 800fd28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fd2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fd36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fd3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fd3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fd42:	4b7d      	ldr	r3, [pc, #500]	; (800ff38 <_dtoa_r+0x310>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	4630      	mov	r0, r6
 800fd48:	4639      	mov	r1, r7
 800fd4a:	f7f0 faad 	bl	80002a8 <__aeabi_dsub>
 800fd4e:	a36e      	add	r3, pc, #440	; (adr r3, 800ff08 <_dtoa_r+0x2e0>)
 800fd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd54:	f7f0 fc60 	bl	8000618 <__aeabi_dmul>
 800fd58:	a36d      	add	r3, pc, #436	; (adr r3, 800ff10 <_dtoa_r+0x2e8>)
 800fd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5e:	f7f0 faa5 	bl	80002ac <__adddf3>
 800fd62:	4606      	mov	r6, r0
 800fd64:	4628      	mov	r0, r5
 800fd66:	460f      	mov	r7, r1
 800fd68:	f7f0 fbec 	bl	8000544 <__aeabi_i2d>
 800fd6c:	a36a      	add	r3, pc, #424	; (adr r3, 800ff18 <_dtoa_r+0x2f0>)
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	f7f0 fc51 	bl	8000618 <__aeabi_dmul>
 800fd76:	4602      	mov	r2, r0
 800fd78:	460b      	mov	r3, r1
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	4639      	mov	r1, r7
 800fd7e:	f7f0 fa95 	bl	80002ac <__adddf3>
 800fd82:	4606      	mov	r6, r0
 800fd84:	460f      	mov	r7, r1
 800fd86:	f7f0 fef7 	bl	8000b78 <__aeabi_d2iz>
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	4682      	mov	sl, r0
 800fd8e:	2300      	movs	r3, #0
 800fd90:	4630      	mov	r0, r6
 800fd92:	4639      	mov	r1, r7
 800fd94:	f7f0 feb2 	bl	8000afc <__aeabi_dcmplt>
 800fd98:	b148      	cbz	r0, 800fdae <_dtoa_r+0x186>
 800fd9a:	4650      	mov	r0, sl
 800fd9c:	f7f0 fbd2 	bl	8000544 <__aeabi_i2d>
 800fda0:	4632      	mov	r2, r6
 800fda2:	463b      	mov	r3, r7
 800fda4:	f7f0 fea0 	bl	8000ae8 <__aeabi_dcmpeq>
 800fda8:	b908      	cbnz	r0, 800fdae <_dtoa_r+0x186>
 800fdaa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fdae:	f1ba 0f16 	cmp.w	sl, #22
 800fdb2:	d854      	bhi.n	800fe5e <_dtoa_r+0x236>
 800fdb4:	4b61      	ldr	r3, [pc, #388]	; (800ff3c <_dtoa_r+0x314>)
 800fdb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fdc2:	f7f0 fe9b 	bl	8000afc <__aeabi_dcmplt>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d04b      	beq.n	800fe62 <_dtoa_r+0x23a>
 800fdca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fdce:	2300      	movs	r3, #0
 800fdd0:	930e      	str	r3, [sp, #56]	; 0x38
 800fdd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fdd4:	1b5d      	subs	r5, r3, r5
 800fdd6:	1e6b      	subs	r3, r5, #1
 800fdd8:	9304      	str	r3, [sp, #16]
 800fdda:	bf43      	ittte	mi
 800fddc:	2300      	movmi	r3, #0
 800fdde:	f1c5 0801 	rsbmi	r8, r5, #1
 800fde2:	9304      	strmi	r3, [sp, #16]
 800fde4:	f04f 0800 	movpl.w	r8, #0
 800fde8:	f1ba 0f00 	cmp.w	sl, #0
 800fdec:	db3b      	blt.n	800fe66 <_dtoa_r+0x23e>
 800fdee:	9b04      	ldr	r3, [sp, #16]
 800fdf0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fdf4:	4453      	add	r3, sl
 800fdf6:	9304      	str	r3, [sp, #16]
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	9306      	str	r3, [sp, #24]
 800fdfc:	9b05      	ldr	r3, [sp, #20]
 800fdfe:	2b09      	cmp	r3, #9
 800fe00:	d869      	bhi.n	800fed6 <_dtoa_r+0x2ae>
 800fe02:	2b05      	cmp	r3, #5
 800fe04:	bfc4      	itt	gt
 800fe06:	3b04      	subgt	r3, #4
 800fe08:	9305      	strgt	r3, [sp, #20]
 800fe0a:	9b05      	ldr	r3, [sp, #20]
 800fe0c:	f1a3 0302 	sub.w	r3, r3, #2
 800fe10:	bfcc      	ite	gt
 800fe12:	2500      	movgt	r5, #0
 800fe14:	2501      	movle	r5, #1
 800fe16:	2b03      	cmp	r3, #3
 800fe18:	d869      	bhi.n	800feee <_dtoa_r+0x2c6>
 800fe1a:	e8df f003 	tbb	[pc, r3]
 800fe1e:	4e2c      	.short	0x4e2c
 800fe20:	5a4c      	.short	0x5a4c
 800fe22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fe26:	441d      	add	r5, r3
 800fe28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fe2c:	2b20      	cmp	r3, #32
 800fe2e:	bfc1      	itttt	gt
 800fe30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fe34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fe38:	fa09 f303 	lslgt.w	r3, r9, r3
 800fe3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fe40:	bfda      	itte	le
 800fe42:	f1c3 0320 	rsble	r3, r3, #32
 800fe46:	fa06 f003 	lslle.w	r0, r6, r3
 800fe4a:	4318      	orrgt	r0, r3
 800fe4c:	f7f0 fb6a 	bl	8000524 <__aeabi_ui2d>
 800fe50:	2301      	movs	r3, #1
 800fe52:	4606      	mov	r6, r0
 800fe54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fe58:	3d01      	subs	r5, #1
 800fe5a:	9310      	str	r3, [sp, #64]	; 0x40
 800fe5c:	e771      	b.n	800fd42 <_dtoa_r+0x11a>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	e7b6      	b.n	800fdd0 <_dtoa_r+0x1a8>
 800fe62:	900e      	str	r0, [sp, #56]	; 0x38
 800fe64:	e7b5      	b.n	800fdd2 <_dtoa_r+0x1aa>
 800fe66:	f1ca 0300 	rsb	r3, sl, #0
 800fe6a:	9306      	str	r3, [sp, #24]
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	eba8 080a 	sub.w	r8, r8, sl
 800fe72:	930d      	str	r3, [sp, #52]	; 0x34
 800fe74:	e7c2      	b.n	800fdfc <_dtoa_r+0x1d4>
 800fe76:	2300      	movs	r3, #0
 800fe78:	9308      	str	r3, [sp, #32]
 800fe7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	dc39      	bgt.n	800fef4 <_dtoa_r+0x2cc>
 800fe80:	f04f 0901 	mov.w	r9, #1
 800fe84:	f8cd 9004 	str.w	r9, [sp, #4]
 800fe88:	464b      	mov	r3, r9
 800fe8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fe8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe90:	2200      	movs	r2, #0
 800fe92:	6042      	str	r2, [r0, #4]
 800fe94:	2204      	movs	r2, #4
 800fe96:	f102 0614 	add.w	r6, r2, #20
 800fe9a:	429e      	cmp	r6, r3
 800fe9c:	6841      	ldr	r1, [r0, #4]
 800fe9e:	d92f      	bls.n	800ff00 <_dtoa_r+0x2d8>
 800fea0:	4620      	mov	r0, r4
 800fea2:	f000 fcbd 	bl	8010820 <_Balloc>
 800fea6:	9000      	str	r0, [sp, #0]
 800fea8:	2800      	cmp	r0, #0
 800feaa:	d14b      	bne.n	800ff44 <_dtoa_r+0x31c>
 800feac:	4b24      	ldr	r3, [pc, #144]	; (800ff40 <_dtoa_r+0x318>)
 800feae:	4602      	mov	r2, r0
 800feb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800feb4:	e6d1      	b.n	800fc5a <_dtoa_r+0x32>
 800feb6:	2301      	movs	r3, #1
 800feb8:	e7de      	b.n	800fe78 <_dtoa_r+0x250>
 800feba:	2300      	movs	r3, #0
 800febc:	9308      	str	r3, [sp, #32]
 800febe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fec0:	eb0a 0903 	add.w	r9, sl, r3
 800fec4:	f109 0301 	add.w	r3, r9, #1
 800fec8:	2b01      	cmp	r3, #1
 800feca:	9301      	str	r3, [sp, #4]
 800fecc:	bfb8      	it	lt
 800fece:	2301      	movlt	r3, #1
 800fed0:	e7dd      	b.n	800fe8e <_dtoa_r+0x266>
 800fed2:	2301      	movs	r3, #1
 800fed4:	e7f2      	b.n	800febc <_dtoa_r+0x294>
 800fed6:	2501      	movs	r5, #1
 800fed8:	2300      	movs	r3, #0
 800feda:	9305      	str	r3, [sp, #20]
 800fedc:	9508      	str	r5, [sp, #32]
 800fede:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800fee2:	2200      	movs	r2, #0
 800fee4:	f8cd 9004 	str.w	r9, [sp, #4]
 800fee8:	2312      	movs	r3, #18
 800feea:	9209      	str	r2, [sp, #36]	; 0x24
 800feec:	e7cf      	b.n	800fe8e <_dtoa_r+0x266>
 800feee:	2301      	movs	r3, #1
 800fef0:	9308      	str	r3, [sp, #32]
 800fef2:	e7f4      	b.n	800fede <_dtoa_r+0x2b6>
 800fef4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fef8:	f8cd 9004 	str.w	r9, [sp, #4]
 800fefc:	464b      	mov	r3, r9
 800fefe:	e7c6      	b.n	800fe8e <_dtoa_r+0x266>
 800ff00:	3101      	adds	r1, #1
 800ff02:	6041      	str	r1, [r0, #4]
 800ff04:	0052      	lsls	r2, r2, #1
 800ff06:	e7c6      	b.n	800fe96 <_dtoa_r+0x26e>
 800ff08:	636f4361 	.word	0x636f4361
 800ff0c:	3fd287a7 	.word	0x3fd287a7
 800ff10:	8b60c8b3 	.word	0x8b60c8b3
 800ff14:	3fc68a28 	.word	0x3fc68a28
 800ff18:	509f79fb 	.word	0x509f79fb
 800ff1c:	3fd34413 	.word	0x3fd34413
 800ff20:	08012f9d 	.word	0x08012f9d
 800ff24:	08012fb4 	.word	0x08012fb4
 800ff28:	7ff00000 	.word	0x7ff00000
 800ff2c:	08012f99 	.word	0x08012f99
 800ff30:	08012f90 	.word	0x08012f90
 800ff34:	08012f6d 	.word	0x08012f6d
 800ff38:	3ff80000 	.word	0x3ff80000
 800ff3c:	080130b0 	.word	0x080130b0
 800ff40:	08013013 	.word	0x08013013
 800ff44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff46:	9a00      	ldr	r2, [sp, #0]
 800ff48:	601a      	str	r2, [r3, #0]
 800ff4a:	9b01      	ldr	r3, [sp, #4]
 800ff4c:	2b0e      	cmp	r3, #14
 800ff4e:	f200 80ad 	bhi.w	80100ac <_dtoa_r+0x484>
 800ff52:	2d00      	cmp	r5, #0
 800ff54:	f000 80aa 	beq.w	80100ac <_dtoa_r+0x484>
 800ff58:	f1ba 0f00 	cmp.w	sl, #0
 800ff5c:	dd36      	ble.n	800ffcc <_dtoa_r+0x3a4>
 800ff5e:	4ac3      	ldr	r2, [pc, #780]	; (801026c <_dtoa_r+0x644>)
 800ff60:	f00a 030f 	and.w	r3, sl, #15
 800ff64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff68:	ed93 7b00 	vldr	d7, [r3]
 800ff6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ff70:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ff74:	eeb0 8a47 	vmov.f32	s16, s14
 800ff78:	eef0 8a67 	vmov.f32	s17, s15
 800ff7c:	d016      	beq.n	800ffac <_dtoa_r+0x384>
 800ff7e:	4bbc      	ldr	r3, [pc, #752]	; (8010270 <_dtoa_r+0x648>)
 800ff80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ff84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff88:	f7f0 fc70 	bl	800086c <__aeabi_ddiv>
 800ff8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff90:	f007 070f 	and.w	r7, r7, #15
 800ff94:	2503      	movs	r5, #3
 800ff96:	4eb6      	ldr	r6, [pc, #728]	; (8010270 <_dtoa_r+0x648>)
 800ff98:	b957      	cbnz	r7, 800ffb0 <_dtoa_r+0x388>
 800ff9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff9e:	ec53 2b18 	vmov	r2, r3, d8
 800ffa2:	f7f0 fc63 	bl	800086c <__aeabi_ddiv>
 800ffa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffaa:	e029      	b.n	8010000 <_dtoa_r+0x3d8>
 800ffac:	2502      	movs	r5, #2
 800ffae:	e7f2      	b.n	800ff96 <_dtoa_r+0x36e>
 800ffb0:	07f9      	lsls	r1, r7, #31
 800ffb2:	d508      	bpl.n	800ffc6 <_dtoa_r+0x39e>
 800ffb4:	ec51 0b18 	vmov	r0, r1, d8
 800ffb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ffbc:	f7f0 fb2c 	bl	8000618 <__aeabi_dmul>
 800ffc0:	ec41 0b18 	vmov	d8, r0, r1
 800ffc4:	3501      	adds	r5, #1
 800ffc6:	107f      	asrs	r7, r7, #1
 800ffc8:	3608      	adds	r6, #8
 800ffca:	e7e5      	b.n	800ff98 <_dtoa_r+0x370>
 800ffcc:	f000 80a6 	beq.w	801011c <_dtoa_r+0x4f4>
 800ffd0:	f1ca 0600 	rsb	r6, sl, #0
 800ffd4:	4ba5      	ldr	r3, [pc, #660]	; (801026c <_dtoa_r+0x644>)
 800ffd6:	4fa6      	ldr	r7, [pc, #664]	; (8010270 <_dtoa_r+0x648>)
 800ffd8:	f006 020f 	and.w	r2, r6, #15
 800ffdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ffe8:	f7f0 fb16 	bl	8000618 <__aeabi_dmul>
 800ffec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fff0:	1136      	asrs	r6, r6, #4
 800fff2:	2300      	movs	r3, #0
 800fff4:	2502      	movs	r5, #2
 800fff6:	2e00      	cmp	r6, #0
 800fff8:	f040 8085 	bne.w	8010106 <_dtoa_r+0x4de>
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d1d2      	bne.n	800ffa6 <_dtoa_r+0x37e>
 8010000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010002:	2b00      	cmp	r3, #0
 8010004:	f000 808c 	beq.w	8010120 <_dtoa_r+0x4f8>
 8010008:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801000c:	4b99      	ldr	r3, [pc, #612]	; (8010274 <_dtoa_r+0x64c>)
 801000e:	2200      	movs	r2, #0
 8010010:	4630      	mov	r0, r6
 8010012:	4639      	mov	r1, r7
 8010014:	f7f0 fd72 	bl	8000afc <__aeabi_dcmplt>
 8010018:	2800      	cmp	r0, #0
 801001a:	f000 8081 	beq.w	8010120 <_dtoa_r+0x4f8>
 801001e:	9b01      	ldr	r3, [sp, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d07d      	beq.n	8010120 <_dtoa_r+0x4f8>
 8010024:	f1b9 0f00 	cmp.w	r9, #0
 8010028:	dd3c      	ble.n	80100a4 <_dtoa_r+0x47c>
 801002a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801002e:	9307      	str	r3, [sp, #28]
 8010030:	2200      	movs	r2, #0
 8010032:	4b91      	ldr	r3, [pc, #580]	; (8010278 <_dtoa_r+0x650>)
 8010034:	4630      	mov	r0, r6
 8010036:	4639      	mov	r1, r7
 8010038:	f7f0 faee 	bl	8000618 <__aeabi_dmul>
 801003c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010040:	3501      	adds	r5, #1
 8010042:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010046:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801004a:	4628      	mov	r0, r5
 801004c:	f7f0 fa7a 	bl	8000544 <__aeabi_i2d>
 8010050:	4632      	mov	r2, r6
 8010052:	463b      	mov	r3, r7
 8010054:	f7f0 fae0 	bl	8000618 <__aeabi_dmul>
 8010058:	4b88      	ldr	r3, [pc, #544]	; (801027c <_dtoa_r+0x654>)
 801005a:	2200      	movs	r2, #0
 801005c:	f7f0 f926 	bl	80002ac <__adddf3>
 8010060:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010068:	9303      	str	r3, [sp, #12]
 801006a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801006c:	2b00      	cmp	r3, #0
 801006e:	d15c      	bne.n	801012a <_dtoa_r+0x502>
 8010070:	4b83      	ldr	r3, [pc, #524]	; (8010280 <_dtoa_r+0x658>)
 8010072:	2200      	movs	r2, #0
 8010074:	4630      	mov	r0, r6
 8010076:	4639      	mov	r1, r7
 8010078:	f7f0 f916 	bl	80002a8 <__aeabi_dsub>
 801007c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010080:	4606      	mov	r6, r0
 8010082:	460f      	mov	r7, r1
 8010084:	f7f0 fd58 	bl	8000b38 <__aeabi_dcmpgt>
 8010088:	2800      	cmp	r0, #0
 801008a:	f040 8296 	bne.w	80105ba <_dtoa_r+0x992>
 801008e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010092:	4630      	mov	r0, r6
 8010094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010098:	4639      	mov	r1, r7
 801009a:	f7f0 fd2f 	bl	8000afc <__aeabi_dcmplt>
 801009e:	2800      	cmp	r0, #0
 80100a0:	f040 8288 	bne.w	80105b4 <_dtoa_r+0x98c>
 80100a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80100a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80100ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f2c0 8158 	blt.w	8010364 <_dtoa_r+0x73c>
 80100b4:	f1ba 0f0e 	cmp.w	sl, #14
 80100b8:	f300 8154 	bgt.w	8010364 <_dtoa_r+0x73c>
 80100bc:	4b6b      	ldr	r3, [pc, #428]	; (801026c <_dtoa_r+0x644>)
 80100be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80100c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f280 80e3 	bge.w	8010294 <_dtoa_r+0x66c>
 80100ce:	9b01      	ldr	r3, [sp, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	f300 80df 	bgt.w	8010294 <_dtoa_r+0x66c>
 80100d6:	f040 826d 	bne.w	80105b4 <_dtoa_r+0x98c>
 80100da:	4b69      	ldr	r3, [pc, #420]	; (8010280 <_dtoa_r+0x658>)
 80100dc:	2200      	movs	r2, #0
 80100de:	4640      	mov	r0, r8
 80100e0:	4649      	mov	r1, r9
 80100e2:	f7f0 fa99 	bl	8000618 <__aeabi_dmul>
 80100e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100ea:	f7f0 fd1b 	bl	8000b24 <__aeabi_dcmpge>
 80100ee:	9e01      	ldr	r6, [sp, #4]
 80100f0:	4637      	mov	r7, r6
 80100f2:	2800      	cmp	r0, #0
 80100f4:	f040 8243 	bne.w	801057e <_dtoa_r+0x956>
 80100f8:	9d00      	ldr	r5, [sp, #0]
 80100fa:	2331      	movs	r3, #49	; 0x31
 80100fc:	f805 3b01 	strb.w	r3, [r5], #1
 8010100:	f10a 0a01 	add.w	sl, sl, #1
 8010104:	e23f      	b.n	8010586 <_dtoa_r+0x95e>
 8010106:	07f2      	lsls	r2, r6, #31
 8010108:	d505      	bpl.n	8010116 <_dtoa_r+0x4ee>
 801010a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801010e:	f7f0 fa83 	bl	8000618 <__aeabi_dmul>
 8010112:	3501      	adds	r5, #1
 8010114:	2301      	movs	r3, #1
 8010116:	1076      	asrs	r6, r6, #1
 8010118:	3708      	adds	r7, #8
 801011a:	e76c      	b.n	800fff6 <_dtoa_r+0x3ce>
 801011c:	2502      	movs	r5, #2
 801011e:	e76f      	b.n	8010000 <_dtoa_r+0x3d8>
 8010120:	9b01      	ldr	r3, [sp, #4]
 8010122:	f8cd a01c 	str.w	sl, [sp, #28]
 8010126:	930c      	str	r3, [sp, #48]	; 0x30
 8010128:	e78d      	b.n	8010046 <_dtoa_r+0x41e>
 801012a:	9900      	ldr	r1, [sp, #0]
 801012c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801012e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010130:	4b4e      	ldr	r3, [pc, #312]	; (801026c <_dtoa_r+0x644>)
 8010132:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010136:	4401      	add	r1, r0
 8010138:	9102      	str	r1, [sp, #8]
 801013a:	9908      	ldr	r1, [sp, #32]
 801013c:	eeb0 8a47 	vmov.f32	s16, s14
 8010140:	eef0 8a67 	vmov.f32	s17, s15
 8010144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010148:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801014c:	2900      	cmp	r1, #0
 801014e:	d045      	beq.n	80101dc <_dtoa_r+0x5b4>
 8010150:	494c      	ldr	r1, [pc, #304]	; (8010284 <_dtoa_r+0x65c>)
 8010152:	2000      	movs	r0, #0
 8010154:	f7f0 fb8a 	bl	800086c <__aeabi_ddiv>
 8010158:	ec53 2b18 	vmov	r2, r3, d8
 801015c:	f7f0 f8a4 	bl	80002a8 <__aeabi_dsub>
 8010160:	9d00      	ldr	r5, [sp, #0]
 8010162:	ec41 0b18 	vmov	d8, r0, r1
 8010166:	4639      	mov	r1, r7
 8010168:	4630      	mov	r0, r6
 801016a:	f7f0 fd05 	bl	8000b78 <__aeabi_d2iz>
 801016e:	900c      	str	r0, [sp, #48]	; 0x30
 8010170:	f7f0 f9e8 	bl	8000544 <__aeabi_i2d>
 8010174:	4602      	mov	r2, r0
 8010176:	460b      	mov	r3, r1
 8010178:	4630      	mov	r0, r6
 801017a:	4639      	mov	r1, r7
 801017c:	f7f0 f894 	bl	80002a8 <__aeabi_dsub>
 8010180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010182:	3330      	adds	r3, #48	; 0x30
 8010184:	f805 3b01 	strb.w	r3, [r5], #1
 8010188:	ec53 2b18 	vmov	r2, r3, d8
 801018c:	4606      	mov	r6, r0
 801018e:	460f      	mov	r7, r1
 8010190:	f7f0 fcb4 	bl	8000afc <__aeabi_dcmplt>
 8010194:	2800      	cmp	r0, #0
 8010196:	d165      	bne.n	8010264 <_dtoa_r+0x63c>
 8010198:	4632      	mov	r2, r6
 801019a:	463b      	mov	r3, r7
 801019c:	4935      	ldr	r1, [pc, #212]	; (8010274 <_dtoa_r+0x64c>)
 801019e:	2000      	movs	r0, #0
 80101a0:	f7f0 f882 	bl	80002a8 <__aeabi_dsub>
 80101a4:	ec53 2b18 	vmov	r2, r3, d8
 80101a8:	f7f0 fca8 	bl	8000afc <__aeabi_dcmplt>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	f040 80b9 	bne.w	8010324 <_dtoa_r+0x6fc>
 80101b2:	9b02      	ldr	r3, [sp, #8]
 80101b4:	429d      	cmp	r5, r3
 80101b6:	f43f af75 	beq.w	80100a4 <_dtoa_r+0x47c>
 80101ba:	4b2f      	ldr	r3, [pc, #188]	; (8010278 <_dtoa_r+0x650>)
 80101bc:	ec51 0b18 	vmov	r0, r1, d8
 80101c0:	2200      	movs	r2, #0
 80101c2:	f7f0 fa29 	bl	8000618 <__aeabi_dmul>
 80101c6:	4b2c      	ldr	r3, [pc, #176]	; (8010278 <_dtoa_r+0x650>)
 80101c8:	ec41 0b18 	vmov	d8, r0, r1
 80101cc:	2200      	movs	r2, #0
 80101ce:	4630      	mov	r0, r6
 80101d0:	4639      	mov	r1, r7
 80101d2:	f7f0 fa21 	bl	8000618 <__aeabi_dmul>
 80101d6:	4606      	mov	r6, r0
 80101d8:	460f      	mov	r7, r1
 80101da:	e7c4      	b.n	8010166 <_dtoa_r+0x53e>
 80101dc:	ec51 0b17 	vmov	r0, r1, d7
 80101e0:	f7f0 fa1a 	bl	8000618 <__aeabi_dmul>
 80101e4:	9b02      	ldr	r3, [sp, #8]
 80101e6:	9d00      	ldr	r5, [sp, #0]
 80101e8:	930c      	str	r3, [sp, #48]	; 0x30
 80101ea:	ec41 0b18 	vmov	d8, r0, r1
 80101ee:	4639      	mov	r1, r7
 80101f0:	4630      	mov	r0, r6
 80101f2:	f7f0 fcc1 	bl	8000b78 <__aeabi_d2iz>
 80101f6:	9011      	str	r0, [sp, #68]	; 0x44
 80101f8:	f7f0 f9a4 	bl	8000544 <__aeabi_i2d>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	4630      	mov	r0, r6
 8010202:	4639      	mov	r1, r7
 8010204:	f7f0 f850 	bl	80002a8 <__aeabi_dsub>
 8010208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801020a:	3330      	adds	r3, #48	; 0x30
 801020c:	f805 3b01 	strb.w	r3, [r5], #1
 8010210:	9b02      	ldr	r3, [sp, #8]
 8010212:	429d      	cmp	r5, r3
 8010214:	4606      	mov	r6, r0
 8010216:	460f      	mov	r7, r1
 8010218:	f04f 0200 	mov.w	r2, #0
 801021c:	d134      	bne.n	8010288 <_dtoa_r+0x660>
 801021e:	4b19      	ldr	r3, [pc, #100]	; (8010284 <_dtoa_r+0x65c>)
 8010220:	ec51 0b18 	vmov	r0, r1, d8
 8010224:	f7f0 f842 	bl	80002ac <__adddf3>
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	4630      	mov	r0, r6
 801022e:	4639      	mov	r1, r7
 8010230:	f7f0 fc82 	bl	8000b38 <__aeabi_dcmpgt>
 8010234:	2800      	cmp	r0, #0
 8010236:	d175      	bne.n	8010324 <_dtoa_r+0x6fc>
 8010238:	ec53 2b18 	vmov	r2, r3, d8
 801023c:	4911      	ldr	r1, [pc, #68]	; (8010284 <_dtoa_r+0x65c>)
 801023e:	2000      	movs	r0, #0
 8010240:	f7f0 f832 	bl	80002a8 <__aeabi_dsub>
 8010244:	4602      	mov	r2, r0
 8010246:	460b      	mov	r3, r1
 8010248:	4630      	mov	r0, r6
 801024a:	4639      	mov	r1, r7
 801024c:	f7f0 fc56 	bl	8000afc <__aeabi_dcmplt>
 8010250:	2800      	cmp	r0, #0
 8010252:	f43f af27 	beq.w	80100a4 <_dtoa_r+0x47c>
 8010256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010258:	1e6b      	subs	r3, r5, #1
 801025a:	930c      	str	r3, [sp, #48]	; 0x30
 801025c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010260:	2b30      	cmp	r3, #48	; 0x30
 8010262:	d0f8      	beq.n	8010256 <_dtoa_r+0x62e>
 8010264:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010268:	e04a      	b.n	8010300 <_dtoa_r+0x6d8>
 801026a:	bf00      	nop
 801026c:	080130b0 	.word	0x080130b0
 8010270:	08013088 	.word	0x08013088
 8010274:	3ff00000 	.word	0x3ff00000
 8010278:	40240000 	.word	0x40240000
 801027c:	401c0000 	.word	0x401c0000
 8010280:	40140000 	.word	0x40140000
 8010284:	3fe00000 	.word	0x3fe00000
 8010288:	4baf      	ldr	r3, [pc, #700]	; (8010548 <_dtoa_r+0x920>)
 801028a:	f7f0 f9c5 	bl	8000618 <__aeabi_dmul>
 801028e:	4606      	mov	r6, r0
 8010290:	460f      	mov	r7, r1
 8010292:	e7ac      	b.n	80101ee <_dtoa_r+0x5c6>
 8010294:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010298:	9d00      	ldr	r5, [sp, #0]
 801029a:	4642      	mov	r2, r8
 801029c:	464b      	mov	r3, r9
 801029e:	4630      	mov	r0, r6
 80102a0:	4639      	mov	r1, r7
 80102a2:	f7f0 fae3 	bl	800086c <__aeabi_ddiv>
 80102a6:	f7f0 fc67 	bl	8000b78 <__aeabi_d2iz>
 80102aa:	9002      	str	r0, [sp, #8]
 80102ac:	f7f0 f94a 	bl	8000544 <__aeabi_i2d>
 80102b0:	4642      	mov	r2, r8
 80102b2:	464b      	mov	r3, r9
 80102b4:	f7f0 f9b0 	bl	8000618 <__aeabi_dmul>
 80102b8:	4602      	mov	r2, r0
 80102ba:	460b      	mov	r3, r1
 80102bc:	4630      	mov	r0, r6
 80102be:	4639      	mov	r1, r7
 80102c0:	f7ef fff2 	bl	80002a8 <__aeabi_dsub>
 80102c4:	9e02      	ldr	r6, [sp, #8]
 80102c6:	9f01      	ldr	r7, [sp, #4]
 80102c8:	3630      	adds	r6, #48	; 0x30
 80102ca:	f805 6b01 	strb.w	r6, [r5], #1
 80102ce:	9e00      	ldr	r6, [sp, #0]
 80102d0:	1bae      	subs	r6, r5, r6
 80102d2:	42b7      	cmp	r7, r6
 80102d4:	4602      	mov	r2, r0
 80102d6:	460b      	mov	r3, r1
 80102d8:	d137      	bne.n	801034a <_dtoa_r+0x722>
 80102da:	f7ef ffe7 	bl	80002ac <__adddf3>
 80102de:	4642      	mov	r2, r8
 80102e0:	464b      	mov	r3, r9
 80102e2:	4606      	mov	r6, r0
 80102e4:	460f      	mov	r7, r1
 80102e6:	f7f0 fc27 	bl	8000b38 <__aeabi_dcmpgt>
 80102ea:	b9c8      	cbnz	r0, 8010320 <_dtoa_r+0x6f8>
 80102ec:	4642      	mov	r2, r8
 80102ee:	464b      	mov	r3, r9
 80102f0:	4630      	mov	r0, r6
 80102f2:	4639      	mov	r1, r7
 80102f4:	f7f0 fbf8 	bl	8000ae8 <__aeabi_dcmpeq>
 80102f8:	b110      	cbz	r0, 8010300 <_dtoa_r+0x6d8>
 80102fa:	9b02      	ldr	r3, [sp, #8]
 80102fc:	07d9      	lsls	r1, r3, #31
 80102fe:	d40f      	bmi.n	8010320 <_dtoa_r+0x6f8>
 8010300:	4620      	mov	r0, r4
 8010302:	4659      	mov	r1, fp
 8010304:	f000 facc 	bl	80108a0 <_Bfree>
 8010308:	2300      	movs	r3, #0
 801030a:	702b      	strb	r3, [r5, #0]
 801030c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801030e:	f10a 0001 	add.w	r0, sl, #1
 8010312:	6018      	str	r0, [r3, #0]
 8010314:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010316:	2b00      	cmp	r3, #0
 8010318:	f43f acd8 	beq.w	800fccc <_dtoa_r+0xa4>
 801031c:	601d      	str	r5, [r3, #0]
 801031e:	e4d5      	b.n	800fccc <_dtoa_r+0xa4>
 8010320:	f8cd a01c 	str.w	sl, [sp, #28]
 8010324:	462b      	mov	r3, r5
 8010326:	461d      	mov	r5, r3
 8010328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801032c:	2a39      	cmp	r2, #57	; 0x39
 801032e:	d108      	bne.n	8010342 <_dtoa_r+0x71a>
 8010330:	9a00      	ldr	r2, [sp, #0]
 8010332:	429a      	cmp	r2, r3
 8010334:	d1f7      	bne.n	8010326 <_dtoa_r+0x6fe>
 8010336:	9a07      	ldr	r2, [sp, #28]
 8010338:	9900      	ldr	r1, [sp, #0]
 801033a:	3201      	adds	r2, #1
 801033c:	9207      	str	r2, [sp, #28]
 801033e:	2230      	movs	r2, #48	; 0x30
 8010340:	700a      	strb	r2, [r1, #0]
 8010342:	781a      	ldrb	r2, [r3, #0]
 8010344:	3201      	adds	r2, #1
 8010346:	701a      	strb	r2, [r3, #0]
 8010348:	e78c      	b.n	8010264 <_dtoa_r+0x63c>
 801034a:	4b7f      	ldr	r3, [pc, #508]	; (8010548 <_dtoa_r+0x920>)
 801034c:	2200      	movs	r2, #0
 801034e:	f7f0 f963 	bl	8000618 <__aeabi_dmul>
 8010352:	2200      	movs	r2, #0
 8010354:	2300      	movs	r3, #0
 8010356:	4606      	mov	r6, r0
 8010358:	460f      	mov	r7, r1
 801035a:	f7f0 fbc5 	bl	8000ae8 <__aeabi_dcmpeq>
 801035e:	2800      	cmp	r0, #0
 8010360:	d09b      	beq.n	801029a <_dtoa_r+0x672>
 8010362:	e7cd      	b.n	8010300 <_dtoa_r+0x6d8>
 8010364:	9a08      	ldr	r2, [sp, #32]
 8010366:	2a00      	cmp	r2, #0
 8010368:	f000 80c4 	beq.w	80104f4 <_dtoa_r+0x8cc>
 801036c:	9a05      	ldr	r2, [sp, #20]
 801036e:	2a01      	cmp	r2, #1
 8010370:	f300 80a8 	bgt.w	80104c4 <_dtoa_r+0x89c>
 8010374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010376:	2a00      	cmp	r2, #0
 8010378:	f000 80a0 	beq.w	80104bc <_dtoa_r+0x894>
 801037c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010380:	9e06      	ldr	r6, [sp, #24]
 8010382:	4645      	mov	r5, r8
 8010384:	9a04      	ldr	r2, [sp, #16]
 8010386:	2101      	movs	r1, #1
 8010388:	441a      	add	r2, r3
 801038a:	4620      	mov	r0, r4
 801038c:	4498      	add	r8, r3
 801038e:	9204      	str	r2, [sp, #16]
 8010390:	f000 fb42 	bl	8010a18 <__i2b>
 8010394:	4607      	mov	r7, r0
 8010396:	2d00      	cmp	r5, #0
 8010398:	dd0b      	ble.n	80103b2 <_dtoa_r+0x78a>
 801039a:	9b04      	ldr	r3, [sp, #16]
 801039c:	2b00      	cmp	r3, #0
 801039e:	dd08      	ble.n	80103b2 <_dtoa_r+0x78a>
 80103a0:	42ab      	cmp	r3, r5
 80103a2:	9a04      	ldr	r2, [sp, #16]
 80103a4:	bfa8      	it	ge
 80103a6:	462b      	movge	r3, r5
 80103a8:	eba8 0803 	sub.w	r8, r8, r3
 80103ac:	1aed      	subs	r5, r5, r3
 80103ae:	1ad3      	subs	r3, r2, r3
 80103b0:	9304      	str	r3, [sp, #16]
 80103b2:	9b06      	ldr	r3, [sp, #24]
 80103b4:	b1fb      	cbz	r3, 80103f6 <_dtoa_r+0x7ce>
 80103b6:	9b08      	ldr	r3, [sp, #32]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f000 809f 	beq.w	80104fc <_dtoa_r+0x8d4>
 80103be:	2e00      	cmp	r6, #0
 80103c0:	dd11      	ble.n	80103e6 <_dtoa_r+0x7be>
 80103c2:	4639      	mov	r1, r7
 80103c4:	4632      	mov	r2, r6
 80103c6:	4620      	mov	r0, r4
 80103c8:	f000 fbe2 	bl	8010b90 <__pow5mult>
 80103cc:	465a      	mov	r2, fp
 80103ce:	4601      	mov	r1, r0
 80103d0:	4607      	mov	r7, r0
 80103d2:	4620      	mov	r0, r4
 80103d4:	f000 fb36 	bl	8010a44 <__multiply>
 80103d8:	4659      	mov	r1, fp
 80103da:	9007      	str	r0, [sp, #28]
 80103dc:	4620      	mov	r0, r4
 80103de:	f000 fa5f 	bl	80108a0 <_Bfree>
 80103e2:	9b07      	ldr	r3, [sp, #28]
 80103e4:	469b      	mov	fp, r3
 80103e6:	9b06      	ldr	r3, [sp, #24]
 80103e8:	1b9a      	subs	r2, r3, r6
 80103ea:	d004      	beq.n	80103f6 <_dtoa_r+0x7ce>
 80103ec:	4659      	mov	r1, fp
 80103ee:	4620      	mov	r0, r4
 80103f0:	f000 fbce 	bl	8010b90 <__pow5mult>
 80103f4:	4683      	mov	fp, r0
 80103f6:	2101      	movs	r1, #1
 80103f8:	4620      	mov	r0, r4
 80103fa:	f000 fb0d 	bl	8010a18 <__i2b>
 80103fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010400:	2b00      	cmp	r3, #0
 8010402:	4606      	mov	r6, r0
 8010404:	dd7c      	ble.n	8010500 <_dtoa_r+0x8d8>
 8010406:	461a      	mov	r2, r3
 8010408:	4601      	mov	r1, r0
 801040a:	4620      	mov	r0, r4
 801040c:	f000 fbc0 	bl	8010b90 <__pow5mult>
 8010410:	9b05      	ldr	r3, [sp, #20]
 8010412:	2b01      	cmp	r3, #1
 8010414:	4606      	mov	r6, r0
 8010416:	dd76      	ble.n	8010506 <_dtoa_r+0x8de>
 8010418:	2300      	movs	r3, #0
 801041a:	9306      	str	r3, [sp, #24]
 801041c:	6933      	ldr	r3, [r6, #16]
 801041e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010422:	6918      	ldr	r0, [r3, #16]
 8010424:	f000 faa8 	bl	8010978 <__hi0bits>
 8010428:	f1c0 0020 	rsb	r0, r0, #32
 801042c:	9b04      	ldr	r3, [sp, #16]
 801042e:	4418      	add	r0, r3
 8010430:	f010 001f 	ands.w	r0, r0, #31
 8010434:	f000 8086 	beq.w	8010544 <_dtoa_r+0x91c>
 8010438:	f1c0 0320 	rsb	r3, r0, #32
 801043c:	2b04      	cmp	r3, #4
 801043e:	dd7f      	ble.n	8010540 <_dtoa_r+0x918>
 8010440:	f1c0 001c 	rsb	r0, r0, #28
 8010444:	9b04      	ldr	r3, [sp, #16]
 8010446:	4403      	add	r3, r0
 8010448:	4480      	add	r8, r0
 801044a:	4405      	add	r5, r0
 801044c:	9304      	str	r3, [sp, #16]
 801044e:	f1b8 0f00 	cmp.w	r8, #0
 8010452:	dd05      	ble.n	8010460 <_dtoa_r+0x838>
 8010454:	4659      	mov	r1, fp
 8010456:	4642      	mov	r2, r8
 8010458:	4620      	mov	r0, r4
 801045a:	f000 fbf3 	bl	8010c44 <__lshift>
 801045e:	4683      	mov	fp, r0
 8010460:	9b04      	ldr	r3, [sp, #16]
 8010462:	2b00      	cmp	r3, #0
 8010464:	dd05      	ble.n	8010472 <_dtoa_r+0x84a>
 8010466:	4631      	mov	r1, r6
 8010468:	461a      	mov	r2, r3
 801046a:	4620      	mov	r0, r4
 801046c:	f000 fbea 	bl	8010c44 <__lshift>
 8010470:	4606      	mov	r6, r0
 8010472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010474:	2b00      	cmp	r3, #0
 8010476:	d069      	beq.n	801054c <_dtoa_r+0x924>
 8010478:	4631      	mov	r1, r6
 801047a:	4658      	mov	r0, fp
 801047c:	f000 fc4e 	bl	8010d1c <__mcmp>
 8010480:	2800      	cmp	r0, #0
 8010482:	da63      	bge.n	801054c <_dtoa_r+0x924>
 8010484:	2300      	movs	r3, #0
 8010486:	4659      	mov	r1, fp
 8010488:	220a      	movs	r2, #10
 801048a:	4620      	mov	r0, r4
 801048c:	f000 fa2a 	bl	80108e4 <__multadd>
 8010490:	9b08      	ldr	r3, [sp, #32]
 8010492:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010496:	4683      	mov	fp, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	f000 818f 	beq.w	80107bc <_dtoa_r+0xb94>
 801049e:	4639      	mov	r1, r7
 80104a0:	2300      	movs	r3, #0
 80104a2:	220a      	movs	r2, #10
 80104a4:	4620      	mov	r0, r4
 80104a6:	f000 fa1d 	bl	80108e4 <__multadd>
 80104aa:	f1b9 0f00 	cmp.w	r9, #0
 80104ae:	4607      	mov	r7, r0
 80104b0:	f300 808e 	bgt.w	80105d0 <_dtoa_r+0x9a8>
 80104b4:	9b05      	ldr	r3, [sp, #20]
 80104b6:	2b02      	cmp	r3, #2
 80104b8:	dc50      	bgt.n	801055c <_dtoa_r+0x934>
 80104ba:	e089      	b.n	80105d0 <_dtoa_r+0x9a8>
 80104bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80104c2:	e75d      	b.n	8010380 <_dtoa_r+0x758>
 80104c4:	9b01      	ldr	r3, [sp, #4]
 80104c6:	1e5e      	subs	r6, r3, #1
 80104c8:	9b06      	ldr	r3, [sp, #24]
 80104ca:	42b3      	cmp	r3, r6
 80104cc:	bfbf      	itttt	lt
 80104ce:	9b06      	ldrlt	r3, [sp, #24]
 80104d0:	9606      	strlt	r6, [sp, #24]
 80104d2:	1af2      	sublt	r2, r6, r3
 80104d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80104d6:	bfb6      	itet	lt
 80104d8:	189b      	addlt	r3, r3, r2
 80104da:	1b9e      	subge	r6, r3, r6
 80104dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80104de:	9b01      	ldr	r3, [sp, #4]
 80104e0:	bfb8      	it	lt
 80104e2:	2600      	movlt	r6, #0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	bfb5      	itete	lt
 80104e8:	eba8 0503 	sublt.w	r5, r8, r3
 80104ec:	9b01      	ldrge	r3, [sp, #4]
 80104ee:	2300      	movlt	r3, #0
 80104f0:	4645      	movge	r5, r8
 80104f2:	e747      	b.n	8010384 <_dtoa_r+0x75c>
 80104f4:	9e06      	ldr	r6, [sp, #24]
 80104f6:	9f08      	ldr	r7, [sp, #32]
 80104f8:	4645      	mov	r5, r8
 80104fa:	e74c      	b.n	8010396 <_dtoa_r+0x76e>
 80104fc:	9a06      	ldr	r2, [sp, #24]
 80104fe:	e775      	b.n	80103ec <_dtoa_r+0x7c4>
 8010500:	9b05      	ldr	r3, [sp, #20]
 8010502:	2b01      	cmp	r3, #1
 8010504:	dc18      	bgt.n	8010538 <_dtoa_r+0x910>
 8010506:	9b02      	ldr	r3, [sp, #8]
 8010508:	b9b3      	cbnz	r3, 8010538 <_dtoa_r+0x910>
 801050a:	9b03      	ldr	r3, [sp, #12]
 801050c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010510:	b9a3      	cbnz	r3, 801053c <_dtoa_r+0x914>
 8010512:	9b03      	ldr	r3, [sp, #12]
 8010514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010518:	0d1b      	lsrs	r3, r3, #20
 801051a:	051b      	lsls	r3, r3, #20
 801051c:	b12b      	cbz	r3, 801052a <_dtoa_r+0x902>
 801051e:	9b04      	ldr	r3, [sp, #16]
 8010520:	3301      	adds	r3, #1
 8010522:	9304      	str	r3, [sp, #16]
 8010524:	f108 0801 	add.w	r8, r8, #1
 8010528:	2301      	movs	r3, #1
 801052a:	9306      	str	r3, [sp, #24]
 801052c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801052e:	2b00      	cmp	r3, #0
 8010530:	f47f af74 	bne.w	801041c <_dtoa_r+0x7f4>
 8010534:	2001      	movs	r0, #1
 8010536:	e779      	b.n	801042c <_dtoa_r+0x804>
 8010538:	2300      	movs	r3, #0
 801053a:	e7f6      	b.n	801052a <_dtoa_r+0x902>
 801053c:	9b02      	ldr	r3, [sp, #8]
 801053e:	e7f4      	b.n	801052a <_dtoa_r+0x902>
 8010540:	d085      	beq.n	801044e <_dtoa_r+0x826>
 8010542:	4618      	mov	r0, r3
 8010544:	301c      	adds	r0, #28
 8010546:	e77d      	b.n	8010444 <_dtoa_r+0x81c>
 8010548:	40240000 	.word	0x40240000
 801054c:	9b01      	ldr	r3, [sp, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	dc38      	bgt.n	80105c4 <_dtoa_r+0x99c>
 8010552:	9b05      	ldr	r3, [sp, #20]
 8010554:	2b02      	cmp	r3, #2
 8010556:	dd35      	ble.n	80105c4 <_dtoa_r+0x99c>
 8010558:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801055c:	f1b9 0f00 	cmp.w	r9, #0
 8010560:	d10d      	bne.n	801057e <_dtoa_r+0x956>
 8010562:	4631      	mov	r1, r6
 8010564:	464b      	mov	r3, r9
 8010566:	2205      	movs	r2, #5
 8010568:	4620      	mov	r0, r4
 801056a:	f000 f9bb 	bl	80108e4 <__multadd>
 801056e:	4601      	mov	r1, r0
 8010570:	4606      	mov	r6, r0
 8010572:	4658      	mov	r0, fp
 8010574:	f000 fbd2 	bl	8010d1c <__mcmp>
 8010578:	2800      	cmp	r0, #0
 801057a:	f73f adbd 	bgt.w	80100f8 <_dtoa_r+0x4d0>
 801057e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010580:	9d00      	ldr	r5, [sp, #0]
 8010582:	ea6f 0a03 	mvn.w	sl, r3
 8010586:	f04f 0800 	mov.w	r8, #0
 801058a:	4631      	mov	r1, r6
 801058c:	4620      	mov	r0, r4
 801058e:	f000 f987 	bl	80108a0 <_Bfree>
 8010592:	2f00      	cmp	r7, #0
 8010594:	f43f aeb4 	beq.w	8010300 <_dtoa_r+0x6d8>
 8010598:	f1b8 0f00 	cmp.w	r8, #0
 801059c:	d005      	beq.n	80105aa <_dtoa_r+0x982>
 801059e:	45b8      	cmp	r8, r7
 80105a0:	d003      	beq.n	80105aa <_dtoa_r+0x982>
 80105a2:	4641      	mov	r1, r8
 80105a4:	4620      	mov	r0, r4
 80105a6:	f000 f97b 	bl	80108a0 <_Bfree>
 80105aa:	4639      	mov	r1, r7
 80105ac:	4620      	mov	r0, r4
 80105ae:	f000 f977 	bl	80108a0 <_Bfree>
 80105b2:	e6a5      	b.n	8010300 <_dtoa_r+0x6d8>
 80105b4:	2600      	movs	r6, #0
 80105b6:	4637      	mov	r7, r6
 80105b8:	e7e1      	b.n	801057e <_dtoa_r+0x956>
 80105ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80105bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80105c0:	4637      	mov	r7, r6
 80105c2:	e599      	b.n	80100f8 <_dtoa_r+0x4d0>
 80105c4:	9b08      	ldr	r3, [sp, #32]
 80105c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	f000 80fd 	beq.w	80107ca <_dtoa_r+0xba2>
 80105d0:	2d00      	cmp	r5, #0
 80105d2:	dd05      	ble.n	80105e0 <_dtoa_r+0x9b8>
 80105d4:	4639      	mov	r1, r7
 80105d6:	462a      	mov	r2, r5
 80105d8:	4620      	mov	r0, r4
 80105da:	f000 fb33 	bl	8010c44 <__lshift>
 80105de:	4607      	mov	r7, r0
 80105e0:	9b06      	ldr	r3, [sp, #24]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d05c      	beq.n	80106a0 <_dtoa_r+0xa78>
 80105e6:	6879      	ldr	r1, [r7, #4]
 80105e8:	4620      	mov	r0, r4
 80105ea:	f000 f919 	bl	8010820 <_Balloc>
 80105ee:	4605      	mov	r5, r0
 80105f0:	b928      	cbnz	r0, 80105fe <_dtoa_r+0x9d6>
 80105f2:	4b80      	ldr	r3, [pc, #512]	; (80107f4 <_dtoa_r+0xbcc>)
 80105f4:	4602      	mov	r2, r0
 80105f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80105fa:	f7ff bb2e 	b.w	800fc5a <_dtoa_r+0x32>
 80105fe:	693a      	ldr	r2, [r7, #16]
 8010600:	3202      	adds	r2, #2
 8010602:	0092      	lsls	r2, r2, #2
 8010604:	f107 010c 	add.w	r1, r7, #12
 8010608:	300c      	adds	r0, #12
 801060a:	f7fe fd0b 	bl	800f024 <memcpy>
 801060e:	2201      	movs	r2, #1
 8010610:	4629      	mov	r1, r5
 8010612:	4620      	mov	r0, r4
 8010614:	f000 fb16 	bl	8010c44 <__lshift>
 8010618:	9b00      	ldr	r3, [sp, #0]
 801061a:	3301      	adds	r3, #1
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	9b00      	ldr	r3, [sp, #0]
 8010620:	444b      	add	r3, r9
 8010622:	9307      	str	r3, [sp, #28]
 8010624:	9b02      	ldr	r3, [sp, #8]
 8010626:	f003 0301 	and.w	r3, r3, #1
 801062a:	46b8      	mov	r8, r7
 801062c:	9306      	str	r3, [sp, #24]
 801062e:	4607      	mov	r7, r0
 8010630:	9b01      	ldr	r3, [sp, #4]
 8010632:	4631      	mov	r1, r6
 8010634:	3b01      	subs	r3, #1
 8010636:	4658      	mov	r0, fp
 8010638:	9302      	str	r3, [sp, #8]
 801063a:	f7ff fa67 	bl	800fb0c <quorem>
 801063e:	4603      	mov	r3, r0
 8010640:	3330      	adds	r3, #48	; 0x30
 8010642:	9004      	str	r0, [sp, #16]
 8010644:	4641      	mov	r1, r8
 8010646:	4658      	mov	r0, fp
 8010648:	9308      	str	r3, [sp, #32]
 801064a:	f000 fb67 	bl	8010d1c <__mcmp>
 801064e:	463a      	mov	r2, r7
 8010650:	4681      	mov	r9, r0
 8010652:	4631      	mov	r1, r6
 8010654:	4620      	mov	r0, r4
 8010656:	f000 fb7d 	bl	8010d54 <__mdiff>
 801065a:	68c2      	ldr	r2, [r0, #12]
 801065c:	9b08      	ldr	r3, [sp, #32]
 801065e:	4605      	mov	r5, r0
 8010660:	bb02      	cbnz	r2, 80106a4 <_dtoa_r+0xa7c>
 8010662:	4601      	mov	r1, r0
 8010664:	4658      	mov	r0, fp
 8010666:	f000 fb59 	bl	8010d1c <__mcmp>
 801066a:	9b08      	ldr	r3, [sp, #32]
 801066c:	4602      	mov	r2, r0
 801066e:	4629      	mov	r1, r5
 8010670:	4620      	mov	r0, r4
 8010672:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010676:	f000 f913 	bl	80108a0 <_Bfree>
 801067a:	9b05      	ldr	r3, [sp, #20]
 801067c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801067e:	9d01      	ldr	r5, [sp, #4]
 8010680:	ea43 0102 	orr.w	r1, r3, r2
 8010684:	9b06      	ldr	r3, [sp, #24]
 8010686:	430b      	orrs	r3, r1
 8010688:	9b08      	ldr	r3, [sp, #32]
 801068a:	d10d      	bne.n	80106a8 <_dtoa_r+0xa80>
 801068c:	2b39      	cmp	r3, #57	; 0x39
 801068e:	d029      	beq.n	80106e4 <_dtoa_r+0xabc>
 8010690:	f1b9 0f00 	cmp.w	r9, #0
 8010694:	dd01      	ble.n	801069a <_dtoa_r+0xa72>
 8010696:	9b04      	ldr	r3, [sp, #16]
 8010698:	3331      	adds	r3, #49	; 0x31
 801069a:	9a02      	ldr	r2, [sp, #8]
 801069c:	7013      	strb	r3, [r2, #0]
 801069e:	e774      	b.n	801058a <_dtoa_r+0x962>
 80106a0:	4638      	mov	r0, r7
 80106a2:	e7b9      	b.n	8010618 <_dtoa_r+0x9f0>
 80106a4:	2201      	movs	r2, #1
 80106a6:	e7e2      	b.n	801066e <_dtoa_r+0xa46>
 80106a8:	f1b9 0f00 	cmp.w	r9, #0
 80106ac:	db06      	blt.n	80106bc <_dtoa_r+0xa94>
 80106ae:	9905      	ldr	r1, [sp, #20]
 80106b0:	ea41 0909 	orr.w	r9, r1, r9
 80106b4:	9906      	ldr	r1, [sp, #24]
 80106b6:	ea59 0101 	orrs.w	r1, r9, r1
 80106ba:	d120      	bne.n	80106fe <_dtoa_r+0xad6>
 80106bc:	2a00      	cmp	r2, #0
 80106be:	ddec      	ble.n	801069a <_dtoa_r+0xa72>
 80106c0:	4659      	mov	r1, fp
 80106c2:	2201      	movs	r2, #1
 80106c4:	4620      	mov	r0, r4
 80106c6:	9301      	str	r3, [sp, #4]
 80106c8:	f000 fabc 	bl	8010c44 <__lshift>
 80106cc:	4631      	mov	r1, r6
 80106ce:	4683      	mov	fp, r0
 80106d0:	f000 fb24 	bl	8010d1c <__mcmp>
 80106d4:	2800      	cmp	r0, #0
 80106d6:	9b01      	ldr	r3, [sp, #4]
 80106d8:	dc02      	bgt.n	80106e0 <_dtoa_r+0xab8>
 80106da:	d1de      	bne.n	801069a <_dtoa_r+0xa72>
 80106dc:	07da      	lsls	r2, r3, #31
 80106de:	d5dc      	bpl.n	801069a <_dtoa_r+0xa72>
 80106e0:	2b39      	cmp	r3, #57	; 0x39
 80106e2:	d1d8      	bne.n	8010696 <_dtoa_r+0xa6e>
 80106e4:	9a02      	ldr	r2, [sp, #8]
 80106e6:	2339      	movs	r3, #57	; 0x39
 80106e8:	7013      	strb	r3, [r2, #0]
 80106ea:	462b      	mov	r3, r5
 80106ec:	461d      	mov	r5, r3
 80106ee:	3b01      	subs	r3, #1
 80106f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80106f4:	2a39      	cmp	r2, #57	; 0x39
 80106f6:	d050      	beq.n	801079a <_dtoa_r+0xb72>
 80106f8:	3201      	adds	r2, #1
 80106fa:	701a      	strb	r2, [r3, #0]
 80106fc:	e745      	b.n	801058a <_dtoa_r+0x962>
 80106fe:	2a00      	cmp	r2, #0
 8010700:	dd03      	ble.n	801070a <_dtoa_r+0xae2>
 8010702:	2b39      	cmp	r3, #57	; 0x39
 8010704:	d0ee      	beq.n	80106e4 <_dtoa_r+0xabc>
 8010706:	3301      	adds	r3, #1
 8010708:	e7c7      	b.n	801069a <_dtoa_r+0xa72>
 801070a:	9a01      	ldr	r2, [sp, #4]
 801070c:	9907      	ldr	r1, [sp, #28]
 801070e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010712:	428a      	cmp	r2, r1
 8010714:	d02a      	beq.n	801076c <_dtoa_r+0xb44>
 8010716:	4659      	mov	r1, fp
 8010718:	2300      	movs	r3, #0
 801071a:	220a      	movs	r2, #10
 801071c:	4620      	mov	r0, r4
 801071e:	f000 f8e1 	bl	80108e4 <__multadd>
 8010722:	45b8      	cmp	r8, r7
 8010724:	4683      	mov	fp, r0
 8010726:	f04f 0300 	mov.w	r3, #0
 801072a:	f04f 020a 	mov.w	r2, #10
 801072e:	4641      	mov	r1, r8
 8010730:	4620      	mov	r0, r4
 8010732:	d107      	bne.n	8010744 <_dtoa_r+0xb1c>
 8010734:	f000 f8d6 	bl	80108e4 <__multadd>
 8010738:	4680      	mov	r8, r0
 801073a:	4607      	mov	r7, r0
 801073c:	9b01      	ldr	r3, [sp, #4]
 801073e:	3301      	adds	r3, #1
 8010740:	9301      	str	r3, [sp, #4]
 8010742:	e775      	b.n	8010630 <_dtoa_r+0xa08>
 8010744:	f000 f8ce 	bl	80108e4 <__multadd>
 8010748:	4639      	mov	r1, r7
 801074a:	4680      	mov	r8, r0
 801074c:	2300      	movs	r3, #0
 801074e:	220a      	movs	r2, #10
 8010750:	4620      	mov	r0, r4
 8010752:	f000 f8c7 	bl	80108e4 <__multadd>
 8010756:	4607      	mov	r7, r0
 8010758:	e7f0      	b.n	801073c <_dtoa_r+0xb14>
 801075a:	f1b9 0f00 	cmp.w	r9, #0
 801075e:	9a00      	ldr	r2, [sp, #0]
 8010760:	bfcc      	ite	gt
 8010762:	464d      	movgt	r5, r9
 8010764:	2501      	movle	r5, #1
 8010766:	4415      	add	r5, r2
 8010768:	f04f 0800 	mov.w	r8, #0
 801076c:	4659      	mov	r1, fp
 801076e:	2201      	movs	r2, #1
 8010770:	4620      	mov	r0, r4
 8010772:	9301      	str	r3, [sp, #4]
 8010774:	f000 fa66 	bl	8010c44 <__lshift>
 8010778:	4631      	mov	r1, r6
 801077a:	4683      	mov	fp, r0
 801077c:	f000 face 	bl	8010d1c <__mcmp>
 8010780:	2800      	cmp	r0, #0
 8010782:	dcb2      	bgt.n	80106ea <_dtoa_r+0xac2>
 8010784:	d102      	bne.n	801078c <_dtoa_r+0xb64>
 8010786:	9b01      	ldr	r3, [sp, #4]
 8010788:	07db      	lsls	r3, r3, #31
 801078a:	d4ae      	bmi.n	80106ea <_dtoa_r+0xac2>
 801078c:	462b      	mov	r3, r5
 801078e:	461d      	mov	r5, r3
 8010790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010794:	2a30      	cmp	r2, #48	; 0x30
 8010796:	d0fa      	beq.n	801078e <_dtoa_r+0xb66>
 8010798:	e6f7      	b.n	801058a <_dtoa_r+0x962>
 801079a:	9a00      	ldr	r2, [sp, #0]
 801079c:	429a      	cmp	r2, r3
 801079e:	d1a5      	bne.n	80106ec <_dtoa_r+0xac4>
 80107a0:	f10a 0a01 	add.w	sl, sl, #1
 80107a4:	2331      	movs	r3, #49	; 0x31
 80107a6:	e779      	b.n	801069c <_dtoa_r+0xa74>
 80107a8:	4b13      	ldr	r3, [pc, #76]	; (80107f8 <_dtoa_r+0xbd0>)
 80107aa:	f7ff baaf 	b.w	800fd0c <_dtoa_r+0xe4>
 80107ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f47f aa86 	bne.w	800fcc2 <_dtoa_r+0x9a>
 80107b6:	4b11      	ldr	r3, [pc, #68]	; (80107fc <_dtoa_r+0xbd4>)
 80107b8:	f7ff baa8 	b.w	800fd0c <_dtoa_r+0xe4>
 80107bc:	f1b9 0f00 	cmp.w	r9, #0
 80107c0:	dc03      	bgt.n	80107ca <_dtoa_r+0xba2>
 80107c2:	9b05      	ldr	r3, [sp, #20]
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	f73f aec9 	bgt.w	801055c <_dtoa_r+0x934>
 80107ca:	9d00      	ldr	r5, [sp, #0]
 80107cc:	4631      	mov	r1, r6
 80107ce:	4658      	mov	r0, fp
 80107d0:	f7ff f99c 	bl	800fb0c <quorem>
 80107d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80107d8:	f805 3b01 	strb.w	r3, [r5], #1
 80107dc:	9a00      	ldr	r2, [sp, #0]
 80107de:	1aaa      	subs	r2, r5, r2
 80107e0:	4591      	cmp	r9, r2
 80107e2:	ddba      	ble.n	801075a <_dtoa_r+0xb32>
 80107e4:	4659      	mov	r1, fp
 80107e6:	2300      	movs	r3, #0
 80107e8:	220a      	movs	r2, #10
 80107ea:	4620      	mov	r0, r4
 80107ec:	f000 f87a 	bl	80108e4 <__multadd>
 80107f0:	4683      	mov	fp, r0
 80107f2:	e7eb      	b.n	80107cc <_dtoa_r+0xba4>
 80107f4:	08013013 	.word	0x08013013
 80107f8:	08012f6c 	.word	0x08012f6c
 80107fc:	08012f90 	.word	0x08012f90

08010800 <_localeconv_r>:
 8010800:	4800      	ldr	r0, [pc, #0]	; (8010804 <_localeconv_r+0x4>)
 8010802:	4770      	bx	lr
 8010804:	2000016c 	.word	0x2000016c

08010808 <__malloc_lock>:
 8010808:	4801      	ldr	r0, [pc, #4]	; (8010810 <__malloc_lock+0x8>)
 801080a:	f000 bd22 	b.w	8011252 <__retarget_lock_acquire_recursive>
 801080e:	bf00      	nop
 8010810:	20008238 	.word	0x20008238

08010814 <__malloc_unlock>:
 8010814:	4801      	ldr	r0, [pc, #4]	; (801081c <__malloc_unlock+0x8>)
 8010816:	f000 bd1d 	b.w	8011254 <__retarget_lock_release_recursive>
 801081a:	bf00      	nop
 801081c:	20008238 	.word	0x20008238

08010820 <_Balloc>:
 8010820:	b570      	push	{r4, r5, r6, lr}
 8010822:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010824:	4604      	mov	r4, r0
 8010826:	460d      	mov	r5, r1
 8010828:	b976      	cbnz	r6, 8010848 <_Balloc+0x28>
 801082a:	2010      	movs	r0, #16
 801082c:	f7fe fbea 	bl	800f004 <malloc>
 8010830:	4602      	mov	r2, r0
 8010832:	6260      	str	r0, [r4, #36]	; 0x24
 8010834:	b920      	cbnz	r0, 8010840 <_Balloc+0x20>
 8010836:	4b18      	ldr	r3, [pc, #96]	; (8010898 <_Balloc+0x78>)
 8010838:	4818      	ldr	r0, [pc, #96]	; (801089c <_Balloc+0x7c>)
 801083a:	2166      	movs	r1, #102	; 0x66
 801083c:	f000 fcd8 	bl	80111f0 <__assert_func>
 8010840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010844:	6006      	str	r6, [r0, #0]
 8010846:	60c6      	str	r6, [r0, #12]
 8010848:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801084a:	68f3      	ldr	r3, [r6, #12]
 801084c:	b183      	cbz	r3, 8010870 <_Balloc+0x50>
 801084e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010856:	b9b8      	cbnz	r0, 8010888 <_Balloc+0x68>
 8010858:	2101      	movs	r1, #1
 801085a:	fa01 f605 	lsl.w	r6, r1, r5
 801085e:	1d72      	adds	r2, r6, #5
 8010860:	0092      	lsls	r2, r2, #2
 8010862:	4620      	mov	r0, r4
 8010864:	f000 fb5a 	bl	8010f1c <_calloc_r>
 8010868:	b160      	cbz	r0, 8010884 <_Balloc+0x64>
 801086a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801086e:	e00e      	b.n	801088e <_Balloc+0x6e>
 8010870:	2221      	movs	r2, #33	; 0x21
 8010872:	2104      	movs	r1, #4
 8010874:	4620      	mov	r0, r4
 8010876:	f000 fb51 	bl	8010f1c <_calloc_r>
 801087a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801087c:	60f0      	str	r0, [r6, #12]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1e4      	bne.n	801084e <_Balloc+0x2e>
 8010884:	2000      	movs	r0, #0
 8010886:	bd70      	pop	{r4, r5, r6, pc}
 8010888:	6802      	ldr	r2, [r0, #0]
 801088a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801088e:	2300      	movs	r3, #0
 8010890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010894:	e7f7      	b.n	8010886 <_Balloc+0x66>
 8010896:	bf00      	nop
 8010898:	08012f9d 	.word	0x08012f9d
 801089c:	08013024 	.word	0x08013024

080108a0 <_Bfree>:
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80108a4:	4605      	mov	r5, r0
 80108a6:	460c      	mov	r4, r1
 80108a8:	b976      	cbnz	r6, 80108c8 <_Bfree+0x28>
 80108aa:	2010      	movs	r0, #16
 80108ac:	f7fe fbaa 	bl	800f004 <malloc>
 80108b0:	4602      	mov	r2, r0
 80108b2:	6268      	str	r0, [r5, #36]	; 0x24
 80108b4:	b920      	cbnz	r0, 80108c0 <_Bfree+0x20>
 80108b6:	4b09      	ldr	r3, [pc, #36]	; (80108dc <_Bfree+0x3c>)
 80108b8:	4809      	ldr	r0, [pc, #36]	; (80108e0 <_Bfree+0x40>)
 80108ba:	218a      	movs	r1, #138	; 0x8a
 80108bc:	f000 fc98 	bl	80111f0 <__assert_func>
 80108c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108c4:	6006      	str	r6, [r0, #0]
 80108c6:	60c6      	str	r6, [r0, #12]
 80108c8:	b13c      	cbz	r4, 80108da <_Bfree+0x3a>
 80108ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80108cc:	6862      	ldr	r2, [r4, #4]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108d4:	6021      	str	r1, [r4, #0]
 80108d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108da:	bd70      	pop	{r4, r5, r6, pc}
 80108dc:	08012f9d 	.word	0x08012f9d
 80108e0:	08013024 	.word	0x08013024

080108e4 <__multadd>:
 80108e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e8:	690e      	ldr	r6, [r1, #16]
 80108ea:	4607      	mov	r7, r0
 80108ec:	4698      	mov	r8, r3
 80108ee:	460c      	mov	r4, r1
 80108f0:	f101 0014 	add.w	r0, r1, #20
 80108f4:	2300      	movs	r3, #0
 80108f6:	6805      	ldr	r5, [r0, #0]
 80108f8:	b2a9      	uxth	r1, r5
 80108fa:	fb02 8101 	mla	r1, r2, r1, r8
 80108fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010902:	0c2d      	lsrs	r5, r5, #16
 8010904:	fb02 c505 	mla	r5, r2, r5, ip
 8010908:	b289      	uxth	r1, r1
 801090a:	3301      	adds	r3, #1
 801090c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010910:	429e      	cmp	r6, r3
 8010912:	f840 1b04 	str.w	r1, [r0], #4
 8010916:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801091a:	dcec      	bgt.n	80108f6 <__multadd+0x12>
 801091c:	f1b8 0f00 	cmp.w	r8, #0
 8010920:	d022      	beq.n	8010968 <__multadd+0x84>
 8010922:	68a3      	ldr	r3, [r4, #8]
 8010924:	42b3      	cmp	r3, r6
 8010926:	dc19      	bgt.n	801095c <__multadd+0x78>
 8010928:	6861      	ldr	r1, [r4, #4]
 801092a:	4638      	mov	r0, r7
 801092c:	3101      	adds	r1, #1
 801092e:	f7ff ff77 	bl	8010820 <_Balloc>
 8010932:	4605      	mov	r5, r0
 8010934:	b928      	cbnz	r0, 8010942 <__multadd+0x5e>
 8010936:	4602      	mov	r2, r0
 8010938:	4b0d      	ldr	r3, [pc, #52]	; (8010970 <__multadd+0x8c>)
 801093a:	480e      	ldr	r0, [pc, #56]	; (8010974 <__multadd+0x90>)
 801093c:	21b5      	movs	r1, #181	; 0xb5
 801093e:	f000 fc57 	bl	80111f0 <__assert_func>
 8010942:	6922      	ldr	r2, [r4, #16]
 8010944:	3202      	adds	r2, #2
 8010946:	f104 010c 	add.w	r1, r4, #12
 801094a:	0092      	lsls	r2, r2, #2
 801094c:	300c      	adds	r0, #12
 801094e:	f7fe fb69 	bl	800f024 <memcpy>
 8010952:	4621      	mov	r1, r4
 8010954:	4638      	mov	r0, r7
 8010956:	f7ff ffa3 	bl	80108a0 <_Bfree>
 801095a:	462c      	mov	r4, r5
 801095c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010960:	3601      	adds	r6, #1
 8010962:	f8c3 8014 	str.w	r8, [r3, #20]
 8010966:	6126      	str	r6, [r4, #16]
 8010968:	4620      	mov	r0, r4
 801096a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801096e:	bf00      	nop
 8010970:	08013013 	.word	0x08013013
 8010974:	08013024 	.word	0x08013024

08010978 <__hi0bits>:
 8010978:	0c03      	lsrs	r3, r0, #16
 801097a:	041b      	lsls	r3, r3, #16
 801097c:	b9d3      	cbnz	r3, 80109b4 <__hi0bits+0x3c>
 801097e:	0400      	lsls	r0, r0, #16
 8010980:	2310      	movs	r3, #16
 8010982:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010986:	bf04      	itt	eq
 8010988:	0200      	lsleq	r0, r0, #8
 801098a:	3308      	addeq	r3, #8
 801098c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010990:	bf04      	itt	eq
 8010992:	0100      	lsleq	r0, r0, #4
 8010994:	3304      	addeq	r3, #4
 8010996:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801099a:	bf04      	itt	eq
 801099c:	0080      	lsleq	r0, r0, #2
 801099e:	3302      	addeq	r3, #2
 80109a0:	2800      	cmp	r0, #0
 80109a2:	db05      	blt.n	80109b0 <__hi0bits+0x38>
 80109a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80109a8:	f103 0301 	add.w	r3, r3, #1
 80109ac:	bf08      	it	eq
 80109ae:	2320      	moveq	r3, #32
 80109b0:	4618      	mov	r0, r3
 80109b2:	4770      	bx	lr
 80109b4:	2300      	movs	r3, #0
 80109b6:	e7e4      	b.n	8010982 <__hi0bits+0xa>

080109b8 <__lo0bits>:
 80109b8:	6803      	ldr	r3, [r0, #0]
 80109ba:	f013 0207 	ands.w	r2, r3, #7
 80109be:	4601      	mov	r1, r0
 80109c0:	d00b      	beq.n	80109da <__lo0bits+0x22>
 80109c2:	07da      	lsls	r2, r3, #31
 80109c4:	d424      	bmi.n	8010a10 <__lo0bits+0x58>
 80109c6:	0798      	lsls	r0, r3, #30
 80109c8:	bf49      	itett	mi
 80109ca:	085b      	lsrmi	r3, r3, #1
 80109cc:	089b      	lsrpl	r3, r3, #2
 80109ce:	2001      	movmi	r0, #1
 80109d0:	600b      	strmi	r3, [r1, #0]
 80109d2:	bf5c      	itt	pl
 80109d4:	600b      	strpl	r3, [r1, #0]
 80109d6:	2002      	movpl	r0, #2
 80109d8:	4770      	bx	lr
 80109da:	b298      	uxth	r0, r3
 80109dc:	b9b0      	cbnz	r0, 8010a0c <__lo0bits+0x54>
 80109de:	0c1b      	lsrs	r3, r3, #16
 80109e0:	2010      	movs	r0, #16
 80109e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80109e6:	bf04      	itt	eq
 80109e8:	0a1b      	lsreq	r3, r3, #8
 80109ea:	3008      	addeq	r0, #8
 80109ec:	071a      	lsls	r2, r3, #28
 80109ee:	bf04      	itt	eq
 80109f0:	091b      	lsreq	r3, r3, #4
 80109f2:	3004      	addeq	r0, #4
 80109f4:	079a      	lsls	r2, r3, #30
 80109f6:	bf04      	itt	eq
 80109f8:	089b      	lsreq	r3, r3, #2
 80109fa:	3002      	addeq	r0, #2
 80109fc:	07da      	lsls	r2, r3, #31
 80109fe:	d403      	bmi.n	8010a08 <__lo0bits+0x50>
 8010a00:	085b      	lsrs	r3, r3, #1
 8010a02:	f100 0001 	add.w	r0, r0, #1
 8010a06:	d005      	beq.n	8010a14 <__lo0bits+0x5c>
 8010a08:	600b      	str	r3, [r1, #0]
 8010a0a:	4770      	bx	lr
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	e7e8      	b.n	80109e2 <__lo0bits+0x2a>
 8010a10:	2000      	movs	r0, #0
 8010a12:	4770      	bx	lr
 8010a14:	2020      	movs	r0, #32
 8010a16:	4770      	bx	lr

08010a18 <__i2b>:
 8010a18:	b510      	push	{r4, lr}
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	2101      	movs	r1, #1
 8010a1e:	f7ff feff 	bl	8010820 <_Balloc>
 8010a22:	4602      	mov	r2, r0
 8010a24:	b928      	cbnz	r0, 8010a32 <__i2b+0x1a>
 8010a26:	4b05      	ldr	r3, [pc, #20]	; (8010a3c <__i2b+0x24>)
 8010a28:	4805      	ldr	r0, [pc, #20]	; (8010a40 <__i2b+0x28>)
 8010a2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010a2e:	f000 fbdf 	bl	80111f0 <__assert_func>
 8010a32:	2301      	movs	r3, #1
 8010a34:	6144      	str	r4, [r0, #20]
 8010a36:	6103      	str	r3, [r0, #16]
 8010a38:	bd10      	pop	{r4, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08013013 	.word	0x08013013
 8010a40:	08013024 	.word	0x08013024

08010a44 <__multiply>:
 8010a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a48:	4614      	mov	r4, r2
 8010a4a:	690a      	ldr	r2, [r1, #16]
 8010a4c:	6923      	ldr	r3, [r4, #16]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	bfb8      	it	lt
 8010a52:	460b      	movlt	r3, r1
 8010a54:	460d      	mov	r5, r1
 8010a56:	bfbc      	itt	lt
 8010a58:	4625      	movlt	r5, r4
 8010a5a:	461c      	movlt	r4, r3
 8010a5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010a60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010a64:	68ab      	ldr	r3, [r5, #8]
 8010a66:	6869      	ldr	r1, [r5, #4]
 8010a68:	eb0a 0709 	add.w	r7, sl, r9
 8010a6c:	42bb      	cmp	r3, r7
 8010a6e:	b085      	sub	sp, #20
 8010a70:	bfb8      	it	lt
 8010a72:	3101      	addlt	r1, #1
 8010a74:	f7ff fed4 	bl	8010820 <_Balloc>
 8010a78:	b930      	cbnz	r0, 8010a88 <__multiply+0x44>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	4b42      	ldr	r3, [pc, #264]	; (8010b88 <__multiply+0x144>)
 8010a7e:	4843      	ldr	r0, [pc, #268]	; (8010b8c <__multiply+0x148>)
 8010a80:	f240 115d 	movw	r1, #349	; 0x15d
 8010a84:	f000 fbb4 	bl	80111f0 <__assert_func>
 8010a88:	f100 0614 	add.w	r6, r0, #20
 8010a8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010a90:	4633      	mov	r3, r6
 8010a92:	2200      	movs	r2, #0
 8010a94:	4543      	cmp	r3, r8
 8010a96:	d31e      	bcc.n	8010ad6 <__multiply+0x92>
 8010a98:	f105 0c14 	add.w	ip, r5, #20
 8010a9c:	f104 0314 	add.w	r3, r4, #20
 8010aa0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010aa4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010aa8:	9202      	str	r2, [sp, #8]
 8010aaa:	ebac 0205 	sub.w	r2, ip, r5
 8010aae:	3a15      	subs	r2, #21
 8010ab0:	f022 0203 	bic.w	r2, r2, #3
 8010ab4:	3204      	adds	r2, #4
 8010ab6:	f105 0115 	add.w	r1, r5, #21
 8010aba:	458c      	cmp	ip, r1
 8010abc:	bf38      	it	cc
 8010abe:	2204      	movcc	r2, #4
 8010ac0:	9201      	str	r2, [sp, #4]
 8010ac2:	9a02      	ldr	r2, [sp, #8]
 8010ac4:	9303      	str	r3, [sp, #12]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d808      	bhi.n	8010adc <__multiply+0x98>
 8010aca:	2f00      	cmp	r7, #0
 8010acc:	dc55      	bgt.n	8010b7a <__multiply+0x136>
 8010ace:	6107      	str	r7, [r0, #16]
 8010ad0:	b005      	add	sp, #20
 8010ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad6:	f843 2b04 	str.w	r2, [r3], #4
 8010ada:	e7db      	b.n	8010a94 <__multiply+0x50>
 8010adc:	f8b3 a000 	ldrh.w	sl, [r3]
 8010ae0:	f1ba 0f00 	cmp.w	sl, #0
 8010ae4:	d020      	beq.n	8010b28 <__multiply+0xe4>
 8010ae6:	f105 0e14 	add.w	lr, r5, #20
 8010aea:	46b1      	mov	r9, r6
 8010aec:	2200      	movs	r2, #0
 8010aee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010af2:	f8d9 b000 	ldr.w	fp, [r9]
 8010af6:	b2a1      	uxth	r1, r4
 8010af8:	fa1f fb8b 	uxth.w	fp, fp
 8010afc:	fb0a b101 	mla	r1, sl, r1, fp
 8010b00:	4411      	add	r1, r2
 8010b02:	f8d9 2000 	ldr.w	r2, [r9]
 8010b06:	0c24      	lsrs	r4, r4, #16
 8010b08:	0c12      	lsrs	r2, r2, #16
 8010b0a:	fb0a 2404 	mla	r4, sl, r4, r2
 8010b0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010b12:	b289      	uxth	r1, r1
 8010b14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010b18:	45f4      	cmp	ip, lr
 8010b1a:	f849 1b04 	str.w	r1, [r9], #4
 8010b1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010b22:	d8e4      	bhi.n	8010aee <__multiply+0xaa>
 8010b24:	9901      	ldr	r1, [sp, #4]
 8010b26:	5072      	str	r2, [r6, r1]
 8010b28:	9a03      	ldr	r2, [sp, #12]
 8010b2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010b2e:	3304      	adds	r3, #4
 8010b30:	f1b9 0f00 	cmp.w	r9, #0
 8010b34:	d01f      	beq.n	8010b76 <__multiply+0x132>
 8010b36:	6834      	ldr	r4, [r6, #0]
 8010b38:	f105 0114 	add.w	r1, r5, #20
 8010b3c:	46b6      	mov	lr, r6
 8010b3e:	f04f 0a00 	mov.w	sl, #0
 8010b42:	880a      	ldrh	r2, [r1, #0]
 8010b44:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010b48:	fb09 b202 	mla	r2, r9, r2, fp
 8010b4c:	4492      	add	sl, r2
 8010b4e:	b2a4      	uxth	r4, r4
 8010b50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010b54:	f84e 4b04 	str.w	r4, [lr], #4
 8010b58:	f851 4b04 	ldr.w	r4, [r1], #4
 8010b5c:	f8be 2000 	ldrh.w	r2, [lr]
 8010b60:	0c24      	lsrs	r4, r4, #16
 8010b62:	fb09 2404 	mla	r4, r9, r4, r2
 8010b66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010b6a:	458c      	cmp	ip, r1
 8010b6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010b70:	d8e7      	bhi.n	8010b42 <__multiply+0xfe>
 8010b72:	9a01      	ldr	r2, [sp, #4]
 8010b74:	50b4      	str	r4, [r6, r2]
 8010b76:	3604      	adds	r6, #4
 8010b78:	e7a3      	b.n	8010ac2 <__multiply+0x7e>
 8010b7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d1a5      	bne.n	8010ace <__multiply+0x8a>
 8010b82:	3f01      	subs	r7, #1
 8010b84:	e7a1      	b.n	8010aca <__multiply+0x86>
 8010b86:	bf00      	nop
 8010b88:	08013013 	.word	0x08013013
 8010b8c:	08013024 	.word	0x08013024

08010b90 <__pow5mult>:
 8010b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b94:	4615      	mov	r5, r2
 8010b96:	f012 0203 	ands.w	r2, r2, #3
 8010b9a:	4606      	mov	r6, r0
 8010b9c:	460f      	mov	r7, r1
 8010b9e:	d007      	beq.n	8010bb0 <__pow5mult+0x20>
 8010ba0:	4c25      	ldr	r4, [pc, #148]	; (8010c38 <__pow5mult+0xa8>)
 8010ba2:	3a01      	subs	r2, #1
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010baa:	f7ff fe9b 	bl	80108e4 <__multadd>
 8010bae:	4607      	mov	r7, r0
 8010bb0:	10ad      	asrs	r5, r5, #2
 8010bb2:	d03d      	beq.n	8010c30 <__pow5mult+0xa0>
 8010bb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010bb6:	b97c      	cbnz	r4, 8010bd8 <__pow5mult+0x48>
 8010bb8:	2010      	movs	r0, #16
 8010bba:	f7fe fa23 	bl	800f004 <malloc>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	6270      	str	r0, [r6, #36]	; 0x24
 8010bc2:	b928      	cbnz	r0, 8010bd0 <__pow5mult+0x40>
 8010bc4:	4b1d      	ldr	r3, [pc, #116]	; (8010c3c <__pow5mult+0xac>)
 8010bc6:	481e      	ldr	r0, [pc, #120]	; (8010c40 <__pow5mult+0xb0>)
 8010bc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010bcc:	f000 fb10 	bl	80111f0 <__assert_func>
 8010bd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010bd4:	6004      	str	r4, [r0, #0]
 8010bd6:	60c4      	str	r4, [r0, #12]
 8010bd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010bdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010be0:	b94c      	cbnz	r4, 8010bf6 <__pow5mult+0x66>
 8010be2:	f240 2171 	movw	r1, #625	; 0x271
 8010be6:	4630      	mov	r0, r6
 8010be8:	f7ff ff16 	bl	8010a18 <__i2b>
 8010bec:	2300      	movs	r3, #0
 8010bee:	f8c8 0008 	str.w	r0, [r8, #8]
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	6003      	str	r3, [r0, #0]
 8010bf6:	f04f 0900 	mov.w	r9, #0
 8010bfa:	07eb      	lsls	r3, r5, #31
 8010bfc:	d50a      	bpl.n	8010c14 <__pow5mult+0x84>
 8010bfe:	4639      	mov	r1, r7
 8010c00:	4622      	mov	r2, r4
 8010c02:	4630      	mov	r0, r6
 8010c04:	f7ff ff1e 	bl	8010a44 <__multiply>
 8010c08:	4639      	mov	r1, r7
 8010c0a:	4680      	mov	r8, r0
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	f7ff fe47 	bl	80108a0 <_Bfree>
 8010c12:	4647      	mov	r7, r8
 8010c14:	106d      	asrs	r5, r5, #1
 8010c16:	d00b      	beq.n	8010c30 <__pow5mult+0xa0>
 8010c18:	6820      	ldr	r0, [r4, #0]
 8010c1a:	b938      	cbnz	r0, 8010c2c <__pow5mult+0x9c>
 8010c1c:	4622      	mov	r2, r4
 8010c1e:	4621      	mov	r1, r4
 8010c20:	4630      	mov	r0, r6
 8010c22:	f7ff ff0f 	bl	8010a44 <__multiply>
 8010c26:	6020      	str	r0, [r4, #0]
 8010c28:	f8c0 9000 	str.w	r9, [r0]
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	e7e4      	b.n	8010bfa <__pow5mult+0x6a>
 8010c30:	4638      	mov	r0, r7
 8010c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c36:	bf00      	nop
 8010c38:	08013178 	.word	0x08013178
 8010c3c:	08012f9d 	.word	0x08012f9d
 8010c40:	08013024 	.word	0x08013024

08010c44 <__lshift>:
 8010c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c48:	460c      	mov	r4, r1
 8010c4a:	6849      	ldr	r1, [r1, #4]
 8010c4c:	6923      	ldr	r3, [r4, #16]
 8010c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c52:	68a3      	ldr	r3, [r4, #8]
 8010c54:	4607      	mov	r7, r0
 8010c56:	4691      	mov	r9, r2
 8010c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c5c:	f108 0601 	add.w	r6, r8, #1
 8010c60:	42b3      	cmp	r3, r6
 8010c62:	db0b      	blt.n	8010c7c <__lshift+0x38>
 8010c64:	4638      	mov	r0, r7
 8010c66:	f7ff fddb 	bl	8010820 <_Balloc>
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	b948      	cbnz	r0, 8010c82 <__lshift+0x3e>
 8010c6e:	4602      	mov	r2, r0
 8010c70:	4b28      	ldr	r3, [pc, #160]	; (8010d14 <__lshift+0xd0>)
 8010c72:	4829      	ldr	r0, [pc, #164]	; (8010d18 <__lshift+0xd4>)
 8010c74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010c78:	f000 faba 	bl	80111f0 <__assert_func>
 8010c7c:	3101      	adds	r1, #1
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	e7ee      	b.n	8010c60 <__lshift+0x1c>
 8010c82:	2300      	movs	r3, #0
 8010c84:	f100 0114 	add.w	r1, r0, #20
 8010c88:	f100 0210 	add.w	r2, r0, #16
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	4553      	cmp	r3, sl
 8010c90:	db33      	blt.n	8010cfa <__lshift+0xb6>
 8010c92:	6920      	ldr	r0, [r4, #16]
 8010c94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c98:	f104 0314 	add.w	r3, r4, #20
 8010c9c:	f019 091f 	ands.w	r9, r9, #31
 8010ca0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ca4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ca8:	d02b      	beq.n	8010d02 <__lshift+0xbe>
 8010caa:	f1c9 0e20 	rsb	lr, r9, #32
 8010cae:	468a      	mov	sl, r1
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	6818      	ldr	r0, [r3, #0]
 8010cb4:	fa00 f009 	lsl.w	r0, r0, r9
 8010cb8:	4302      	orrs	r2, r0
 8010cba:	f84a 2b04 	str.w	r2, [sl], #4
 8010cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cc2:	459c      	cmp	ip, r3
 8010cc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010cc8:	d8f3      	bhi.n	8010cb2 <__lshift+0x6e>
 8010cca:	ebac 0304 	sub.w	r3, ip, r4
 8010cce:	3b15      	subs	r3, #21
 8010cd0:	f023 0303 	bic.w	r3, r3, #3
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	f104 0015 	add.w	r0, r4, #21
 8010cda:	4584      	cmp	ip, r0
 8010cdc:	bf38      	it	cc
 8010cde:	2304      	movcc	r3, #4
 8010ce0:	50ca      	str	r2, [r1, r3]
 8010ce2:	b10a      	cbz	r2, 8010ce8 <__lshift+0xa4>
 8010ce4:	f108 0602 	add.w	r6, r8, #2
 8010ce8:	3e01      	subs	r6, #1
 8010cea:	4638      	mov	r0, r7
 8010cec:	612e      	str	r6, [r5, #16]
 8010cee:	4621      	mov	r1, r4
 8010cf0:	f7ff fdd6 	bl	80108a0 <_Bfree>
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010cfe:	3301      	adds	r3, #1
 8010d00:	e7c5      	b.n	8010c8e <__lshift+0x4a>
 8010d02:	3904      	subs	r1, #4
 8010d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d08:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d0c:	459c      	cmp	ip, r3
 8010d0e:	d8f9      	bhi.n	8010d04 <__lshift+0xc0>
 8010d10:	e7ea      	b.n	8010ce8 <__lshift+0xa4>
 8010d12:	bf00      	nop
 8010d14:	08013013 	.word	0x08013013
 8010d18:	08013024 	.word	0x08013024

08010d1c <__mcmp>:
 8010d1c:	b530      	push	{r4, r5, lr}
 8010d1e:	6902      	ldr	r2, [r0, #16]
 8010d20:	690c      	ldr	r4, [r1, #16]
 8010d22:	1b12      	subs	r2, r2, r4
 8010d24:	d10e      	bne.n	8010d44 <__mcmp+0x28>
 8010d26:	f100 0314 	add.w	r3, r0, #20
 8010d2a:	3114      	adds	r1, #20
 8010d2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010d30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010d34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010d38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010d3c:	42a5      	cmp	r5, r4
 8010d3e:	d003      	beq.n	8010d48 <__mcmp+0x2c>
 8010d40:	d305      	bcc.n	8010d4e <__mcmp+0x32>
 8010d42:	2201      	movs	r2, #1
 8010d44:	4610      	mov	r0, r2
 8010d46:	bd30      	pop	{r4, r5, pc}
 8010d48:	4283      	cmp	r3, r0
 8010d4a:	d3f3      	bcc.n	8010d34 <__mcmp+0x18>
 8010d4c:	e7fa      	b.n	8010d44 <__mcmp+0x28>
 8010d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d52:	e7f7      	b.n	8010d44 <__mcmp+0x28>

08010d54 <__mdiff>:
 8010d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d58:	460c      	mov	r4, r1
 8010d5a:	4606      	mov	r6, r0
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	4620      	mov	r0, r4
 8010d60:	4617      	mov	r7, r2
 8010d62:	f7ff ffdb 	bl	8010d1c <__mcmp>
 8010d66:	1e05      	subs	r5, r0, #0
 8010d68:	d110      	bne.n	8010d8c <__mdiff+0x38>
 8010d6a:	4629      	mov	r1, r5
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f7ff fd57 	bl	8010820 <_Balloc>
 8010d72:	b930      	cbnz	r0, 8010d82 <__mdiff+0x2e>
 8010d74:	4b39      	ldr	r3, [pc, #228]	; (8010e5c <__mdiff+0x108>)
 8010d76:	4602      	mov	r2, r0
 8010d78:	f240 2132 	movw	r1, #562	; 0x232
 8010d7c:	4838      	ldr	r0, [pc, #224]	; (8010e60 <__mdiff+0x10c>)
 8010d7e:	f000 fa37 	bl	80111f0 <__assert_func>
 8010d82:	2301      	movs	r3, #1
 8010d84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8c:	bfa4      	itt	ge
 8010d8e:	463b      	movge	r3, r7
 8010d90:	4627      	movge	r7, r4
 8010d92:	4630      	mov	r0, r6
 8010d94:	6879      	ldr	r1, [r7, #4]
 8010d96:	bfa6      	itte	ge
 8010d98:	461c      	movge	r4, r3
 8010d9a:	2500      	movge	r5, #0
 8010d9c:	2501      	movlt	r5, #1
 8010d9e:	f7ff fd3f 	bl	8010820 <_Balloc>
 8010da2:	b920      	cbnz	r0, 8010dae <__mdiff+0x5a>
 8010da4:	4b2d      	ldr	r3, [pc, #180]	; (8010e5c <__mdiff+0x108>)
 8010da6:	4602      	mov	r2, r0
 8010da8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010dac:	e7e6      	b.n	8010d7c <__mdiff+0x28>
 8010dae:	693e      	ldr	r6, [r7, #16]
 8010db0:	60c5      	str	r5, [r0, #12]
 8010db2:	6925      	ldr	r5, [r4, #16]
 8010db4:	f107 0114 	add.w	r1, r7, #20
 8010db8:	f104 0914 	add.w	r9, r4, #20
 8010dbc:	f100 0e14 	add.w	lr, r0, #20
 8010dc0:	f107 0210 	add.w	r2, r7, #16
 8010dc4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010dc8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010dcc:	46f2      	mov	sl, lr
 8010dce:	2700      	movs	r7, #0
 8010dd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010dd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010dd8:	fa1f f883 	uxth.w	r8, r3
 8010ddc:	fa17 f78b 	uxtah	r7, r7, fp
 8010de0:	0c1b      	lsrs	r3, r3, #16
 8010de2:	eba7 0808 	sub.w	r8, r7, r8
 8010de6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010dea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010dee:	fa1f f888 	uxth.w	r8, r8
 8010df2:	141f      	asrs	r7, r3, #16
 8010df4:	454d      	cmp	r5, r9
 8010df6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010dfa:	f84a 3b04 	str.w	r3, [sl], #4
 8010dfe:	d8e7      	bhi.n	8010dd0 <__mdiff+0x7c>
 8010e00:	1b2b      	subs	r3, r5, r4
 8010e02:	3b15      	subs	r3, #21
 8010e04:	f023 0303 	bic.w	r3, r3, #3
 8010e08:	3304      	adds	r3, #4
 8010e0a:	3415      	adds	r4, #21
 8010e0c:	42a5      	cmp	r5, r4
 8010e0e:	bf38      	it	cc
 8010e10:	2304      	movcc	r3, #4
 8010e12:	4419      	add	r1, r3
 8010e14:	4473      	add	r3, lr
 8010e16:	469e      	mov	lr, r3
 8010e18:	460d      	mov	r5, r1
 8010e1a:	4565      	cmp	r5, ip
 8010e1c:	d30e      	bcc.n	8010e3c <__mdiff+0xe8>
 8010e1e:	f10c 0203 	add.w	r2, ip, #3
 8010e22:	1a52      	subs	r2, r2, r1
 8010e24:	f022 0203 	bic.w	r2, r2, #3
 8010e28:	3903      	subs	r1, #3
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	bf38      	it	cc
 8010e2e:	2200      	movcc	r2, #0
 8010e30:	441a      	add	r2, r3
 8010e32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010e36:	b17b      	cbz	r3, 8010e58 <__mdiff+0x104>
 8010e38:	6106      	str	r6, [r0, #16]
 8010e3a:	e7a5      	b.n	8010d88 <__mdiff+0x34>
 8010e3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8010e40:	fa17 f488 	uxtah	r4, r7, r8
 8010e44:	1422      	asrs	r2, r4, #16
 8010e46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010e4a:	b2a4      	uxth	r4, r4
 8010e4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010e50:	f84e 4b04 	str.w	r4, [lr], #4
 8010e54:	1417      	asrs	r7, r2, #16
 8010e56:	e7e0      	b.n	8010e1a <__mdiff+0xc6>
 8010e58:	3e01      	subs	r6, #1
 8010e5a:	e7ea      	b.n	8010e32 <__mdiff+0xde>
 8010e5c:	08013013 	.word	0x08013013
 8010e60:	08013024 	.word	0x08013024

08010e64 <__d2b>:
 8010e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e68:	4689      	mov	r9, r1
 8010e6a:	2101      	movs	r1, #1
 8010e6c:	ec57 6b10 	vmov	r6, r7, d0
 8010e70:	4690      	mov	r8, r2
 8010e72:	f7ff fcd5 	bl	8010820 <_Balloc>
 8010e76:	4604      	mov	r4, r0
 8010e78:	b930      	cbnz	r0, 8010e88 <__d2b+0x24>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	4b25      	ldr	r3, [pc, #148]	; (8010f14 <__d2b+0xb0>)
 8010e7e:	4826      	ldr	r0, [pc, #152]	; (8010f18 <__d2b+0xb4>)
 8010e80:	f240 310a 	movw	r1, #778	; 0x30a
 8010e84:	f000 f9b4 	bl	80111f0 <__assert_func>
 8010e88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010e8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e90:	bb35      	cbnz	r5, 8010ee0 <__d2b+0x7c>
 8010e92:	2e00      	cmp	r6, #0
 8010e94:	9301      	str	r3, [sp, #4]
 8010e96:	d028      	beq.n	8010eea <__d2b+0x86>
 8010e98:	4668      	mov	r0, sp
 8010e9a:	9600      	str	r6, [sp, #0]
 8010e9c:	f7ff fd8c 	bl	80109b8 <__lo0bits>
 8010ea0:	9900      	ldr	r1, [sp, #0]
 8010ea2:	b300      	cbz	r0, 8010ee6 <__d2b+0x82>
 8010ea4:	9a01      	ldr	r2, [sp, #4]
 8010ea6:	f1c0 0320 	rsb	r3, r0, #32
 8010eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8010eae:	430b      	orrs	r3, r1
 8010eb0:	40c2      	lsrs	r2, r0
 8010eb2:	6163      	str	r3, [r4, #20]
 8010eb4:	9201      	str	r2, [sp, #4]
 8010eb6:	9b01      	ldr	r3, [sp, #4]
 8010eb8:	61a3      	str	r3, [r4, #24]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	bf14      	ite	ne
 8010ebe:	2202      	movne	r2, #2
 8010ec0:	2201      	moveq	r2, #1
 8010ec2:	6122      	str	r2, [r4, #16]
 8010ec4:	b1d5      	cbz	r5, 8010efc <__d2b+0x98>
 8010ec6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010eca:	4405      	add	r5, r0
 8010ecc:	f8c9 5000 	str.w	r5, [r9]
 8010ed0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ed4:	f8c8 0000 	str.w	r0, [r8]
 8010ed8:	4620      	mov	r0, r4
 8010eda:	b003      	add	sp, #12
 8010edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ee4:	e7d5      	b.n	8010e92 <__d2b+0x2e>
 8010ee6:	6161      	str	r1, [r4, #20]
 8010ee8:	e7e5      	b.n	8010eb6 <__d2b+0x52>
 8010eea:	a801      	add	r0, sp, #4
 8010eec:	f7ff fd64 	bl	80109b8 <__lo0bits>
 8010ef0:	9b01      	ldr	r3, [sp, #4]
 8010ef2:	6163      	str	r3, [r4, #20]
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	6122      	str	r2, [r4, #16]
 8010ef8:	3020      	adds	r0, #32
 8010efa:	e7e3      	b.n	8010ec4 <__d2b+0x60>
 8010efc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010f00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010f04:	f8c9 0000 	str.w	r0, [r9]
 8010f08:	6918      	ldr	r0, [r3, #16]
 8010f0a:	f7ff fd35 	bl	8010978 <__hi0bits>
 8010f0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f12:	e7df      	b.n	8010ed4 <__d2b+0x70>
 8010f14:	08013013 	.word	0x08013013
 8010f18:	08013024 	.word	0x08013024

08010f1c <_calloc_r>:
 8010f1c:	b513      	push	{r0, r1, r4, lr}
 8010f1e:	434a      	muls	r2, r1
 8010f20:	4611      	mov	r1, r2
 8010f22:	9201      	str	r2, [sp, #4]
 8010f24:	f7fe f8e4 	bl	800f0f0 <_malloc_r>
 8010f28:	4604      	mov	r4, r0
 8010f2a:	b118      	cbz	r0, 8010f34 <_calloc_r+0x18>
 8010f2c:	9a01      	ldr	r2, [sp, #4]
 8010f2e:	2100      	movs	r1, #0
 8010f30:	f7fe f886 	bl	800f040 <memset>
 8010f34:	4620      	mov	r0, r4
 8010f36:	b002      	add	sp, #8
 8010f38:	bd10      	pop	{r4, pc}

08010f3a <__ssputs_r>:
 8010f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f3e:	688e      	ldr	r6, [r1, #8]
 8010f40:	429e      	cmp	r6, r3
 8010f42:	4682      	mov	sl, r0
 8010f44:	460c      	mov	r4, r1
 8010f46:	4690      	mov	r8, r2
 8010f48:	461f      	mov	r7, r3
 8010f4a:	d838      	bhi.n	8010fbe <__ssputs_r+0x84>
 8010f4c:	898a      	ldrh	r2, [r1, #12]
 8010f4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f52:	d032      	beq.n	8010fba <__ssputs_r+0x80>
 8010f54:	6825      	ldr	r5, [r4, #0]
 8010f56:	6909      	ldr	r1, [r1, #16]
 8010f58:	eba5 0901 	sub.w	r9, r5, r1
 8010f5c:	6965      	ldr	r5, [r4, #20]
 8010f5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f66:	3301      	adds	r3, #1
 8010f68:	444b      	add	r3, r9
 8010f6a:	106d      	asrs	r5, r5, #1
 8010f6c:	429d      	cmp	r5, r3
 8010f6e:	bf38      	it	cc
 8010f70:	461d      	movcc	r5, r3
 8010f72:	0553      	lsls	r3, r2, #21
 8010f74:	d531      	bpl.n	8010fda <__ssputs_r+0xa0>
 8010f76:	4629      	mov	r1, r5
 8010f78:	f7fe f8ba 	bl	800f0f0 <_malloc_r>
 8010f7c:	4606      	mov	r6, r0
 8010f7e:	b950      	cbnz	r0, 8010f96 <__ssputs_r+0x5c>
 8010f80:	230c      	movs	r3, #12
 8010f82:	f8ca 3000 	str.w	r3, [sl]
 8010f86:	89a3      	ldrh	r3, [r4, #12]
 8010f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f8c:	81a3      	strh	r3, [r4, #12]
 8010f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f96:	6921      	ldr	r1, [r4, #16]
 8010f98:	464a      	mov	r2, r9
 8010f9a:	f7fe f843 	bl	800f024 <memcpy>
 8010f9e:	89a3      	ldrh	r3, [r4, #12]
 8010fa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fa8:	81a3      	strh	r3, [r4, #12]
 8010faa:	6126      	str	r6, [r4, #16]
 8010fac:	6165      	str	r5, [r4, #20]
 8010fae:	444e      	add	r6, r9
 8010fb0:	eba5 0509 	sub.w	r5, r5, r9
 8010fb4:	6026      	str	r6, [r4, #0]
 8010fb6:	60a5      	str	r5, [r4, #8]
 8010fb8:	463e      	mov	r6, r7
 8010fba:	42be      	cmp	r6, r7
 8010fbc:	d900      	bls.n	8010fc0 <__ssputs_r+0x86>
 8010fbe:	463e      	mov	r6, r7
 8010fc0:	4632      	mov	r2, r6
 8010fc2:	6820      	ldr	r0, [r4, #0]
 8010fc4:	4641      	mov	r1, r8
 8010fc6:	f000 f958 	bl	801127a <memmove>
 8010fca:	68a3      	ldr	r3, [r4, #8]
 8010fcc:	6822      	ldr	r2, [r4, #0]
 8010fce:	1b9b      	subs	r3, r3, r6
 8010fd0:	4432      	add	r2, r6
 8010fd2:	60a3      	str	r3, [r4, #8]
 8010fd4:	6022      	str	r2, [r4, #0]
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	e7db      	b.n	8010f92 <__ssputs_r+0x58>
 8010fda:	462a      	mov	r2, r5
 8010fdc:	f000 f967 	bl	80112ae <_realloc_r>
 8010fe0:	4606      	mov	r6, r0
 8010fe2:	2800      	cmp	r0, #0
 8010fe4:	d1e1      	bne.n	8010faa <__ssputs_r+0x70>
 8010fe6:	6921      	ldr	r1, [r4, #16]
 8010fe8:	4650      	mov	r0, sl
 8010fea:	f7fe f831 	bl	800f050 <_free_r>
 8010fee:	e7c7      	b.n	8010f80 <__ssputs_r+0x46>

08010ff0 <_svfiprintf_r>:
 8010ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff4:	4698      	mov	r8, r3
 8010ff6:	898b      	ldrh	r3, [r1, #12]
 8010ff8:	061b      	lsls	r3, r3, #24
 8010ffa:	b09d      	sub	sp, #116	; 0x74
 8010ffc:	4607      	mov	r7, r0
 8010ffe:	460d      	mov	r5, r1
 8011000:	4614      	mov	r4, r2
 8011002:	d50e      	bpl.n	8011022 <_svfiprintf_r+0x32>
 8011004:	690b      	ldr	r3, [r1, #16]
 8011006:	b963      	cbnz	r3, 8011022 <_svfiprintf_r+0x32>
 8011008:	2140      	movs	r1, #64	; 0x40
 801100a:	f7fe f871 	bl	800f0f0 <_malloc_r>
 801100e:	6028      	str	r0, [r5, #0]
 8011010:	6128      	str	r0, [r5, #16]
 8011012:	b920      	cbnz	r0, 801101e <_svfiprintf_r+0x2e>
 8011014:	230c      	movs	r3, #12
 8011016:	603b      	str	r3, [r7, #0]
 8011018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801101c:	e0d1      	b.n	80111c2 <_svfiprintf_r+0x1d2>
 801101e:	2340      	movs	r3, #64	; 0x40
 8011020:	616b      	str	r3, [r5, #20]
 8011022:	2300      	movs	r3, #0
 8011024:	9309      	str	r3, [sp, #36]	; 0x24
 8011026:	2320      	movs	r3, #32
 8011028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801102c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011030:	2330      	movs	r3, #48	; 0x30
 8011032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80111dc <_svfiprintf_r+0x1ec>
 8011036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801103a:	f04f 0901 	mov.w	r9, #1
 801103e:	4623      	mov	r3, r4
 8011040:	469a      	mov	sl, r3
 8011042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011046:	b10a      	cbz	r2, 801104c <_svfiprintf_r+0x5c>
 8011048:	2a25      	cmp	r2, #37	; 0x25
 801104a:	d1f9      	bne.n	8011040 <_svfiprintf_r+0x50>
 801104c:	ebba 0b04 	subs.w	fp, sl, r4
 8011050:	d00b      	beq.n	801106a <_svfiprintf_r+0x7a>
 8011052:	465b      	mov	r3, fp
 8011054:	4622      	mov	r2, r4
 8011056:	4629      	mov	r1, r5
 8011058:	4638      	mov	r0, r7
 801105a:	f7ff ff6e 	bl	8010f3a <__ssputs_r>
 801105e:	3001      	adds	r0, #1
 8011060:	f000 80aa 	beq.w	80111b8 <_svfiprintf_r+0x1c8>
 8011064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011066:	445a      	add	r2, fp
 8011068:	9209      	str	r2, [sp, #36]	; 0x24
 801106a:	f89a 3000 	ldrb.w	r3, [sl]
 801106e:	2b00      	cmp	r3, #0
 8011070:	f000 80a2 	beq.w	80111b8 <_svfiprintf_r+0x1c8>
 8011074:	2300      	movs	r3, #0
 8011076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801107a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801107e:	f10a 0a01 	add.w	sl, sl, #1
 8011082:	9304      	str	r3, [sp, #16]
 8011084:	9307      	str	r3, [sp, #28]
 8011086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801108a:	931a      	str	r3, [sp, #104]	; 0x68
 801108c:	4654      	mov	r4, sl
 801108e:	2205      	movs	r2, #5
 8011090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011094:	4851      	ldr	r0, [pc, #324]	; (80111dc <_svfiprintf_r+0x1ec>)
 8011096:	f7ef f8b3 	bl	8000200 <memchr>
 801109a:	9a04      	ldr	r2, [sp, #16]
 801109c:	b9d8      	cbnz	r0, 80110d6 <_svfiprintf_r+0xe6>
 801109e:	06d0      	lsls	r0, r2, #27
 80110a0:	bf44      	itt	mi
 80110a2:	2320      	movmi	r3, #32
 80110a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110a8:	0711      	lsls	r1, r2, #28
 80110aa:	bf44      	itt	mi
 80110ac:	232b      	movmi	r3, #43	; 0x2b
 80110ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110b2:	f89a 3000 	ldrb.w	r3, [sl]
 80110b6:	2b2a      	cmp	r3, #42	; 0x2a
 80110b8:	d015      	beq.n	80110e6 <_svfiprintf_r+0xf6>
 80110ba:	9a07      	ldr	r2, [sp, #28]
 80110bc:	4654      	mov	r4, sl
 80110be:	2000      	movs	r0, #0
 80110c0:	f04f 0c0a 	mov.w	ip, #10
 80110c4:	4621      	mov	r1, r4
 80110c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110ca:	3b30      	subs	r3, #48	; 0x30
 80110cc:	2b09      	cmp	r3, #9
 80110ce:	d94e      	bls.n	801116e <_svfiprintf_r+0x17e>
 80110d0:	b1b0      	cbz	r0, 8011100 <_svfiprintf_r+0x110>
 80110d2:	9207      	str	r2, [sp, #28]
 80110d4:	e014      	b.n	8011100 <_svfiprintf_r+0x110>
 80110d6:	eba0 0308 	sub.w	r3, r0, r8
 80110da:	fa09 f303 	lsl.w	r3, r9, r3
 80110de:	4313      	orrs	r3, r2
 80110e0:	9304      	str	r3, [sp, #16]
 80110e2:	46a2      	mov	sl, r4
 80110e4:	e7d2      	b.n	801108c <_svfiprintf_r+0x9c>
 80110e6:	9b03      	ldr	r3, [sp, #12]
 80110e8:	1d19      	adds	r1, r3, #4
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	9103      	str	r1, [sp, #12]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	bfbb      	ittet	lt
 80110f2:	425b      	neglt	r3, r3
 80110f4:	f042 0202 	orrlt.w	r2, r2, #2
 80110f8:	9307      	strge	r3, [sp, #28]
 80110fa:	9307      	strlt	r3, [sp, #28]
 80110fc:	bfb8      	it	lt
 80110fe:	9204      	strlt	r2, [sp, #16]
 8011100:	7823      	ldrb	r3, [r4, #0]
 8011102:	2b2e      	cmp	r3, #46	; 0x2e
 8011104:	d10c      	bne.n	8011120 <_svfiprintf_r+0x130>
 8011106:	7863      	ldrb	r3, [r4, #1]
 8011108:	2b2a      	cmp	r3, #42	; 0x2a
 801110a:	d135      	bne.n	8011178 <_svfiprintf_r+0x188>
 801110c:	9b03      	ldr	r3, [sp, #12]
 801110e:	1d1a      	adds	r2, r3, #4
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	9203      	str	r2, [sp, #12]
 8011114:	2b00      	cmp	r3, #0
 8011116:	bfb8      	it	lt
 8011118:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801111c:	3402      	adds	r4, #2
 801111e:	9305      	str	r3, [sp, #20]
 8011120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80111ec <_svfiprintf_r+0x1fc>
 8011124:	7821      	ldrb	r1, [r4, #0]
 8011126:	2203      	movs	r2, #3
 8011128:	4650      	mov	r0, sl
 801112a:	f7ef f869 	bl	8000200 <memchr>
 801112e:	b140      	cbz	r0, 8011142 <_svfiprintf_r+0x152>
 8011130:	2340      	movs	r3, #64	; 0x40
 8011132:	eba0 000a 	sub.w	r0, r0, sl
 8011136:	fa03 f000 	lsl.w	r0, r3, r0
 801113a:	9b04      	ldr	r3, [sp, #16]
 801113c:	4303      	orrs	r3, r0
 801113e:	3401      	adds	r4, #1
 8011140:	9304      	str	r3, [sp, #16]
 8011142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011146:	4826      	ldr	r0, [pc, #152]	; (80111e0 <_svfiprintf_r+0x1f0>)
 8011148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801114c:	2206      	movs	r2, #6
 801114e:	f7ef f857 	bl	8000200 <memchr>
 8011152:	2800      	cmp	r0, #0
 8011154:	d038      	beq.n	80111c8 <_svfiprintf_r+0x1d8>
 8011156:	4b23      	ldr	r3, [pc, #140]	; (80111e4 <_svfiprintf_r+0x1f4>)
 8011158:	bb1b      	cbnz	r3, 80111a2 <_svfiprintf_r+0x1b2>
 801115a:	9b03      	ldr	r3, [sp, #12]
 801115c:	3307      	adds	r3, #7
 801115e:	f023 0307 	bic.w	r3, r3, #7
 8011162:	3308      	adds	r3, #8
 8011164:	9303      	str	r3, [sp, #12]
 8011166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011168:	4433      	add	r3, r6
 801116a:	9309      	str	r3, [sp, #36]	; 0x24
 801116c:	e767      	b.n	801103e <_svfiprintf_r+0x4e>
 801116e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011172:	460c      	mov	r4, r1
 8011174:	2001      	movs	r0, #1
 8011176:	e7a5      	b.n	80110c4 <_svfiprintf_r+0xd4>
 8011178:	2300      	movs	r3, #0
 801117a:	3401      	adds	r4, #1
 801117c:	9305      	str	r3, [sp, #20]
 801117e:	4619      	mov	r1, r3
 8011180:	f04f 0c0a 	mov.w	ip, #10
 8011184:	4620      	mov	r0, r4
 8011186:	f810 2b01 	ldrb.w	r2, [r0], #1
 801118a:	3a30      	subs	r2, #48	; 0x30
 801118c:	2a09      	cmp	r2, #9
 801118e:	d903      	bls.n	8011198 <_svfiprintf_r+0x1a8>
 8011190:	2b00      	cmp	r3, #0
 8011192:	d0c5      	beq.n	8011120 <_svfiprintf_r+0x130>
 8011194:	9105      	str	r1, [sp, #20]
 8011196:	e7c3      	b.n	8011120 <_svfiprintf_r+0x130>
 8011198:	fb0c 2101 	mla	r1, ip, r1, r2
 801119c:	4604      	mov	r4, r0
 801119e:	2301      	movs	r3, #1
 80111a0:	e7f0      	b.n	8011184 <_svfiprintf_r+0x194>
 80111a2:	ab03      	add	r3, sp, #12
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	462a      	mov	r2, r5
 80111a8:	4b0f      	ldr	r3, [pc, #60]	; (80111e8 <_svfiprintf_r+0x1f8>)
 80111aa:	a904      	add	r1, sp, #16
 80111ac:	4638      	mov	r0, r7
 80111ae:	f7fe f899 	bl	800f2e4 <_printf_float>
 80111b2:	1c42      	adds	r2, r0, #1
 80111b4:	4606      	mov	r6, r0
 80111b6:	d1d6      	bne.n	8011166 <_svfiprintf_r+0x176>
 80111b8:	89ab      	ldrh	r3, [r5, #12]
 80111ba:	065b      	lsls	r3, r3, #25
 80111bc:	f53f af2c 	bmi.w	8011018 <_svfiprintf_r+0x28>
 80111c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111c2:	b01d      	add	sp, #116	; 0x74
 80111c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c8:	ab03      	add	r3, sp, #12
 80111ca:	9300      	str	r3, [sp, #0]
 80111cc:	462a      	mov	r2, r5
 80111ce:	4b06      	ldr	r3, [pc, #24]	; (80111e8 <_svfiprintf_r+0x1f8>)
 80111d0:	a904      	add	r1, sp, #16
 80111d2:	4638      	mov	r0, r7
 80111d4:	f7fe fb2a 	bl	800f82c <_printf_i>
 80111d8:	e7eb      	b.n	80111b2 <_svfiprintf_r+0x1c2>
 80111da:	bf00      	nop
 80111dc:	08013184 	.word	0x08013184
 80111e0:	0801318e 	.word	0x0801318e
 80111e4:	0800f2e5 	.word	0x0800f2e5
 80111e8:	08010f3b 	.word	0x08010f3b
 80111ec:	0801318a 	.word	0x0801318a

080111f0 <__assert_func>:
 80111f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111f2:	4614      	mov	r4, r2
 80111f4:	461a      	mov	r2, r3
 80111f6:	4b09      	ldr	r3, [pc, #36]	; (801121c <__assert_func+0x2c>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4605      	mov	r5, r0
 80111fc:	68d8      	ldr	r0, [r3, #12]
 80111fe:	b14c      	cbz	r4, 8011214 <__assert_func+0x24>
 8011200:	4b07      	ldr	r3, [pc, #28]	; (8011220 <__assert_func+0x30>)
 8011202:	9100      	str	r1, [sp, #0]
 8011204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011208:	4906      	ldr	r1, [pc, #24]	; (8011224 <__assert_func+0x34>)
 801120a:	462b      	mov	r3, r5
 801120c:	f000 f80e 	bl	801122c <fiprintf>
 8011210:	f000 fa9a 	bl	8011748 <abort>
 8011214:	4b04      	ldr	r3, [pc, #16]	; (8011228 <__assert_func+0x38>)
 8011216:	461c      	mov	r4, r3
 8011218:	e7f3      	b.n	8011202 <__assert_func+0x12>
 801121a:	bf00      	nop
 801121c:	20000018 	.word	0x20000018
 8011220:	08013195 	.word	0x08013195
 8011224:	080131a2 	.word	0x080131a2
 8011228:	080131d0 	.word	0x080131d0

0801122c <fiprintf>:
 801122c:	b40e      	push	{r1, r2, r3}
 801122e:	b503      	push	{r0, r1, lr}
 8011230:	4601      	mov	r1, r0
 8011232:	ab03      	add	r3, sp, #12
 8011234:	4805      	ldr	r0, [pc, #20]	; (801124c <fiprintf+0x20>)
 8011236:	f853 2b04 	ldr.w	r2, [r3], #4
 801123a:	6800      	ldr	r0, [r0, #0]
 801123c:	9301      	str	r3, [sp, #4]
 801123e:	f000 f885 	bl	801134c <_vfiprintf_r>
 8011242:	b002      	add	sp, #8
 8011244:	f85d eb04 	ldr.w	lr, [sp], #4
 8011248:	b003      	add	sp, #12
 801124a:	4770      	bx	lr
 801124c:	20000018 	.word	0x20000018

08011250 <__retarget_lock_init_recursive>:
 8011250:	4770      	bx	lr

08011252 <__retarget_lock_acquire_recursive>:
 8011252:	4770      	bx	lr

08011254 <__retarget_lock_release_recursive>:
 8011254:	4770      	bx	lr

08011256 <__ascii_mbtowc>:
 8011256:	b082      	sub	sp, #8
 8011258:	b901      	cbnz	r1, 801125c <__ascii_mbtowc+0x6>
 801125a:	a901      	add	r1, sp, #4
 801125c:	b142      	cbz	r2, 8011270 <__ascii_mbtowc+0x1a>
 801125e:	b14b      	cbz	r3, 8011274 <__ascii_mbtowc+0x1e>
 8011260:	7813      	ldrb	r3, [r2, #0]
 8011262:	600b      	str	r3, [r1, #0]
 8011264:	7812      	ldrb	r2, [r2, #0]
 8011266:	1e10      	subs	r0, r2, #0
 8011268:	bf18      	it	ne
 801126a:	2001      	movne	r0, #1
 801126c:	b002      	add	sp, #8
 801126e:	4770      	bx	lr
 8011270:	4610      	mov	r0, r2
 8011272:	e7fb      	b.n	801126c <__ascii_mbtowc+0x16>
 8011274:	f06f 0001 	mvn.w	r0, #1
 8011278:	e7f8      	b.n	801126c <__ascii_mbtowc+0x16>

0801127a <memmove>:
 801127a:	4288      	cmp	r0, r1
 801127c:	b510      	push	{r4, lr}
 801127e:	eb01 0402 	add.w	r4, r1, r2
 8011282:	d902      	bls.n	801128a <memmove+0x10>
 8011284:	4284      	cmp	r4, r0
 8011286:	4623      	mov	r3, r4
 8011288:	d807      	bhi.n	801129a <memmove+0x20>
 801128a:	1e43      	subs	r3, r0, #1
 801128c:	42a1      	cmp	r1, r4
 801128e:	d008      	beq.n	80112a2 <memmove+0x28>
 8011290:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011294:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011298:	e7f8      	b.n	801128c <memmove+0x12>
 801129a:	4402      	add	r2, r0
 801129c:	4601      	mov	r1, r0
 801129e:	428a      	cmp	r2, r1
 80112a0:	d100      	bne.n	80112a4 <memmove+0x2a>
 80112a2:	bd10      	pop	{r4, pc}
 80112a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80112ac:	e7f7      	b.n	801129e <memmove+0x24>

080112ae <_realloc_r>:
 80112ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b0:	4607      	mov	r7, r0
 80112b2:	4614      	mov	r4, r2
 80112b4:	460e      	mov	r6, r1
 80112b6:	b921      	cbnz	r1, 80112c2 <_realloc_r+0x14>
 80112b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80112bc:	4611      	mov	r1, r2
 80112be:	f7fd bf17 	b.w	800f0f0 <_malloc_r>
 80112c2:	b922      	cbnz	r2, 80112ce <_realloc_r+0x20>
 80112c4:	f7fd fec4 	bl	800f050 <_free_r>
 80112c8:	4625      	mov	r5, r4
 80112ca:	4628      	mov	r0, r5
 80112cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112ce:	f000 fc5f 	bl	8011b90 <_malloc_usable_size_r>
 80112d2:	42a0      	cmp	r0, r4
 80112d4:	d20f      	bcs.n	80112f6 <_realloc_r+0x48>
 80112d6:	4621      	mov	r1, r4
 80112d8:	4638      	mov	r0, r7
 80112da:	f7fd ff09 	bl	800f0f0 <_malloc_r>
 80112de:	4605      	mov	r5, r0
 80112e0:	2800      	cmp	r0, #0
 80112e2:	d0f2      	beq.n	80112ca <_realloc_r+0x1c>
 80112e4:	4631      	mov	r1, r6
 80112e6:	4622      	mov	r2, r4
 80112e8:	f7fd fe9c 	bl	800f024 <memcpy>
 80112ec:	4631      	mov	r1, r6
 80112ee:	4638      	mov	r0, r7
 80112f0:	f7fd feae 	bl	800f050 <_free_r>
 80112f4:	e7e9      	b.n	80112ca <_realloc_r+0x1c>
 80112f6:	4635      	mov	r5, r6
 80112f8:	e7e7      	b.n	80112ca <_realloc_r+0x1c>

080112fa <__sfputc_r>:
 80112fa:	6893      	ldr	r3, [r2, #8]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	2b00      	cmp	r3, #0
 8011300:	b410      	push	{r4}
 8011302:	6093      	str	r3, [r2, #8]
 8011304:	da08      	bge.n	8011318 <__sfputc_r+0x1e>
 8011306:	6994      	ldr	r4, [r2, #24]
 8011308:	42a3      	cmp	r3, r4
 801130a:	db01      	blt.n	8011310 <__sfputc_r+0x16>
 801130c:	290a      	cmp	r1, #10
 801130e:	d103      	bne.n	8011318 <__sfputc_r+0x1e>
 8011310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011314:	f000 b94a 	b.w	80115ac <__swbuf_r>
 8011318:	6813      	ldr	r3, [r2, #0]
 801131a:	1c58      	adds	r0, r3, #1
 801131c:	6010      	str	r0, [r2, #0]
 801131e:	7019      	strb	r1, [r3, #0]
 8011320:	4608      	mov	r0, r1
 8011322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011326:	4770      	bx	lr

08011328 <__sfputs_r>:
 8011328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132a:	4606      	mov	r6, r0
 801132c:	460f      	mov	r7, r1
 801132e:	4614      	mov	r4, r2
 8011330:	18d5      	adds	r5, r2, r3
 8011332:	42ac      	cmp	r4, r5
 8011334:	d101      	bne.n	801133a <__sfputs_r+0x12>
 8011336:	2000      	movs	r0, #0
 8011338:	e007      	b.n	801134a <__sfputs_r+0x22>
 801133a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801133e:	463a      	mov	r2, r7
 8011340:	4630      	mov	r0, r6
 8011342:	f7ff ffda 	bl	80112fa <__sfputc_r>
 8011346:	1c43      	adds	r3, r0, #1
 8011348:	d1f3      	bne.n	8011332 <__sfputs_r+0xa>
 801134a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801134c <_vfiprintf_r>:
 801134c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011350:	460d      	mov	r5, r1
 8011352:	b09d      	sub	sp, #116	; 0x74
 8011354:	4614      	mov	r4, r2
 8011356:	4698      	mov	r8, r3
 8011358:	4606      	mov	r6, r0
 801135a:	b118      	cbz	r0, 8011364 <_vfiprintf_r+0x18>
 801135c:	6983      	ldr	r3, [r0, #24]
 801135e:	b90b      	cbnz	r3, 8011364 <_vfiprintf_r+0x18>
 8011360:	f000 fb14 	bl	801198c <__sinit>
 8011364:	4b89      	ldr	r3, [pc, #548]	; (801158c <_vfiprintf_r+0x240>)
 8011366:	429d      	cmp	r5, r3
 8011368:	d11b      	bne.n	80113a2 <_vfiprintf_r+0x56>
 801136a:	6875      	ldr	r5, [r6, #4]
 801136c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801136e:	07d9      	lsls	r1, r3, #31
 8011370:	d405      	bmi.n	801137e <_vfiprintf_r+0x32>
 8011372:	89ab      	ldrh	r3, [r5, #12]
 8011374:	059a      	lsls	r2, r3, #22
 8011376:	d402      	bmi.n	801137e <_vfiprintf_r+0x32>
 8011378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801137a:	f7ff ff6a 	bl	8011252 <__retarget_lock_acquire_recursive>
 801137e:	89ab      	ldrh	r3, [r5, #12]
 8011380:	071b      	lsls	r3, r3, #28
 8011382:	d501      	bpl.n	8011388 <_vfiprintf_r+0x3c>
 8011384:	692b      	ldr	r3, [r5, #16]
 8011386:	b9eb      	cbnz	r3, 80113c4 <_vfiprintf_r+0x78>
 8011388:	4629      	mov	r1, r5
 801138a:	4630      	mov	r0, r6
 801138c:	f000 f96e 	bl	801166c <__swsetup_r>
 8011390:	b1c0      	cbz	r0, 80113c4 <_vfiprintf_r+0x78>
 8011392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011394:	07dc      	lsls	r4, r3, #31
 8011396:	d50e      	bpl.n	80113b6 <_vfiprintf_r+0x6a>
 8011398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801139c:	b01d      	add	sp, #116	; 0x74
 801139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a2:	4b7b      	ldr	r3, [pc, #492]	; (8011590 <_vfiprintf_r+0x244>)
 80113a4:	429d      	cmp	r5, r3
 80113a6:	d101      	bne.n	80113ac <_vfiprintf_r+0x60>
 80113a8:	68b5      	ldr	r5, [r6, #8]
 80113aa:	e7df      	b.n	801136c <_vfiprintf_r+0x20>
 80113ac:	4b79      	ldr	r3, [pc, #484]	; (8011594 <_vfiprintf_r+0x248>)
 80113ae:	429d      	cmp	r5, r3
 80113b0:	bf08      	it	eq
 80113b2:	68f5      	ldreq	r5, [r6, #12]
 80113b4:	e7da      	b.n	801136c <_vfiprintf_r+0x20>
 80113b6:	89ab      	ldrh	r3, [r5, #12]
 80113b8:	0598      	lsls	r0, r3, #22
 80113ba:	d4ed      	bmi.n	8011398 <_vfiprintf_r+0x4c>
 80113bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113be:	f7ff ff49 	bl	8011254 <__retarget_lock_release_recursive>
 80113c2:	e7e9      	b.n	8011398 <_vfiprintf_r+0x4c>
 80113c4:	2300      	movs	r3, #0
 80113c6:	9309      	str	r3, [sp, #36]	; 0x24
 80113c8:	2320      	movs	r3, #32
 80113ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80113d2:	2330      	movs	r3, #48	; 0x30
 80113d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011598 <_vfiprintf_r+0x24c>
 80113d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113dc:	f04f 0901 	mov.w	r9, #1
 80113e0:	4623      	mov	r3, r4
 80113e2:	469a      	mov	sl, r3
 80113e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113e8:	b10a      	cbz	r2, 80113ee <_vfiprintf_r+0xa2>
 80113ea:	2a25      	cmp	r2, #37	; 0x25
 80113ec:	d1f9      	bne.n	80113e2 <_vfiprintf_r+0x96>
 80113ee:	ebba 0b04 	subs.w	fp, sl, r4
 80113f2:	d00b      	beq.n	801140c <_vfiprintf_r+0xc0>
 80113f4:	465b      	mov	r3, fp
 80113f6:	4622      	mov	r2, r4
 80113f8:	4629      	mov	r1, r5
 80113fa:	4630      	mov	r0, r6
 80113fc:	f7ff ff94 	bl	8011328 <__sfputs_r>
 8011400:	3001      	adds	r0, #1
 8011402:	f000 80aa 	beq.w	801155a <_vfiprintf_r+0x20e>
 8011406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011408:	445a      	add	r2, fp
 801140a:	9209      	str	r2, [sp, #36]	; 0x24
 801140c:	f89a 3000 	ldrb.w	r3, [sl]
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80a2 	beq.w	801155a <_vfiprintf_r+0x20e>
 8011416:	2300      	movs	r3, #0
 8011418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801141c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011420:	f10a 0a01 	add.w	sl, sl, #1
 8011424:	9304      	str	r3, [sp, #16]
 8011426:	9307      	str	r3, [sp, #28]
 8011428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801142c:	931a      	str	r3, [sp, #104]	; 0x68
 801142e:	4654      	mov	r4, sl
 8011430:	2205      	movs	r2, #5
 8011432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011436:	4858      	ldr	r0, [pc, #352]	; (8011598 <_vfiprintf_r+0x24c>)
 8011438:	f7ee fee2 	bl	8000200 <memchr>
 801143c:	9a04      	ldr	r2, [sp, #16]
 801143e:	b9d8      	cbnz	r0, 8011478 <_vfiprintf_r+0x12c>
 8011440:	06d1      	lsls	r1, r2, #27
 8011442:	bf44      	itt	mi
 8011444:	2320      	movmi	r3, #32
 8011446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801144a:	0713      	lsls	r3, r2, #28
 801144c:	bf44      	itt	mi
 801144e:	232b      	movmi	r3, #43	; 0x2b
 8011450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011454:	f89a 3000 	ldrb.w	r3, [sl]
 8011458:	2b2a      	cmp	r3, #42	; 0x2a
 801145a:	d015      	beq.n	8011488 <_vfiprintf_r+0x13c>
 801145c:	9a07      	ldr	r2, [sp, #28]
 801145e:	4654      	mov	r4, sl
 8011460:	2000      	movs	r0, #0
 8011462:	f04f 0c0a 	mov.w	ip, #10
 8011466:	4621      	mov	r1, r4
 8011468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801146c:	3b30      	subs	r3, #48	; 0x30
 801146e:	2b09      	cmp	r3, #9
 8011470:	d94e      	bls.n	8011510 <_vfiprintf_r+0x1c4>
 8011472:	b1b0      	cbz	r0, 80114a2 <_vfiprintf_r+0x156>
 8011474:	9207      	str	r2, [sp, #28]
 8011476:	e014      	b.n	80114a2 <_vfiprintf_r+0x156>
 8011478:	eba0 0308 	sub.w	r3, r0, r8
 801147c:	fa09 f303 	lsl.w	r3, r9, r3
 8011480:	4313      	orrs	r3, r2
 8011482:	9304      	str	r3, [sp, #16]
 8011484:	46a2      	mov	sl, r4
 8011486:	e7d2      	b.n	801142e <_vfiprintf_r+0xe2>
 8011488:	9b03      	ldr	r3, [sp, #12]
 801148a:	1d19      	adds	r1, r3, #4
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	9103      	str	r1, [sp, #12]
 8011490:	2b00      	cmp	r3, #0
 8011492:	bfbb      	ittet	lt
 8011494:	425b      	neglt	r3, r3
 8011496:	f042 0202 	orrlt.w	r2, r2, #2
 801149a:	9307      	strge	r3, [sp, #28]
 801149c:	9307      	strlt	r3, [sp, #28]
 801149e:	bfb8      	it	lt
 80114a0:	9204      	strlt	r2, [sp, #16]
 80114a2:	7823      	ldrb	r3, [r4, #0]
 80114a4:	2b2e      	cmp	r3, #46	; 0x2e
 80114a6:	d10c      	bne.n	80114c2 <_vfiprintf_r+0x176>
 80114a8:	7863      	ldrb	r3, [r4, #1]
 80114aa:	2b2a      	cmp	r3, #42	; 0x2a
 80114ac:	d135      	bne.n	801151a <_vfiprintf_r+0x1ce>
 80114ae:	9b03      	ldr	r3, [sp, #12]
 80114b0:	1d1a      	adds	r2, r3, #4
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	9203      	str	r2, [sp, #12]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	bfb8      	it	lt
 80114ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80114be:	3402      	adds	r4, #2
 80114c0:	9305      	str	r3, [sp, #20]
 80114c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80115a8 <_vfiprintf_r+0x25c>
 80114c6:	7821      	ldrb	r1, [r4, #0]
 80114c8:	2203      	movs	r2, #3
 80114ca:	4650      	mov	r0, sl
 80114cc:	f7ee fe98 	bl	8000200 <memchr>
 80114d0:	b140      	cbz	r0, 80114e4 <_vfiprintf_r+0x198>
 80114d2:	2340      	movs	r3, #64	; 0x40
 80114d4:	eba0 000a 	sub.w	r0, r0, sl
 80114d8:	fa03 f000 	lsl.w	r0, r3, r0
 80114dc:	9b04      	ldr	r3, [sp, #16]
 80114de:	4303      	orrs	r3, r0
 80114e0:	3401      	adds	r4, #1
 80114e2:	9304      	str	r3, [sp, #16]
 80114e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e8:	482c      	ldr	r0, [pc, #176]	; (801159c <_vfiprintf_r+0x250>)
 80114ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114ee:	2206      	movs	r2, #6
 80114f0:	f7ee fe86 	bl	8000200 <memchr>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d03f      	beq.n	8011578 <_vfiprintf_r+0x22c>
 80114f8:	4b29      	ldr	r3, [pc, #164]	; (80115a0 <_vfiprintf_r+0x254>)
 80114fa:	bb1b      	cbnz	r3, 8011544 <_vfiprintf_r+0x1f8>
 80114fc:	9b03      	ldr	r3, [sp, #12]
 80114fe:	3307      	adds	r3, #7
 8011500:	f023 0307 	bic.w	r3, r3, #7
 8011504:	3308      	adds	r3, #8
 8011506:	9303      	str	r3, [sp, #12]
 8011508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801150a:	443b      	add	r3, r7
 801150c:	9309      	str	r3, [sp, #36]	; 0x24
 801150e:	e767      	b.n	80113e0 <_vfiprintf_r+0x94>
 8011510:	fb0c 3202 	mla	r2, ip, r2, r3
 8011514:	460c      	mov	r4, r1
 8011516:	2001      	movs	r0, #1
 8011518:	e7a5      	b.n	8011466 <_vfiprintf_r+0x11a>
 801151a:	2300      	movs	r3, #0
 801151c:	3401      	adds	r4, #1
 801151e:	9305      	str	r3, [sp, #20]
 8011520:	4619      	mov	r1, r3
 8011522:	f04f 0c0a 	mov.w	ip, #10
 8011526:	4620      	mov	r0, r4
 8011528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801152c:	3a30      	subs	r2, #48	; 0x30
 801152e:	2a09      	cmp	r2, #9
 8011530:	d903      	bls.n	801153a <_vfiprintf_r+0x1ee>
 8011532:	2b00      	cmp	r3, #0
 8011534:	d0c5      	beq.n	80114c2 <_vfiprintf_r+0x176>
 8011536:	9105      	str	r1, [sp, #20]
 8011538:	e7c3      	b.n	80114c2 <_vfiprintf_r+0x176>
 801153a:	fb0c 2101 	mla	r1, ip, r1, r2
 801153e:	4604      	mov	r4, r0
 8011540:	2301      	movs	r3, #1
 8011542:	e7f0      	b.n	8011526 <_vfiprintf_r+0x1da>
 8011544:	ab03      	add	r3, sp, #12
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	462a      	mov	r2, r5
 801154a:	4b16      	ldr	r3, [pc, #88]	; (80115a4 <_vfiprintf_r+0x258>)
 801154c:	a904      	add	r1, sp, #16
 801154e:	4630      	mov	r0, r6
 8011550:	f7fd fec8 	bl	800f2e4 <_printf_float>
 8011554:	4607      	mov	r7, r0
 8011556:	1c78      	adds	r0, r7, #1
 8011558:	d1d6      	bne.n	8011508 <_vfiprintf_r+0x1bc>
 801155a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801155c:	07d9      	lsls	r1, r3, #31
 801155e:	d405      	bmi.n	801156c <_vfiprintf_r+0x220>
 8011560:	89ab      	ldrh	r3, [r5, #12]
 8011562:	059a      	lsls	r2, r3, #22
 8011564:	d402      	bmi.n	801156c <_vfiprintf_r+0x220>
 8011566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011568:	f7ff fe74 	bl	8011254 <__retarget_lock_release_recursive>
 801156c:	89ab      	ldrh	r3, [r5, #12]
 801156e:	065b      	lsls	r3, r3, #25
 8011570:	f53f af12 	bmi.w	8011398 <_vfiprintf_r+0x4c>
 8011574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011576:	e711      	b.n	801139c <_vfiprintf_r+0x50>
 8011578:	ab03      	add	r3, sp, #12
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	462a      	mov	r2, r5
 801157e:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <_vfiprintf_r+0x258>)
 8011580:	a904      	add	r1, sp, #16
 8011582:	4630      	mov	r0, r6
 8011584:	f7fe f952 	bl	800f82c <_printf_i>
 8011588:	e7e4      	b.n	8011554 <_vfiprintf_r+0x208>
 801158a:	bf00      	nop
 801158c:	080132fc 	.word	0x080132fc
 8011590:	0801331c 	.word	0x0801331c
 8011594:	080132dc 	.word	0x080132dc
 8011598:	08013184 	.word	0x08013184
 801159c:	0801318e 	.word	0x0801318e
 80115a0:	0800f2e5 	.word	0x0800f2e5
 80115a4:	08011329 	.word	0x08011329
 80115a8:	0801318a 	.word	0x0801318a

080115ac <__swbuf_r>:
 80115ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ae:	460e      	mov	r6, r1
 80115b0:	4614      	mov	r4, r2
 80115b2:	4605      	mov	r5, r0
 80115b4:	b118      	cbz	r0, 80115be <__swbuf_r+0x12>
 80115b6:	6983      	ldr	r3, [r0, #24]
 80115b8:	b90b      	cbnz	r3, 80115be <__swbuf_r+0x12>
 80115ba:	f000 f9e7 	bl	801198c <__sinit>
 80115be:	4b21      	ldr	r3, [pc, #132]	; (8011644 <__swbuf_r+0x98>)
 80115c0:	429c      	cmp	r4, r3
 80115c2:	d12b      	bne.n	801161c <__swbuf_r+0x70>
 80115c4:	686c      	ldr	r4, [r5, #4]
 80115c6:	69a3      	ldr	r3, [r4, #24]
 80115c8:	60a3      	str	r3, [r4, #8]
 80115ca:	89a3      	ldrh	r3, [r4, #12]
 80115cc:	071a      	lsls	r2, r3, #28
 80115ce:	d52f      	bpl.n	8011630 <__swbuf_r+0x84>
 80115d0:	6923      	ldr	r3, [r4, #16]
 80115d2:	b36b      	cbz	r3, 8011630 <__swbuf_r+0x84>
 80115d4:	6923      	ldr	r3, [r4, #16]
 80115d6:	6820      	ldr	r0, [r4, #0]
 80115d8:	1ac0      	subs	r0, r0, r3
 80115da:	6963      	ldr	r3, [r4, #20]
 80115dc:	b2f6      	uxtb	r6, r6
 80115de:	4283      	cmp	r3, r0
 80115e0:	4637      	mov	r7, r6
 80115e2:	dc04      	bgt.n	80115ee <__swbuf_r+0x42>
 80115e4:	4621      	mov	r1, r4
 80115e6:	4628      	mov	r0, r5
 80115e8:	f000 f93c 	bl	8011864 <_fflush_r>
 80115ec:	bb30      	cbnz	r0, 801163c <__swbuf_r+0x90>
 80115ee:	68a3      	ldr	r3, [r4, #8]
 80115f0:	3b01      	subs	r3, #1
 80115f2:	60a3      	str	r3, [r4, #8]
 80115f4:	6823      	ldr	r3, [r4, #0]
 80115f6:	1c5a      	adds	r2, r3, #1
 80115f8:	6022      	str	r2, [r4, #0]
 80115fa:	701e      	strb	r6, [r3, #0]
 80115fc:	6963      	ldr	r3, [r4, #20]
 80115fe:	3001      	adds	r0, #1
 8011600:	4283      	cmp	r3, r0
 8011602:	d004      	beq.n	801160e <__swbuf_r+0x62>
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	07db      	lsls	r3, r3, #31
 8011608:	d506      	bpl.n	8011618 <__swbuf_r+0x6c>
 801160a:	2e0a      	cmp	r6, #10
 801160c:	d104      	bne.n	8011618 <__swbuf_r+0x6c>
 801160e:	4621      	mov	r1, r4
 8011610:	4628      	mov	r0, r5
 8011612:	f000 f927 	bl	8011864 <_fflush_r>
 8011616:	b988      	cbnz	r0, 801163c <__swbuf_r+0x90>
 8011618:	4638      	mov	r0, r7
 801161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801161c:	4b0a      	ldr	r3, [pc, #40]	; (8011648 <__swbuf_r+0x9c>)
 801161e:	429c      	cmp	r4, r3
 8011620:	d101      	bne.n	8011626 <__swbuf_r+0x7a>
 8011622:	68ac      	ldr	r4, [r5, #8]
 8011624:	e7cf      	b.n	80115c6 <__swbuf_r+0x1a>
 8011626:	4b09      	ldr	r3, [pc, #36]	; (801164c <__swbuf_r+0xa0>)
 8011628:	429c      	cmp	r4, r3
 801162a:	bf08      	it	eq
 801162c:	68ec      	ldreq	r4, [r5, #12]
 801162e:	e7ca      	b.n	80115c6 <__swbuf_r+0x1a>
 8011630:	4621      	mov	r1, r4
 8011632:	4628      	mov	r0, r5
 8011634:	f000 f81a 	bl	801166c <__swsetup_r>
 8011638:	2800      	cmp	r0, #0
 801163a:	d0cb      	beq.n	80115d4 <__swbuf_r+0x28>
 801163c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011640:	e7ea      	b.n	8011618 <__swbuf_r+0x6c>
 8011642:	bf00      	nop
 8011644:	080132fc 	.word	0x080132fc
 8011648:	0801331c 	.word	0x0801331c
 801164c:	080132dc 	.word	0x080132dc

08011650 <__ascii_wctomb>:
 8011650:	b149      	cbz	r1, 8011666 <__ascii_wctomb+0x16>
 8011652:	2aff      	cmp	r2, #255	; 0xff
 8011654:	bf85      	ittet	hi
 8011656:	238a      	movhi	r3, #138	; 0x8a
 8011658:	6003      	strhi	r3, [r0, #0]
 801165a:	700a      	strbls	r2, [r1, #0]
 801165c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011660:	bf98      	it	ls
 8011662:	2001      	movls	r0, #1
 8011664:	4770      	bx	lr
 8011666:	4608      	mov	r0, r1
 8011668:	4770      	bx	lr
	...

0801166c <__swsetup_r>:
 801166c:	4b32      	ldr	r3, [pc, #200]	; (8011738 <__swsetup_r+0xcc>)
 801166e:	b570      	push	{r4, r5, r6, lr}
 8011670:	681d      	ldr	r5, [r3, #0]
 8011672:	4606      	mov	r6, r0
 8011674:	460c      	mov	r4, r1
 8011676:	b125      	cbz	r5, 8011682 <__swsetup_r+0x16>
 8011678:	69ab      	ldr	r3, [r5, #24]
 801167a:	b913      	cbnz	r3, 8011682 <__swsetup_r+0x16>
 801167c:	4628      	mov	r0, r5
 801167e:	f000 f985 	bl	801198c <__sinit>
 8011682:	4b2e      	ldr	r3, [pc, #184]	; (801173c <__swsetup_r+0xd0>)
 8011684:	429c      	cmp	r4, r3
 8011686:	d10f      	bne.n	80116a8 <__swsetup_r+0x3c>
 8011688:	686c      	ldr	r4, [r5, #4]
 801168a:	89a3      	ldrh	r3, [r4, #12]
 801168c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011690:	0719      	lsls	r1, r3, #28
 8011692:	d42c      	bmi.n	80116ee <__swsetup_r+0x82>
 8011694:	06dd      	lsls	r5, r3, #27
 8011696:	d411      	bmi.n	80116bc <__swsetup_r+0x50>
 8011698:	2309      	movs	r3, #9
 801169a:	6033      	str	r3, [r6, #0]
 801169c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80116a0:	81a3      	strh	r3, [r4, #12]
 80116a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116a6:	e03e      	b.n	8011726 <__swsetup_r+0xba>
 80116a8:	4b25      	ldr	r3, [pc, #148]	; (8011740 <__swsetup_r+0xd4>)
 80116aa:	429c      	cmp	r4, r3
 80116ac:	d101      	bne.n	80116b2 <__swsetup_r+0x46>
 80116ae:	68ac      	ldr	r4, [r5, #8]
 80116b0:	e7eb      	b.n	801168a <__swsetup_r+0x1e>
 80116b2:	4b24      	ldr	r3, [pc, #144]	; (8011744 <__swsetup_r+0xd8>)
 80116b4:	429c      	cmp	r4, r3
 80116b6:	bf08      	it	eq
 80116b8:	68ec      	ldreq	r4, [r5, #12]
 80116ba:	e7e6      	b.n	801168a <__swsetup_r+0x1e>
 80116bc:	0758      	lsls	r0, r3, #29
 80116be:	d512      	bpl.n	80116e6 <__swsetup_r+0x7a>
 80116c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116c2:	b141      	cbz	r1, 80116d6 <__swsetup_r+0x6a>
 80116c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116c8:	4299      	cmp	r1, r3
 80116ca:	d002      	beq.n	80116d2 <__swsetup_r+0x66>
 80116cc:	4630      	mov	r0, r6
 80116ce:	f7fd fcbf 	bl	800f050 <_free_r>
 80116d2:	2300      	movs	r3, #0
 80116d4:	6363      	str	r3, [r4, #52]	; 0x34
 80116d6:	89a3      	ldrh	r3, [r4, #12]
 80116d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80116dc:	81a3      	strh	r3, [r4, #12]
 80116de:	2300      	movs	r3, #0
 80116e0:	6063      	str	r3, [r4, #4]
 80116e2:	6923      	ldr	r3, [r4, #16]
 80116e4:	6023      	str	r3, [r4, #0]
 80116e6:	89a3      	ldrh	r3, [r4, #12]
 80116e8:	f043 0308 	orr.w	r3, r3, #8
 80116ec:	81a3      	strh	r3, [r4, #12]
 80116ee:	6923      	ldr	r3, [r4, #16]
 80116f0:	b94b      	cbnz	r3, 8011706 <__swsetup_r+0x9a>
 80116f2:	89a3      	ldrh	r3, [r4, #12]
 80116f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80116f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116fc:	d003      	beq.n	8011706 <__swsetup_r+0x9a>
 80116fe:	4621      	mov	r1, r4
 8011700:	4630      	mov	r0, r6
 8011702:	f000 fa05 	bl	8011b10 <__smakebuf_r>
 8011706:	89a0      	ldrh	r0, [r4, #12]
 8011708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801170c:	f010 0301 	ands.w	r3, r0, #1
 8011710:	d00a      	beq.n	8011728 <__swsetup_r+0xbc>
 8011712:	2300      	movs	r3, #0
 8011714:	60a3      	str	r3, [r4, #8]
 8011716:	6963      	ldr	r3, [r4, #20]
 8011718:	425b      	negs	r3, r3
 801171a:	61a3      	str	r3, [r4, #24]
 801171c:	6923      	ldr	r3, [r4, #16]
 801171e:	b943      	cbnz	r3, 8011732 <__swsetup_r+0xc6>
 8011720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011724:	d1ba      	bne.n	801169c <__swsetup_r+0x30>
 8011726:	bd70      	pop	{r4, r5, r6, pc}
 8011728:	0781      	lsls	r1, r0, #30
 801172a:	bf58      	it	pl
 801172c:	6963      	ldrpl	r3, [r4, #20]
 801172e:	60a3      	str	r3, [r4, #8]
 8011730:	e7f4      	b.n	801171c <__swsetup_r+0xb0>
 8011732:	2000      	movs	r0, #0
 8011734:	e7f7      	b.n	8011726 <__swsetup_r+0xba>
 8011736:	bf00      	nop
 8011738:	20000018 	.word	0x20000018
 801173c:	080132fc 	.word	0x080132fc
 8011740:	0801331c 	.word	0x0801331c
 8011744:	080132dc 	.word	0x080132dc

08011748 <abort>:
 8011748:	b508      	push	{r3, lr}
 801174a:	2006      	movs	r0, #6
 801174c:	f000 fa50 	bl	8011bf0 <raise>
 8011750:	2001      	movs	r0, #1
 8011752:	f001 fb11 	bl	8012d78 <_exit>
	...

08011758 <__sflush_r>:
 8011758:	898a      	ldrh	r2, [r1, #12]
 801175a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801175e:	4605      	mov	r5, r0
 8011760:	0710      	lsls	r0, r2, #28
 8011762:	460c      	mov	r4, r1
 8011764:	d458      	bmi.n	8011818 <__sflush_r+0xc0>
 8011766:	684b      	ldr	r3, [r1, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	dc05      	bgt.n	8011778 <__sflush_r+0x20>
 801176c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801176e:	2b00      	cmp	r3, #0
 8011770:	dc02      	bgt.n	8011778 <__sflush_r+0x20>
 8011772:	2000      	movs	r0, #0
 8011774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801177a:	2e00      	cmp	r6, #0
 801177c:	d0f9      	beq.n	8011772 <__sflush_r+0x1a>
 801177e:	2300      	movs	r3, #0
 8011780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011784:	682f      	ldr	r7, [r5, #0]
 8011786:	602b      	str	r3, [r5, #0]
 8011788:	d032      	beq.n	80117f0 <__sflush_r+0x98>
 801178a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801178c:	89a3      	ldrh	r3, [r4, #12]
 801178e:	075a      	lsls	r2, r3, #29
 8011790:	d505      	bpl.n	801179e <__sflush_r+0x46>
 8011792:	6863      	ldr	r3, [r4, #4]
 8011794:	1ac0      	subs	r0, r0, r3
 8011796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011798:	b10b      	cbz	r3, 801179e <__sflush_r+0x46>
 801179a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801179c:	1ac0      	subs	r0, r0, r3
 801179e:	2300      	movs	r3, #0
 80117a0:	4602      	mov	r2, r0
 80117a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117a4:	6a21      	ldr	r1, [r4, #32]
 80117a6:	4628      	mov	r0, r5
 80117a8:	47b0      	blx	r6
 80117aa:	1c43      	adds	r3, r0, #1
 80117ac:	89a3      	ldrh	r3, [r4, #12]
 80117ae:	d106      	bne.n	80117be <__sflush_r+0x66>
 80117b0:	6829      	ldr	r1, [r5, #0]
 80117b2:	291d      	cmp	r1, #29
 80117b4:	d82c      	bhi.n	8011810 <__sflush_r+0xb8>
 80117b6:	4a2a      	ldr	r2, [pc, #168]	; (8011860 <__sflush_r+0x108>)
 80117b8:	40ca      	lsrs	r2, r1
 80117ba:	07d6      	lsls	r6, r2, #31
 80117bc:	d528      	bpl.n	8011810 <__sflush_r+0xb8>
 80117be:	2200      	movs	r2, #0
 80117c0:	6062      	str	r2, [r4, #4]
 80117c2:	04d9      	lsls	r1, r3, #19
 80117c4:	6922      	ldr	r2, [r4, #16]
 80117c6:	6022      	str	r2, [r4, #0]
 80117c8:	d504      	bpl.n	80117d4 <__sflush_r+0x7c>
 80117ca:	1c42      	adds	r2, r0, #1
 80117cc:	d101      	bne.n	80117d2 <__sflush_r+0x7a>
 80117ce:	682b      	ldr	r3, [r5, #0]
 80117d0:	b903      	cbnz	r3, 80117d4 <__sflush_r+0x7c>
 80117d2:	6560      	str	r0, [r4, #84]	; 0x54
 80117d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117d6:	602f      	str	r7, [r5, #0]
 80117d8:	2900      	cmp	r1, #0
 80117da:	d0ca      	beq.n	8011772 <__sflush_r+0x1a>
 80117dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117e0:	4299      	cmp	r1, r3
 80117e2:	d002      	beq.n	80117ea <__sflush_r+0x92>
 80117e4:	4628      	mov	r0, r5
 80117e6:	f7fd fc33 	bl	800f050 <_free_r>
 80117ea:	2000      	movs	r0, #0
 80117ec:	6360      	str	r0, [r4, #52]	; 0x34
 80117ee:	e7c1      	b.n	8011774 <__sflush_r+0x1c>
 80117f0:	6a21      	ldr	r1, [r4, #32]
 80117f2:	2301      	movs	r3, #1
 80117f4:	4628      	mov	r0, r5
 80117f6:	47b0      	blx	r6
 80117f8:	1c41      	adds	r1, r0, #1
 80117fa:	d1c7      	bne.n	801178c <__sflush_r+0x34>
 80117fc:	682b      	ldr	r3, [r5, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d0c4      	beq.n	801178c <__sflush_r+0x34>
 8011802:	2b1d      	cmp	r3, #29
 8011804:	d001      	beq.n	801180a <__sflush_r+0xb2>
 8011806:	2b16      	cmp	r3, #22
 8011808:	d101      	bne.n	801180e <__sflush_r+0xb6>
 801180a:	602f      	str	r7, [r5, #0]
 801180c:	e7b1      	b.n	8011772 <__sflush_r+0x1a>
 801180e:	89a3      	ldrh	r3, [r4, #12]
 8011810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011814:	81a3      	strh	r3, [r4, #12]
 8011816:	e7ad      	b.n	8011774 <__sflush_r+0x1c>
 8011818:	690f      	ldr	r7, [r1, #16]
 801181a:	2f00      	cmp	r7, #0
 801181c:	d0a9      	beq.n	8011772 <__sflush_r+0x1a>
 801181e:	0793      	lsls	r3, r2, #30
 8011820:	680e      	ldr	r6, [r1, #0]
 8011822:	bf08      	it	eq
 8011824:	694b      	ldreq	r3, [r1, #20]
 8011826:	600f      	str	r7, [r1, #0]
 8011828:	bf18      	it	ne
 801182a:	2300      	movne	r3, #0
 801182c:	eba6 0807 	sub.w	r8, r6, r7
 8011830:	608b      	str	r3, [r1, #8]
 8011832:	f1b8 0f00 	cmp.w	r8, #0
 8011836:	dd9c      	ble.n	8011772 <__sflush_r+0x1a>
 8011838:	6a21      	ldr	r1, [r4, #32]
 801183a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801183c:	4643      	mov	r3, r8
 801183e:	463a      	mov	r2, r7
 8011840:	4628      	mov	r0, r5
 8011842:	47b0      	blx	r6
 8011844:	2800      	cmp	r0, #0
 8011846:	dc06      	bgt.n	8011856 <__sflush_r+0xfe>
 8011848:	89a3      	ldrh	r3, [r4, #12]
 801184a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801184e:	81a3      	strh	r3, [r4, #12]
 8011850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011854:	e78e      	b.n	8011774 <__sflush_r+0x1c>
 8011856:	4407      	add	r7, r0
 8011858:	eba8 0800 	sub.w	r8, r8, r0
 801185c:	e7e9      	b.n	8011832 <__sflush_r+0xda>
 801185e:	bf00      	nop
 8011860:	20400001 	.word	0x20400001

08011864 <_fflush_r>:
 8011864:	b538      	push	{r3, r4, r5, lr}
 8011866:	690b      	ldr	r3, [r1, #16]
 8011868:	4605      	mov	r5, r0
 801186a:	460c      	mov	r4, r1
 801186c:	b913      	cbnz	r3, 8011874 <_fflush_r+0x10>
 801186e:	2500      	movs	r5, #0
 8011870:	4628      	mov	r0, r5
 8011872:	bd38      	pop	{r3, r4, r5, pc}
 8011874:	b118      	cbz	r0, 801187e <_fflush_r+0x1a>
 8011876:	6983      	ldr	r3, [r0, #24]
 8011878:	b90b      	cbnz	r3, 801187e <_fflush_r+0x1a>
 801187a:	f000 f887 	bl	801198c <__sinit>
 801187e:	4b14      	ldr	r3, [pc, #80]	; (80118d0 <_fflush_r+0x6c>)
 8011880:	429c      	cmp	r4, r3
 8011882:	d11b      	bne.n	80118bc <_fflush_r+0x58>
 8011884:	686c      	ldr	r4, [r5, #4]
 8011886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d0ef      	beq.n	801186e <_fflush_r+0xa>
 801188e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011890:	07d0      	lsls	r0, r2, #31
 8011892:	d404      	bmi.n	801189e <_fflush_r+0x3a>
 8011894:	0599      	lsls	r1, r3, #22
 8011896:	d402      	bmi.n	801189e <_fflush_r+0x3a>
 8011898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801189a:	f7ff fcda 	bl	8011252 <__retarget_lock_acquire_recursive>
 801189e:	4628      	mov	r0, r5
 80118a0:	4621      	mov	r1, r4
 80118a2:	f7ff ff59 	bl	8011758 <__sflush_r>
 80118a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118a8:	07da      	lsls	r2, r3, #31
 80118aa:	4605      	mov	r5, r0
 80118ac:	d4e0      	bmi.n	8011870 <_fflush_r+0xc>
 80118ae:	89a3      	ldrh	r3, [r4, #12]
 80118b0:	059b      	lsls	r3, r3, #22
 80118b2:	d4dd      	bmi.n	8011870 <_fflush_r+0xc>
 80118b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118b6:	f7ff fccd 	bl	8011254 <__retarget_lock_release_recursive>
 80118ba:	e7d9      	b.n	8011870 <_fflush_r+0xc>
 80118bc:	4b05      	ldr	r3, [pc, #20]	; (80118d4 <_fflush_r+0x70>)
 80118be:	429c      	cmp	r4, r3
 80118c0:	d101      	bne.n	80118c6 <_fflush_r+0x62>
 80118c2:	68ac      	ldr	r4, [r5, #8]
 80118c4:	e7df      	b.n	8011886 <_fflush_r+0x22>
 80118c6:	4b04      	ldr	r3, [pc, #16]	; (80118d8 <_fflush_r+0x74>)
 80118c8:	429c      	cmp	r4, r3
 80118ca:	bf08      	it	eq
 80118cc:	68ec      	ldreq	r4, [r5, #12]
 80118ce:	e7da      	b.n	8011886 <_fflush_r+0x22>
 80118d0:	080132fc 	.word	0x080132fc
 80118d4:	0801331c 	.word	0x0801331c
 80118d8:	080132dc 	.word	0x080132dc

080118dc <std>:
 80118dc:	2300      	movs	r3, #0
 80118de:	b510      	push	{r4, lr}
 80118e0:	4604      	mov	r4, r0
 80118e2:	e9c0 3300 	strd	r3, r3, [r0]
 80118e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118ea:	6083      	str	r3, [r0, #8]
 80118ec:	8181      	strh	r1, [r0, #12]
 80118ee:	6643      	str	r3, [r0, #100]	; 0x64
 80118f0:	81c2      	strh	r2, [r0, #14]
 80118f2:	6183      	str	r3, [r0, #24]
 80118f4:	4619      	mov	r1, r3
 80118f6:	2208      	movs	r2, #8
 80118f8:	305c      	adds	r0, #92	; 0x5c
 80118fa:	f7fd fba1 	bl	800f040 <memset>
 80118fe:	4b05      	ldr	r3, [pc, #20]	; (8011914 <std+0x38>)
 8011900:	6263      	str	r3, [r4, #36]	; 0x24
 8011902:	4b05      	ldr	r3, [pc, #20]	; (8011918 <std+0x3c>)
 8011904:	62a3      	str	r3, [r4, #40]	; 0x28
 8011906:	4b05      	ldr	r3, [pc, #20]	; (801191c <std+0x40>)
 8011908:	62e3      	str	r3, [r4, #44]	; 0x2c
 801190a:	4b05      	ldr	r3, [pc, #20]	; (8011920 <std+0x44>)
 801190c:	6224      	str	r4, [r4, #32]
 801190e:	6323      	str	r3, [r4, #48]	; 0x30
 8011910:	bd10      	pop	{r4, pc}
 8011912:	bf00      	nop
 8011914:	08011c29 	.word	0x08011c29
 8011918:	08011c4b 	.word	0x08011c4b
 801191c:	08011c83 	.word	0x08011c83
 8011920:	08011ca7 	.word	0x08011ca7

08011924 <_cleanup_r>:
 8011924:	4901      	ldr	r1, [pc, #4]	; (801192c <_cleanup_r+0x8>)
 8011926:	f000 b8af 	b.w	8011a88 <_fwalk_reent>
 801192a:	bf00      	nop
 801192c:	08011865 	.word	0x08011865

08011930 <__sfmoreglue>:
 8011930:	b570      	push	{r4, r5, r6, lr}
 8011932:	1e4a      	subs	r2, r1, #1
 8011934:	2568      	movs	r5, #104	; 0x68
 8011936:	4355      	muls	r5, r2
 8011938:	460e      	mov	r6, r1
 801193a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801193e:	f7fd fbd7 	bl	800f0f0 <_malloc_r>
 8011942:	4604      	mov	r4, r0
 8011944:	b140      	cbz	r0, 8011958 <__sfmoreglue+0x28>
 8011946:	2100      	movs	r1, #0
 8011948:	e9c0 1600 	strd	r1, r6, [r0]
 801194c:	300c      	adds	r0, #12
 801194e:	60a0      	str	r0, [r4, #8]
 8011950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011954:	f7fd fb74 	bl	800f040 <memset>
 8011958:	4620      	mov	r0, r4
 801195a:	bd70      	pop	{r4, r5, r6, pc}

0801195c <__sfp_lock_acquire>:
 801195c:	4801      	ldr	r0, [pc, #4]	; (8011964 <__sfp_lock_acquire+0x8>)
 801195e:	f7ff bc78 	b.w	8011252 <__retarget_lock_acquire_recursive>
 8011962:	bf00      	nop
 8011964:	2000823c 	.word	0x2000823c

08011968 <__sfp_lock_release>:
 8011968:	4801      	ldr	r0, [pc, #4]	; (8011970 <__sfp_lock_release+0x8>)
 801196a:	f7ff bc73 	b.w	8011254 <__retarget_lock_release_recursive>
 801196e:	bf00      	nop
 8011970:	2000823c 	.word	0x2000823c

08011974 <__sinit_lock_acquire>:
 8011974:	4801      	ldr	r0, [pc, #4]	; (801197c <__sinit_lock_acquire+0x8>)
 8011976:	f7ff bc6c 	b.w	8011252 <__retarget_lock_acquire_recursive>
 801197a:	bf00      	nop
 801197c:	20008237 	.word	0x20008237

08011980 <__sinit_lock_release>:
 8011980:	4801      	ldr	r0, [pc, #4]	; (8011988 <__sinit_lock_release+0x8>)
 8011982:	f7ff bc67 	b.w	8011254 <__retarget_lock_release_recursive>
 8011986:	bf00      	nop
 8011988:	20008237 	.word	0x20008237

0801198c <__sinit>:
 801198c:	b510      	push	{r4, lr}
 801198e:	4604      	mov	r4, r0
 8011990:	f7ff fff0 	bl	8011974 <__sinit_lock_acquire>
 8011994:	69a3      	ldr	r3, [r4, #24]
 8011996:	b11b      	cbz	r3, 80119a0 <__sinit+0x14>
 8011998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801199c:	f7ff bff0 	b.w	8011980 <__sinit_lock_release>
 80119a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80119a4:	6523      	str	r3, [r4, #80]	; 0x50
 80119a6:	4b13      	ldr	r3, [pc, #76]	; (80119f4 <__sinit+0x68>)
 80119a8:	4a13      	ldr	r2, [pc, #76]	; (80119f8 <__sinit+0x6c>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80119ae:	42a3      	cmp	r3, r4
 80119b0:	bf04      	itt	eq
 80119b2:	2301      	moveq	r3, #1
 80119b4:	61a3      	streq	r3, [r4, #24]
 80119b6:	4620      	mov	r0, r4
 80119b8:	f000 f820 	bl	80119fc <__sfp>
 80119bc:	6060      	str	r0, [r4, #4]
 80119be:	4620      	mov	r0, r4
 80119c0:	f000 f81c 	bl	80119fc <__sfp>
 80119c4:	60a0      	str	r0, [r4, #8]
 80119c6:	4620      	mov	r0, r4
 80119c8:	f000 f818 	bl	80119fc <__sfp>
 80119cc:	2200      	movs	r2, #0
 80119ce:	60e0      	str	r0, [r4, #12]
 80119d0:	2104      	movs	r1, #4
 80119d2:	6860      	ldr	r0, [r4, #4]
 80119d4:	f7ff ff82 	bl	80118dc <std>
 80119d8:	68a0      	ldr	r0, [r4, #8]
 80119da:	2201      	movs	r2, #1
 80119dc:	2109      	movs	r1, #9
 80119de:	f7ff ff7d 	bl	80118dc <std>
 80119e2:	68e0      	ldr	r0, [r4, #12]
 80119e4:	2202      	movs	r2, #2
 80119e6:	2112      	movs	r1, #18
 80119e8:	f7ff ff78 	bl	80118dc <std>
 80119ec:	2301      	movs	r3, #1
 80119ee:	61a3      	str	r3, [r4, #24]
 80119f0:	e7d2      	b.n	8011998 <__sinit+0xc>
 80119f2:	bf00      	nop
 80119f4:	08012f58 	.word	0x08012f58
 80119f8:	08011925 	.word	0x08011925

080119fc <__sfp>:
 80119fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119fe:	4607      	mov	r7, r0
 8011a00:	f7ff ffac 	bl	801195c <__sfp_lock_acquire>
 8011a04:	4b1e      	ldr	r3, [pc, #120]	; (8011a80 <__sfp+0x84>)
 8011a06:	681e      	ldr	r6, [r3, #0]
 8011a08:	69b3      	ldr	r3, [r6, #24]
 8011a0a:	b913      	cbnz	r3, 8011a12 <__sfp+0x16>
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	f7ff ffbd 	bl	801198c <__sinit>
 8011a12:	3648      	adds	r6, #72	; 0x48
 8011a14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a18:	3b01      	subs	r3, #1
 8011a1a:	d503      	bpl.n	8011a24 <__sfp+0x28>
 8011a1c:	6833      	ldr	r3, [r6, #0]
 8011a1e:	b30b      	cbz	r3, 8011a64 <__sfp+0x68>
 8011a20:	6836      	ldr	r6, [r6, #0]
 8011a22:	e7f7      	b.n	8011a14 <__sfp+0x18>
 8011a24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a28:	b9d5      	cbnz	r5, 8011a60 <__sfp+0x64>
 8011a2a:	4b16      	ldr	r3, [pc, #88]	; (8011a84 <__sfp+0x88>)
 8011a2c:	60e3      	str	r3, [r4, #12]
 8011a2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a32:	6665      	str	r5, [r4, #100]	; 0x64
 8011a34:	f7ff fc0c 	bl	8011250 <__retarget_lock_init_recursive>
 8011a38:	f7ff ff96 	bl	8011968 <__sfp_lock_release>
 8011a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a44:	6025      	str	r5, [r4, #0]
 8011a46:	61a5      	str	r5, [r4, #24]
 8011a48:	2208      	movs	r2, #8
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a50:	f7fd faf6 	bl	800f040 <memset>
 8011a54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a60:	3468      	adds	r4, #104	; 0x68
 8011a62:	e7d9      	b.n	8011a18 <__sfp+0x1c>
 8011a64:	2104      	movs	r1, #4
 8011a66:	4638      	mov	r0, r7
 8011a68:	f7ff ff62 	bl	8011930 <__sfmoreglue>
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	6030      	str	r0, [r6, #0]
 8011a70:	2800      	cmp	r0, #0
 8011a72:	d1d5      	bne.n	8011a20 <__sfp+0x24>
 8011a74:	f7ff ff78 	bl	8011968 <__sfp_lock_release>
 8011a78:	230c      	movs	r3, #12
 8011a7a:	603b      	str	r3, [r7, #0]
 8011a7c:	e7ee      	b.n	8011a5c <__sfp+0x60>
 8011a7e:	bf00      	nop
 8011a80:	08012f58 	.word	0x08012f58
 8011a84:	ffff0001 	.word	0xffff0001

08011a88 <_fwalk_reent>:
 8011a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a8c:	4606      	mov	r6, r0
 8011a8e:	4688      	mov	r8, r1
 8011a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a94:	2700      	movs	r7, #0
 8011a96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a9a:	f1b9 0901 	subs.w	r9, r9, #1
 8011a9e:	d505      	bpl.n	8011aac <_fwalk_reent+0x24>
 8011aa0:	6824      	ldr	r4, [r4, #0]
 8011aa2:	2c00      	cmp	r4, #0
 8011aa4:	d1f7      	bne.n	8011a96 <_fwalk_reent+0xe>
 8011aa6:	4638      	mov	r0, r7
 8011aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aac:	89ab      	ldrh	r3, [r5, #12]
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	d907      	bls.n	8011ac2 <_fwalk_reent+0x3a>
 8011ab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	d003      	beq.n	8011ac2 <_fwalk_reent+0x3a>
 8011aba:	4629      	mov	r1, r5
 8011abc:	4630      	mov	r0, r6
 8011abe:	47c0      	blx	r8
 8011ac0:	4307      	orrs	r7, r0
 8011ac2:	3568      	adds	r5, #104	; 0x68
 8011ac4:	e7e9      	b.n	8011a9a <_fwalk_reent+0x12>

08011ac6 <__swhatbuf_r>:
 8011ac6:	b570      	push	{r4, r5, r6, lr}
 8011ac8:	460e      	mov	r6, r1
 8011aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ace:	2900      	cmp	r1, #0
 8011ad0:	b096      	sub	sp, #88	; 0x58
 8011ad2:	4614      	mov	r4, r2
 8011ad4:	461d      	mov	r5, r3
 8011ad6:	da07      	bge.n	8011ae8 <__swhatbuf_r+0x22>
 8011ad8:	2300      	movs	r3, #0
 8011ada:	602b      	str	r3, [r5, #0]
 8011adc:	89b3      	ldrh	r3, [r6, #12]
 8011ade:	061a      	lsls	r2, r3, #24
 8011ae0:	d410      	bmi.n	8011b04 <__swhatbuf_r+0x3e>
 8011ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ae6:	e00e      	b.n	8011b06 <__swhatbuf_r+0x40>
 8011ae8:	466a      	mov	r2, sp
 8011aea:	f000 f903 	bl	8011cf4 <_fstat_r>
 8011aee:	2800      	cmp	r0, #0
 8011af0:	dbf2      	blt.n	8011ad8 <__swhatbuf_r+0x12>
 8011af2:	9a01      	ldr	r2, [sp, #4]
 8011af4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011af8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011afc:	425a      	negs	r2, r3
 8011afe:	415a      	adcs	r2, r3
 8011b00:	602a      	str	r2, [r5, #0]
 8011b02:	e7ee      	b.n	8011ae2 <__swhatbuf_r+0x1c>
 8011b04:	2340      	movs	r3, #64	; 0x40
 8011b06:	2000      	movs	r0, #0
 8011b08:	6023      	str	r3, [r4, #0]
 8011b0a:	b016      	add	sp, #88	; 0x58
 8011b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011b10 <__smakebuf_r>:
 8011b10:	898b      	ldrh	r3, [r1, #12]
 8011b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b14:	079d      	lsls	r5, r3, #30
 8011b16:	4606      	mov	r6, r0
 8011b18:	460c      	mov	r4, r1
 8011b1a:	d507      	bpl.n	8011b2c <__smakebuf_r+0x1c>
 8011b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b20:	6023      	str	r3, [r4, #0]
 8011b22:	6123      	str	r3, [r4, #16]
 8011b24:	2301      	movs	r3, #1
 8011b26:	6163      	str	r3, [r4, #20]
 8011b28:	b002      	add	sp, #8
 8011b2a:	bd70      	pop	{r4, r5, r6, pc}
 8011b2c:	ab01      	add	r3, sp, #4
 8011b2e:	466a      	mov	r2, sp
 8011b30:	f7ff ffc9 	bl	8011ac6 <__swhatbuf_r>
 8011b34:	9900      	ldr	r1, [sp, #0]
 8011b36:	4605      	mov	r5, r0
 8011b38:	4630      	mov	r0, r6
 8011b3a:	f7fd fad9 	bl	800f0f0 <_malloc_r>
 8011b3e:	b948      	cbnz	r0, 8011b54 <__smakebuf_r+0x44>
 8011b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b44:	059a      	lsls	r2, r3, #22
 8011b46:	d4ef      	bmi.n	8011b28 <__smakebuf_r+0x18>
 8011b48:	f023 0303 	bic.w	r3, r3, #3
 8011b4c:	f043 0302 	orr.w	r3, r3, #2
 8011b50:	81a3      	strh	r3, [r4, #12]
 8011b52:	e7e3      	b.n	8011b1c <__smakebuf_r+0xc>
 8011b54:	4b0d      	ldr	r3, [pc, #52]	; (8011b8c <__smakebuf_r+0x7c>)
 8011b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b58:	89a3      	ldrh	r3, [r4, #12]
 8011b5a:	6020      	str	r0, [r4, #0]
 8011b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b60:	81a3      	strh	r3, [r4, #12]
 8011b62:	9b00      	ldr	r3, [sp, #0]
 8011b64:	6163      	str	r3, [r4, #20]
 8011b66:	9b01      	ldr	r3, [sp, #4]
 8011b68:	6120      	str	r0, [r4, #16]
 8011b6a:	b15b      	cbz	r3, 8011b84 <__smakebuf_r+0x74>
 8011b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b70:	4630      	mov	r0, r6
 8011b72:	f000 f8d1 	bl	8011d18 <_isatty_r>
 8011b76:	b128      	cbz	r0, 8011b84 <__smakebuf_r+0x74>
 8011b78:	89a3      	ldrh	r3, [r4, #12]
 8011b7a:	f023 0303 	bic.w	r3, r3, #3
 8011b7e:	f043 0301 	orr.w	r3, r3, #1
 8011b82:	81a3      	strh	r3, [r4, #12]
 8011b84:	89a0      	ldrh	r0, [r4, #12]
 8011b86:	4305      	orrs	r5, r0
 8011b88:	81a5      	strh	r5, [r4, #12]
 8011b8a:	e7cd      	b.n	8011b28 <__smakebuf_r+0x18>
 8011b8c:	08011925 	.word	0x08011925

08011b90 <_malloc_usable_size_r>:
 8011b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b94:	1f18      	subs	r0, r3, #4
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	bfbc      	itt	lt
 8011b9a:	580b      	ldrlt	r3, [r1, r0]
 8011b9c:	18c0      	addlt	r0, r0, r3
 8011b9e:	4770      	bx	lr

08011ba0 <_raise_r>:
 8011ba0:	291f      	cmp	r1, #31
 8011ba2:	b538      	push	{r3, r4, r5, lr}
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	460d      	mov	r5, r1
 8011ba8:	d904      	bls.n	8011bb4 <_raise_r+0x14>
 8011baa:	2316      	movs	r3, #22
 8011bac:	6003      	str	r3, [r0, #0]
 8011bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bb2:	bd38      	pop	{r3, r4, r5, pc}
 8011bb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011bb6:	b112      	cbz	r2, 8011bbe <_raise_r+0x1e>
 8011bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bbc:	b94b      	cbnz	r3, 8011bd2 <_raise_r+0x32>
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f000 f830 	bl	8011c24 <_getpid_r>
 8011bc4:	462a      	mov	r2, r5
 8011bc6:	4601      	mov	r1, r0
 8011bc8:	4620      	mov	r0, r4
 8011bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bce:	f000 b817 	b.w	8011c00 <_kill_r>
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d00a      	beq.n	8011bec <_raise_r+0x4c>
 8011bd6:	1c59      	adds	r1, r3, #1
 8011bd8:	d103      	bne.n	8011be2 <_raise_r+0x42>
 8011bda:	2316      	movs	r3, #22
 8011bdc:	6003      	str	r3, [r0, #0]
 8011bde:	2001      	movs	r0, #1
 8011be0:	e7e7      	b.n	8011bb2 <_raise_r+0x12>
 8011be2:	2400      	movs	r4, #0
 8011be4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011be8:	4628      	mov	r0, r5
 8011bea:	4798      	blx	r3
 8011bec:	2000      	movs	r0, #0
 8011bee:	e7e0      	b.n	8011bb2 <_raise_r+0x12>

08011bf0 <raise>:
 8011bf0:	4b02      	ldr	r3, [pc, #8]	; (8011bfc <raise+0xc>)
 8011bf2:	4601      	mov	r1, r0
 8011bf4:	6818      	ldr	r0, [r3, #0]
 8011bf6:	f7ff bfd3 	b.w	8011ba0 <_raise_r>
 8011bfa:	bf00      	nop
 8011bfc:	20000018 	.word	0x20000018

08011c00 <_kill_r>:
 8011c00:	b538      	push	{r3, r4, r5, lr}
 8011c02:	4d07      	ldr	r5, [pc, #28]	; (8011c20 <_kill_r+0x20>)
 8011c04:	2300      	movs	r3, #0
 8011c06:	4604      	mov	r4, r0
 8011c08:	4608      	mov	r0, r1
 8011c0a:	4611      	mov	r1, r2
 8011c0c:	602b      	str	r3, [r5, #0]
 8011c0e:	f001 f88d 	bl	8012d2c <_kill>
 8011c12:	1c43      	adds	r3, r0, #1
 8011c14:	d102      	bne.n	8011c1c <_kill_r+0x1c>
 8011c16:	682b      	ldr	r3, [r5, #0]
 8011c18:	b103      	cbz	r3, 8011c1c <_kill_r+0x1c>
 8011c1a:	6023      	str	r3, [r4, #0]
 8011c1c:	bd38      	pop	{r3, r4, r5, pc}
 8011c1e:	bf00      	nop
 8011c20:	20008230 	.word	0x20008230

08011c24 <_getpid_r>:
 8011c24:	f001 b872 	b.w	8012d0c <_getpid>

08011c28 <__sread>:
 8011c28:	b510      	push	{r4, lr}
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c30:	f000 f894 	bl	8011d5c <_read_r>
 8011c34:	2800      	cmp	r0, #0
 8011c36:	bfab      	itete	ge
 8011c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8011c3c:	181b      	addge	r3, r3, r0
 8011c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c42:	bfac      	ite	ge
 8011c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c46:	81a3      	strhlt	r3, [r4, #12]
 8011c48:	bd10      	pop	{r4, pc}

08011c4a <__swrite>:
 8011c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c4e:	461f      	mov	r7, r3
 8011c50:	898b      	ldrh	r3, [r1, #12]
 8011c52:	05db      	lsls	r3, r3, #23
 8011c54:	4605      	mov	r5, r0
 8011c56:	460c      	mov	r4, r1
 8011c58:	4616      	mov	r6, r2
 8011c5a:	d505      	bpl.n	8011c68 <__swrite+0x1e>
 8011c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c60:	2302      	movs	r3, #2
 8011c62:	2200      	movs	r2, #0
 8011c64:	f000 f868 	bl	8011d38 <_lseek_r>
 8011c68:	89a3      	ldrh	r3, [r4, #12]
 8011c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c72:	81a3      	strh	r3, [r4, #12]
 8011c74:	4632      	mov	r2, r6
 8011c76:	463b      	mov	r3, r7
 8011c78:	4628      	mov	r0, r5
 8011c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c7e:	f000 b817 	b.w	8011cb0 <_write_r>

08011c82 <__sseek>:
 8011c82:	b510      	push	{r4, lr}
 8011c84:	460c      	mov	r4, r1
 8011c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c8a:	f000 f855 	bl	8011d38 <_lseek_r>
 8011c8e:	1c43      	adds	r3, r0, #1
 8011c90:	89a3      	ldrh	r3, [r4, #12]
 8011c92:	bf15      	itete	ne
 8011c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c9e:	81a3      	strheq	r3, [r4, #12]
 8011ca0:	bf18      	it	ne
 8011ca2:	81a3      	strhne	r3, [r4, #12]
 8011ca4:	bd10      	pop	{r4, pc}

08011ca6 <__sclose>:
 8011ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011caa:	f000 b813 	b.w	8011cd4 <_close_r>
	...

08011cb0 <_write_r>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	4d07      	ldr	r5, [pc, #28]	; (8011cd0 <_write_r+0x20>)
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	4608      	mov	r0, r1
 8011cb8:	4611      	mov	r1, r2
 8011cba:	2200      	movs	r2, #0
 8011cbc:	602a      	str	r2, [r5, #0]
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	f7f6 fea0 	bl	8008a04 <_write>
 8011cc4:	1c43      	adds	r3, r0, #1
 8011cc6:	d102      	bne.n	8011cce <_write_r+0x1e>
 8011cc8:	682b      	ldr	r3, [r5, #0]
 8011cca:	b103      	cbz	r3, 8011cce <_write_r+0x1e>
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	bd38      	pop	{r3, r4, r5, pc}
 8011cd0:	20008230 	.word	0x20008230

08011cd4 <_close_r>:
 8011cd4:	b538      	push	{r3, r4, r5, lr}
 8011cd6:	4d06      	ldr	r5, [pc, #24]	; (8011cf0 <_close_r+0x1c>)
 8011cd8:	2300      	movs	r3, #0
 8011cda:	4604      	mov	r4, r0
 8011cdc:	4608      	mov	r0, r1
 8011cde:	602b      	str	r3, [r5, #0]
 8011ce0:	f001 f804 	bl	8012cec <_close>
 8011ce4:	1c43      	adds	r3, r0, #1
 8011ce6:	d102      	bne.n	8011cee <_close_r+0x1a>
 8011ce8:	682b      	ldr	r3, [r5, #0]
 8011cea:	b103      	cbz	r3, 8011cee <_close_r+0x1a>
 8011cec:	6023      	str	r3, [r4, #0]
 8011cee:	bd38      	pop	{r3, r4, r5, pc}
 8011cf0:	20008230 	.word	0x20008230

08011cf4 <_fstat_r>:
 8011cf4:	b538      	push	{r3, r4, r5, lr}
 8011cf6:	4d07      	ldr	r5, [pc, #28]	; (8011d14 <_fstat_r+0x20>)
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	4608      	mov	r0, r1
 8011cfe:	4611      	mov	r1, r2
 8011d00:	602b      	str	r3, [r5, #0]
 8011d02:	f000 fffb 	bl	8012cfc <_fstat>
 8011d06:	1c43      	adds	r3, r0, #1
 8011d08:	d102      	bne.n	8011d10 <_fstat_r+0x1c>
 8011d0a:	682b      	ldr	r3, [r5, #0]
 8011d0c:	b103      	cbz	r3, 8011d10 <_fstat_r+0x1c>
 8011d0e:	6023      	str	r3, [r4, #0]
 8011d10:	bd38      	pop	{r3, r4, r5, pc}
 8011d12:	bf00      	nop
 8011d14:	20008230 	.word	0x20008230

08011d18 <_isatty_r>:
 8011d18:	b538      	push	{r3, r4, r5, lr}
 8011d1a:	4d06      	ldr	r5, [pc, #24]	; (8011d34 <_isatty_r+0x1c>)
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	4604      	mov	r4, r0
 8011d20:	4608      	mov	r0, r1
 8011d22:	602b      	str	r3, [r5, #0]
 8011d24:	f000 fffa 	bl	8012d1c <_isatty>
 8011d28:	1c43      	adds	r3, r0, #1
 8011d2a:	d102      	bne.n	8011d32 <_isatty_r+0x1a>
 8011d2c:	682b      	ldr	r3, [r5, #0]
 8011d2e:	b103      	cbz	r3, 8011d32 <_isatty_r+0x1a>
 8011d30:	6023      	str	r3, [r4, #0]
 8011d32:	bd38      	pop	{r3, r4, r5, pc}
 8011d34:	20008230 	.word	0x20008230

08011d38 <_lseek_r>:
 8011d38:	b538      	push	{r3, r4, r5, lr}
 8011d3a:	4d07      	ldr	r5, [pc, #28]	; (8011d58 <_lseek_r+0x20>)
 8011d3c:	4604      	mov	r4, r0
 8011d3e:	4608      	mov	r0, r1
 8011d40:	4611      	mov	r1, r2
 8011d42:	2200      	movs	r2, #0
 8011d44:	602a      	str	r2, [r5, #0]
 8011d46:	461a      	mov	r2, r3
 8011d48:	f000 fff8 	bl	8012d3c <_lseek>
 8011d4c:	1c43      	adds	r3, r0, #1
 8011d4e:	d102      	bne.n	8011d56 <_lseek_r+0x1e>
 8011d50:	682b      	ldr	r3, [r5, #0]
 8011d52:	b103      	cbz	r3, 8011d56 <_lseek_r+0x1e>
 8011d54:	6023      	str	r3, [r4, #0]
 8011d56:	bd38      	pop	{r3, r4, r5, pc}
 8011d58:	20008230 	.word	0x20008230

08011d5c <_read_r>:
 8011d5c:	b538      	push	{r3, r4, r5, lr}
 8011d5e:	4d07      	ldr	r5, [pc, #28]	; (8011d7c <_read_r+0x20>)
 8011d60:	4604      	mov	r4, r0
 8011d62:	4608      	mov	r0, r1
 8011d64:	4611      	mov	r1, r2
 8011d66:	2200      	movs	r2, #0
 8011d68:	602a      	str	r2, [r5, #0]
 8011d6a:	461a      	mov	r2, r3
 8011d6c:	f000 ffee 	bl	8012d4c <_read>
 8011d70:	1c43      	adds	r3, r0, #1
 8011d72:	d102      	bne.n	8011d7a <_read_r+0x1e>
 8011d74:	682b      	ldr	r3, [r5, #0]
 8011d76:	b103      	cbz	r3, 8011d7a <_read_r+0x1e>
 8011d78:	6023      	str	r3, [r4, #0]
 8011d7a:	bd38      	pop	{r3, r4, r5, pc}
 8011d7c:	20008230 	.word	0x20008230

08011d80 <pow>:
 8011d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d84:	ec59 8b10 	vmov	r8, r9, d0
 8011d88:	ec57 6b11 	vmov	r6, r7, d1
 8011d8c:	f000 f8a8 	bl	8011ee0 <__ieee754_pow>
 8011d90:	4b4e      	ldr	r3, [pc, #312]	; (8011ecc <pow+0x14c>)
 8011d92:	f993 3000 	ldrsb.w	r3, [r3]
 8011d96:	3301      	adds	r3, #1
 8011d98:	ec55 4b10 	vmov	r4, r5, d0
 8011d9c:	d015      	beq.n	8011dca <pow+0x4a>
 8011d9e:	4632      	mov	r2, r6
 8011da0:	463b      	mov	r3, r7
 8011da2:	4630      	mov	r0, r6
 8011da4:	4639      	mov	r1, r7
 8011da6:	f7ee fed1 	bl	8000b4c <__aeabi_dcmpun>
 8011daa:	b970      	cbnz	r0, 8011dca <pow+0x4a>
 8011dac:	4642      	mov	r2, r8
 8011dae:	464b      	mov	r3, r9
 8011db0:	4640      	mov	r0, r8
 8011db2:	4649      	mov	r1, r9
 8011db4:	f7ee feca 	bl	8000b4c <__aeabi_dcmpun>
 8011db8:	2200      	movs	r2, #0
 8011dba:	2300      	movs	r3, #0
 8011dbc:	b148      	cbz	r0, 8011dd2 <pow+0x52>
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	4639      	mov	r1, r7
 8011dc2:	f7ee fe91 	bl	8000ae8 <__aeabi_dcmpeq>
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d17d      	bne.n	8011ec6 <pow+0x146>
 8011dca:	ec45 4b10 	vmov	d0, r4, r5
 8011dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dd2:	4640      	mov	r0, r8
 8011dd4:	4649      	mov	r1, r9
 8011dd6:	f7ee fe87 	bl	8000ae8 <__aeabi_dcmpeq>
 8011dda:	b1e0      	cbz	r0, 8011e16 <pow+0x96>
 8011ddc:	2200      	movs	r2, #0
 8011dde:	2300      	movs	r3, #0
 8011de0:	4630      	mov	r0, r6
 8011de2:	4639      	mov	r1, r7
 8011de4:	f7ee fe80 	bl	8000ae8 <__aeabi_dcmpeq>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d16c      	bne.n	8011ec6 <pow+0x146>
 8011dec:	ec47 6b10 	vmov	d0, r6, r7
 8011df0:	f000 fe55 	bl	8012a9e <finite>
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d0e8      	beq.n	8011dca <pow+0x4a>
 8011df8:	2200      	movs	r2, #0
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	4639      	mov	r1, r7
 8011e00:	f7ee fe7c 	bl	8000afc <__aeabi_dcmplt>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d0e0      	beq.n	8011dca <pow+0x4a>
 8011e08:	f7fd f8d2 	bl	800efb0 <__errno>
 8011e0c:	2321      	movs	r3, #33	; 0x21
 8011e0e:	6003      	str	r3, [r0, #0]
 8011e10:	2400      	movs	r4, #0
 8011e12:	4d2f      	ldr	r5, [pc, #188]	; (8011ed0 <pow+0x150>)
 8011e14:	e7d9      	b.n	8011dca <pow+0x4a>
 8011e16:	ec45 4b10 	vmov	d0, r4, r5
 8011e1a:	f000 fe40 	bl	8012a9e <finite>
 8011e1e:	bbb8      	cbnz	r0, 8011e90 <pow+0x110>
 8011e20:	ec49 8b10 	vmov	d0, r8, r9
 8011e24:	f000 fe3b 	bl	8012a9e <finite>
 8011e28:	b390      	cbz	r0, 8011e90 <pow+0x110>
 8011e2a:	ec47 6b10 	vmov	d0, r6, r7
 8011e2e:	f000 fe36 	bl	8012a9e <finite>
 8011e32:	b368      	cbz	r0, 8011e90 <pow+0x110>
 8011e34:	4622      	mov	r2, r4
 8011e36:	462b      	mov	r3, r5
 8011e38:	4620      	mov	r0, r4
 8011e3a:	4629      	mov	r1, r5
 8011e3c:	f7ee fe86 	bl	8000b4c <__aeabi_dcmpun>
 8011e40:	b160      	cbz	r0, 8011e5c <pow+0xdc>
 8011e42:	f7fd f8b5 	bl	800efb0 <__errno>
 8011e46:	2321      	movs	r3, #33	; 0x21
 8011e48:	6003      	str	r3, [r0, #0]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	4610      	mov	r0, r2
 8011e50:	4619      	mov	r1, r3
 8011e52:	f7ee fd0b 	bl	800086c <__aeabi_ddiv>
 8011e56:	4604      	mov	r4, r0
 8011e58:	460d      	mov	r5, r1
 8011e5a:	e7b6      	b.n	8011dca <pow+0x4a>
 8011e5c:	f7fd f8a8 	bl	800efb0 <__errno>
 8011e60:	2322      	movs	r3, #34	; 0x22
 8011e62:	6003      	str	r3, [r0, #0]
 8011e64:	2200      	movs	r2, #0
 8011e66:	2300      	movs	r3, #0
 8011e68:	4640      	mov	r0, r8
 8011e6a:	4649      	mov	r1, r9
 8011e6c:	f7ee fe46 	bl	8000afc <__aeabi_dcmplt>
 8011e70:	2400      	movs	r4, #0
 8011e72:	b158      	cbz	r0, 8011e8c <pow+0x10c>
 8011e74:	ec47 6b10 	vmov	d0, r6, r7
 8011e78:	f000 fe26 	bl	8012ac8 <rint>
 8011e7c:	4632      	mov	r2, r6
 8011e7e:	ec51 0b10 	vmov	r0, r1, d0
 8011e82:	463b      	mov	r3, r7
 8011e84:	f7ee fe30 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	d0c2      	beq.n	8011e12 <pow+0x92>
 8011e8c:	4d11      	ldr	r5, [pc, #68]	; (8011ed4 <pow+0x154>)
 8011e8e:	e79c      	b.n	8011dca <pow+0x4a>
 8011e90:	2200      	movs	r2, #0
 8011e92:	2300      	movs	r3, #0
 8011e94:	4620      	mov	r0, r4
 8011e96:	4629      	mov	r1, r5
 8011e98:	f7ee fe26 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d094      	beq.n	8011dca <pow+0x4a>
 8011ea0:	ec49 8b10 	vmov	d0, r8, r9
 8011ea4:	f000 fdfb 	bl	8012a9e <finite>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d08e      	beq.n	8011dca <pow+0x4a>
 8011eac:	ec47 6b10 	vmov	d0, r6, r7
 8011eb0:	f000 fdf5 	bl	8012a9e <finite>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	d088      	beq.n	8011dca <pow+0x4a>
 8011eb8:	f7fd f87a 	bl	800efb0 <__errno>
 8011ebc:	2322      	movs	r3, #34	; 0x22
 8011ebe:	6003      	str	r3, [r0, #0]
 8011ec0:	2400      	movs	r4, #0
 8011ec2:	2500      	movs	r5, #0
 8011ec4:	e781      	b.n	8011dca <pow+0x4a>
 8011ec6:	4d04      	ldr	r5, [pc, #16]	; (8011ed8 <pow+0x158>)
 8011ec8:	2400      	movs	r4, #0
 8011eca:	e77e      	b.n	8011dca <pow+0x4a>
 8011ecc:	200001e8 	.word	0x200001e8
 8011ed0:	fff00000 	.word	0xfff00000
 8011ed4:	7ff00000 	.word	0x7ff00000
 8011ed8:	3ff00000 	.word	0x3ff00000
 8011edc:	00000000 	.word	0x00000000

08011ee0 <__ieee754_pow>:
 8011ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee4:	ed2d 8b06 	vpush	{d8-d10}
 8011ee8:	b08d      	sub	sp, #52	; 0x34
 8011eea:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011eee:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8011ef2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011ef6:	ea56 0100 	orrs.w	r1, r6, r0
 8011efa:	ec53 2b10 	vmov	r2, r3, d0
 8011efe:	f000 84d1 	beq.w	80128a4 <__ieee754_pow+0x9c4>
 8011f02:	497f      	ldr	r1, [pc, #508]	; (8012100 <__ieee754_pow+0x220>)
 8011f04:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011f08:	428c      	cmp	r4, r1
 8011f0a:	ee10 8a10 	vmov	r8, s0
 8011f0e:	4699      	mov	r9, r3
 8011f10:	dc09      	bgt.n	8011f26 <__ieee754_pow+0x46>
 8011f12:	d103      	bne.n	8011f1c <__ieee754_pow+0x3c>
 8011f14:	b97a      	cbnz	r2, 8011f36 <__ieee754_pow+0x56>
 8011f16:	42a6      	cmp	r6, r4
 8011f18:	dd02      	ble.n	8011f20 <__ieee754_pow+0x40>
 8011f1a:	e00c      	b.n	8011f36 <__ieee754_pow+0x56>
 8011f1c:	428e      	cmp	r6, r1
 8011f1e:	dc02      	bgt.n	8011f26 <__ieee754_pow+0x46>
 8011f20:	428e      	cmp	r6, r1
 8011f22:	d110      	bne.n	8011f46 <__ieee754_pow+0x66>
 8011f24:	b178      	cbz	r0, 8011f46 <__ieee754_pow+0x66>
 8011f26:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011f2a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011f2e:	ea54 0308 	orrs.w	r3, r4, r8
 8011f32:	f000 84b7 	beq.w	80128a4 <__ieee754_pow+0x9c4>
 8011f36:	4873      	ldr	r0, [pc, #460]	; (8012104 <__ieee754_pow+0x224>)
 8011f38:	b00d      	add	sp, #52	; 0x34
 8011f3a:	ecbd 8b06 	vpop	{d8-d10}
 8011f3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f42:	f000 bdb9 	b.w	8012ab8 <nan>
 8011f46:	f1b9 0f00 	cmp.w	r9, #0
 8011f4a:	da36      	bge.n	8011fba <__ieee754_pow+0xda>
 8011f4c:	496e      	ldr	r1, [pc, #440]	; (8012108 <__ieee754_pow+0x228>)
 8011f4e:	428e      	cmp	r6, r1
 8011f50:	dc51      	bgt.n	8011ff6 <__ieee754_pow+0x116>
 8011f52:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011f56:	428e      	cmp	r6, r1
 8011f58:	f340 84af 	ble.w	80128ba <__ieee754_pow+0x9da>
 8011f5c:	1531      	asrs	r1, r6, #20
 8011f5e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011f62:	2914      	cmp	r1, #20
 8011f64:	dd0f      	ble.n	8011f86 <__ieee754_pow+0xa6>
 8011f66:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011f6a:	fa20 fc01 	lsr.w	ip, r0, r1
 8011f6e:	fa0c f101 	lsl.w	r1, ip, r1
 8011f72:	4281      	cmp	r1, r0
 8011f74:	f040 84a1 	bne.w	80128ba <__ieee754_pow+0x9da>
 8011f78:	f00c 0c01 	and.w	ip, ip, #1
 8011f7c:	f1cc 0102 	rsb	r1, ip, #2
 8011f80:	9100      	str	r1, [sp, #0]
 8011f82:	b180      	cbz	r0, 8011fa6 <__ieee754_pow+0xc6>
 8011f84:	e059      	b.n	801203a <__ieee754_pow+0x15a>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d155      	bne.n	8012036 <__ieee754_pow+0x156>
 8011f8a:	f1c1 0114 	rsb	r1, r1, #20
 8011f8e:	fa46 fc01 	asr.w	ip, r6, r1
 8011f92:	fa0c f101 	lsl.w	r1, ip, r1
 8011f96:	42b1      	cmp	r1, r6
 8011f98:	f040 848c 	bne.w	80128b4 <__ieee754_pow+0x9d4>
 8011f9c:	f00c 0c01 	and.w	ip, ip, #1
 8011fa0:	f1cc 0102 	rsb	r1, ip, #2
 8011fa4:	9100      	str	r1, [sp, #0]
 8011fa6:	4959      	ldr	r1, [pc, #356]	; (801210c <__ieee754_pow+0x22c>)
 8011fa8:	428e      	cmp	r6, r1
 8011faa:	d12d      	bne.n	8012008 <__ieee754_pow+0x128>
 8011fac:	2f00      	cmp	r7, #0
 8011fae:	da79      	bge.n	80120a4 <__ieee754_pow+0x1c4>
 8011fb0:	4956      	ldr	r1, [pc, #344]	; (801210c <__ieee754_pow+0x22c>)
 8011fb2:	2000      	movs	r0, #0
 8011fb4:	f7ee fc5a 	bl	800086c <__aeabi_ddiv>
 8011fb8:	e016      	b.n	8011fe8 <__ieee754_pow+0x108>
 8011fba:	2100      	movs	r1, #0
 8011fbc:	9100      	str	r1, [sp, #0]
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d13b      	bne.n	801203a <__ieee754_pow+0x15a>
 8011fc2:	494f      	ldr	r1, [pc, #316]	; (8012100 <__ieee754_pow+0x220>)
 8011fc4:	428e      	cmp	r6, r1
 8011fc6:	d1ee      	bne.n	8011fa6 <__ieee754_pow+0xc6>
 8011fc8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011fcc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011fd0:	ea53 0308 	orrs.w	r3, r3, r8
 8011fd4:	f000 8466 	beq.w	80128a4 <__ieee754_pow+0x9c4>
 8011fd8:	4b4d      	ldr	r3, [pc, #308]	; (8012110 <__ieee754_pow+0x230>)
 8011fda:	429c      	cmp	r4, r3
 8011fdc:	dd0d      	ble.n	8011ffa <__ieee754_pow+0x11a>
 8011fde:	2f00      	cmp	r7, #0
 8011fe0:	f280 8464 	bge.w	80128ac <__ieee754_pow+0x9cc>
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	2100      	movs	r1, #0
 8011fe8:	ec41 0b10 	vmov	d0, r0, r1
 8011fec:	b00d      	add	sp, #52	; 0x34
 8011fee:	ecbd 8b06 	vpop	{d8-d10}
 8011ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff6:	2102      	movs	r1, #2
 8011ff8:	e7e0      	b.n	8011fbc <__ieee754_pow+0xdc>
 8011ffa:	2f00      	cmp	r7, #0
 8011ffc:	daf2      	bge.n	8011fe4 <__ieee754_pow+0x104>
 8011ffe:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8012002:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012006:	e7ef      	b.n	8011fe8 <__ieee754_pow+0x108>
 8012008:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801200c:	d104      	bne.n	8012018 <__ieee754_pow+0x138>
 801200e:	4610      	mov	r0, r2
 8012010:	4619      	mov	r1, r3
 8012012:	f7ee fb01 	bl	8000618 <__aeabi_dmul>
 8012016:	e7e7      	b.n	8011fe8 <__ieee754_pow+0x108>
 8012018:	493e      	ldr	r1, [pc, #248]	; (8012114 <__ieee754_pow+0x234>)
 801201a:	428f      	cmp	r7, r1
 801201c:	d10d      	bne.n	801203a <__ieee754_pow+0x15a>
 801201e:	f1b9 0f00 	cmp.w	r9, #0
 8012022:	db0a      	blt.n	801203a <__ieee754_pow+0x15a>
 8012024:	ec43 2b10 	vmov	d0, r2, r3
 8012028:	b00d      	add	sp, #52	; 0x34
 801202a:	ecbd 8b06 	vpop	{d8-d10}
 801202e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012032:	f000 bc77 	b.w	8012924 <__ieee754_sqrt>
 8012036:	2100      	movs	r1, #0
 8012038:	9100      	str	r1, [sp, #0]
 801203a:	ec43 2b10 	vmov	d0, r2, r3
 801203e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012042:	f000 fd23 	bl	8012a8c <fabs>
 8012046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801204a:	ec51 0b10 	vmov	r0, r1, d0
 801204e:	f1b8 0f00 	cmp.w	r8, #0
 8012052:	d12a      	bne.n	80120aa <__ieee754_pow+0x1ca>
 8012054:	b12c      	cbz	r4, 8012062 <__ieee754_pow+0x182>
 8012056:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801210c <__ieee754_pow+0x22c>
 801205a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801205e:	45e6      	cmp	lr, ip
 8012060:	d123      	bne.n	80120aa <__ieee754_pow+0x1ca>
 8012062:	2f00      	cmp	r7, #0
 8012064:	da05      	bge.n	8012072 <__ieee754_pow+0x192>
 8012066:	4602      	mov	r2, r0
 8012068:	460b      	mov	r3, r1
 801206a:	2000      	movs	r0, #0
 801206c:	4927      	ldr	r1, [pc, #156]	; (801210c <__ieee754_pow+0x22c>)
 801206e:	f7ee fbfd 	bl	800086c <__aeabi_ddiv>
 8012072:	f1b9 0f00 	cmp.w	r9, #0
 8012076:	dab7      	bge.n	8011fe8 <__ieee754_pow+0x108>
 8012078:	9b00      	ldr	r3, [sp, #0]
 801207a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801207e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012082:	4323      	orrs	r3, r4
 8012084:	d108      	bne.n	8012098 <__ieee754_pow+0x1b8>
 8012086:	4602      	mov	r2, r0
 8012088:	460b      	mov	r3, r1
 801208a:	4610      	mov	r0, r2
 801208c:	4619      	mov	r1, r3
 801208e:	f7ee f90b 	bl	80002a8 <__aeabi_dsub>
 8012092:	4602      	mov	r2, r0
 8012094:	460b      	mov	r3, r1
 8012096:	e78d      	b.n	8011fb4 <__ieee754_pow+0xd4>
 8012098:	9b00      	ldr	r3, [sp, #0]
 801209a:	2b01      	cmp	r3, #1
 801209c:	d1a4      	bne.n	8011fe8 <__ieee754_pow+0x108>
 801209e:	4602      	mov	r2, r0
 80120a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120a4:	4610      	mov	r0, r2
 80120a6:	4619      	mov	r1, r3
 80120a8:	e79e      	b.n	8011fe8 <__ieee754_pow+0x108>
 80120aa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80120ae:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80120b2:	950a      	str	r5, [sp, #40]	; 0x28
 80120b4:	9d00      	ldr	r5, [sp, #0]
 80120b6:	46ac      	mov	ip, r5
 80120b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80120ba:	ea5c 0505 	orrs.w	r5, ip, r5
 80120be:	d0e4      	beq.n	801208a <__ieee754_pow+0x1aa>
 80120c0:	4b15      	ldr	r3, [pc, #84]	; (8012118 <__ieee754_pow+0x238>)
 80120c2:	429e      	cmp	r6, r3
 80120c4:	f340 80fc 	ble.w	80122c0 <__ieee754_pow+0x3e0>
 80120c8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80120cc:	429e      	cmp	r6, r3
 80120ce:	4b10      	ldr	r3, [pc, #64]	; (8012110 <__ieee754_pow+0x230>)
 80120d0:	dd07      	ble.n	80120e2 <__ieee754_pow+0x202>
 80120d2:	429c      	cmp	r4, r3
 80120d4:	dc0a      	bgt.n	80120ec <__ieee754_pow+0x20c>
 80120d6:	2f00      	cmp	r7, #0
 80120d8:	da84      	bge.n	8011fe4 <__ieee754_pow+0x104>
 80120da:	a307      	add	r3, pc, #28	; (adr r3, 80120f8 <__ieee754_pow+0x218>)
 80120dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e0:	e795      	b.n	801200e <__ieee754_pow+0x12e>
 80120e2:	429c      	cmp	r4, r3
 80120e4:	dbf7      	blt.n	80120d6 <__ieee754_pow+0x1f6>
 80120e6:	4b09      	ldr	r3, [pc, #36]	; (801210c <__ieee754_pow+0x22c>)
 80120e8:	429c      	cmp	r4, r3
 80120ea:	dd17      	ble.n	801211c <__ieee754_pow+0x23c>
 80120ec:	2f00      	cmp	r7, #0
 80120ee:	dcf4      	bgt.n	80120da <__ieee754_pow+0x1fa>
 80120f0:	e778      	b.n	8011fe4 <__ieee754_pow+0x104>
 80120f2:	bf00      	nop
 80120f4:	f3af 8000 	nop.w
 80120f8:	8800759c 	.word	0x8800759c
 80120fc:	7e37e43c 	.word	0x7e37e43c
 8012100:	7ff00000 	.word	0x7ff00000
 8012104:	080131d0 	.word	0x080131d0
 8012108:	433fffff 	.word	0x433fffff
 801210c:	3ff00000 	.word	0x3ff00000
 8012110:	3fefffff 	.word	0x3fefffff
 8012114:	3fe00000 	.word	0x3fe00000
 8012118:	41e00000 	.word	0x41e00000
 801211c:	4b64      	ldr	r3, [pc, #400]	; (80122b0 <__ieee754_pow+0x3d0>)
 801211e:	2200      	movs	r2, #0
 8012120:	f7ee f8c2 	bl	80002a8 <__aeabi_dsub>
 8012124:	a356      	add	r3, pc, #344	; (adr r3, 8012280 <__ieee754_pow+0x3a0>)
 8012126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212a:	4604      	mov	r4, r0
 801212c:	460d      	mov	r5, r1
 801212e:	f7ee fa73 	bl	8000618 <__aeabi_dmul>
 8012132:	a355      	add	r3, pc, #340	; (adr r3, 8012288 <__ieee754_pow+0x3a8>)
 8012134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012138:	4606      	mov	r6, r0
 801213a:	460f      	mov	r7, r1
 801213c:	4620      	mov	r0, r4
 801213e:	4629      	mov	r1, r5
 8012140:	f7ee fa6a 	bl	8000618 <__aeabi_dmul>
 8012144:	4b5b      	ldr	r3, [pc, #364]	; (80122b4 <__ieee754_pow+0x3d4>)
 8012146:	4682      	mov	sl, r0
 8012148:	468b      	mov	fp, r1
 801214a:	2200      	movs	r2, #0
 801214c:	4620      	mov	r0, r4
 801214e:	4629      	mov	r1, r5
 8012150:	f7ee fa62 	bl	8000618 <__aeabi_dmul>
 8012154:	4602      	mov	r2, r0
 8012156:	460b      	mov	r3, r1
 8012158:	a14d      	add	r1, pc, #308	; (adr r1, 8012290 <__ieee754_pow+0x3b0>)
 801215a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801215e:	f7ee f8a3 	bl	80002a8 <__aeabi_dsub>
 8012162:	4622      	mov	r2, r4
 8012164:	462b      	mov	r3, r5
 8012166:	f7ee fa57 	bl	8000618 <__aeabi_dmul>
 801216a:	4602      	mov	r2, r0
 801216c:	460b      	mov	r3, r1
 801216e:	2000      	movs	r0, #0
 8012170:	4951      	ldr	r1, [pc, #324]	; (80122b8 <__ieee754_pow+0x3d8>)
 8012172:	f7ee f899 	bl	80002a8 <__aeabi_dsub>
 8012176:	4622      	mov	r2, r4
 8012178:	4680      	mov	r8, r0
 801217a:	4689      	mov	r9, r1
 801217c:	462b      	mov	r3, r5
 801217e:	4620      	mov	r0, r4
 8012180:	4629      	mov	r1, r5
 8012182:	f7ee fa49 	bl	8000618 <__aeabi_dmul>
 8012186:	4602      	mov	r2, r0
 8012188:	460b      	mov	r3, r1
 801218a:	4640      	mov	r0, r8
 801218c:	4649      	mov	r1, r9
 801218e:	f7ee fa43 	bl	8000618 <__aeabi_dmul>
 8012192:	a341      	add	r3, pc, #260	; (adr r3, 8012298 <__ieee754_pow+0x3b8>)
 8012194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012198:	f7ee fa3e 	bl	8000618 <__aeabi_dmul>
 801219c:	4602      	mov	r2, r0
 801219e:	460b      	mov	r3, r1
 80121a0:	4650      	mov	r0, sl
 80121a2:	4659      	mov	r1, fp
 80121a4:	f7ee f880 	bl	80002a8 <__aeabi_dsub>
 80121a8:	4602      	mov	r2, r0
 80121aa:	460b      	mov	r3, r1
 80121ac:	4680      	mov	r8, r0
 80121ae:	4689      	mov	r9, r1
 80121b0:	4630      	mov	r0, r6
 80121b2:	4639      	mov	r1, r7
 80121b4:	f7ee f87a 	bl	80002ac <__adddf3>
 80121b8:	2400      	movs	r4, #0
 80121ba:	4632      	mov	r2, r6
 80121bc:	463b      	mov	r3, r7
 80121be:	4620      	mov	r0, r4
 80121c0:	460d      	mov	r5, r1
 80121c2:	f7ee f871 	bl	80002a8 <__aeabi_dsub>
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	4640      	mov	r0, r8
 80121cc:	4649      	mov	r1, r9
 80121ce:	f7ee f86b 	bl	80002a8 <__aeabi_dsub>
 80121d2:	9b00      	ldr	r3, [sp, #0]
 80121d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121d6:	3b01      	subs	r3, #1
 80121d8:	4313      	orrs	r3, r2
 80121da:	4682      	mov	sl, r0
 80121dc:	468b      	mov	fp, r1
 80121de:	f040 81f1 	bne.w	80125c4 <__ieee754_pow+0x6e4>
 80121e2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80122a0 <__ieee754_pow+0x3c0>
 80121e6:	eeb0 8a47 	vmov.f32	s16, s14
 80121ea:	eef0 8a67 	vmov.f32	s17, s15
 80121ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80121f2:	2600      	movs	r6, #0
 80121f4:	4632      	mov	r2, r6
 80121f6:	463b      	mov	r3, r7
 80121f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121fc:	f7ee f854 	bl	80002a8 <__aeabi_dsub>
 8012200:	4622      	mov	r2, r4
 8012202:	462b      	mov	r3, r5
 8012204:	f7ee fa08 	bl	8000618 <__aeabi_dmul>
 8012208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801220c:	4680      	mov	r8, r0
 801220e:	4689      	mov	r9, r1
 8012210:	4650      	mov	r0, sl
 8012212:	4659      	mov	r1, fp
 8012214:	f7ee fa00 	bl	8000618 <__aeabi_dmul>
 8012218:	4602      	mov	r2, r0
 801221a:	460b      	mov	r3, r1
 801221c:	4640      	mov	r0, r8
 801221e:	4649      	mov	r1, r9
 8012220:	f7ee f844 	bl	80002ac <__adddf3>
 8012224:	4632      	mov	r2, r6
 8012226:	463b      	mov	r3, r7
 8012228:	4680      	mov	r8, r0
 801222a:	4689      	mov	r9, r1
 801222c:	4620      	mov	r0, r4
 801222e:	4629      	mov	r1, r5
 8012230:	f7ee f9f2 	bl	8000618 <__aeabi_dmul>
 8012234:	460b      	mov	r3, r1
 8012236:	4604      	mov	r4, r0
 8012238:	460d      	mov	r5, r1
 801223a:	4602      	mov	r2, r0
 801223c:	4649      	mov	r1, r9
 801223e:	4640      	mov	r0, r8
 8012240:	f7ee f834 	bl	80002ac <__adddf3>
 8012244:	4b1d      	ldr	r3, [pc, #116]	; (80122bc <__ieee754_pow+0x3dc>)
 8012246:	4299      	cmp	r1, r3
 8012248:	ec45 4b19 	vmov	d9, r4, r5
 801224c:	4606      	mov	r6, r0
 801224e:	460f      	mov	r7, r1
 8012250:	468b      	mov	fp, r1
 8012252:	f340 82fe 	ble.w	8012852 <__ieee754_pow+0x972>
 8012256:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801225a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801225e:	4303      	orrs	r3, r0
 8012260:	f000 81f0 	beq.w	8012644 <__ieee754_pow+0x764>
 8012264:	a310      	add	r3, pc, #64	; (adr r3, 80122a8 <__ieee754_pow+0x3c8>)
 8012266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226a:	ec51 0b18 	vmov	r0, r1, d8
 801226e:	f7ee f9d3 	bl	8000618 <__aeabi_dmul>
 8012272:	a30d      	add	r3, pc, #52	; (adr r3, 80122a8 <__ieee754_pow+0x3c8>)
 8012274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012278:	e6cb      	b.n	8012012 <__ieee754_pow+0x132>
 801227a:	bf00      	nop
 801227c:	f3af 8000 	nop.w
 8012280:	60000000 	.word	0x60000000
 8012284:	3ff71547 	.word	0x3ff71547
 8012288:	f85ddf44 	.word	0xf85ddf44
 801228c:	3e54ae0b 	.word	0x3e54ae0b
 8012290:	55555555 	.word	0x55555555
 8012294:	3fd55555 	.word	0x3fd55555
 8012298:	652b82fe 	.word	0x652b82fe
 801229c:	3ff71547 	.word	0x3ff71547
 80122a0:	00000000 	.word	0x00000000
 80122a4:	bff00000 	.word	0xbff00000
 80122a8:	8800759c 	.word	0x8800759c
 80122ac:	7e37e43c 	.word	0x7e37e43c
 80122b0:	3ff00000 	.word	0x3ff00000
 80122b4:	3fd00000 	.word	0x3fd00000
 80122b8:	3fe00000 	.word	0x3fe00000
 80122bc:	408fffff 	.word	0x408fffff
 80122c0:	4bd7      	ldr	r3, [pc, #860]	; (8012620 <__ieee754_pow+0x740>)
 80122c2:	ea03 0309 	and.w	r3, r3, r9
 80122c6:	2200      	movs	r2, #0
 80122c8:	b92b      	cbnz	r3, 80122d6 <__ieee754_pow+0x3f6>
 80122ca:	4bd6      	ldr	r3, [pc, #856]	; (8012624 <__ieee754_pow+0x744>)
 80122cc:	f7ee f9a4 	bl	8000618 <__aeabi_dmul>
 80122d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80122d4:	460c      	mov	r4, r1
 80122d6:	1523      	asrs	r3, r4, #20
 80122d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80122dc:	4413      	add	r3, r2
 80122de:	9309      	str	r3, [sp, #36]	; 0x24
 80122e0:	4bd1      	ldr	r3, [pc, #836]	; (8012628 <__ieee754_pow+0x748>)
 80122e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80122e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80122ea:	429c      	cmp	r4, r3
 80122ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80122f0:	dd08      	ble.n	8012304 <__ieee754_pow+0x424>
 80122f2:	4bce      	ldr	r3, [pc, #824]	; (801262c <__ieee754_pow+0x74c>)
 80122f4:	429c      	cmp	r4, r3
 80122f6:	f340 8163 	ble.w	80125c0 <__ieee754_pow+0x6e0>
 80122fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122fc:	3301      	adds	r3, #1
 80122fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012300:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012304:	2400      	movs	r4, #0
 8012306:	00e3      	lsls	r3, r4, #3
 8012308:	930b      	str	r3, [sp, #44]	; 0x2c
 801230a:	4bc9      	ldr	r3, [pc, #804]	; (8012630 <__ieee754_pow+0x750>)
 801230c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012310:	ed93 7b00 	vldr	d7, [r3]
 8012314:	4629      	mov	r1, r5
 8012316:	ec53 2b17 	vmov	r2, r3, d7
 801231a:	eeb0 8a47 	vmov.f32	s16, s14
 801231e:	eef0 8a67 	vmov.f32	s17, s15
 8012322:	4682      	mov	sl, r0
 8012324:	f7ed ffc0 	bl	80002a8 <__aeabi_dsub>
 8012328:	4652      	mov	r2, sl
 801232a:	4606      	mov	r6, r0
 801232c:	460f      	mov	r7, r1
 801232e:	462b      	mov	r3, r5
 8012330:	ec51 0b18 	vmov	r0, r1, d8
 8012334:	f7ed ffba 	bl	80002ac <__adddf3>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	2000      	movs	r0, #0
 801233e:	49bd      	ldr	r1, [pc, #756]	; (8012634 <__ieee754_pow+0x754>)
 8012340:	f7ee fa94 	bl	800086c <__aeabi_ddiv>
 8012344:	ec41 0b19 	vmov	d9, r0, r1
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	4630      	mov	r0, r6
 801234e:	4639      	mov	r1, r7
 8012350:	f7ee f962 	bl	8000618 <__aeabi_dmul>
 8012354:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012358:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801235c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012360:	2300      	movs	r3, #0
 8012362:	9304      	str	r3, [sp, #16]
 8012364:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012368:	46ab      	mov	fp, r5
 801236a:	106d      	asrs	r5, r5, #1
 801236c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012370:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012374:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012378:	2200      	movs	r2, #0
 801237a:	4640      	mov	r0, r8
 801237c:	4649      	mov	r1, r9
 801237e:	4614      	mov	r4, r2
 8012380:	461d      	mov	r5, r3
 8012382:	f7ee f949 	bl	8000618 <__aeabi_dmul>
 8012386:	4602      	mov	r2, r0
 8012388:	460b      	mov	r3, r1
 801238a:	4630      	mov	r0, r6
 801238c:	4639      	mov	r1, r7
 801238e:	f7ed ff8b 	bl	80002a8 <__aeabi_dsub>
 8012392:	ec53 2b18 	vmov	r2, r3, d8
 8012396:	4606      	mov	r6, r0
 8012398:	460f      	mov	r7, r1
 801239a:	4620      	mov	r0, r4
 801239c:	4629      	mov	r1, r5
 801239e:	f7ed ff83 	bl	80002a8 <__aeabi_dsub>
 80123a2:	4602      	mov	r2, r0
 80123a4:	460b      	mov	r3, r1
 80123a6:	4650      	mov	r0, sl
 80123a8:	4659      	mov	r1, fp
 80123aa:	f7ed ff7d 	bl	80002a8 <__aeabi_dsub>
 80123ae:	4642      	mov	r2, r8
 80123b0:	464b      	mov	r3, r9
 80123b2:	f7ee f931 	bl	8000618 <__aeabi_dmul>
 80123b6:	4602      	mov	r2, r0
 80123b8:	460b      	mov	r3, r1
 80123ba:	4630      	mov	r0, r6
 80123bc:	4639      	mov	r1, r7
 80123be:	f7ed ff73 	bl	80002a8 <__aeabi_dsub>
 80123c2:	ec53 2b19 	vmov	r2, r3, d9
 80123c6:	f7ee f927 	bl	8000618 <__aeabi_dmul>
 80123ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123ce:	ec41 0b18 	vmov	d8, r0, r1
 80123d2:	4610      	mov	r0, r2
 80123d4:	4619      	mov	r1, r3
 80123d6:	f7ee f91f 	bl	8000618 <__aeabi_dmul>
 80123da:	a37d      	add	r3, pc, #500	; (adr r3, 80125d0 <__ieee754_pow+0x6f0>)
 80123dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e0:	4604      	mov	r4, r0
 80123e2:	460d      	mov	r5, r1
 80123e4:	f7ee f918 	bl	8000618 <__aeabi_dmul>
 80123e8:	a37b      	add	r3, pc, #492	; (adr r3, 80125d8 <__ieee754_pow+0x6f8>)
 80123ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ee:	f7ed ff5d 	bl	80002ac <__adddf3>
 80123f2:	4622      	mov	r2, r4
 80123f4:	462b      	mov	r3, r5
 80123f6:	f7ee f90f 	bl	8000618 <__aeabi_dmul>
 80123fa:	a379      	add	r3, pc, #484	; (adr r3, 80125e0 <__ieee754_pow+0x700>)
 80123fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012400:	f7ed ff54 	bl	80002ac <__adddf3>
 8012404:	4622      	mov	r2, r4
 8012406:	462b      	mov	r3, r5
 8012408:	f7ee f906 	bl	8000618 <__aeabi_dmul>
 801240c:	a376      	add	r3, pc, #472	; (adr r3, 80125e8 <__ieee754_pow+0x708>)
 801240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012412:	f7ed ff4b 	bl	80002ac <__adddf3>
 8012416:	4622      	mov	r2, r4
 8012418:	462b      	mov	r3, r5
 801241a:	f7ee f8fd 	bl	8000618 <__aeabi_dmul>
 801241e:	a374      	add	r3, pc, #464	; (adr r3, 80125f0 <__ieee754_pow+0x710>)
 8012420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012424:	f7ed ff42 	bl	80002ac <__adddf3>
 8012428:	4622      	mov	r2, r4
 801242a:	462b      	mov	r3, r5
 801242c:	f7ee f8f4 	bl	8000618 <__aeabi_dmul>
 8012430:	a371      	add	r3, pc, #452	; (adr r3, 80125f8 <__ieee754_pow+0x718>)
 8012432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012436:	f7ed ff39 	bl	80002ac <__adddf3>
 801243a:	4622      	mov	r2, r4
 801243c:	4606      	mov	r6, r0
 801243e:	460f      	mov	r7, r1
 8012440:	462b      	mov	r3, r5
 8012442:	4620      	mov	r0, r4
 8012444:	4629      	mov	r1, r5
 8012446:	f7ee f8e7 	bl	8000618 <__aeabi_dmul>
 801244a:	4602      	mov	r2, r0
 801244c:	460b      	mov	r3, r1
 801244e:	4630      	mov	r0, r6
 8012450:	4639      	mov	r1, r7
 8012452:	f7ee f8e1 	bl	8000618 <__aeabi_dmul>
 8012456:	4642      	mov	r2, r8
 8012458:	4604      	mov	r4, r0
 801245a:	460d      	mov	r5, r1
 801245c:	464b      	mov	r3, r9
 801245e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012462:	f7ed ff23 	bl	80002ac <__adddf3>
 8012466:	ec53 2b18 	vmov	r2, r3, d8
 801246a:	f7ee f8d5 	bl	8000618 <__aeabi_dmul>
 801246e:	4622      	mov	r2, r4
 8012470:	462b      	mov	r3, r5
 8012472:	f7ed ff1b 	bl	80002ac <__adddf3>
 8012476:	4642      	mov	r2, r8
 8012478:	4682      	mov	sl, r0
 801247a:	468b      	mov	fp, r1
 801247c:	464b      	mov	r3, r9
 801247e:	4640      	mov	r0, r8
 8012480:	4649      	mov	r1, r9
 8012482:	f7ee f8c9 	bl	8000618 <__aeabi_dmul>
 8012486:	4b6c      	ldr	r3, [pc, #432]	; (8012638 <__ieee754_pow+0x758>)
 8012488:	2200      	movs	r2, #0
 801248a:	4606      	mov	r6, r0
 801248c:	460f      	mov	r7, r1
 801248e:	f7ed ff0d 	bl	80002ac <__adddf3>
 8012492:	4652      	mov	r2, sl
 8012494:	465b      	mov	r3, fp
 8012496:	f7ed ff09 	bl	80002ac <__adddf3>
 801249a:	9c04      	ldr	r4, [sp, #16]
 801249c:	460d      	mov	r5, r1
 801249e:	4622      	mov	r2, r4
 80124a0:	460b      	mov	r3, r1
 80124a2:	4640      	mov	r0, r8
 80124a4:	4649      	mov	r1, r9
 80124a6:	f7ee f8b7 	bl	8000618 <__aeabi_dmul>
 80124aa:	4b63      	ldr	r3, [pc, #396]	; (8012638 <__ieee754_pow+0x758>)
 80124ac:	4680      	mov	r8, r0
 80124ae:	4689      	mov	r9, r1
 80124b0:	2200      	movs	r2, #0
 80124b2:	4620      	mov	r0, r4
 80124b4:	4629      	mov	r1, r5
 80124b6:	f7ed fef7 	bl	80002a8 <__aeabi_dsub>
 80124ba:	4632      	mov	r2, r6
 80124bc:	463b      	mov	r3, r7
 80124be:	f7ed fef3 	bl	80002a8 <__aeabi_dsub>
 80124c2:	4602      	mov	r2, r0
 80124c4:	460b      	mov	r3, r1
 80124c6:	4650      	mov	r0, sl
 80124c8:	4659      	mov	r1, fp
 80124ca:	f7ed feed 	bl	80002a8 <__aeabi_dsub>
 80124ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80124d2:	f7ee f8a1 	bl	8000618 <__aeabi_dmul>
 80124d6:	4622      	mov	r2, r4
 80124d8:	4606      	mov	r6, r0
 80124da:	460f      	mov	r7, r1
 80124dc:	462b      	mov	r3, r5
 80124de:	ec51 0b18 	vmov	r0, r1, d8
 80124e2:	f7ee f899 	bl	8000618 <__aeabi_dmul>
 80124e6:	4602      	mov	r2, r0
 80124e8:	460b      	mov	r3, r1
 80124ea:	4630      	mov	r0, r6
 80124ec:	4639      	mov	r1, r7
 80124ee:	f7ed fedd 	bl	80002ac <__adddf3>
 80124f2:	4606      	mov	r6, r0
 80124f4:	460f      	mov	r7, r1
 80124f6:	4602      	mov	r2, r0
 80124f8:	460b      	mov	r3, r1
 80124fa:	4640      	mov	r0, r8
 80124fc:	4649      	mov	r1, r9
 80124fe:	f7ed fed5 	bl	80002ac <__adddf3>
 8012502:	9c04      	ldr	r4, [sp, #16]
 8012504:	a33e      	add	r3, pc, #248	; (adr r3, 8012600 <__ieee754_pow+0x720>)
 8012506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250a:	4620      	mov	r0, r4
 801250c:	460d      	mov	r5, r1
 801250e:	f7ee f883 	bl	8000618 <__aeabi_dmul>
 8012512:	4642      	mov	r2, r8
 8012514:	ec41 0b18 	vmov	d8, r0, r1
 8012518:	464b      	mov	r3, r9
 801251a:	4620      	mov	r0, r4
 801251c:	4629      	mov	r1, r5
 801251e:	f7ed fec3 	bl	80002a8 <__aeabi_dsub>
 8012522:	4602      	mov	r2, r0
 8012524:	460b      	mov	r3, r1
 8012526:	4630      	mov	r0, r6
 8012528:	4639      	mov	r1, r7
 801252a:	f7ed febd 	bl	80002a8 <__aeabi_dsub>
 801252e:	a336      	add	r3, pc, #216	; (adr r3, 8012608 <__ieee754_pow+0x728>)
 8012530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012534:	f7ee f870 	bl	8000618 <__aeabi_dmul>
 8012538:	a335      	add	r3, pc, #212	; (adr r3, 8012610 <__ieee754_pow+0x730>)
 801253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253e:	4606      	mov	r6, r0
 8012540:	460f      	mov	r7, r1
 8012542:	4620      	mov	r0, r4
 8012544:	4629      	mov	r1, r5
 8012546:	f7ee f867 	bl	8000618 <__aeabi_dmul>
 801254a:	4602      	mov	r2, r0
 801254c:	460b      	mov	r3, r1
 801254e:	4630      	mov	r0, r6
 8012550:	4639      	mov	r1, r7
 8012552:	f7ed feab 	bl	80002ac <__adddf3>
 8012556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012558:	4b38      	ldr	r3, [pc, #224]	; (801263c <__ieee754_pow+0x75c>)
 801255a:	4413      	add	r3, r2
 801255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012560:	f7ed fea4 	bl	80002ac <__adddf3>
 8012564:	4682      	mov	sl, r0
 8012566:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012568:	468b      	mov	fp, r1
 801256a:	f7ed ffeb 	bl	8000544 <__aeabi_i2d>
 801256e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012570:	4b33      	ldr	r3, [pc, #204]	; (8012640 <__ieee754_pow+0x760>)
 8012572:	4413      	add	r3, r2
 8012574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012578:	4606      	mov	r6, r0
 801257a:	460f      	mov	r7, r1
 801257c:	4652      	mov	r2, sl
 801257e:	465b      	mov	r3, fp
 8012580:	ec51 0b18 	vmov	r0, r1, d8
 8012584:	f7ed fe92 	bl	80002ac <__adddf3>
 8012588:	4642      	mov	r2, r8
 801258a:	464b      	mov	r3, r9
 801258c:	f7ed fe8e 	bl	80002ac <__adddf3>
 8012590:	4632      	mov	r2, r6
 8012592:	463b      	mov	r3, r7
 8012594:	f7ed fe8a 	bl	80002ac <__adddf3>
 8012598:	9c04      	ldr	r4, [sp, #16]
 801259a:	4632      	mov	r2, r6
 801259c:	463b      	mov	r3, r7
 801259e:	4620      	mov	r0, r4
 80125a0:	460d      	mov	r5, r1
 80125a2:	f7ed fe81 	bl	80002a8 <__aeabi_dsub>
 80125a6:	4642      	mov	r2, r8
 80125a8:	464b      	mov	r3, r9
 80125aa:	f7ed fe7d 	bl	80002a8 <__aeabi_dsub>
 80125ae:	ec53 2b18 	vmov	r2, r3, d8
 80125b2:	f7ed fe79 	bl	80002a8 <__aeabi_dsub>
 80125b6:	4602      	mov	r2, r0
 80125b8:	460b      	mov	r3, r1
 80125ba:	4650      	mov	r0, sl
 80125bc:	4659      	mov	r1, fp
 80125be:	e606      	b.n	80121ce <__ieee754_pow+0x2ee>
 80125c0:	2401      	movs	r4, #1
 80125c2:	e6a0      	b.n	8012306 <__ieee754_pow+0x426>
 80125c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012618 <__ieee754_pow+0x738>
 80125c8:	e60d      	b.n	80121e6 <__ieee754_pow+0x306>
 80125ca:	bf00      	nop
 80125cc:	f3af 8000 	nop.w
 80125d0:	4a454eef 	.word	0x4a454eef
 80125d4:	3fca7e28 	.word	0x3fca7e28
 80125d8:	93c9db65 	.word	0x93c9db65
 80125dc:	3fcd864a 	.word	0x3fcd864a
 80125e0:	a91d4101 	.word	0xa91d4101
 80125e4:	3fd17460 	.word	0x3fd17460
 80125e8:	518f264d 	.word	0x518f264d
 80125ec:	3fd55555 	.word	0x3fd55555
 80125f0:	db6fabff 	.word	0xdb6fabff
 80125f4:	3fdb6db6 	.word	0x3fdb6db6
 80125f8:	33333303 	.word	0x33333303
 80125fc:	3fe33333 	.word	0x3fe33333
 8012600:	e0000000 	.word	0xe0000000
 8012604:	3feec709 	.word	0x3feec709
 8012608:	dc3a03fd 	.word	0xdc3a03fd
 801260c:	3feec709 	.word	0x3feec709
 8012610:	145b01f5 	.word	0x145b01f5
 8012614:	be3e2fe0 	.word	0xbe3e2fe0
 8012618:	00000000 	.word	0x00000000
 801261c:	3ff00000 	.word	0x3ff00000
 8012620:	7ff00000 	.word	0x7ff00000
 8012624:	43400000 	.word	0x43400000
 8012628:	0003988e 	.word	0x0003988e
 801262c:	000bb679 	.word	0x000bb679
 8012630:	08013340 	.word	0x08013340
 8012634:	3ff00000 	.word	0x3ff00000
 8012638:	40080000 	.word	0x40080000
 801263c:	08013360 	.word	0x08013360
 8012640:	08013350 	.word	0x08013350
 8012644:	a3b5      	add	r3, pc, #724	; (adr r3, 801291c <__ieee754_pow+0xa3c>)
 8012646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264a:	4640      	mov	r0, r8
 801264c:	4649      	mov	r1, r9
 801264e:	f7ed fe2d 	bl	80002ac <__adddf3>
 8012652:	4622      	mov	r2, r4
 8012654:	ec41 0b1a 	vmov	d10, r0, r1
 8012658:	462b      	mov	r3, r5
 801265a:	4630      	mov	r0, r6
 801265c:	4639      	mov	r1, r7
 801265e:	f7ed fe23 	bl	80002a8 <__aeabi_dsub>
 8012662:	4602      	mov	r2, r0
 8012664:	460b      	mov	r3, r1
 8012666:	ec51 0b1a 	vmov	r0, r1, d10
 801266a:	f7ee fa65 	bl	8000b38 <__aeabi_dcmpgt>
 801266e:	2800      	cmp	r0, #0
 8012670:	f47f adf8 	bne.w	8012264 <__ieee754_pow+0x384>
 8012674:	4aa4      	ldr	r2, [pc, #656]	; (8012908 <__ieee754_pow+0xa28>)
 8012676:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801267a:	4293      	cmp	r3, r2
 801267c:	f340 810b 	ble.w	8012896 <__ieee754_pow+0x9b6>
 8012680:	151b      	asrs	r3, r3, #20
 8012682:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012686:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801268a:	fa4a f303 	asr.w	r3, sl, r3
 801268e:	445b      	add	r3, fp
 8012690:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012694:	4e9d      	ldr	r6, [pc, #628]	; (801290c <__ieee754_pow+0xa2c>)
 8012696:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801269a:	4116      	asrs	r6, r2
 801269c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80126a0:	2000      	movs	r0, #0
 80126a2:	ea23 0106 	bic.w	r1, r3, r6
 80126a6:	f1c2 0214 	rsb	r2, r2, #20
 80126aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80126ae:	fa4a fa02 	asr.w	sl, sl, r2
 80126b2:	f1bb 0f00 	cmp.w	fp, #0
 80126b6:	4602      	mov	r2, r0
 80126b8:	460b      	mov	r3, r1
 80126ba:	4620      	mov	r0, r4
 80126bc:	4629      	mov	r1, r5
 80126be:	bfb8      	it	lt
 80126c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80126c4:	f7ed fdf0 	bl	80002a8 <__aeabi_dsub>
 80126c8:	ec41 0b19 	vmov	d9, r0, r1
 80126cc:	4642      	mov	r2, r8
 80126ce:	464b      	mov	r3, r9
 80126d0:	ec51 0b19 	vmov	r0, r1, d9
 80126d4:	f7ed fdea 	bl	80002ac <__adddf3>
 80126d8:	2400      	movs	r4, #0
 80126da:	a379      	add	r3, pc, #484	; (adr r3, 80128c0 <__ieee754_pow+0x9e0>)
 80126dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e0:	4620      	mov	r0, r4
 80126e2:	460d      	mov	r5, r1
 80126e4:	f7ed ff98 	bl	8000618 <__aeabi_dmul>
 80126e8:	ec53 2b19 	vmov	r2, r3, d9
 80126ec:	4606      	mov	r6, r0
 80126ee:	460f      	mov	r7, r1
 80126f0:	4620      	mov	r0, r4
 80126f2:	4629      	mov	r1, r5
 80126f4:	f7ed fdd8 	bl	80002a8 <__aeabi_dsub>
 80126f8:	4602      	mov	r2, r0
 80126fa:	460b      	mov	r3, r1
 80126fc:	4640      	mov	r0, r8
 80126fe:	4649      	mov	r1, r9
 8012700:	f7ed fdd2 	bl	80002a8 <__aeabi_dsub>
 8012704:	a370      	add	r3, pc, #448	; (adr r3, 80128c8 <__ieee754_pow+0x9e8>)
 8012706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270a:	f7ed ff85 	bl	8000618 <__aeabi_dmul>
 801270e:	a370      	add	r3, pc, #448	; (adr r3, 80128d0 <__ieee754_pow+0x9f0>)
 8012710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012714:	4680      	mov	r8, r0
 8012716:	4689      	mov	r9, r1
 8012718:	4620      	mov	r0, r4
 801271a:	4629      	mov	r1, r5
 801271c:	f7ed ff7c 	bl	8000618 <__aeabi_dmul>
 8012720:	4602      	mov	r2, r0
 8012722:	460b      	mov	r3, r1
 8012724:	4640      	mov	r0, r8
 8012726:	4649      	mov	r1, r9
 8012728:	f7ed fdc0 	bl	80002ac <__adddf3>
 801272c:	4604      	mov	r4, r0
 801272e:	460d      	mov	r5, r1
 8012730:	4602      	mov	r2, r0
 8012732:	460b      	mov	r3, r1
 8012734:	4630      	mov	r0, r6
 8012736:	4639      	mov	r1, r7
 8012738:	f7ed fdb8 	bl	80002ac <__adddf3>
 801273c:	4632      	mov	r2, r6
 801273e:	463b      	mov	r3, r7
 8012740:	4680      	mov	r8, r0
 8012742:	4689      	mov	r9, r1
 8012744:	f7ed fdb0 	bl	80002a8 <__aeabi_dsub>
 8012748:	4602      	mov	r2, r0
 801274a:	460b      	mov	r3, r1
 801274c:	4620      	mov	r0, r4
 801274e:	4629      	mov	r1, r5
 8012750:	f7ed fdaa 	bl	80002a8 <__aeabi_dsub>
 8012754:	4642      	mov	r2, r8
 8012756:	4606      	mov	r6, r0
 8012758:	460f      	mov	r7, r1
 801275a:	464b      	mov	r3, r9
 801275c:	4640      	mov	r0, r8
 801275e:	4649      	mov	r1, r9
 8012760:	f7ed ff5a 	bl	8000618 <__aeabi_dmul>
 8012764:	a35c      	add	r3, pc, #368	; (adr r3, 80128d8 <__ieee754_pow+0x9f8>)
 8012766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276a:	4604      	mov	r4, r0
 801276c:	460d      	mov	r5, r1
 801276e:	f7ed ff53 	bl	8000618 <__aeabi_dmul>
 8012772:	a35b      	add	r3, pc, #364	; (adr r3, 80128e0 <__ieee754_pow+0xa00>)
 8012774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012778:	f7ed fd96 	bl	80002a8 <__aeabi_dsub>
 801277c:	4622      	mov	r2, r4
 801277e:	462b      	mov	r3, r5
 8012780:	f7ed ff4a 	bl	8000618 <__aeabi_dmul>
 8012784:	a358      	add	r3, pc, #352	; (adr r3, 80128e8 <__ieee754_pow+0xa08>)
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	f7ed fd8f 	bl	80002ac <__adddf3>
 801278e:	4622      	mov	r2, r4
 8012790:	462b      	mov	r3, r5
 8012792:	f7ed ff41 	bl	8000618 <__aeabi_dmul>
 8012796:	a356      	add	r3, pc, #344	; (adr r3, 80128f0 <__ieee754_pow+0xa10>)
 8012798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279c:	f7ed fd84 	bl	80002a8 <__aeabi_dsub>
 80127a0:	4622      	mov	r2, r4
 80127a2:	462b      	mov	r3, r5
 80127a4:	f7ed ff38 	bl	8000618 <__aeabi_dmul>
 80127a8:	a353      	add	r3, pc, #332	; (adr r3, 80128f8 <__ieee754_pow+0xa18>)
 80127aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ae:	f7ed fd7d 	bl	80002ac <__adddf3>
 80127b2:	4622      	mov	r2, r4
 80127b4:	462b      	mov	r3, r5
 80127b6:	f7ed ff2f 	bl	8000618 <__aeabi_dmul>
 80127ba:	4602      	mov	r2, r0
 80127bc:	460b      	mov	r3, r1
 80127be:	4640      	mov	r0, r8
 80127c0:	4649      	mov	r1, r9
 80127c2:	f7ed fd71 	bl	80002a8 <__aeabi_dsub>
 80127c6:	4604      	mov	r4, r0
 80127c8:	460d      	mov	r5, r1
 80127ca:	4602      	mov	r2, r0
 80127cc:	460b      	mov	r3, r1
 80127ce:	4640      	mov	r0, r8
 80127d0:	4649      	mov	r1, r9
 80127d2:	f7ed ff21 	bl	8000618 <__aeabi_dmul>
 80127d6:	2200      	movs	r2, #0
 80127d8:	ec41 0b19 	vmov	d9, r0, r1
 80127dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80127e0:	4620      	mov	r0, r4
 80127e2:	4629      	mov	r1, r5
 80127e4:	f7ed fd60 	bl	80002a8 <__aeabi_dsub>
 80127e8:	4602      	mov	r2, r0
 80127ea:	460b      	mov	r3, r1
 80127ec:	ec51 0b19 	vmov	r0, r1, d9
 80127f0:	f7ee f83c 	bl	800086c <__aeabi_ddiv>
 80127f4:	4632      	mov	r2, r6
 80127f6:	4604      	mov	r4, r0
 80127f8:	460d      	mov	r5, r1
 80127fa:	463b      	mov	r3, r7
 80127fc:	4640      	mov	r0, r8
 80127fe:	4649      	mov	r1, r9
 8012800:	f7ed ff0a 	bl	8000618 <__aeabi_dmul>
 8012804:	4632      	mov	r2, r6
 8012806:	463b      	mov	r3, r7
 8012808:	f7ed fd50 	bl	80002ac <__adddf3>
 801280c:	4602      	mov	r2, r0
 801280e:	460b      	mov	r3, r1
 8012810:	4620      	mov	r0, r4
 8012812:	4629      	mov	r1, r5
 8012814:	f7ed fd48 	bl	80002a8 <__aeabi_dsub>
 8012818:	4642      	mov	r2, r8
 801281a:	464b      	mov	r3, r9
 801281c:	f7ed fd44 	bl	80002a8 <__aeabi_dsub>
 8012820:	460b      	mov	r3, r1
 8012822:	4602      	mov	r2, r0
 8012824:	493a      	ldr	r1, [pc, #232]	; (8012910 <__ieee754_pow+0xa30>)
 8012826:	2000      	movs	r0, #0
 8012828:	f7ed fd3e 	bl	80002a8 <__aeabi_dsub>
 801282c:	e9cd 0100 	strd	r0, r1, [sp]
 8012830:	9b01      	ldr	r3, [sp, #4]
 8012832:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801283a:	da2f      	bge.n	801289c <__ieee754_pow+0x9bc>
 801283c:	4650      	mov	r0, sl
 801283e:	ed9d 0b00 	vldr	d0, [sp]
 8012842:	f000 f9cd 	bl	8012be0 <scalbn>
 8012846:	ec51 0b10 	vmov	r0, r1, d0
 801284a:	ec53 2b18 	vmov	r2, r3, d8
 801284e:	f7ff bbe0 	b.w	8012012 <__ieee754_pow+0x132>
 8012852:	4b30      	ldr	r3, [pc, #192]	; (8012914 <__ieee754_pow+0xa34>)
 8012854:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012858:	429e      	cmp	r6, r3
 801285a:	f77f af0b 	ble.w	8012674 <__ieee754_pow+0x794>
 801285e:	4b2e      	ldr	r3, [pc, #184]	; (8012918 <__ieee754_pow+0xa38>)
 8012860:	440b      	add	r3, r1
 8012862:	4303      	orrs	r3, r0
 8012864:	d00b      	beq.n	801287e <__ieee754_pow+0x99e>
 8012866:	a326      	add	r3, pc, #152	; (adr r3, 8012900 <__ieee754_pow+0xa20>)
 8012868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286c:	ec51 0b18 	vmov	r0, r1, d8
 8012870:	f7ed fed2 	bl	8000618 <__aeabi_dmul>
 8012874:	a322      	add	r3, pc, #136	; (adr r3, 8012900 <__ieee754_pow+0xa20>)
 8012876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287a:	f7ff bbca 	b.w	8012012 <__ieee754_pow+0x132>
 801287e:	4622      	mov	r2, r4
 8012880:	462b      	mov	r3, r5
 8012882:	f7ed fd11 	bl	80002a8 <__aeabi_dsub>
 8012886:	4642      	mov	r2, r8
 8012888:	464b      	mov	r3, r9
 801288a:	f7ee f94b 	bl	8000b24 <__aeabi_dcmpge>
 801288e:	2800      	cmp	r0, #0
 8012890:	f43f aef0 	beq.w	8012674 <__ieee754_pow+0x794>
 8012894:	e7e7      	b.n	8012866 <__ieee754_pow+0x986>
 8012896:	f04f 0a00 	mov.w	sl, #0
 801289a:	e717      	b.n	80126cc <__ieee754_pow+0x7ec>
 801289c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128a0:	4619      	mov	r1, r3
 80128a2:	e7d2      	b.n	801284a <__ieee754_pow+0x96a>
 80128a4:	491a      	ldr	r1, [pc, #104]	; (8012910 <__ieee754_pow+0xa30>)
 80128a6:	2000      	movs	r0, #0
 80128a8:	f7ff bb9e 	b.w	8011fe8 <__ieee754_pow+0x108>
 80128ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128b0:	f7ff bb9a 	b.w	8011fe8 <__ieee754_pow+0x108>
 80128b4:	9000      	str	r0, [sp, #0]
 80128b6:	f7ff bb76 	b.w	8011fa6 <__ieee754_pow+0xc6>
 80128ba:	2100      	movs	r1, #0
 80128bc:	f7ff bb60 	b.w	8011f80 <__ieee754_pow+0xa0>
 80128c0:	00000000 	.word	0x00000000
 80128c4:	3fe62e43 	.word	0x3fe62e43
 80128c8:	fefa39ef 	.word	0xfefa39ef
 80128cc:	3fe62e42 	.word	0x3fe62e42
 80128d0:	0ca86c39 	.word	0x0ca86c39
 80128d4:	be205c61 	.word	0xbe205c61
 80128d8:	72bea4d0 	.word	0x72bea4d0
 80128dc:	3e663769 	.word	0x3e663769
 80128e0:	c5d26bf1 	.word	0xc5d26bf1
 80128e4:	3ebbbd41 	.word	0x3ebbbd41
 80128e8:	af25de2c 	.word	0xaf25de2c
 80128ec:	3f11566a 	.word	0x3f11566a
 80128f0:	16bebd93 	.word	0x16bebd93
 80128f4:	3f66c16c 	.word	0x3f66c16c
 80128f8:	5555553e 	.word	0x5555553e
 80128fc:	3fc55555 	.word	0x3fc55555
 8012900:	c2f8f359 	.word	0xc2f8f359
 8012904:	01a56e1f 	.word	0x01a56e1f
 8012908:	3fe00000 	.word	0x3fe00000
 801290c:	000fffff 	.word	0x000fffff
 8012910:	3ff00000 	.word	0x3ff00000
 8012914:	4090cbff 	.word	0x4090cbff
 8012918:	3f6f3400 	.word	0x3f6f3400
 801291c:	652b82fe 	.word	0x652b82fe
 8012920:	3c971547 	.word	0x3c971547

08012924 <__ieee754_sqrt>:
 8012924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012928:	ec55 4b10 	vmov	r4, r5, d0
 801292c:	4e56      	ldr	r6, [pc, #344]	; (8012a88 <__ieee754_sqrt+0x164>)
 801292e:	43ae      	bics	r6, r5
 8012930:	ee10 0a10 	vmov	r0, s0
 8012934:	ee10 3a10 	vmov	r3, s0
 8012938:	4629      	mov	r1, r5
 801293a:	462a      	mov	r2, r5
 801293c:	d110      	bne.n	8012960 <__ieee754_sqrt+0x3c>
 801293e:	ee10 2a10 	vmov	r2, s0
 8012942:	462b      	mov	r3, r5
 8012944:	f7ed fe68 	bl	8000618 <__aeabi_dmul>
 8012948:	4602      	mov	r2, r0
 801294a:	460b      	mov	r3, r1
 801294c:	4620      	mov	r0, r4
 801294e:	4629      	mov	r1, r5
 8012950:	f7ed fcac 	bl	80002ac <__adddf3>
 8012954:	4604      	mov	r4, r0
 8012956:	460d      	mov	r5, r1
 8012958:	ec45 4b10 	vmov	d0, r4, r5
 801295c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012960:	2d00      	cmp	r5, #0
 8012962:	dc10      	bgt.n	8012986 <__ieee754_sqrt+0x62>
 8012964:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012968:	4330      	orrs	r0, r6
 801296a:	d0f5      	beq.n	8012958 <__ieee754_sqrt+0x34>
 801296c:	b15d      	cbz	r5, 8012986 <__ieee754_sqrt+0x62>
 801296e:	ee10 2a10 	vmov	r2, s0
 8012972:	462b      	mov	r3, r5
 8012974:	ee10 0a10 	vmov	r0, s0
 8012978:	f7ed fc96 	bl	80002a8 <__aeabi_dsub>
 801297c:	4602      	mov	r2, r0
 801297e:	460b      	mov	r3, r1
 8012980:	f7ed ff74 	bl	800086c <__aeabi_ddiv>
 8012984:	e7e6      	b.n	8012954 <__ieee754_sqrt+0x30>
 8012986:	1509      	asrs	r1, r1, #20
 8012988:	d076      	beq.n	8012a78 <__ieee754_sqrt+0x154>
 801298a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801298e:	07ce      	lsls	r6, r1, #31
 8012990:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8012994:	bf5e      	ittt	pl
 8012996:	0fda      	lsrpl	r2, r3, #31
 8012998:	005b      	lslpl	r3, r3, #1
 801299a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801299e:	0fda      	lsrs	r2, r3, #31
 80129a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80129a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80129a8:	2000      	movs	r0, #0
 80129aa:	106d      	asrs	r5, r5, #1
 80129ac:	005b      	lsls	r3, r3, #1
 80129ae:	f04f 0e16 	mov.w	lr, #22
 80129b2:	4684      	mov	ip, r0
 80129b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80129b8:	eb0c 0401 	add.w	r4, ip, r1
 80129bc:	4294      	cmp	r4, r2
 80129be:	bfde      	ittt	le
 80129c0:	1b12      	suble	r2, r2, r4
 80129c2:	eb04 0c01 	addle.w	ip, r4, r1
 80129c6:	1840      	addle	r0, r0, r1
 80129c8:	0052      	lsls	r2, r2, #1
 80129ca:	f1be 0e01 	subs.w	lr, lr, #1
 80129ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80129d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80129d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80129da:	d1ed      	bne.n	80129b8 <__ieee754_sqrt+0x94>
 80129dc:	4671      	mov	r1, lr
 80129de:	2720      	movs	r7, #32
 80129e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80129e4:	4562      	cmp	r2, ip
 80129e6:	eb04 060e 	add.w	r6, r4, lr
 80129ea:	dc02      	bgt.n	80129f2 <__ieee754_sqrt+0xce>
 80129ec:	d113      	bne.n	8012a16 <__ieee754_sqrt+0xf2>
 80129ee:	429e      	cmp	r6, r3
 80129f0:	d811      	bhi.n	8012a16 <__ieee754_sqrt+0xf2>
 80129f2:	2e00      	cmp	r6, #0
 80129f4:	eb06 0e04 	add.w	lr, r6, r4
 80129f8:	da43      	bge.n	8012a82 <__ieee754_sqrt+0x15e>
 80129fa:	f1be 0f00 	cmp.w	lr, #0
 80129fe:	db40      	blt.n	8012a82 <__ieee754_sqrt+0x15e>
 8012a00:	f10c 0801 	add.w	r8, ip, #1
 8012a04:	eba2 020c 	sub.w	r2, r2, ip
 8012a08:	429e      	cmp	r6, r3
 8012a0a:	bf88      	it	hi
 8012a0c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012a10:	1b9b      	subs	r3, r3, r6
 8012a12:	4421      	add	r1, r4
 8012a14:	46c4      	mov	ip, r8
 8012a16:	0052      	lsls	r2, r2, #1
 8012a18:	3f01      	subs	r7, #1
 8012a1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012a1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012a22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012a26:	d1dd      	bne.n	80129e4 <__ieee754_sqrt+0xc0>
 8012a28:	4313      	orrs	r3, r2
 8012a2a:	d006      	beq.n	8012a3a <__ieee754_sqrt+0x116>
 8012a2c:	1c4c      	adds	r4, r1, #1
 8012a2e:	bf13      	iteet	ne
 8012a30:	3101      	addne	r1, #1
 8012a32:	3001      	addeq	r0, #1
 8012a34:	4639      	moveq	r1, r7
 8012a36:	f021 0101 	bicne.w	r1, r1, #1
 8012a3a:	1043      	asrs	r3, r0, #1
 8012a3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012a40:	0849      	lsrs	r1, r1, #1
 8012a42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012a46:	07c2      	lsls	r2, r0, #31
 8012a48:	bf48      	it	mi
 8012a4a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8012a4e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012a52:	460c      	mov	r4, r1
 8012a54:	463d      	mov	r5, r7
 8012a56:	e77f      	b.n	8012958 <__ieee754_sqrt+0x34>
 8012a58:	0ada      	lsrs	r2, r3, #11
 8012a5a:	3815      	subs	r0, #21
 8012a5c:	055b      	lsls	r3, r3, #21
 8012a5e:	2a00      	cmp	r2, #0
 8012a60:	d0fa      	beq.n	8012a58 <__ieee754_sqrt+0x134>
 8012a62:	02d7      	lsls	r7, r2, #11
 8012a64:	d50a      	bpl.n	8012a7c <__ieee754_sqrt+0x158>
 8012a66:	f1c1 0420 	rsb	r4, r1, #32
 8012a6a:	fa23 f404 	lsr.w	r4, r3, r4
 8012a6e:	1e4d      	subs	r5, r1, #1
 8012a70:	408b      	lsls	r3, r1
 8012a72:	4322      	orrs	r2, r4
 8012a74:	1b41      	subs	r1, r0, r5
 8012a76:	e788      	b.n	801298a <__ieee754_sqrt+0x66>
 8012a78:	4608      	mov	r0, r1
 8012a7a:	e7f0      	b.n	8012a5e <__ieee754_sqrt+0x13a>
 8012a7c:	0052      	lsls	r2, r2, #1
 8012a7e:	3101      	adds	r1, #1
 8012a80:	e7ef      	b.n	8012a62 <__ieee754_sqrt+0x13e>
 8012a82:	46e0      	mov	r8, ip
 8012a84:	e7be      	b.n	8012a04 <__ieee754_sqrt+0xe0>
 8012a86:	bf00      	nop
 8012a88:	7ff00000 	.word	0x7ff00000

08012a8c <fabs>:
 8012a8c:	ec51 0b10 	vmov	r0, r1, d0
 8012a90:	ee10 2a10 	vmov	r2, s0
 8012a94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012a98:	ec43 2b10 	vmov	d0, r2, r3
 8012a9c:	4770      	bx	lr

08012a9e <finite>:
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	ed8d 0b00 	vstr	d0, [sp]
 8012aa4:	9801      	ldr	r0, [sp, #4]
 8012aa6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012aaa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012aae:	0fc0      	lsrs	r0, r0, #31
 8012ab0:	b002      	add	sp, #8
 8012ab2:	4770      	bx	lr
 8012ab4:	0000      	movs	r0, r0
	...

08012ab8 <nan>:
 8012ab8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ac0 <nan+0x8>
 8012abc:	4770      	bx	lr
 8012abe:	bf00      	nop
 8012ac0:	00000000 	.word	0x00000000
 8012ac4:	7ff80000 	.word	0x7ff80000

08012ac8 <rint>:
 8012ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012aca:	ec51 0b10 	vmov	r0, r1, d0
 8012ace:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012ad2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012ad6:	2e13      	cmp	r6, #19
 8012ad8:	ee10 4a10 	vmov	r4, s0
 8012adc:	460b      	mov	r3, r1
 8012ade:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012ae2:	dc58      	bgt.n	8012b96 <rint+0xce>
 8012ae4:	2e00      	cmp	r6, #0
 8012ae6:	da2b      	bge.n	8012b40 <rint+0x78>
 8012ae8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012aec:	4302      	orrs	r2, r0
 8012aee:	d023      	beq.n	8012b38 <rint+0x70>
 8012af0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012af4:	4302      	orrs	r2, r0
 8012af6:	4254      	negs	r4, r2
 8012af8:	4314      	orrs	r4, r2
 8012afa:	0c4b      	lsrs	r3, r1, #17
 8012afc:	0b24      	lsrs	r4, r4, #12
 8012afe:	045b      	lsls	r3, r3, #17
 8012b00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012b04:	ea44 0103 	orr.w	r1, r4, r3
 8012b08:	4b32      	ldr	r3, [pc, #200]	; (8012bd4 <rint+0x10c>)
 8012b0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012b0e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012b12:	4602      	mov	r2, r0
 8012b14:	460b      	mov	r3, r1
 8012b16:	4630      	mov	r0, r6
 8012b18:	4639      	mov	r1, r7
 8012b1a:	f7ed fbc7 	bl	80002ac <__adddf3>
 8012b1e:	e9cd 0100 	strd	r0, r1, [sp]
 8012b22:	463b      	mov	r3, r7
 8012b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b28:	4632      	mov	r2, r6
 8012b2a:	f7ed fbbd 	bl	80002a8 <__aeabi_dsub>
 8012b2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012b32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012b36:	4639      	mov	r1, r7
 8012b38:	ec41 0b10 	vmov	d0, r0, r1
 8012b3c:	b003      	add	sp, #12
 8012b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b40:	4a25      	ldr	r2, [pc, #148]	; (8012bd8 <rint+0x110>)
 8012b42:	4132      	asrs	r2, r6
 8012b44:	ea01 0702 	and.w	r7, r1, r2
 8012b48:	4307      	orrs	r7, r0
 8012b4a:	d0f5      	beq.n	8012b38 <rint+0x70>
 8012b4c:	0851      	lsrs	r1, r2, #1
 8012b4e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8012b52:	4314      	orrs	r4, r2
 8012b54:	d00c      	beq.n	8012b70 <rint+0xa8>
 8012b56:	ea23 0201 	bic.w	r2, r3, r1
 8012b5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012b5e:	2e13      	cmp	r6, #19
 8012b60:	fa43 f606 	asr.w	r6, r3, r6
 8012b64:	bf0c      	ite	eq
 8012b66:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012b6a:	2400      	movne	r4, #0
 8012b6c:	ea42 0306 	orr.w	r3, r2, r6
 8012b70:	4918      	ldr	r1, [pc, #96]	; (8012bd4 <rint+0x10c>)
 8012b72:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012b76:	4622      	mov	r2, r4
 8012b78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	4629      	mov	r1, r5
 8012b80:	f7ed fb94 	bl	80002ac <__adddf3>
 8012b84:	e9cd 0100 	strd	r0, r1, [sp]
 8012b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b8c:	4622      	mov	r2, r4
 8012b8e:	462b      	mov	r3, r5
 8012b90:	f7ed fb8a 	bl	80002a8 <__aeabi_dsub>
 8012b94:	e7d0      	b.n	8012b38 <rint+0x70>
 8012b96:	2e33      	cmp	r6, #51	; 0x33
 8012b98:	dd07      	ble.n	8012baa <rint+0xe2>
 8012b9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012b9e:	d1cb      	bne.n	8012b38 <rint+0x70>
 8012ba0:	ee10 2a10 	vmov	r2, s0
 8012ba4:	f7ed fb82 	bl	80002ac <__adddf3>
 8012ba8:	e7c6      	b.n	8012b38 <rint+0x70>
 8012baa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012bae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8012bb2:	40d6      	lsrs	r6, r2
 8012bb4:	4230      	tst	r0, r6
 8012bb6:	d0bf      	beq.n	8012b38 <rint+0x70>
 8012bb8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012bbc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8012bc0:	bf1f      	itttt	ne
 8012bc2:	ea24 0101 	bicne.w	r1, r4, r1
 8012bc6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012bca:	fa44 f202 	asrne.w	r2, r4, r2
 8012bce:	ea41 0402 	orrne.w	r4, r1, r2
 8012bd2:	e7cd      	b.n	8012b70 <rint+0xa8>
 8012bd4:	08013370 	.word	0x08013370
 8012bd8:	000fffff 	.word	0x000fffff
 8012bdc:	00000000 	.word	0x00000000

08012be0 <scalbn>:
 8012be0:	b570      	push	{r4, r5, r6, lr}
 8012be2:	ec55 4b10 	vmov	r4, r5, d0
 8012be6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012bea:	4606      	mov	r6, r0
 8012bec:	462b      	mov	r3, r5
 8012bee:	b99a      	cbnz	r2, 8012c18 <scalbn+0x38>
 8012bf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012bf4:	4323      	orrs	r3, r4
 8012bf6:	d036      	beq.n	8012c66 <scalbn+0x86>
 8012bf8:	4b39      	ldr	r3, [pc, #228]	; (8012ce0 <scalbn+0x100>)
 8012bfa:	4629      	mov	r1, r5
 8012bfc:	ee10 0a10 	vmov	r0, s0
 8012c00:	2200      	movs	r2, #0
 8012c02:	f7ed fd09 	bl	8000618 <__aeabi_dmul>
 8012c06:	4b37      	ldr	r3, [pc, #220]	; (8012ce4 <scalbn+0x104>)
 8012c08:	429e      	cmp	r6, r3
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	460d      	mov	r5, r1
 8012c0e:	da10      	bge.n	8012c32 <scalbn+0x52>
 8012c10:	a32b      	add	r3, pc, #172	; (adr r3, 8012cc0 <scalbn+0xe0>)
 8012c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c16:	e03a      	b.n	8012c8e <scalbn+0xae>
 8012c18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012c1c:	428a      	cmp	r2, r1
 8012c1e:	d10c      	bne.n	8012c3a <scalbn+0x5a>
 8012c20:	ee10 2a10 	vmov	r2, s0
 8012c24:	4620      	mov	r0, r4
 8012c26:	4629      	mov	r1, r5
 8012c28:	f7ed fb40 	bl	80002ac <__adddf3>
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	460d      	mov	r5, r1
 8012c30:	e019      	b.n	8012c66 <scalbn+0x86>
 8012c32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012c36:	460b      	mov	r3, r1
 8012c38:	3a36      	subs	r2, #54	; 0x36
 8012c3a:	4432      	add	r2, r6
 8012c3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012c40:	428a      	cmp	r2, r1
 8012c42:	dd08      	ble.n	8012c56 <scalbn+0x76>
 8012c44:	2d00      	cmp	r5, #0
 8012c46:	a120      	add	r1, pc, #128	; (adr r1, 8012cc8 <scalbn+0xe8>)
 8012c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c4c:	da1c      	bge.n	8012c88 <scalbn+0xa8>
 8012c4e:	a120      	add	r1, pc, #128	; (adr r1, 8012cd0 <scalbn+0xf0>)
 8012c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c54:	e018      	b.n	8012c88 <scalbn+0xa8>
 8012c56:	2a00      	cmp	r2, #0
 8012c58:	dd08      	ble.n	8012c6c <scalbn+0x8c>
 8012c5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012c66:	ec45 4b10 	vmov	d0, r4, r5
 8012c6a:	bd70      	pop	{r4, r5, r6, pc}
 8012c6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012c70:	da19      	bge.n	8012ca6 <scalbn+0xc6>
 8012c72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012c76:	429e      	cmp	r6, r3
 8012c78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012c7c:	dd0a      	ble.n	8012c94 <scalbn+0xb4>
 8012c7e:	a112      	add	r1, pc, #72	; (adr r1, 8012cc8 <scalbn+0xe8>)
 8012c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1e2      	bne.n	8012c4e <scalbn+0x6e>
 8012c88:	a30f      	add	r3, pc, #60	; (adr r3, 8012cc8 <scalbn+0xe8>)
 8012c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8e:	f7ed fcc3 	bl	8000618 <__aeabi_dmul>
 8012c92:	e7cb      	b.n	8012c2c <scalbn+0x4c>
 8012c94:	a10a      	add	r1, pc, #40	; (adr r1, 8012cc0 <scalbn+0xe0>)
 8012c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d0b8      	beq.n	8012c10 <scalbn+0x30>
 8012c9e:	a10e      	add	r1, pc, #56	; (adr r1, 8012cd8 <scalbn+0xf8>)
 8012ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ca4:	e7b4      	b.n	8012c10 <scalbn+0x30>
 8012ca6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012caa:	3236      	adds	r2, #54	; 0x36
 8012cac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012cb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	4b0c      	ldr	r3, [pc, #48]	; (8012ce8 <scalbn+0x108>)
 8012cb8:	2200      	movs	r2, #0
 8012cba:	e7e8      	b.n	8012c8e <scalbn+0xae>
 8012cbc:	f3af 8000 	nop.w
 8012cc0:	c2f8f359 	.word	0xc2f8f359
 8012cc4:	01a56e1f 	.word	0x01a56e1f
 8012cc8:	8800759c 	.word	0x8800759c
 8012ccc:	7e37e43c 	.word	0x7e37e43c
 8012cd0:	8800759c 	.word	0x8800759c
 8012cd4:	fe37e43c 	.word	0xfe37e43c
 8012cd8:	c2f8f359 	.word	0xc2f8f359
 8012cdc:	81a56e1f 	.word	0x81a56e1f
 8012ce0:	43500000 	.word	0x43500000
 8012ce4:	ffff3cb0 	.word	0xffff3cb0
 8012ce8:	3c900000 	.word	0x3c900000

08012cec <_close>:
 8012cec:	4b02      	ldr	r3, [pc, #8]	; (8012cf8 <_close+0xc>)
 8012cee:	2258      	movs	r2, #88	; 0x58
 8012cf0:	601a      	str	r2, [r3, #0]
 8012cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cf6:	4770      	bx	lr
 8012cf8:	20008230 	.word	0x20008230

08012cfc <_fstat>:
 8012cfc:	4b02      	ldr	r3, [pc, #8]	; (8012d08 <_fstat+0xc>)
 8012cfe:	2258      	movs	r2, #88	; 0x58
 8012d00:	601a      	str	r2, [r3, #0]
 8012d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d06:	4770      	bx	lr
 8012d08:	20008230 	.word	0x20008230

08012d0c <_getpid>:
 8012d0c:	4b02      	ldr	r3, [pc, #8]	; (8012d18 <_getpid+0xc>)
 8012d0e:	2258      	movs	r2, #88	; 0x58
 8012d10:	601a      	str	r2, [r3, #0]
 8012d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d16:	4770      	bx	lr
 8012d18:	20008230 	.word	0x20008230

08012d1c <_isatty>:
 8012d1c:	4b02      	ldr	r3, [pc, #8]	; (8012d28 <_isatty+0xc>)
 8012d1e:	2258      	movs	r2, #88	; 0x58
 8012d20:	601a      	str	r2, [r3, #0]
 8012d22:	2000      	movs	r0, #0
 8012d24:	4770      	bx	lr
 8012d26:	bf00      	nop
 8012d28:	20008230 	.word	0x20008230

08012d2c <_kill>:
 8012d2c:	4b02      	ldr	r3, [pc, #8]	; (8012d38 <_kill+0xc>)
 8012d2e:	2258      	movs	r2, #88	; 0x58
 8012d30:	601a      	str	r2, [r3, #0]
 8012d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d36:	4770      	bx	lr
 8012d38:	20008230 	.word	0x20008230

08012d3c <_lseek>:
 8012d3c:	4b02      	ldr	r3, [pc, #8]	; (8012d48 <_lseek+0xc>)
 8012d3e:	2258      	movs	r2, #88	; 0x58
 8012d40:	601a      	str	r2, [r3, #0]
 8012d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d46:	4770      	bx	lr
 8012d48:	20008230 	.word	0x20008230

08012d4c <_read>:
 8012d4c:	4b02      	ldr	r3, [pc, #8]	; (8012d58 <_read+0xc>)
 8012d4e:	2258      	movs	r2, #88	; 0x58
 8012d50:	601a      	str	r2, [r3, #0]
 8012d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d56:	4770      	bx	lr
 8012d58:	20008230 	.word	0x20008230

08012d5c <_sbrk>:
 8012d5c:	4b04      	ldr	r3, [pc, #16]	; (8012d70 <_sbrk+0x14>)
 8012d5e:	6819      	ldr	r1, [r3, #0]
 8012d60:	4602      	mov	r2, r0
 8012d62:	b909      	cbnz	r1, 8012d68 <_sbrk+0xc>
 8012d64:	4903      	ldr	r1, [pc, #12]	; (8012d74 <_sbrk+0x18>)
 8012d66:	6019      	str	r1, [r3, #0]
 8012d68:	6818      	ldr	r0, [r3, #0]
 8012d6a:	4402      	add	r2, r0
 8012d6c:	601a      	str	r2, [r3, #0]
 8012d6e:	4770      	bx	lr
 8012d70:	20007c0c 	.word	0x20007c0c
 8012d74:	20008240 	.word	0x20008240

08012d78 <_exit>:
 8012d78:	e7fe      	b.n	8012d78 <_exit>
	...

08012d7c <_init>:
 8012d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d7e:	bf00      	nop
 8012d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d82:	bc08      	pop	{r3}
 8012d84:	469e      	mov	lr, r3
 8012d86:	4770      	bx	lr

08012d88 <_fini>:
 8012d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d8a:	bf00      	nop
 8012d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d8e:	bc08      	pop	{r3}
 8012d90:	469e      	mov	lr, r3
 8012d92:	4770      	bx	lr

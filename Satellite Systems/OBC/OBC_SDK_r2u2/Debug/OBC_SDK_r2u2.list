
OBC_SDK_r2u2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001072c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  080108e0  080108e0  000208e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010e8c  08010e8c  00020e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010e90  08010e90  00020e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08010e94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
  7 .bss          00007ff0  200001ec  200001ec  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00002004  200081dc  200081dc  000301ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004152c  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006440  00000000  00000000  00071748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ce8  00000000  00000000  00077b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001aa0  00000000  00000000  00079870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b439  00000000  00000000  0007b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000291c3  00000000  00000000  00086749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f621e  00000000  00000000  000af90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001a5b2a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d18  00000000  00000000  001a5b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  001ae898  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001eb  00000000  00000000  001ae94c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080108c4 	.word	0x080108c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	080108c4 	.word	0x080108c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <BatteryCapacity_Task>:
}

/*
 * @brief Task/Thread responsible for calculating battery capacity
 */
void BatteryCapacity_Task(void const * argument){
 8000d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d18:	b0a6      	sub	sp, #152	; 0x98
 8000d1a:	af10      	add	r7, sp, #64	; 0x40
 8000d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
    float Battery_Voltage, Battery_Current;
    float BCR_Voltage, BCR_Current;
    float x_voltage, x_neg_current, x_pos_current;

    while(1){
        READ_EPS_5V_CURRENT(&Five_Bus_Current);
 8000d1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fc5a 	bl	80015dc <READ_EPS_5V_CURRENT>
        READ_EPS_3V_CURRENT(&Three_Bus_Current);
 8000d28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fc23 	bl	8001578 <READ_EPS_3V_CURRENT>
        READ_EPS_BATTERY_VOLTAGE(&Battery_Voltage);
 8000d32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f994 	bl	8001064 <READ_EPS_BATTERY_VOLTAGE>
        READ_EPS_BATTERY_CURRENT(&Battery_Current);
 8000d3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f9c1 	bl	80010c8 <READ_EPS_BATTERY_CURRENT>
        READ_EPS_BCR_VOLTAGE(&BCR_Voltage);
 8000d46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f9ee 	bl	800112c <READ_EPS_BCR_VOLTAGE>
        READ_EPS_BCR_CURRENT(&BCR_Current);
 8000d50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fa1b 	bl	8001190 <READ_EPS_BCR_CURRENT>

        READ_EPS_SOLAR_X_VOLTAGE(&x_voltage);
 8000d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fa48 	bl	80011f4 <READ_EPS_SOLAR_X_VOLTAGE>
        READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current);
 8000d64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fa75 	bl	8001258 <READ_EPS_SOLAR_X_NEG_CURRENT>
        READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current);
 8000d6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 faa2 	bl	80012bc <READ_EPS_SOLAR_X_POS_CURRENT>

        debug_printf("%f %f %f %f %f %f %f %f %f\r\n", Five_Bus_Current, Three_Bus_Current, Battery_Voltage, Battery_Current,
 8000d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fbf4 	bl	8000568 <__aeabi_f2d>
 8000d80:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8000d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fbee 	bl	8000568 <__aeabi_f2d>
 8000d8c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fbe8 	bl	8000568 <__aeabi_f2d>
 8000d98:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8000d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fbe2 	bl	8000568 <__aeabi_f2d>
 8000da4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fbdc 	bl	8000568 <__aeabi_f2d>
 8000db0:	e9c7 0100 	strd	r0, r1, [r7]
 8000db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fbd6 	bl	8000568 <__aeabi_f2d>
 8000dbc:	4682      	mov	sl, r0
 8000dbe:	468b      	mov	fp, r1
 8000dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fbd0 	bl	8000568 <__aeabi_f2d>
 8000dc8:	4680      	mov	r8, r0
 8000dca:	4689      	mov	r9, r1
 8000dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fbca 	bl	8000568 <__aeabi_f2d>
 8000dd4:	4604      	mov	r4, r0
 8000dd6:	460d      	mov	r5, r1
 8000dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fbc4 	bl	8000568 <__aeabi_f2d>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000de8:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8000dec:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8000df0:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8000df4:	ed97 7b00 	vldr	d7, [r7]
 8000df8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000dfc:	ed97 7b02 	vldr	d7, [r7, #8]
 8000e00:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000e04:	ed97 7b04 	vldr	d7, [r7, #16]
 8000e08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000e0c:	ed97 7b06 	vldr	d7, [r7, #24]
 8000e10:	ed8d 7b00 	vstr	d7, [sp]
 8000e14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <BatteryCapacity_Task+0x114>)
 8000e1a:	f001 fee5 	bl	8002be8 <debug_printf>
                BCR_Voltage, BCR_Current, x_voltage, x_neg_current, x_pos_current);
        osDelay(1000); // Delay for 1 second
 8000e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e22:	f008 fc94 	bl	800974e <osDelay>
        READ_EPS_5V_CURRENT(&Five_Bus_Current);
 8000e26:	e77a      	b.n	8000d1e <BatteryCapacity_Task+0xa>
 8000e28:	0801093c 	.word	0x0801093c

08000e2c <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = packet[1];
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	733b      	strb	r3, [r7, #12]
    cySatPacket.Command = packet[2];
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	789b      	ldrb	r3, [r3, #2]
 8000e40:	737b      	strb	r3, [r7, #13]
    cySatPacket.Data_Length = packet[3];
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	73bb      	strb	r3, [r7, #14]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * cySatPacket.Data_Length);
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f00b fab4 	bl	800c3b8 <malloc>
 8000e50:	4603      	mov	r3, r0
 8000e52:	613b      	str	r3, [r7, #16]
    memcpy(cySatPacket.Data, packet+4, cySatPacket.Data_Length);
 8000e54:	6938      	ldr	r0, [r7, #16]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	7bba      	ldrb	r2, [r7, #14]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f00b fabb 	bl	800c3d8 <memcpy>
    cySatPacket.Checksum = packet[cySatPacket.Data_Length+4];
 8000e62:	7bbb      	ldrb	r3, [r7, #14]
 8000e64:	3304      	adds	r3, #4
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	753b      	strb	r3, [r7, #20]
    return cySatPacket;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	461c      	mov	r4, r3
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}
	...

08000e88 <sendCySatPacket>:
 * @brief Takes in a packet and sends it to the Ground Station via UART serial connection
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
HAL_StatusTypeDef sendCySatPacket(CySat_Packet_t packet){
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e94:	466b      	mov	r3, sp
 8000e96:	461d      	mov	r5, r3
    uint8_t message[packet.Data_Length + 5];
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	1d5c      	adds	r4, r3, #5
 8000e9c:	1e63      	subs	r3, r4, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	4623      	mov	r3, r4
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f04f 0100 	mov.w	r1, #0
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	00cb      	lsls	r3, r1, #3
 8000eb2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000eb6:	00c2      	lsls	r2, r0, #3
 8000eb8:	4623      	mov	r3, r4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f04f 0100 	mov.w	r1, #0
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	00cb      	lsls	r3, r1, #3
 8000eca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ece:	00c2      	lsls	r2, r0, #3
 8000ed0:	4623      	mov	r3, r4
 8000ed2:	3307      	adds	r3, #7
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	ebad 0d03 	sub.w	sp, sp, r3
 8000edc:	466b      	mov	r3, sp
 8000ede:	3300      	adds	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]

    //build byte array
    message[0] = 0xFF; //start byte
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	22ff      	movs	r2, #255	; 0xff
 8000ee6:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 8000ee8:	793a      	ldrb	r2, [r7, #4]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	705a      	strb	r2, [r3, #1]
    message[2] = packet.Command;
 8000eee:	797a      	ldrb	r2, [r7, #5]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	709a      	strb	r2, [r3, #2]
    message[3] = packet.Data_Length;
 8000ef4:	79ba      	ldrb	r2, [r7, #6]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	70da      	strb	r2, [r3, #3]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	e00a      	b.n	8000f16 <sendCySatPacket+0x8e>
        message[i + 4] = packet.Data[i];
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	441a      	add	r2, r3
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	7811      	ldrb	r1, [r2, #0]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < packet.Data_Length; i++){
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	3301      	adds	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	dbef      	blt.n	8000f00 <sendCySatPacket+0x78>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	3304      	adds	r3, #4
 8000f24:	7b39      	ldrb	r1, [r7, #12]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	77fb      	strb	r3, [r7, #31]
    if(packet.Subsystem_Type == OBC_SUBSYSTEM_TYPE){
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	d10c      	bne.n	8000f4e <sendCySatPacket+0xc6>
        status = HAL_UART_Transmit(&huart1, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 8000f34:	6939      	ldr	r1, [r7, #16]
 8000f36:	79bb      	ldrb	r3, [r7, #6]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	3305      	adds	r3, #5
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <sendCySatPacket+0xf0>)
 8000f44:	f006 f863 	bl	800700e <HAL_UART_Transmit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	77fb      	strb	r3, [r7, #31]
 8000f4c:	e00e      	b.n	8000f6c <sendCySatPacket+0xe4>
    }
    else if(packet.Subsystem_Type == PAYLOAD_SUBSYSTEM_TYPE){
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	2b28      	cmp	r3, #40	; 0x28
 8000f52:	d10b      	bne.n	8000f6c <sendCySatPacket+0xe4>
        status = HAL_UART_Transmit(&huart6, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3305      	adds	r3, #5
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <sendCySatPacket+0xf4>)
 8000f64:	f006 f853 	bl	800700e <HAL_UART_Transmit>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	77fb      	strb	r3, [r7, #31]
    }
    return status;
 8000f6c:	7ffb      	ldrb	r3, [r7, #31]
 8000f6e:	46ad      	mov	sp, r5
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bdb0      	pop	{r4, r5, r7, pc}
 8000f78:	20007f14 	.word	0x20007f14
 8000f7c:	20008070 	.word	0x20008070

08000f80 <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 8000f90:	793b      	ldrb	r3, [r7, #4]
 8000f92:	461a      	mov	r2, r3
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	4413      	add	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 8000f9a:	797b      	ldrb	r3, [r7, #5]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	4413      	add	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e00a      	b.n	8000fca <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	dbef      	blt.n	8000fb4 <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 8000fea:	b480      	push	{r7}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 8000ffa:	793b      	ldrb	r3, [r7, #4]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4413      	add	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 8001004:	797b      	ldrb	r3, [r7, #5]
 8001006:	461a      	mov	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4413      	add	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	461a      	mov	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4413      	add	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4413      	add	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	461a      	mov	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4293      	cmp	r3, r2
 800103c:	dbef      	blt.n	800101e <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 800103e:	7b3b      	ldrb	r3, [r7, #12]
 8001040:	461a      	mov	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4413      	add	r3, r2
 8001046:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2bff      	cmp	r3, #255	; 0xff
 800104e:	d101      	bne.n	8001054 <validateCySatChecksum+0x6a>
        return 1;
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 8001054:	2300      	movs	r3, #0
    }
}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <READ_EPS_BATTERY_VOLTAGE>:
/**
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(float* volt_ptr){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800106c:	2301      	movs	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 1; //battery voltage command
 8001070:	2301      	movs	r3, #1
 8001072:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001074:	f107 0208 	add.w	r2, r7, #8
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fe2f 	bl	8001ce0 <EPS_READ>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <READ_EPS_BATTERY_VOLTAGE+0x2c>
        return status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	e014      	b.n	80010ba <READ_EPS_BATTERY_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001090:	7a3b      	ldrb	r3, [r7, #8]
 8001092:	b29b      	uxth	r3, r3
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b29a      	uxth	r2, r3
 8001098:	7a7b      	ldrb	r3, [r7, #9]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4413      	add	r3, r2
 800109e:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010c4 <READ_EPS_BATTERY_VOLTAGE+0x60>
 80010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58 V
    return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	3b1951eb 	.word	0x3b1951eb

080010c8 <READ_EPS_BATTERY_CURRENT>:
/**
  * @brief Reads the current level of the EPS battery bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_CURRENT(float* curr_ptr){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 2; //battery current command
 80010d4:	2302      	movs	r3, #2
 80010d6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fdfd 	bl	8001ce0 <EPS_READ>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <READ_EPS_BATTERY_CURRENT+0x2c>
        return status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	e014      	b.n	800111e <READ_EPS_BATTERY_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80010f4:	7a3b      	ldrb	r3, [r7, #8]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	7a7b      	ldrb	r3, [r7, #9]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4413      	add	r3, r2
 8001102:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0030517578f * (float) raw_value; //multiply by the conversion coeff
 8001104:	89bb      	ldrh	r3, [r7, #12]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001128 <READ_EPS_BATTERY_CURRENT+0x60>
 8001112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0030517578f * 4095 = 12.497 A
    return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	3b480000 	.word	0x3b480000

0800112c <READ_EPS_BCR_VOLTAGE>:
/**
  * @brief Reads the current level of the EPS BCR bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BCR_VOLTAGE(float* curr_ptr){
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001134:	2301      	movs	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 3; //battery current command
 8001138:	2303      	movs	r3, #3
 800113a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800113c:	f107 0208 	add.w	r2, r7, #8
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fdcb 	bl	8001ce0 <EPS_READ>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <READ_EPS_BCR_VOLTAGE+0x2c>
        return status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	e014      	b.n	8001182 <READ_EPS_BCR_VOLTAGE+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001158:	7a3b      	ldrb	r3, [r7, #8]
 800115a:	b29b      	uxth	r3, r3
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b29a      	uxth	r2, r3
 8001160:	7a7b      	ldrb	r3, [r7, #9]
 8001162:	b29b      	uxth	r3, r3
 8001164:	4413      	add	r3, r2
 8001166:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0023394775f * (float) raw_value; //multiply by the conversion coeff
 8001168:	89bb      	ldrh	r3, [r7, #12]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001172:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800118c <READ_EPS_BCR_VOLTAGE+0x60>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775f * 4095 = 9.58 V
    return status;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	3b1951eb 	.word	0x3b1951eb

08001190 <READ_EPS_BCR_CURRENT>:
/**
  * @brief Reads the current level of the EPS BCR bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BCR_CURRENT(float* curr_ptr){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 4; //battery current command
 800119c:	2304      	movs	r3, #4
 800119e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80011a0:	f107 0208 	add.w	r2, r7, #8
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fd99 	bl	8001ce0 <EPS_READ>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <READ_EPS_BCR_CURRENT+0x2c>
        return status;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	e014      	b.n	80011e6 <READ_EPS_BCR_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80011bc:	7a3b      	ldrb	r3, [r7, #8]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	7a7b      	ldrb	r3, [r7, #9]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4413      	add	r3, r2
 80011ca:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0015258789f * (float) raw_value; //multiply by the conversion coeff
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011f0 <READ_EPS_BCR_CURRENT+0x60>
 80011da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0015258789f * 4095 = 6.25 A
    return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	3ac80000 	.word	0x3ac80000

080011f4 <READ_EPS_SOLAR_X_VOLTAGE>:
/**
  * @brief Reads the voltage of the X-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_VOLTAGE(float* volt_ptr){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 5; //solar panel x-axis voltage command
 8001200:	2305      	movs	r3, #5
 8001202:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001204:	f107 0208 	add.w	r2, r7, #8
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fd67 	bl	8001ce0 <EPS_READ>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <READ_EPS_SOLAR_X_VOLTAGE+0x2c>
        return status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	e014      	b.n	800124a <READ_EPS_SOLAR_X_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001220:	7a3b      	ldrb	r3, [r7, #8]
 8001222:	b29b      	uxth	r3, r3
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b29a      	uxth	r2, r3
 8001228:	7a7b      	ldrb	r3, [r7, #9]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001230:	89bb      	ldrh	r3, [r7, #12]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001254 <READ_EPS_SOLAR_X_VOLTAGE+0x60>
 800123e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	3b200000 	.word	0x3b200000

08001258 <READ_EPS_SOLAR_X_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the X- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_NEG_CURRENT(float* curr_ptr){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 6; //solar panel x- current command
 8001264:	2306      	movs	r3, #6
 8001266:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fd35 	bl	8001ce0 <EPS_READ>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <READ_EPS_SOLAR_X_NEG_CURRENT+0x2c>
        return status;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	e014      	b.n	80012ae <READ_EPS_SOLAR_X_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001284:	7a3b      	ldrb	r3, [r7, #8]
 8001286:	b29b      	uxth	r3, r3
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b29a      	uxth	r2, r3
 800128c:	7a7b      	ldrb	r3, [r7, #9]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4413      	add	r3, r2
 8001292:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001294:	89bb      	ldrh	r3, [r7, #12]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80012b8 <READ_EPS_SOLAR_X_NEG_CURRENT+0x60>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	3a200001 	.word	0x3a200001

080012bc <READ_EPS_SOLAR_X_POS_CURRENT>:
/**
  * @brief Reads the voltage of the X+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_POS_CURRENT(float* curr_ptr){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 7; //solar panel x+ current command
 80012c8:	2307      	movs	r3, #7
 80012ca:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80012cc:	f107 0208 	add.w	r2, r7, #8
 80012d0:	7bbb      	ldrb	r3, [r7, #14]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fd03 	bl	8001ce0 <EPS_READ>
 80012da:	4603      	mov	r3, r0
 80012dc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <READ_EPS_SOLAR_X_POS_CURRENT+0x2c>
        return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	e014      	b.n	8001312 <READ_EPS_SOLAR_X_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80012e8:	7a3b      	ldrb	r3, [r7, #8]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	7a7b      	ldrb	r3, [r7, #9]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80012f8:	89bb      	ldrh	r3, [r7, #12]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001302:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800131c <READ_EPS_SOLAR_X_POS_CURRENT+0x60>
 8001306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	3a200001 	.word	0x3a200001

08001320 <READ_EPS_SOLAR_Y_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_VOLTAGE(float* volt_ptr){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 8; //solar panel y-axis voltage command
 800132c:	2308      	movs	r3, #8
 800132e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001330:	f107 0208 	add.w	r2, r7, #8
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fcd1 	bl	8001ce0 <EPS_READ>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <READ_EPS_SOLAR_Y_VOLTAGE+0x2c>
        return status;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	e014      	b.n	8001376 <READ_EPS_SOLAR_Y_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800134c:	7a3b      	ldrb	r3, [r7, #8]
 800134e:	b29b      	uxth	r3, r3
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b29a      	uxth	r2, r3
 8001354:	7a7b      	ldrb	r3, [r7, #9]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4413      	add	r3, r2
 800135a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 800135c:	89bb      	ldrh	r3, [r7, #12]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001366:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001380 <READ_EPS_SOLAR_Y_VOLTAGE+0x60>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	3b200000 	.word	0x3b200000

08001384 <READ_EPS_SOLAR_Y_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Y- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_NEG_CURRENT(float* curr_ptr){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 9; //solar panel y- current command
 8001390:	2309      	movs	r3, #9
 8001392:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fc9f 	bl	8001ce0 <EPS_READ>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x2c>
        return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	e014      	b.n	80013da <READ_EPS_SOLAR_Y_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80013b0:	7a3b      	ldrb	r3, [r7, #8]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	7a7b      	ldrb	r3, [r7, #9]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4413      	add	r3, r2
 80013be:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80013c0:	89bb      	ldrh	r3, [r7, #12]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013e4 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x60>
 80013ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	3a200001 	.word	0x3a200001

080013e8 <READ_EPS_SOLAR_Y_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Y+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_POS_CURRENT(float* curr_ptr){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 10; //solar panel y+ current command
 80013f4:	230a      	movs	r3, #10
 80013f6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80013f8:	f107 0208 	add.w	r2, r7, #8
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fc6d 	bl	8001ce0 <EPS_READ>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <READ_EPS_SOLAR_Y_POS_CURRENT+0x2c>
        return status;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	e014      	b.n	800143e <READ_EPS_SOLAR_Y_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001414:	7a3b      	ldrb	r3, [r7, #8]
 8001416:	b29b      	uxth	r3, r3
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b29a      	uxth	r2, r3
 800141c:	7a7b      	ldrb	r3, [r7, #9]
 800141e:	b29b      	uxth	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001424:	89bb      	ldrh	r3, [r7, #12]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800142e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001448 <READ_EPS_SOLAR_Y_POS_CURRENT+0x60>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	3a200001 	.word	0x3a200001

0800144c <READ_EPS_SOLAR_Z_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_VOLTAGE(float* volt_ptr){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 11; //solar panel z-axis voltage command
 8001458:	230b      	movs	r3, #11
 800145a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800145c:	f107 0208 	add.w	r2, r7, #8
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fc3b 	bl	8001ce0 <EPS_READ>
 800146a:	4603      	mov	r3, r0
 800146c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <READ_EPS_SOLAR_Z_VOLTAGE+0x2c>
        return status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	e014      	b.n	80014a2 <READ_EPS_SOLAR_Z_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001478:	7a3b      	ldrb	r3, [r7, #8]
 800147a:	b29b      	uxth	r3, r3
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b29a      	uxth	r2, r3
 8001480:	7a7b      	ldrb	r3, [r7, #9]
 8001482:	b29b      	uxth	r3, r3
 8001484:	4413      	add	r3, r2
 8001486:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001492:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014ac <READ_EPS_SOLAR_Z_VOLTAGE+0x60>
 8001496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	3b200000 	.word	0x3b200000

080014b0 <READ_EPS_SOLAR_Z_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Z- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_NEG_CURRENT(float* curr_ptr){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 12; //solar panel z- current command
 80014bc:	230c      	movs	r3, #12
 80014be:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80014c0:	f107 0208 	add.w	r2, r7, #8
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fc09 	bl	8001ce0 <EPS_READ>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <READ_EPS_SOLAR_Z_NEG_CURRENT+0x2c>
        return status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	e014      	b.n	8001506 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80014dc:	7a3b      	ldrb	r3, [r7, #8]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	7a7b      	ldrb	r3, [r7, #9]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80014ec:	89bb      	ldrh	r3, [r7, #12]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001510 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x60>
 80014fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	3a200001 	.word	0x3a200001

08001514 <READ_EPS_SOLAR_Z_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Z+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_POS_CURRENT(float* curr_ptr){
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 13; //solar panel z+ current command
 8001520:	230d      	movs	r3, #13
 8001522:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001524:	f107 0208 	add.w	r2, r7, #8
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fbd7 	bl	8001ce0 <EPS_READ>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <READ_EPS_SOLAR_Z_POS_CURRENT+0x2c>
        return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	e014      	b.n	800156a <READ_EPS_SOLAR_Z_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001540:	7a3b      	ldrb	r3, [r7, #8]
 8001542:	b29b      	uxth	r3, r3
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b29a      	uxth	r2, r3
 8001548:	7a7b      	ldrb	r3, [r7, #9]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001550:	89bb      	ldrh	r3, [r7, #12]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001574 <READ_EPS_SOLAR_Z_POS_CURRENT+0x60>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	3a200001 	.word	0x3a200001

08001578 <READ_EPS_3V_CURRENT>:
/**
  * @brief Reads the current of the EPS 3.3v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_3V_CURRENT(float* curr_ptr){
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 14; //3.3v bus current command
 8001584:	230e      	movs	r3, #14
 8001586:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001588:	f107 0208 	add.w	r2, r7, #8
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fba5 	bl	8001ce0 <EPS_READ>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <READ_EPS_3V_CURRENT+0x2c>
        return status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	e014      	b.n	80015ce <READ_EPS_3V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80015a4:	7a3b      	ldrb	r3, [r7, #8]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	7a7b      	ldrb	r3, [r7, #9]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 80015b4:	89bb      	ldrh	r3, [r7, #12]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015be:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80015d8 <READ_EPS_3V_CURRENT+0x60>
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	3b055555 	.word	0x3b055555

080015dc <READ_EPS_5V_CURRENT>:
/**
  * @brief Reads the current of the EPS 5v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_5V_CURRENT(float* curr_ptr){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 15; //5v bus current command
 80015e8:	230f      	movs	r3, #15
 80015ea:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80015ec:	f107 0208 	add.w	r2, r7, #8
 80015f0:	7bbb      	ldrb	r3, [r7, #14]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fb73 	bl	8001ce0 <EPS_READ>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <READ_EPS_5V_CURRENT+0x2c>
        return status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	e014      	b.n	8001632 <READ_EPS_5V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001608:	7a3b      	ldrb	r3, [r7, #8]
 800160a:	b29b      	uxth	r3, r3
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b29a      	uxth	r2, r3
 8001610:	7a7b      	ldrb	r3, [r7, #9]
 8001612:	b29b      	uxth	r3, r3
 8001614:	4413      	add	r3, r2
 8001616:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 8001618:	89bb      	ldrh	r3, [r7, #12]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001622:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800163c <READ_EPS_5V_CURRENT+0x60>
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	3b055555 	.word	0x3b055555

08001640 <READ_EPS_MCU_TEMP>:
/**
  * @brief Reads the temperature of the EPS microcontroller in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_MCU_TEMP(float* temp_ptr){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 18; //MCU temperature command
 800164c:	2312      	movs	r3, #18
 800164e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fb41 	bl	8001ce0 <EPS_READ>
 800165e:	4603      	mov	r3, r0
 8001660:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <READ_EPS_MCU_TEMP+0x2c>
        return status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	e01c      	b.n	80016a6 <READ_EPS_MCU_TEMP+0x66>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800166c:	7a3b      	ldrb	r3, [r7, #8]
 800166e:	b29b      	uxth	r3, r3
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b29a      	uxth	r2, r3
 8001674:	7a7b      	ldrb	r3, [r7, #9]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = (((float) raw_value * 0.0006103516f) - 0.986f) / 0.00355f;
 800167c:	89bb      	ldrh	r3, [r7, #12]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001686:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80016b0 <READ_EPS_MCU_TEMP+0x70>
 800168a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80016b4 <READ_EPS_MCU_TEMP+0x74>
 8001692:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001696:	eddf 6a08 	vldr	s13, [pc, #32]	; 80016b8 <READ_EPS_MCU_TEMP+0x78>
 800169a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	3a200001 	.word	0x3a200001
 80016b4:	3f7c6a7f 	.word	0x3f7c6a7f
 80016b8:	3b68a71e 	.word	0x3b68a71e

080016bc <READ_EPS_BATT_1_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 1 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_1_TEMP(float* temp_ptr){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 19; //battery cell 1 temperature command
 80016c8:	2313      	movs	r3, #19
 80016ca:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80016cc:	f107 0208 	add.w	r2, r7, #8
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fb03 	bl	8001ce0 <EPS_READ>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <READ_EPS_BATT_1_TEMP+0x2c>
        return status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	e014      	b.n	8001712 <READ_EPS_BATT_1_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80016e8:	7a3b      	ldrb	r3, [r7, #8]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	7a7b      	ldrb	r3, [r7, #9]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80016f8:	89bb      	ldrh	r3, [r7, #12]
 80016fa:	ee07 3a90 	vmov	s15, r3
 80016fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001702:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800171c <READ_EPS_BATT_1_TEMP+0x60>
 8001706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	3b800000 	.word	0x3b800000

08001720 <READ_EPS_BATT_2_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 2 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_2_TEMP(float* temp_ptr){
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 20; //battery cell 2 temperature command
 800172c:	2314      	movs	r3, #20
 800172e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001730:	f107 0208 	add.w	r2, r7, #8
 8001734:	7bbb      	ldrb	r3, [r7, #14]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fad1 	bl	8001ce0 <EPS_READ>
 800173e:	4603      	mov	r3, r0
 8001740:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <READ_EPS_BATT_2_TEMP+0x2c>
        return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	e014      	b.n	8001776 <READ_EPS_BATT_2_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800174c:	7a3b      	ldrb	r3, [r7, #8]
 800174e:	b29b      	uxth	r3, r3
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	7a7b      	ldrb	r3, [r7, #9]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 800175c:	89bb      	ldrh	r3, [r7, #12]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001766:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001780 <READ_EPS_BATT_2_TEMP+0x60>
 800176a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	3b800000 	.word	0x3b800000

08001784 <READ_EPS_BATT_3_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 3 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_3_TEMP(float* temp_ptr){
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 21; //battery cell 3 temperature command
 8001790:	2315      	movs	r3, #21
 8001792:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001794:	f107 0208 	add.w	r2, r7, #8
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f000 fa9f 	bl	8001ce0 <EPS_READ>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <READ_EPS_BATT_3_TEMP+0x2c>
        return status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	e014      	b.n	80017da <READ_EPS_BATT_3_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80017b0:	7a3b      	ldrb	r3, [r7, #8]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	7a7b      	ldrb	r3, [r7, #9]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4413      	add	r3, r2
 80017be:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80017c0:	89bb      	ldrh	r3, [r7, #12]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017e4 <READ_EPS_BATT_3_TEMP+0x60>
 80017ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	3b800000 	.word	0x3b800000

080017e8 <READ_EPS_BATT_4_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 4 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_4_TEMP(float* temp_ptr){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 22; //battery cell 4 temperature command
 80017f4:	2316      	movs	r3, #22
 80017f6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80017f8:	f107 0208 	add.w	r2, r7, #8
 80017fc:	7bbb      	ldrb	r3, [r7, #14]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fa6d 	bl	8001ce0 <EPS_READ>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <READ_EPS_BATT_4_TEMP+0x2c>
        return status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	e014      	b.n	800183e <READ_EPS_BATT_4_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001814:	7a3b      	ldrb	r3, [r7, #8]
 8001816:	b29b      	uxth	r3, r3
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	b29a      	uxth	r2, r3
 800181c:	7a7b      	ldrb	r3, [r7, #9]
 800181e:	b29b      	uxth	r3, r3
 8001820:	4413      	add	r3, r2
 8001822:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001824:	89bb      	ldrh	r3, [r7, #12]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800182e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001848 <READ_EPS_BATT_4_TEMP+0x60>
 8001832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	3b800000 	.word	0x3b800000

0800184c <READ_EPS_INPUT_CONDITION>:
/**
  * @brief Reads raw return value of the Input Condition command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_INPUT_CONDITION(uint16_t *cond_ptr){
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 23; //input conditions command
 8001858:	2317      	movs	r3, #23
 800185a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800185c:	f107 020c 	add.w	r2, r7, #12
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fa3b 	bl	8001ce0 <EPS_READ>
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <READ_EPS_INPUT_CONDITION+0x2c>
        return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	e00a      	b.n	800188e <READ_EPS_INPUT_CONDITION+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001878:	7b3b      	ldrb	r3, [r7, #12]
 800187a:	b29b      	uxth	r3, r3
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b29a      	uxth	r2, r3
 8001880:	7b7b      	ldrb	r3, [r7, #13]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4413      	add	r3, r2
 8001886:	b29a      	uxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	801a      	strh	r2, [r3, #0]
    return status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <READ_EPS_OUTPUT_CONDITION1>:
/**
  * @brief Reads raw return value of the Output Condition 1 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION1(uint16_t *cond_ptr){
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800189e:	2301      	movs	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 80018a2:	2318      	movs	r3, #24
 80018a4:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80018a6:	f107 020c 	add.w	r2, r7, #12
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fa16 	bl	8001ce0 <EPS_READ>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <READ_EPS_OUTPUT_CONDITION1+0x2c>
        return status;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	e00a      	b.n	80018d8 <READ_EPS_OUTPUT_CONDITION1+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80018c2:	7b3b      	ldrb	r3, [r7, #12]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	7b7b      	ldrb	r3, [r7, #13]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	801a      	strh	r2, [r3, #0]
    return status;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <READ_EPS_OUTPUT_CONDITION2>:
/**
  * @brief Reads raw return value of the Output Condition 2 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION2(uint16_t *cond_ptr){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 80018ec:	2318      	movs	r3, #24
 80018ee:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80018f0:	f107 020c 	add.w	r2, r7, #12
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f9f1 	bl	8001ce0 <EPS_READ>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <READ_EPS_OUTPUT_CONDITION2+0x2c>
        return status;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	e00a      	b.n	8001922 <READ_EPS_OUTPUT_CONDITION2+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800190c:	7b3b      	ldrb	r3, [r7, #12]
 800190e:	b29b      	uxth	r3, r3
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b29a      	uxth	r2, r3
 8001914:	7b7b      	ldrb	r3, [r7, #13]
 8001916:	b29b      	uxth	r3, r3
 8001918:	4413      	add	r3, r2
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	801a      	strh	r2, [r3, #0]
    return status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <READ_EPS_POWER_ON_CYCLES>:
/**
  * @brief Reads the current count of EPS power cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_POWER_ON_CYCLES(uint16_t *count_ptr){
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 26; //power on cycles count command
 8001936:	231a      	movs	r3, #26
 8001938:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800193a:	f107 020c 	add.w	r2, r7, #12
 800193e:	7bbb      	ldrb	r3, [r7, #14]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f9cc 	bl	8001ce0 <EPS_READ>
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <READ_EPS_POWER_ON_CYCLES+0x2c>
        return status;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	e00a      	b.n	800196c <READ_EPS_POWER_ON_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001956:	7b3b      	ldrb	r3, [r7, #12]
 8001958:	b29b      	uxth	r3, r3
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b29a      	uxth	r2, r3
 800195e:	7b7b      	ldrb	r3, [r7, #13]
 8001960:	b29b      	uxth	r3, r3
 8001962:	4413      	add	r3, r2
 8001964:	b29a      	uxth	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	801a      	strh	r2, [r3, #0]
    return status;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <READ_EPS_UNDER_VOLT_COUNT>:
/**
  * @brief Reads the current count of EPS under-voltage occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_UNDER_VOLT_COUNT(uint16_t *count_ptr){
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 27; //under voltage count command
 8001980:	231b      	movs	r3, #27
 8001982:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001984:	f107 020c 	add.w	r2, r7, #12
 8001988:	7bbb      	ldrb	r3, [r7, #14]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f9a7 	bl	8001ce0 <EPS_READ>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <READ_EPS_UNDER_VOLT_COUNT+0x2c>
        return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	e00a      	b.n	80019b6 <READ_EPS_UNDER_VOLT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	7b7b      	ldrb	r3, [r7, #13]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	801a      	strh	r2, [r3, #0]
    return status;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <READ_EPS_SHORT_CIRCUIT_COUNT>:
/**
  * @brief Reads the current count of EPS short-circuit occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SHORT_CIRCUIT_COUNT(uint16_t *count_ptr){
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 28; //short circuit count command
 80019ca:	231c      	movs	r3, #28
 80019cc:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80019ce:	f107 020c 	add.w	r2, r7, #12
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f982 	bl	8001ce0 <EPS_READ>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <READ_EPS_SHORT_CIRCUIT_COUNT+0x2c>
        return status;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	e00a      	b.n	8001a00 <READ_EPS_SHORT_CIRCUIT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80019ea:	7b3b      	ldrb	r3, [r7, #12]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	7b7b      	ldrb	r3, [r7, #13]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	801a      	strh	r2, [r3, #0]
    return status;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <READ_EPS_OVER_TEMP_COUNT>:
/**
  * @brief Reads the current count of EPS over-temp occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OVER_TEMP_COUNT(uint16_t *count_ptr){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 29; //over temperature count command
 8001a14:	231d      	movs	r3, #29
 8001a16:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	7bbb      	ldrb	r3, [r7, #14]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 f95d 	bl	8001ce0 <EPS_READ>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <READ_EPS_OVER_TEMP_COUNT+0x2c>
        return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	e00a      	b.n	8001a4a <READ_EPS_OVER_TEMP_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a34:	7b3b      	ldrb	r3, [r7, #12]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	7b7b      	ldrb	r3, [r7, #13]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	801a      	strh	r2, [r3, #0]
    return status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <READ_EPS_CHARGE_CYCLES>:
/**
  * @brief Reads the current count of EPS battery charge cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_CHARGE_CYCLES(uint16_t *count_ptr){
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 48; //charging cycles count command
 8001a5e:	2330      	movs	r3, #48	; 0x30
 8001a60:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a62:	f107 020c 	add.w	r2, r7, #12
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f938 	bl	8001ce0 <EPS_READ>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <READ_EPS_CHARGE_CYCLES+0x2c>
        return status;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	e00a      	b.n	8001a94 <READ_EPS_CHARGE_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a7e:	7b3b      	ldrb	r3, [r7, #12]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	7b7b      	ldrb	r3, [r7, #13]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	801a      	strh	r2, [r3, #0]
    return status;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <READ_EPS_DEFAULTS1>:
/**
  * @brief Reads the default values of LUPs and fast charge modes and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS1(uint16_t *default_ptr){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 43; //output 1 default value command
 8001aa8:	232b      	movs	r3, #43	; 0x2b
 8001aaa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001aac:	f107 020c 	add.w	r2, r7, #12
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 f913 	bl	8001ce0 <EPS_READ>
 8001aba:	4603      	mov	r3, r0
 8001abc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <READ_EPS_DEFAULTS1+0x2c>
        return status;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	e00a      	b.n	8001ade <READ_EPS_DEFAULTS1+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001ac8:	7b3b      	ldrb	r3, [r7, #12]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	7b7b      	ldrb	r3, [r7, #13]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	801a      	strh	r2, [r3, #0]
    return status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <READ_EPS_DEFAULTS2>:
/**
  * @brief Reads the default values of OUT1-OUT6 and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS2(uint16_t *default_ptr){
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 44; //output 3 default value command
 8001af2:	232c      	movs	r3, #44	; 0x2c
 8001af4:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001af6:	f107 020c 	add.w	r2, r7, #12
 8001afa:	7bbb      	ldrb	r3, [r7, #14]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f8ee 	bl	8001ce0 <EPS_READ>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <READ_EPS_DEFAULTS2+0x2c>
        return status;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	e00a      	b.n	8001b28 <READ_EPS_DEFAULTS2+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001b12:	7b3b      	ldrb	r3, [r7, #12]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	7b7b      	ldrb	r3, [r7, #13]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	801a      	strh	r2, [r3, #0]
    return status;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <enable_EPS_Vbatt_Bus>:


/********************************************** WRITE FUNCTIONS **********************************************************************************/
HAL_StatusTypeDef enable_EPS_Vbatt_Bus(){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 1); //turn command 1 to the ON state
 8001b34:	2101      	movs	r1, #1
 8001b36:	2001      	movs	r0, #1
 8001b38:	f000 f90c 	bl	8001d54 <EPS_WRITE>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <disable_EPS_Vbatt_Bus>:

HAL_StatusTypeDef disable_EPS_Vbatt_Bus(){
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 0); //turn command 1 to the OFF state
 8001b46:	2100      	movs	r1, #0
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f000 f903 	bl	8001d54 <EPS_WRITE>
 8001b4e:	4603      	mov	r3, r0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <enable_EPS_5v_Bus>:

HAL_StatusTypeDef enable_EPS_5v_Bus(){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 1); //turn command 4 to the ON state
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2004      	movs	r0, #4
 8001b5c:	f000 f8fa 	bl	8001d54 <EPS_WRITE>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <disable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_5v_Bus(){
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 0); //turn command 4 to the OFF state
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2004      	movs	r0, #4
 8001b6e:	f000 f8f1 	bl	8001d54 <EPS_WRITE>
 8001b72:	4603      	mov	r3, r0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <enable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_LUP_5v(){
    return EPS_WRITE(5, 1); //turn command 6 to the OFF state
}

HAL_StatusTypeDef enable_EPS_Fast_Charge1(){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 1); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	2008      	movs	r0, #8
 8001b80:	f000 f8e8 	bl	8001d54 <EPS_WRITE>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <disable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_Fast_Charge1(){
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 0); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2008      	movs	r0, #8
 8001b92:	f000 f8df 	bl	8001d54 <EPS_WRITE>
 8001b96:	4603      	mov	r3, r0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <enable_EPS_Fast_Charge2>:

HAL_StatusTypeDef enable_EPS_Fast_Charge2(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 1); //turn command 9 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	2009      	movs	r0, #9
 8001ba4:	f000 f8d6 	bl	8001d54 <EPS_WRITE>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}

08001bae <disable_EPS_Fast_Charge2>:

HAL_StatusTypeDef disable_EPS_Fast_Charge2(){
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 0); //turn command 9 to the OFF state (HIGH = Fast?, LOW = Slow?)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2009      	movs	r0, #9
 8001bb6:	f000 f8cd 	bl	8001d54 <EPS_WRITE>
 8001bba:	4603      	mov	r3, r0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <enable_EPS_Output_1>:

HAL_StatusTypeDef enable_EPS_Output_1(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 1); //turn command 10 to the ON state
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	200a      	movs	r0, #10
 8001bc8:	f000 f8c4 	bl	8001d54 <EPS_WRITE>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <disable_EPS_Output_1>:

HAL_StatusTypeDef disable_EPS_Output_1(){
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 0); //turn command 10 to the OFF state
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	200a      	movs	r0, #10
 8001bda:	f000 f8bb 	bl	8001d54 <EPS_WRITE>
 8001bde:	4603      	mov	r3, r0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <enable_EPS_Output_2>:

HAL_StatusTypeDef enable_EPS_Output_2(){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 1); //turn command 11 to the ON state
 8001be8:	2101      	movs	r1, #1
 8001bea:	200b      	movs	r0, #11
 8001bec:	f000 f8b2 	bl	8001d54 <EPS_WRITE>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <disable_EPS_Output_2>:

HAL_StatusTypeDef disable_EPS_Output_2(){
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 0); //turn command 11 to the OFF state
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	200b      	movs	r0, #11
 8001bfe:	f000 f8a9 	bl	8001d54 <EPS_WRITE>
 8001c02:	4603      	mov	r3, r0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <enable_EPS_Output_3>:

HAL_StatusTypeDef enable_EPS_Output_3(){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 1); //turn command 12 to the ON state
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	200c      	movs	r0, #12
 8001c10:	f000 f8a0 	bl	8001d54 <EPS_WRITE>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <disable_EPS_Output_3>:

HAL_StatusTypeDef disable_EPS_Output_3(){
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 0); //turn command 12 to the OFF state
 8001c1e:	2100      	movs	r1, #0
 8001c20:	200c      	movs	r0, #12
 8001c22:	f000 f897 	bl	8001d54 <EPS_WRITE>
 8001c26:	4603      	mov	r3, r0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <enable_EPS_Output_5>:

HAL_StatusTypeDef enable_EPS_Output_5(){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 1); //turn command 14 to the ON state
 8001c30:	2101      	movs	r1, #1
 8001c32:	200e      	movs	r0, #14
 8001c34:	f000 f88e 	bl	8001d54 <EPS_WRITE>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <disable_EPS_Output_5>:

HAL_StatusTypeDef disable_EPS_Output_5(){
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 0); //turn command 14 to the OFF state
 8001c42:	2100      	movs	r1, #0
 8001c44:	200e      	movs	r0, #14
 8001c46:	f000 f885 	bl	8001d54 <EPS_WRITE>
 8001c4a:	4603      	mov	r3, r0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <enable_EPS_Output_6>:

HAL_StatusTypeDef enable_EPS_Output_6(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 1); //turn command 15 to the ON state
 8001c54:	2101      	movs	r1, #1
 8001c56:	200f      	movs	r0, #15
 8001c58:	f000 f87c 	bl	8001d54 <EPS_WRITE>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <disable_EPS_Output_6>:

HAL_StatusTypeDef disable_EPS_Output_6(){
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 0); //turn command 15 to the OFF state
 8001c66:	2100      	movs	r1, #0
 8001c68:	200f      	movs	r0, #15
 8001c6a:	f000 f873 	bl	8001d54 <EPS_WRITE>
 8001c6e:	4603      	mov	r3, r0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <enable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_1(){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 1); //turn command 16 to the ON state
 8001c78:	2101      	movs	r1, #1
 8001c7a:	2010      	movs	r0, #16
 8001c7c:	f000 f86a 	bl	8001d54 <EPS_WRITE>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <disable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_1(){
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 0); //turn command 16 to the OFF state
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2010      	movs	r0, #16
 8001c8e:	f000 f861 	bl	8001d54 <EPS_WRITE>
 8001c92:	4603      	mov	r3, r0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <enable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_2(){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 1); //turn command 17 to the ON state
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2011      	movs	r0, #17
 8001ca0:	f000 f858 	bl	8001d54 <EPS_WRITE>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <disable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_2(){
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 0); //turn command 17 to the OFF state
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2011      	movs	r0, #17
 8001cb2:	f000 f84f 	bl	8001d54 <EPS_WRITE>
 8001cb6:	4603      	mov	r3, r0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <enable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_3(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 1); //turn command 18 to the ON state
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	2012      	movs	r0, #18
 8001cc4:	f000 f846 	bl	8001d54 <EPS_WRITE>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <disable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_3(){
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 0); //turn command 18 to the OFF state
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2012      	movs	r0, #18
 8001cd6:	f000 f83d 	bl	8001d54 <EPS_WRITE>
 8001cda:	4603      	mov	r3, r0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <EPS_READ>:
  * @brief Sends a write command to the EPS module over a given I2C instance and reads back a response
  * @param command : the command to be used on the transceiver
  * @param data_ptr : A pointer to allow information from the health check to be viewed.
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_READ(uint8_t command, uint8_t* data_ptr){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
        HAL_StatusTypeDef status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 8001cf0:	1dfa      	adds	r2, r7, #7
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	2130      	movs	r1, #48	; 0x30
 8001cfc:	4813      	ldr	r0, [pc, #76]	; (8001d4c <EPS_READ+0x6c>)
 8001cfe:	f001 fe57 	bl	80039b0 <HAL_I2C_Master_Transmit>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK){
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <EPS_READ+0x3a>
            NUM_I2C_ERRORS++;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <EPS_READ+0x70>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <EPS_READ+0x70>)
 8001d14:	6013      	str	r3, [r2, #0]
            return status;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	e013      	b.n	8001d42 <EPS_READ+0x62>
        }
        status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2302      	movs	r3, #2
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	2130      	movs	r1, #48	; 0x30
 8001d26:	4809      	ldr	r0, [pc, #36]	; (8001d4c <EPS_READ+0x6c>)
 8001d28:	f001 ff50 	bl	8003bcc <HAL_I2C_Master_Receive>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]

        if(status != HAL_OK)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <EPS_READ+0x60>
            NUM_I2C_ERRORS++;
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <EPS_READ+0x70>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <EPS_READ+0x70>)
 8001d3e:	6013      	str	r3, [r2, #0]
        return status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20007d2c 	.word	0x20007d2c
 8001d50:	20000208 	.word	0x20000208

08001d54 <EPS_WRITE>:
/**
  * @brief Sends a write command to the EPS module over a given I2C instance
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(uint8_t command, uint8_t state){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
        HAL_StatusTypeDef status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
        uint8_t data[2];
        data[0] = command;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	733b      	strb	r3, [r7, #12]
        data[1] = state;
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	737b      	strb	r3, [r7, #13]
        status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT);
 8001d70:	f107 020c 	add.w	r2, r7, #12
 8001d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	2130      	movs	r1, #48	; 0x30
 8001d7e:	4809      	ldr	r0, [pc, #36]	; (8001da4 <EPS_WRITE+0x50>)
 8001d80:	f001 fe16 	bl	80039b0 <HAL_I2C_Master_Transmit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]

        if(status != HAL_OK)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <EPS_WRITE+0x44>
            NUM_I2C_ERRORS++;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <EPS_WRITE+0x54>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <EPS_WRITE+0x54>)
 8001d96:	6013      	str	r3, [r2, #0]
        return status;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20007d2c 	.word	0x20007d2c
 8001da8:	20000208 	.word	0x20000208

08001dac <sendErrorPacket>:
/**
 * @brief This function sends an error packet to the Ground Station
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendErrorPacket(){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 8001db2:	230a      	movs	r3, #10
 8001db4:	713b      	strb	r3, [r7, #4]
    cySatPacket.Command = 0xFF;
 8001db6:	23ff      	movs	r3, #255	; 0xff
 8001db8:	717b      	strb	r3, [r7, #5]
    cySatPacket.Data_Length = 0x02;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	71bb      	strb	r3, [r7, #6]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f00a fafa 	bl	800c3b8 <malloc>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60bb      	str	r3, [r7, #8]
    cySatPacket.Data[0] = 0xFF;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	22ff      	movs	r2, #255	; 0xff
 8001dcc:	701a      	strb	r2, [r3, #0]
    cySatPacket.Data[1] = 0xFF;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	22ff      	movs	r2, #255	; 0xff
 8001dd4:	701a      	strb	r2, [r3, #0]
    cySatPacket.Checksum = generateCySatChecksum(cySatPacket);
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ddc:	f7ff f8d0 	bl	8000f80 <generateCySatChecksum>
 8001de0:	4603      	mov	r3, r0
 8001de2:	733b      	strb	r3, [r7, #12]
    return sendCySatPacket(cySatPacket);
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dea:	f7ff f84d 	bl	8000e88 <sendCySatPacket>
 8001dee:	4603      	mov	r3, r0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b0a9      	sub	sp, #164	; 0xa4
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    HAL_StatusTypeDef status;
    CySat_Packet_t outgoingPacket;
    switch(packet.Subsystem_Type){
 8001e04:	793b      	ldrb	r3, [r7, #4]
 8001e06:	2b28      	cmp	r3, #40	; 0x28
 8001e08:	dc48      	bgt.n	8001e9c <handleCySatPacket+0xa4>
 8001e0a:	2b0a      	cmp	r3, #10
 8001e0c:	f2c0 86df 	blt.w	8002bce <handleCySatPacket+0xdd6>
 8001e10:	3b0a      	subs	r3, #10
 8001e12:	2b1e      	cmp	r3, #30
 8001e14:	f200 86db 	bhi.w	8002bce <handleCySatPacket+0xdd6>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <handleCySatPacket+0x28>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08002bd5 	.word	0x08002bd5
 8001e24:	08002bcf 	.word	0x08002bcf
 8001e28:	08002bcf 	.word	0x08002bcf
 8001e2c:	08002bcf 	.word	0x08002bcf
 8001e30:	08002bcf 	.word	0x08002bcf
 8001e34:	08002bcf 	.word	0x08002bcf
 8001e38:	08002bcf 	.word	0x08002bcf
 8001e3c:	08002bcf 	.word	0x08002bcf
 8001e40:	08002bcf 	.word	0x08002bcf
 8001e44:	08002bcf 	.word	0x08002bcf
 8001e48:	08002bd5 	.word	0x08002bd5
 8001e4c:	08002bcf 	.word	0x08002bcf
 8001e50:	08002bcf 	.word	0x08002bcf
 8001e54:	08002bcf 	.word	0x08002bcf
 8001e58:	08002bcf 	.word	0x08002bcf
 8001e5c:	08002bcf 	.word	0x08002bcf
 8001e60:	08002bcf 	.word	0x08002bcf
 8001e64:	08002bcf 	.word	0x08002bcf
 8001e68:	08002bcf 	.word	0x08002bcf
 8001e6c:	08002bcf 	.word	0x08002bcf
 8001e70:	08001ea7 	.word	0x08001ea7
 8001e74:	08002bcf 	.word	0x08002bcf
 8001e78:	08002bcf 	.word	0x08002bcf
 8001e7c:	08002bcf 	.word	0x08002bcf
 8001e80:	08002bcf 	.word	0x08002bcf
 8001e84:	08002bcf 	.word	0x08002bcf
 8001e88:	08002bcf 	.word	0x08002bcf
 8001e8c:	08002bcf 	.word	0x08002bcf
 8001e90:	08002bcf 	.word	0x08002bcf
 8001e94:	08002bcf 	.word	0x08002bcf
 8001e98:	08002bd5 	.word	0x08002bd5
 8001e9c:	2b5a      	cmp	r3, #90	; 0x5a
 8001e9e:	f000 869b 	beq.w	8002bd8 <handleCySatPacket+0xde0>
 8001ea2:	f000 be94 	b.w	8002bce <handleCySatPacket+0xdd6>
        case ADCS_SUBSYSTEM_TYPE: //ADCS

            break;

        case EPS_SUBSYSTEM_TYPE: //EPS
            switch(packet.Command){
 8001ea6:	797b      	ldrb	r3, [r7, #5]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	f200 8696 	bhi.w	8002bdc <handleCySatPacket+0xde4>
 8001eb0:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <handleCySatPacket+0xc0>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001efd 	.word	0x08001efd
 8001ebc:	08002bdd 	.word	0x08002bdd
 8001ec0:	08001fd7 	.word	0x08001fd7
 8001ec4:	08002bdd 	.word	0x08002bdd
 8001ec8:	0800210f 	.word	0x0800210f
 8001ecc:	08002bdd 	.word	0x08002bdd
 8001ed0:	08002247 	.word	0x08002247
 8001ed4:	08002bdd 	.word	0x08002bdd
 8001ed8:	0800237f 	.word	0x0800237f
 8001edc:	08002bdd 	.word	0x08002bdd
 8001ee0:	08002467 	.word	0x08002467
 8001ee4:	08002bdd 	.word	0x08002bdd
 8001ee8:	0800262f 	.word	0x0800262f
 8001eec:	08002bdd 	.word	0x08002bdd
 8001ef0:	08002751 	.word	0x08002751
 8001ef4:	08002bdd 	.word	0x08002bdd
 8001ef8:	080028ab 	.word	0x080028ab
                case 0x01: { //Battery Pack Voltage/Current Request
                    float voltage, current;
                    status = READ_EPS_BATTERY_VOLTAGE(&voltage); //read the voltage from the EPS Battery Pack
 8001efc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff f8af 	bl	8001064 <READ_EPS_BATTERY_VOLTAGE>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001f0c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <handleCySatPacket+0x124>
                        return -1;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f18:	f000 be62 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATTERY_CURRENT(&current); //read the current from the EPS Battery Pack
 8001f1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f8d1 	bl	80010c8 <READ_EPS_BATTERY_CURRENT>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001f2c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <handleCySatPacket+0x144>
                        return -1;
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f38:	f000 be52 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(voltage);
 8001f3c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001f40:	eeb0 0a67 	vmov.f32	s0, s15
 8001f44:	f000 fea2 	bl	8002c8c <FloatToUnsigned16bits>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
                    uint16_t data2 = FloatToUnsigned16bits(current);
 8001f4e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f000 fe99 	bl	8002c8c <FloatToUnsigned16bits>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8001f60:	231e      	movs	r3, #30
 8001f62:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x00; //Battery Pack Voltage/Current Response
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8001f72:	2004      	movs	r0, #4
 8001f74:	f00a fa20 	bl	800c3b8 <malloc>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8001f7c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8001f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8001f96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8001fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa8:	3303      	adds	r3, #3
 8001faa:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001fb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fba:	f7fe ffe1 	bl	8000f80 <generateCySatChecksum>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    return sendCySatPacket(outgoingPacket); //send the response
 8001fc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fcc:	f7fe ff5c 	bl	8000e88 <sendCySatPacket>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f000 be05 	b.w	8002be0 <handleCySatPacket+0xde8>
                }
                case 0x03: { //Solar Panel X Status Request
                    float x_voltage, x_neg_current, x_pos_current;
                    status = READ_EPS_SOLAR_X_VOLTAGE(&x_voltage); //read the Solar Panel X axis voltage
 8001fd6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f90a 	bl	80011f4 <READ_EPS_SOLAR_X_VOLTAGE>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001fe6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <handleCySatPacket+0x1fe>
                        return -1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff2:	f000 bdf5 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current); //read the Solar Panel X- current
 8001ff6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f92c 	bl	8001258 <READ_EPS_SOLAR_X_NEG_CURRENT>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002006:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <handleCySatPacket+0x21e>
                        return -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002012:	f000 bde5 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current); //read the Solar Panel X+ current
 8002016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f94e 	bl	80012bc <READ_EPS_SOLAR_X_POS_CURRENT>
 8002020:	4603      	mov	r3, r0
 8002022:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002026:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <handleCySatPacket+0x23e>
                        return -1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002032:	f000 bdd5 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(x_voltage);
 8002036:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800203a:	eeb0 0a67 	vmov.f32	s0, s15
 800203e:	f000 fe25 	bl	8002c8c <FloatToUnsigned16bits>
 8002042:	4603      	mov	r3, r0
 8002044:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                    uint16_t data2 = FloatToUnsigned16bits(x_neg_current);
 8002048:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800204c:	eeb0 0a67 	vmov.f32	s0, s15
 8002050:	f000 fe1c 	bl	8002c8c <FloatToUnsigned16bits>
 8002054:	4603      	mov	r3, r0
 8002056:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                    uint16_t data3 = FloatToUnsigned16bits(x_pos_current);
 800205a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800205e:	eeb0 0a67 	vmov.f32	s0, s15
 8002062:	f000 fe13 	bl	8002c8c <FloatToUnsigned16bits>
 8002066:	4603      	mov	r3, r0
 8002068:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800206c:	231e      	movs	r3, #30
 800206e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x02; //Solar Panel X Status Response
 8002072:	2302      	movs	r3, #2
 8002074:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8002078:	2306      	movs	r3, #6
 800207a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 800207e:	2006      	movs	r0, #6
 8002080:	f00a f99a 	bl	800c3b8 <malloc>
 8002084:	4603      	mov	r3, r0
 8002086:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002088:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	b29a      	uxth	r2, r3
 8002090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002098:	3301      	adds	r3, #1
 800209a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80020a2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ac:	3302      	adds	r3, #2
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80020b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b4:	3303      	adds	r3, #3
 80020b6:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80020be:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c8:	3304      	adds	r3, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 80020ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d0:	3305      	adds	r3, #5
 80020d2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80020da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020e2:	f7fe ff4d 	bl	8000f80 <generateCySatChecksum>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 80020ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020f4:	f7fe fec8 	bl	8000e88 <sendCySatPacket>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 80020fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002100:	4618      	mov	r0, r3
 8002102:	f00a f961 	bl	800c3c8 <free>
                    return status; //send the response
 8002106:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800210a:	f000 bd69 	b.w	8002be0 <handleCySatPacket+0xde8>
                }
                case 0x05: { //Solar Panel Y Status Request
                    float y_voltage, y_neg_current, y_pos_current;
                    status = READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage); //read the Solar Panel Y axis voltage
 800210e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f904 	bl	8001320 <READ_EPS_SOLAR_Y_VOLTAGE>
 8002118:	4603      	mov	r3, r0
 800211a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800211e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <handleCySatPacket+0x336>
                        return -1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212a:	f000 bd59 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current); //read the Solar Panel Y- current
 800212e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f926 	bl	8001384 <READ_EPS_SOLAR_Y_NEG_CURRENT>
 8002138:	4603      	mov	r3, r0
 800213a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800213e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <handleCySatPacket+0x356>
                        return -1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800214a:	f000 bd49 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current); //read the Solar Panel Y+ current
 800214e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f948 	bl	80013e8 <READ_EPS_SOLAR_Y_POS_CURRENT>
 8002158:	4603      	mov	r3, r0
 800215a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800215e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <handleCySatPacket+0x376>
                        return -1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800216a:	f000 bd39 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(y_voltage);
 800216e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002172:	eeb0 0a67 	vmov.f32	s0, s15
 8002176:	f000 fd89 	bl	8002c8c <FloatToUnsigned16bits>
 800217a:	4603      	mov	r3, r0
 800217c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                    uint16_t data2 = FloatToUnsigned16bits(y_neg_current);
 8002180:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002184:	eeb0 0a67 	vmov.f32	s0, s15
 8002188:	f000 fd80 	bl	8002c8c <FloatToUnsigned16bits>
 800218c:	4603      	mov	r3, r0
 800218e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                    uint16_t data3 = FloatToUnsigned16bits(y_pos_current);
 8002192:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	f000 fd77 	bl	8002c8c <FloatToUnsigned16bits>
 800219e:	4603      	mov	r3, r0
 80021a0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80021a4:	231e      	movs	r3, #30
 80021a6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x04; //Solar Panel Y Status Response
 80021aa:	2304      	movs	r3, #4
 80021ac:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80021b0:	2306      	movs	r3, #6
 80021b2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80021b6:	2006      	movs	r0, #6
 80021b8:	f00a f8fe 	bl	800c3b8 <malloc>
 80021bc:	4603      	mov	r3, r0
 80021be:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80021c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80021ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d0:	3301      	adds	r3, #1
 80021d2:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80021da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e4:	3302      	adds	r3, #2
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80021ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ec:	3303      	adds	r3, #3
 80021ee:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80021f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002200:	3304      	adds	r3, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002208:	3305      	adds	r3, #5
 800220a:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002212:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800221a:	f7fe feb1 	bl	8000f80 <generateCySatChecksum>
 800221e:	4603      	mov	r3, r0
 8002220:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002224:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002228:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800222c:	f7fe fe2c 	bl	8000e88 <sendCySatPacket>
 8002230:	4603      	mov	r3, r0
 8002232:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002238:	4618      	mov	r0, r3
 800223a:	f00a f8c5 	bl	800c3c8 <free>
                    return status; //send the response
 800223e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002242:	f000 bccd 	b.w	8002be0 <handleCySatPacket+0xde8>
                }
                case 0x07: { //Solar Panel Z Status Request
                    float z_voltage, z_neg_current, z_pos_current;
                    status = READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage); //read the Solar Panel Z axis voltage
 8002246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f8fe 	bl	800144c <READ_EPS_SOLAR_Z_VOLTAGE>
 8002250:	4603      	mov	r3, r0
 8002252:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002256:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <handleCySatPacket+0x46e>
                        return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002262:	f000 bcbd 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current); //read the Solar Panel Z- current
 8002266:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f920 	bl	80014b0 <READ_EPS_SOLAR_Z_NEG_CURRENT>
 8002270:	4603      	mov	r3, r0
 8002272:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002276:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <handleCySatPacket+0x48e>
                        return -1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002282:	f000 bcad 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current); //read the Solar Panel Z+ current
 8002286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f942 	bl	8001514 <READ_EPS_SOLAR_Z_POS_CURRENT>
 8002290:	4603      	mov	r3, r0
 8002292:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002296:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <handleCySatPacket+0x4ae>
                        return -1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a2:	f000 bc9d 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(z_voltage);
 80022a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80022aa:	eeb0 0a67 	vmov.f32	s0, s15
 80022ae:	f000 fced 	bl	8002c8c <FloatToUnsigned16bits>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
                    uint16_t data2 = FloatToUnsigned16bits(z_neg_current);
 80022b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022bc:	eeb0 0a67 	vmov.f32	s0, s15
 80022c0:	f000 fce4 	bl	8002c8c <FloatToUnsigned16bits>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                    uint16_t data3 = FloatToUnsigned16bits(z_pos_current);
 80022ca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80022ce:	eeb0 0a67 	vmov.f32	s0, s15
 80022d2:	f000 fcdb 	bl	8002c8c <FloatToUnsigned16bits>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80022dc:	231e      	movs	r3, #30
 80022de:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x06; //Solar Panel Z Status Response
 80022e2:	2306      	movs	r3, #6
 80022e4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80022e8:	2306      	movs	r3, #6
 80022ea:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80022ee:	2006      	movs	r0, #6
 80022f0:	f00a f862 	bl	800c3b8 <malloc>
 80022f4:	4603      	mov	r3, r0
 80022f6:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80022f8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	b29a      	uxth	r2, r3
 8002300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002308:	3301      	adds	r3, #1
 800230a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002312:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b29a      	uxth	r2, r3
 800231a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231c:	3302      	adds	r3, #2
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002324:	3303      	adds	r3, #3
 8002326:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 800232e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	b29a      	uxth	r2, r3
 8002336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002338:	3304      	adds	r3, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 800233e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002340:	3305      	adds	r3, #5
 8002342:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800234a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800234e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002352:	f7fe fe15 	bl	8000f80 <generateCySatChecksum>
 8002356:	4603      	mov	r3, r0
 8002358:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800235c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002360:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002364:	f7fe fd90 	bl	8000e88 <sendCySatPacket>
 8002368:	4603      	mov	r3, r0
 800236a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 800236e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002370:	4618      	mov	r0, r3
 8002372:	f00a f829 	bl	800c3c8 <free>
                    return status; //send the response
 8002376:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800237a:	f000 bc31 	b.w	8002be0 <handleCySatPacket+0xde8>
                }
                case 0x09: { //BUS Current Request
                    float current_3, current_5;
                    status = READ_EPS_3V_CURRENT(&current_3); //read the 3.3v BUS current
 800237e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f8f8 	bl	8001578 <READ_EPS_3V_CURRENT>
 8002388:	4603      	mov	r3, r0
 800238a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800238e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <handleCySatPacket+0x5a6>
                        return -1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239a:	f000 bc21 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_5V_CURRENT(&current_5); //read the 5v BUS current
 800239e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f91a 	bl	80015dc <READ_EPS_5V_CURRENT>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80023ae:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <handleCySatPacket+0x5c6>
                        return -1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ba:	f000 bc11 	b.w	8002be0 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(current_3);
 80023be:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023c2:	eeb0 0a67 	vmov.f32	s0, s15
 80023c6:	f000 fc61 	bl	8002c8c <FloatToUnsigned16bits>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
                    uint16_t data2 = FloatToUnsigned16bits(current_5);
 80023d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023d4:	eeb0 0a67 	vmov.f32	s0, s15
 80023d8:	f000 fc58 	bl	8002c8c <FloatToUnsigned16bits>
 80023dc:	4603      	mov	r3, r0
 80023de:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80023e2:	231e      	movs	r3, #30
 80023e4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x08; //BUS Current Response
 80023e8:	2308      	movs	r3, #8
 80023ea:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 80023ee:	2304      	movs	r3, #4
 80023f0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 80023f4:	2004      	movs	r0, #4
 80023f6:	f009 ffdf 	bl	800c3b8 <malloc>
 80023fa:	4603      	mov	r3, r0
 80023fc:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80023fe:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29a      	uxth	r2, r3
 8002406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 800240c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800240e:	3301      	adds	r3, #1
 8002410:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002418:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	b29a      	uxth	r2, r3
 8002420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002422:	3302      	adds	r3, #2
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800242a:	3303      	adds	r3, #3
 800242c:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002434:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002438:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800243c:	f7fe fda0 	bl	8000f80 <generateCySatChecksum>
 8002440:	4603      	mov	r3, r0
 8002442:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002446:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800244a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800244e:	f7fe fd1b 	bl	8000e88 <sendCySatPacket>
 8002452:	4603      	mov	r3, r0
 8002454:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800245a:	4618      	mov	r0, r3
 800245c:	f009 ffb4 	bl	800c3c8 <free>
                    return status; //send the response
 8002460:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002464:	e3bc      	b.n	8002be0 <handleCySatPacket+0xde8>
                }
                case 0x0B: { //Temperature Request
                    float mcu_temp, battery1_temp, battery2_temp, battery3_temp, battery4_temp;
                    status = READ_EPS_MCU_TEMP(&mcu_temp); //read the MCU Temperature
 8002466:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff f8e8 	bl	8001640 <READ_EPS_MCU_TEMP>
 8002470:	4603      	mov	r3, r0
 8002472:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002476:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <handleCySatPacket+0x68c>
                        return -1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002482:	e3ad      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_1_TEMP(&battery1_temp); //read the Battery Cell 1 Temperature
 8002484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff f917 	bl	80016bc <READ_EPS_BATT_1_TEMP>
 800248e:	4603      	mov	r3, r0
 8002490:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002494:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <handleCySatPacket+0x6aa>
                        return -1;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024a0:	e39e      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_2_TEMP(&battery2_temp); //read the Battery Cell 2 Temperature
 80024a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f93a 	bl	8001720 <READ_EPS_BATT_2_TEMP>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80024b2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <handleCySatPacket+0x6c8>
                        return -1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024be:	e38f      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_3_TEMP(&battery3_temp); //read the Battery Cell 3 Temperature
 80024c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f95d 	bl	8001784 <READ_EPS_BATT_3_TEMP>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80024d0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <handleCySatPacket+0x6e6>
                        return -1;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024dc:	e380      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_4_TEMP(&battery4_temp); //read the Battery Cell 4 Temperature
 80024de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f980 	bl	80017e8 <READ_EPS_BATT_4_TEMP>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80024ee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <handleCySatPacket+0x704>
                        return -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fa:	e371      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(mcu_temp);
 80024fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002500:	eeb0 0a67 	vmov.f32	s0, s15
 8002504:	f000 fbc2 	bl	8002c8c <FloatToUnsigned16bits>
 8002508:	4603      	mov	r3, r0
 800250a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                    uint16_t data2 = FloatToUnsigned16bits(battery1_temp);
 800250e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002512:	eeb0 0a67 	vmov.f32	s0, s15
 8002516:	f000 fbb9 	bl	8002c8c <FloatToUnsigned16bits>
 800251a:	4603      	mov	r3, r0
 800251c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                    uint16_t data3 = FloatToUnsigned16bits(battery2_temp);
 8002520:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002524:	eeb0 0a67 	vmov.f32	s0, s15
 8002528:	f000 fbb0 	bl	8002c8c <FloatToUnsigned16bits>
 800252c:	4603      	mov	r3, r0
 800252e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                    uint16_t data4 = FloatToUnsigned16bits(battery3_temp);
 8002532:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	f000 fba7 	bl	8002c8c <FloatToUnsigned16bits>
 800253e:	4603      	mov	r3, r0
 8002540:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
                    uint16_t data5 = FloatToUnsigned16bits(battery4_temp);
 8002544:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002548:	eeb0 0a67 	vmov.f32	s0, s15
 800254c:	f000 fb9e 	bl	8002c8c <FloatToUnsigned16bits>
 8002550:	4603      	mov	r3, r0
 8002552:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002556:	231e      	movs	r3, #30
 8002558:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0A; //Temperature Response
 800255c:	230a      	movs	r3, #10
 800255e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 8002562:	230a      	movs	r3, #10
 8002564:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002568:	200a      	movs	r0, #10
 800256a:	f009 ff25 	bl	800c3b8 <malloc>
 800256e:	4603      	mov	r3, r0
 8002570:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002572:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b29a      	uxth	r2, r3
 800257a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002582:	3301      	adds	r3, #1
 8002584:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800258c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	b29a      	uxth	r2, r3
 8002594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002596:	3302      	adds	r3, #2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 800259c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800259e:	3303      	adds	r3, #3
 80025a0:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80025a8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b2:	3304      	adds	r3, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 80025b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ba:	3305      	adds	r3, #5
 80025bc:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (data4 & 0xFF00) >> 8;
 80025c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ce:	3306      	adds	r3, #6
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = data4 & 0xFF;
 80025d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d6:	3307      	adds	r3, #7
 80025d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (data5 & 0xFF00) >> 8;
 80025e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ea:	3308      	adds	r3, #8
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = data5 & 0xFF;
 80025f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f2:	3309      	adds	r3, #9
 80025f4:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80025fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002600:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002604:	f7fe fcbc 	bl	8000f80 <generateCySatChecksum>
 8002608:	4603      	mov	r3, r0
 800260a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800260e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002616:	f7fe fc37 	bl	8000e88 <sendCySatPacket>
 800261a:	4603      	mov	r3, r0
 800261c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002622:	4618      	mov	r0, r3
 8002624:	f009 fed0 	bl	800c3c8 <free>
                    return status; //send the response
 8002628:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800262c:	e2d8      	b.n	8002be0 <handleCySatPacket+0xde8>
                }
                case 0x0D: { //Input, Output, and Default Conditions Request
                    uint16_t input, output1, output2, defaults1, defaults2;
                    status = READ_EPS_INPUT_CONDITION(&input); //read the Input Conditions
 800262e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f90a 	bl	800184c <READ_EPS_INPUT_CONDITION>
 8002638:	4603      	mov	r3, r0
 800263a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800263e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <handleCySatPacket+0x854>
                        return -1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800264a:	e2c9      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION1(&output1); //read the Output 1 Conditions
 800264c:	f107 0320 	add.w	r3, r7, #32
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff f920 	bl	8001896 <READ_EPS_OUTPUT_CONDITION1>
 8002656:	4603      	mov	r3, r0
 8002658:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800265c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <handleCySatPacket+0x872>
                        return -1;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002668:	e2ba      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION2(&output2); //read the Output 2 Conditions
 800266a:	f107 031e 	add.w	r3, r7, #30
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff f936 	bl	80018e0 <READ_EPS_OUTPUT_CONDITION2>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800267a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <handleCySatPacket+0x890>
                        return -1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002686:	e2ab      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS1(&defaults1); //read the Defaults 1 Conditions
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fa05 	bl	8001a9c <READ_EPS_DEFAULTS1>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002698:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <handleCySatPacket+0x8ae>
                        return -1;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a4:	e29c      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS2(&defaults2); //read the Defaults 2 Conditions
 80026a6:	f107 031a 	add.w	r3, r7, #26
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fa1b 	bl	8001ae6 <READ_EPS_DEFAULTS2>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80026b6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <handleCySatPacket+0x8cc>
                        return -1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c2:	e28d      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80026c4:	231e      	movs	r3, #30
 80026c6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0C; //Input, Output, and Default Conditions Response
 80026ca:	230c      	movs	r3, #12
 80026cc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80026d0:	2306      	movs	r3, #6
 80026d2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80026d6:	2006      	movs	r0, #6
 80026d8:	f009 fe6e 	bl	800c3b8 <malloc>
 80026dc:	4603      	mov	r3, r0
 80026de:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = input & 0xFF;
 80026e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80026e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = (output1 & 0xFF00) >> 8;
 80026e8:	8c3b      	ldrh	r3, [r7, #32]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f0:	3301      	adds	r3, #1
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = output1 & 0xFF;
 80026f6:	8c3a      	ldrh	r2, [r7, #32]
 80026f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026fa:	3302      	adds	r3, #2
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = output2 & 0xFF;
 8002700:	8bfa      	ldrh	r2, [r7, #30]
 8002702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002704:	3303      	adds	r3, #3
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = defaults1 & 0xFF;
 800270a:	8bba      	ldrh	r2, [r7, #28]
 800270c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800270e:	3304      	adds	r3, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = defaults2 & 0xFF;
 8002714:	8b7a      	ldrh	r2, [r7, #26]
 8002716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002718:	3305      	adds	r3, #5
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800271e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002722:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002726:	f7fe fc2b 	bl	8000f80 <generateCySatChecksum>
 800272a:	4603      	mov	r3, r0
 800272c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002730:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002734:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002738:	f7fe fba6 	bl	8000e88 <sendCySatPacket>
 800273c:	4603      	mov	r3, r0
 800273e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002744:	4618      	mov	r0, r3
 8002746:	f009 fe3f 	bl	800c3c8 <free>
                    return status; //send the response
 800274a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800274e:	e247      	b.n	8002be0 <handleCySatPacket+0xde8>
                }
                case 0x0F: { //Counter Check Request
                    uint16_t power_on, under_voltage, short_circuited, over_temp, charging_cycles;
                    status = READ_EPS_POWER_ON_CYCLES(&power_on); //read the MCU Temperature
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f8e8 	bl	800192a <READ_EPS_POWER_ON_CYCLES>
 800275a:	4603      	mov	r3, r0
 800275c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002760:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <handleCySatPacket+0x976>
                        return -1;
 8002768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800276c:	e238      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_UNDER_VOLT_COUNT(&under_voltage); //read the Battery Cell 1 Temperature
 800276e:	f107 0316 	add.w	r3, r7, #22
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff f8fe 	bl	8001974 <READ_EPS_UNDER_VOLT_COUNT>
 8002778:	4603      	mov	r3, r0
 800277a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800277e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <handleCySatPacket+0x994>
                        return -1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278a:	e229      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SHORT_CIRCUIT_COUNT(&short_circuited); //read the Battery Cell 2 Temperature
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff f914 	bl	80019be <READ_EPS_SHORT_CIRCUIT_COUNT>
 8002796:	4603      	mov	r3, r0
 8002798:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800279c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <handleCySatPacket+0x9b2>
                        return -1;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a8:	e21a      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OVER_TEMP_COUNT(&over_temp); //read the Battery Cell 3 Temperature
 80027aa:	f107 0312 	add.w	r3, r7, #18
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f92a 	bl	8001a08 <READ_EPS_OVER_TEMP_COUNT>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80027ba:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <handleCySatPacket+0x9d0>
                        return -1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c6:	e20b      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_CHARGE_CYCLES(&charging_cycles); //read the Battery Cell 4 Temperature
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f940 	bl	8001a52 <READ_EPS_CHARGE_CYCLES>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80027d8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <handleCySatPacket+0x9ee>
                        return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027e4:	e1fc      	b.n	8002be0 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80027e6:	231e      	movs	r3, #30
 80027e8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0E; //Temperature Response
 80027ec:	230e      	movs	r3, #14
 80027ee:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 80027f2:	230a      	movs	r3, #10
 80027f4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 80027f8:	200a      	movs	r0, #10
 80027fa:	f009 fddd 	bl	800c3b8 <malloc>
 80027fe:	4603      	mov	r3, r0
 8002800:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (power_on & 0xFF00) >> 8;
 8002802:	8b3b      	ldrh	r3, [r7, #24]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	b29a      	uxth	r2, r3
 8002808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = power_on & 0xFF;
 800280e:	8b3a      	ldrh	r2, [r7, #24]
 8002810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002812:	3301      	adds	r3, #1
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (under_voltage & 0xFF00) >> 8;
 8002818:	8afb      	ldrh	r3, [r7, #22]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	b29a      	uxth	r2, r3
 800281e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002820:	3302      	adds	r3, #2
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = under_voltage & 0xFF;
 8002826:	8afa      	ldrh	r2, [r7, #22]
 8002828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800282a:	3303      	adds	r3, #3
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (short_circuited & 0xFF00) >> 8;
 8002830:	8abb      	ldrh	r3, [r7, #20]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	b29a      	uxth	r2, r3
 8002836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002838:	3304      	adds	r3, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = short_circuited & 0xFF;
 800283e:	8aba      	ldrh	r2, [r7, #20]
 8002840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002842:	3305      	adds	r3, #5
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (over_temp & 0xFF00) >> 8;
 8002848:	8a7b      	ldrh	r3, [r7, #18]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b29a      	uxth	r2, r3
 800284e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002850:	3306      	adds	r3, #6
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = over_temp & 0xFF;
 8002856:	8a7a      	ldrh	r2, [r7, #18]
 8002858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800285a:	3307      	adds	r3, #7
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (charging_cycles & 0xFF00) >> 8;
 8002860:	8a3b      	ldrh	r3, [r7, #16]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	b29a      	uxth	r2, r3
 8002866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002868:	3308      	adds	r3, #8
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = charging_cycles & 0xFF;
 800286e:	8a3a      	ldrh	r2, [r7, #16]
 8002870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002872:	3309      	adds	r3, #9
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002878:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800287c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002880:	f7fe fb7e 	bl	8000f80 <generateCySatChecksum>
 8002884:	4603      	mov	r3, r0
 8002886:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800288a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800288e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002892:	f7fe faf9 	bl	8000e88 <sendCySatPacket>
 8002896:	4603      	mov	r3, r0
 8002898:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 800289c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800289e:	4618      	mov	r0, r3
 80028a0:	f009 fd92 	bl	800c3c8 <free>
                    return status; //send the response
 80028a4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80028a8:	e19a      	b.n	8002be0 <handleCySatPacket+0xde8>
                }
                case 0x11: { //Enable/Disable Request
                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80028aa:	231e      	movs	r3, #30
 80028ac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x10; //Enable/Disable Response
 80028b0:	2310      	movs	r3, #16
 80028b2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x01;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t));
 80028bc:	2001      	movs	r0, #1
 80028be:	f009 fd7b 	bl	800c3b8 <malloc>
 80028c2:	4603      	mov	r3, r0
 80028c4:	673b      	str	r3, [r7, #112]	; 0x70
                    if(validateCySatChecksum(packet)==0){
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028cc:	f7fe fb8d 	bl	8000fea <validateCySatChecksum>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <handleCySatPacket+0xae6>
                        outgoingPacket.Data[0] = 0;
 80028d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e15e      	b.n	8002b9c <handleCySatPacket+0xda4>
                    }
                    else{
                        switch(packet.Data[0]){
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	2b0e      	cmp	r3, #14
 80028e6:	f200 8159 	bhi.w	8002b9c <handleCySatPacket+0xda4>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <handleCySatPacket+0xaf8>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	0800292d 	.word	0x0800292d
 80028f4:	08002b9d 	.word	0x08002b9d
 80028f8:	08002b9d 	.word	0x08002b9d
 80028fc:	08002961 	.word	0x08002961
 8002900:	08002b9d 	.word	0x08002b9d
 8002904:	08002995 	.word	0x08002995
 8002908:	080029c9 	.word	0x080029c9
 800290c:	080029fd 	.word	0x080029fd
 8002910:	08002a31 	.word	0x08002a31
 8002914:	08002a65 	.word	0x08002a65
 8002918:	08002a99 	.word	0x08002a99
 800291c:	08002acd 	.word	0x08002acd
 8002920:	08002b01 	.word	0x08002b01
 8002924:	08002b35 	.word	0x08002b35
 8002928:	08002b69 	.word	0x08002b69
                            case 0x01:{ //Enable/Disable Battery BUS
                                if(packet.Data[1] == 0){
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	3301      	adds	r3, #1
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <handleCySatPacket+0xb4a>
                                    outgoingPacket.Data[0] = disable_EPS_Vbatt_Bus();
 8002936:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002938:	f7ff f903 	bl	8001b42 <disable_EPS_Vbatt_Bus>
 800293c:	4603      	mov	r3, r0
 800293e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002940:	e12c      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3301      	adds	r3, #1
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <handleCySatPacket+0xb60>
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
 800294c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800294e:	f7ff f8ef 	bl	8001b30 <enable_EPS_Vbatt_Bus>
 8002952:	4603      	mov	r3, r0
 8002954:	7023      	strb	r3, [r4, #0]
                                break;
 8002956:	e121      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
                                break;
 800295e:	e11d      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x04:{ //Enable/Disable 5v BUS
                                if(packet.Data[1] == 0){
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	3301      	adds	r3, #1
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <handleCySatPacket+0xb7e>
                                    outgoingPacket.Data[0] = disable_EPS_5v_Bus();
 800296a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800296c:	f7ff f8fb 	bl	8001b66 <disable_EPS_5v_Bus>
 8002970:	4603      	mov	r3, r0
 8002972:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002974:	e112      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	3301      	adds	r3, #1
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <handleCySatPacket+0xb94>
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
 8002980:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002982:	f7ff f8e7 	bl	8001b54 <enable_EPS_5v_Bus>
 8002986:	4603      	mov	r3, r0
 8002988:	7023      	strb	r3, [r4, #0]
                                break;
 800298a:	e107      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 800298c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
                                break;
 8002992:	e103      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x06:{ //Enable/Disable Fast/Slow Battery Charge 1
                                if(packet.Data[1] == 0){
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	3301      	adds	r3, #1
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d105      	bne.n	80029aa <handleCySatPacket+0xbb2>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge1();
 800299e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80029a0:	f7ff f8f3 	bl	8001b8a <disable_EPS_Fast_Charge1>
 80029a4:	4603      	mov	r3, r0
 80029a6:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80029a8:	e0f8      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	3301      	adds	r3, #1
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <handleCySatPacket+0xbc8>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
 80029b4:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80029b6:	f7ff f8df 	bl	8001b78 <enable_EPS_Fast_Charge1>
 80029ba:	4603      	mov	r3, r0
 80029bc:	7023      	strb	r3, [r4, #0]
                                break;
 80029be:	e0ed      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80029c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
                                break;
 80029c6:	e0e9      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x07:{ //Enable/Disable Fast/Slow Battery Charge 2
                                if(packet.Data[1] == 0){
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	3301      	adds	r3, #1
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d105      	bne.n	80029de <handleCySatPacket+0xbe6>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge2();
 80029d2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80029d4:	f7ff f8eb 	bl	8001bae <disable_EPS_Fast_Charge2>
 80029d8:	4603      	mov	r3, r0
 80029da:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80029dc:	e0de      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3301      	adds	r3, #1
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <handleCySatPacket+0xbfc>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
 80029e8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80029ea:	f7ff f8d7 	bl	8001b9c <enable_EPS_Fast_Charge2>
 80029ee:	4603      	mov	r3, r0
 80029f0:	7023      	strb	r3, [r4, #0]
                                break;
 80029f2:	e0d3      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80029f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
                                break;
 80029fa:	e0cf      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x08:{ //Enable/Disable Out1/Boost Board
                                if(packet.Data[1] == 0){
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3301      	adds	r3, #1
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <handleCySatPacket+0xc1a>
                                    outgoingPacket.Data[0] = disable_EPS_Output_1();
 8002a06:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a08:	f7ff f8e3 	bl	8001bd2 <disable_EPS_Output_1>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002a10:	e0c4      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3301      	adds	r3, #1
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d105      	bne.n	8002a28 <handleCySatPacket+0xc30>
                                    outgoingPacket.Data[0] = enable_EPS_Output_1();
 8002a1c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a1e:	f7ff f8cf 	bl	8001bc0 <enable_EPS_Output_1>
 8002a22:	4603      	mov	r3, r0
 8002a24:	7023      	strb	r3, [r4, #0]
                                break;
 8002a26:	e0b9      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
                                break;
 8002a2e:	e0b5      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x09:{ //Enable/Disable Out2
                                if(packet.Data[1] == 0){
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	3301      	adds	r3, #1
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <handleCySatPacket+0xc4e>
                                    outgoingPacket.Data[0] = disable_EPS_Output_2();
 8002a3a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a3c:	f7ff f8db 	bl	8001bf6 <disable_EPS_Output_2>
 8002a40:	4603      	mov	r3, r0
 8002a42:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002a44:	e0aa      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <handleCySatPacket+0xc64>
                                    outgoingPacket.Data[0] = enable_EPS_Output_2();
 8002a50:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a52:	f7ff f8c7 	bl	8001be4 <enable_EPS_Output_2>
 8002a56:	4603      	mov	r3, r0
 8002a58:	7023      	strb	r3, [r4, #0]
                                break;
 8002a5a:	e09f      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
                                break;
 8002a62:	e09b      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x0A:{ //Enable/Disable Out3
                                if(packet.Data[1] == 0){
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	3301      	adds	r3, #1
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <handleCySatPacket+0xc82>
                                    outgoingPacket.Data[0] = disable_EPS_Output_3();
 8002a6e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a70:	f7ff f8d3 	bl	8001c1a <disable_EPS_Output_3>
 8002a74:	4603      	mov	r3, r0
 8002a76:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002a78:	e090      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <handleCySatPacket+0xc98>
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
 8002a84:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a86:	f7ff f8bf 	bl	8001c08 <enable_EPS_Output_3>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	7023      	strb	r3, [r4, #0]
                                break;
 8002a8e:	e085      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002a90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
                                break;
 8002a96:	e081      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x0B:{ //Enable/Disable Out5/UHF
                                if(packet.Data[1] == 0){
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <handleCySatPacket+0xcb6>
                                    outgoingPacket.Data[0] = disable_EPS_Output_5();
 8002aa2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002aa4:	f7ff f8cb 	bl	8001c3e <disable_EPS_Output_5>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_5();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002aac:	e076      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <handleCySatPacket+0xccc>
                                    outgoingPacket.Data[0] = enable_EPS_Output_5();
 8002ab8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002aba:	f7ff f8b7 	bl	8001c2c <enable_EPS_Output_5>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	7023      	strb	r3, [r4, #0]
                                break;
 8002ac2:	e06b      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
                                break;
 8002aca:	e067      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x0C:{ //Enable/Disable Out6
                                if(packet.Data[1] == 0){
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <handleCySatPacket+0xcea>
                                    outgoingPacket.Data[0] = disable_EPS_Output_6();
 8002ad6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002ad8:	f7ff f8c3 	bl	8001c62 <disable_EPS_Output_6>
 8002adc:	4603      	mov	r3, r0
 8002ade:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002ae0:	e05c      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <handleCySatPacket+0xd00>
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
 8002aec:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002aee:	f7ff f8af 	bl	8001c50 <enable_EPS_Output_6>
 8002af2:	4603      	mov	r3, r0
 8002af4:	7023      	strb	r3, [r4, #0]
                                break;
 8002af6:	e051      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
                                break;
 8002afe:	e04d      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x0D:{ //Enable/Disable Heater 1
                                if(packet.Data[1] == 0){
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	3301      	adds	r3, #1
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d105      	bne.n	8002b16 <handleCySatPacket+0xd1e>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_1();
 8002b0a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b0c:	f7ff f8bb 	bl	8001c86 <disable_EPS_Batt_Heater_1>
 8002b10:	4603      	mov	r3, r0
 8002b12:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002b14:	e042      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <handleCySatPacket+0xd34>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
 8002b20:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b22:	f7ff f8a7 	bl	8001c74 <enable_EPS_Batt_Heater_1>
 8002b26:	4603      	mov	r3, r0
 8002b28:	7023      	strb	r3, [r4, #0]
                                break;
 8002b2a:	e037      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
                                break;
 8002b32:	e033      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x0E:{ //Enable/Disable Heater 2
                                if(packet.Data[1] == 0){
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <handleCySatPacket+0xd52>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_2();
 8002b3e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b40:	f7ff f8b3 	bl	8001caa <disable_EPS_Batt_Heater_2>
 8002b44:	4603      	mov	r3, r0
 8002b46:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002b48:	e028      	b.n	8002b9c <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d105      	bne.n	8002b60 <handleCySatPacket+0xd68>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
 8002b54:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b56:	f7ff f89f 	bl	8001c98 <enable_EPS_Batt_Heater_2>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	7023      	strb	r3, [r4, #0]
                                break;
 8002b5e:	e01d      	b.n	8002b9c <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
                                break;
 8002b66:	e019      	b.n	8002b9c <handleCySatPacket+0xda4>
                            }
                            case 0x0F:{ //Enable/Disable Heater 3
                                if(packet.Data[1] == 0){
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <handleCySatPacket+0xd86>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_3();
 8002b72:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b74:	f7ff f8ab 	bl	8001cce <disable_EPS_Batt_Heater_3>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002b7c:	e00d      	b.n	8002b9a <handleCySatPacket+0xda2>
                                else if(packet.Data[1] == 1){
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	3301      	adds	r3, #1
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <handleCySatPacket+0xd9c>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
 8002b88:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b8a:	f7ff f897 	bl	8001cbc <enable_EPS_Batt_Heater_3>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	7023      	strb	r3, [r4, #0]
                                break;
 8002b92:	e002      	b.n	8002b9a <handleCySatPacket+0xda2>
                                    outgoingPacket.Data[0] = 0x00;
 8002b94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
                                break;
 8002b9a:	bf00      	nop
                            }
                        }
                    }
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002b9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ba0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ba4:	f7fe f9ec 	bl	8000f80 <generateCySatChecksum>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002bae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bb6:	f7fe f967 	bl	8000e88 <sendCySatPacket>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002bc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f009 fc00 	bl	800c3c8 <free>
                    return status; //send the response
 8002bc8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002bcc:	e008      	b.n	8002be0 <handleCySatPacket+0xde8>
        case EOL_SUBSYSTEM_TYPE: //End of Life

            break;

        default:
            return -1;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd2:	e005      	b.n	8002be0 <handleCySatPacket+0xde8>
            break;
 8002bd4:	bf00      	nop
 8002bd6:	e002      	b.n	8002bde <handleCySatPacket+0xde6>
            break;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <handleCySatPacket+0xde6>
            break;
 8002bdc:	bf00      	nop
    }

    return 0;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	37a4      	adds	r7, #164	; 0xa4
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}

08002be8 <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 8002be8:	b40f      	push	{r0, r1, r2, r3}
 8002bea:	b5b0      	push	{r4, r5, r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	466b      	mov	r3, sp
 8002bf2:	461d      	mov	r5, r3

    uint32_t bufferSize = 512;
 8002bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf8:	613b      	str	r3, [r7, #16]
    uint8_t formatBuffer[bufferSize];
 8002bfa:	693c      	ldr	r4, [r7, #16]
 8002bfc:	4623      	mov	r3, r4
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4620      	mov	r0, r4
 8002c04:	f04f 0100 	mov.w	r1, #0
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	00cb      	lsls	r3, r1, #3
 8002c12:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c16:	00c2      	lsls	r2, r0, #3
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	00cb      	lsls	r3, r1, #3
 8002c28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c2c:	00c2      	lsls	r2, r0, #3
 8002c2e:	1de3      	adds	r3, r4, #7
 8002c30:	08db      	lsrs	r3, r3, #3
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	ebad 0d03 	sub.w	sp, sp, r3
 8002c38:	466b      	mov	r3, sp
 8002c3a:	3300      	adds	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]

    va_list args;
    va_start(args, format);
 8002c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c42:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 8002c44:	68b8      	ldr	r0, [r7, #8]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c4a:	6939      	ldr	r1, [r7, #16]
 8002c4c:	f00b fbc2 	bl	800e3d4 <vsniprintf>
 8002c50:	6078      	str	r0, [r7, #4]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    if (len > 0) {
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dd0a      	ble.n	8002c72 <debug_printf+0x8a>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c66:	4808      	ldr	r0, [pc, #32]	; (8002c88 <debug_printf+0xa0>)
 8002c68:	f004 f9d1 	bl	800700e <HAL_UART_Transmit>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	75fb      	strb	r3, [r7, #23]
 8002c70:	e001      	b.n	8002c76 <debug_printf+0x8e>
        //uint8_t crlf[] = "\r\n";
        //status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
    }
    else{
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	46ad      	mov	sp, r5
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002c84:	b004      	add	sp, #16
 8002c86:	4770      	bx	lr
 8002c88:	20008070 	.word	0x20008070

08002c8c <FloatToUnsigned16bits>:
  * @brief Converts a float into a uint16_t
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a uint16_t
  * @retval The 16 bit unsigned integer
  */
uint16_t FloatToUnsigned16bits(float float_value){
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t x = *((uint32_t*)&float_value);
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]
    return ((x>>16)&0x8000)|((((x&0x7f800000)-0x38000000)>>13)&0x7c00)|((x>>13)&0x03ff);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	0c1b      	lsrs	r3, r3, #16
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8002cb2:	f103 4348 	add.w	r3, r3, #3355443200	; 0xc8000000
 8002cb6:	0b5b      	lsrs	r3, r3, #13
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	0b5b      	lsrs	r3, r3, #13
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	b29b      	uxth	r3, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <main>:
    enable_EPS_Batt_Heater_3();
}


int main(void)
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
      //SCB->VTOR = APPL_ADDRESS;

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002ce6:	f000 f885 	bl	8002df4 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8002cea:	f005 fcd3 	bl	8008694 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002cee:	f005 fd53 	bl	8008798 <MX_GPIO_Init>
    MX_I2C1_Init();
 8002cf2:	f005 feed 	bl	8008ad0 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8002cf6:	f005 ff63 	bl	8008bc0 <MX_USART1_UART_Init>
    MX_UART4_Init();
 8002cfa:	f005 ff37 	bl	8008b6c <MX_UART4_Init>
    MX_USART6_UART_Init();
 8002cfe:	f005 ff89 	bl	8008c14 <MX_USART6_UART_Init>
    MX_SDIO_SD_Init();
 8002d02:	f005 ff13 	bl	8008b2c <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8002d06:	f006 f88b 	bl	8008e20 <MX_FATFS_Init>
    disable_EPS_Output_3();
 8002d0a:	f7fe ff86 	bl	8001c1a <disable_EPS_Output_3>
    disable_EPS_Output_5();
 8002d0e:	f7fe ff96 	bl	8001c3e <disable_EPS_Output_5>
//    osThreadCreate(osThread(myR2U2Task), NULL);
//
//    osThreadDef(myADCSTask, ADCS_Task, osPriorityNormal, 0, 1024);
//    osThreadCreate(osThread(myADCSTask), NULL);

    osThreadDef(myBatteryCapacityTask, BatteryCapacity_Task, osPriorityRealtime, 0, 1024);
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <main+0x50>)
 8002d14:	1d3c      	adds	r4, r7, #4
 8002d16:	461d      	mov	r5, r3
 8002d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d1c:	682b      	ldr	r3, [r5, #0]
 8002d1e:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myBatteryCapacityTask), NULL);
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f006 fceb 	bl	8009700 <osThreadCreate>
    /* Start scheduler */
    osKernelStart();
 8002d2a:	f006 fce2 	bl	80096f2 <osKernelStart>

    //GroundStationRxDataLength = 4;
    //HAL_UART_Receive_IT(&huart6, (uint8_t*) &GroundStationRxBuffer, 4);

    while(1){
 8002d2e:	e7fe      	b.n	8002d2e <main+0x4e>
 8002d30:	08010974 	.word	0x08010974

08002d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d46:	f000 f877 	bl	8002e38 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40010000 	.word	0x40010000

08002d58 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
#ifdef DEBUG_ENABLE
  while(1)
  {
      GREEN_LED_ON();
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <Error_Handler+0x48>)
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <Error_Handler+0x48>)
 8002d62:	f043 0310 	orr.w	r3, r3, #16
 8002d66:	6153      	str	r3, [r2, #20]
      AMBER_LED_ON();
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <Error_Handler+0x48>)
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <Error_Handler+0x48>)
 8002d6e:	f043 0320 	orr.w	r3, r3, #32
 8002d72:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8002d74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d78:	f000 f878 	bl	8002e6c <HAL_Delay>
      GREEN_LED_OFF();
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <Error_Handler+0x48>)
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <Error_Handler+0x48>)
 8002d82:	f023 0310 	bic.w	r3, r3, #16
 8002d86:	6153      	str	r3, [r2, #20]
      AMBER_LED_OFF();
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <Error_Handler+0x48>)
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <Error_Handler+0x48>)
 8002d8e:	f023 0320 	bic.w	r3, r3, #32
 8002d92:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8002d94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d98:	f000 f868 	bl	8002e6c <HAL_Delay>
      GREEN_LED_ON();
 8002d9c:	e7de      	b.n	8002d5c <Error_Handler+0x4>
 8002d9e:	bf00      	nop
 8002da0:	40020800 	.word	0x40020800

08002da4 <HAL_UART_RxCpltCallback>:
{
    Error_Handler();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
    if(huart == &huart6){ //OBC connected to Payload/USB
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <HAL_UART_RxCpltCallback+0x48>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d116      	bne.n	8002de2 <HAL_UART_RxCpltCallback+0x3e>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	490d      	ldr	r1, [pc, #52]	; (8002df0 <HAL_UART_RxCpltCallback+0x4c>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe f836 	bl	8000e2c <parseCySatPacket>
 8002dc0:	f107 030c 	add.w	r3, r7, #12
 8002dc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dc8:	f7ff f816 	bl	8001df8 <handleCySatPacket>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd2:	d101      	bne.n	8002dd8 <HAL_UART_RxCpltCallback+0x34>
            sendErrorPacket();
 8002dd4:	f7fe ffea 	bl	8001dac <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
 8002dd8:	2204      	movs	r2, #4
 8002dda:	4905      	ldr	r1, [pc, #20]	; (8002df0 <HAL_UART_RxCpltCallback+0x4c>)
 8002ddc:	4803      	ldr	r0, [pc, #12]	; (8002dec <HAL_UART_RxCpltCallback+0x48>)
 8002dde:	f004 f9af 	bl	8007140 <HAL_UART_Receive_IT>
    }
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20008070 	.word	0x20008070
 8002df0:	20007bac 	.word	0x20007bac

08002df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_Init+0x40>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <HAL_Init+0x40>)
 8002dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_Init+0x40>)
 8002e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_Init+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <HAL_Init+0x40>)
 8002e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	f000 f90f 	bl	8003040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e22:	200f      	movs	r0, #15
 8002e24:	f006 faf0 	bl	8009408 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002e28:	f006 f912 	bl	8009050 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00

08002e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick++;
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <HAL_IncTick+0x18>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	4a03      	ldr	r2, [pc, #12]	; (8002e50 <HAL_IncTick+0x18>)
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	20007bc4 	.word	0x20007bc4

08002e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return uwTick;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_GetTick+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20007bc4 	.word	0x20007bc4

08002e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff ffee 	bl	8002e54 <HAL_GetTick>
 8002e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e84:	d002      	beq.n	8002e8c <HAL_Delay+0x20>
  {
     wait++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e8c:	bf00      	nop
 8002e8e:	f7ff ffe1 	bl	8002e54 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d8f7      	bhi.n	8002e8e <HAL_Delay+0x22>
  {
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	; (8002eec <NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4907      	ldr	r1, [pc, #28]	; (8002f3c <NVIC_EnableIRQ+0x30>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2001      	movs	r0, #1
 8002f26:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e100 	.word	0xe000e100

08002f40 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	da0b      	bge.n	8002f6c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	490c      	ldr	r1, [pc, #48]	; (8002f8c <NVIC_SetPriority+0x4c>)
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	3b04      	subs	r3, #4
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f6a:	e009      	b.n	8002f80 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	4907      	ldr	r1, [pc, #28]	; (8002f90 <NVIC_SetPriority+0x50>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	0112      	lsls	r2, r2, #4
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f1c3 0307 	rsb	r3, r3, #7
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	bf28      	it	cs
 8002fb2:	2304      	movcs	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d902      	bls.n	8002fc4 <NVIC_EncodePriority+0x30>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3b03      	subs	r3, #3
 8002fc2:	e000      	b.n	8002fc6 <NVIC_EncodePriority+0x32>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	4313      	orrs	r3, r2
         );
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800300c:	d301      	bcc.n	8003012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800300e:	2301      	movs	r3, #1
 8003010:	e00f      	b.n	8003032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <SysTick_Config+0x40>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301a:	210f      	movs	r1, #15
 800301c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003020:	f7ff ff8e 	bl	8002f40 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <SysTick_Config+0x40>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <SysTick_Config+0x40>)
 800302c:	2207      	movs	r2, #7
 800302e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	e000e010 	.word	0xe000e010

08003040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ff2d 	bl	8002ea8 <NVIC_SetPriorityGrouping>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003056:	b580      	push	{r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003068:	f7ff ff42 	bl	8002ef0 <NVIC_GetPriorityGrouping>
 800306c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f7ff ff8e 	bl	8002f94 <NVIC_EncodePriority>
 8003078:	4602      	mov	r2, r0
 800307a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff5d 	bl	8002f40 <NVIC_SetPriority>
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff35 	bl	8002f0c <NVIC_EnableIRQ>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ffa2 	bl	8002ffc <SysTick_Config>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d106      	bne.n	80030e0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80030de:	e005      	b.n	80030ec <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80030e6:	f023 0304 	bic.w	r3, r3, #4
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d004      	beq.n	800311a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e00c      	b.n	8003134 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2205      	movs	r2, #5
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0201 	bic.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800314c:	4b93      	ldr	r3, [pc, #588]	; (800339c <HAL_DMA_IRQHandler+0x25c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a93      	ldr	r2, [pc, #588]	; (80033a0 <HAL_DMA_IRQHandler+0x260>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0a9b      	lsrs	r3, r3, #10
 8003158:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	2208      	movs	r2, #8
 800316c:	409a      	lsls	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01a      	beq.n	80031ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0204 	bic.w	r2, r2, #4
 8003192:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	2208      	movs	r2, #8
 800319a:	409a      	lsls	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	4a7c      	ldr	r2, [pc, #496]	; (80033a4 <HAL_DMA_IRQHandler+0x264>)
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	4a75      	ldr	r2, [pc, #468]	; (80033a4 <HAL_DMA_IRQHandler+0x264>)
 80031d0:	409a      	lsls	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	f043 0202 	orr.w	r2, r3, #2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	4a70      	ldr	r2, [pc, #448]	; (80033a8 <HAL_DMA_IRQHandler+0x268>)
 80031e8:	409a      	lsls	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d012      	beq.n	8003218 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	4a68      	ldr	r2, [pc, #416]	; (80033a8 <HAL_DMA_IRQHandler+0x268>)
 8003206:	409a      	lsls	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f043 0204 	orr.w	r2, r3, #4
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	2210      	movs	r2, #16
 800321e:	409a      	lsls	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d043      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d03c      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	2210      	movs	r2, #16
 800323c:	409a      	lsls	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d018      	beq.n	8003282 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d024      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4798      	blx	r3
 800326e:	e01f      	b.n	80032b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
 8003280:	e016      	b.n	80032b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0208 	bic.w	r2, r2, #8
 800329e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	2220      	movs	r2, #32
 80032b6:	409a      	lsls	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8094 	beq.w	80033ea <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 808c 	beq.w	80033ea <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	2220      	movs	r2, #32
 80032d8:	409a      	lsls	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d137      	bne.n	800335a <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0216 	bic.w	r2, r2, #22
 80032f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003308:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d103      	bne.n	800331a <HAL_DMA_IRQHandler+0x1da>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0208 	bic.w	r2, r2, #8
 8003328:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	223f      	movs	r2, #63	; 0x3f
 8003330:	409a      	lsls	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8083 	beq.w	8003456 <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
        }
        return;
 8003358:	e07d      	b.n	8003456 <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d021      	beq.n	80033ac <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d108      	bne.n	8003388 <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	2b00      	cmp	r3, #0
 800337c:	d035      	beq.n	80033ea <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
 8003386:	e030      	b.n	80033ea <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d02c      	beq.n	80033ea <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e027      	b.n	80033ea <HAL_DMA_IRQHandler+0x2aa>
 800339a:	bf00      	nop
 800339c:	20000010 	.word	0x20000010
 80033a0:	1b4e81b5 	.word	0x1b4e81b5
 80033a4:	00800001 	.word	0x00800001
 80033a8:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0210 	bic.w	r2, r2, #16
 80033c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d032      	beq.n	8003458 <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d022      	beq.n	8003444 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2205      	movs	r2, #5
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3301      	adds	r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	429a      	cmp	r2, r3
 8003420:	d307      	bcc.n	8003432 <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f2      	bne.n	8003416 <HAL_DMA_IRQHandler+0x2d6>
 8003430:	e000      	b.n	8003434 <HAL_DMA_IRQHandler+0x2f4>
          break;
 8003432:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
 8003454:	e000      	b.n	8003458 <HAL_DMA_IRQHandler+0x318>
        return;
 8003456:	bf00      	nop
    }
  }
}
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e177      	b.n	800376c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	f040 8166 	bne.w	8003766 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x4a>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b12      	cmp	r3, #18
 80034a8:	d123      	bne.n	80034f2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0203 	and.w	r2, r3, #3
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d00b      	beq.n	8003546 <HAL_GPIO_Init+0xe6>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d007      	beq.n	8003546 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800353a:	2b11      	cmp	r3, #17
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b12      	cmp	r3, #18
 8003544:	d130      	bne.n	80035a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2203      	movs	r2, #3
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800357c:	2201      	movs	r2, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f003 0201 	and.w	r2, r3, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2203      	movs	r2, #3
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80c0 	beq.w	8003766 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b66      	ldr	r3, [pc, #408]	; (8003784 <HAL_GPIO_Init+0x324>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a65      	ldr	r2, [pc, #404]	; (8003784 <HAL_GPIO_Init+0x324>)
 80035f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_GPIO_Init+0x324>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003602:	4a61      	ldr	r2, [pc, #388]	; (8003788 <HAL_GPIO_Init+0x328>)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	220f      	movs	r2, #15
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_GPIO_Init+0x32c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d037      	beq.n	800369e <HAL_GPIO_Init+0x23e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a57      	ldr	r2, [pc, #348]	; (8003790 <HAL_GPIO_Init+0x330>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d031      	beq.n	800369a <HAL_GPIO_Init+0x23a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a56      	ldr	r2, [pc, #344]	; (8003794 <HAL_GPIO_Init+0x334>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d02b      	beq.n	8003696 <HAL_GPIO_Init+0x236>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a55      	ldr	r2, [pc, #340]	; (8003798 <HAL_GPIO_Init+0x338>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d025      	beq.n	8003692 <HAL_GPIO_Init+0x232>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a54      	ldr	r2, [pc, #336]	; (800379c <HAL_GPIO_Init+0x33c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01f      	beq.n	800368e <HAL_GPIO_Init+0x22e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a53      	ldr	r2, [pc, #332]	; (80037a0 <HAL_GPIO_Init+0x340>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d019      	beq.n	800368a <HAL_GPIO_Init+0x22a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a52      	ldr	r2, [pc, #328]	; (80037a4 <HAL_GPIO_Init+0x344>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_GPIO_Init+0x226>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a51      	ldr	r2, [pc, #324]	; (80037a8 <HAL_GPIO_Init+0x348>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00d      	beq.n	8003682 <HAL_GPIO_Init+0x222>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a50      	ldr	r2, [pc, #320]	; (80037ac <HAL_GPIO_Init+0x34c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <HAL_GPIO_Init+0x21e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4f      	ldr	r2, [pc, #316]	; (80037b0 <HAL_GPIO_Init+0x350>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_GPIO_Init+0x21a>
 8003676:	2309      	movs	r3, #9
 8003678:	e012      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800367a:	230a      	movs	r3, #10
 800367c:	e010      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800367e:	2308      	movs	r3, #8
 8003680:	e00e      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 8003682:	2307      	movs	r3, #7
 8003684:	e00c      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 8003686:	2306      	movs	r3, #6
 8003688:	e00a      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800368a:	2305      	movs	r3, #5
 800368c:	e008      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800368e:	2304      	movs	r3, #4
 8003690:	e006      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 8003692:	2303      	movs	r3, #3
 8003694:	e004      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 8003696:	2302      	movs	r3, #2
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800369e:	2300      	movs	r3, #0
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f002 0203 	and.w	r2, r2, #3
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	4093      	lsls	r3, r2
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b0:	4935      	ldr	r1, [pc, #212]	; (8003788 <HAL_GPIO_Init+0x328>)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	3302      	adds	r3, #2
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036be:	4b3d      	ldr	r3, [pc, #244]	; (80037b4 <HAL_GPIO_Init+0x354>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e2:	4a34      	ldr	r2, [pc, #208]	; (80037b4 <HAL_GPIO_Init+0x354>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036e8:	4b32      	ldr	r3, [pc, #200]	; (80037b4 <HAL_GPIO_Init+0x354>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800370c:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <HAL_GPIO_Init+0x354>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <HAL_GPIO_Init+0x354>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003736:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <HAL_GPIO_Init+0x354>)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_GPIO_Init+0x354>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <HAL_GPIO_Init+0x354>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3301      	adds	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b0f      	cmp	r3, #15
 8003770:	f67f ae84 	bls.w	800347c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	40013800 	.word	0x40013800
 800378c:	40020000 	.word	0x40020000
 8003790:	40020400 	.word	0x40020400
 8003794:	40020800 	.word	0x40020800
 8003798:	40020c00 	.word	0x40020c00
 800379c:	40021000 	.word	0x40021000
 80037a0:	40021400 	.word	0x40021400
 80037a4:	40021800 	.word	0x40021800
 80037a8:	40021c00 	.word	0x40021c00
 80037ac:	40022000 	.word	0x40022000
 80037b0:	40022400 	.word	0x40022400
 80037b4:	40013c00 	.word	0x40013c00

080037b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	807b      	strh	r3, [r7, #2]
 80037c4:	4613      	mov	r3, r2
 80037c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c8:	787b      	ldrb	r3, [r7, #1]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037d4:	e003      	b.n	80037de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	041a      	lsls	r2, r3, #16
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	619a      	str	r2, [r3, #24]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0c9      	b.n	800399a <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f005 fc4a 	bl	80090b4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003838:	f001 fae8 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800383c:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <HAL_I2C_Init+0x1b8>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0c9b      	lsrs	r3, r3, #18
 8003848:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4a54      	ldr	r2, [pc, #336]	; (80039a8 <HAL_I2C_Init+0x1bc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d802      	bhi.n	8003862 <HAL_I2C_Init+0x76>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3301      	adds	r3, #1
 8003860:	e009      	b.n	8003876 <HAL_I2C_Init+0x8a>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003868:	fb02 f303 	mul.w	r3, r2, r3
 800386c:	4a4f      	ldr	r2, [pc, #316]	; (80039ac <HAL_I2C_Init+0x1c0>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	099b      	lsrs	r3, r3, #6
 8003874:	3301      	adds	r3, #1
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a49      	ldr	r2, [pc, #292]	; (80039a8 <HAL_I2C_Init+0x1bc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d813      	bhi.n	80038ae <HAL_I2C_Init+0xc2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003892:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d006      	beq.n	80038aa <HAL_I2C_Init+0xbe>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	e045      	b.n	8003936 <HAL_I2C_Init+0x14a>
 80038aa:	2304      	movs	r3, #4
 80038ac:	e043      	b.n	8003936 <HAL_I2C_Init+0x14a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <HAL_I2C_Init+0xea>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e010      	b.n	80038f8 <HAL_I2C_Init+0x10c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	009a      	lsls	r2, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Init+0x114>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e01a      	b.n	8003936 <HAL_I2C_Init+0x14a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <HAL_I2C_Init+0x132>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800391c:	e00b      	b.n	8003936 <HAL_I2C_Init+0x14a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009a      	lsls	r2, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69d9      	ldr	r1, [r3, #28]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6919      	ldr	r1, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6959      	ldr	r1, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	431bde83 	.word	0x431bde83
 80039a8:	000186a0 	.word	0x000186a0
 80039ac:	10624dd3 	.word	0x10624dd3

080039b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	461a      	mov	r2, r3
 80039bc:	460b      	mov	r3, r1
 80039be:	817b      	strh	r3, [r7, #10]
 80039c0:	4613      	mov	r3, r2
 80039c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039c8:	f7ff fa44 	bl	8002e54 <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	f040 80ee 	bne.w	8003bb8 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2319      	movs	r3, #25
 80039e2:	2201      	movs	r2, #1
 80039e4:	4977      	ldr	r1, [pc, #476]	; (8003bc4 <HAL_I2C_Master_Transmit+0x214>)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fc6c 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0e1      	b.n	8003bba <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_I2C_Master_Transmit+0x54>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e0da      	b.n	8003bba <HAL_I2C_Master_Transmit+0x20a>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d007      	beq.n	8003a2a <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a38:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2221      	movs	r2, #33	; 0x21
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2210      	movs	r2, #16
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	893a      	ldrh	r2, [r7, #8]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a5a      	ldr	r2, [pc, #360]	; (8003bc8 <HAL_I2C_Master_Transmit+0x218>)
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a6c:	8979      	ldrh	r1, [r7, #10]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fadc 	bl	8004030 <I2C_MasterRequestWrite>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00f      	beq.n	8003a9e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d105      	bne.n	8003a92 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e093      	b.n	8003bba <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e08d      	b.n	8003bba <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8003ab4:	e066      	b.n	8003b84 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	6a39      	ldr	r1, [r7, #32]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fcc1 	bl	8004442 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00f      	beq.n	8003ae6 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d109      	bne.n	8003ae2 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e06b      	b.n	8003bba <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e069      	b.n	8003bba <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c59      	adds	r1, r3, #1
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	6251      	str	r1, [r2, #36]	; 0x24
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d119      	bne.n	8003b54 <HAL_I2C_Master_Transmit+0x1a4>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c59      	adds	r1, r3, #1
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	6251      	str	r1, [r2, #36]	; 0x24
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fcaf 	bl	80044bc <I2C_WaitOnBTFFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00f      	beq.n	8003b84 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d109      	bne.n	8003b80 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e01c      	b.n	8003bba <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e01a      	b.n	8003bba <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d194      	bne.n	8003ab6 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	00100002 	.word	0x00100002
 8003bc8:	ffff0000 	.word	0xffff0000

08003bcc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08c      	sub	sp, #48	; 0x30
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	460b      	mov	r3, r1
 8003bda:	817b      	strh	r3, [r7, #10]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be4:	f7ff f936 	bl	8002e54 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	f040 8215 	bne.w	8004022 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2319      	movs	r3, #25
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4985      	ldr	r1, [pc, #532]	; (8003e18 <HAL_I2C_Master_Receive+0x24c>)
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fb5e 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e208      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_I2C_Master_Receive+0x54>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e201      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d007      	beq.n	8003c46 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0201 	orr.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2222      	movs	r2, #34	; 0x22
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2210      	movs	r2, #16
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	893a      	ldrh	r2, [r7, #8]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a68      	ldr	r2, [pc, #416]	; (8003e1c <HAL_I2C_Master_Receive+0x250>)
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c88:	8979      	ldrh	r1, [r7, #10]
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fa50 	bl	8004134 <I2C_MasterRequestRead>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00f      	beq.n	8003cba <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d105      	bne.n	8003cae <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e1ba      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1b4      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d113      	bne.n	8003cea <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e188      	b.n	8003ffc <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d11b      	bne.n	8003d2a <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e168      	b.n	8003ffc <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d11b      	bne.n	8003d6a <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	e148      	b.n	8003ffc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8003d90:	e134      	b.n	8003ffc <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	f200 80eb 	bhi.w	8003f72 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d127      	bne.n	8003df4 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fbc4 	bl	8004536 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d101      	bne.n	8003dc0 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e131      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e12f      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6918      	ldr	r0, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	1c59      	adds	r1, r3, #1
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	6251      	str	r1, [r2, #36]	; 0x24
 8003dd4:	b2c2      	uxtb	r2, r0
 8003dd6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df2:	e103      	b.n	8003ffc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d14a      	bne.n	8003e92 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	2200      	movs	r2, #0
 8003e04:	4906      	ldr	r1, [pc, #24]	; (8003e20 <HAL_I2C_Master_Receive+0x254>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fa5c 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e106      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
 8003e16:	bf00      	nop
 8003e18:	00100002 	.word	0x00100002
 8003e1c:	ffff0000 	.word	0xffff0000
 8003e20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6918      	ldr	r0, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c59      	adds	r1, r3, #1
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	6251      	str	r1, [r2, #36]	; 0x24
 8003e44:	b2c2      	uxtb	r2, r0
 8003e46:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6918      	ldr	r0, [r3, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c59      	adds	r1, r3, #1
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	6251      	str	r1, [r2, #36]	; 0x24
 8003e72:	b2c2      	uxtb	r2, r0
 8003e74:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e90:	e0b4      	b.n	8003ffc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4964      	ldr	r1, [pc, #400]	; (800402c <HAL_I2C_Master_Receive+0x460>)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fa11 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e0bb      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6918      	ldr	r0, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	1c59      	adds	r1, r3, #1
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	6251      	str	r1, [r2, #36]	; 0x24
 8003ecc:	b2c2      	uxtb	r2, r0
 8003ece:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	494e      	ldr	r1, [pc, #312]	; (800402c <HAL_I2C_Master_Receive+0x460>)
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f9e5 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e08f      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6918      	ldr	r0, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	1c59      	adds	r1, r3, #1
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	6251      	str	r1, [r2, #36]	; 0x24
 8003f24:	b2c2      	uxtb	r2, r0
 8003f26:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6918      	ldr	r0, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c59      	adds	r1, r3, #1
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6251      	str	r1, [r2, #36]	; 0x24
 8003f52:	b2c2      	uxtb	r2, r0
 8003f54:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f70:	e044      	b.n	8003ffc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fadd 	bl	8004536 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e04a      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e048      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6918      	ldr	r0, [r3, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c59      	adds	r1, r3, #1
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	6251      	str	r1, [r2, #36]	; 0x24
 8003fa2:	b2c2      	uxtb	r2, r0
 8003fa4:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d116      	bne.n	8003ffc <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6918      	ldr	r0, [r3, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	1c59      	adds	r1, r3, #1
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	6251      	str	r1, [r2, #36]	; 0x24
 8003fde:	b2c2      	uxtb	r2, r0
 8003fe0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	f47f aec6 	bne.w	8003d92 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3728      	adds	r7, #40	; 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	00010004 	.word	0x00010004

08004030 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	460b      	mov	r3, r1
 800403e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d006      	beq.n	800405a <I2C_MasterRequestWrite+0x2a>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d003      	beq.n	800405a <I2C_MasterRequestWrite+0x2a>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004058:	d108      	bne.n	800406c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e00b      	b.n	8004084 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	2b12      	cmp	r3, #18
 8004072:	d107      	bne.n	8004084 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004082:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f917 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e041      	b.n	8004124 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a8:	d108      	bne.n	80040bc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b8:	611a      	str	r2, [r3, #16]
 80040ba:	e021      	b.n	8004100 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040bc:	897b      	ldrh	r3, [r7, #10]
 80040be:	11db      	asrs	r3, r3, #7
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f003 0306 	and.w	r3, r3, #6
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f063 030f 	orn	r3, r3, #15
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	4914      	ldr	r1, [pc, #80]	; (800412c <I2C_MasterRequestWrite+0xfc>)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f943 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d101      	bne.n	80040f2 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e018      	b.n	8004124 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e016      	b.n	8004124 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	490a      	ldr	r1, [pc, #40]	; (8004130 <I2C_MasterRequestWrite+0x100>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f92d 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2b04      	cmp	r3, #4
 8004118:	d101      	bne.n	800411e <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e002      	b.n	8004124 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e000      	b.n	8004124 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	00010008 	.word	0x00010008
 8004130:	00010002 	.word	0x00010002

08004134 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	460b      	mov	r3, r1
 8004142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004158:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d006      	beq.n	800416e <I2C_MasterRequestRead+0x3a>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d003      	beq.n	800416e <I2C_MasterRequestRead+0x3a>
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800416c:	d108      	bne.n	8004180 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e00b      	b.n	8004198 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	2b11      	cmp	r3, #17
 8004186:	d107      	bne.n	8004198 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004196:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f88d 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e07f      	b.n	80042b4 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041bc:	d108      	bne.n	80041d0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041be:	897b      	ldrh	r3, [r7, #10]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	611a      	str	r2, [r3, #16]
 80041ce:	e05f      	b.n	8004290 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041d0:	897b      	ldrh	r3, [r7, #10]
 80041d2:	11db      	asrs	r3, r3, #7
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f003 0306 	and.w	r3, r3, #6
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f063 030f 	orn	r3, r3, #15
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4933      	ldr	r1, [pc, #204]	; (80042bc <I2C_MasterRequestRead+0x188>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f8b9 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d101      	bne.n	8004206 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e056      	b.n	80042b4 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e054      	b.n	80042b4 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800420a:	897b      	ldrh	r3, [r7, #10]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4929      	ldr	r1, [pc, #164]	; (80042c0 <I2C_MasterRequestRead+0x18c>)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f8a3 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b04      	cmp	r3, #4
 800422c:	d101      	bne.n	8004232 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e040      	b.n	80042b4 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e03e      	b.n	80042b4 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f82b 	bl	80042c4 <I2C_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e01d      	b.n	80042b4 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004278:	897b      	ldrh	r3, [r7, #10]
 800427a:	11db      	asrs	r3, r3, #7
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f003 0306 	and.w	r3, r3, #6
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f063 030e 	orn	r3, r3, #14
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	490a      	ldr	r1, [pc, #40]	; (80042c0 <I2C_MasterRequestRead+0x18c>)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f865 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d101      	bne.n	80042ae <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e002      	b.n	80042b4 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e000      	b.n	80042b4 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	00010008 	.word	0x00010008
 80042c0:	00010002 	.word	0x00010002

080042c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80042d4:	e01f      	b.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042dc:	d01b      	beq.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042e4:	f7fe fdb6 	bl	8002e54 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d210      	bcs.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e023      	b.n	800435e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d10d      	bne.n	800433c <I2C_WaitOnFlagUntilTimeout+0x78>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	43da      	mvns	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4013      	ands	r3, r2
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	e00c      	b.n	8004356 <I2C_WaitOnFlagUntilTimeout+0x92>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4013      	ands	r3, r2
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	429a      	cmp	r2, r3
 800435a:	d0bc      	beq.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004374:	e040      	b.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d11c      	bne.n	80043c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800439e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2204      	movs	r2, #4
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e03c      	b.n	800443a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c6:	d017      	beq.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80043ce:	f7fe fd41 	bl	8002e54 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e020      	b.n	800443a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d10c      	bne.n	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	43da      	mvns	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4013      	ands	r3, r2
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e00b      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d19e      	bne.n	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800444e:	e029      	b.n	80044a4 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f8ba 	bl	80045ca <I2C_IsAcknowledgeFailed>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e029      	b.n	80044b4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004466:	d01d      	beq.n	80044a4 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800446e:	f7fe fcf1 	bl	8002e54 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	d212      	bcs.n	80044a4 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e007      	b.n	80044b4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d1ce      	bne.n	8004450 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044c8:	e029      	b.n	800451e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f87d 	bl	80045ca <I2C_IsAcknowledgeFailed>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e029      	b.n	800452e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e0:	d01d      	beq.n	800451e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044e8:	f7fe fcb4 	bl	8002e54 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d212      	bcs.n	800451e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f043 0220 	orr.w	r2, r3, #32
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e007      	b.n	800452e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d1ce      	bne.n	80044ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004542:	e036      	b.n	80045b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d114      	bne.n	800457c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0210 	mvn.w	r2, #16
 800455a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e022      	b.n	80045c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8004582:	f7fe fc67 	bl	8002e54 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	d20f      	bcs.n	80045b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e007      	b.n	80045c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d1c1      	bne.n	8004544 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e0:	d114      	bne.n	800460c <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045ea:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2204      	movs	r2, #4
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08e      	sub	sp, #56	; 0x38
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8004624:	2300      	movs	r3, #0
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d075      	beq.n	8004720 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004634:	4ba4      	ldr	r3, [pc, #656]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b04      	cmp	r3, #4
 800463e:	d00c      	beq.n	800465a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004640:	4ba1      	ldr	r3, [pc, #644]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004648:	2b08      	cmp	r3, #8
 800464a:	d112      	bne.n	8004672 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800464c:	4b9e      	ldr	r3, [pc, #632]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004658:	d10b      	bne.n	8004672 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465a:	4b9b      	ldr	r3, [pc, #620]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d05b      	beq.n	800471e <HAL_RCC_OscConfig+0x102>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d157      	bne.n	800471e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e224      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467a:	d106      	bne.n	800468a <HAL_RCC_OscConfig+0x6e>
 800467c:	4b92      	ldr	r3, [pc, #584]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a91      	ldr	r2, [pc, #580]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	e01d      	b.n	80046c6 <HAL_RCC_OscConfig+0xaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004692:	d10c      	bne.n	80046ae <HAL_RCC_OscConfig+0x92>
 8004694:	4b8c      	ldr	r3, [pc, #560]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a8b      	ldr	r2, [pc, #556]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800469a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	4b89      	ldr	r3, [pc, #548]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a88      	ldr	r2, [pc, #544]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	e00b      	b.n	80046c6 <HAL_RCC_OscConfig+0xaa>
 80046ae:	4b86      	ldr	r3, [pc, #536]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a85      	ldr	r2, [pc, #532]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	4b83      	ldr	r3, [pc, #524]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a82      	ldr	r2, [pc, #520]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046c4:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d013      	beq.n	80046f6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fe fbc1 	bl	8002e54 <HAL_GetTick>
 80046d2:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d6:	f7fe fbbd 	bl	8002e54 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b64      	cmp	r3, #100	; 0x64
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e1e9      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e8:	4b77      	ldr	r3, [pc, #476]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0xba>
 80046f4:	e014      	b.n	8004720 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fe fbad 	bl	8002e54 <HAL_GetTick>
 80046fa:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046fe:	f7fe fba9 	bl	8002e54 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b64      	cmp	r3, #100	; 0x64
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e1d5      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004710:	4b6d      	ldr	r3, [pc, #436]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0xe2>
 800471c:	e000      	b.n	8004720 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d077      	beq.n	800481c <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800472c:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 030c 	and.w	r3, r3, #12
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004738:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004740:	2b08      	cmp	r3, #8
 8004742:	d126      	bne.n	8004792 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004744:	4b60      	ldr	r3, [pc, #384]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d120      	bne.n	8004792 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004750:	4b5d      	ldr	r3, [pc, #372]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_OscConfig+0x14c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d001      	beq.n	8004768 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e1a9      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004768:	4b57      	ldr	r3, [pc, #348]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6919      	ldr	r1, [r3, #16]
 8004774:	23f8      	movs	r3, #248	; 0xf8
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	494f      	ldr	r1, [pc, #316]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800478c:	4313      	orrs	r3, r2
 800478e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004790:	e044      	b.n	800481c <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d02a      	beq.n	80047f0 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479a:	4b4c      	ldr	r3, [pc, #304]	; (80048cc <HAL_RCC_OscConfig+0x2b0>)
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fe fb58 	bl	8002e54 <HAL_GetTick>
 80047a4:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a8:	f7fe fb54 	bl	8002e54 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e180      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	4b43      	ldr	r3, [pc, #268]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c6:	4b40      	ldr	r3, [pc, #256]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6919      	ldr	r1, [r3, #16]
 80047d2:	23f8      	movs	r3, #248	; 0xf8
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	fab3 f383 	clz	r3, r3
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	4937      	ldr	r1, [pc, #220]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]
 80047ee:	e015      	b.n	800481c <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_RCC_OscConfig+0x2b0>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fe fb2d 	bl	8002e54 <HAL_GetTick>
 80047fa:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fe fb29 	bl	8002e54 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e155      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004810:	4b2d      	ldr	r3, [pc, #180]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f0      	bne.n	80047fe <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d030      	beq.n	800488a <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d016      	beq.n	800485e <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004830:	4b27      	ldr	r3, [pc, #156]	; (80048d0 <HAL_RCC_OscConfig+0x2b4>)
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fe fb0d 	bl	8002e54 <HAL_GetTick>
 800483a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800483e:	f7fe fb09 	bl	8002e54 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e135      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x222>
 800485c:	e015      	b.n	800488a <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800485e:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <HAL_RCC_OscConfig+0x2b4>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fe faf6 	bl	8002e54 <HAL_GetTick>
 8004868:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486c:	f7fe faf2 	bl	8002e54 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e11e      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8086 	beq.w	80049a4 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	2300      	movs	r3, #0
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
 80048a8:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <HAL_RCC_OscConfig+0x2ac>)
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <HAL_RCC_OscConfig+0x2b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a06      	ldr	r2, [pc, #24]	; (80048d4 <HAL_RCC_OscConfig+0x2b8>)
 80048ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048be:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80048c0:	f7fe fac8 	bl	8002e54 <HAL_GetTick>
 80048c4:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048c6:	e010      	b.n	80048ea <HAL_RCC_OscConfig+0x2ce>
 80048c8:	40023800 	.word	0x40023800
 80048cc:	42470000 	.word	0x42470000
 80048d0:	42470e80 	.word	0x42470e80
 80048d4:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048d8:	f7fe fabc 	bl	8002e54 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e0e8      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048ea:	4b76      	ldr	r3, [pc, #472]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d106      	bne.n	800490c <HAL_RCC_OscConfig+0x2f0>
 80048fe:	4b72      	ldr	r3, [pc, #456]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	4a71      	ldr	r2, [pc, #452]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6713      	str	r3, [r2, #112]	; 0x70
 800490a:	e01c      	b.n	8004946 <HAL_RCC_OscConfig+0x32a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b05      	cmp	r3, #5
 8004912:	d10c      	bne.n	800492e <HAL_RCC_OscConfig+0x312>
 8004914:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	4a6b      	ldr	r2, [pc, #428]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 800491a:	f043 0304 	orr.w	r3, r3, #4
 800491e:	6713      	str	r3, [r2, #112]	; 0x70
 8004920:	4b69      	ldr	r3, [pc, #420]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	4a68      	ldr	r2, [pc, #416]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6713      	str	r3, [r2, #112]	; 0x70
 800492c:	e00b      	b.n	8004946 <HAL_RCC_OscConfig+0x32a>
 800492e:	4b66      	ldr	r3, [pc, #408]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a65      	ldr	r2, [pc, #404]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a62      	ldr	r2, [pc, #392]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004940:	f023 0304 	bic.w	r3, r3, #4
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d015      	beq.n	800497a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494e:	f7fe fa81 	bl	8002e54 <HAL_GetTick>
 8004952:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fe fa7d 	bl	8002e54 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e0a7      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496c:	4b56      	ldr	r3, [pc, #344]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ee      	beq.n	8004956 <HAL_RCC_OscConfig+0x33a>
 8004978:	e014      	b.n	80049a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fe fa6b 	bl	8002e54 <HAL_GetTick>
 800497e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fe fa67 	bl	8002e54 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e091      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004998:	4b4b      	ldr	r3, [pc, #300]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ee      	bne.n	8004982 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8086 	beq.w	8004aba <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ae:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d07d      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d162      	bne.n	8004a88 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b42      	ldr	r3, [pc, #264]	; (8004acc <HAL_RCC_OscConfig+0x4b0>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fe fa44 	bl	8002e54 <HAL_GetTick>
 80049cc:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fe fa40 	bl	8002e54 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e06c      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	4b39      	ldr	r3, [pc, #228]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	fab3 f383 	clz	r3, r3
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	1e59      	subs	r1, r3, #1
 8004a1e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	617b      	str	r3, [r7, #20]
  return(result);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	fab3 f383 	clz	r3, r3
 8004a32:	fa01 f303 	lsl.w	r3, r1, r3
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a3c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	fa93 f3a3 	rbit	r3, r3
 8004a48:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	fab3 f383 	clz	r3, r3
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	491c      	ldr	r1, [pc, #112]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5a:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <HAL_RCC_OscConfig+0x4b0>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fe f9f8 	bl	8002e54 <HAL_GetTick>
 8004a64:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fe f9f4 	bl	8002e54 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e020      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x44c>
 8004a86:	e018      	b.n	8004aba <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_OscConfig+0x4b0>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fe f9e1 	bl	8002e54 <HAL_GetTick>
 8004a92:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fe f9dd 	bl	8002e54 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e009      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa8:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x47a>
 8004ab4:	e001      	b.n	8004aba <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3738      	adds	r7, #56	; 0x38
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	42470060 	.word	0x42470060

08004ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004ade:	4b81      	ldr	r3, [pc, #516]	; (8004ce4 <HAL_RCC_ClockConfig+0x214>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d90c      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aec:	4b7d      	ldr	r3, [pc, #500]	; (8004ce4 <HAL_RCC_ClockConfig+0x214>)
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004af4:	4b7b      	ldr	r3, [pc, #492]	; (8004ce4 <HAL_RCC_ClockConfig+0x214>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0ea      	b.n	8004cdc <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b12:	4b75      	ldr	r3, [pc, #468]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	4972      	ldr	r1, [pc, #456]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8086 	beq.w	8004c3e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b6b      	ldr	r3, [pc, #428]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d119      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0c8      	b.n	8004cdc <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d003      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d107      	bne.n	8004b6a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0b8      	b.n	8004cdc <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6a:	4b5f      	ldr	r3, [pc, #380]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0b0      	b.n	8004cdc <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7a:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 0203 	bic.w	r2, r3, #3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4958      	ldr	r1, [pc, #352]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8c:	f7fe f962 	bl	8002e54 <HAL_GetTick>
 8004b90:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d112      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fe f95a 	bl	8002e54 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e094      	b.n	8004cdc <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bb2:	4b4d      	ldr	r3, [pc, #308]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d1ee      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xcc>
 8004bbe:	e03e      	b.n	8004c3e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d112      	bne.n	8004bee <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bca:	f7fe f943 	bl	8002e54 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e07d      	b.n	8004cdc <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be0:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d1ee      	bne.n	8004bca <HAL_RCC_ClockConfig+0xfa>
 8004bec:	e027      	b.n	8004c3e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d11d      	bne.n	8004c32 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf8:	f7fe f92c 	bl	8002e54 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e066      	b.n	8004cdc <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004c0e:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d1ee      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x128>
 8004c1a:	e010      	b.n	8004c3e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1c:	f7fe f91a 	bl	8002e54 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e054      	b.n	8004cdc <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c32:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ee      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004c3e:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <HAL_RCC_ClockConfig+0x214>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d20c      	bcs.n	8004c66 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4c:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <HAL_RCC_ClockConfig+0x214>)
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c54:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <HAL_RCC_ClockConfig+0x214>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d001      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e03a      	b.n	8004cdc <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	491a      	ldr	r1, [pc, #104]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c90:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4912      	ldr	r1, [pc, #72]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004ca4:	f000 f826 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004ca8:	4601      	mov	r1, r0
 8004caa:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <HAL_RCC_ClockConfig+0x218>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cb2:	23f0      	movs	r3, #240	; 0xf0
 8004cb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	fa93 f3a3 	rbit	r3, r3
 8004cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	fab3 f383 	clz	r3, r3
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <HAL_RCC_ClockConfig+0x21c>)
 8004cca:	5cd3      	ldrb	r3, [r2, r3]
 8004ccc:	fa21 f303 	lsr.w	r3, r1, r3
 8004cd0:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <HAL_RCC_ClockConfig+0x220>)
 8004cd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004cd4:	200f      	movs	r0, #15
 8004cd6:	f004 fb97 	bl	8009408 <HAL_InitTick>
  
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023c00 	.word	0x40023c00
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	080109b0 	.word	0x080109b0
 8004cf0:	20000010 	.word	0x20000010

08004cf4 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b08b      	sub	sp, #44	; 0x2c
 8004cf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d0a:	4b38      	ldr	r3, [pc, #224]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d00c      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x3c>
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d85d      	bhi.n	8004dd6 <HAL_RCC_GetSysClockFreq+0xe2>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x30>
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d003      	beq.n	8004d2a <HAL_RCC_GetSysClockFreq+0x36>
 8004d22:	e058      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d26:	623b      	str	r3, [r7, #32]
       break;
 8004d28:	e058      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d2a:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d2c:	623b      	str	r3, [r7, #32]
      break;
 8004d2e:	e055      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d30:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d38:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d3a:	4b2c      	ldr	r3, [pc, #176]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d017      	beq.n	8004d76 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004d46:	4a2a      	ldr	r2, [pc, #168]	; (8004df0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4e:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d56:	400b      	ands	r3, r1
 8004d58:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004d5c:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	6979      	ldr	r1, [r7, #20]
 8004d60:	fa91 f1a1 	rbit	r1, r1
 8004d64:	6139      	str	r1, [r7, #16]
  return(result);
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	fab1 f181 	clz	r1, r1
 8004d6c:	40cb      	lsrs	r3, r1
 8004d6e:	fb03 f302 	mul.w	r3, r3, r2
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	e016      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004d76:	4a1e      	ldr	r2, [pc, #120]	; (8004df0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d80:	6859      	ldr	r1, [r3, #4]
 8004d82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d86:	400b      	ands	r3, r1
 8004d88:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004d8c:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	fa91 f1a1 	rbit	r1, r1
 8004d94:	60b9      	str	r1, [r7, #8]
  return(result);
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	fab1 f181 	clz	r1, r1
 8004d9c:	40cb      	lsrs	r3, r1
 8004d9e:	fb03 f302 	mul.w	r3, r3, r2
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004db0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	fa93 f3a3 	rbit	r3, r3
 8004db8:	603b      	str	r3, [r7, #0]
  return(result);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	fab3 f383 	clz	r3, r3
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8004dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	623b      	str	r3, [r7, #32]
      break;
 8004dd4:	e002      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004dd8:	623b      	str	r3, [r7, #32]
      break;
 8004dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	372c      	adds	r7, #44	; 0x2c
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40023800 	.word	0x40023800
 8004df0:	00f42400 	.word	0x00f42400

08004df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000010 	.word	0x20000010

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004e12:	f7ff ffef 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e16:	4601      	mov	r1, r0
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004e24:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	fa93 f3a3 	rbit	r3, r3
 8004e2c:	603b      	str	r3, [r7, #0]
  return(result);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	fab3 f383 	clz	r3, r3
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004e3a:	5cd3      	ldrb	r3, [r2, r3]
 8004e3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	080109c0 	.word	0x080109c0

08004e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004e56:	f7ff ffcd 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8004e64:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004e68:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	fa93 f3a3 	rbit	r3, r3
 8004e70:	603b      	str	r3, [r7, #0]
  return(result);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7c:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004e7e:	5cd3      	ldrb	r3, [r2, r3]
 8004e80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	080109c0 	.word	0x080109c0

08004e94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	220f      	movs	r2, #15
 8004ea2:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 0203 	and.w	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004ed6:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <HAL_RCC_GetClockConfig+0x60>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 020f 	and.w	r2, r3, #15
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	601a      	str	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	40023c00 	.word	0x40023c00

08004ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b09c      	sub	sp, #112	; 0x70
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t tmpreg1 = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x2a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8082 	beq.w	8005026 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8004f22:	4bac      	ldr	r3, [pc, #688]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f28:	f7fd ff94 	bl	8002e54 <HAL_GetTick>
 8004f2c:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f30:	f7fd ff90 	bl	8002e54 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e1eb      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f42:	4ba5      	ldr	r3, [pc, #660]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }
    
    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01e      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f62:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8004f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f6e:	fab3 f383 	clz	r3, r3
 8004f72:	409a      	lsls	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6899      	ldr	r1, [r3, #8]
 8004f78:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004f7c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f80:	fa93 f3a3 	rbit	r3, r3
 8004f84:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f88:	fab3 f383 	clz	r3, r3
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	4991      	ldr	r1, [pc, #580]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d02a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004fa4:	4b8c      	ldr	r3, [pc, #560]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004faa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004fae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004fb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb6:	fa93 f3a3 	rbit	r3, r3
 8004fba:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8004fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc6:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	019a      	lsls	r2, r3, #6
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd8:	071b      	lsls	r3, r3, #28
 8004fda:	497f      	ldr	r1, [pc, #508]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fe2:	4b7d      	ldr	r3, [pc, #500]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe8:	f023 021f 	bic.w	r2, r3, #31
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	4979      	ldr	r1, [pc, #484]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ffa:	4b76      	ldr	r3, [pc, #472]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005000:	f7fd ff28 	bl	8002e54 <HAL_GetTick>
 8005004:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005006:	e008      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005008:	f7fd ff24 	bl	8002e54 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e17f      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800501a:	4b6f      	ldr	r3, [pc, #444]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x110>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x148>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80d7 	beq.w	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005040:	4b66      	ldr	r3, [pc, #408]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005046:	f7fd ff05 	bl	8002e54 <HAL_GetTick>
 800504a:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800504e:	f7fd ff01 	bl	8002e54 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x168>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e15c      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005060:	4b5d      	ldr	r3, [pc, #372]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800506c:	d0ef      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d04b      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800507a:	4b57      	ldr	r3, [pc, #348]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005080:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005084:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	fa93 f3a3 	rbit	r3, r3
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	fab3 f383 	clz	r3, r3
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
 800509c:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050aa:	fa93 f3a3 	rbit	r3, r3
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	fab3 f383 	clz	r3, r3
 80050b6:	409a      	lsls	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6959      	ldr	r1, [r3, #20]
 80050bc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80050c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c4:	fa93 f3a3 	rbit	r3, r3
 80050c8:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80050ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	fa01 f303 	lsl.w	r3, r1, r3
 80050d4:	431a      	orrs	r2, r3
 80050d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80050e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050ec:	fa01 f303 	lsl.w	r3, r1, r3
 80050f0:	4939      	ldr	r1, [pc, #228]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050f8:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80050fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	3b01      	subs	r3, #1
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	4933      	ldr	r1, [pc, #204]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d049      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005128:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800512c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	fa93 f3a3 	rbit	r3, r3
 8005134:	613b      	str	r3, [r7, #16]
  return(result);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	fab3 f383 	clz	r3, r3
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
 8005140:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800514a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	fa93 f3a3 	rbit	r3, r3
 8005152:	61bb      	str	r3, [r7, #24]
  return(result);
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	fab3 f383 	clz	r3, r3
 800515a:	409a      	lsls	r2, r3
 800515c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	fa93 f3a3 	rbit	r3, r3
 8005168:	623b      	str	r3, [r7, #32]
  return(result);
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	fab3 f383 	clz	r3, r3
 8005170:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6999      	ldr	r1, [r3, #24]
 800517c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	fa93 f3a3 	rbit	r3, r3
 8005188:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	fab3 f383 	clz	r3, r3
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	4910      	ldr	r1, [pc, #64]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800519e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	490b      	ldr	r1, [pc, #44]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051b8:	f7fd fe4c 	bl	8002e54 <HAL_GetTick>
 80051bc:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051be:	e00f      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051c0:	f7fd fe48 	bl	8002e54 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d908      	bls.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e0a3      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x422>
 80051d2:	bf00      	nop
 80051d4:	42470068 	.word	0x42470068
 80051d8:	40023800 	.word	0x40023800
 80051dc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051e0:	4b50      	ldr	r3, [pc, #320]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ec:	d1e8      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 8083 	beq.w	8005302 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	4b48      	ldr	r3, [pc, #288]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	4a47      	ldr	r2, [pc, #284]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520a:	6413      	str	r3, [r2, #64]	; 0x40
 800520c:	4b45      	ldr	r3, [pc, #276]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005218:	4b43      	ldr	r3, [pc, #268]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a42      	ldr	r2, [pc, #264]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800521e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005222:	6013      	str	r3, [r2, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 8005224:	f7fd fe16 	bl	8002e54 <HAL_GetTick>
 8005228:	66f8      	str	r0, [r7, #108]	; 0x6c
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800522a:	e008      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x346>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800522c:	f7fd fe12 	bl	8002e54 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x346>
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e06d      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800523e:	4b3a      	ldr	r3, [pc, #232]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x334>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	66bb      	str	r3, [r7, #104]	; 0x68
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02f      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005262:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005264:	429a      	cmp	r2, r3
 8005266:	d028      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005268:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005270:	66bb      	str	r3, [r7, #104]	; 0x68
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005272:	4b2e      	ldr	r3, [pc, #184]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005278:	4b2c      	ldr	r3, [pc, #176]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800527e:	4a29      	ldr	r2, [pc, #164]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005282:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005284:	4b27      	ldr	r3, [pc, #156]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d014      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005290:	f7fd fde0 	bl	8002e54 <HAL_GetTick>
 8005294:	66f8      	str	r0, [r7, #108]	; 0x6c
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005296:	e00a      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005298:	f7fd fddc 	bl	8002e54 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e035      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ae:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0ee      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052c6:	d10d      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80052c8:	4b16      	ldr	r3, [pc, #88]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052dc:	4911      	ldr	r1, [pc, #68]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
 80052e2:	e005      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a0e      	ldr	r2, [pc, #56]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052ee:	6093      	str	r3, [r2, #8]
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052fc:	4909      	ldr	r1, [pc, #36]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005316:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3770      	adds	r7, #112	; 0x70
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800
 8005328:	40007000 	.word	0x40007000
 800532c:	42470e40 	.word	0x42470e40
 8005330:	424711e0 	.word	0x424711e0

08005334 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e01d      	b.n	8005382 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f003 ff2d 	bl	80091b8 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2203      	movs	r2, #3
 8005362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f810 	bl	800538c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b08e      	sub	sp, #56	; 0x38
 8005390:	af04      	add	r7, sp, #16
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005394:	2300      	movs	r3, #0
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80053ac:	2376      	movs	r3, #118	; 0x76
 80053ae:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681d      	ldr	r5, [r3, #0]
 80053b4:	466c      	mov	r4, sp
 80053b6:	f107 0318 	add.w	r3, r7, #24
 80053ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053c2:	f107 030c 	add.w	r3, r7, #12
 80053c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053c8:	4628      	mov	r0, r5
 80053ca:	f002 fbd7 	bl	8007b7c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80053ce:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <HAL_SD_InitCard+0xb4>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f002 fc18 	bl	8007c0e <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80053de:	4b18      	ldr	r3, [pc, #96]	; (8005440 <HAL_SD_InitCard+0xb4>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 80053e4:	2002      	movs	r0, #2
 80053e6:	f7fd fd41 	bl	8002e6c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f001 f90a 	bl	8006604 <SD_PowerON>
 80053f0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e013      	b.n	8005438 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f001 f82f 	bl	8006474 <SD_InitCard>
 8005416:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3728      	adds	r7, #40	; 0x28
 800543c:	46bd      	mov	sp, r7
 800543e:	bdb0      	pop	{r4, r5, r7, pc}
 8005440:	422580a0 	.word	0x422580a0

08005444 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b08f      	sub	sp, #60	; 0x3c
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005452:	2300      	movs	r3, #0
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8005456:	f7fd fcfd 	bl	8002e54 <HAL_GetTick>
 800545a:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 800545c:	2300      	movs	r3, #0
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d107      	bne.n	800547a <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e177      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	f040 816a 	bne.w	800575c <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	441a      	add	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005498:	429a      	cmp	r2, r3
 800549a:	d907      	bls.n	80054ac <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e15e      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2203      	movs	r2, #3
 80054b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2200      	movs	r2, #0
 80054ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d002      	beq.n	80054ca <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	025b      	lsls	r3, r3, #9
 80054c8:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054d2:	4618      	mov	r0, r3
 80054d4:	f002 fc2f 	bl	8007d36 <SDMMC_CmdBlockLength>
 80054d8:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80054da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	431a      	orrs	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e133      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005506:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	025b      	lsls	r3, r3, #9
 800550c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800550e:	2390      	movs	r3, #144	; 0x90
 8005510:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005512:	2302      	movs	r3, #2
 8005514:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005516:	2300      	movs	r3, #0
 8005518:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800551a:	2301      	movs	r3, #1
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f107 0210 	add.w	r2, r7, #16
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f002 fbd8 	bl	8007cde <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d90a      	bls.n	800554a <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2202      	movs	r2, #2
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	f002 fc40 	bl	8007dc6 <SDMMC_CmdReadMultiBlock>
 8005546:	6378      	str	r0, [r7, #52]	; 0x34
 8005548:	e009      	b.n	800555e <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4618      	mov	r0, r3
 8005558:	f002 fc11 	bl	8007d7e <SDMMC_CmdReadSingleBlock>
 800555c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	2b00      	cmp	r3, #0
 8005562:	d04a      	beq.n	80055fa <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005574:	431a      	orrs	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e0f1      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d016      	beq.n	80055c2 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005594:	2300      	movs	r3, #0
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
 8005598:	e00d      	b.n	80055b6 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6819      	ldr	r1, [r3, #0]
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a4:	18d4      	adds	r4, r2, r3
 80055a6:	4608      	mov	r0, r1
 80055a8:	f002 fb13 	bl	8007bd2 <SDIO_ReadFIFO>
 80055ac:	4603      	mov	r3, r0
 80055ae:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	3301      	adds	r3, #1
 80055b4:	633b      	str	r3, [r7, #48]	; 0x30
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	2b07      	cmp	r3, #7
 80055ba:	d9ee      	bls.n	800559a <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	3320      	adds	r3, #32
 80055c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80055c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_SD_ReadBlocks+0x194>
 80055c8:	f7fd fc44 	bl	8002e54 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d810      	bhi.n	80055fa <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e0b7      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005600:	f240 332a 	movw	r3, #810	; 0x32a
 8005604:	4013      	ands	r3, r2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0bd      	beq.n	8005586 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d020      	beq.n	800565a <HAL_SD_ReadBlocks+0x216>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d91d      	bls.n	800565a <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	2b03      	cmp	r3, #3
 8005624:	d019      	beq.n	800565a <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f002 fc38 	bl	8007ea0 <SDMMC_CmdStopTransfer>
 8005630:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005634:	2b00      	cmp	r3, #0
 8005636:	d010      	beq.n	800565a <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005640:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	431a      	orrs	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e087      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d010      	beq.n	800568a <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	f043 0208 	orr.w	r2, r3, #8
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e06f      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d010      	beq.n	80056ba <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	f043 0202 	orr.w	r2, r3, #2
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e057      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d037      	beq.n	8005738 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	f043 0220 	orr.w	r2, r3, #32
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e03f      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f002 fa6f 	bl	8007bd2 <SDIO_ReadFIFO>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	601a      	str	r2, [r3, #0]
      tempbuff++;
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	3304      	adds	r3, #4
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <HAL_SD_ReadBlocks+0x2d2>
 8005706:	f7fd fba5 	bl	8002e54 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005712:	429a      	cmp	r2, r3
 8005714:	d810      	bhi.n	8005738 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e018      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1d1      	bne.n	80056ea <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800574e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	e006      	b.n	800576a <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
  }
}
 800576a:	4618      	mov	r0, r3
 800576c:	373c      	adds	r7, #60	; 0x3c
 800576e:	46bd      	mov	sp, r7
 8005770:	bd90      	pop	{r4, r7, pc}

08005772 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b08e      	sub	sp, #56	; 0x38
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005780:	2300      	movs	r3, #0
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8005784:	f7fd fb66 	bl	8002e54 <HAL_GetTick>
 8005788:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d107      	bne.n	80057a8 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e160      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	f040 8153 	bne.w	8005a5c <HAL_SD_WriteBlocks+0x2ea>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	441a      	add	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d907      	bls.n	80057da <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e147      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2203      	movs	r2, #3
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d002      	beq.n	80057f8 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	025b      	lsls	r3, r3, #9
 80057f6:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005800:	4618      	mov	r0, r3
 8005802:	f002 fa98 	bl	8007d36 <SDMMC_CmdBlockLength>
 8005806:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8005808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005816:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800581c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581e:	431a      	orrs	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e11c      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d90a      	bls.n	800584c <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4618      	mov	r0, r3
 8005844:	f002 fb07 	bl	8007e56 <SDMMC_CmdWriteMultiBlock>
 8005848:	6378      	str	r0, [r7, #52]	; 0x34
 800584a:	e009      	b.n	8005860 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2210      	movs	r2, #16
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	f002 fad8 	bl	8007e0e <SDMMC_CmdWriteSingleBlock>
 800585e:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005862:	2b00      	cmp	r3, #0
 8005864:	d010      	beq.n	8005888 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005876:	431a      	orrs	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0f0      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800588c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	025b      	lsls	r3, r3, #9
 8005892:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005894:	2390      	movs	r3, #144	; 0x90
 8005896:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800589c:	2300      	movs	r3, #0
 800589e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f107 0210 	add.w	r2, r7, #16
 80058ac:	4611      	mov	r1, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f002 fa15 	bl	8007cde <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80058b4:	e037      	b.n	8005926 <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, /*SDIO_FLAG_TXUNDERR |*/ SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d014      	beq.n	80058ee <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
 80058c8:	e00b      	b.n	80058e2 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d4:	4413      	add	r3, r2
 80058d6:	4619      	mov	r1, r3
 80058d8:	f002 f988 	bl	8007bec <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	3301      	adds	r3, #1
 80058e0:	633b      	str	r3, [r7, #48]	; 0x30
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	2b07      	cmp	r3, #7
 80058e6:	d9f0      	bls.n	80058ca <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	3320      	adds	r3, #32
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80058ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <HAL_SD_WriteBlocks+0x192>
 80058f4:	f7fd faae 	bl	8002e54 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005900:	429a      	cmp	r2, r3
 8005902:	d810      	bhi.n	8005926 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	431a      	orrs	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e0a1      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800592c:	f240 331a 	movw	r3, #794	; 0x31a
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0bf      	beq.n	80058b6 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d020      	beq.n	8005986 <HAL_SD_WriteBlocks+0x214>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d91d      	bls.n	8005986 <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	2b03      	cmp	r3, #3
 8005950:	d019      	beq.n	8005986 <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f002 faa2 	bl	8007ea0 <SDMMC_CmdStopTransfer>
 800595c:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	2b00      	cmp	r3, #0
 8005962:	d010      	beq.n	8005986 <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e071      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	f043 0208 	orr.w	r2, r3, #8
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e059      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f043 0202 	orr.w	r2, r3, #2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e041      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d010      	beq.n	8005a16 <HAL_SD_WriteBlocks+0x2a4>
    {
      // Clear all the static flags
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	f043 0210 	orr.w	r2, r3, #16
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e029      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_STA_STBITERR))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d010      	beq.n	8005a46 <HAL_SD_WriteBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_GENERAL_UNKNOWN_ERR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e011      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e006      	b.n	8005a6a <HAL_SD_WriteBlocks+0x2f8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3738      	adds	r7, #56	; 0x38
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 808d 	beq.w	8005baa <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005aa8:	f023 0302 	bic.w	r3, r3, #2
 8005aac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d03a      	beq.n	8005b30 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d105      	bne.n	8005ad2 <HAL_SD_IRQHandler+0x5e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d011      	beq.n	8005af6 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f002 f9e2 	bl	8007ea0 <SDMMC_CmdStopTransfer>
 8005adc:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f939 	bl	8005d68 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <HAL_SD_IRQHandler+0xac>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f917 	bl	8005d54 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8005b26:	e103      	b.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f909 	bl	8005d40 <HAL_SD_TxCpltCallback>
}
 8005b2e:	e0ff      	b.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80f9 	beq.w	8005d30 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d011      	beq.n	8005b6e <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f002 f9a6 	bl	8007ea0 <SDMMC_CmdStopTransfer>
 8005b54:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f8fd 	bl	8005d68 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f040 80da 	bne.w	8005d30 <HAL_SD_IRQHandler+0x2bc>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 80d3 	bne.w	8005d30 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0208 	bic.w	r2, r2, #8
 8005b98:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8cc 	bl	8005d40 <HAL_SD_TxCpltCallback>
}
 8005ba8:	e0c2      	b.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 ff7b 	bl	8006abe <SD_Write_IT>
}
 8005bc8:	e0b2      	b.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 ff43 	bl	8006a6e <SD_Read_IT>
}
 8005be8:	e0a2      	b.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf0:	f240 233a 	movw	r3, #570	; 0x23a
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 809a 	beq.w	8005d30 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	f043 0202 	orr.w	r2, r3, #2
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	f043 0208 	orr.w	r2, r3, #8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	f043 0210 	orr.w	r2, r3, #16
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	f043 0208 	orr.w	r2, r3, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005c96:	f023 0302 	bic.w	r3, r3, #2
 8005c9a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d036      	beq.n	8005d16 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d011      	beq.n	8005cd4 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <HAL_SD_IRQHandler+0x2c4>)
 8005cb6:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fd fa1d 	bl	80030fc <HAL_DMA_Abort_IT>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d033      	beq.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fb55 	bl	800637c <SD_DMATxAbort>
}
 8005cd2:	e02d      	b.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d011      	beq.n	8005d00 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <HAL_SD_IRQHandler+0x2c8>)
 8005ce2:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fd fa07 	bl	80030fc <HAL_DMA_Abort_IT>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01d      	beq.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fb7d 	bl	80063f8 <SD_DMARxAbort>
}
 8005cfe:	e017      	b.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f834 	bl	8005d7c <HAL_SD_AbortCallback>
}
 8005d14:	e00c      	b.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d006      	beq.n	8005d30 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f81c 	bl	8005d68 <HAL_SD_ErrorCallback>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	0800637d 	.word	0x0800637d
 8005d3c:	080063f9 	.word	0x080063f9

08005d40 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da2:	0e1b      	lsrs	r3, r3, #24
 8005da4:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	099b      	lsrs	r3, r3, #6
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	089b      	lsrs	r3, r3, #2
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd8:	0c1b      	lsrs	r3, r3, #16
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0c:	0e1b      	lsrs	r3, r3, #24
 8005e0e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e20:	0c1b      	lsrs	r3, r3, #16
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	88db      	ldrh	r3, [r3, #6]
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	09db      	lsrs	r3, r3, #7
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	099b      	lsrs	r3, r3, #6
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 8087 	bne.w	8005fb6 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	029b      	lsls	r3, r3, #10
 8005eac:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ece:	0e1b      	lsrs	r3, r3, #24
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	099b      	lsrs	r3, r3, #6
 8005edc:	f003 0303 	and.w	r3, r3, #3
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	089b      	lsrs	r3, r3, #2
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	f003 0306 	and.w	r3, r3, #6
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f44:	0a1b      	lsrs	r3, r3, #8
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	7e1b      	ldrb	r3, [r3, #24]
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	09db      	lsrs	r3, r3, #7
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	7e1b      	ldrb	r3, [r3, #24]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	3302      	adds	r3, #2
 8005f76:	2201      	movs	r2, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005f80:	fb02 f203 	mul.w	r2, r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	7a1b      	ldrb	r3, [r3, #8]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2301      	movs	r3, #1
 8005f92:	fa03 f202 	lsl.w	r2, r3, r2
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005fa2:	0a52      	lsrs	r2, r2, #9
 8005fa4:	fb02 f203 	mul.w	r2, r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
 8005fb4:	e04d      	b.n	8006052 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d138      	bne.n	8006030 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	041b      	lsls	r3, r3, #16
 8005fca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fd6:	0e1b      	lsrs	r3, r3, #24
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fee:	0c1b      	lsrs	r3, r3, #16
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006004:	0a1b      	lsrs	r3, r3, #8
 8006006:	b2db      	uxtb	r3, r3
 8006008:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	3301      	adds	r3, #1
 8006010:	029a      	lsls	r2, r3, #10
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	655a      	str	r2, [r3, #84]	; 0x54
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006024:	659a      	str	r2, [r3, #88]	; 0x58
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	661a      	str	r2, [r3, #96]	; 0x60
 800602e:	e010      	b.n	8006052 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e0c1      	b.n	80061d6 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	099b      	lsrs	r3, r3, #6
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	b2da      	uxtb	r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800606e:	b2da      	uxtb	r2, r3
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006078:	b2db      	uxtb	r3, r3
 800607a:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	7e9b      	ldrb	r3, [r3, #26]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	09db      	lsrs	r3, r3, #7
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	b2db      	uxtb	r3, r3
 800608e:	4313      	orrs	r3, r2
 8006090:	b2da      	uxtb	r2, r3
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a8:	0e1b      	lsrs	r3, r3, #24
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	09db      	lsrs	r3, r3, #7
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0303 	and.w	r3, r3, #3
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	089b      	lsrs	r3, r3, #2
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f4:	0c1b      	lsrs	r3, r3, #16
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	7fdb      	ldrb	r3, [r3, #31]
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	099b      	lsrs	r3, r3, #6
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	b2db      	uxtb	r3, r3
 800610c:	4313      	orrs	r3, r2
 800610e:	b2da      	uxtb	r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	b2db      	uxtb	r3, r3
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	b2da      	uxtb	r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	b2da      	uxtb	r2, r3
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b2db      	uxtb	r3, r3
 8006146:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	09db      	lsrs	r3, r3, #7
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	b2da      	uxtb	r2, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	099b      	lsrs	r3, r3, #6
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	b2da      	uxtb	r2, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	b2da      	uxtb	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	b2da      	uxtb	r2, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	b2da      	uxtb	r2, r3
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	085b      	lsrs	r3, r3, #1
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800623a:	b5b0      	push	{r4, r5, r7, lr}
 800623c:	b08e      	sub	sp, #56	; 0x38
 800623e:	af04      	add	r7, sp, #16
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006244:	2300      	movs	r3, #0
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2203      	movs	r2, #3
 800624c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	2b03      	cmp	r3, #3
 8006256:	d02e      	beq.n	80062b6 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625e:	d106      	bne.n	800626e <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	639a      	str	r2, [r3, #56]	; 0x38
 800626c:	e029      	b.n	80062c2 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006274:	d10a      	bne.n	800628c <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa96 	bl	80067a8 <SD_WideBus_Enable>
 800627c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
 800628a:	e01a      	b.n	80062c2 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fad5 	bl	8006842 <SD_WideBus_Disable>
 8006298:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38
 80062a6:	e00c      	b.n	80062c2 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	639a      	str	r2, [r3, #56]	; 0x38
 80062b4:	e005      	b.n	80062c2 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e024      	b.n	800632a <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681d      	ldr	r5, [r3, #0]
 8006306:	466c      	mov	r4, sp
 8006308:	f107 0318 	add.w	r3, r7, #24
 800630c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006314:	f107 030c 	add.w	r3, r7, #12
 8006318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800631a:	4628      	mov	r0, r5
 800631c:	f001 fc2e 	bl	8007b7c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3728      	adds	r7, #40	; 0x28
 800632e:	46bd      	mov	sp, r7
 8006330:	bdb0      	pop	{r4, r5, r7, pc}

08006332 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b086      	sub	sp, #24
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800633a:	2304      	movs	r3, #4
 800633c:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800633e:	2300      	movs	r3, #0
 8006340:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8006346:	f107 030c 	add.w	r3, r7, #12
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fa01 	bl	8006754 <SD_SendStatus>
 8006352:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	0a5b      	lsrs	r3, r3, #9
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d127      	bne.n	80063f0 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff ffc6 	bl	8006332 <HAL_SD_GetCardState>
 80063a6:	4603      	mov	r3, r0
 80063a8:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	2b06      	cmp	r3, #6
 80063bc:	d002      	beq.n	80063c4 <SD_DMATxAbort+0x48>
 80063be:	7afb      	ldrb	r3, [r7, #11]
 80063c0:	2b05      	cmp	r3, #5
 80063c2:	d115      	bne.n	80063f0 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 fd69 	bl	8007ea0 <SDMMC_CmdStopTransfer>
 80063ce:	4602      	mov	r2, r0
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	431a      	orrs	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff fcca 	bl	8005d7c <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 80063e8:	e002      	b.n	80063f0 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff fcbc 	bl	8005d68 <HAL_SD_ErrorCallback>
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d127      	bne.n	800646c <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff ff88 	bl	8006332 <HAL_SD_GetCardState>
 8006422:	4603      	mov	r3, r0
 8006424:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006434:	7afb      	ldrb	r3, [r7, #11]
 8006436:	2b06      	cmp	r3, #6
 8006438:	d002      	beq.n	8006440 <SD_DMARxAbort+0x48>
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	2b05      	cmp	r3, #5
 800643e:	d115      	bne.n	800646c <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f001 fd2b 	bl	8007ea0 <SDMMC_CmdStopTransfer>
 800644a:	4602      	mov	r2, r0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	431a      	orrs	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fc8c 	bl	8005d7c <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8006464:	e002      	b.n	800646c <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff fc7e 	bl	8005d68 <HAL_SD_ErrorCallback>
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006474:	b5b0      	push	{r4, r5, r7, lr}
 8006476:	b094      	sub	sp, #80	; 0x50
 8006478:	af04      	add	r7, sp, #16
 800647a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800647c:	2300      	movs	r3, #0
 800647e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8006480:	2301      	movs	r3, #1
 8006482:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f001 fbce 	bl	8007c2a <SDIO_GetPowerState>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006494:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006498:	e0b0      	b.n	80065fc <SD_InitCard+0x188>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d02f      	beq.n	8006502 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 fe14 	bl	80080d4 <SDMMC_CmdSendCID>
 80064ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <SD_InitCard+0x44>
    {
      return errorstate;
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	e0a1      	b.n	80065fc <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fbf8 	bl	8007cb4 <SDIO_GetResponse>
 80064c4:	4602      	mov	r2, r0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2104      	movs	r1, #4
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 fbef 	bl	8007cb4 <SDIO_GetResponse>
 80064d6:	4602      	mov	r2, r0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2108      	movs	r1, #8
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 fbe6 	bl	8007cb4 <SDIO_GetResponse>
 80064e8:	4602      	mov	r2, r0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	210c      	movs	r1, #12
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 fbdd 	bl	8007cb4 <SDIO_GetResponse>
 80064fa:	4602      	mov	r2, r0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	2b03      	cmp	r3, #3
 8006508:	d00d      	beq.n	8006526 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f107 020e 	add.w	r2, r7, #14
 8006512:	4611      	mov	r1, r2
 8006514:	4618      	mov	r0, r3
 8006516:	f001 fe1e 	bl	8008156 <SDMMC_CmdSetRelAdd>
 800651a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800651c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <SD_InitCard+0xb2>
    {
      return errorstate;
 8006522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006524:	e06a      	b.n	80065fc <SD_InitCard+0x188>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	2b03      	cmp	r3, #3
 800652c:	d036      	beq.n	800659c <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800652e:	89fb      	ldrh	r3, [r7, #14]
 8006530:	461a      	mov	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f001 fde6 	bl	8008114 <SDMMC_CmdSendCSD>
 8006548:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <SD_InitCard+0xe0>
    {
      return errorstate;
 8006550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006552:	e053      	b.n	80065fc <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f001 fbaa 	bl	8007cb4 <SDIO_GetResponse>
 8006560:	4602      	mov	r2, r0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2104      	movs	r1, #4
 800656c:	4618      	mov	r0, r3
 800656e:	f001 fba1 	bl	8007cb4 <SDIO_GetResponse>
 8006572:	4602      	mov	r2, r0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2108      	movs	r1, #8
 800657e:	4618      	mov	r0, r3
 8006580:	f001 fb98 	bl	8007cb4 <SDIO_GetResponse>
 8006584:	4602      	mov	r2, r0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	210c      	movs	r1, #12
 8006590:	4618      	mov	r0, r3
 8006592:	f001 fb8f 	bl	8007cb4 <SDIO_GetResponse>
 8006596:	4602      	mov	r2, r0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2104      	movs	r1, #4
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fb86 	bl	8007cb4 <SDIO_GetResponse>
 80065a8:	4603      	mov	r3, r0
 80065aa:	0d1a      	lsrs	r2, r3, #20
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80065b0:	f107 0310 	add.w	r3, r7, #16
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fbea 	bl	8005d90 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	461a      	mov	r2, r3
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	4608      	mov	r0, r1
 80065ce:	f001 fc8b 	bl	8007ee8 <SDMMC_CmdSelDesel>
 80065d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80065d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <SD_InitCard+0x16a>
  {
    return errorstate;
 80065da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065dc:	e00e      	b.n	80065fc <SD_InitCard+0x188>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681d      	ldr	r5, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	466c      	mov	r4, sp
 80065e6:	f103 0210 	add.w	r2, r3, #16
 80065ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80065ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80065f0:	3304      	adds	r3, #4
 80065f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065f4:	4628      	mov	r0, r5
 80065f6:	f001 fac1 	bl	8007b7c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3740      	adds	r7, #64	; 0x40
 8006600:	46bd      	mov	sp, r7
 8006602:	bdb0      	pop	{r4, r5, r7, pc}

08006604 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f001 fc86 	bl	8007f32 <SDMMC_CmdGoIdleState>
 8006626:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <SD_PowerON+0x2e>
  {
    return errorstate;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	e08c      	b.n	800674c <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f001 fc9b 	bl	8007f72 <SDMMC_CmdOperCond>
 800663c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d03d      	beq.n	80066c0 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800664a:	e032      	b.n	80066b2 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	60ba      	str	r2, [r7, #8]
 8006652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006656:	4293      	cmp	r3, r2
 8006658:	d102      	bne.n	8006660 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800665a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800665e:	e075      	b.n	800674c <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f001 fca4 	bl	8007fb4 <SDMMC_CmdAppCommand>
 800666c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006674:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006678:	e068      	b.n	800674c <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f001 fcbb 	bl	8007ffc <SDMMC_CmdAppOperCommand>
 8006686:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800668e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006692:	e05b      	b.n	800674c <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fb0a 	bl	8007cb4 <SDIO_GetResponse>
 80066a0:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	0fdb      	lsrs	r3, r3, #31
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <SD_PowerON+0xaa>
 80066aa:	2301      	movs	r3, #1
 80066ac:	e000      	b.n	80066b0 <SD_PowerON+0xac>
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0c9      	beq.n	800664c <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	645a      	str	r2, [r3, #68]	; 0x44
 80066be:	e044      	b.n	800674a <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80066c6:	e031      	b.n	800672c <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	60ba      	str	r2, [r7, #8]
 80066ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d102      	bne.n	80066dc <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80066d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066da:	e037      	b.n	800674c <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 fc66 	bl	8007fb4 <SDMMC_CmdAppCommand>
 80066e8:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <SD_PowerON+0xf0>
      {
        return errorstate;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	e02b      	b.n	800674c <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 fc7d 	bl	8007ffc <SDMMC_CmdAppOperCommand>
 8006702:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <SD_PowerON+0x10a>
      {
        return errorstate;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	e01e      	b.n	800674c <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2100      	movs	r1, #0
 8006714:	4618      	mov	r0, r3
 8006716:	f001 facd 	bl	8007cb4 <SDIO_GetResponse>
 800671a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	0fdb      	lsrs	r3, r3, #31
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <SD_PowerON+0x124>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <SD_PowerON+0x126>
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0ca      	beq.n	80066c8 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	645a      	str	r2, [r3, #68]	; 0x44
 8006742:	e002      	b.n	800674a <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d102      	bne.n	800676e <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8006768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800676c:	e018      	b.n	80067a0 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006776:	041b      	lsls	r3, r3, #16
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f001 fd0e 	bl	800819c <SDMMC_CmdSendStatus>
 8006780:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <SD_SendStatus+0x38>
  {
    return errorstate;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	e009      	b.n	80067a0 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fa8e 	bl	8007cb4 <SDIO_GetResponse>
 8006798:	4602      	mov	r2, r0
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 fa76 	bl	8007cb4 <SDIO_GetResponse>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067d2:	d102      	bne.n	80067da <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80067d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067d8:	e02f      	b.n	800683a <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80067da:	f107 030c 	add.w	r3, r7, #12
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f87b 	bl	80068dc <SD_FindSCR>
 80067e6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	e023      	b.n	800683a <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01c      	beq.n	8006836 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	041b      	lsls	r3, r3, #16
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f001 fbd3 	bl	8007fb4 <SDMMC_CmdAppCommand>
 800680e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	e00f      	b.n	800683a <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2102      	movs	r1, #2
 8006820:	4618      	mov	r0, r3
 8006822:	f001 fc10 	bl	8008046 <SDMMC_CmdBusWidth>
 8006826:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	e003      	b.n	800683a <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8006832:	2300      	movs	r3, #0
 8006834:	e001      	b.n	800683a <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006836:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b086      	sub	sp, #24
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2100      	movs	r1, #0
 800685c:	4618      	mov	r0, r3
 800685e:	f001 fa29 	bl	8007cb4 <SDIO_GetResponse>
 8006862:	4603      	mov	r3, r0
 8006864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800686c:	d102      	bne.n	8006874 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800686e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006872:	e02f      	b.n	80068d4 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006874:	f107 030c 	add.w	r3, r7, #12
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f82e 	bl	80068dc <SD_FindSCR>
 8006880:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	e023      	b.n	80068d4 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01c      	beq.n	80068d0 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689e:	041b      	lsls	r3, r3, #16
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f001 fb86 	bl	8007fb4 <SDMMC_CmdAppCommand>
 80068a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	e00f      	b.n	80068d4 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 fbc3 	bl	8008046 <SDMMC_CmdBusWidth>
 80068c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	e003      	b.n	80068d4 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e001      	b.n	80068d4 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b08f      	sub	sp, #60	; 0x3c
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80068ea:	f7fc fab3 	bl	8002e54 <HAL_GetTick>
 80068ee:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2108      	movs	r1, #8
 8006902:	4618      	mov	r0, r3
 8006904:	f001 fa17 	bl	8007d36 <SDMMC_CmdBlockLength>
 8006908:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	e0a8      	b.n	8006a66 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	041b      	lsls	r3, r3, #16
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f001 fb47 	bl	8007fb4 <SDMMC_CmdAppCommand>
 8006926:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <SD_FindSCR+0x56>
  {
    return errorstate;
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	e099      	b.n	8006a66 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006936:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8006938:	2308      	movs	r3, #8
 800693a:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800693c:	2330      	movs	r3, #48	; 0x30
 800693e:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006940:	2302      	movs	r3, #2
 8006942:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006944:	2300      	movs	r3, #0
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006948:	2301      	movs	r3, #1
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f107 0214 	add.w	r2, r7, #20
 8006954:	4611      	mov	r1, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f9c1 	bl	8007cde <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fb94 	bl	800808e <SDMMC_CmdSendSCR>
 8006966:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	2b00      	cmp	r3, #0
 800696c:	d022      	beq.n	80069b4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	e079      	b.n	8006a66 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00e      	beq.n	800699e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	f107 020c 	add.w	r2, r7, #12
 800698c:	18d4      	adds	r4, r2, r3
 800698e:	4608      	mov	r0, r1
 8006990:	f001 f91f 	bl	8007bd2 <SDIO_ReadFIFO>
 8006994:	4603      	mov	r3, r0
 8006996:	6023      	str	r3, [r4, #0]
      index++;
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	3301      	adds	r3, #1
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800699e:	f7fc fa59 	bl	8002e54 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ac:	d102      	bne.n	80069b4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80069ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80069b2:	e058      	b.n	8006a66 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ba:	f240 432a 	movw	r3, #1066	; 0x42a
 80069be:	4013      	ands	r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0d6      	beq.n	8006972 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2208      	movs	r2, #8
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80069da:	2308      	movs	r3, #8
 80069dc:	e043      	b.n	8006a66 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2202      	movs	r2, #2
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e036      	b.n	8006a66 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8006a0e:	2320      	movs	r3, #32
 8006a10:	e029      	b.n	8006a66 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	061a      	lsls	r2, r3, #24
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a28:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006a32:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006a3e:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006a40:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	061a      	lsls	r2, r3, #24
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a4e:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006a58:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	0e1b      	lsrs	r3, r3, #24
 8006a5e:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	373c      	adds	r7, #60	; 0x3c
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd90      	pop	{r4, r7, pc}

08006a6e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006a6e:	b590      	push	{r4, r7, lr}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e00d      	b.n	8006aa2 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6819      	ldr	r1, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	18d4      	adds	r4, r2, r3
 8006a92:	4608      	mov	r0, r1
 8006a94:	f001 f89d 	bl	8007bd2 <SDIO_ReadFIFO>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b07      	cmp	r3, #7
 8006aa6:	d9ee      	bls.n	8006a86 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	f103 0220 	add.w	r2, r3, #32
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd90      	pop	{r4, r7, pc}

08006abe <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e00b      	b.n	8006aee <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	f001 f882 	bl	8007bec <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b07      	cmp	r3, #7
 8006af2:	d9f0      	bls.n	8006ad6 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f103 0220 	add.w	r2, r3, #32
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e01d      	b.n	8006b58 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d106      	bne.n	8006b36 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f002 fb8d 	bl	8009250 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f000 f955 	bl	8006df8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d122      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d11b      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f06f 0202 	mvn.w	r2, #2
 8006bc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f003 0303 	and.w	r3, r3, #3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f8ee 	bl	8006dba <HAL_TIM_IC_CaptureCallback>
 8006bde:	e005      	b.n	8006bec <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f8e0 	bl	8006da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f8f1 	bl	8006dce <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d122      	bne.n	8006c46 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d11b      	bne.n	8006c46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f06f 0204 	mvn.w	r2, #4
 8006c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f8c4 	bl	8006dba <HAL_TIM_IC_CaptureCallback>
 8006c32:	e005      	b.n	8006c40 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8b6 	bl	8006da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f8c7 	bl	8006dce <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0308 	and.w	r3, r3, #8
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d122      	bne.n	8006c9a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d11b      	bne.n	8006c9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f06f 0208 	mvn.w	r2, #8
 8006c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	f003 0303 	and.w	r3, r3, #3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f89a 	bl	8006dba <HAL_TIM_IC_CaptureCallback>
 8006c86:	e005      	b.n	8006c94 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f88c 	bl	8006da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f89d 	bl	8006dce <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	2b10      	cmp	r3, #16
 8006ca6:	d122      	bne.n	8006cee <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f003 0310 	and.w	r3, r3, #16
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d11b      	bne.n	8006cee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f06f 0210 	mvn.w	r2, #16
 8006cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f870 	bl	8006dba <HAL_TIM_IC_CaptureCallback>
 8006cda:	e005      	b.n	8006ce8 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f862 	bl	8006da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f873 	bl	8006dce <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d10e      	bne.n	8006d1a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d107      	bne.n	8006d1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f06f 0201 	mvn.w	r2, #1
 8006d12:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7fc f80d 	bl	8002d34 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d24:	2b80      	cmp	r3, #128	; 0x80
 8006d26:	d10e      	bne.n	8006d46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d32:	2b80      	cmp	r3, #128	; 0x80
 8006d34:	d107      	bne.n	8006d46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f90d 	bl	8006f60 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d10e      	bne.n	8006d72 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b40      	cmp	r3, #64	; 0x40
 8006d60:	d107      	bne.n	8006d72 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d6a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f838 	bl	8006de2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d10e      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d107      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f06f 0220 	mvn.w	r2, #32
 8006d96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f8d7 	bl	8006f4c <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a44      	ldr	r2, [pc, #272]	; (8006f20 <TIM_Base_SetConfig+0x128>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d013      	beq.n	8006e3c <TIM_Base_SetConfig+0x44>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1a:	d00f      	beq.n	8006e3c <TIM_Base_SetConfig+0x44>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a41      	ldr	r2, [pc, #260]	; (8006f24 <TIM_Base_SetConfig+0x12c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00b      	beq.n	8006e3c <TIM_Base_SetConfig+0x44>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a40      	ldr	r2, [pc, #256]	; (8006f28 <TIM_Base_SetConfig+0x130>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d007      	beq.n	8006e3c <TIM_Base_SetConfig+0x44>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a3f      	ldr	r2, [pc, #252]	; (8006f2c <TIM_Base_SetConfig+0x134>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <TIM_Base_SetConfig+0x44>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a3e      	ldr	r2, [pc, #248]	; (8006f30 <TIM_Base_SetConfig+0x138>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d101      	bne.n	8006e40 <TIM_Base_SetConfig+0x48>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <TIM_Base_SetConfig+0x4a>
 8006e40:	2300      	movs	r3, #0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d008      	beq.n	8006e58 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a31      	ldr	r2, [pc, #196]	; (8006f20 <TIM_Base_SetConfig+0x128>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d02b      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e66:	d027      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a2e      	ldr	r2, [pc, #184]	; (8006f24 <TIM_Base_SetConfig+0x12c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d023      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a2d      	ldr	r2, [pc, #180]	; (8006f28 <TIM_Base_SetConfig+0x130>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d01f      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a2c      	ldr	r2, [pc, #176]	; (8006f2c <TIM_Base_SetConfig+0x134>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d01b      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a2b      	ldr	r2, [pc, #172]	; (8006f30 <TIM_Base_SetConfig+0x138>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d017      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a2a      	ldr	r2, [pc, #168]	; (8006f34 <TIM_Base_SetConfig+0x13c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d013      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a29      	ldr	r2, [pc, #164]	; (8006f38 <TIM_Base_SetConfig+0x140>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00f      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a28      	ldr	r2, [pc, #160]	; (8006f3c <TIM_Base_SetConfig+0x144>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00b      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a27      	ldr	r2, [pc, #156]	; (8006f40 <TIM_Base_SetConfig+0x148>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d007      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <TIM_Base_SetConfig+0x14c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_Base_SetConfig+0xc0>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a25      	ldr	r2, [pc, #148]	; (8006f48 <TIM_Base_SetConfig+0x150>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d101      	bne.n	8006ebc <TIM_Base_SetConfig+0xc4>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <TIM_Base_SetConfig+0xc6>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d008      	beq.n	8006ed4 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <TIM_Base_SetConfig+0x128>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_Base_SetConfig+0x102>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a0e      	ldr	r2, [pc, #56]	; (8006f30 <TIM_Base_SetConfig+0x138>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d101      	bne.n	8006efe <TIM_Base_SetConfig+0x106>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <TIM_Base_SetConfig+0x108>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	615a      	str	r2, [r3, #20]
}
 8006f12:	bf00      	nop
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40010000 	.word	0x40010000
 8006f24:	40000400 	.word	0x40000400
 8006f28:	40000800 	.word	0x40000800
 8006f2c:	40000c00 	.word	0x40000c00
 8006f30:	40010400 	.word	0x40010400
 8006f34:	40014000 	.word	0x40014000
 8006f38:	40014400 	.word	0x40014400
 8006f3c:	40014800 	.word	0x40014800
 8006f40:	40001800 	.word	0x40001800
 8006f44:	40001c00 	.word	0x40001c00
 8006f48:	40002000 	.word	0x40002000

08006f4c <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e03f      	b.n	8007006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f002 f97a 	bl	8009294 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2224      	movs	r2, #36	; 0x24
 8006fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fb6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fb9f 	bl	80076fc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695a      	ldr	r2, [r3, #20]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fdc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fec:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b088      	sub	sp, #32
 8007012:	af02      	add	r7, sp, #8
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	603b      	str	r3, [r7, #0]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b20      	cmp	r3, #32
 800702c:	f040 8083 	bne.w	8007136 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_UART_Transmit+0x2e>
 8007036:	88fb      	ldrh	r3, [r7, #6]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e07b      	b.n	8007138 <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_UART_Transmit+0x40>
 800704a:	2302      	movs	r3, #2
 800704c:	e074      	b.n	8007138 <HAL_UART_Transmit+0x12a>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2221      	movs	r2, #33	; 0x21
 8007060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007064:	f7fb fef6 	bl	8002e54 <HAL_GetTick>
 8007068:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	88fa      	ldrh	r2, [r7, #6]
 800706e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8007076:	e042      	b.n	80070fe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708e:	d122      	bne.n	80070d6 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2200      	movs	r2, #0
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f9ac 	bl	80073f8 <UART_WaitOnFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e046      	b.n	8007138 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070bc:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3302      	adds	r3, #2
 80070ca:	60bb      	str	r3, [r7, #8]
 80070cc:	e017      	b.n	80070fe <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	3301      	adds	r3, #1
 80070d2:	60bb      	str	r3, [r7, #8]
 80070d4:	e013      	b.n	80070fe <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2200      	movs	r2, #0
 80070de:	2180      	movs	r1, #128	; 0x80
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f989 	bl	80073f8 <UART_WaitOnFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e023      	b.n	8007138 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	60ba      	str	r2, [r7, #8]
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1b7      	bne.n	8007078 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2200      	movs	r2, #0
 8007110:	2140      	movs	r1, #64	; 0x40
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f970 	bl	80073f8 <UART_WaitOnFlagUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e00a      	b.n	8007138 <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	e000      	b.n	8007138 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007136:	2302      	movs	r3, #2
  }
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b20      	cmp	r3, #32
 8007158:	d138      	bne.n	80071cc <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_UART_Receive_IT+0x26>
 8007160:	88fb      	ldrh	r3, [r7, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e031      	b.n	80071ce <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_UART_Receive_IT+0x38>
 8007174:	2302      	movs	r3, #2
 8007176:	e02a      	b.n	80071ce <HAL_UART_Receive_IT+0x8e>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	88fa      	ldrh	r2, [r7, #6]
 800718a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2222      	movs	r2, #34	; 0x22
 800719c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695a      	ldr	r2, [r3, #20]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80071c6:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	e000      	b.n	80071ce <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 80071cc:	2302      	movs	r3, #2
  }
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10d      	bne.n	800722e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_UART_IRQHandler+0x52>
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f9d0 	bl	80075cc <UART_Receive_IT>
      return;
 800722c:	e0cb      	b.n	80073c6 <HAL_UART_IRQHandler+0x1ea>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80ab 	beq.w	800738c <HAL_UART_IRQHandler+0x1b0>
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d105      	bne.n	800724c <HAL_UART_IRQHandler+0x70>
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80a0 	beq.w	800738c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_UART_IRQHandler+0x90>
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007264:	f043 0201 	orr.w	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <HAL_UART_IRQHandler+0xb0>
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007284:	f043 0202 	orr.w	r2, r3, #2
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <HAL_UART_IRQHandler+0xd0>
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a4:	f043 0204 	orr.w	r2, r3, #4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <HAL_UART_IRQHandler+0xf0>
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c4:	f043 0208 	orr.w	r2, r3, #8
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d077      	beq.n	80073c4 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <HAL_UART_IRQHandler+0x112>
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f96f 	bl	80075cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf14      	ite	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	2300      	moveq	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <HAL_UART_IRQHandler+0x13a>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d031      	beq.n	800737a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8b8 	bl	800748c <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d023      	beq.n	8007372 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695a      	ldr	r2, [r3, #20]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007338:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733e:	2b00      	cmp	r3, #0
 8007340:	d013      	beq.n	800736a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007346:	4a21      	ldr	r2, [pc, #132]	; (80073cc <HAL_UART_IRQHandler+0x1f0>)
 8007348:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734e:	4618      	mov	r0, r3
 8007350:	f7fb fed4 	bl	80030fc <HAL_DMA_Abort_IT>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e00e      	b.n	8007388 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f83a 	bl	80073e4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	e00a      	b.n	8007388 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f836 	bl	80073e4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e006      	b.n	8007388 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f832 	bl	80073e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007386:	e01d      	b.n	80073c4 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	bf00      	nop
    return;
 800738a:	e01b      	b.n	80073c4 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007392:	2b00      	cmp	r3, #0
 8007394:	d008      	beq.n	80073a8 <HAL_UART_IRQHandler+0x1cc>
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f8a5 	bl	80074f0 <UART_Transmit_IT>
    return;
 80073a6:	e00e      	b.n	80073c6 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <HAL_UART_IRQHandler+0x1ea>
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f8ed 	bl	800759c <UART_EndTransmit_IT>
    return;
 80073c2:	e000      	b.n	80073c6 <HAL_UART_IRQHandler+0x1ea>
    return;
 80073c4:	bf00      	nop
  }
}
 80073c6:	3720      	adds	r7, #32
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	080074c9 	.word	0x080074c9

080073d0 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007408:	e02c      	b.n	8007464 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007410:	d028      	beq.n	8007464 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <UART_WaitOnFlagUntilTimeout+0x30>
 8007418:	f7fb fd1c 	bl	8002e54 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	429a      	cmp	r2, r3
 8007426:	d21d      	bcs.n	8007464 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007436:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695a      	ldr	r2, [r3, #20]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e00f      	b.n	8007484 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	4013      	ands	r3, r2
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	bf0c      	ite	eq
 8007474:	2301      	moveq	r3, #1
 8007476:	2300      	movne	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	461a      	mov	r2, r3
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	429a      	cmp	r2, r3
 8007480:	d0c3      	beq.n	800740a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	695a      	ldr	r2, [r3, #20]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff ff7e 	bl	80073e4 <HAL_UART_ErrorCallback>
}
 80074e8:	bf00      	nop
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b21      	cmp	r3, #33	; 0x21
 8007502:	d144      	bne.n	800758e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750c:	d11a      	bne.n	8007544 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007522:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d105      	bne.n	8007538 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	1c9a      	adds	r2, r3, #2
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	621a      	str	r2, [r3, #32]
 8007536:	e00e      	b.n	8007556 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	621a      	str	r2, [r3, #32]
 8007542:	e008      	b.n	8007556 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	1c59      	adds	r1, r3, #1
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6211      	str	r1, [r2, #32]
 800754e:	781a      	ldrb	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800755a:	b29b      	uxth	r3, r3
 800755c:	3b01      	subs	r3, #1
 800755e:	b29b      	uxth	r3, r3
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	4619      	mov	r1, r3
 8007564:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10f      	bne.n	800758a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007578:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007588:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	e000      	b.n	8007590 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800758e:	2302      	movs	r3, #2
  }
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b2:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff ff07 	bl	80073d0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]


  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b22      	cmp	r3, #34	; 0x22
 80075de:	f040 8088 	bne.w	80076f2 <UART_Receive_IT+0x126>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	d123      	bne.n	8007634 <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10e      	bne.n	8007618 <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	1c9a      	adds	r2, r3, #2
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	629a      	str	r2, [r3, #40]	; 0x28
 8007616:	e029      	b.n	800766c <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	b29b      	uxth	r3, r3
 8007620:	b2db      	uxtb	r3, r3
 8007622:	b29a      	uxth	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	629a      	str	r2, [r3, #40]	; 0x28
 8007632:	e01b      	b.n	800766c <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6858      	ldr	r0, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	1c59      	adds	r1, r3, #1
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6291      	str	r1, [r2, #40]	; 0x28
 800764c:	b2c2      	uxtb	r2, r0
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	e00c      	b.n	800766c <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	1c58      	adds	r0, r3, #1
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	6288      	str	r0, [r1, #40]	; 0x28
 8007664:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29b      	uxth	r3, r3
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	4619      	mov	r1, r3
 800767a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800767c:	2b00      	cmp	r3, #0
 800767e:	d136      	bne.n	80076ee <UART_Receive_IT+0x122>
    {
        //This allows the buffer to resize based on length of the Ground Station commands over UART
        if((*(huart->pRxBuffPtr-1)!= 0) && (huart->RxXferSize == 4)){
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	3b01      	subs	r3, #1
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d017      	beq.n	80076bc <UART_Receive_IT+0xf0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007690:	2b04      	cmp	r3, #4
 8007692:	d113      	bne.n	80076bc <UART_Receive_IT+0xf0>
            huart->RxXferCount = *(huart->pRxBuffPtr-1) + 1;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	3b01      	subs	r3, #1
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	3301      	adds	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	85da      	strh	r2, [r3, #46]	; 0x2e
            huart->RxXferSize = *(huart->pRxBuffPtr-1) + 5;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076aa:	3b01      	subs	r3, #1
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3305      	adds	r3, #5
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	859a      	strh	r2, [r3, #44]	; 0x2c
            return HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	e01b      	b.n	80076f4 <UART_Receive_IT+0x128>
        }
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695a      	ldr	r2, [r3, #20]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0201 	bic.w	r2, r2, #1
 80076da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7fb fb5d 	bl	8002da4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e002      	b.n	80076f4 <UART_Receive_IT+0x128>
    }
    return HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e000      	b.n	80076f4 <UART_Receive_IT+0x128>
  }
  else
  {
    return HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
  }

#endif
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076fc:	b5b0      	push	{r4, r5, r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007716:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007738:	f023 030c 	bic.w	r3, r3, #12
 800773c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	4313      	orrs	r3, r2
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007770:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800778c:	f040 80e4 	bne.w	8007958 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4aab      	ldr	r2, [pc, #684]	; (8007a44 <UART_SetConfig+0x348>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d004      	beq.n	80077a4 <UART_SetConfig+0xa8>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4aaa      	ldr	r2, [pc, #680]	; (8007a48 <UART_SetConfig+0x34c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d16c      	bne.n	800787e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80077a4:	f7fd fb54 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 80077a8:	4602      	mov	r2, r0
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009a      	lsls	r2, r3, #2
 80077b2:	441a      	add	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	4aa3      	ldr	r2, [pc, #652]	; (8007a4c <UART_SetConfig+0x350>)
 80077c0:	fba2 2303 	umull	r2, r3, r2, r3
 80077c4:	095b      	lsrs	r3, r3, #5
 80077c6:	011c      	lsls	r4, r3, #4
 80077c8:	f7fd fb42 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 80077cc:	4602      	mov	r2, r0
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009a      	lsls	r2, r3, #2
 80077d6:	441a      	add	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	fbb2 f5f3 	udiv	r5, r2, r3
 80077e2:	f7fd fb35 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 80077e6:	4602      	mov	r2, r0
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009a      	lsls	r2, r3, #2
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fc:	4a93      	ldr	r2, [pc, #588]	; (8007a4c <UART_SetConfig+0x350>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	2264      	movs	r2, #100	; 0x64
 8007806:	fb02 f303 	mul.w	r3, r2, r3
 800780a:	1aeb      	subs	r3, r5, r3
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	3332      	adds	r3, #50	; 0x32
 8007810:	4a8e      	ldr	r2, [pc, #568]	; (8007a4c <UART_SetConfig+0x350>)
 8007812:	fba2 2303 	umull	r2, r3, r2, r3
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800781e:	441c      	add	r4, r3
 8007820:	f7fd fb16 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8007824:	4602      	mov	r2, r0
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009a      	lsls	r2, r3, #2
 800782e:	441a      	add	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	fbb2 f5f3 	udiv	r5, r2, r3
 800783a:	f7fd fb09 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 800783e:	4602      	mov	r2, r0
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009a      	lsls	r2, r3, #2
 8007848:	441a      	add	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	4a7d      	ldr	r2, [pc, #500]	; (8007a4c <UART_SetConfig+0x350>)
 8007856:	fba2 2303 	umull	r2, r3, r2, r3
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	2264      	movs	r2, #100	; 0x64
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	1aeb      	subs	r3, r5, r3
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	3332      	adds	r3, #50	; 0x32
 8007868:	4a78      	ldr	r2, [pc, #480]	; (8007a4c <UART_SetConfig+0x350>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	f003 0207 	and.w	r2, r3, #7
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4422      	add	r2, r4
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	e154      	b.n	8007b28 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800787e:	f7fd fac5 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007882:	4602      	mov	r2, r0
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009a      	lsls	r2, r3, #2
 800788c:	441a      	add	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	fbb2 f3f3 	udiv	r3, r2, r3
 8007898:	4a6c      	ldr	r2, [pc, #432]	; (8007a4c <UART_SetConfig+0x350>)
 800789a:	fba2 2303 	umull	r2, r3, r2, r3
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	011c      	lsls	r4, r3, #4
 80078a2:	f7fd fab3 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80078a6:	4602      	mov	r2, r0
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009a      	lsls	r2, r3, #2
 80078b0:	441a      	add	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80078bc:	f7fd faa6 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80078c0:	4602      	mov	r2, r0
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009a      	lsls	r2, r3, #2
 80078ca:	441a      	add	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	4a5d      	ldr	r2, [pc, #372]	; (8007a4c <UART_SetConfig+0x350>)
 80078d8:	fba2 2303 	umull	r2, r3, r2, r3
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	2264      	movs	r2, #100	; 0x64
 80078e0:	fb02 f303 	mul.w	r3, r2, r3
 80078e4:	1aeb      	subs	r3, r5, r3
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	3332      	adds	r3, #50	; 0x32
 80078ea:	4a58      	ldr	r2, [pc, #352]	; (8007a4c <UART_SetConfig+0x350>)
 80078ec:	fba2 2303 	umull	r2, r3, r2, r3
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078f8:	441c      	add	r4, r3
 80078fa:	f7fd fa87 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80078fe:	4602      	mov	r2, r0
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	009a      	lsls	r2, r3, #2
 8007908:	441a      	add	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	fbb2 f5f3 	udiv	r5, r2, r3
 8007914:	f7fd fa7a 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007918:	4602      	mov	r2, r0
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009a      	lsls	r2, r3, #2
 8007922:	441a      	add	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	fbb2 f3f3 	udiv	r3, r2, r3
 800792e:	4a47      	ldr	r2, [pc, #284]	; (8007a4c <UART_SetConfig+0x350>)
 8007930:	fba2 2303 	umull	r2, r3, r2, r3
 8007934:	095b      	lsrs	r3, r3, #5
 8007936:	2264      	movs	r2, #100	; 0x64
 8007938:	fb02 f303 	mul.w	r3, r2, r3
 800793c:	1aeb      	subs	r3, r5, r3
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	3332      	adds	r3, #50	; 0x32
 8007942:	4a42      	ldr	r2, [pc, #264]	; (8007a4c <UART_SetConfig+0x350>)
 8007944:	fba2 2303 	umull	r2, r3, r2, r3
 8007948:	095b      	lsrs	r3, r3, #5
 800794a:	f003 0207 	and.w	r2, r3, #7
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4422      	add	r2, r4
 8007954:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007956:	e0e7      	b.n	8007b28 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a39      	ldr	r2, [pc, #228]	; (8007a44 <UART_SetConfig+0x348>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <UART_SetConfig+0x270>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a38      	ldr	r2, [pc, #224]	; (8007a48 <UART_SetConfig+0x34c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d171      	bne.n	8007a50 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800796c:	f7fd fa70 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8007970:	4602      	mov	r2, r0
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009a      	lsls	r2, r3, #2
 800797a:	441a      	add	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	4a31      	ldr	r2, [pc, #196]	; (8007a4c <UART_SetConfig+0x350>)
 8007988:	fba2 2303 	umull	r2, r3, r2, r3
 800798c:	095b      	lsrs	r3, r3, #5
 800798e:	011c      	lsls	r4, r3, #4
 8007990:	f7fd fa5e 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8007994:	4602      	mov	r2, r0
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009a      	lsls	r2, r3, #2
 800799e:	441a      	add	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	fbb2 f5f3 	udiv	r5, r2, r3
 80079aa:	f7fd fa51 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 80079ae:	4602      	mov	r2, r0
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009a      	lsls	r2, r3, #2
 80079b8:	441a      	add	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	4a21      	ldr	r2, [pc, #132]	; (8007a4c <UART_SetConfig+0x350>)
 80079c6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	2264      	movs	r2, #100	; 0x64
 80079ce:	fb02 f303 	mul.w	r3, r2, r3
 80079d2:	1aeb      	subs	r3, r5, r3
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	3332      	adds	r3, #50	; 0x32
 80079d8:	4a1c      	ldr	r2, [pc, #112]	; (8007a4c <UART_SetConfig+0x350>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079e4:	441c      	add	r4, r3
 80079e6:	f7fd fa33 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009a      	lsls	r2, r3, #2
 80079f4:	441a      	add	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8007a00:	f7fd fa26 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8007a04:	4602      	mov	r2, r0
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009a      	lsls	r2, r3, #2
 8007a0e:	441a      	add	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1a:	4a0c      	ldr	r2, [pc, #48]	; (8007a4c <UART_SetConfig+0x350>)
 8007a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	2264      	movs	r2, #100	; 0x64
 8007a24:	fb02 f303 	mul.w	r3, r2, r3
 8007a28:	1aeb      	subs	r3, r5, r3
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	3332      	adds	r3, #50	; 0x32
 8007a2e:	4a07      	ldr	r2, [pc, #28]	; (8007a4c <UART_SetConfig+0x350>)
 8007a30:	fba2 2303 	umull	r2, r3, r2, r3
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	f003 020f 	and.w	r2, r3, #15
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4422      	add	r2, r4
 8007a40:	609a      	str	r2, [r3, #8]
 8007a42:	e071      	b.n	8007b28 <UART_SetConfig+0x42c>
 8007a44:	40011000 	.word	0x40011000
 8007a48:	40011400 	.word	0x40011400
 8007a4c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007a50:	f7fd f9dc 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007a54:	4602      	mov	r2, r0
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009a      	lsls	r2, r3, #2
 8007a5e:	441a      	add	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6a:	4a31      	ldr	r2, [pc, #196]	; (8007b30 <UART_SetConfig+0x434>)
 8007a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	011c      	lsls	r4, r3, #4
 8007a74:	f7fd f9ca 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009a      	lsls	r2, r3, #2
 8007a82:	441a      	add	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	fbb2 f5f3 	udiv	r5, r2, r3
 8007a8e:	f7fd f9bd 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007a92:	4602      	mov	r2, r0
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	009a      	lsls	r2, r3, #2
 8007a9c:	441a      	add	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa8:	4a21      	ldr	r2, [pc, #132]	; (8007b30 <UART_SetConfig+0x434>)
 8007aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007aae:	095b      	lsrs	r3, r3, #5
 8007ab0:	2264      	movs	r2, #100	; 0x64
 8007ab2:	fb02 f303 	mul.w	r3, r2, r3
 8007ab6:	1aeb      	subs	r3, r5, r3
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	3332      	adds	r3, #50	; 0x32
 8007abc:	4a1c      	ldr	r2, [pc, #112]	; (8007b30 <UART_SetConfig+0x434>)
 8007abe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ac8:	441c      	add	r4, r3
 8007aca:	f7fd f99f 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009a      	lsls	r2, r3, #2
 8007ad8:	441a      	add	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	fbb2 f5f3 	udiv	r5, r2, r3
 8007ae4:	f7fd f992 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009a      	lsls	r2, r3, #2
 8007af2:	441a      	add	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afe:	4a0c      	ldr	r2, [pc, #48]	; (8007b30 <UART_SetConfig+0x434>)
 8007b00:	fba2 2303 	umull	r2, r3, r2, r3
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	2264      	movs	r2, #100	; 0x64
 8007b08:	fb02 f303 	mul.w	r3, r2, r3
 8007b0c:	1aeb      	subs	r3, r5, r3
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	3332      	adds	r3, #50	; 0x32
 8007b12:	4a07      	ldr	r2, [pc, #28]	; (8007b30 <UART_SetConfig+0x434>)
 8007b14:	fba2 2303 	umull	r2, r3, r2, r3
 8007b18:	095b      	lsrs	r3, r3, #5
 8007b1a:	f003 020f 	and.w	r2, r3, #15
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4422      	add	r2, r4
 8007b24:	609a      	str	r2, [r3, #8]
}
 8007b26:	e7ff      	b.n	8007b28 <UART_SetConfig+0x42c>
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b30:	51eb851f 	.word	0x51eb851f

08007b34 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e016      	b.n	8007b74 <HAL_WWDG_Init+0x40>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fc3c 	bl	80093c4 <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b58:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	ea42 0103 	orr.w	r1, r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	f107 001c 	add.w	r0, r7, #28
 8007b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007b92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007b94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007b96:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007b9a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007b9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007ba2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007ba6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007bb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	b004      	add	sp, #16
 8007bd0:	4770      	bx	lr

08007bd2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2203      	movs	r2, #3
 8007c1a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0303 	and.w	r3, r3, #3
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c64:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007c6a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007c70:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007c80:	f023 030f 	bic.w	r3, r3, #15
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	b2db      	uxtb	r3, r3
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	4413      	add	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
}  
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d04:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007d0a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007d10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0

}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b088      	sub	sp, #32
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007d48:	2310      	movs	r3, #16
 8007d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d58:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d5a:	f107 0308 	add.w	r3, r7, #8
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ff70 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007d66:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007d6a:	2110      	movs	r1, #16
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa63 	bl	8008238 <SDMMC_GetCmdResp1>
 8007d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d74:	69fb      	ldr	r3, [r7, #28]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3720      	adds	r7, #32
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b088      	sub	sp, #32
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007d90:	2311      	movs	r3, #17
 8007d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007da0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007da2:	f107 0308 	add.w	r3, r7, #8
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff ff4c 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007dae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007db2:	2111      	movs	r1, #17
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa3f 	bl	8008238 <SDMMC_GetCmdResp1>
 8007dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b088      	sub	sp, #32
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007dd8:	2312      	movs	r3, #18
 8007dda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ddc:	2340      	movs	r3, #64	; 0x40
 8007dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007de8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dea:	f107 0308 	add.w	r3, r7, #8
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff ff28 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007df6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007dfa:	2112      	movs	r1, #18
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa1b 	bl	8008238 <SDMMC_GetCmdResp1>
 8007e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e04:	69fb      	ldr	r3, [r7, #28]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b088      	sub	sp, #32
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007e20:	2318      	movs	r3, #24
 8007e22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e24:	2340      	movs	r3, #64	; 0x40
 8007e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e30:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e32:	f107 0308 	add.w	r3, r7, #8
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff ff04 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007e3e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007e42:	2118      	movs	r1, #24
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f9f7 	bl	8008238 <SDMMC_GetCmdResp1>
 8007e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b088      	sub	sp, #32
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007e68:	2319      	movs	r3, #25
 8007e6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e6c:	2340      	movs	r3, #64	; 0x40
 8007e6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e78:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e7a:	f107 0308 	add.w	r3, r7, #8
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff fee0 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007e86:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007e8a:	2119      	movs	r1, #25
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f9d3 	bl	8008238 <SDMMC_GetCmdResp1>
 8007e92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e94:	69fb      	ldr	r3, [r7, #28]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3720      	adds	r7, #32
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007eb0:	230c      	movs	r3, #12
 8007eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ec2:	f107 0308 	add.w	r3, r7, #8
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff febc 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8007ece:	4a05      	ldr	r2, [pc, #20]	; (8007ee4 <SDMMC_CmdStopTransfer+0x44>)
 8007ed0:	210c      	movs	r1, #12
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f9b0 	bl	8008238 <SDMMC_GetCmdResp1>
 8007ed8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007eda:	69fb      	ldr	r3, [r7, #28]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	05f5e100 	.word	0x05f5e100

08007ee8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007efc:	2307      	movs	r3, #7
 8007efe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f00:	2340      	movs	r3, #64	; 0x40
 8007f02:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f0c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f0e:	f107 0310 	add.w	r3, r7, #16
 8007f12:	4619      	mov	r1, r3
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff fe96 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007f1a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007f1e:	2107      	movs	r1, #7
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f989 	bl	8008238 <SDMMC_GetCmdResp1>
 8007f26:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3728      	adds	r7, #40	; 0x28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b088      	sub	sp, #32
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f52:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f54:	f107 0308 	add.w	r3, r7, #8
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff fe73 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f93f 	bl	80081e4 <SDMMC_GetCmdError>
 8007f66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f68:	69fb      	ldr	r3, [r7, #28]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b088      	sub	sp, #32
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007f7e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007f82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007f84:	2308      	movs	r3, #8
 8007f86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f88:	2340      	movs	r3, #64	; 0x40
 8007f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f94:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f96:	f107 0308 	add.w	r3, r7, #8
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fe52 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fb10 	bl	80085c8 <SDMMC_GetCmdResp7>
 8007fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007faa:	69fb      	ldr	r3, [r7, #28]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3720      	adds	r7, #32
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007fc6:	2337      	movs	r3, #55	; 0x37
 8007fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fca:	2340      	movs	r3, #64	; 0x40
 8007fcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fd8:	f107 0308 	add.w	r3, r7, #8
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff fe31 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007fe4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007fe8:	2137      	movs	r1, #55	; 0x37
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f924 	bl	8008238 <SDMMC_GetCmdResp1>
 8007ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ff2:	69fb      	ldr	r3, [r7, #28]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3720      	adds	r7, #32
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008006:	2300      	movs	r3, #0
 8008008:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008016:	2329      	movs	r3, #41	; 0x29
 8008018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800801a:	2340      	movs	r3, #64	; 0x40
 800801c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800801e:	2300      	movs	r3, #0
 8008020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008026:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008028:	f107 0308 	add.w	r3, r7, #8
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff fe09 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fa25 	bl	8008484 <SDMMC_GetCmdResp3>
 800803a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800803c:	69fb      	ldr	r3, [r7, #28]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3720      	adds	r7, #32
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b088      	sub	sp, #32
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008050:	2300      	movs	r3, #0
 8008052:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008058:	2306      	movs	r3, #6
 800805a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800805c:	2340      	movs	r3, #64	; 0x40
 800805e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008068:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800806a:	f107 0308 	add.w	r3, r7, #8
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff fde8 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008076:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800807a:	2106      	movs	r1, #6
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f8db 	bl	8008238 <SDMMC_GetCmdResp1>
 8008082:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008084:	69fb      	ldr	r3, [r7, #28]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b088      	sub	sp, #32
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008096:	2300      	movs	r3, #0
 8008098:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800809e:	2333      	movs	r3, #51	; 0x33
 80080a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080a2:	2340      	movs	r3, #64	; 0x40
 80080a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ae:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080b0:	f107 0308 	add.w	r3, r7, #8
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff fdc5 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80080bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80080c0:	2133      	movs	r1, #51	; 0x33
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f8b8 	bl	8008238 <SDMMC_GetCmdResp1>
 80080c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ca:	69fb      	ldr	r3, [r7, #28]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3720      	adds	r7, #32
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80080dc:	2300      	movs	r3, #0
 80080de:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80080e4:	2302      	movs	r3, #2
 80080e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80080e8:	23c0      	movs	r3, #192	; 0xc0
 80080ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff fda2 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f97e 	bl	8008404 <SDMMC_GetCmdResp2>
 8008108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800810a:	69fb      	ldr	r3, [r7, #28]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3720      	adds	r7, #32
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008126:	2309      	movs	r3, #9
 8008128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800812a:	23c0      	movs	r3, #192	; 0xc0
 800812c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008136:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008138:	f107 0308 	add.w	r3, r7, #8
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff fd81 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f95d 	bl	8008404 <SDMMC_GetCmdResp2>
 800814a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800814c:	69fb      	ldr	r3, [r7, #28]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b088      	sub	sp, #32
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008160:	2300      	movs	r3, #0
 8008162:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008168:	2303      	movs	r3, #3
 800816a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800816c:	2340      	movs	r3, #64	; 0x40
 800816e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008170:	2300      	movs	r3, #0
 8008172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008178:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff fd60 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	2103      	movs	r1, #3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f9ae 	bl	80084ec <SDMMC_GetCmdResp6>
 8008190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008192:	69fb      	ldr	r3, [r7, #28]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80081ae:	230d      	movs	r3, #13
 80081b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081b2:	2340      	movs	r3, #64	; 0x40
 80081b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081b6:	2300      	movs	r3, #0
 80081b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081be:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081c0:	f107 0308 	add.w	r3, r7, #8
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff fd3d 	bl	8007c46 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80081cc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80081d0:	210d      	movs	r1, #13
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f830 	bl	8008238 <SDMMC_GetCmdResp1>
 80081d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081da:	69fb      	ldr	r3, [r7, #28]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3720      	adds	r7, #32
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80081e4:	b490      	push	{r4, r7}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081ec:	4b10      	ldr	r3, [pc, #64]	; (8008230 <SDMMC_GetCmdError+0x4c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a10      	ldr	r2, [pc, #64]	; (8008234 <SDMMC_GetCmdError+0x50>)
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	0a5b      	lsrs	r3, r3, #9
 80081f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80081fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008200:	4623      	mov	r3, r4
 8008202:	1e5c      	subs	r4, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d102      	bne.n	800820e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008208:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800820c:	e00a      	b.n	8008224 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0f2      	beq.n	8008200 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bc90      	pop	{r4, r7}
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	20000010 	.word	0x20000010
 8008234:	10624dd3 	.word	0x10624dd3

08008238 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008238:	b590      	push	{r4, r7, lr}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	460b      	mov	r3, r1
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008246:	4b6c      	ldr	r3, [pc, #432]	; (80083f8 <SDMMC_GetCmdResp1+0x1c0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a6c      	ldr	r2, [pc, #432]	; (80083fc <SDMMC_GetCmdResp1+0x1c4>)
 800824c:	fba2 2303 	umull	r2, r3, r2, r3
 8008250:	0a5b      	lsrs	r3, r3, #9
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008258:	4623      	mov	r3, r4
 800825a:	1e5c      	subs	r4, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008264:	e0c3      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0f2      	beq.n	8008258 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	f003 0304 	and.w	r3, r3, #4
 800827a:	2b00      	cmp	r3, #0
 800827c:	d004      	beq.n	8008288 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2204      	movs	r2, #4
 8008282:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008284:	2304      	movs	r3, #4
 8008286:	e0b2      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800829a:	2301      	movs	r3, #1
 800829c:	e0a7      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff fcfb 	bl	8007c9a <SDIO_GetCommandResponse>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d001      	beq.n	80082b2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e09d      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80082b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80082ba:	2100      	movs	r1, #0
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f7ff fcf9 	bl	8007cb4 <SDIO_GetResponse>
 80082c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	4b4e      	ldr	r3, [pc, #312]	; (8008400 <SDMMC_GetCmdResp1+0x1c8>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e08d      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	da02      	bge.n	80082de <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80082d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082dc:	e087      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80082e8:	2340      	movs	r3, #64	; 0x40
 80082ea:	e080      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80082f6:	2380      	movs	r3, #128	; 0x80
 80082f8:	e079      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008308:	e071      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008318:	e069      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008328:	e061      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008338:	e059      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008348:	e051      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008358:	e049      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008368:	e041      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8008374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008378:	e039      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008388:	e031      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008394:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008398:	e029      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80083a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80083a8:	e021      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80083b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80083b8:	e019      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80083c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80083c8:	e011      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80083d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80083d8:	e009      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f003 0308 	and.w	r3, r3, #8
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80083e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80083e8:	e001      	b.n	80083ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80083ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	371c      	adds	r7, #28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd90      	pop	{r4, r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000010 	.word	0x20000010
 80083fc:	10624dd3 	.word	0x10624dd3
 8008400:	fdffe008 	.word	0xfdffe008

08008404 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008404:	b490      	push	{r4, r7}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800840c:	4b1b      	ldr	r3, [pc, #108]	; (800847c <SDMMC_GetCmdResp2+0x78>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a1b      	ldr	r2, [pc, #108]	; (8008480 <SDMMC_GetCmdResp2+0x7c>)
 8008412:	fba2 2303 	umull	r2, r3, r2, r3
 8008416:	0a5b      	lsrs	r3, r3, #9
 8008418:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800841c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008420:	4623      	mov	r3, r4
 8008422:	1e5c      	subs	r4, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008428:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800842c:	e020      	b.n	8008470 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f2      	beq.n	8008420 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2204      	movs	r2, #4
 800844a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800844c:	2304      	movs	r3, #4
 800844e:	e00f      	b.n	8008470 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008462:	2301      	movs	r3, #1
 8008464:	e004      	b.n	8008470 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800846c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bc90      	pop	{r4, r7}
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000010 	.word	0x20000010
 8008480:	10624dd3 	.word	0x10624dd3

08008484 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008484:	b490      	push	{r4, r7}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800848c:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <SDMMC_GetCmdResp3+0x60>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <SDMMC_GetCmdResp3+0x64>)
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	0a5b      	lsrs	r3, r3, #9
 8008498:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800849c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80084a0:	4623      	mov	r3, r4
 80084a2:	1e5c      	subs	r4, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084ac:	e015      	b.n	80084da <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0f2      	beq.n	80084a0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084be:	f003 0304 	and.w	r3, r3, #4
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2204      	movs	r2, #4
 80084ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084cc:	2304      	movs	r3, #4
 80084ce:	e004      	b.n	80084da <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc90      	pop	{r4, r7}
 80084e2:	4770      	bx	lr
 80084e4:	20000010 	.word	0x20000010
 80084e8:	10624dd3 	.word	0x10624dd3

080084ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	460b      	mov	r3, r1
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084fa:	4b31      	ldr	r3, [pc, #196]	; (80085c0 <SDMMC_GetCmdResp6+0xd4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a31      	ldr	r2, [pc, #196]	; (80085c4 <SDMMC_GetCmdResp6+0xd8>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	0a5b      	lsrs	r3, r3, #9
 8008506:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800850a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800850e:	4623      	mov	r3, r4
 8008510:	1e5c      	subs	r4, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008516:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800851a:	e04c      	b.n	80085b6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008520:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0f2      	beq.n	800850e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b00      	cmp	r3, #0
 8008532:	d004      	beq.n	800853e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2204      	movs	r2, #4
 8008538:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800853a:	2304      	movs	r3, #4
 800853c:	e03b      	b.n	80085b6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008550:	2301      	movs	r3, #1
 8008552:	e030      	b.n	80085b6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7ff fba0 	bl	8007c9a <SDIO_GetCommandResponse>
 800855a:	4603      	mov	r3, r0
 800855c:	461a      	mov	r2, r3
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	4293      	cmp	r3, r2
 8008562:	d001      	beq.n	8008568 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008564:	2301      	movs	r3, #1
 8008566:	e026      	b.n	80085b6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800856e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7ff fb9e 	bl	8007cb4 <SDIO_GetResponse>
 8008578:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	0c1b      	lsrs	r3, r3, #16
 8008588:	b29a      	uxth	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800858e:	2300      	movs	r3, #0
 8008590:	e011      	b.n	80085b6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800859c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085a0:	e009      	b.n	80085b6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80085ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085b0:	e001      	b.n	80085b6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80085b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd90      	pop	{r4, r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000010 	.word	0x20000010
 80085c4:	10624dd3 	.word	0x10624dd3

080085c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80085c8:	b490      	push	{r4, r7}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085d0:	4b18      	ldr	r3, [pc, #96]	; (8008634 <SDMMC_GetCmdResp7+0x6c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a18      	ldr	r2, [pc, #96]	; (8008638 <SDMMC_GetCmdResp7+0x70>)
 80085d6:	fba2 2303 	umull	r2, r3, r2, r3
 80085da:	0a5b      	lsrs	r3, r3, #9
 80085dc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80085e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80085e4:	4623      	mov	r3, r4
 80085e6:	1e5c      	subs	r4, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d102      	bne.n	80085f2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085f0:	e01a      	b.n	8008628 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0f2      	beq.n	80085e4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2240      	movs	r2, #64	; 0x40
 800860e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008610:	2304      	movs	r3, #4
 8008612:	e009      	b.n	8008628 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2240      	movs	r2, #64	; 0x40
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008626:	2300      	movs	r3, #0
  
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bc90      	pop	{r4, r7}
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20000010 	.word	0x20000010
 8008638:	10624dd3 	.word	0x10624dd3

0800863c <_write>:
//
//	return _n;
//}

int _write(int file, char *data, int len)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d00a      	beq.n	8008664 <_write+0x28>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b02      	cmp	r3, #2
 8008652:	d007      	beq.n	8008664 <_write+0x28>
   {
      errno = EBADF;
 8008654:	f003 fc54 	bl	800bf00 <__errno>
 8008658:	4603      	mov	r3, r0
 800865a:	2209      	movs	r2, #9
 800865c:	601a      	str	r2, [r3, #0]
      return -1;
 800865e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008662:	e010      	b.n	8008686 <_write+0x4a>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit((UART_HandleTypeDef *)COMM, (uint8_t*)data, len, 1000);
 8008664:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <_write+0x54>)
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	b29a      	uxth	r2, r3
 800866c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	f7fe fccc 	bl	800700e <HAL_UART_Transmit>
 8008676:	4603      	mov	r3, r0
 8008678:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <_write+0x48>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	e000      	b.n	8008686 <_write+0x4a>
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000000 	.word	0x20000000

08008694 <SystemClock_Config>:
*/

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b0a0      	sub	sp, #128	; 0x80
 8008698:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800869a:	2300      	movs	r3, #0
 800869c:	60bb      	str	r3, [r7, #8]
 800869e:	4b3b      	ldr	r3, [pc, #236]	; (800878c <SystemClock_Config+0xf8>)
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	4a3a      	ldr	r2, [pc, #232]	; (800878c <SystemClock_Config+0xf8>)
 80086a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086a8:	6413      	str	r3, [r2, #64]	; 0x40
 80086aa:	4b38      	ldr	r3, [pc, #224]	; (800878c <SystemClock_Config+0xf8>)
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086b2:	60bb      	str	r3, [r7, #8]
 80086b4:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80086b6:	2300      	movs	r3, #0
 80086b8:	607b      	str	r3, [r7, #4]
 80086ba:	4b35      	ldr	r3, [pc, #212]	; (8008790 <SystemClock_Config+0xfc>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80086c2:	4a33      	ldr	r2, [pc, #204]	; (8008790 <SystemClock_Config+0xfc>)
 80086c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	4b31      	ldr	r3, [pc, #196]	; (8008790 <SystemClock_Config+0xfc>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80086d2:	607b      	str	r3, [r7, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80086d6:	2305      	movs	r3, #5
 80086d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80086da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80086e0:	2301      	movs	r3, #1
 80086e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80086e4:	2302      	movs	r3, #2
 80086e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80086e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80086ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80086ee:	2310      	movs	r3, #16
 80086f0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 80086f2:	23c0      	movs	r3, #192	; 0xc0
 80086f4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80086f6:	2302      	movs	r3, #2
 80086f8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80086fa:	2304      	movs	r3, #4
 80086fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80086fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008702:	4618      	mov	r0, r3
 8008704:	f7fb ff8a 	bl	800461c <HAL_RCC_OscConfig>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800870e:	f7fa fb23 	bl	8002d58 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008712:	230f      	movs	r3, #15
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008716:	2302      	movs	r3, #2
 8008718:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800871a:	2300      	movs	r3, #0
 800871c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800871e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008728:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800872a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800872e:	2103      	movs	r1, #3
 8008730:	4618      	mov	r0, r3
 8008732:	f7fc f9cd 	bl	8004ad0 <HAL_RCC_ClockConfig>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800873c:	f7fa fb0c 	bl	8002d58 <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008740:	2320      	movs	r3, #32
 8008742:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800874a:	f107 030c 	add.w	r3, r7, #12
 800874e:	4618      	mov	r0, r3
 8008750:	f7fc fbd2 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800875a:	f7fa fafd 	bl	8002d58 <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800875e:	f7fc fb49 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8008762:	4603      	mov	r3, r0
 8008764:	4a0b      	ldr	r2, [pc, #44]	; (8008794 <SystemClock_Config+0x100>)
 8008766:	fba2 2303 	umull	r2, r3, r2, r3
 800876a:	099b      	lsrs	r3, r3, #6
 800876c:	4618      	mov	r0, r3
 800876e:	f7fa fc9c 	bl	80030aa <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008772:	2004      	movs	r0, #4
 8008774:	f7fa fca6 	bl	80030c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8008778:	2200      	movs	r2, #0
 800877a:	210f      	movs	r1, #15
 800877c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008780:	f7fa fc69 	bl	8003056 <HAL_NVIC_SetPriority>
}
 8008784:	bf00      	nop
 8008786:	3780      	adds	r7, #128	; 0x80
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	40023800 	.word	0x40023800
 8008790:	40007000 	.word	0x40007000
 8008794:	10624dd3 	.word	0x10624dd3

08008798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08e      	sub	sp, #56	; 0x38
 800879c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800879e:	2300      	movs	r3, #0
 80087a0:	623b      	str	r3, [r7, #32]
 80087a2:	4bb2      	ldr	r3, [pc, #712]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	4ab1      	ldr	r2, [pc, #708]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087a8:	f043 0310 	orr.w	r3, r3, #16
 80087ac:	6313      	str	r3, [r2, #48]	; 0x30
 80087ae:	4baf      	ldr	r3, [pc, #700]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	f003 0310 	and.w	r3, r3, #16
 80087b6:	623b      	str	r3, [r7, #32]
 80087b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80087ba:	2300      	movs	r3, #0
 80087bc:	61fb      	str	r3, [r7, #28]
 80087be:	4bab      	ldr	r3, [pc, #684]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c2:	4aaa      	ldr	r2, [pc, #680]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087c8:	6313      	str	r3, [r2, #48]	; 0x30
 80087ca:	4ba8      	ldr	r3, [pc, #672]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087d6:	2300      	movs	r3, #0
 80087d8:	61bb      	str	r3, [r7, #24]
 80087da:	4ba4      	ldr	r3, [pc, #656]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	4aa3      	ldr	r2, [pc, #652]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087e0:	f043 0304 	orr.w	r3, r3, #4
 80087e4:	6313      	str	r3, [r2, #48]	; 0x30
 80087e6:	4ba1      	ldr	r3, [pc, #644]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	f003 0304 	and.w	r3, r3, #4
 80087ee:	61bb      	str	r3, [r7, #24]
 80087f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	4b9d      	ldr	r3, [pc, #628]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	4a9c      	ldr	r2, [pc, #624]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 80087fc:	f043 0320 	orr.w	r3, r3, #32
 8008800:	6313      	str	r3, [r2, #48]	; 0x30
 8008802:	4b9a      	ldr	r3, [pc, #616]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800880e:	2300      	movs	r3, #0
 8008810:	613b      	str	r3, [r7, #16]
 8008812:	4b96      	ldr	r3, [pc, #600]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	4a95      	ldr	r2, [pc, #596]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881c:	6313      	str	r3, [r2, #48]	; 0x30
 800881e:	4b93      	ldr	r3, [pc, #588]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008826:	613b      	str	r3, [r7, #16]
 8008828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	4b8f      	ldr	r3, [pc, #572]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	4a8e      	ldr	r2, [pc, #568]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	6313      	str	r3, [r2, #48]	; 0x30
 800883a:	4b8c      	ldr	r3, [pc, #560]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008846:	2300      	movs	r3, #0
 8008848:	60bb      	str	r3, [r7, #8]
 800884a:	4b88      	ldr	r3, [pc, #544]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 800884c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884e:	4a87      	ldr	r2, [pc, #540]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008850:	f043 0302 	orr.w	r3, r3, #2
 8008854:	6313      	str	r3, [r2, #48]	; 0x30
 8008856:	4b85      	ldr	r3, [pc, #532]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	60bb      	str	r3, [r7, #8]
 8008860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
 8008866:	4b81      	ldr	r3, [pc, #516]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	4a80      	ldr	r2, [pc, #512]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 800886c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008870:	6313      	str	r3, [r2, #48]	; 0x30
 8008872:	4b7e      	ldr	r3, [pc, #504]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887a:	607b      	str	r3, [r7, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800887e:	2300      	movs	r3, #0
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	4b7a      	ldr	r3, [pc, #488]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008886:	4a79      	ldr	r2, [pc, #484]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008888:	f043 0308 	orr.w	r3, r3, #8
 800888c:	6313      	str	r3, [r2, #48]	; 0x30
 800888e:	4b77      	ldr	r3, [pc, #476]	; (8008a6c <MX_GPIO_Init+0x2d4>)
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAN4_VGY_GPIO_Port, PAN4_VGY_Pin, GPIO_PIN_RESET);
 800889a:	2200      	movs	r2, #0
 800889c:	2104      	movs	r1, #4
 800889e:	4874      	ldr	r0, [pc, #464]	; (8008a70 <MX_GPIO_Init+0x2d8>)
 80088a0:	f7fa ff8a 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin, GPIO_PIN_SET);
 80088a4:	2201      	movs	r2, #1
 80088a6:	f242 0130 	movw	r1, #8240	; 0x2030
 80088aa:	4872      	ldr	r0, [pc, #456]	; (8008a74 <MX_GPIO_Init+0x2dc>)
 80088ac:	f7fa ff84 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 80088b0:	2201      	movs	r2, #1
 80088b2:	f640 61ff 	movw	r1, #3839	; 0xeff
 80088b6:	4870      	ldr	r0, [pc, #448]	; (8008a78 <MX_GPIO_Init+0x2e0>)
 80088b8:	f7fa ff7e 	bl	80037b8 <HAL_GPIO_WritePin>
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBAND_CS_GPIO_Port, SBAND_CS_Pin, GPIO_PIN_RESET);
 80088bc:	2200      	movs	r2, #0
 80088be:	2140      	movs	r1, #64	; 0x40
 80088c0:	486e      	ldr	r0, [pc, #440]	; (8008a7c <MX_GPIO_Init+0x2e4>)
 80088c2:	f7fa ff79 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 80088c6:	2200      	movs	r2, #0
 80088c8:	f24e 217c 	movw	r1, #57980	; 0xe27c
 80088cc:	486c      	ldr	r0, [pc, #432]	; (8008a80 <MX_GPIO_Init+0x2e8>)
 80088ce:	f7fa ff73 	bl	80037b8 <HAL_GPIO_WritePin>
  // Turn-off the second MAG sensor due lack of I2C arbitration MAG1/MAG2
  HAL_GPIO_WritePin(GPIOH, MAG1_EN_Pin|MAG2_EN_Pin, GPIO_PIN_SET);
#endif

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80088d2:	2201      	movs	r2, #1
 80088d4:	2110      	movs	r1, #16
 80088d6:	486b      	ldr	r0, [pc, #428]	; (8008a84 <MX_GPIO_Init+0x2ec>)
 80088d8:	f7fa ff6e 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 80088dc:	2200      	movs	r2, #0
 80088de:	21e6      	movs	r1, #230	; 0xe6
 80088e0:	4869      	ldr	r0, [pc, #420]	; (8008a88 <MX_GPIO_Init+0x2f0>)
 80088e2:	f7fa ff69 	bl	80037b8 <HAL_GPIO_WritePin>
                          |PAN3_VGY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 80088e6:	2200      	movs	r2, #0
 80088e8:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80088ec:	4867      	ldr	r0, [pc, #412]	; (8008a8c <MX_GPIO_Init+0x2f4>)
 80088ee:	f7fa ff63 	bl	80037b8 <HAL_GPIO_WritePin>
                          |OBC_OUT2_Pin|OBC_OUT1_Pin, GPIO_PIN_RESET);

  /* Camera power supply disable by default */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT1_Pin, GPIO_PIN_RESET);
 80088f2:	2200      	movs	r2, #0
 80088f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80088f8:	4864      	ldr	r0, [pc, #400]	; (8008a8c <MX_GPIO_Init+0x2f4>)
 80088fa:	f7fa ff5d 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_EN_Pin|OBC_OUT4_Pin, GPIO_PIN_RESET);
 80088fe:	2200      	movs	r2, #0
 8008900:	2148      	movs	r1, #72	; 0x48
 8008902:	4863      	ldr	r0, [pc, #396]	; (8008a90 <MX_GPIO_Init+0x2f8>)
 8008904:	f7fa ff58 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PAN4_VGY_Pin */
  GPIO_InitStruct.Pin = PAN4_VGY_Pin;
 8008908:	2304      	movs	r3, #4
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800890c:	2311      	movs	r3, #17
 800890e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008910:	2300      	movs	r3, #0
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008914:	2300      	movs	r3, #0
 8008916:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN4_VGY_GPIO_Port, &GPIO_InitStruct);
 8008918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800891c:	4619      	mov	r1, r3
 800891e:	4854      	ldr	r0, [pc, #336]	; (8008a70 <MX_GPIO_Init+0x2d8>)
 8008920:	f7fa fd9e 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IRQ_Pin */
  GPIO_InitStruct.Pin = M2_IRQ_Pin;
 8008924:	2340      	movs	r3, #64	; 0x40
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008928:	4b5a      	ldr	r3, [pc, #360]	; (8008a94 <MX_GPIO_Init+0x2fc>)
 800892a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892c:	2300      	movs	r3, #0
 800892e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008934:	4619      	mov	r1, r3
 8008936:	484e      	ldr	r0, [pc, #312]	; (8008a70 <MX_GPIO_Init+0x2d8>)
 8008938:	f7fa fd92 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IRQ_Pin */
  GPIO_InitStruct.Pin = M1_IRQ_Pin;
 800893c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008942:	4b54      	ldr	r3, [pc, #336]	; (8008a94 <MX_GPIO_Init+0x2fc>)
 8008944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008946:	2300      	movs	r3, #0
 8008948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800894a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800894e:	4619      	mov	r1, r3
 8008950:	4849      	ldr	r0, [pc, #292]	; (8008a78 <MX_GPIO_Init+0x2e0>)
 8008952:	f7fa fd85 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS2_Pin LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin;
 8008956:	f242 0330 	movw	r3, #8240	; 0x2030
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800895c:	2301      	movs	r3, #1
 800895e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008960:	2300      	movs	r3, #0
 8008962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008964:	2300      	movs	r3, #0
 8008966:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800896c:	4619      	mov	r1, r3
 800896e:	4841      	ldr	r0, [pc, #260]	; (8008a74 <MX_GPIO_Init+0x2dc>)
 8008970:	f7fa fd76 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS1_Pin PAN6_CS2_Pin PAN6_CS1_Pin PAN1_CS2_Pin
                           PAN1_CS1_Pin PAN2_CS2_Pin PAN2_CS1_Pin PAN3_CS2_Pin
                           PAN3_CS1_Pin PAN4_CS2_Pin PAN4_CS1_Pin */
  GPIO_InitStruct.Pin = PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8008974:	f640 63ff 	movw	r3, #3839	; 0xeff
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800897a:	2301      	movs	r3, #1
 800897c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800897e:	2300      	movs	r3, #0
 8008980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008982:	2300      	movs	r3, #0
 8008984:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800898a:	4619      	mov	r1, r3
 800898c:	483a      	ldr	r0, [pc, #232]	; (8008a78 <MX_GPIO_Init+0x2e0>)
 800898e:	f7fa fd67 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_CS_Pin */
  GPIO_InitStruct.Pin = SBAND_CS_Pin;
 8008992:	2340      	movs	r3, #64	; 0x40
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008996:	2301      	movs	r3, #1
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800899a:	2300      	movs	r3, #0
 800899c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800899e:	2300      	movs	r3, #0
 80089a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SBAND_CS_GPIO_Port, &GPIO_InitStruct);
 80089a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089a6:	4619      	mov	r1, r3
 80089a8:	4834      	ldr	r0, [pc, #208]	; (8008a7c <MX_GPIO_Init+0x2e4>)
 80089aa:	f7fa fd59 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_IRQ_Pin */
  GPIO_InitStruct.Pin = SBAND_IRQ_Pin;
 80089ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80089b4:	4b37      	ldr	r3, [pc, #220]	; (8008a94 <MX_GPIO_Init+0x2fc>)
 80089b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SBAND_IRQ_GPIO_Port, &GPIO_InitStruct);
 80089bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089c0:	4619      	mov	r1, r3
 80089c2:	482e      	ldr	r0, [pc, #184]	; (8008a7c <MX_GPIO_Init+0x2e4>)
 80089c4:	f7fa fd4c 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_DIR1_Pin PAN5_DIR2_Pin PAN6_DIR1_Pin PAN6_DIR2_Pin
                           ACC1_EN_Pin ACC2_EN_Pin MAG1_EN_Pin MAG2_EN_Pin
                           PAN4_DIR2_Pin */
  GPIO_InitStruct.Pin = PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 80089c8:	f24e 033c 	movw	r3, #57404	; 0xe03c
 80089cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |MAG1_EN_Pin|MAG2_EN_Pin
                          |PAN4_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089ce:	2301      	movs	r3, #1
 80089d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089d6:	2300      	movs	r3, #0
 80089d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80089da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089de:	4619      	mov	r1, r3
 80089e0:	4827      	ldr	r0, [pc, #156]	; (8008a80 <MX_GPIO_Init+0x2e8>)
 80089e2:	f7fa fd3d 	bl	8003460 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACC1_EN_Pin|ACC2_EN_Pin;
 80089e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80089ec:	2311      	movs	r3, #17
 80089ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089f4:	2300      	movs	r3, #0
 80089f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80089f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089fc:	4619      	mov	r1, r3
 80089fe:	4820      	ldr	r0, [pc, #128]	; (8008a80 <MX_GPIO_Init+0x2e8>)
 8008a00:	f7fa fd2e 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8008a04:	2310      	movs	r3, #16
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a10:	2300      	movs	r3, #0
 8008a12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a18:	4619      	mov	r1, r3
 8008a1a:	481a      	ldr	r0, [pc, #104]	; (8008a84 <MX_GPIO_Init+0x2ec>)
 8008a1c:	f7fa fd20 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_VGY_Pin PAN6_VGY_Pin PAN1_VGY_Pin PAN2_VGY_Pin
                           PAN3_VGY_Pin */
  GPIO_InitStruct.Pin = PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8008a20:	23e6      	movs	r3, #230	; 0xe6
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN3_VGY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008a24:	2311      	movs	r3, #17
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a34:	4619      	mov	r1, r3
 8008a36:	4814      	ldr	r0, [pc, #80]	; (8008a88 <MX_GPIO_Init+0x2f0>)
 8008a38:	f7fa fd12 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : OBC_OUT5_Pin PAN4_DIR1_Pin FLASH_NCS_Pin OBC_OUT3_Pin
                           OBC_OUT2_Pin OBC_OUT1_Pin */
  GPIO_InitStruct.Pin = OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8008a3c:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
                          |OBC_OUT2_Pin|OBC_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a42:	2301      	movs	r3, #1
 8008a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a52:	4619      	mov	r1, r3
 8008a54:	480d      	ldr	r0, [pc, #52]	; (8008a8c <MX_GPIO_Init+0x2f4>)
 8008a56:	f7fa fd03 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_EN_Pin OBC_OUT4_Pin */
  GPIO_InitStruct.Pin = SD_EN_Pin|OBC_OUT4_Pin;
 8008a5a:	2348      	movs	r3, #72	; 0x48
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e016      	b.n	8008a98 <MX_GPIO_Init+0x300>
 8008a6a:	bf00      	nop
 8008a6c:	40023800 	.word	0x40023800
 8008a70:	40021000 	.word	0x40021000
 8008a74:	40020800 	.word	0x40020800
 8008a78:	40022000 	.word	0x40022000
 8008a7c:	40021400 	.word	0x40021400
 8008a80:	40021c00 	.word	0x40021c00
 8008a84:	40020000 	.word	0x40020000
 8008a88:	40020400 	.word	0x40020400
 8008a8c:	40021800 	.word	0x40021800
 8008a90:	40020c00 	.word	0x40020c00
 8008a94:	10110000 	.word	0x10110000
 8008a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4809      	ldr	r0, [pc, #36]	; (8008ac8 <MX_GPIO_Init+0x330>)
 8008aa2:	f7fa fcdd 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8008aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008aac:	2300      	movs	r3, #0
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8008ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4804      	ldr	r0, [pc, #16]	; (8008acc <MX_GPIO_Init+0x334>)
 8008abc:	f7fa fcd0 	bl	8003460 <HAL_GPIO_Init>

}
 8008ac0:	bf00      	nop
 8008ac2:	3738      	adds	r7, #56	; 0x38
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	40020c00 	.word	0x40020c00
 8008acc:	40021800 	.word	0x40021800

08008ad0 <MX_I2C1_Init>:

}

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008ad4:	4b12      	ldr	r3, [pc, #72]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008ad6:	4a13      	ldr	r2, [pc, #76]	; (8008b24 <MX_I2C1_Init+0x54>)
 8008ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008ada:	4b11      	ldr	r3, [pc, #68]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008adc:	4a12      	ldr	r2, [pc, #72]	; (8008b28 <MX_I2C1_Init+0x58>)
 8008ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008ae0:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008ae6:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008aec:	4b0c      	ldr	r3, [pc, #48]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008afa:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b00:	4b07      	ldr	r3, [pc, #28]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b06:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008b0c:	4804      	ldr	r0, [pc, #16]	; (8008b20 <MX_I2C1_Init+0x50>)
 8008b0e:	f7fa fe6d 	bl	80037ec <HAL_I2C_Init>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008b18:	f7fa f91e 	bl	8002d58 <Error_Handler>
  }

}
 8008b1c:	bf00      	nop
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20007d2c 	.word	0x20007d2c
 8008b24:	40005400 	.word	0x40005400
 8008b28:	00061a80 	.word	0x00061a80

08008b2c <MX_SDIO_SD_Init>:

}

/* SDIO init function */
void MX_SDIO_SD_Init(void)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8008b30:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <MX_SDIO_SD_Init+0x38>)
 8008b32:	4a0d      	ldr	r2, [pc, #52]	; (8008b68 <MX_SDIO_SD_Init+0x3c>)
 8008b34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8008b36:	4b0b      	ldr	r3, [pc, #44]	; (8008b64 <MX_SDIO_SD_Init+0x38>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8008b3c:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <MX_SDIO_SD_Init+0x38>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008b42:	4b08      	ldr	r3, [pc, #32]	; (8008b64 <MX_SDIO_SD_Init+0x38>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8008b48:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <MX_SDIO_SD_Init+0x38>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <MX_SDIO_SD_Init+0x38>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8008b54:	4b03      	ldr	r3, [pc, #12]	; (8008b64 <MX_SDIO_SD_Init+0x38>)
 8008b56:	2203      	movs	r2, #3
 8008b58:	619a      	str	r2, [r3, #24]

}
 8008b5a:	bf00      	nop
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20007fec 	.word	0x20007fec
 8008b68:	40012c00 	.word	0x40012c00

08008b6c <MX_UART4_Init>:

}

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8008b70:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <MX_UART4_Init+0x4c>)
 8008b72:	4a12      	ldr	r2, [pc, #72]	; (8008bbc <MX_UART4_Init+0x50>)
 8008b74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8008b76:	4b10      	ldr	r3, [pc, #64]	; (8008bb8 <MX_UART4_Init+0x4c>)
 8008b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008b7e:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <MX_UART4_Init+0x4c>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008b84:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <MX_UART4_Init+0x4c>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <MX_UART4_Init+0x4c>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008b90:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <MX_UART4_Init+0x4c>)
 8008b92:	220c      	movs	r2, #12
 8008b94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b96:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <MX_UART4_Init+0x4c>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <MX_UART4_Init+0x4c>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008ba2:	4805      	ldr	r0, [pc, #20]	; (8008bb8 <MX_UART4_Init+0x4c>)
 8008ba4:	f7fe f9e6 	bl	8006f74 <HAL_UART_Init>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8008bae:	f7fa f8d3 	bl	8002d58 <Error_Handler>
  }

}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	200080b0 	.word	0x200080b0
 8008bbc:	40004c00 	.word	0x40004c00

08008bc0 <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008bc4:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <MX_USART1_UART_Init+0x4c>)
 8008bc6:	4a12      	ldr	r2, [pc, #72]	; (8008c10 <MX_USART1_UART_Init+0x50>)
 8008bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008bca:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <MX_USART1_UART_Init+0x4c>)
 8008bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <MX_USART1_UART_Init+0x4c>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <MX_USART1_UART_Init+0x4c>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008bde:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <MX_USART1_UART_Init+0x4c>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008be4:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <MX_USART1_UART_Init+0x4c>)
 8008be6:	220c      	movs	r2, #12
 8008be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bea:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <MX_USART1_UART_Init+0x4c>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008bf0:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <MX_USART1_UART_Init+0x4c>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008bf6:	4805      	ldr	r0, [pc, #20]	; (8008c0c <MX_USART1_UART_Init+0x4c>)
 8008bf8:	f7fe f9bc 	bl	8006f74 <HAL_UART_Init>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008c02:	f7fa f8a9 	bl	8002d58 <Error_Handler>
  }

}
 8008c06:	bf00      	nop
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20007f14 	.word	0x20007f14
 8008c10:	40011000 	.word	0x40011000

08008c14 <MX_USART6_UART_Init>:

/* USART6 init function */
void MX_USART6_UART_Init(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8008c18:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <MX_USART6_UART_Init+0x5c>)
 8008c1a:	4a16      	ldr	r2, [pc, #88]	; (8008c74 <MX_USART6_UART_Init+0x60>)
 8008c1c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8008c1e:	4b14      	ldr	r3, [pc, #80]	; (8008c70 <MX_USART6_UART_Init+0x5c>)
 8008c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008c24:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008c26:	4b12      	ldr	r3, [pc, #72]	; (8008c70 <MX_USART6_UART_Init+0x5c>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008c2c:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <MX_USART6_UART_Init+0x5c>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008c32:	4b0f      	ldr	r3, [pc, #60]	; (8008c70 <MX_USART6_UART_Init+0x5c>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008c38:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <MX_USART6_UART_Init+0x5c>)
 8008c3a:	220c      	movs	r2, #12
 8008c3c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <MX_USART6_UART_Init+0x5c>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c44:	4b0a      	ldr	r3, [pc, #40]	; (8008c70 <MX_USART6_UART_Init+0x5c>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008c4a:	4809      	ldr	r0, [pc, #36]	; (8008c70 <MX_USART6_UART_Init+0x5c>)
 8008c4c:	f7fe f992 	bl	8006f74 <HAL_UART_Init>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8008c56:	f7fa f87f 	bl	8002d58 <Error_Handler>
  }
  //Enable interrupts
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	2047      	movs	r0, #71	; 0x47
 8008c60:	f7fa f9f9 	bl	8003056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8008c64:	2047      	movs	r0, #71	; 0x47
 8008c66:	f7fa fa12 	bl	800308e <HAL_NVIC_EnableIRQ>
}
 8008c6a:	bf00      	nop
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	20008070 	.word	0x20008070
 8008c74:	40011400 	.word	0x40011400

08008c78 <MX_WWDG_Init>:

}

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 8008c7c:	4b0d      	ldr	r3, [pc, #52]	; (8008cb4 <MX_WWDG_Init+0x3c>)
 8008c7e:	4a0e      	ldr	r2, [pc, #56]	; (8008cb8 <MX_WWDG_Init+0x40>)
 8008c80:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8008c82:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <MX_WWDG_Init+0x3c>)
 8008c84:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008c88:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <MX_WWDG_Init+0x3c>)
 8008c8c:	2240      	movs	r2, #64	; 0x40
 8008c8e:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8008c90:	4b08      	ldr	r3, [pc, #32]	; (8008cb4 <MX_WWDG_Init+0x3c>)
 8008c92:	2240      	movs	r2, #64	; 0x40
 8008c94:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 8008c96:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <MX_WWDG_Init+0x3c>)
 8008c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c9c:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8008c9e:	4805      	ldr	r0, [pc, #20]	; (8008cb4 <MX_WWDG_Init+0x3c>)
 8008ca0:	f7fe ff48 	bl	8007b34 <HAL_WWDG_Init>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 8008caa:	f7fa f855 	bl	8002d58 <Error_Handler>
  }

}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20007fd8 	.word	0x20007fd8
 8008cb8:	40002c00 	.word	0x40002c00

08008cbc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008cc6:	f000 f89d 	bl	8008e04 <BSP_SD_IsDetected>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d001      	beq.n	8008cd4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e012      	b.n	8008cfa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008cd4:	480b      	ldr	r0, [pc, #44]	; (8008d04 <BSP_SD_Init+0x48>)
 8008cd6:	f7fc fb2d 	bl	8005334 <HAL_SD_Init>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8008cde:	79fb      	ldrb	r3, [r7, #7]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d109      	bne.n	8008cf8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008ce4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ce8:	4806      	ldr	r0, [pc, #24]	; (8008d04 <BSP_SD_Init+0x48>)
 8008cea:	f7fd faa6 	bl	800623a <HAL_SD_ConfigWideBusOperation>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20007fec 	.word	0x20007fec

08008d08 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
 8008d14:	603b      	str	r3, [r7, #0]
  uint8_t sd_state;

  __HAL_LOCK(&hsd);
 8008d16:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <BSP_SD_ReadBlocks+0x44>)
 8008d18:	7f1b      	ldrb	r3, [r3, #28]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <BSP_SD_ReadBlocks+0x1a>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e010      	b.n	8008d44 <BSP_SD_ReadBlocks+0x3c>
 8008d22:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <BSP_SD_ReadBlocks+0x44>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	68f9      	ldr	r1, [r7, #12]
 8008d32:	4806      	ldr	r0, [pc, #24]	; (8008d4c <BSP_SD_ReadBlocks+0x44>)
 8008d34:	f7fc fb86 	bl	8005444 <HAL_SD_ReadBlocks>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8008d3c:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <BSP_SD_ReadBlocks+0x44>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	771a      	strb	r2, [r3, #28]
  
  return sd_state;  
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3718      	adds	r7, #24
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20007fec 	.word	0x20007fec

08008d50 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	75fb      	strb	r3, [r7, #23]

  __HAL_LOCK(&hsd);
 8008d62:	4b0d      	ldr	r3, [pc, #52]	; (8008d98 <BSP_SD_WriteBlocks+0x48>)
 8008d64:	7f1b      	ldrb	r3, [r3, #28]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d101      	bne.n	8008d6e <BSP_SD_WriteBlocks+0x1e>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	e010      	b.n	8008d90 <BSP_SD_WriteBlocks+0x40>
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <BSP_SD_WriteBlocks+0x48>)
 8008d70:	2201      	movs	r2, #1
 8008d72:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	68f9      	ldr	r1, [r7, #12]
 8008d7e:	4806      	ldr	r0, [pc, #24]	; (8008d98 <BSP_SD_WriteBlocks+0x48>)
 8008d80:	f7fc fcf7 	bl	8005772 <HAL_SD_WriteBlocks>
 8008d84:	4603      	mov	r3, r0
 8008d86:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8008d88:	4b03      	ldr	r3, [pc, #12]	; (8008d98 <BSP_SD_WriteBlocks+0x48>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	771a      	strb	r2, [r3, #28]

  return sd_state;  
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20007fec 	.word	0x20007fec

08008d9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
  uint8_t sd_state;  

  __HAL_LOCK(&hsd);
 8008da2:	4b0e      	ldr	r3, [pc, #56]	; (8008ddc <BSP_SD_GetCardState+0x40>)
 8008da4:	7f1b      	ldrb	r3, [r3, #28]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d101      	bne.n	8008dae <BSP_SD_GetCardState+0x12>
 8008daa:	2302      	movs	r3, #2
 8008dac:	e011      	b.n	8008dd2 <BSP_SD_GetCardState+0x36>
 8008dae:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <BSP_SD_GetCardState+0x40>)
 8008db0:	2201      	movs	r2, #1
 8008db2:	771a      	strb	r2, [r3, #28]
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8008db4:	4809      	ldr	r0, [pc, #36]	; (8008ddc <BSP_SD_GetCardState+0x40>)
 8008db6:	f7fd fabc 	bl	8006332 <HAL_SD_GetCardState>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d102      	bne.n	8008dc6 <BSP_SD_GetCardState+0x2a>
    sd_state = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	71fb      	strb	r3, [r7, #7]
 8008dc4:	e001      	b.n	8008dca <BSP_SD_GetCardState+0x2e>
  else
    sd_state = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	71fb      	strb	r3, [r7, #7]
  __HAL_UNLOCK(&hsd);
 8008dca:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <BSP_SD_GetCardState+0x40>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	771a      	strb	r2, [r3, #28]
  
  return sd_state;
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20007fec 	.word	0x20007fec

08008de0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8008de8:	b672      	cpsid	i
}
 8008dea:	bf00      	nop
  /* Get SD card Information */
    __disable_irq();
    HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	4804      	ldr	r0, [pc, #16]	; (8008e00 <BSP_SD_GetCardInfo+0x20>)
 8008df0:	f7fd f9f7 	bl	80061e2 <HAL_SD_GetCardInfo>
  __ASM volatile ("cpsie i" : : : "memory");
 8008df4:	b662      	cpsie	i
}
 8008df6:	bf00      	nop
    __enable_irq();
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20007fec 	.word	0x20007fec

08008e04 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	b2db      	uxtb	r3, r3
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
	...

08008e20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver((Diskio_drvTypeDef*)&SD_Driver, SD_Path);
 8008e24:	4904      	ldr	r1, [pc, #16]	; (8008e38 <MX_FATFS_Init+0x18>)
 8008e26:	4805      	ldr	r0, [pc, #20]	; (8008e3c <MX_FATFS_Init+0x1c>)
 8008e28:	f000 fc3c 	bl	80096a4 <FATFS_LinkDriver>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	461a      	mov	r2, r3
 8008e30:	4b03      	ldr	r3, [pc, #12]	; (8008e40 <MX_FATFS_Init+0x20>)
 8008e32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008e34:	bf00      	nop
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	2000814c 	.word	0x2000814c
 8008e3c:	0801099c 	.word	0x0801099c
 8008e40:	20008148 	.word	0x20008148

08008e44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e4e:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <SD_initialize+0x38>)
 8008e50:	2201      	movs	r2, #1
 8008e52:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8008e54:	f7ff ff32 	bl	8008cbc <BSP_SD_Init>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d107      	bne.n	8008e6e <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e5e:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <SD_initialize+0x38>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	f023 0301 	bic.w	r3, r3, #1
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <SD_initialize+0x38>)
 8008e6c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008e6e:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <SD_initialize+0x38>)
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	b2db      	uxtb	r3, r3
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	2000000c 	.word	0x2000000c

08008e80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	71fb      	strb	r3, [r7, #7]
  
  if(BSP_SD_GetCardState() != SD_TRANSFER_BUSY)
 8008e8a:	f7ff ff87 	bl	8008d9c <BSP_SD_GetCardState>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d008      	beq.n	8008ea6 <SD_status+0x26>
    Stat &= ~STA_BUSY;
 8008e94:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <SD_status+0x44>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	f023 0308 	bic.w	r3, r3, #8
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <SD_status+0x44>)
 8008ea2:	701a      	strb	r2, [r3, #0]
 8008ea4:	e007      	b.n	8008eb6 <SD_status+0x36>
  else
    Stat |= STA_BUSY;
 8008ea6:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <SD_status+0x44>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	f043 0308 	orr.w	r3, r3, #8
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <SD_status+0x44>)
 8008eb4:	701a      	strb	r2, [r3, #0]
  
  return Stat;
 8008eb6:	4b03      	ldr	r3, [pc, #12]	; (8008ec4 <SD_status+0x44>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	b2db      	uxtb	r3, r3
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	2000000c 	.word	0x2000000c

08008ec8 <SD_read>:
  */
    
#define MMC_RDWR_TRIES       20
#define MMC_STATUS_TRIES     500
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	607a      	str	r2, [r7, #4]
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8008ed8:	2314      	movs	r3, #20
 8008eda:	617b      	str	r3, [r7, #20]

  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8008edc:	e009      	b.n	8008ef2 <SD_read+0x2a>
  {
    if (timeout-- == 0)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	1e5a      	subs	r2, r3, #1
 8008ee2:	617a      	str	r2, [r7, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d101      	bne.n	8008eec <SD_read+0x24>
    {
      return RES_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e020      	b.n	8008f2e <SD_read+0x66>
    }
    osDelay(1);
 8008eec:	2001      	movs	r0, #1
 8008eee:	f000 fc2e 	bl	800974e <osDelay>
  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8008ef2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	68b8      	ldr	r0, [r7, #8]
 8008efc:	f7ff ff04 	bl	8008d08 <BSP_SD_ReadBlocks>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1eb      	bne.n	8008ede <SD_read+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 8008f06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008f0a:	617b      	str	r3, [r7, #20]
  while (BSP_SD_GetCardState() != HAL_OK)
 8008f0c:	e009      	b.n	8008f22 <SD_read+0x5a>
  {
    if (timeout-- == 0)
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	1e5a      	subs	r2, r3, #1
 8008f12:	617a      	str	r2, [r7, #20]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <SD_read+0x54>
    {
      return RES_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e008      	b.n	8008f2e <SD_read+0x66>
    }
    osDelay(1);
 8008f1c:	2001      	movs	r0, #1
 8008f1e:	f000 fc16 	bl	800974e <osDelay>
  while (BSP_SD_GetCardState() != HAL_OK)
 8008f22:	f7ff ff3b 	bl	8008d9c <BSP_SD_GetCardState>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1f0      	bne.n	8008f0e <SD_read+0x46>
  }
  return RES_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b086      	sub	sp, #24
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8008f46:	2314      	movs	r3, #20
 8008f48:	617b      	str	r3, [r7, #20]

  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 8008f4a:	e009      	b.n	8008f60 <SD_write+0x2a>
  {
    if (timeout-- == 0)
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	1e5a      	subs	r2, r3, #1
 8008f50:	617a      	str	r2, [r7, #20]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <SD_write+0x24>
    {
      return RES_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e020      	b.n	8008f9c <SD_write+0x66>
    }
    osDelay(1);
 8008f5a:	2001      	movs	r0, #1
 8008f5c:	f000 fbf7 	bl	800974e <osDelay>
  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 8008f60:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	68b8      	ldr	r0, [r7, #8]
 8008f6a:	f7ff fef1 	bl	8008d50 <BSP_SD_WriteBlocks>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1eb      	bne.n	8008f4c <SD_write+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 8008f74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008f78:	617b      	str	r3, [r7, #20]
  while(BSP_SD_GetCardState() != HAL_OK)
 8008f7a:	e009      	b.n	8008f90 <SD_write+0x5a>
  {
    if (timeout-- == 0)
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	1e5a      	subs	r2, r3, #1
 8008f80:	617a      	str	r2, [r7, #20]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <SD_write+0x54>
    {
      return RES_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e008      	b.n	8008f9c <SD_write+0x66>
    }
    osDelay(1);
 8008f8a:	2001      	movs	r0, #1
 8008f8c:	f000 fbdf 	bl	800974e <osDelay>
  while(BSP_SD_GetCardState() != HAL_OK)
 8008f90:	f7ff ff04 	bl	8008d9c <BSP_SD_GetCardState>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f0      	bne.n	8008f7c <SD_write+0x46>
  }    
  return RES_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08c      	sub	sp, #48	; 0x30
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	603a      	str	r2, [r7, #0]
 8008fae:	71fb      	strb	r3, [r7, #7]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) 
 8008fba:	4b24      	ldr	r3, [pc, #144]	; (800904c <SD_ioctl+0xa8>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <SD_ioctl+0x28>
    return RES_NOTRDY;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e03b      	b.n	8009044 <SD_ioctl+0xa0>
  
  switch (cmd)
 8008fcc:	79bb      	ldrb	r3, [r7, #6]
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d833      	bhi.n	800903a <SD_ioctl+0x96>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <SD_ioctl+0x34>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008fe9 	.word	0x08008fe9
 8008fdc:	08008ff1 	.word	0x08008ff1
 8008fe0:	08009009 	.word	0x08009009
 8008fe4:	08009023 	.word	0x08009023
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fee:	e027      	b.n	8009040 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008ff0:	f107 030c 	add.w	r3, r7, #12
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff fef3 	bl	8008de0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009006:	e01b      	b.n	8009040 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009008:	f107 030c 	add.w	r3, r7, #12
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff fee7 	bl	8008de0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	b29a      	uxth	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009020:	e00e      	b.n	8009040 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009022:	f107 030c 	add.w	r3, r7, #12
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff feda 	bl	8008de0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800902c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009038:	e002      	b.n	8009040 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800903a:	2304      	movs	r3, #4
 800903c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8009040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009044:	4618      	mov	r0, r3
 8009046:	3730      	adds	r7, #48	; 0x30
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	2000000c 	.word	0x2000000c

08009050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009054:	2003      	movs	r0, #3
 8009056:	f7f9 fff3 	bl	8003040 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	f06f 000b 	mvn.w	r0, #11
 8009062:	f7f9 fff8 	bl	8003056 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	f06f 000a 	mvn.w	r0, #10
 800906e:	f7f9 fff2 	bl	8003056 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8009072:	2200      	movs	r2, #0
 8009074:	2100      	movs	r1, #0
 8009076:	f06f 0009 	mvn.w	r0, #9
 800907a:	f7f9 ffec 	bl	8003056 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800907e:	2200      	movs	r2, #0
 8009080:	2100      	movs	r1, #0
 8009082:	f06f 0004 	mvn.w	r0, #4
 8009086:	f7f9 ffe6 	bl	8003056 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800908a:	2200      	movs	r2, #0
 800908c:	2100      	movs	r1, #0
 800908e:	f06f 0003 	mvn.w	r0, #3
 8009092:	f7f9 ffe0 	bl	8003056 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009096:	2200      	movs	r2, #0
 8009098:	210f      	movs	r1, #15
 800909a:	f06f 0001 	mvn.w	r0, #1
 800909e:	f7f9 ffda 	bl	8003056 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80090a2:	2200      	movs	r2, #0
 80090a4:	210f      	movs	r1, #15
 80090a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090aa:	f7f9 ffd4 	bl	8003056 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80090ae:	bf00      	nop
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <HAL_I2C_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08a      	sub	sp, #40	; 0x28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a37      	ldr	r2, [pc, #220]	; (80091a0 <HAL_I2C_MspInit+0xec>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d11f      	bne.n	8009106 <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 80090c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80090ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80090cc:	2312      	movs	r3, #18
 80090ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80090d0:	2301      	movs	r3, #1
 80090d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090d4:	2303      	movs	r3, #3
 80090d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80090d8:	2304      	movs	r3, #4
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090dc:	f107 0314 	add.w	r3, r7, #20
 80090e0:	4619      	mov	r1, r3
 80090e2:	4830      	ldr	r0, [pc, #192]	; (80091a4 <HAL_I2C_MspInit+0xf0>)
 80090e4:	f7fa f9bc 	bl	8003460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80090e8:	2300      	movs	r3, #0
 80090ea:	613b      	str	r3, [r7, #16]
 80090ec:	4b2e      	ldr	r3, [pc, #184]	; (80091a8 <HAL_I2C_MspInit+0xf4>)
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	4a2d      	ldr	r2, [pc, #180]	; (80091a8 <HAL_I2C_MspInit+0xf4>)
 80090f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090f6:	6413      	str	r3, [r2, #64]	; 0x40
 80090f8:	4b2b      	ldr	r3, [pc, #172]	; (80091a8 <HAL_I2C_MspInit+0xf4>)
 80090fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8009104:	e048      	b.n	8009198 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C2)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a28      	ldr	r2, [pc, #160]	; (80091ac <HAL_I2C_MspInit+0xf8>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d11f      	bne.n	8009150 <HAL_I2C_MspInit+0x9c>
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 8009110:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009116:	2312      	movs	r3, #18
 8009118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800911a:	2301      	movs	r3, #1
 800911c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800911e:	2303      	movs	r3, #3
 8009120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009122:	2304      	movs	r3, #4
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009126:	f107 0314 	add.w	r3, r7, #20
 800912a:	4619      	mov	r1, r3
 800912c:	481d      	ldr	r0, [pc, #116]	; (80091a4 <HAL_I2C_MspInit+0xf0>)
 800912e:	f7fa f997 	bl	8003460 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	4b1c      	ldr	r3, [pc, #112]	; (80091a8 <HAL_I2C_MspInit+0xf4>)
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	4a1b      	ldr	r2, [pc, #108]	; (80091a8 <HAL_I2C_MspInit+0xf4>)
 800913c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009140:	6413      	str	r3, [r2, #64]	; 0x40
 8009142:	4b19      	ldr	r3, [pc, #100]	; (80091a8 <HAL_I2C_MspInit+0xf4>)
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
}
 800914e:	e023      	b.n	8009198 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C3)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a16      	ldr	r2, [pc, #88]	; (80091b0 <HAL_I2C_MspInit+0xfc>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d11e      	bne.n	8009198 <HAL_I2C_MspInit+0xe4>
    GPIO_InitStruct.Pin = PAY_SCL_Pin|PAY_SDA_Pin;
 800915a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800915e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009160:	2312      	movs	r3, #18
 8009162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009164:	2301      	movs	r3, #1
 8009166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009168:	2303      	movs	r3, #3
 800916a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800916c:	2304      	movs	r3, #4
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009170:	f107 0314 	add.w	r3, r7, #20
 8009174:	4619      	mov	r1, r3
 8009176:	480f      	ldr	r0, [pc, #60]	; (80091b4 <HAL_I2C_MspInit+0x100>)
 8009178:	f7fa f972 	bl	8003460 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800917c:	2300      	movs	r3, #0
 800917e:	60bb      	str	r3, [r7, #8]
 8009180:	4b09      	ldr	r3, [pc, #36]	; (80091a8 <HAL_I2C_MspInit+0xf4>)
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	4a08      	ldr	r2, [pc, #32]	; (80091a8 <HAL_I2C_MspInit+0xf4>)
 8009186:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800918a:	6413      	str	r3, [r2, #64]	; 0x40
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <HAL_I2C_MspInit+0xf4>)
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009194:	60bb      	str	r3, [r7, #8]
 8009196:	68bb      	ldr	r3, [r7, #8]
}
 8009198:	bf00      	nop
 800919a:	3728      	adds	r7, #40	; 0x28
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40005400 	.word	0x40005400
 80091a4:	40020400 	.word	0x40020400
 80091a8:	40023800 	.word	0x40023800
 80091ac:	40005800 	.word	0x40005800
 80091b0:	40005c00 	.word	0x40005c00
 80091b4:	40021c00 	.word	0x40021c00

080091b8 <HAL_SD_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a1e      	ldr	r2, [pc, #120]	; (8009240 <HAL_SD_MspInit+0x88>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d136      	bne.n	8009238 <HAL_SD_MspInit+0x80>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80091ca:	2300      	movs	r3, #0
 80091cc:	60bb      	str	r3, [r7, #8]
 80091ce:	4b1d      	ldr	r3, [pc, #116]	; (8009244 <HAL_SD_MspInit+0x8c>)
 80091d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d2:	4a1c      	ldr	r2, [pc, #112]	; (8009244 <HAL_SD_MspInit+0x8c>)
 80091d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80091d8:	6453      	str	r3, [r2, #68]	; 0x44
 80091da:	4b1a      	ldr	r3, [pc, #104]	; (8009244 <HAL_SD_MspInit+0x8c>)
 80091dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091e2:	60bb      	str	r3, [r7, #8]
 80091e4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80091e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80091ea:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ec:	2302      	movs	r3, #2
 80091ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091f4:	2303      	movs	r3, #3
 80091f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80091f8:	230c      	movs	r3, #12
 80091fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091fc:	f107 030c 	add.w	r3, r7, #12
 8009200:	4619      	mov	r1, r3
 8009202:	4811      	ldr	r0, [pc, #68]	; (8009248 <HAL_SD_MspInit+0x90>)
 8009204:	f7fa f92c 	bl	8003460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009208:	2304      	movs	r3, #4
 800920a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800920c:	2302      	movs	r3, #2
 800920e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009210:	2300      	movs	r3, #0
 8009212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009214:	2303      	movs	r3, #3
 8009216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009218:	230c      	movs	r3, #12
 800921a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800921c:	f107 030c 	add.w	r3, r7, #12
 8009220:	4619      	mov	r1, r3
 8009222:	480a      	ldr	r0, [pc, #40]	; (800924c <HAL_SD_MspInit+0x94>)
 8009224:	f7fa f91c 	bl	8003460 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, USER_INT_PRIORITY, 0);
 8009228:	2200      	movs	r2, #0
 800922a:	2106      	movs	r1, #6
 800922c:	2031      	movs	r0, #49	; 0x31
 800922e:	f7f9 ff12 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8009232:	2031      	movs	r0, #49	; 0x31
 8009234:	f7f9 ff2b 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8009238:	bf00      	nop
 800923a:	3720      	adds	r7, #32
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	40012c00 	.word	0x40012c00
 8009244:	40023800 	.word	0x40023800
 8009248:	40020800 	.word	0x40020800
 800924c:	40020c00 	.word	0x40020c00

08009250 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM5)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a0b      	ldr	r2, [pc, #44]	; (800928c <HAL_TIM_Base_MspInit+0x3c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d10d      	bne.n	800927e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <HAL_TIM_Base_MspInit+0x40>)
 8009268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926a:	4a09      	ldr	r2, [pc, #36]	; (8009290 <HAL_TIM_Base_MspInit+0x40>)
 800926c:	f043 0308 	orr.w	r3, r3, #8
 8009270:	6413      	str	r3, [r2, #64]	; 0x40
 8009272:	4b07      	ldr	r3, [pc, #28]	; (8009290 <HAL_TIM_Base_MspInit+0x40>)
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	f003 0308 	and.w	r3, r3, #8
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800927e:	bf00      	nop
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	40000c00 	.word	0x40000c00
 8009290:	40023800 	.word	0x40023800

08009294 <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	; 0x28
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a42      	ldr	r2, [pc, #264]	; (80093ac <HAL_UART_MspInit+0x118>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d126      	bne.n	80092f4 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80092a6:	2300      	movs	r3, #0
 80092a8:	613b      	str	r3, [r7, #16]
 80092aa:	4b41      	ldr	r3, [pc, #260]	; (80093b0 <HAL_UART_MspInit+0x11c>)
 80092ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ae:	4a40      	ldr	r2, [pc, #256]	; (80093b0 <HAL_UART_MspInit+0x11c>)
 80092b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092b4:	6413      	str	r3, [r2, #64]	; 0x40
 80092b6:	4b3e      	ldr	r3, [pc, #248]	; (80093b0 <HAL_UART_MspInit+0x11c>)
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092be:	613b      	str	r3, [r7, #16]
 80092c0:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80092c2:	2303      	movs	r3, #3
 80092c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092c6:	2302      	movs	r3, #2
 80092c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092ca:	2301      	movs	r3, #1
 80092cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092ce:	2303      	movs	r3, #3
 80092d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80092d2:	2308      	movs	r3, #8
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092d6:	f107 0314 	add.w	r3, r7, #20
 80092da:	4619      	mov	r1, r3
 80092dc:	4835      	ldr	r0, [pc, #212]	; (80093b4 <HAL_UART_MspInit+0x120>)
 80092de:	f7fa f8bf 	bl	8003460 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, USER_INT_PRIORITY, 0);
 80092e2:	2200      	movs	r2, #0
 80092e4:	2106      	movs	r1, #6
 80092e6:	2034      	movs	r0, #52	; 0x34
 80092e8:	f7f9 feb5 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80092ec:	2034      	movs	r0, #52	; 0x34
 80092ee:	f7f9 fece 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80092f2:	e057      	b.n	80093a4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART1)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a2f      	ldr	r2, [pc, #188]	; (80093b8 <HAL_UART_MspInit+0x124>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d127      	bne.n	800934e <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
 8009302:	4b2b      	ldr	r3, [pc, #172]	; (80093b0 <HAL_UART_MspInit+0x11c>)
 8009304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009306:	4a2a      	ldr	r2, [pc, #168]	; (80093b0 <HAL_UART_MspInit+0x11c>)
 8009308:	f043 0310 	orr.w	r3, r3, #16
 800930c:	6453      	str	r3, [r2, #68]	; 0x44
 800930e:	4b28      	ldr	r3, [pc, #160]	; (80093b0 <HAL_UART_MspInit+0x11c>)
 8009310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009312:	f003 0310 	and.w	r3, r3, #16
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800931a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800931e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009320:	2302      	movs	r3, #2
 8009322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009324:	2301      	movs	r3, #1
 8009326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009328:	2303      	movs	r3, #3
 800932a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800932c:	2307      	movs	r3, #7
 800932e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009330:	f107 0314 	add.w	r3, r7, #20
 8009334:	4619      	mov	r1, r3
 8009336:	481f      	ldr	r0, [pc, #124]	; (80093b4 <HAL_UART_MspInit+0x120>)
 8009338:	f7fa f892 	bl	8003460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, USER_INT_PRIORITY, 0);
 800933c:	2200      	movs	r2, #0
 800933e:	2106      	movs	r1, #6
 8009340:	2025      	movs	r0, #37	; 0x25
 8009342:	f7f9 fe88 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);    
 8009346:	2025      	movs	r0, #37	; 0x25
 8009348:	f7f9 fea1 	bl	800308e <HAL_NVIC_EnableIRQ>
}
 800934c:	e02a      	b.n	80093a4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART6)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1a      	ldr	r2, [pc, #104]	; (80093bc <HAL_UART_MspInit+0x128>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d125      	bne.n	80093a4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009358:	2300      	movs	r3, #0
 800935a:	60bb      	str	r3, [r7, #8]
 800935c:	4b14      	ldr	r3, [pc, #80]	; (80093b0 <HAL_UART_MspInit+0x11c>)
 800935e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009360:	4a13      	ldr	r2, [pc, #76]	; (80093b0 <HAL_UART_MspInit+0x11c>)
 8009362:	f043 0320 	orr.w	r3, r3, #32
 8009366:	6453      	str	r3, [r2, #68]	; 0x44
 8009368:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <HAL_UART_MspInit+0x11c>)
 800936a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936c:	f003 0320 	and.w	r3, r3, #32
 8009370:	60bb      	str	r3, [r7, #8]
 8009372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PAY_TX_Pin|PAY_RX_Pin;
 8009374:	23c0      	movs	r3, #192	; 0xc0
 8009376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009378:	2302      	movs	r3, #2
 800937a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800937c:	2301      	movs	r3, #1
 800937e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009380:	2303      	movs	r3, #3
 8009382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009384:	2308      	movs	r3, #8
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009388:	f107 0314 	add.w	r3, r7, #20
 800938c:	4619      	mov	r1, r3
 800938e:	480c      	ldr	r0, [pc, #48]	; (80093c0 <HAL_UART_MspInit+0x12c>)
 8009390:	f7fa f866 	bl	8003460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, USER_INT_PRIORITY, 0);
 8009394:	2200      	movs	r2, #0
 8009396:	2106      	movs	r1, #6
 8009398:	2047      	movs	r0, #71	; 0x47
 800939a:	f7f9 fe5c 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800939e:	2047      	movs	r0, #71	; 0x47
 80093a0:	f7f9 fe75 	bl	800308e <HAL_NVIC_EnableIRQ>
}
 80093a4:	bf00      	nop
 80093a6:	3728      	adds	r7, #40	; 0x28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	40004c00 	.word	0x40004c00
 80093b0:	40023800 	.word	0x40023800
 80093b4:	40020000 	.word	0x40020000
 80093b8:	40011000 	.word	0x40011000
 80093bc:	40011400 	.word	0x40011400
 80093c0:	40020800 	.word	0x40020800

080093c4 <HAL_WWDG_MspInit>:
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]

  if(hwwdg->Instance==WWDG)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a0b      	ldr	r2, [pc, #44]	; (8009400 <HAL_WWDG_MspInit+0x3c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d10d      	bne.n	80093f2 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80093d6:	2300      	movs	r3, #0
 80093d8:	60fb      	str	r3, [r7, #12]
 80093da:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <HAL_WWDG_MspInit+0x40>)
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	4a09      	ldr	r2, [pc, #36]	; (8009404 <HAL_WWDG_MspInit+0x40>)
 80093e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80093e4:	6413      	str	r3, [r2, #64]	; 0x40
 80093e6:	4b07      	ldr	r3, [pc, #28]	; (8009404 <HAL_WWDG_MspInit+0x40>)
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 80093f2:	bf00      	nop
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	40002c00 	.word	0x40002c00
 8009404:	40023800 	.word	0x40023800

08009408 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08c      	sub	sp, #48	; 0x30
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8009418:	2200      	movs	r2, #0
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	2019      	movs	r0, #25
 800941e:	f7f9 fe1a 	bl	8003056 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8009422:	2019      	movs	r0, #25
 8009424:	f7f9 fe33 	bl	800308e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009428:	2300      	movs	r3, #0
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	4b1f      	ldr	r3, [pc, #124]	; (80094ac <HAL_InitTick+0xa4>)
 800942e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009430:	4a1e      	ldr	r2, [pc, #120]	; (80094ac <HAL_InitTick+0xa4>)
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	6453      	str	r3, [r2, #68]	; 0x44
 8009438:	4b1c      	ldr	r3, [pc, #112]	; (80094ac <HAL_InitTick+0xa4>)
 800943a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	60fb      	str	r3, [r7, #12]
 8009442:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009444:	f107 0210 	add.w	r2, r7, #16
 8009448:	f107 0314 	add.w	r3, r7, #20
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f7fb fd20 	bl	8004e94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8009454:	f7fb fcfc 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8009458:	4603      	mov	r3, r0
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	4a13      	ldr	r2, [pc, #76]	; (80094b0 <HAL_InitTick+0xa8>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	0c9b      	lsrs	r3, r3, #18
 8009468:	3b01      	subs	r3, #1
 800946a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800946c:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <HAL_InitTick+0xac>)
 800946e:	4a12      	ldr	r2, [pc, #72]	; (80094b8 <HAL_InitTick+0xb0>)
 8009470:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8009472:	4b10      	ldr	r3, [pc, #64]	; (80094b4 <HAL_InitTick+0xac>)
 8009474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009478:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800947a:	4a0e      	ldr	r2, [pc, #56]	; (80094b4 <HAL_InitTick+0xac>)
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8009480:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <HAL_InitTick+0xac>)
 8009482:	2200      	movs	r2, #0
 8009484:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009486:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <HAL_InitTick+0xac>)
 8009488:	2200      	movs	r2, #0
 800948a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800948c:	4809      	ldr	r0, [pc, #36]	; (80094b4 <HAL_InitTick+0xac>)
 800948e:	f7fd fb3c 	bl	8006b0a <HAL_TIM_Base_Init>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d104      	bne.n	80094a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8009498:	4806      	ldr	r0, [pc, #24]	; (80094b4 <HAL_InitTick+0xac>)
 800949a:	f7fd fb61 	bl	8006b60 <HAL_TIM_Base_Start_IT>
 800949e:	4603      	mov	r3, r0
 80094a0:	e000      	b.n	80094a4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3730      	adds	r7, #48	; 0x30
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	40023800 	.word	0x40023800
 80094b0:	431bde83 	.word	0x431bde83
 80094b4:	20008150 	.word	0x20008150
 80094b8:	40010000 	.word	0x40010000

080094bc <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80094c0:	bf00      	nop
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
	...

080094cc <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  *((__IO uint32_t*)MAILBOX_ADDRESS) = MAILBOX_VAL_HARD;
 80094d0:	4b03      	ldr	r3, [pc, #12]	; (80094e0 <HardFault_Handler+0x14>)
 80094d2:	4a04      	ldr	r2, [pc, #16]	; (80094e4 <HardFault_Handler+0x18>)
 80094d4:	601a      	str	r2, [r3, #0]
  MX_WWDG_Init();
 80094d6:	f7ff fbcf 	bl	8008c78 <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	Error_Handler();
 80094da:	f7f9 fc3d 	bl	8002d58 <Error_Handler>
 80094de:	e7fc      	b.n	80094da <HardFault_Handler+0xe>
 80094e0:	40002854 	.word	0x40002854
 80094e4:	0bad0bad 	.word	0x0bad0bad

080094e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80094e8:	b480      	push	{r7}
 80094ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80094ec:	e7fe      	b.n	80094ec <MemManage_Handler+0x4>

080094ee <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80094ee:	b480      	push	{r7}
 80094f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80094f2:	e7fe      	b.n	80094f2 <BusFault_Handler+0x4>

080094f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80094f4:	b480      	push	{r7}
 80094f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80094f8:	e7fe      	b.n	80094f8 <UsageFault_Handler+0x4>

080094fa <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80094fa:	b480      	push	{r7}
 80094fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80094fe:	bf00      	nop
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800950c:	f000 f933 	bl	8009776 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009510:	bf00      	nop
 8009512:	bd80      	pop	{r7, pc}

08009514 <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8009518:	4802      	ldr	r0, [pc, #8]	; (8009524 <SDIO_IRQHandler+0x10>)
 800951a:	f7fc faab 	bl	8005a74 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800951e:	bf00      	nop
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20007fec 	.word	0x20007fec

08009528 <USART1_IRQHandler>:

void  USART1_IRQHandler(void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800952c:	4802      	ldr	r0, [pc, #8]	; (8009538 <USART1_IRQHandler+0x10>)
 800952e:	f7fd fe55 	bl	80071dc <HAL_UART_IRQHandler>
}
 8009532:	bf00      	nop
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20007f14 	.word	0x20007f14

0800953c <UART4_IRQHandler>:
void  UART4_IRQHandler(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 8009540:	4802      	ldr	r0, [pc, #8]	; (800954c <UART4_IRQHandler+0x10>)
 8009542:	f7fd fe4b 	bl	80071dc <HAL_UART_IRQHandler>
}
 8009546:	bf00      	nop
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	200080b0 	.word	0x200080b0

08009550 <USART6_IRQHandler>:
void  USART6_IRQHandler(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart6);
 8009554:	4802      	ldr	r0, [pc, #8]	; (8009560 <USART6_IRQHandler+0x10>)
 8009556:	f7fd fe41 	bl	80071dc <HAL_UART_IRQHandler>
}
 800955a:	bf00      	nop
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20008070 	.word	0x20008070

08009564 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009568:	4802      	ldr	r0, [pc, #8]	; (8009574 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800956a:	f7fd fb14 	bl	8006b96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800956e:	bf00      	nop
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20008150 	.word	0x20008150

08009578 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800957c:	4802      	ldr	r0, [pc, #8]	; (8009588 <DMA2_Stream3_IRQHandler+0x10>)
 800957e:	f7f9 fddf 	bl	8003140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8009582:	bf00      	nop
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20007bc8 	.word	0x20007bc8

0800958c <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8009590:	4802      	ldr	r0, [pc, #8]	; (800959c <DMA2_Stream6_IRQHandler+0x10>)
 8009592:	f7f9 fdd5 	bl	8003140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8009596:	bf00      	nop
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20007f78 	.word	0x20007f78

080095a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80095a4:	4b16      	ldr	r3, [pc, #88]	; (8009600 <SystemInit+0x60>)
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095aa:	4a15      	ldr	r2, [pc, #84]	; (8009600 <SystemInit+0x60>)
 80095ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80095b4:	4b13      	ldr	r3, [pc, #76]	; (8009604 <SystemInit+0x64>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a12      	ldr	r2, [pc, #72]	; (8009604 <SystemInit+0x64>)
 80095ba:	f043 0301 	orr.w	r3, r3, #1
 80095be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80095c0:	4b10      	ldr	r3, [pc, #64]	; (8009604 <SystemInit+0x64>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80095c6:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <SystemInit+0x64>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a0e      	ldr	r2, [pc, #56]	; (8009604 <SystemInit+0x64>)
 80095cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80095d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80095d6:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <SystemInit+0x64>)
 80095d8:	4a0b      	ldr	r2, [pc, #44]	; (8009608 <SystemInit+0x68>)
 80095da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80095dc:	4b09      	ldr	r3, [pc, #36]	; (8009604 <SystemInit+0x64>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a08      	ldr	r2, [pc, #32]	; (8009604 <SystemInit+0x64>)
 80095e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80095e8:	4b06      	ldr	r3, [pc, #24]	; (8009604 <SystemInit+0x64>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80095ee:	4b04      	ldr	r3, [pc, #16]	; (8009600 <SystemInit+0x60>)
 80095f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80095f4:	609a      	str	r2, [r3, #8]
#endif
}
 80095f6:	bf00      	nop
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr
 8009600:	e000ed00 	.word	0xe000ed00
 8009604:	40023800 	.word	0x40023800
 8009608:	24003010 	.word	0x24003010

0800960c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800961a:	2301      	movs	r3, #1
 800961c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009622:	4b1f      	ldr	r3, [pc, #124]	; (80096a0 <FATFS_LinkDriverEx+0x94>)
 8009624:	7a5b      	ldrb	r3, [r3, #9]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b01      	cmp	r3, #1
 800962a:	d831      	bhi.n	8009690 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800962c:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <FATFS_LinkDriverEx+0x94>)
 800962e:	7a5b      	ldrb	r3, [r3, #9]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	461a      	mov	r2, r3
 8009634:	4b1a      	ldr	r3, [pc, #104]	; (80096a0 <FATFS_LinkDriverEx+0x94>)
 8009636:	2100      	movs	r1, #0
 8009638:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800963a:	4b19      	ldr	r3, [pc, #100]	; (80096a0 <FATFS_LinkDriverEx+0x94>)
 800963c:	7a5b      	ldrb	r3, [r3, #9]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	4a17      	ldr	r2, [pc, #92]	; (80096a0 <FATFS_LinkDriverEx+0x94>)
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800964a:	4b15      	ldr	r3, [pc, #84]	; (80096a0 <FATFS_LinkDriverEx+0x94>)
 800964c:	7a5b      	ldrb	r3, [r3, #9]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	461a      	mov	r2, r3
 8009652:	4b13      	ldr	r3, [pc, #76]	; (80096a0 <FATFS_LinkDriverEx+0x94>)
 8009654:	4413      	add	r3, r2
 8009656:	79fa      	ldrb	r2, [r7, #7]
 8009658:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800965a:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <FATFS_LinkDriverEx+0x94>)
 800965c:	7a5b      	ldrb	r3, [r3, #9]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	b2d1      	uxtb	r1, r2
 8009664:	4a0e      	ldr	r2, [pc, #56]	; (80096a0 <FATFS_LinkDriverEx+0x94>)
 8009666:	7251      	strb	r1, [r2, #9]
 8009668:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800966a:	7dbb      	ldrb	r3, [r7, #22]
 800966c:	3330      	adds	r3, #48	; 0x30
 800966e:	b2da      	uxtb	r2, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	3301      	adds	r3, #1
 8009678:	223a      	movs	r2, #58	; 0x3a
 800967a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	3302      	adds	r3, #2
 8009680:	222f      	movs	r2, #47	; 0x2f
 8009682:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	3303      	adds	r3, #3
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800968c:	2300      	movs	r3, #0
 800968e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
}
 8009692:	4618      	mov	r0, r3
 8009694:	371c      	adds	r7, #28
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	2000020c 	.word	0x2000020c

080096a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80096ae:	2200      	movs	r2, #0
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff ffaa 	bl	800960c <FATFS_LinkDriverEx>
 80096b8:	4603      	mov	r3, r0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b085      	sub	sp, #20
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	4603      	mov	r3, r0
 80096ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80096d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096d4:	2b84      	cmp	r3, #132	; 0x84
 80096d6:	d005      	beq.n	80096e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80096d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4413      	add	r3, r2
 80096e0:	3303      	adds	r3, #3
 80096e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80096e4:	68fb      	ldr	r3, [r7, #12]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80096f6:	f000 ff47 	bl	800a588 <vTaskStartScheduler>
  
  return osOK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	bd80      	pop	{r7, pc}

08009700 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009702:	b087      	sub	sp, #28
 8009704:	af02      	add	r7, sp, #8
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685c      	ldr	r4, [r3, #4]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009716:	b29e      	uxth	r6, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff ffcf 	bl	80096c2 <makeFreeRtosPriority>
 8009724:	4602      	mov	r2, r0
 8009726:	f107 030c 	add.w	r3, r7, #12
 800972a:	9301      	str	r3, [sp, #4]
 800972c:	9200      	str	r2, [sp, #0]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	4632      	mov	r2, r6
 8009732:	4629      	mov	r1, r5
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fdbd 	bl	800a2b4 <xTaskCreate>
 800973a:	4603      	mov	r3, r0
 800973c:	2b01      	cmp	r3, #1
 800973e:	d001      	beq.n	8009744 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009740:	2300      	movs	r3, #0
 8009742:	e000      	b.n	8009746 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009744:	68fb      	ldr	r3, [r7, #12]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800974e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <osDelay+0x16>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	e000      	b.n	8009766 <osDelay+0x18>
 8009764:	2301      	movs	r3, #1
 8009766:	4618      	mov	r0, r3
 8009768:	f000 feda 	bl	800a520 <vTaskDelay>
  
  return osOK;
 800976c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800977a:	f001 fb33 	bl	800ade4 <xTaskGetSchedulerState>
 800977e:	4603      	mov	r3, r0
 8009780:	2b01      	cmp	r3, #1
 8009782:	d001      	beq.n	8009788 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8009784:	f002 f930 	bl	800b9e8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8009788:	bf00      	nop
 800978a:	bd80      	pop	{r7, pc}

0800978c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f103 0208 	add.w	r2, r3, #8
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f103 0208 	add.w	r2, r3, #8
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f103 0208 	add.w	r2, r3, #8
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097e6:	b480      	push	{r7}
 80097e8:	b085      	sub	sp, #20
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	601a      	str	r2, [r3, #0]
}
 8009822:	bf00      	nop
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800982e:	b480      	push	{r7}
 8009830:	b085      	sub	sp, #20
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009844:	d103      	bne.n	800984e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	e00c      	b.n	8009868 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	3308      	adds	r3, #8
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	e002      	b.n	800985c <vListInsert+0x2e>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	429a      	cmp	r2, r3
 8009866:	d2f6      	bcs.n	8009856 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	601a      	str	r2, [r3, #0]
}
 8009894:	bf00      	nop
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	6892      	ldr	r2, [r2, #8]
 80098b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	6852      	ldr	r2, [r2, #4]
 80098c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d103      	bne.n	80098d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	1e5a      	subs	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10a      	bne.n	800991e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800991e:	f001 ffd1 	bl	800b8c4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992a:	68f9      	ldr	r1, [r7, #12]
 800992c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800992e:	fb01 f303 	mul.w	r3, r1, r3
 8009932:	441a      	add	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994e:	3b01      	subs	r3, #1
 8009950:	68f9      	ldr	r1, [r7, #12]
 8009952:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009954:	fb01 f303 	mul.w	r3, r1, r3
 8009958:	441a      	add	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	22ff      	movs	r2, #255	; 0xff
 8009962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	22ff      	movs	r2, #255	; 0xff
 800996a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d114      	bne.n	800999e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01a      	beq.n	80099b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	3310      	adds	r3, #16
 8009980:	4618      	mov	r0, r3
 8009982:	f001 f873 	bl	800aa6c <xTaskRemoveFromEventList>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d012      	beq.n	80099b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800998c:	4b0c      	ldr	r3, [pc, #48]	; (80099c0 <xQueueGenericReset+0xcc>)
 800998e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	e009      	b.n	80099b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3310      	adds	r3, #16
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7ff fef2 	bl	800978c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3324      	adds	r3, #36	; 0x24
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7ff feed 	bl	800978c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099b2:	f001 ffb7 	bl	800b924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099b6:	2301      	movs	r3, #1
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	; 0x28
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	613b      	str	r3, [r7, #16]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	61fb      	str	r3, [r7, #28]
 80099f8:	e004      	b.n	8009a04 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	fb02 f303 	mul.w	r3, r2, r3
 8009a02:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	3350      	adds	r3, #80	; 0x50
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f002 f875 	bl	800baf8 <pvPortMalloc>
 8009a0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00b      	beq.n	8009a2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	3350      	adds	r3, #80	; 0x50
 8009a1a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a1c:	79fa      	ldrb	r2, [r7, #7]
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	4613      	mov	r3, r2
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f805 	bl	8009a38 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
	}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3720      	adds	r7, #32
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d103      	bne.n	8009a54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	e002      	b.n	8009a5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a66:	2101      	movs	r1, #1
 8009a68:	69b8      	ldr	r0, [r7, #24]
 8009a6a:	f7ff ff43 	bl	80098f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a76:	bf00      	nop
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08e      	sub	sp, #56	; 0x38
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <xQueueGenericSend+0x32>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d103      	bne.n	8009ac0 <xQueueGenericSend+0x40>
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <xQueueGenericSend+0x44>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e000      	b.n	8009ac6 <xQueueGenericSend+0x46>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10a      	bne.n	8009ae0 <xQueueGenericSend+0x60>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009adc:	bf00      	nop
 8009ade:	e7fe      	b.n	8009ade <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d103      	bne.n	8009aee <xQueueGenericSend+0x6e>
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <xQueueGenericSend+0x72>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <xQueueGenericSend+0x74>
 8009af2:	2300      	movs	r3, #0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <xQueueGenericSend+0x8e>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	623b      	str	r3, [r7, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	e7fe      	b.n	8009b0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b0e:	f001 f969 	bl	800ade4 <xTaskGetSchedulerState>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <xQueueGenericSend+0x9e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <xQueueGenericSend+0xa2>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <xQueueGenericSend+0xa4>
 8009b22:	2300      	movs	r3, #0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <xQueueGenericSend+0xbe>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	61fb      	str	r3, [r7, #28]
}
 8009b3a:	bf00      	nop
 8009b3c:	e7fe      	b.n	8009b3c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b3e:	f001 fec1 	bl	800b8c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d302      	bcc.n	8009b54 <xQueueGenericSend+0xd4>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d129      	bne.n	8009ba8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b5a:	f000 fa3d 	bl	8009fd8 <prvCopyDataToQueue>
 8009b5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d010      	beq.n	8009b8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	3324      	adds	r3, #36	; 0x24
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 ff7d 	bl	800aa6c <xTaskRemoveFromEventList>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d013      	beq.n	8009ba0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b78:	4b3f      	ldr	r3, [pc, #252]	; (8009c78 <xQueueGenericSend+0x1f8>)
 8009b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b7e:	601a      	str	r2, [r3, #0]
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	e00a      	b.n	8009ba0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d007      	beq.n	8009ba0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b90:	4b39      	ldr	r3, [pc, #228]	; (8009c78 <xQueueGenericSend+0x1f8>)
 8009b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ba0:	f001 fec0 	bl	800b924 <vPortExitCritical>
				return pdPASS;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e063      	b.n	8009c70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d103      	bne.n	8009bb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bae:	f001 feb9 	bl	800b924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e05c      	b.n	8009c70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d106      	bne.n	8009bca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8009bbc:	f107 0314 	add.w	r3, r7, #20
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 ffb5 	bl	800ab30 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bca:	f001 feab 	bl	800b924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bce:	f000 fd29 	bl	800a624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bd2:	f001 fe77 	bl	800b8c4 <vPortEnterCritical>
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bdc:	b25b      	sxtb	r3, r3
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009be2:	d103      	bne.n	8009bec <xQueueGenericSend+0x16c>
 8009be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bf2:	b25b      	sxtb	r3, r3
 8009bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bf8:	d103      	bne.n	8009c02 <xQueueGenericSend+0x182>
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c02:	f001 fe8f 	bl	800b924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c06:	1d3a      	adds	r2, r7, #4
 8009c08:	f107 0314 	add.w	r3, r7, #20
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 ffb2 	bl	800ab78 <xTaskCheckForTimeOut>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d124      	bne.n	8009c64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c1c:	f000 fad4 	bl	800a1c8 <prvIsQueueFull>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d018      	beq.n	8009c58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	3310      	adds	r3, #16
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fecc 	bl	800a9cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c36:	f000 fa5f 	bl	800a0f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c3a:	f000 fd01 	bl	800a640 <xTaskResumeAll>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f47f af7c 	bne.w	8009b3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <xQueueGenericSend+0x1f8>)
 8009c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	e772      	b.n	8009b3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c5a:	f000 fa4d 	bl	800a0f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c5e:	f000 fcef 	bl	800a640 <xTaskResumeAll>
 8009c62:	e76c      	b.n	8009b3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c66:	f000 fa47 	bl	800a0f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c6a:	f000 fce9 	bl	800a640 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c6e:	2300      	movs	r3, #0
		}
	}
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3738      	adds	r7, #56	; 0x38
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08e      	sub	sp, #56	; 0x38
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d103      	bne.n	8009cb8 <xQueueGenericSendFromISR+0x3c>
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <xQueueGenericSendFromISR+0x40>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e000      	b.n	8009cbe <xQueueGenericSendFromISR+0x42>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	623b      	str	r3, [r7, #32]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d103      	bne.n	8009ce6 <xQueueGenericSendFromISR+0x6a>
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d101      	bne.n	8009cea <xQueueGenericSendFromISR+0x6e>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e000      	b.n	8009cec <xQueueGenericSendFromISR+0x70>
 8009cea:	2300      	movs	r3, #0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10a      	bne.n	8009d06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	61fb      	str	r3, [r7, #28]
}
 8009d02:	bf00      	nop
 8009d04:	e7fe      	b.n	8009d04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d06:	f001 feb7 	bl	800ba78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61ba      	str	r2, [r7, #24]
 8009d20:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d22:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <xQueueGenericSendFromISR+0xbc>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d12c      	bne.n	8009d92 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d48:	f000 f946 	bl	8009fd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d54:	d112      	bne.n	8009d7c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d016      	beq.n	8009d8c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	3324      	adds	r3, #36	; 0x24
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 fe82 	bl	800aa6c <xTaskRemoveFromEventList>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00e      	beq.n	8009d8c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	e007      	b.n	8009d8c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d80:	3301      	adds	r3, #1
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	b25a      	sxtb	r2, r3
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009d90:	e001      	b.n	8009d96 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	637b      	str	r3, [r7, #52]	; 0x34
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 8009da0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3738      	adds	r7, #56	; 0x38
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08e      	sub	sp, #56	; 0x38
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xQueueGenericReceive+0x32>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d103      	bne.n	8009dec <xQueueGenericReceive+0x40>
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <xQueueGenericReceive+0x44>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e000      	b.n	8009df2 <xQueueGenericReceive+0x46>
 8009df0:	2300      	movs	r3, #0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <xQueueGenericReceive+0x60>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	623b      	str	r3, [r7, #32]
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <xQueueGenericReceive+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e0c:	f000 ffea 	bl	800ade4 <xTaskGetSchedulerState>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d102      	bne.n	8009e1c <xQueueGenericReceive+0x70>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <xQueueGenericReceive+0x74>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e000      	b.n	8009e22 <xQueueGenericReceive+0x76>
 8009e20:	2300      	movs	r3, #0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <xQueueGenericReceive+0x90>
	__asm volatile
 8009e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	61fb      	str	r3, [r7, #28]
}
 8009e38:	bf00      	nop
 8009e3a:	e7fe      	b.n	8009e3a <xQueueGenericReceive+0x8e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e3c:	f001 fd42 	bl	800b8c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e44:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d046      	beq.n	8009eda <xQueueGenericReceive+0x12e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e56:	f000 f929 	bl	800a0ac <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d121      	bne.n	8009ea4 <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	1e5a      	subs	r2, r3, #1
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d104      	bne.n	8009e7a <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009e70:	f001 f8d2 	bl	800b018 <pvTaskIncrementMutexHeldCount>
 8009e74:	4602      	mov	r2, r0
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d027      	beq.n	8009ed2 <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	3310      	adds	r3, #16
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fdf0 	bl	800aa6c <xTaskRemoveFromEventList>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01f      	beq.n	8009ed2 <xQueueGenericReceive+0x126>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8009e92:	4b50      	ldr	r3, [pc, #320]	; (8009fd4 <xQueueGenericReceive+0x228>)
 8009e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	e016      	b.n	8009ed2 <xQueueGenericReceive+0x126>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ea8:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00f      	beq.n	8009ed2 <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	3324      	adds	r3, #36	; 0x24
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 fdd8 	bl	800aa6c <xTaskRemoveFromEventList>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d007      	beq.n	8009ed2 <xQueueGenericReceive+0x126>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ec2:	4b44      	ldr	r3, [pc, #272]	; (8009fd4 <xQueueGenericReceive+0x228>)
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8009ed2:	f001 fd27 	bl	800b924 <vPortExitCritical>
				return pdPASS;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e077      	b.n	8009fca <xQueueGenericReceive+0x21e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d103      	bne.n	8009ee8 <xQueueGenericReceive+0x13c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ee0:	f001 fd20 	bl	800b924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e070      	b.n	8009fca <xQueueGenericReceive+0x21e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8009eee:	f107 0314 	add.w	r3, r7, #20
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 fe1c 	bl	800ab30 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009efc:	f001 fd12 	bl	800b924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f00:	f000 fb90 	bl	800a624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f04:	f001 fcde 	bl	800b8c4 <vPortEnterCritical>
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f0e:	b25b      	sxtb	r3, r3
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f14:	d103      	bne.n	8009f1e <xQueueGenericReceive+0x172>
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f24:	b25b      	sxtb	r3, r3
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f2a:	d103      	bne.n	8009f34 <xQueueGenericReceive+0x188>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f34:	f001 fcf6 	bl	800b924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f38:	1d3a      	adds	r2, r7, #4
 8009f3a:	f107 0314 	add.w	r3, r7, #20
 8009f3e:	4611      	mov	r1, r2
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 fe19 	bl	800ab78 <xTaskCheckForTimeOut>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d131      	bne.n	8009fb0 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f4e:	f000 f925 	bl	800a19c <prvIsQueueEmpty>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d025      	beq.n	8009fa4 <xQueueGenericReceive+0x1f8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d108      	bne.n	8009f72 <xQueueGenericReceive+0x1c6>
					{
						taskENTER_CRITICAL();
 8009f60:	f001 fcb0 	bl	800b8c4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 ff59 	bl	800ae20 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8009f6e:	f001 fcd9 	bl	800b924 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	3324      	adds	r3, #36	; 0x24
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 fd26 	bl	800a9cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f82:	f000 f8b9 	bl	800a0f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f86:	f000 fb5b 	bl	800a640 <xTaskResumeAll>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f47f af55 	bne.w	8009e3c <xQueueGenericReceive+0x90>
				{
					portYIELD_WITHIN_API();
 8009f92:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <xQueueGenericReceive+0x228>)
 8009f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	e74b      	b.n	8009e3c <xQueueGenericReceive+0x90>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa6:	f000 f8a7 	bl	800a0f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009faa:	f000 fb49 	bl	800a640 <xTaskResumeAll>
 8009fae:	e745      	b.n	8009e3c <xQueueGenericReceive+0x90>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8009fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fb2:	f000 f8a1 	bl	800a0f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fb6:	f000 fb43 	bl	800a640 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fbc:	f000 f8ee 	bl	800a19c <prvIsQueueEmpty>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f43f af3a 	beq.w	8009e3c <xQueueGenericReceive+0x90>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3738      	adds	r7, #56	; 0x38
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	e000ed04 	.word	0xe000ed04

08009fd8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10d      	bne.n	800a012 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d14d      	bne.n	800a09a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 ff82 	bl	800af0c <xTaskPriorityDisinherit>
 800a008:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	605a      	str	r2, [r3, #4]
 800a010:	e043      	b.n	800a09a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d119      	bne.n	800a04c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6898      	ldr	r0, [r3, #8]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a020:	461a      	mov	r2, r3
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	f002 f9d8 	bl	800c3d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	689a      	ldr	r2, [r3, #8]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a030:	441a      	add	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	689a      	ldr	r2, [r3, #8]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d32b      	bcc.n	800a09a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	609a      	str	r2, [r3, #8]
 800a04a:	e026      	b.n	800a09a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	68d8      	ldr	r0, [r3, #12]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a054:	461a      	mov	r2, r3
 800a056:	68b9      	ldr	r1, [r7, #8]
 800a058:	f002 f9be 	bl	800c3d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68da      	ldr	r2, [r3, #12]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a064:	425b      	negs	r3, r3
 800a066:	441a      	add	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	68da      	ldr	r2, [r3, #12]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	429a      	cmp	r2, r3
 800a076:	d207      	bcs.n	800a088 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	425b      	negs	r3, r3
 800a082:	441a      	add	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d105      	bne.n	800a09a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	3b01      	subs	r3, #1
 800a098:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0a2:	697b      	ldr	r3, [r7, #20]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d018      	beq.n	800a0f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	441a      	add	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68da      	ldr	r2, [r3, #12]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d303      	bcc.n	800a0e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68d9      	ldr	r1, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6838      	ldr	r0, [r7, #0]
 800a0ec:	f002 f974 	bl	800c3d8 <memcpy>
	}
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a100:	f001 fbe0 	bl	800b8c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a10a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a10c:	e011      	b.n	800a132 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d012      	beq.n	800a13c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3324      	adds	r3, #36	; 0x24
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 fca6 	bl	800aa6c <xTaskRemoveFromEventList>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a126:	f000 fd87 	bl	800ac38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	dce9      	bgt.n	800a10e <prvUnlockQueue+0x16>
 800a13a:	e000      	b.n	800a13e <prvUnlockQueue+0x46>
					break;
 800a13c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	22ff      	movs	r2, #255	; 0xff
 800a142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a146:	f001 fbed 	bl	800b924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a14a:	f001 fbbb 	bl	800b8c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a154:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a156:	e011      	b.n	800a17c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d012      	beq.n	800a186 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3310      	adds	r3, #16
 800a164:	4618      	mov	r0, r3
 800a166:	f000 fc81 	bl	800aa6c <xTaskRemoveFromEventList>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a170:	f000 fd62 	bl	800ac38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a174:	7bbb      	ldrb	r3, [r7, #14]
 800a176:	3b01      	subs	r3, #1
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a17c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a180:	2b00      	cmp	r3, #0
 800a182:	dce9      	bgt.n	800a158 <prvUnlockQueue+0x60>
 800a184:	e000      	b.n	800a188 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a186:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	22ff      	movs	r2, #255	; 0xff
 800a18c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a190:	f001 fbc8 	bl	800b924 <vPortExitCritical>
}
 800a194:	bf00      	nop
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1a4:	f001 fb8e 	bl	800b8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	e001      	b.n	800a1ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1ba:	f001 fbb3 	bl	800b924 <vPortExitCritical>

	return xReturn;
 800a1be:	68fb      	ldr	r3, [r7, #12]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1d0:	f001 fb78 	bl	800b8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d102      	bne.n	800a1e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	e001      	b.n	800a1ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1ea:	f001 fb9b 	bl	800b924 <vPortExitCritical>

	return xReturn;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	e014      	b.n	800a232 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a208:	4a0f      	ldr	r2, [pc, #60]	; (800a248 <vQueueAddToRegistry+0x50>)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a214:	490c      	ldr	r1, [pc, #48]	; (800a248 <vQueueAddToRegistry+0x50>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a21e:	4a0a      	ldr	r2, [pc, #40]	; (800a248 <vQueueAddToRegistry+0x50>)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	4413      	add	r3, r2
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a22a:	e006      	b.n	800a23a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b07      	cmp	r3, #7
 800a236:	d9e7      	bls.n	800a208 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	2000818c 	.word	0x2000818c

0800a24c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a25c:	f001 fb32 	bl	800b8c4 <vPortEnterCritical>
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a266:	b25b      	sxtb	r3, r3
 800a268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a26c:	d103      	bne.n	800a276 <vQueueWaitForMessageRestricted+0x2a>
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a27c:	b25b      	sxtb	r3, r3
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a282:	d103      	bne.n	800a28c <vQueueWaitForMessageRestricted+0x40>
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a28c:	f001 fb4a 	bl	800b924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a294:	2b00      	cmp	r3, #0
 800a296:	d106      	bne.n	800a2a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	3324      	adds	r3, #36	; 0x24
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	68b9      	ldr	r1, [r7, #8]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fbb7 	bl	800aa14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a2a6:	6978      	ldr	r0, [r7, #20]
 800a2a8:	f7ff ff26 	bl	800a0f8 <prvUnlockQueue>
	}
 800a2ac:	bf00      	nop
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08c      	sub	sp, #48	; 0x30
 800a2b8:	af04      	add	r7, sp, #16
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	603b      	str	r3, [r7, #0]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2c4:	88fb      	ldrh	r3, [r7, #6]
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f001 fc15 	bl	800baf8 <pvPortMalloc>
 800a2ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00e      	beq.n	800a2f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a2d6:	205c      	movs	r0, #92	; 0x5c
 800a2d8:	f001 fc0e 	bl	800baf8 <pvPortMalloc>
 800a2dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d003      	beq.n	800a2ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	631a      	str	r2, [r3, #48]	; 0x30
 800a2ea:	e005      	b.n	800a2f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2ec:	6978      	ldr	r0, [r7, #20]
 800a2ee:	f001 fcc7 	bl	800bc80 <vPortFree>
 800a2f2:	e001      	b.n	800a2f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d013      	beq.n	800a326 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2fe:	88fa      	ldrh	r2, [r7, #6]
 800a300:	2300      	movs	r3, #0
 800a302:	9303      	str	r3, [sp, #12]
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	9302      	str	r3, [sp, #8]
 800a308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	68b9      	ldr	r1, [r7, #8]
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 f80e 	bl	800a336 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a31a:	69f8      	ldr	r0, [r7, #28]
 800a31c:	f000 f892 	bl	800a444 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a320:	2301      	movs	r3, #1
 800a322:	61bb      	str	r3, [r7, #24]
 800a324:	e002      	b.n	800a32c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a32a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a32c:	69bb      	ldr	r3, [r7, #24]
	}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b088      	sub	sp, #32
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	607a      	str	r2, [r7, #4]
 800a342:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	461a      	mov	r2, r3
 800a34e:	21a5      	movs	r1, #165	; 0xa5
 800a350:	f002 f850 	bl	800c3f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a35e:	3b01      	subs	r3, #1
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	f023 0307 	bic.w	r3, r3, #7
 800a36c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00a      	beq.n	800a38e <prvInitialiseNewTask+0x58>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	617b      	str	r3, [r7, #20]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a38e:	2300      	movs	r3, #0
 800a390:	61fb      	str	r3, [r7, #28]
 800a392:	e012      	b.n	800a3ba <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	4413      	add	r3, r2
 800a39a:	7819      	ldrb	r1, [r3, #0]
 800a39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	3334      	adds	r3, #52	; 0x34
 800a3a4:	460a      	mov	r2, r1
 800a3a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d006      	beq.n	800a3c2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	61fb      	str	r3, [r7, #28]
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	2b0f      	cmp	r3, #15
 800a3be:	d9e9      	bls.n	800a394 <prvInitialiseNewTask+0x5e>
 800a3c0:	e000      	b.n	800a3c4 <prvInitialiseNewTask+0x8e>
		{
			break;
 800a3c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ce:	2b06      	cmp	r3, #6
 800a3d0:	d901      	bls.n	800a3d6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3d2:	2306      	movs	r3, #6
 800a3d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff f9ed 	bl	80097cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f4:	3318      	adds	r3, #24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff f9e8 	bl	80097cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a400:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	f1c3 0207 	rsb	r2, r3, #7
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a410:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a414:	2200      	movs	r2, #0
 800a416:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	68f9      	ldr	r1, [r7, #12]
 800a424:	69b8      	ldr	r0, [r7, #24]
 800a426:	f001 f943 	bl	800b6b0 <pxPortInitialiseStack>
 800a42a:	4602      	mov	r2, r0
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a43a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a43c:	bf00      	nop
 800a43e:	3720      	adds	r7, #32
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a44c:	f001 fa3a 	bl	800b8c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a450:	4b2c      	ldr	r3, [pc, #176]	; (800a504 <prvAddNewTaskToReadyList+0xc0>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3301      	adds	r3, #1
 800a456:	4a2b      	ldr	r2, [pc, #172]	; (800a504 <prvAddNewTaskToReadyList+0xc0>)
 800a458:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a45a:	4b2b      	ldr	r3, [pc, #172]	; (800a508 <prvAddNewTaskToReadyList+0xc4>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d109      	bne.n	800a476 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a462:	4a29      	ldr	r2, [pc, #164]	; (800a508 <prvAddNewTaskToReadyList+0xc4>)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a468:	4b26      	ldr	r3, [pc, #152]	; (800a504 <prvAddNewTaskToReadyList+0xc0>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d110      	bne.n	800a492 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a470:	f000 fc06 	bl	800ac80 <prvInitialiseTaskLists>
 800a474:	e00d      	b.n	800a492 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a476:	4b25      	ldr	r3, [pc, #148]	; (800a50c <prvAddNewTaskToReadyList+0xc8>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d109      	bne.n	800a492 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a47e:	4b22      	ldr	r3, [pc, #136]	; (800a508 <prvAddNewTaskToReadyList+0xc4>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a488:	429a      	cmp	r2, r3
 800a48a:	d802      	bhi.n	800a492 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a48c:	4a1e      	ldr	r2, [pc, #120]	; (800a508 <prvAddNewTaskToReadyList+0xc4>)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a492:	4b1f      	ldr	r3, [pc, #124]	; (800a510 <prvAddNewTaskToReadyList+0xcc>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3301      	adds	r3, #1
 800a498:	4a1d      	ldr	r2, [pc, #116]	; (800a510 <prvAddNewTaskToReadyList+0xcc>)
 800a49a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a49c:	4b1c      	ldr	r3, [pc, #112]	; (800a510 <prvAddNewTaskToReadyList+0xcc>)
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	409a      	lsls	r2, r3
 800a4ac:	4b19      	ldr	r3, [pc, #100]	; (800a514 <prvAddNewTaskToReadyList+0xd0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	4a18      	ldr	r2, [pc, #96]	; (800a514 <prvAddNewTaskToReadyList+0xd0>)
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4a15      	ldr	r2, [pc, #84]	; (800a518 <prvAddNewTaskToReadyList+0xd4>)
 800a4c4:	441a      	add	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	f7ff f98a 	bl	80097e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4d2:	f001 fa27 	bl	800b924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4d6:	4b0d      	ldr	r3, [pc, #52]	; (800a50c <prvAddNewTaskToReadyList+0xc8>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00e      	beq.n	800a4fc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4de:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <prvAddNewTaskToReadyList+0xc4>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d207      	bcs.n	800a4fc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4ec:	4b0b      	ldr	r3, [pc, #44]	; (800a51c <prvAddNewTaskToReadyList+0xd8>)
 800a4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4fc:	bf00      	nop
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20000318 	.word	0x20000318
 800a508:	20000218 	.word	0x20000218
 800a50c:	20000324 	.word	0x20000324
 800a510:	20000334 	.word	0x20000334
 800a514:	20000320 	.word	0x20000320
 800a518:	2000021c 	.word	0x2000021c
 800a51c:	e000ed04 	.word	0xe000ed04

0800a520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a528:	2300      	movs	r3, #0
 800a52a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d017      	beq.n	800a562 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a532:	4b13      	ldr	r3, [pc, #76]	; (800a580 <vTaskDelay+0x60>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00a      	beq.n	800a550 <vTaskDelay+0x30>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	60bb      	str	r3, [r7, #8]
}
 800a54c:	bf00      	nop
 800a54e:	e7fe      	b.n	800a54e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a550:	f000 f868 	bl	800a624 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a554:	2100      	movs	r1, #0
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fd72 	bl	800b040 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a55c:	f000 f870 	bl	800a640 <xTaskResumeAll>
 800a560:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d107      	bne.n	800a578 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a568:	4b06      	ldr	r3, [pc, #24]	; (800a584 <vTaskDelay+0x64>)
 800a56a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20000340 	.word	0x20000340
 800a584:	e000ed04 	.word	0xe000ed04

0800a588 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a58e:	4b1f      	ldr	r3, [pc, #124]	; (800a60c <vTaskStartScheduler+0x84>)
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	2300      	movs	r3, #0
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	2300      	movs	r3, #0
 800a598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a59c:	491c      	ldr	r1, [pc, #112]	; (800a610 <vTaskStartScheduler+0x88>)
 800a59e:	481d      	ldr	r0, [pc, #116]	; (800a614 <vTaskStartScheduler+0x8c>)
 800a5a0:	f7ff fe88 	bl	800a2b4 <xTaskCreate>
 800a5a4:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d102      	bne.n	800a5b2 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800a5ac:	f000 fdae 	bl	800b10c <xTimerCreateTimerTask>
 800a5b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d116      	bne.n	800a5e6 <vTaskStartScheduler+0x5e>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	60bb      	str	r3, [r7, #8]
}
 800a5ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5cc:	4b12      	ldr	r3, [pc, #72]	; (800a618 <vTaskStartScheduler+0x90>)
 800a5ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5d4:	4b11      	ldr	r3, [pc, #68]	; (800a61c <vTaskStartScheduler+0x94>)
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a5da:	4b11      	ldr	r3, [pc, #68]	; (800a620 <vTaskStartScheduler+0x98>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5e0:	f001 f8e2 	bl	800b7a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5e4:	e00e      	b.n	800a604 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5ec:	d10a      	bne.n	800a604 <vTaskStartScheduler+0x7c>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	607b      	str	r3, [r7, #4]
}
 800a600:	bf00      	nop
 800a602:	e7fe      	b.n	800a602 <vTaskStartScheduler+0x7a>
}
 800a604:	bf00      	nop
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	2000033c 	.word	0x2000033c
 800a610:	080109c8 	.word	0x080109c8
 800a614:	0800ac51 	.word	0x0800ac51
 800a618:	20000338 	.word	0x20000338
 800a61c:	20000324 	.word	0x20000324
 800a620:	2000031c 	.word	0x2000031c

0800a624 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a624:	b480      	push	{r7}
 800a626:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a628:	4b04      	ldr	r3, [pc, #16]	; (800a63c <vTaskSuspendAll+0x18>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3301      	adds	r3, #1
 800a62e:	4a03      	ldr	r2, [pc, #12]	; (800a63c <vTaskSuspendAll+0x18>)
 800a630:	6013      	str	r3, [r2, #0]
}
 800a632:	bf00      	nop
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	20000340 	.word	0x20000340

0800a640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a64e:	4b41      	ldr	r3, [pc, #260]	; (800a754 <xTaskResumeAll+0x114>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10a      	bne.n	800a66c <xTaskResumeAll+0x2c>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	603b      	str	r3, [r7, #0]
}
 800a668:	bf00      	nop
 800a66a:	e7fe      	b.n	800a66a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a66c:	f001 f92a 	bl	800b8c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a670:	4b38      	ldr	r3, [pc, #224]	; (800a754 <xTaskResumeAll+0x114>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3b01      	subs	r3, #1
 800a676:	4a37      	ldr	r2, [pc, #220]	; (800a754 <xTaskResumeAll+0x114>)
 800a678:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a67a:	4b36      	ldr	r3, [pc, #216]	; (800a754 <xTaskResumeAll+0x114>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d161      	bne.n	800a746 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a682:	4b35      	ldr	r3, [pc, #212]	; (800a758 <xTaskResumeAll+0x118>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d05d      	beq.n	800a746 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a68a:	e02e      	b.n	800a6ea <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a68c:	4b33      	ldr	r3, [pc, #204]	; (800a75c <xTaskResumeAll+0x11c>)
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3318      	adds	r3, #24
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff f901 	bl	80098a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff f8fc 	bl	80098a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	409a      	lsls	r2, r3
 800a6b0:	4b2b      	ldr	r3, [pc, #172]	; (800a760 <xTaskResumeAll+0x120>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	4a2a      	ldr	r2, [pc, #168]	; (800a760 <xTaskResumeAll+0x120>)
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4a27      	ldr	r2, [pc, #156]	; (800a764 <xTaskResumeAll+0x124>)
 800a6c8:	441a      	add	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f7ff f888 	bl	80097e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6da:	4b23      	ldr	r3, [pc, #140]	; (800a768 <xTaskResumeAll+0x128>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d302      	bcc.n	800a6ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a6e4:	4b21      	ldr	r3, [pc, #132]	; (800a76c <xTaskResumeAll+0x12c>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6ea:	4b1c      	ldr	r3, [pc, #112]	; (800a75c <xTaskResumeAll+0x11c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1cc      	bne.n	800a68c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6f8:	f000 fb4e 	bl	800ad98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a6fc:	4b1c      	ldr	r3, [pc, #112]	; (800a770 <xTaskResumeAll+0x130>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d010      	beq.n	800a72a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a708:	f000 f846 	bl	800a798 <xTaskIncrementTick>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a712:	4b16      	ldr	r3, [pc, #88]	; (800a76c <xTaskResumeAll+0x12c>)
 800a714:	2201      	movs	r2, #1
 800a716:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1f1      	bne.n	800a708 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a724:	4b12      	ldr	r3, [pc, #72]	; (800a770 <xTaskResumeAll+0x130>)
 800a726:	2200      	movs	r2, #0
 800a728:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a72a:	4b10      	ldr	r3, [pc, #64]	; (800a76c <xTaskResumeAll+0x12c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d009      	beq.n	800a746 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a732:	2301      	movs	r3, #1
 800a734:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a736:	4b0f      	ldr	r3, [pc, #60]	; (800a774 <xTaskResumeAll+0x134>)
 800a738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a746:	f001 f8ed 	bl	800b924 <vPortExitCritical>

	return xAlreadyYielded;
 800a74a:	68bb      	ldr	r3, [r7, #8]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	20000340 	.word	0x20000340
 800a758:	20000318 	.word	0x20000318
 800a75c:	200002d8 	.word	0x200002d8
 800a760:	20000320 	.word	0x20000320
 800a764:	2000021c 	.word	0x2000021c
 800a768:	20000218 	.word	0x20000218
 800a76c:	2000032c 	.word	0x2000032c
 800a770:	20000328 	.word	0x20000328
 800a774:	e000ed04 	.word	0xe000ed04

0800a778 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a77e:	4b05      	ldr	r3, [pc, #20]	; (800a794 <xTaskGetTickCount+0x1c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a784:	687b      	ldr	r3, [r7, #4]
}
 800a786:	4618      	mov	r0, r3
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	2000031c 	.word	0x2000031c

0800a798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a2:	4b51      	ldr	r3, [pc, #324]	; (800a8e8 <xTaskIncrementTick+0x150>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f040 808d 	bne.w	800a8c6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800a7ac:	4b4f      	ldr	r3, [pc, #316]	; (800a8ec <xTaskIncrementTick+0x154>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7b4:	4a4d      	ldr	r2, [pc, #308]	; (800a8ec <xTaskIncrementTick+0x154>)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d120      	bne.n	800a802 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7c0:	4b4b      	ldr	r3, [pc, #300]	; (800a8f0 <xTaskIncrementTick+0x158>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00a      	beq.n	800a7e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	603b      	str	r3, [r7, #0]
}
 800a7dc:	bf00      	nop
 800a7de:	e7fe      	b.n	800a7de <xTaskIncrementTick+0x46>
 800a7e0:	4b43      	ldr	r3, [pc, #268]	; (800a8f0 <xTaskIncrementTick+0x158>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	60fb      	str	r3, [r7, #12]
 800a7e6:	4b43      	ldr	r3, [pc, #268]	; (800a8f4 <xTaskIncrementTick+0x15c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a41      	ldr	r2, [pc, #260]	; (800a8f0 <xTaskIncrementTick+0x158>)
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	4a41      	ldr	r2, [pc, #260]	; (800a8f4 <xTaskIncrementTick+0x15c>)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	4b40      	ldr	r3, [pc, #256]	; (800a8f8 <xTaskIncrementTick+0x160>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	4a3f      	ldr	r2, [pc, #252]	; (800a8f8 <xTaskIncrementTick+0x160>)
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	f000 facb 	bl	800ad98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a802:	4b3e      	ldr	r3, [pc, #248]	; (800a8fc <xTaskIncrementTick+0x164>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d34d      	bcc.n	800a8a8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a80c:	4b38      	ldr	r3, [pc, #224]	; (800a8f0 <xTaskIncrementTick+0x158>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <xTaskIncrementTick+0x82>
 800a816:	2301      	movs	r3, #1
 800a818:	e000      	b.n	800a81c <xTaskIncrementTick+0x84>
 800a81a:	2300      	movs	r3, #0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a820:	4b36      	ldr	r3, [pc, #216]	; (800a8fc <xTaskIncrementTick+0x164>)
 800a822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a826:	601a      	str	r2, [r3, #0]
					break;
 800a828:	e03e      	b.n	800a8a8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a82a:	4b31      	ldr	r3, [pc, #196]	; (800a8f0 <xTaskIncrementTick+0x158>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d203      	bcs.n	800a84a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a842:	4a2e      	ldr	r2, [pc, #184]	; (800a8fc <xTaskIncrementTick+0x164>)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6013      	str	r3, [r2, #0]
						break;
 800a848:	e02e      	b.n	800a8a8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	3304      	adds	r3, #4
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff f826 	bl	80098a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d004      	beq.n	800a866 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	3318      	adds	r3, #24
 800a860:	4618      	mov	r0, r3
 800a862:	f7ff f81d 	bl	80098a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86a:	2201      	movs	r2, #1
 800a86c:	409a      	lsls	r2, r3
 800a86e:	4b24      	ldr	r3, [pc, #144]	; (800a900 <xTaskIncrementTick+0x168>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4313      	orrs	r3, r2
 800a874:	4a22      	ldr	r2, [pc, #136]	; (800a900 <xTaskIncrementTick+0x168>)
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4a1f      	ldr	r2, [pc, #124]	; (800a904 <xTaskIncrementTick+0x16c>)
 800a886:	441a      	add	r2, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	3304      	adds	r3, #4
 800a88c:	4619      	mov	r1, r3
 800a88e:	4610      	mov	r0, r2
 800a890:	f7fe ffa9 	bl	80097e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a898:	4b1b      	ldr	r3, [pc, #108]	; (800a908 <xTaskIncrementTick+0x170>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d3b4      	bcc.n	800a80c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8a6:	e7b1      	b.n	800a80c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8a8:	4b17      	ldr	r3, [pc, #92]	; (800a908 <xTaskIncrementTick+0x170>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ae:	4915      	ldr	r1, [pc, #84]	; (800a904 <xTaskIncrementTick+0x16c>)
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	440b      	add	r3, r1
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d907      	bls.n	800a8d0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	e004      	b.n	800a8d0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a8c6:	4b11      	ldr	r3, [pc, #68]	; (800a90c <xTaskIncrementTick+0x174>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	4a0f      	ldr	r2, [pc, #60]	; (800a90c <xTaskIncrementTick+0x174>)
 800a8ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a8d0:	4b0f      	ldr	r3, [pc, #60]	; (800a910 <xTaskIncrementTick+0x178>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a8dc:	697b      	ldr	r3, [r7, #20]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3718      	adds	r7, #24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20000340 	.word	0x20000340
 800a8ec:	2000031c 	.word	0x2000031c
 800a8f0:	200002d0 	.word	0x200002d0
 800a8f4:	200002d4 	.word	0x200002d4
 800a8f8:	20000330 	.word	0x20000330
 800a8fc:	20000338 	.word	0x20000338
 800a900:	20000320 	.word	0x20000320
 800a904:	2000021c 	.word	0x2000021c
 800a908:	20000218 	.word	0x20000218
 800a90c:	20000328 	.word	0x20000328
 800a910:	2000032c 	.word	0x2000032c

0800a914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a914:	b480      	push	{r7}
 800a916:	b087      	sub	sp, #28
 800a918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a91a:	4b27      	ldr	r3, [pc, #156]	; (800a9b8 <vTaskSwitchContext+0xa4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a922:	4b26      	ldr	r3, [pc, #152]	; (800a9bc <vTaskSwitchContext+0xa8>)
 800a924:	2201      	movs	r2, #1
 800a926:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a928:	e03f      	b.n	800a9aa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a92a:	4b24      	ldr	r3, [pc, #144]	; (800a9bc <vTaskSwitchContext+0xa8>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a930:	4b23      	ldr	r3, [pc, #140]	; (800a9c0 <vTaskSwitchContext+0xac>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	fab3 f383 	clz	r3, r3
 800a93c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a93e:	7afb      	ldrb	r3, [r7, #11]
 800a940:	f1c3 031f 	rsb	r3, r3, #31
 800a944:	617b      	str	r3, [r7, #20]
 800a946:	491f      	ldr	r1, [pc, #124]	; (800a9c4 <vTaskSwitchContext+0xb0>)
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	4613      	mov	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	440b      	add	r3, r1
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10a      	bne.n	800a970 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	607b      	str	r3, [r7, #4]
}
 800a96c:	bf00      	nop
 800a96e:	e7fe      	b.n	800a96e <vTaskSwitchContext+0x5a>
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	4613      	mov	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4a12      	ldr	r2, [pc, #72]	; (800a9c4 <vTaskSwitchContext+0xb0>)
 800a97c:	4413      	add	r3, r2
 800a97e:	613b      	str	r3, [r7, #16]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	605a      	str	r2, [r3, #4]
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	3308      	adds	r3, #8
 800a992:	429a      	cmp	r2, r3
 800a994:	d104      	bne.n	800a9a0 <vTaskSwitchContext+0x8c>
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	605a      	str	r2, [r3, #4]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	4a08      	ldr	r2, [pc, #32]	; (800a9c8 <vTaskSwitchContext+0xb4>)
 800a9a8:	6013      	str	r3, [r2, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	371c      	adds	r7, #28
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	20000340 	.word	0x20000340
 800a9bc:	2000032c 	.word	0x2000032c
 800a9c0:	20000320 	.word	0x20000320
 800a9c4:	2000021c 	.word	0x2000021c
 800a9c8:	20000218 	.word	0x20000218

0800a9cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10a      	bne.n	800a9f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	60fb      	str	r3, [r7, #12]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9f2:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <vTaskPlaceOnEventList+0x44>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3318      	adds	r3, #24
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7fe ff17 	bl	800982e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa00:	2101      	movs	r1, #1
 800aa02:	6838      	ldr	r0, [r7, #0]
 800aa04:	f000 fb1c 	bl	800b040 <prvAddCurrentTaskToDelayedList>
}
 800aa08:	bf00      	nop
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20000218 	.word	0x20000218

0800aa14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10a      	bne.n	800aa3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	617b      	str	r3, [r7, #20]
}
 800aa38:	bf00      	nop
 800aa3a:	e7fe      	b.n	800aa3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3318      	adds	r3, #24
 800aa42:	4619      	mov	r1, r3
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f7fe fece 	bl	80097e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aa50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	68b8      	ldr	r0, [r7, #8]
 800aa5a:	f000 faf1 	bl	800b040 <prvAddCurrentTaskToDelayedList>
	}
 800aa5e:	bf00      	nop
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	20000218 	.word	0x20000218

0800aa6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	60fb      	str	r3, [r7, #12]
}
 800aa94:	bf00      	nop
 800aa96:	e7fe      	b.n	800aa96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	3318      	adds	r3, #24
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe feff 	bl	80098a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaa2:	4b1d      	ldr	r3, [pc, #116]	; (800ab18 <xTaskRemoveFromEventList+0xac>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d11c      	bne.n	800aae4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	3304      	adds	r3, #4
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fef6 	bl	80098a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab8:	2201      	movs	r2, #1
 800aaba:	409a      	lsls	r2, r3
 800aabc:	4b17      	ldr	r3, [pc, #92]	; (800ab1c <xTaskRemoveFromEventList+0xb0>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	4a16      	ldr	r2, [pc, #88]	; (800ab1c <xTaskRemoveFromEventList+0xb0>)
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4a13      	ldr	r2, [pc, #76]	; (800ab20 <xTaskRemoveFromEventList+0xb4>)
 800aad4:	441a      	add	r2, r3
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	3304      	adds	r3, #4
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f7fe fe82 	bl	80097e6 <vListInsertEnd>
 800aae2:	e005      	b.n	800aaf0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	3318      	adds	r3, #24
 800aae8:	4619      	mov	r1, r3
 800aaea:	480e      	ldr	r0, [pc, #56]	; (800ab24 <xTaskRemoveFromEventList+0xb8>)
 800aaec:	f7fe fe7b 	bl	80097e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf4:	4b0c      	ldr	r3, [pc, #48]	; (800ab28 <xTaskRemoveFromEventList+0xbc>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d905      	bls.n	800ab0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aafe:	2301      	movs	r3, #1
 800ab00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab02:	4b0a      	ldr	r3, [pc, #40]	; (800ab2c <xTaskRemoveFromEventList+0xc0>)
 800ab04:	2201      	movs	r2, #1
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	e001      	b.n	800ab0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ab0e:	697b      	ldr	r3, [r7, #20]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	20000340 	.word	0x20000340
 800ab1c:	20000320 	.word	0x20000320
 800ab20:	2000021c 	.word	0x2000021c
 800ab24:	200002d8 	.word	0x200002d8
 800ab28:	20000218 	.word	0x20000218
 800ab2c:	2000032c 	.word	0x2000032c

0800ab30 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10a      	bne.n	800ab54 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	60fb      	str	r3, [r7, #12]
}
 800ab50:	bf00      	nop
 800ab52:	e7fe      	b.n	800ab52 <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab54:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <vTaskSetTimeOutState+0x40>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab5c:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <vTaskSetTimeOutState+0x44>)
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	605a      	str	r2, [r3, #4]
}
 800ab64:	bf00      	nop
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	20000330 	.word	0x20000330
 800ab74:	2000031c 	.word	0x2000031c

0800ab78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10a      	bne.n	800ab9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	60fb      	str	r3, [r7, #12]
}
 800ab9a:	bf00      	nop
 800ab9c:	e7fe      	b.n	800ab9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	60bb      	str	r3, [r7, #8]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800abba:	f000 fe83 	bl	800b8c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abbe:	4b1c      	ldr	r3, [pc, #112]	; (800ac30 <xTaskCheckForTimeOut+0xb8>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abcc:	d102      	bne.n	800abd4 <xTaskCheckForTimeOut+0x5c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]
 800abd2:	e026      	b.n	800ac22 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	4b16      	ldr	r3, [pc, #88]	; (800ac34 <xTaskCheckForTimeOut+0xbc>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d007      	beq.n	800abf0 <xTaskCheckForTimeOut+0x78>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d302      	bcc.n	800abf0 <xTaskCheckForTimeOut+0x78>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abea:	2301      	movs	r3, #1
 800abec:	617b      	str	r3, [r7, #20]
 800abee:	e018      	b.n	800ac22 <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	1ad2      	subs	r2, r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d20e      	bcs.n	800ac1e <xTaskCheckForTimeOut+0xa6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6859      	ldr	r1, [r3, #4]
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	1acb      	subs	r3, r1, r3
 800ac0c:	441a      	add	r2, r3
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff ff8c 	bl	800ab30 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	617b      	str	r3, [r7, #20]
 800ac1c:	e001      	b.n	800ac22 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800ac22:	f000 fe7f 	bl	800b924 <vPortExitCritical>

	return xReturn;
 800ac26:	697b      	ldr	r3, [r7, #20]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	2000031c 	.word	0x2000031c
 800ac34:	20000330 	.word	0x20000330

0800ac38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac3c:	4b03      	ldr	r3, [pc, #12]	; (800ac4c <vTaskMissedYield+0x14>)
 800ac3e:	2201      	movs	r2, #1
 800ac40:	601a      	str	r2, [r3, #0]
}
 800ac42:	bf00      	nop
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	2000032c 	.word	0x2000032c

0800ac50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac58:	f000 f852 	bl	800ad00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac5c:	4b06      	ldr	r3, [pc, #24]	; (800ac78 <prvIdleTask+0x28>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d9f9      	bls.n	800ac58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <prvIdleTask+0x2c>)
 800ac66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac74:	e7f0      	b.n	800ac58 <prvIdleTask+0x8>
 800ac76:	bf00      	nop
 800ac78:	2000021c 	.word	0x2000021c
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac86:	2300      	movs	r3, #0
 800ac88:	607b      	str	r3, [r7, #4]
 800ac8a:	e00c      	b.n	800aca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4a12      	ldr	r2, [pc, #72]	; (800ace0 <prvInitialiseTaskLists+0x60>)
 800ac98:	4413      	add	r3, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe fd76 	bl	800978c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3301      	adds	r3, #1
 800aca4:	607b      	str	r3, [r7, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b06      	cmp	r3, #6
 800acaa:	d9ef      	bls.n	800ac8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acac:	480d      	ldr	r0, [pc, #52]	; (800ace4 <prvInitialiseTaskLists+0x64>)
 800acae:	f7fe fd6d 	bl	800978c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acb2:	480d      	ldr	r0, [pc, #52]	; (800ace8 <prvInitialiseTaskLists+0x68>)
 800acb4:	f7fe fd6a 	bl	800978c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acb8:	480c      	ldr	r0, [pc, #48]	; (800acec <prvInitialiseTaskLists+0x6c>)
 800acba:	f7fe fd67 	bl	800978c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acbe:	480c      	ldr	r0, [pc, #48]	; (800acf0 <prvInitialiseTaskLists+0x70>)
 800acc0:	f7fe fd64 	bl	800978c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800acc4:	480b      	ldr	r0, [pc, #44]	; (800acf4 <prvInitialiseTaskLists+0x74>)
 800acc6:	f7fe fd61 	bl	800978c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acca:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <prvInitialiseTaskLists+0x78>)
 800accc:	4a05      	ldr	r2, [pc, #20]	; (800ace4 <prvInitialiseTaskLists+0x64>)
 800acce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acd0:	4b0a      	ldr	r3, [pc, #40]	; (800acfc <prvInitialiseTaskLists+0x7c>)
 800acd2:	4a05      	ldr	r2, [pc, #20]	; (800ace8 <prvInitialiseTaskLists+0x68>)
 800acd4:	601a      	str	r2, [r3, #0]
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	2000021c 	.word	0x2000021c
 800ace4:	200002a8 	.word	0x200002a8
 800ace8:	200002bc 	.word	0x200002bc
 800acec:	200002d8 	.word	0x200002d8
 800acf0:	200002ec 	.word	0x200002ec
 800acf4:	20000304 	.word	0x20000304
 800acf8:	200002d0 	.word	0x200002d0
 800acfc:	200002d4 	.word	0x200002d4

0800ad00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad06:	e028      	b.n	800ad5a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800ad08:	f7ff fc8c 	bl	800a624 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800ad0c:	4b17      	ldr	r3, [pc, #92]	; (800ad6c <prvCheckTasksWaitingTermination+0x6c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	bf0c      	ite	eq
 800ad14:	2301      	moveq	r3, #1
 800ad16:	2300      	movne	r3, #0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800ad1c:	f7ff fc90 	bl	800a640 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d119      	bne.n	800ad5a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800ad26:	f000 fdcd 	bl	800b8c4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ad2a:	4b10      	ldr	r3, [pc, #64]	; (800ad6c <prvCheckTasksWaitingTermination+0x6c>)
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fdb2 	bl	80098a0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800ad3c:	4b0c      	ldr	r3, [pc, #48]	; (800ad70 <prvCheckTasksWaitingTermination+0x70>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	4a0b      	ldr	r2, [pc, #44]	; (800ad70 <prvCheckTasksWaitingTermination+0x70>)
 800ad44:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800ad46:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <prvCheckTasksWaitingTermination+0x74>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <prvCheckTasksWaitingTermination+0x74>)
 800ad4e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800ad50:	f000 fde8 	bl	800b924 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800ad54:	6838      	ldr	r0, [r7, #0]
 800ad56:	f000 f80f 	bl	800ad78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad5a:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <prvCheckTasksWaitingTermination+0x74>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1d2      	bne.n	800ad08 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad62:	bf00      	nop
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	200002ec 	.word	0x200002ec
 800ad70:	20000318 	.word	0x20000318
 800ad74:	20000300 	.word	0x20000300

0800ad78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 ff7b 	bl	800bc80 <vPortFree>
			vPortFree( pxTCB );
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 ff78 	bl	800bc80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad9e:	4b0f      	ldr	r3, [pc, #60]	; (800addc <prvResetNextTaskUnblockTime+0x44>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <prvResetNextTaskUnblockTime+0x14>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e000      	b.n	800adae <prvResetNextTaskUnblockTime+0x16>
 800adac:	2300      	movs	r3, #0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d004      	beq.n	800adbc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800adb2:	4b0b      	ldr	r3, [pc, #44]	; (800ade0 <prvResetNextTaskUnblockTime+0x48>)
 800adb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adb8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800adba:	e008      	b.n	800adce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800adbc:	4b07      	ldr	r3, [pc, #28]	; (800addc <prvResetNextTaskUnblockTime+0x44>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	4a05      	ldr	r2, [pc, #20]	; (800ade0 <prvResetNextTaskUnblockTime+0x48>)
 800adcc:	6013      	str	r3, [r2, #0]
}
 800adce:	bf00      	nop
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	200002d0 	.word	0x200002d0
 800ade0:	20000338 	.word	0x20000338

0800ade4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adea:	4b0b      	ldr	r3, [pc, #44]	; (800ae18 <xTaskGetSchedulerState+0x34>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adf2:	2301      	movs	r3, #1
 800adf4:	607b      	str	r3, [r7, #4]
 800adf6:	e008      	b.n	800ae0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adf8:	4b08      	ldr	r3, [pc, #32]	; (800ae1c <xTaskGetSchedulerState+0x38>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae00:	2302      	movs	r3, #2
 800ae02:	607b      	str	r3, [r7, #4]
 800ae04:	e001      	b.n	800ae0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae06:	2300      	movs	r3, #0
 800ae08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae0a:	687b      	ldr	r3, [r7, #4]
	}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	20000324 	.word	0x20000324
 800ae1c:	20000340 	.word	0x20000340

0800ae20 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d062      	beq.n	800aef8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae36:	4b32      	ldr	r3, [pc, #200]	; (800af00 <vTaskPriorityInherit+0xe0>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d25b      	bcs.n	800aef8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	db06      	blt.n	800ae56 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae48:	4b2d      	ldr	r3, [pc, #180]	; (800af00 <vTaskPriorityInherit+0xe0>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4e:	f1c3 0207 	rsb	r2, r3, #7
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6959      	ldr	r1, [r3, #20]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5e:	4613      	mov	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4a27      	ldr	r2, [pc, #156]	; (800af04 <vTaskPriorityInherit+0xe4>)
 800ae68:	4413      	add	r3, r2
 800ae6a:	4299      	cmp	r1, r3
 800ae6c:	d101      	bne.n	800ae72 <vTaskPriorityInherit+0x52>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e000      	b.n	800ae74 <vTaskPriorityInherit+0x54>
 800ae72:	2300      	movs	r3, #0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d03a      	beq.n	800aeee <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fe fd0f 	bl	80098a0 <uxListRemove>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d115      	bne.n	800aeb4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8c:	491d      	ldr	r1, [pc, #116]	; (800af04 <vTaskPriorityInherit+0xe4>)
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	440b      	add	r3, r1
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10a      	bne.n	800aeb4 <vTaskPriorityInherit+0x94>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea2:	2201      	movs	r2, #1
 800aea4:	fa02 f303 	lsl.w	r3, r2, r3
 800aea8:	43da      	mvns	r2, r3
 800aeaa:	4b17      	ldr	r3, [pc, #92]	; (800af08 <vTaskPriorityInherit+0xe8>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4013      	ands	r3, r2
 800aeb0:	4a15      	ldr	r2, [pc, #84]	; (800af08 <vTaskPriorityInherit+0xe8>)
 800aeb2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aeb4:	4b12      	ldr	r3, [pc, #72]	; (800af00 <vTaskPriorityInherit+0xe0>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec2:	2201      	movs	r2, #1
 800aec4:	409a      	lsls	r2, r3
 800aec6:	4b10      	ldr	r3, [pc, #64]	; (800af08 <vTaskPriorityInherit+0xe8>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	4a0e      	ldr	r2, [pc, #56]	; (800af08 <vTaskPriorityInherit+0xe8>)
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4a09      	ldr	r2, [pc, #36]	; (800af04 <vTaskPriorityInherit+0xe4>)
 800aede:	441a      	add	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	3304      	adds	r3, #4
 800aee4:	4619      	mov	r1, r3
 800aee6:	4610      	mov	r0, r2
 800aee8:	f7fe fc7d 	bl	80097e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aeec:	e004      	b.n	800aef8 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aeee:	4b04      	ldr	r3, [pc, #16]	; (800af00 <vTaskPriorityInherit+0xe0>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800aef8:	bf00      	nop
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20000218 	.word	0x20000218
 800af04:	2000021c 	.word	0x2000021c
 800af08:	20000320 	.word	0x20000320

0800af0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af18:	2300      	movs	r3, #0
 800af1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d06e      	beq.n	800b000 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af22:	4b3a      	ldr	r3, [pc, #232]	; (800b00c <xTaskPriorityDisinherit+0x100>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d00a      	beq.n	800af42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	60fb      	str	r3, [r7, #12]
}
 800af3e:	bf00      	nop
 800af40:	e7fe      	b.n	800af40 <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10a      	bne.n	800af60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	60bb      	str	r3, [r7, #8]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af64:	1e5a      	subs	r2, r3, #1
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af72:	429a      	cmp	r2, r3
 800af74:	d044      	beq.n	800b000 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d140      	bne.n	800b000 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	3304      	adds	r3, #4
 800af82:	4618      	mov	r0, r3
 800af84:	f7fe fc8c 	bl	80098a0 <uxListRemove>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d115      	bne.n	800afba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af92:	491f      	ldr	r1, [pc, #124]	; (800b010 <xTaskPriorityDisinherit+0x104>)
 800af94:	4613      	mov	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	440b      	add	r3, r1
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10a      	bne.n	800afba <xTaskPriorityDisinherit+0xae>
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa8:	2201      	movs	r2, #1
 800afaa:	fa02 f303 	lsl.w	r3, r2, r3
 800afae:	43da      	mvns	r2, r3
 800afb0:	4b18      	ldr	r3, [pc, #96]	; (800b014 <xTaskPriorityDisinherit+0x108>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4013      	ands	r3, r2
 800afb6:	4a17      	ldr	r2, [pc, #92]	; (800b014 <xTaskPriorityDisinherit+0x108>)
 800afb8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	f1c3 0207 	rsb	r2, r3, #7
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	2201      	movs	r2, #1
 800afd4:	409a      	lsls	r2, r3
 800afd6:	4b0f      	ldr	r3, [pc, #60]	; (800b014 <xTaskPriorityDisinherit+0x108>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4313      	orrs	r3, r2
 800afdc:	4a0d      	ldr	r2, [pc, #52]	; (800b014 <xTaskPriorityDisinherit+0x108>)
 800afde:	6013      	str	r3, [r2, #0]
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe4:	4613      	mov	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4a08      	ldr	r2, [pc, #32]	; (800b010 <xTaskPriorityDisinherit+0x104>)
 800afee:	441a      	add	r2, r3
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	3304      	adds	r3, #4
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f7fe fbf5 	bl	80097e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800affc:	2301      	movs	r3, #1
 800affe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b000:	697b      	ldr	r3, [r7, #20]
	}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20000218 	.word	0x20000218
 800b010:	2000021c 	.word	0x2000021c
 800b014:	20000320 	.word	0x20000320

0800b018 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b018:	b480      	push	{r7}
 800b01a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b01c:	4b07      	ldr	r3, [pc, #28]	; (800b03c <pvTaskIncrementMutexHeldCount+0x24>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d004      	beq.n	800b02e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b024:	4b05      	ldr	r3, [pc, #20]	; (800b03c <pvTaskIncrementMutexHeldCount+0x24>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b02a:	3201      	adds	r2, #1
 800b02c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b02e:	4b03      	ldr	r3, [pc, #12]	; (800b03c <pvTaskIncrementMutexHeldCount+0x24>)
 800b030:	681b      	ldr	r3, [r3, #0]
	}
 800b032:	4618      	mov	r0, r3
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr
 800b03c:	20000218 	.word	0x20000218

0800b040 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b04a:	4b29      	ldr	r3, [pc, #164]	; (800b0f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b050:	4b28      	ldr	r3, [pc, #160]	; (800b0f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3304      	adds	r3, #4
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fc22 	bl	80098a0 <uxListRemove>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10b      	bne.n	800b07a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b062:	4b24      	ldr	r3, [pc, #144]	; (800b0f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b068:	2201      	movs	r2, #1
 800b06a:	fa02 f303 	lsl.w	r3, r2, r3
 800b06e:	43da      	mvns	r2, r3
 800b070:	4b21      	ldr	r3, [pc, #132]	; (800b0f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4013      	ands	r3, r2
 800b076:	4a20      	ldr	r2, [pc, #128]	; (800b0f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b078:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b080:	d10a      	bne.n	800b098 <prvAddCurrentTaskToDelayedList+0x58>
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d007      	beq.n	800b098 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b088:	4b1a      	ldr	r3, [pc, #104]	; (800b0f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3304      	adds	r3, #4
 800b08e:	4619      	mov	r1, r3
 800b090:	481a      	ldr	r0, [pc, #104]	; (800b0fc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b092:	f7fe fba8 	bl	80097e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b096:	e026      	b.n	800b0e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0a0:	4b14      	ldr	r3, [pc, #80]	; (800b0f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d209      	bcs.n	800b0c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0b0:	4b13      	ldr	r3, [pc, #76]	; (800b100 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	4b0f      	ldr	r3, [pc, #60]	; (800b0f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f7fe fbb6 	bl	800982e <vListInsert>
}
 800b0c2:	e010      	b.n	800b0e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0c4:	4b0f      	ldr	r3, [pc, #60]	; (800b104 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	4b0a      	ldr	r3, [pc, #40]	; (800b0f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f7fe fbac 	bl	800982e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0d6:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d202      	bcs.n	800b0e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b0e0:	4a09      	ldr	r2, [pc, #36]	; (800b108 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	6013      	str	r3, [r2, #0]
}
 800b0e6:	bf00      	nop
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	2000031c 	.word	0x2000031c
 800b0f4:	20000218 	.word	0x20000218
 800b0f8:	20000320 	.word	0x20000320
 800b0fc:	20000304 	.word	0x20000304
 800b100:	200002d4 	.word	0x200002d4
 800b104:	200002d0 	.word	0x200002d0
 800b108:	20000338 	.word	0x20000338

0800b10c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800b112:	2300      	movs	r3, #0
 800b114:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b116:	f000 fa95 	bl	800b644 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b11a:	4b11      	ldr	r3, [pc, #68]	; (800b160 <xTimerCreateTimerTask+0x54>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00b      	beq.n	800b13a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800b122:	4b10      	ldr	r3, [pc, #64]	; (800b164 <xTimerCreateTimerTask+0x58>)
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	2303      	movs	r3, #3
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	2300      	movs	r3, #0
 800b12c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b130:	490d      	ldr	r1, [pc, #52]	; (800b168 <xTimerCreateTimerTask+0x5c>)
 800b132:	480e      	ldr	r0, [pc, #56]	; (800b16c <xTimerCreateTimerTask+0x60>)
 800b134:	f7ff f8be 	bl	800a2b4 <xTaskCreate>
 800b138:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10a      	bne.n	800b156 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	603b      	str	r3, [r7, #0]
}
 800b152:	bf00      	nop
 800b154:	e7fe      	b.n	800b154 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800b156:	687b      	ldr	r3, [r7, #4]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20000374 	.word	0x20000374
 800b164:	20000378 	.word	0x20000378
 800b168:	080109d0 	.word	0x080109d0
 800b16c:	0800b28d 	.word	0x0800b28d

0800b170 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08a      	sub	sp, #40	; 0x28
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b17e:	2300      	movs	r3, #0
 800b180:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10a      	bne.n	800b19e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	623b      	str	r3, [r7, #32]
}
 800b19a:	bf00      	nop
 800b19c:	e7fe      	b.n	800b19c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b19e:	4b1a      	ldr	r3, [pc, #104]	; (800b208 <xTimerGenericCommand+0x98>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d02a      	beq.n	800b1fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b05      	cmp	r3, #5
 800b1b6:	dc18      	bgt.n	800b1ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1b8:	f7ff fe14 	bl	800ade4 <xTaskGetSchedulerState>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d109      	bne.n	800b1d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1c2:	4b11      	ldr	r3, [pc, #68]	; (800b208 <xTimerGenericCommand+0x98>)
 800b1c4:	6818      	ldr	r0, [r3, #0]
 800b1c6:	f107 0114 	add.w	r1, r7, #20
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ce:	f7fe fc57 	bl	8009a80 <xQueueGenericSend>
 800b1d2:	6278      	str	r0, [r7, #36]	; 0x24
 800b1d4:	e012      	b.n	800b1fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b1d6:	4b0c      	ldr	r3, [pc, #48]	; (800b208 <xTimerGenericCommand+0x98>)
 800b1d8:	6818      	ldr	r0, [r3, #0]
 800b1da:	f107 0114 	add.w	r1, r7, #20
 800b1de:	2300      	movs	r3, #0
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f7fe fc4d 	bl	8009a80 <xQueueGenericSend>
 800b1e6:	6278      	str	r0, [r7, #36]	; 0x24
 800b1e8:	e008      	b.n	800b1fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b1ea:	4b07      	ldr	r3, [pc, #28]	; (800b208 <xTimerGenericCommand+0x98>)
 800b1ec:	6818      	ldr	r0, [r3, #0]
 800b1ee:	f107 0114 	add.w	r1, r7, #20
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	f7fe fd41 	bl	8009c7c <xQueueGenericSendFromISR>
 800b1fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3728      	adds	r7, #40	; 0x28
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20000374 	.word	0x20000374

0800b20c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b088      	sub	sp, #32
 800b210:	af02      	add	r7, sp, #8
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b216:	4b1c      	ldr	r3, [pc, #112]	; (800b288 <prvProcessExpiredTimer+0x7c>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	3304      	adds	r3, #4
 800b224:	4618      	mov	r0, r3
 800b226:	f7fe fb3b 	bl	80098a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d122      	bne.n	800b278 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	699a      	ldr	r2, [r3, #24]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	18d1      	adds	r1, r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	6978      	ldr	r0, [r7, #20]
 800b240:	f000 f8c8 	bl	800b3d4 <prvInsertTimerInActiveList>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d016      	beq.n	800b278 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b24a:	2300      	movs	r3, #0
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	2300      	movs	r3, #0
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	2100      	movs	r1, #0
 800b254:	6978      	ldr	r0, [r7, #20]
 800b256:	f7ff ff8b 	bl	800b170 <xTimerGenericCommand>
 800b25a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10a      	bne.n	800b278 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	60fb      	str	r3, [r7, #12]
}
 800b274:	bf00      	nop
 800b276:	e7fe      	b.n	800b276 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27c:	6978      	ldr	r0, [r7, #20]
 800b27e:	4798      	blx	r3
}
 800b280:	bf00      	nop
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	2000036c 	.word	0x2000036c

0800b28c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b294:	f107 0308 	add.w	r3, r7, #8
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 f857 	bl	800b34c <prvGetNextExpireTime>
 800b29e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 f803 	bl	800b2b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b2aa:	f000 f8d5 	bl	800b458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2ae:	e7f1      	b.n	800b294 <prvTimerTask+0x8>

0800b2b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b2ba:	f7ff f9b3 	bl	800a624 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2be:	f107 0308 	add.w	r3, r7, #8
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 f866 	bl	800b394 <prvSampleTimeNow>
 800b2c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d130      	bne.n	800b332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10a      	bne.n	800b2ec <prvProcessTimerOrBlockTask+0x3c>
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d806      	bhi.n	800b2ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b2de:	f7ff f9af 	bl	800a640 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b2e2:	68f9      	ldr	r1, [r7, #12]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff ff91 	bl	800b20c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b2ea:	e024      	b.n	800b336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d008      	beq.n	800b304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b2f2:	4b13      	ldr	r3, [pc, #76]	; (800b340 <prvProcessTimerOrBlockTask+0x90>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	bf0c      	ite	eq
 800b2fc:	2301      	moveq	r3, #1
 800b2fe:	2300      	movne	r3, #0
 800b300:	b2db      	uxtb	r3, r3
 800b302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b304:	4b0f      	ldr	r3, [pc, #60]	; (800b344 <prvProcessTimerOrBlockTask+0x94>)
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4619      	mov	r1, r3
 800b312:	f7fe ff9b 	bl	800a24c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b316:	f7ff f993 	bl	800a640 <xTaskResumeAll>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b320:	4b09      	ldr	r3, [pc, #36]	; (800b348 <prvProcessTimerOrBlockTask+0x98>)
 800b322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b326:	601a      	str	r2, [r3, #0]
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	f3bf 8f6f 	isb	sy
}
 800b330:	e001      	b.n	800b336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b332:	f7ff f985 	bl	800a640 <xTaskResumeAll>
}
 800b336:	bf00      	nop
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20000370 	.word	0x20000370
 800b344:	20000374 	.word	0x20000374
 800b348:	e000ed04 	.word	0xe000ed04

0800b34c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b354:	4b0e      	ldr	r3, [pc, #56]	; (800b390 <prvGetNextExpireTime+0x44>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bf0c      	ite	eq
 800b35e:	2301      	moveq	r3, #1
 800b360:	2300      	movne	r3, #0
 800b362:	b2db      	uxtb	r3, r3
 800b364:	461a      	mov	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d105      	bne.n	800b37e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b372:	4b07      	ldr	r3, [pc, #28]	; (800b390 <prvGetNextExpireTime+0x44>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	e001      	b.n	800b382 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b382:	68fb      	ldr	r3, [r7, #12]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	2000036c 	.word	0x2000036c

0800b394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b39c:	f7ff f9ec 	bl	800a778 <xTaskGetTickCount>
 800b3a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <prvSampleTimeNow+0x3c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d205      	bcs.n	800b3b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b3ac:	f000 f8e8 	bl	800b580 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	e002      	b.n	800b3be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b3be:	4a04      	ldr	r2, [pc, #16]	; (800b3d0 <prvSampleTimeNow+0x3c>)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	2000037c 	.word	0x2000037c

0800b3d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d812      	bhi.n	800b420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	429a      	cmp	r2, r3
 800b406:	d302      	bcc.n	800b40e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b408:	2301      	movs	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	e01b      	b.n	800b446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b40e:	4b10      	ldr	r3, [pc, #64]	; (800b450 <prvInsertTimerInActiveList+0x7c>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3304      	adds	r3, #4
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f7fe fa08 	bl	800982e <vListInsert>
 800b41e:	e012      	b.n	800b446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d206      	bcs.n	800b436 <prvInsertTimerInActiveList+0x62>
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d302      	bcc.n	800b436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
 800b434:	e007      	b.n	800b446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b436:	4b07      	ldr	r3, [pc, #28]	; (800b454 <prvInsertTimerInActiveList+0x80>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4619      	mov	r1, r3
 800b440:	4610      	mov	r0, r2
 800b442:	f7fe f9f4 	bl	800982e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b446:	697b      	ldr	r3, [r7, #20]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20000370 	.word	0x20000370
 800b454:	2000036c 	.word	0x2000036c

0800b458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08c      	sub	sp, #48	; 0x30
 800b45c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b45e:	e07c      	b.n	800b55a <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	db78      	blt.n	800b558 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d004      	beq.n	800b47c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b474:	3304      	adds	r3, #4
 800b476:	4618      	mov	r0, r3
 800b478:	f7fe fa12 	bl	80098a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b47c:	1d3b      	adds	r3, r7, #4
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff ff88 	bl	800b394 <prvSampleTimeNow>
 800b484:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	2b09      	cmp	r3, #9
 800b48a:	d866      	bhi.n	800b55a <prvProcessReceivedCommands+0x102>
 800b48c:	a201      	add	r2, pc, #4	; (adr r2, 800b494 <prvProcessReceivedCommands+0x3c>)
 800b48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b492:	bf00      	nop
 800b494:	0800b4bd 	.word	0x0800b4bd
 800b498:	0800b4bd 	.word	0x0800b4bd
 800b49c:	0800b4bd 	.word	0x0800b4bd
 800b4a0:	0800b55b 	.word	0x0800b55b
 800b4a4:	0800b519 	.word	0x0800b519
 800b4a8:	0800b551 	.word	0x0800b551
 800b4ac:	0800b4bd 	.word	0x0800b4bd
 800b4b0:	0800b4bd 	.word	0x0800b4bd
 800b4b4:	0800b55b 	.word	0x0800b55b
 800b4b8:	0800b519 	.word	0x0800b519
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	699b      	ldr	r3, [r3, #24]
 800b4c2:	18d1      	adds	r1, r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a3a      	ldr	r2, [r7, #32]
 800b4c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4ca:	f7ff ff83 	bl	800b3d4 <prvInsertTimerInActiveList>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d042      	beq.n	800b55a <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	69db      	ldr	r3, [r3, #28]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d13a      	bne.n	800b55a <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	441a      	add	r2, r3
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4f6:	f7ff fe3b 	bl	800b170 <xTimerGenericCommand>
 800b4fa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d12b      	bne.n	800b55a <prvProcessReceivedCommands+0x102>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	61bb      	str	r3, [r7, #24]
}
 800b514:	bf00      	nop
 800b516:	e7fe      	b.n	800b516 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10a      	bne.n	800b53c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	617b      	str	r3, [r7, #20]
}
 800b538:	bf00      	nop
 800b53a:	e7fe      	b.n	800b53a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	699a      	ldr	r2, [r3, #24]
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	18d1      	adds	r1, r2, r3
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	6a3a      	ldr	r2, [r7, #32]
 800b548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b54a:	f7ff ff43 	bl	800b3d4 <prvInsertTimerInActiveList>
					break;
 800b54e:	e004      	b.n	800b55a <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800b550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b552:	f000 fb95 	bl	800bc80 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b556:	e000      	b.n	800b55a <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b558:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b55a:	4b08      	ldr	r3, [pc, #32]	; (800b57c <prvProcessReceivedCommands+0x124>)
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f107 0108 	add.w	r1, r7, #8
 800b562:	2300      	movs	r3, #0
 800b564:	2200      	movs	r2, #0
 800b566:	f7fe fc21 	bl	8009dac <xQueueGenericReceive>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f47f af77 	bne.w	800b460 <prvProcessReceivedCommands+0x8>
	}
}
 800b572:	bf00      	nop
 800b574:	bf00      	nop
 800b576:	3728      	adds	r7, #40	; 0x28
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	20000374 	.word	0x20000374

0800b580 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b088      	sub	sp, #32
 800b584:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b586:	e045      	b.n	800b614 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b588:	4b2c      	ldr	r3, [pc, #176]	; (800b63c <prvSwitchTimerLists+0xbc>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b592:	4b2a      	ldr	r3, [pc, #168]	; (800b63c <prvSwitchTimerLists+0xbc>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe f97d 	bl	80098a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d12e      	bne.n	800b614 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	699b      	ldr	r3, [r3, #24]
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	4413      	add	r3, r2
 800b5be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d90e      	bls.n	800b5e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5d4:	4b19      	ldr	r3, [pc, #100]	; (800b63c <prvSwitchTimerLists+0xbc>)
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4610      	mov	r0, r2
 800b5e0:	f7fe f925 	bl	800982e <vListInsert>
 800b5e4:	e016      	b.n	800b614 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f7ff fdbd 	bl	800b170 <xTimerGenericCommand>
 800b5f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10a      	bne.n	800b614 <prvSwitchTimerLists+0x94>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	603b      	str	r3, [r7, #0]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b614:	4b09      	ldr	r3, [pc, #36]	; (800b63c <prvSwitchTimerLists+0xbc>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1b4      	bne.n	800b588 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b61e:	4b07      	ldr	r3, [pc, #28]	; (800b63c <prvSwitchTimerLists+0xbc>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b624:	4b06      	ldr	r3, [pc, #24]	; (800b640 <prvSwitchTimerLists+0xc0>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a04      	ldr	r2, [pc, #16]	; (800b63c <prvSwitchTimerLists+0xbc>)
 800b62a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b62c:	4a04      	ldr	r2, [pc, #16]	; (800b640 <prvSwitchTimerLists+0xc0>)
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6013      	str	r3, [r2, #0]
}
 800b632:	bf00      	nop
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	2000036c 	.word	0x2000036c
 800b640:	20000370 	.word	0x20000370

0800b644 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b648:	f000 f93c 	bl	800b8c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b64c:	4b12      	ldr	r3, [pc, #72]	; (800b698 <prvCheckForValidListAndQueue+0x54>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d11d      	bne.n	800b690 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800b654:	4811      	ldr	r0, [pc, #68]	; (800b69c <prvCheckForValidListAndQueue+0x58>)
 800b656:	f7fe f899 	bl	800978c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b65a:	4811      	ldr	r0, [pc, #68]	; (800b6a0 <prvCheckForValidListAndQueue+0x5c>)
 800b65c:	f7fe f896 	bl	800978c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b660:	4b10      	ldr	r3, [pc, #64]	; (800b6a4 <prvCheckForValidListAndQueue+0x60>)
 800b662:	4a0e      	ldr	r2, [pc, #56]	; (800b69c <prvCheckForValidListAndQueue+0x58>)
 800b664:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b666:	4b10      	ldr	r3, [pc, #64]	; (800b6a8 <prvCheckForValidListAndQueue+0x64>)
 800b668:	4a0d      	ldr	r2, [pc, #52]	; (800b6a0 <prvCheckForValidListAndQueue+0x5c>)
 800b66a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b66c:	2200      	movs	r2, #0
 800b66e:	210c      	movs	r1, #12
 800b670:	200a      	movs	r0, #10
 800b672:	f7fe f9a7 	bl	80099c4 <xQueueGenericCreate>
 800b676:	4603      	mov	r3, r0
 800b678:	4a07      	ldr	r2, [pc, #28]	; (800b698 <prvCheckForValidListAndQueue+0x54>)
 800b67a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b67c:	4b06      	ldr	r3, [pc, #24]	; (800b698 <prvCheckForValidListAndQueue+0x54>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d005      	beq.n	800b690 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b684:	4b04      	ldr	r3, [pc, #16]	; (800b698 <prvCheckForValidListAndQueue+0x54>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4908      	ldr	r1, [pc, #32]	; (800b6ac <prvCheckForValidListAndQueue+0x68>)
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fdb4 	bl	800a1f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b690:	f000 f948 	bl	800b924 <vPortExitCritical>
}
 800b694:	bf00      	nop
 800b696:	bd80      	pop	{r7, pc}
 800b698:	20000374 	.word	0x20000374
 800b69c:	20000344 	.word	0x20000344
 800b6a0:	20000358 	.word	0x20000358
 800b6a4:	2000036c 	.word	0x2000036c
 800b6a8:	20000370 	.word	0x20000370
 800b6ac:	080109d8 	.word	0x080109d8

0800b6b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3b04      	subs	r3, #4
 800b6c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b6c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3b04      	subs	r3, #4
 800b6ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f023 0201 	bic.w	r2, r3, #1
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3b04      	subs	r3, #4
 800b6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6e0:	4a0c      	ldr	r2, [pc, #48]	; (800b714 <pxPortInitialiseStack+0x64>)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3b14      	subs	r3, #20
 800b6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	3b04      	subs	r3, #4
 800b6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f06f 0202 	mvn.w	r2, #2
 800b6fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	3b20      	subs	r3, #32
 800b704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b706:	68fb      	ldr	r3, [r7, #12]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	0800b719 	.word	0x0800b719

0800b718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b71e:	4b0d      	ldr	r3, [pc, #52]	; (800b754 <prvTaskExitError+0x3c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b726:	d00a      	beq.n	800b73e <prvTaskExitError+0x26>
	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72c:	f383 8811 	msr	BASEPRI, r3
 800b730:	f3bf 8f6f 	isb	sy
 800b734:	f3bf 8f4f 	dsb	sy
 800b738:	607b      	str	r3, [r7, #4]
}
 800b73a:	bf00      	nop
 800b73c:	e7fe      	b.n	800b73c <prvTaskExitError+0x24>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	603b      	str	r3, [r7, #0]
}
 800b750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 800b752:	e7fe      	b.n	800b752 <prvTaskExitError+0x3a>
 800b754:	20000014 	.word	0x20000014
	...

0800b760 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b760:	4b07      	ldr	r3, [pc, #28]	; (800b780 <pxCurrentTCBConst2>)
 800b762:	6819      	ldr	r1, [r3, #0]
 800b764:	6808      	ldr	r0, [r1, #0]
 800b766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76a:	f380 8809 	msr	PSP, r0
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f04f 0000 	mov.w	r0, #0
 800b776:	f380 8811 	msr	BASEPRI, r0
 800b77a:	4770      	bx	lr
 800b77c:	f3af 8000 	nop.w

0800b780 <pxCurrentTCBConst2>:
 800b780:	20000218 	.word	0x20000218
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b784:	bf00      	nop
 800b786:	bf00      	nop

0800b788 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b788:	4806      	ldr	r0, [pc, #24]	; (800b7a4 <prvPortStartFirstTask+0x1c>)
 800b78a:	6800      	ldr	r0, [r0, #0]
 800b78c:	6800      	ldr	r0, [r0, #0]
 800b78e:	f380 8808 	msr	MSP, r0
 800b792:	b662      	cpsie	i
 800b794:	b661      	cpsie	f
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	df00      	svc	0
 800b7a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b7a2:	bf00      	nop
 800b7a4:	e000ed08 	.word	0xe000ed08

0800b7a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7ae:	4b3c      	ldr	r3, [pc, #240]	; (800b8a0 <xPortStartScheduler+0xf8>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a3c      	ldr	r2, [pc, #240]	; (800b8a4 <xPortStartScheduler+0xfc>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d10a      	bne.n	800b7ce <xPortStartScheduler+0x26>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	613b      	str	r3, [r7, #16]
}
 800b7ca:	bf00      	nop
 800b7cc:	e7fe      	b.n	800b7cc <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7ce:	4b34      	ldr	r3, [pc, #208]	; (800b8a0 <xPortStartScheduler+0xf8>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a35      	ldr	r2, [pc, #212]	; (800b8a8 <xPortStartScheduler+0x100>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d10a      	bne.n	800b7ee <xPortStartScheduler+0x46>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	60fb      	str	r3, [r7, #12]
}
 800b7ea:	bf00      	nop
 800b7ec:	e7fe      	b.n	800b7ec <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7ee:	4b2f      	ldr	r3, [pc, #188]	; (800b8ac <xPortStartScheduler+0x104>)
 800b7f0:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	22ff      	movs	r2, #255	; 0xff
 800b7fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	b2db      	uxtb	r3, r3
 800b806:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b808:	79fb      	ldrb	r3, [r7, #7]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b810:	b2da      	uxtb	r2, r3
 800b812:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <xPortStartScheduler+0x108>)
 800b814:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b816:	4b27      	ldr	r3, [pc, #156]	; (800b8b4 <xPortStartScheduler+0x10c>)
 800b818:	2207      	movs	r2, #7
 800b81a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b81c:	e009      	b.n	800b832 <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b81e:	4b25      	ldr	r3, [pc, #148]	; (800b8b4 <xPortStartScheduler+0x10c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3b01      	subs	r3, #1
 800b824:	4a23      	ldr	r2, [pc, #140]	; (800b8b4 <xPortStartScheduler+0x10c>)
 800b826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	005b      	lsls	r3, r3, #1
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b832:	79fb      	ldrb	r3, [r7, #7]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b83a:	2b80      	cmp	r3, #128	; 0x80
 800b83c:	d0ef      	beq.n	800b81e <xPortStartScheduler+0x76>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b83e:	4b1d      	ldr	r3, [pc, #116]	; (800b8b4 <xPortStartScheduler+0x10c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	021b      	lsls	r3, r3, #8
 800b844:	4a1b      	ldr	r2, [pc, #108]	; (800b8b4 <xPortStartScheduler+0x10c>)
 800b846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b848:	4b1a      	ldr	r3, [pc, #104]	; (800b8b4 <xPortStartScheduler+0x10c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b850:	4a18      	ldr	r2, [pc, #96]	; (800b8b4 <xPortStartScheduler+0x10c>)
 800b852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	b2da      	uxtb	r2, r3
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b85c:	4b16      	ldr	r3, [pc, #88]	; (800b8b8 <xPortStartScheduler+0x110>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a15      	ldr	r2, [pc, #84]	; (800b8b8 <xPortStartScheduler+0x110>)
 800b862:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b868:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <xPortStartScheduler+0x110>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a12      	ldr	r2, [pc, #72]	; (800b8b8 <xPortStartScheduler+0x110>)
 800b86e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b874:	f000 f8da 	bl	800ba2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b878:	4b10      	ldr	r3, [pc, #64]	; (800b8bc <xPortStartScheduler+0x114>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b87e:	f000 f8f1 	bl	800ba64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b882:	4b0f      	ldr	r3, [pc, #60]	; (800b8c0 <xPortStartScheduler+0x118>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a0e      	ldr	r2, [pc, #56]	; (800b8c0 <xPortStartScheduler+0x118>)
 800b888:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b88c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b88e:	f7ff ff7b 	bl	800b788 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800b892:	f7ff ff41 	bl	800b718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	e000ed00 	.word	0xe000ed00
 800b8a4:	410fc271 	.word	0x410fc271
 800b8a8:	410fc270 	.word	0x410fc270
 800b8ac:	e000e400 	.word	0xe000e400
 800b8b0:	20000380 	.word	0x20000380
 800b8b4:	20000384 	.word	0x20000384
 800b8b8:	e000ed20 	.word	0xe000ed20
 800b8bc:	20000014 	.word	0x20000014
 800b8c0:	e000ef34 	.word	0xe000ef34

0800b8c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	607b      	str	r3, [r7, #4]
}
 800b8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8de:	4b0f      	ldr	r3, [pc, #60]	; (800b91c <vPortEnterCritical+0x58>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	4a0d      	ldr	r2, [pc, #52]	; (800b91c <vPortEnterCritical+0x58>)
 800b8e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8e8:	4b0c      	ldr	r3, [pc, #48]	; (800b91c <vPortEnterCritical+0x58>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d10f      	bne.n	800b910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8f0:	4b0b      	ldr	r3, [pc, #44]	; (800b920 <vPortEnterCritical+0x5c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <vPortEnterCritical+0x4c>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	603b      	str	r3, [r7, #0]
}
 800b90c:	bf00      	nop
 800b90e:	e7fe      	b.n	800b90e <vPortEnterCritical+0x4a>
	}
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	20000014 	.word	0x20000014
 800b920:	e000ed04 	.word	0xe000ed04

0800b924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b92a:	4b12      	ldr	r3, [pc, #72]	; (800b974 <vPortExitCritical+0x50>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <vPortExitCritical+0x24>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	607b      	str	r3, [r7, #4]
}
 800b944:	bf00      	nop
 800b946:	e7fe      	b.n	800b946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b948:	4b0a      	ldr	r3, [pc, #40]	; (800b974 <vPortExitCritical+0x50>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	4a09      	ldr	r2, [pc, #36]	; (800b974 <vPortExitCritical+0x50>)
 800b950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b952:	4b08      	ldr	r3, [pc, #32]	; (800b974 <vPortExitCritical+0x50>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d105      	bne.n	800b966 <vPortExitCritical+0x42>
 800b95a:	2300      	movs	r3, #0
 800b95c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	f383 8811 	msr	BASEPRI, r3
}
 800b964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b966:	bf00      	nop
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	20000014 	.word	0x20000014
	...

0800b980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b980:	f3ef 8009 	mrs	r0, PSP
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	4b15      	ldr	r3, [pc, #84]	; (800b9e0 <pxCurrentTCBConst>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	f01e 0f10 	tst.w	lr, #16
 800b990:	bf08      	it	eq
 800b992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99a:	6010      	str	r0, [r2, #0]
 800b99c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800b9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b9a4:	f380 8811 	msr	BASEPRI, r0
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f7fe ffb0 	bl	800a914 <vTaskSwitchContext>
 800b9b4:	f04f 0000 	mov.w	r0, #0
 800b9b8:	f380 8811 	msr	BASEPRI, r0
 800b9bc:	bc08      	pop	{r3}
 800b9be:	6819      	ldr	r1, [r3, #0]
 800b9c0:	6808      	ldr	r0, [r1, #0]
 800b9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c6:	f01e 0f10 	tst.w	lr, #16
 800b9ca:	bf08      	it	eq
 800b9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9d0:	f380 8809 	msr	PSP, r0
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	f3af 8000 	nop.w

0800b9e0 <pxCurrentTCBConst>:
 800b9e0:	20000218 	.word	0x20000218
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop

0800b9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	607b      	str	r3, [r7, #4]
}
 800ba00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba02:	f7fe fec9 	bl	800a798 <xTaskIncrementTick>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba0c:	4b06      	ldr	r3, [pc, #24]	; (800ba28 <xPortSysTickHandler+0x40>)
 800ba0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	2300      	movs	r3, #0
 800ba16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	f383 8811 	msr	BASEPRI, r3
}
 800ba1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba20:	bf00      	nop
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	e000ed04 	.word	0xe000ed04

0800ba2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba30:	4b08      	ldr	r3, [pc, #32]	; (800ba54 <vPortSetupTimerInterrupt+0x28>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a08      	ldr	r2, [pc, #32]	; (800ba58 <vPortSetupTimerInterrupt+0x2c>)
 800ba36:	fba2 2303 	umull	r2, r3, r2, r3
 800ba3a:	099b      	lsrs	r3, r3, #6
 800ba3c:	4a07      	ldr	r2, [pc, #28]	; (800ba5c <vPortSetupTimerInterrupt+0x30>)
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba42:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <vPortSetupTimerInterrupt+0x34>)
 800ba44:	2207      	movs	r2, #7
 800ba46:	601a      	str	r2, [r3, #0]
}
 800ba48:	bf00      	nop
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20000010 	.word	0x20000010
 800ba58:	10624dd3 	.word	0x10624dd3
 800ba5c:	e000e014 	.word	0xe000e014
 800ba60:	e000e010 	.word	0xe000e010

0800ba64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ba74 <vPortEnableVFP+0x10>
 800ba68:	6801      	ldr	r1, [r0, #0]
 800ba6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ba6e:	6001      	str	r1, [r0, #0]
 800ba70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba72:	bf00      	nop
 800ba74:	e000ed88 	.word	0xe000ed88

0800ba78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800ba7e:	f3ef 8305 	mrs	r3, IPSR
 800ba82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2b0f      	cmp	r3, #15
 800ba88:	d914      	bls.n	800bab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba8a:	4a17      	ldr	r2, [pc, #92]	; (800bae8 <vPortValidateInterruptPriority+0x70>)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba94:	4b15      	ldr	r3, [pc, #84]	; (800baec <vPortValidateInterruptPriority+0x74>)
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	7afa      	ldrb	r2, [r7, #11]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d20a      	bcs.n	800bab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	607b      	str	r3, [r7, #4]
}
 800bab0:	bf00      	nop
 800bab2:	e7fe      	b.n	800bab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bab4:	4b0e      	ldr	r3, [pc, #56]	; (800baf0 <vPortValidateInterruptPriority+0x78>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800babc:	4b0d      	ldr	r3, [pc, #52]	; (800baf4 <vPortValidateInterruptPriority+0x7c>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d90a      	bls.n	800bada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	603b      	str	r3, [r7, #0]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <vPortValidateInterruptPriority+0x60>
	}
 800bada:	bf00      	nop
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	e000e3f0 	.word	0xe000e3f0
 800baec:	20000380 	.word	0x20000380
 800baf0:	e000ed0c 	.word	0xe000ed0c
 800baf4:	20000384 	.word	0x20000384

0800baf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b08a      	sub	sp, #40	; 0x28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb00:	2300      	movs	r3, #0
 800bb02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb04:	f7fe fd8e 	bl	800a624 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb08:	4b58      	ldr	r3, [pc, #352]	; (800bc6c <pvPortMalloc+0x174>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d101      	bne.n	800bb14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb10:	f000 f910 	bl	800bd34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb14:	4b56      	ldr	r3, [pc, #344]	; (800bc70 <pvPortMalloc+0x178>)
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f040 808e 	bne.w	800bc3e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01d      	beq.n	800bb64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bb28:	2208      	movs	r2, #8
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f003 0307 	and.w	r3, r3, #7
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d014      	beq.n	800bb64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f023 0307 	bic.w	r3, r3, #7
 800bb40:	3308      	adds	r3, #8
 800bb42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f003 0307 	and.w	r3, r3, #7
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00a      	beq.n	800bb64 <pvPortMalloc+0x6c>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	617b      	str	r3, [r7, #20]
}
 800bb60:	bf00      	nop
 800bb62:	e7fe      	b.n	800bb62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d069      	beq.n	800bc3e <pvPortMalloc+0x146>
 800bb6a:	4b42      	ldr	r3, [pc, #264]	; (800bc74 <pvPortMalloc+0x17c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d864      	bhi.n	800bc3e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb74:	4b40      	ldr	r3, [pc, #256]	; (800bc78 <pvPortMalloc+0x180>)
 800bb76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb78:	4b3f      	ldr	r3, [pc, #252]	; (800bc78 <pvPortMalloc+0x180>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb7e:	e004      	b.n	800bb8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d903      	bls.n	800bb9c <pvPortMalloc+0xa4>
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1f1      	bne.n	800bb80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb9c:	4b33      	ldr	r3, [pc, #204]	; (800bc6c <pvPortMalloc+0x174>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d04b      	beq.n	800bc3e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2208      	movs	r2, #8
 800bbac:	4413      	add	r3, r2
 800bbae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	1ad2      	subs	r2, r2, r3
 800bbc0:	2308      	movs	r3, #8
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d91f      	bls.n	800bc08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4413      	add	r3, r2
 800bbce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	f003 0307 	and.w	r3, r3, #7
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00a      	beq.n	800bbf0 <pvPortMalloc+0xf8>
	__asm volatile
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	613b      	str	r3, [r7, #16]
}
 800bbec:	bf00      	nop
 800bbee:	e7fe      	b.n	800bbee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	1ad2      	subs	r2, r2, r3
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc02:	69b8      	ldr	r0, [r7, #24]
 800bc04:	f000 f8f8 	bl	800bdf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc08:	4b1a      	ldr	r3, [pc, #104]	; (800bc74 <pvPortMalloc+0x17c>)
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	4a18      	ldr	r2, [pc, #96]	; (800bc74 <pvPortMalloc+0x17c>)
 800bc14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc16:	4b17      	ldr	r3, [pc, #92]	; (800bc74 <pvPortMalloc+0x17c>)
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	4b18      	ldr	r3, [pc, #96]	; (800bc7c <pvPortMalloc+0x184>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d203      	bcs.n	800bc2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc22:	4b14      	ldr	r3, [pc, #80]	; (800bc74 <pvPortMalloc+0x17c>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a15      	ldr	r2, [pc, #84]	; (800bc7c <pvPortMalloc+0x184>)
 800bc28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	4b10      	ldr	r3, [pc, #64]	; (800bc70 <pvPortMalloc+0x178>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	431a      	orrs	r2, r3
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc3e:	f7fe fcff 	bl	800a640 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	f003 0307 	and.w	r3, r3, #7
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00a      	beq.n	800bc62 <pvPortMalloc+0x16a>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	60fb      	str	r3, [r7, #12]
}
 800bc5e:	bf00      	nop
 800bc60:	e7fe      	b.n	800bc60 <pvPortMalloc+0x168>
	return pvReturn;
 800bc62:	69fb      	ldr	r3, [r7, #28]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3728      	adds	r7, #40	; 0x28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	20007b90 	.word	0x20007b90
 800bc70:	20007b9c 	.word	0x20007b9c
 800bc74:	20007b94 	.word	0x20007b94
 800bc78:	20007b88 	.word	0x20007b88
 800bc7c:	20007b98 	.word	0x20007b98

0800bc80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d048      	beq.n	800bd24 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc92:	2308      	movs	r3, #8
 800bc94:	425b      	negs	r3, r3
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	4413      	add	r3, r2
 800bc9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	4b21      	ldr	r3, [pc, #132]	; (800bd2c <vPortFree+0xac>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4013      	ands	r3, r2
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10a      	bne.n	800bcc4 <vPortFree+0x44>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	60fb      	str	r3, [r7, #12]
}
 800bcc0:	bf00      	nop
 800bcc2:	e7fe      	b.n	800bcc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00a      	beq.n	800bce2 <vPortFree+0x62>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	60bb      	str	r3, [r7, #8]
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	4b11      	ldr	r3, [pc, #68]	; (800bd2c <vPortFree+0xac>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4013      	ands	r3, r2
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d019      	beq.n	800bd24 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d115      	bne.n	800bd24 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	4b0b      	ldr	r3, [pc, #44]	; (800bd2c <vPortFree+0xac>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	43db      	mvns	r3, r3
 800bd02:	401a      	ands	r2, r3
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd08:	f7fe fc8c 	bl	800a624 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	685a      	ldr	r2, [r3, #4]
 800bd10:	4b07      	ldr	r3, [pc, #28]	; (800bd30 <vPortFree+0xb0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4413      	add	r3, r2
 800bd16:	4a06      	ldr	r2, [pc, #24]	; (800bd30 <vPortFree+0xb0>)
 800bd18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd1a:	6938      	ldr	r0, [r7, #16]
 800bd1c:	f000 f86c 	bl	800bdf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bd20:	f7fe fc8e 	bl	800a640 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd24:	bf00      	nop
 800bd26:	3718      	adds	r7, #24
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	20007b9c 	.word	0x20007b9c
 800bd30:	20007b94 	.word	0x20007b94

0800bd34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd3a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800bd3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd40:	4b27      	ldr	r3, [pc, #156]	; (800bde0 <prvHeapInit+0xac>)
 800bd42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f003 0307 	and.w	r3, r3, #7
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00c      	beq.n	800bd68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3307      	adds	r3, #7
 800bd52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f023 0307 	bic.w	r3, r3, #7
 800bd5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	4a1f      	ldr	r2, [pc, #124]	; (800bde0 <prvHeapInit+0xac>)
 800bd64:	4413      	add	r3, r2
 800bd66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd6c:	4a1d      	ldr	r2, [pc, #116]	; (800bde4 <prvHeapInit+0xb0>)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd72:	4b1c      	ldr	r3, [pc, #112]	; (800bde4 <prvHeapInit+0xb0>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd80:	2208      	movs	r2, #8
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	1a9b      	subs	r3, r3, r2
 800bd86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f023 0307 	bic.w	r3, r3, #7
 800bd8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4a15      	ldr	r2, [pc, #84]	; (800bde8 <prvHeapInit+0xb4>)
 800bd94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd96:	4b14      	ldr	r3, [pc, #80]	; (800bde8 <prvHeapInit+0xb4>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd9e:	4b12      	ldr	r3, [pc, #72]	; (800bde8 <prvHeapInit+0xb4>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	1ad2      	subs	r2, r2, r3
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bdb4:	4b0c      	ldr	r3, [pc, #48]	; (800bde8 <prvHeapInit+0xb4>)
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	4a0a      	ldr	r2, [pc, #40]	; (800bdec <prvHeapInit+0xb8>)
 800bdc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	4a09      	ldr	r2, [pc, #36]	; (800bdf0 <prvHeapInit+0xbc>)
 800bdca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bdcc:	4b09      	ldr	r3, [pc, #36]	; (800bdf4 <prvHeapInit+0xc0>)
 800bdce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bdd2:	601a      	str	r2, [r3, #0]
}
 800bdd4:	bf00      	nop
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	20000388 	.word	0x20000388
 800bde4:	20007b88 	.word	0x20007b88
 800bde8:	20007b90 	.word	0x20007b90
 800bdec:	20007b98 	.word	0x20007b98
 800bdf0:	20007b94 	.word	0x20007b94
 800bdf4:	20007b9c 	.word	0x20007b9c

0800bdf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be00:	4b28      	ldr	r3, [pc, #160]	; (800bea4 <prvInsertBlockIntoFreeList+0xac>)
 800be02:	60fb      	str	r3, [r7, #12]
 800be04:	e002      	b.n	800be0c <prvInsertBlockIntoFreeList+0x14>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	429a      	cmp	r2, r3
 800be14:	d8f7      	bhi.n	800be06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	4413      	add	r3, r2
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	429a      	cmp	r2, r3
 800be26:	d108      	bne.n	800be3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	441a      	add	r2, r3
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	68ba      	ldr	r2, [r7, #8]
 800be44:	441a      	add	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d118      	bne.n	800be80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	4b15      	ldr	r3, [pc, #84]	; (800bea8 <prvInsertBlockIntoFreeList+0xb0>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	429a      	cmp	r2, r3
 800be58:	d00d      	beq.n	800be76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	441a      	add	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	e008      	b.n	800be88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be76:	4b0c      	ldr	r3, [pc, #48]	; (800bea8 <prvInsertBlockIntoFreeList+0xb0>)
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	e003      	b.n	800be88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d002      	beq.n	800be96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be96:	bf00      	nop
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	20007b88 	.word	0x20007b88
 800bea8:	20007b90 	.word	0x20007b90

0800beac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800beac:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bee4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800beb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800beb2:	e003      	b.n	800bebc <LoopCopyDataInit>

0800beb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800beb4:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800beb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800beb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800beba:	3104      	adds	r1, #4

0800bebc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bebc:	480b      	ldr	r0, [pc, #44]	; (800beec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bebe:	4b0c      	ldr	r3, [pc, #48]	; (800bef0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bec0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bec2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bec4:	d3f6      	bcc.n	800beb4 <CopyDataInit>
  ldr  r2, =_sbss
 800bec6:	4a0b      	ldr	r2, [pc, #44]	; (800bef4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bec8:	e002      	b.n	800bed0 <LoopFillZerobss>

0800beca <FillZerobss>:

/* Zero fill the bss segment. */  
 FillZerobss:
  movs  r3, #0
 800beca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800becc:	f842 3b04 	str.w	r3, [r2], #4

0800bed0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bed0:	4b09      	ldr	r3, [pc, #36]	; (800bef8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bed2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bed4:	d3f9      	bcc.n	800beca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bed6:	f7fd fb63 	bl	80095a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800beda:	f000 f9e1 	bl	800c2a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bede:	f7f6 feff 	bl	8002ce0 <main>
  bx  lr    
 800bee2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bee4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800bee8:	08010e94 	.word	0x08010e94
  ldr  r0, =_sdata
 800beec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bef0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800bef4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800bef8:	200081dc 	.word	0x200081dc

0800befc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800befc:	e7fe      	b.n	800befc <ADC_IRQHandler>
	...

0800bf00 <__errno>:
 800bf00:	4b01      	ldr	r3, [pc, #4]	; (800bf08 <__errno+0x8>)
 800bf02:	6818      	ldr	r0, [r3, #0]
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	20000018 	.word	0x20000018

0800bf0c <__sflush_r>:
 800bf0c:	898a      	ldrh	r2, [r1, #12]
 800bf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf12:	4605      	mov	r5, r0
 800bf14:	0710      	lsls	r0, r2, #28
 800bf16:	460c      	mov	r4, r1
 800bf18:	d458      	bmi.n	800bfcc <__sflush_r+0xc0>
 800bf1a:	684b      	ldr	r3, [r1, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	dc05      	bgt.n	800bf2c <__sflush_r+0x20>
 800bf20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dc02      	bgt.n	800bf2c <__sflush_r+0x20>
 800bf26:	2000      	movs	r0, #0
 800bf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf2e:	2e00      	cmp	r6, #0
 800bf30:	d0f9      	beq.n	800bf26 <__sflush_r+0x1a>
 800bf32:	2300      	movs	r3, #0
 800bf34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf38:	682f      	ldr	r7, [r5, #0]
 800bf3a:	602b      	str	r3, [r5, #0]
 800bf3c:	d032      	beq.n	800bfa4 <__sflush_r+0x98>
 800bf3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	075a      	lsls	r2, r3, #29
 800bf44:	d505      	bpl.n	800bf52 <__sflush_r+0x46>
 800bf46:	6863      	ldr	r3, [r4, #4]
 800bf48:	1ac0      	subs	r0, r0, r3
 800bf4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf4c:	b10b      	cbz	r3, 800bf52 <__sflush_r+0x46>
 800bf4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf50:	1ac0      	subs	r0, r0, r3
 800bf52:	2300      	movs	r3, #0
 800bf54:	4602      	mov	r2, r0
 800bf56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf58:	6a21      	ldr	r1, [r4, #32]
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	47b0      	blx	r6
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	d106      	bne.n	800bf72 <__sflush_r+0x66>
 800bf64:	6829      	ldr	r1, [r5, #0]
 800bf66:	291d      	cmp	r1, #29
 800bf68:	d82c      	bhi.n	800bfc4 <__sflush_r+0xb8>
 800bf6a:	4a2a      	ldr	r2, [pc, #168]	; (800c014 <__sflush_r+0x108>)
 800bf6c:	40ca      	lsrs	r2, r1
 800bf6e:	07d6      	lsls	r6, r2, #31
 800bf70:	d528      	bpl.n	800bfc4 <__sflush_r+0xb8>
 800bf72:	2200      	movs	r2, #0
 800bf74:	6062      	str	r2, [r4, #4]
 800bf76:	04d9      	lsls	r1, r3, #19
 800bf78:	6922      	ldr	r2, [r4, #16]
 800bf7a:	6022      	str	r2, [r4, #0]
 800bf7c:	d504      	bpl.n	800bf88 <__sflush_r+0x7c>
 800bf7e:	1c42      	adds	r2, r0, #1
 800bf80:	d101      	bne.n	800bf86 <__sflush_r+0x7a>
 800bf82:	682b      	ldr	r3, [r5, #0]
 800bf84:	b903      	cbnz	r3, 800bf88 <__sflush_r+0x7c>
 800bf86:	6560      	str	r0, [r4, #84]	; 0x54
 800bf88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf8a:	602f      	str	r7, [r5, #0]
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	d0ca      	beq.n	800bf26 <__sflush_r+0x1a>
 800bf90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf94:	4299      	cmp	r1, r3
 800bf96:	d002      	beq.n	800bf9e <__sflush_r+0x92>
 800bf98:	4628      	mov	r0, r5
 800bf9a:	f000 fa43 	bl	800c424 <_free_r>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	6360      	str	r0, [r4, #52]	; 0x34
 800bfa2:	e7c1      	b.n	800bf28 <__sflush_r+0x1c>
 800bfa4:	6a21      	ldr	r1, [r4, #32]
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	47b0      	blx	r6
 800bfac:	1c41      	adds	r1, r0, #1
 800bfae:	d1c7      	bne.n	800bf40 <__sflush_r+0x34>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0c4      	beq.n	800bf40 <__sflush_r+0x34>
 800bfb6:	2b1d      	cmp	r3, #29
 800bfb8:	d001      	beq.n	800bfbe <__sflush_r+0xb2>
 800bfba:	2b16      	cmp	r3, #22
 800bfbc:	d101      	bne.n	800bfc2 <__sflush_r+0xb6>
 800bfbe:	602f      	str	r7, [r5, #0]
 800bfc0:	e7b1      	b.n	800bf26 <__sflush_r+0x1a>
 800bfc2:	89a3      	ldrh	r3, [r4, #12]
 800bfc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	e7ad      	b.n	800bf28 <__sflush_r+0x1c>
 800bfcc:	690f      	ldr	r7, [r1, #16]
 800bfce:	2f00      	cmp	r7, #0
 800bfd0:	d0a9      	beq.n	800bf26 <__sflush_r+0x1a>
 800bfd2:	0793      	lsls	r3, r2, #30
 800bfd4:	680e      	ldr	r6, [r1, #0]
 800bfd6:	bf08      	it	eq
 800bfd8:	694b      	ldreq	r3, [r1, #20]
 800bfda:	600f      	str	r7, [r1, #0]
 800bfdc:	bf18      	it	ne
 800bfde:	2300      	movne	r3, #0
 800bfe0:	eba6 0807 	sub.w	r8, r6, r7
 800bfe4:	608b      	str	r3, [r1, #8]
 800bfe6:	f1b8 0f00 	cmp.w	r8, #0
 800bfea:	dd9c      	ble.n	800bf26 <__sflush_r+0x1a>
 800bfec:	6a21      	ldr	r1, [r4, #32]
 800bfee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bff0:	4643      	mov	r3, r8
 800bff2:	463a      	mov	r2, r7
 800bff4:	4628      	mov	r0, r5
 800bff6:	47b0      	blx	r6
 800bff8:	2800      	cmp	r0, #0
 800bffa:	dc06      	bgt.n	800c00a <__sflush_r+0xfe>
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c002:	81a3      	strh	r3, [r4, #12]
 800c004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c008:	e78e      	b.n	800bf28 <__sflush_r+0x1c>
 800c00a:	4407      	add	r7, r0
 800c00c:	eba8 0800 	sub.w	r8, r8, r0
 800c010:	e7e9      	b.n	800bfe6 <__sflush_r+0xda>
 800c012:	bf00      	nop
 800c014:	20400001 	.word	0x20400001

0800c018 <_fflush_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	690b      	ldr	r3, [r1, #16]
 800c01c:	4605      	mov	r5, r0
 800c01e:	460c      	mov	r4, r1
 800c020:	b913      	cbnz	r3, 800c028 <_fflush_r+0x10>
 800c022:	2500      	movs	r5, #0
 800c024:	4628      	mov	r0, r5
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	b118      	cbz	r0, 800c032 <_fflush_r+0x1a>
 800c02a:	6983      	ldr	r3, [r0, #24]
 800c02c:	b90b      	cbnz	r3, 800c032 <_fflush_r+0x1a>
 800c02e:	f000 f887 	bl	800c140 <__sinit>
 800c032:	4b14      	ldr	r3, [pc, #80]	; (800c084 <_fflush_r+0x6c>)
 800c034:	429c      	cmp	r4, r3
 800c036:	d11b      	bne.n	800c070 <_fflush_r+0x58>
 800c038:	686c      	ldr	r4, [r5, #4]
 800c03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d0ef      	beq.n	800c022 <_fflush_r+0xa>
 800c042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c044:	07d0      	lsls	r0, r2, #31
 800c046:	d404      	bmi.n	800c052 <_fflush_r+0x3a>
 800c048:	0599      	lsls	r1, r3, #22
 800c04a:	d402      	bmi.n	800c052 <_fflush_r+0x3a>
 800c04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c04e:	f000 f94c 	bl	800c2ea <__retarget_lock_acquire_recursive>
 800c052:	4628      	mov	r0, r5
 800c054:	4621      	mov	r1, r4
 800c056:	f7ff ff59 	bl	800bf0c <__sflush_r>
 800c05a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c05c:	07da      	lsls	r2, r3, #31
 800c05e:	4605      	mov	r5, r0
 800c060:	d4e0      	bmi.n	800c024 <_fflush_r+0xc>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	059b      	lsls	r3, r3, #22
 800c066:	d4dd      	bmi.n	800c024 <_fflush_r+0xc>
 800c068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c06a:	f000 f93f 	bl	800c2ec <__retarget_lock_release_recursive>
 800c06e:	e7d9      	b.n	800c024 <_fflush_r+0xc>
 800c070:	4b05      	ldr	r3, [pc, #20]	; (800c088 <_fflush_r+0x70>)
 800c072:	429c      	cmp	r4, r3
 800c074:	d101      	bne.n	800c07a <_fflush_r+0x62>
 800c076:	68ac      	ldr	r4, [r5, #8]
 800c078:	e7df      	b.n	800c03a <_fflush_r+0x22>
 800c07a:	4b04      	ldr	r3, [pc, #16]	; (800c08c <_fflush_r+0x74>)
 800c07c:	429c      	cmp	r4, r3
 800c07e:	bf08      	it	eq
 800c080:	68ec      	ldreq	r4, [r5, #12]
 800c082:	e7da      	b.n	800c03a <_fflush_r+0x22>
 800c084:	08010a00 	.word	0x08010a00
 800c088:	08010a20 	.word	0x08010a20
 800c08c:	080109e0 	.word	0x080109e0

0800c090 <std>:
 800c090:	2300      	movs	r3, #0
 800c092:	b510      	push	{r4, lr}
 800c094:	4604      	mov	r4, r0
 800c096:	e9c0 3300 	strd	r3, r3, [r0]
 800c09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c09e:	6083      	str	r3, [r0, #8]
 800c0a0:	8181      	strh	r1, [r0, #12]
 800c0a2:	6643      	str	r3, [r0, #100]	; 0x64
 800c0a4:	81c2      	strh	r2, [r0, #14]
 800c0a6:	6183      	str	r3, [r0, #24]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	2208      	movs	r2, #8
 800c0ac:	305c      	adds	r0, #92	; 0x5c
 800c0ae:	f000 f9a1 	bl	800c3f4 <memset>
 800c0b2:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <std+0x38>)
 800c0b4:	6263      	str	r3, [r4, #36]	; 0x24
 800c0b6:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <std+0x3c>)
 800c0b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0ba:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <std+0x40>)
 800c0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0be:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <std+0x44>)
 800c0c0:	6224      	str	r4, [r4, #32]
 800c0c2:	6323      	str	r3, [r4, #48]	; 0x30
 800c0c4:	bd10      	pop	{r4, pc}
 800c0c6:	bf00      	nop
 800c0c8:	0800d58d 	.word	0x0800d58d
 800c0cc:	0800d5af 	.word	0x0800d5af
 800c0d0:	0800d5e7 	.word	0x0800d5e7
 800c0d4:	0800d60b 	.word	0x0800d60b

0800c0d8 <_cleanup_r>:
 800c0d8:	4901      	ldr	r1, [pc, #4]	; (800c0e0 <_cleanup_r+0x8>)
 800c0da:	f000 b8c1 	b.w	800c260 <_fwalk_reent>
 800c0de:	bf00      	nop
 800c0e0:	0800c019 	.word	0x0800c019

0800c0e4 <__sfmoreglue>:
 800c0e4:	b570      	push	{r4, r5, r6, lr}
 800c0e6:	1e4a      	subs	r2, r1, #1
 800c0e8:	2568      	movs	r5, #104	; 0x68
 800c0ea:	4355      	muls	r5, r2
 800c0ec:	460e      	mov	r6, r1
 800c0ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0f2:	f000 f9e7 	bl	800c4c4 <_malloc_r>
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	b140      	cbz	r0, 800c10c <__sfmoreglue+0x28>
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	e9c0 1600 	strd	r1, r6, [r0]
 800c100:	300c      	adds	r0, #12
 800c102:	60a0      	str	r0, [r4, #8]
 800c104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c108:	f000 f974 	bl	800c3f4 <memset>
 800c10c:	4620      	mov	r0, r4
 800c10e:	bd70      	pop	{r4, r5, r6, pc}

0800c110 <__sfp_lock_acquire>:
 800c110:	4801      	ldr	r0, [pc, #4]	; (800c118 <__sfp_lock_acquire+0x8>)
 800c112:	f000 b8ea 	b.w	800c2ea <__retarget_lock_acquire_recursive>
 800c116:	bf00      	nop
 800c118:	200081d4 	.word	0x200081d4

0800c11c <__sfp_lock_release>:
 800c11c:	4801      	ldr	r0, [pc, #4]	; (800c124 <__sfp_lock_release+0x8>)
 800c11e:	f000 b8e5 	b.w	800c2ec <__retarget_lock_release_recursive>
 800c122:	bf00      	nop
 800c124:	200081d4 	.word	0x200081d4

0800c128 <__sinit_lock_acquire>:
 800c128:	4801      	ldr	r0, [pc, #4]	; (800c130 <__sinit_lock_acquire+0x8>)
 800c12a:	f000 b8de 	b.w	800c2ea <__retarget_lock_acquire_recursive>
 800c12e:	bf00      	nop
 800c130:	200081cf 	.word	0x200081cf

0800c134 <__sinit_lock_release>:
 800c134:	4801      	ldr	r0, [pc, #4]	; (800c13c <__sinit_lock_release+0x8>)
 800c136:	f000 b8d9 	b.w	800c2ec <__retarget_lock_release_recursive>
 800c13a:	bf00      	nop
 800c13c:	200081cf 	.word	0x200081cf

0800c140 <__sinit>:
 800c140:	b510      	push	{r4, lr}
 800c142:	4604      	mov	r4, r0
 800c144:	f7ff fff0 	bl	800c128 <__sinit_lock_acquire>
 800c148:	69a3      	ldr	r3, [r4, #24]
 800c14a:	b11b      	cbz	r3, 800c154 <__sinit+0x14>
 800c14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c150:	f7ff bff0 	b.w	800c134 <__sinit_lock_release>
 800c154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c158:	6523      	str	r3, [r4, #80]	; 0x50
 800c15a:	4b13      	ldr	r3, [pc, #76]	; (800c1a8 <__sinit+0x68>)
 800c15c:	4a13      	ldr	r2, [pc, #76]	; (800c1ac <__sinit+0x6c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	62a2      	str	r2, [r4, #40]	; 0x28
 800c162:	42a3      	cmp	r3, r4
 800c164:	bf04      	itt	eq
 800c166:	2301      	moveq	r3, #1
 800c168:	61a3      	streq	r3, [r4, #24]
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 f820 	bl	800c1b0 <__sfp>
 800c170:	6060      	str	r0, [r4, #4]
 800c172:	4620      	mov	r0, r4
 800c174:	f000 f81c 	bl	800c1b0 <__sfp>
 800c178:	60a0      	str	r0, [r4, #8]
 800c17a:	4620      	mov	r0, r4
 800c17c:	f000 f818 	bl	800c1b0 <__sfp>
 800c180:	2200      	movs	r2, #0
 800c182:	60e0      	str	r0, [r4, #12]
 800c184:	2104      	movs	r1, #4
 800c186:	6860      	ldr	r0, [r4, #4]
 800c188:	f7ff ff82 	bl	800c090 <std>
 800c18c:	68a0      	ldr	r0, [r4, #8]
 800c18e:	2201      	movs	r2, #1
 800c190:	2109      	movs	r1, #9
 800c192:	f7ff ff7d 	bl	800c090 <std>
 800c196:	68e0      	ldr	r0, [r4, #12]
 800c198:	2202      	movs	r2, #2
 800c19a:	2112      	movs	r1, #18
 800c19c:	f7ff ff78 	bl	800c090 <std>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	61a3      	str	r3, [r4, #24]
 800c1a4:	e7d2      	b.n	800c14c <__sinit+0xc>
 800c1a6:	bf00      	nop
 800c1a8:	08010a40 	.word	0x08010a40
 800c1ac:	0800c0d9 	.word	0x0800c0d9

0800c1b0 <__sfp>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	4607      	mov	r7, r0
 800c1b4:	f7ff ffac 	bl	800c110 <__sfp_lock_acquire>
 800c1b8:	4b1e      	ldr	r3, [pc, #120]	; (800c234 <__sfp+0x84>)
 800c1ba:	681e      	ldr	r6, [r3, #0]
 800c1bc:	69b3      	ldr	r3, [r6, #24]
 800c1be:	b913      	cbnz	r3, 800c1c6 <__sfp+0x16>
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	f7ff ffbd 	bl	800c140 <__sinit>
 800c1c6:	3648      	adds	r6, #72	; 0x48
 800c1c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	d503      	bpl.n	800c1d8 <__sfp+0x28>
 800c1d0:	6833      	ldr	r3, [r6, #0]
 800c1d2:	b30b      	cbz	r3, 800c218 <__sfp+0x68>
 800c1d4:	6836      	ldr	r6, [r6, #0]
 800c1d6:	e7f7      	b.n	800c1c8 <__sfp+0x18>
 800c1d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1dc:	b9d5      	cbnz	r5, 800c214 <__sfp+0x64>
 800c1de:	4b16      	ldr	r3, [pc, #88]	; (800c238 <__sfp+0x88>)
 800c1e0:	60e3      	str	r3, [r4, #12]
 800c1e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1e6:	6665      	str	r5, [r4, #100]	; 0x64
 800c1e8:	f000 f87e 	bl	800c2e8 <__retarget_lock_init_recursive>
 800c1ec:	f7ff ff96 	bl	800c11c <__sfp_lock_release>
 800c1f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1f8:	6025      	str	r5, [r4, #0]
 800c1fa:	61a5      	str	r5, [r4, #24]
 800c1fc:	2208      	movs	r2, #8
 800c1fe:	4629      	mov	r1, r5
 800c200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c204:	f000 f8f6 	bl	800c3f4 <memset>
 800c208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c20c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c210:	4620      	mov	r0, r4
 800c212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c214:	3468      	adds	r4, #104	; 0x68
 800c216:	e7d9      	b.n	800c1cc <__sfp+0x1c>
 800c218:	2104      	movs	r1, #4
 800c21a:	4638      	mov	r0, r7
 800c21c:	f7ff ff62 	bl	800c0e4 <__sfmoreglue>
 800c220:	4604      	mov	r4, r0
 800c222:	6030      	str	r0, [r6, #0]
 800c224:	2800      	cmp	r0, #0
 800c226:	d1d5      	bne.n	800c1d4 <__sfp+0x24>
 800c228:	f7ff ff78 	bl	800c11c <__sfp_lock_release>
 800c22c:	230c      	movs	r3, #12
 800c22e:	603b      	str	r3, [r7, #0]
 800c230:	e7ee      	b.n	800c210 <__sfp+0x60>
 800c232:	bf00      	nop
 800c234:	08010a40 	.word	0x08010a40
 800c238:	ffff0001 	.word	0xffff0001

0800c23c <fiprintf>:
 800c23c:	b40e      	push	{r1, r2, r3}
 800c23e:	b503      	push	{r0, r1, lr}
 800c240:	4601      	mov	r1, r0
 800c242:	ab03      	add	r3, sp, #12
 800c244:	4805      	ldr	r0, [pc, #20]	; (800c25c <fiprintf+0x20>)
 800c246:	f853 2b04 	ldr.w	r2, [r3], #4
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	f000 f9bd 	bl	800c5cc <_vfiprintf_r>
 800c252:	b002      	add	sp, #8
 800c254:	f85d eb04 	ldr.w	lr, [sp], #4
 800c258:	b003      	add	sp, #12
 800c25a:	4770      	bx	lr
 800c25c:	20000018 	.word	0x20000018

0800c260 <_fwalk_reent>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	4606      	mov	r6, r0
 800c266:	4688      	mov	r8, r1
 800c268:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c26c:	2700      	movs	r7, #0
 800c26e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c272:	f1b9 0901 	subs.w	r9, r9, #1
 800c276:	d505      	bpl.n	800c284 <_fwalk_reent+0x24>
 800c278:	6824      	ldr	r4, [r4, #0]
 800c27a:	2c00      	cmp	r4, #0
 800c27c:	d1f7      	bne.n	800c26e <_fwalk_reent+0xe>
 800c27e:	4638      	mov	r0, r7
 800c280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c284:	89ab      	ldrh	r3, [r5, #12]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d907      	bls.n	800c29a <_fwalk_reent+0x3a>
 800c28a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c28e:	3301      	adds	r3, #1
 800c290:	d003      	beq.n	800c29a <_fwalk_reent+0x3a>
 800c292:	4629      	mov	r1, r5
 800c294:	4630      	mov	r0, r6
 800c296:	47c0      	blx	r8
 800c298:	4307      	orrs	r7, r0
 800c29a:	3568      	adds	r5, #104	; 0x68
 800c29c:	e7e9      	b.n	800c272 <_fwalk_reent+0x12>
	...

0800c2a0 <__libc_init_array>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	4d0d      	ldr	r5, [pc, #52]	; (800c2d8 <__libc_init_array+0x38>)
 800c2a4:	4c0d      	ldr	r4, [pc, #52]	; (800c2dc <__libc_init_array+0x3c>)
 800c2a6:	1b64      	subs	r4, r4, r5
 800c2a8:	10a4      	asrs	r4, r4, #2
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	42a6      	cmp	r6, r4
 800c2ae:	d109      	bne.n	800c2c4 <__libc_init_array+0x24>
 800c2b0:	4d0b      	ldr	r5, [pc, #44]	; (800c2e0 <__libc_init_array+0x40>)
 800c2b2:	4c0c      	ldr	r4, [pc, #48]	; (800c2e4 <__libc_init_array+0x44>)
 800c2b4:	f004 fb06 	bl	80108c4 <_init>
 800c2b8:	1b64      	subs	r4, r4, r5
 800c2ba:	10a4      	asrs	r4, r4, #2
 800c2bc:	2600      	movs	r6, #0
 800c2be:	42a6      	cmp	r6, r4
 800c2c0:	d105      	bne.n	800c2ce <__libc_init_array+0x2e>
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2c8:	4798      	blx	r3
 800c2ca:	3601      	adds	r6, #1
 800c2cc:	e7ee      	b.n	800c2ac <__libc_init_array+0xc>
 800c2ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2d2:	4798      	blx	r3
 800c2d4:	3601      	adds	r6, #1
 800c2d6:	e7f2      	b.n	800c2be <__libc_init_array+0x1e>
 800c2d8:	08010e8c 	.word	0x08010e8c
 800c2dc:	08010e8c 	.word	0x08010e8c
 800c2e0:	08010e8c 	.word	0x08010e8c
 800c2e4:	08010e90 	.word	0x08010e90

0800c2e8 <__retarget_lock_init_recursive>:
 800c2e8:	4770      	bx	lr

0800c2ea <__retarget_lock_acquire_recursive>:
 800c2ea:	4770      	bx	lr

0800c2ec <__retarget_lock_release_recursive>:
 800c2ec:	4770      	bx	lr

0800c2ee <__swhatbuf_r>:
 800c2ee:	b570      	push	{r4, r5, r6, lr}
 800c2f0:	460e      	mov	r6, r1
 800c2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f6:	2900      	cmp	r1, #0
 800c2f8:	b096      	sub	sp, #88	; 0x58
 800c2fa:	4614      	mov	r4, r2
 800c2fc:	461d      	mov	r5, r3
 800c2fe:	da07      	bge.n	800c310 <__swhatbuf_r+0x22>
 800c300:	2300      	movs	r3, #0
 800c302:	602b      	str	r3, [r5, #0]
 800c304:	89b3      	ldrh	r3, [r6, #12]
 800c306:	061a      	lsls	r2, r3, #24
 800c308:	d410      	bmi.n	800c32c <__swhatbuf_r+0x3e>
 800c30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c30e:	e00e      	b.n	800c32e <__swhatbuf_r+0x40>
 800c310:	466a      	mov	r2, sp
 800c312:	f002 ffe5 	bl	800f2e0 <_fstat_r>
 800c316:	2800      	cmp	r0, #0
 800c318:	dbf2      	blt.n	800c300 <__swhatbuf_r+0x12>
 800c31a:	9a01      	ldr	r2, [sp, #4]
 800c31c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c320:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c324:	425a      	negs	r2, r3
 800c326:	415a      	adcs	r2, r3
 800c328:	602a      	str	r2, [r5, #0]
 800c32a:	e7ee      	b.n	800c30a <__swhatbuf_r+0x1c>
 800c32c:	2340      	movs	r3, #64	; 0x40
 800c32e:	2000      	movs	r0, #0
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	b016      	add	sp, #88	; 0x58
 800c334:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c338 <__smakebuf_r>:
 800c338:	898b      	ldrh	r3, [r1, #12]
 800c33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c33c:	079d      	lsls	r5, r3, #30
 800c33e:	4606      	mov	r6, r0
 800c340:	460c      	mov	r4, r1
 800c342:	d507      	bpl.n	800c354 <__smakebuf_r+0x1c>
 800c344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	6123      	str	r3, [r4, #16]
 800c34c:	2301      	movs	r3, #1
 800c34e:	6163      	str	r3, [r4, #20]
 800c350:	b002      	add	sp, #8
 800c352:	bd70      	pop	{r4, r5, r6, pc}
 800c354:	ab01      	add	r3, sp, #4
 800c356:	466a      	mov	r2, sp
 800c358:	f7ff ffc9 	bl	800c2ee <__swhatbuf_r>
 800c35c:	9900      	ldr	r1, [sp, #0]
 800c35e:	4605      	mov	r5, r0
 800c360:	4630      	mov	r0, r6
 800c362:	f000 f8af 	bl	800c4c4 <_malloc_r>
 800c366:	b948      	cbnz	r0, 800c37c <__smakebuf_r+0x44>
 800c368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c36c:	059a      	lsls	r2, r3, #22
 800c36e:	d4ef      	bmi.n	800c350 <__smakebuf_r+0x18>
 800c370:	f023 0303 	bic.w	r3, r3, #3
 800c374:	f043 0302 	orr.w	r3, r3, #2
 800c378:	81a3      	strh	r3, [r4, #12]
 800c37a:	e7e3      	b.n	800c344 <__smakebuf_r+0xc>
 800c37c:	4b0d      	ldr	r3, [pc, #52]	; (800c3b4 <__smakebuf_r+0x7c>)
 800c37e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	6020      	str	r0, [r4, #0]
 800c384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	9b00      	ldr	r3, [sp, #0]
 800c38c:	6163      	str	r3, [r4, #20]
 800c38e:	9b01      	ldr	r3, [sp, #4]
 800c390:	6120      	str	r0, [r4, #16]
 800c392:	b15b      	cbz	r3, 800c3ac <__smakebuf_r+0x74>
 800c394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c398:	4630      	mov	r0, r6
 800c39a:	f003 fb23 	bl	800f9e4 <_isatty_r>
 800c39e:	b128      	cbz	r0, 800c3ac <__smakebuf_r+0x74>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	f043 0301 	orr.w	r3, r3, #1
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	89a0      	ldrh	r0, [r4, #12]
 800c3ae:	4305      	orrs	r5, r0
 800c3b0:	81a5      	strh	r5, [r4, #12]
 800c3b2:	e7cd      	b.n	800c350 <__smakebuf_r+0x18>
 800c3b4:	0800c0d9 	.word	0x0800c0d9

0800c3b8 <malloc>:
 800c3b8:	4b02      	ldr	r3, [pc, #8]	; (800c3c4 <malloc+0xc>)
 800c3ba:	4601      	mov	r1, r0
 800c3bc:	6818      	ldr	r0, [r3, #0]
 800c3be:	f000 b881 	b.w	800c4c4 <_malloc_r>
 800c3c2:	bf00      	nop
 800c3c4:	20000018 	.word	0x20000018

0800c3c8 <free>:
 800c3c8:	4b02      	ldr	r3, [pc, #8]	; (800c3d4 <free+0xc>)
 800c3ca:	4601      	mov	r1, r0
 800c3cc:	6818      	ldr	r0, [r3, #0]
 800c3ce:	f000 b829 	b.w	800c424 <_free_r>
 800c3d2:	bf00      	nop
 800c3d4:	20000018 	.word	0x20000018

0800c3d8 <memcpy>:
 800c3d8:	440a      	add	r2, r1
 800c3da:	4291      	cmp	r1, r2
 800c3dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c3e0:	d100      	bne.n	800c3e4 <memcpy+0xc>
 800c3e2:	4770      	bx	lr
 800c3e4:	b510      	push	{r4, lr}
 800c3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3ee:	4291      	cmp	r1, r2
 800c3f0:	d1f9      	bne.n	800c3e6 <memcpy+0xe>
 800c3f2:	bd10      	pop	{r4, pc}

0800c3f4 <memset>:
 800c3f4:	4402      	add	r2, r0
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d100      	bne.n	800c3fe <memset+0xa>
 800c3fc:	4770      	bx	lr
 800c3fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c402:	e7f9      	b.n	800c3f8 <memset+0x4>

0800c404 <_calloc_r>:
 800c404:	b513      	push	{r0, r1, r4, lr}
 800c406:	434a      	muls	r2, r1
 800c408:	4611      	mov	r1, r2
 800c40a:	9201      	str	r2, [sp, #4]
 800c40c:	f000 f85a 	bl	800c4c4 <_malloc_r>
 800c410:	4604      	mov	r4, r0
 800c412:	b118      	cbz	r0, 800c41c <_calloc_r+0x18>
 800c414:	9a01      	ldr	r2, [sp, #4]
 800c416:	2100      	movs	r1, #0
 800c418:	f7ff ffec 	bl	800c3f4 <memset>
 800c41c:	4620      	mov	r0, r4
 800c41e:	b002      	add	sp, #8
 800c420:	bd10      	pop	{r4, pc}
	...

0800c424 <_free_r>:
 800c424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c426:	2900      	cmp	r1, #0
 800c428:	d048      	beq.n	800c4bc <_free_r+0x98>
 800c42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c42e:	9001      	str	r0, [sp, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	f1a1 0404 	sub.w	r4, r1, #4
 800c436:	bfb8      	it	lt
 800c438:	18e4      	addlt	r4, r4, r3
 800c43a:	f003 fb25 	bl	800fa88 <__malloc_lock>
 800c43e:	4a20      	ldr	r2, [pc, #128]	; (800c4c0 <_free_r+0x9c>)
 800c440:	9801      	ldr	r0, [sp, #4]
 800c442:	6813      	ldr	r3, [r2, #0]
 800c444:	4615      	mov	r5, r2
 800c446:	b933      	cbnz	r3, 800c456 <_free_r+0x32>
 800c448:	6063      	str	r3, [r4, #4]
 800c44a:	6014      	str	r4, [r2, #0]
 800c44c:	b003      	add	sp, #12
 800c44e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c452:	f003 bb1f 	b.w	800fa94 <__malloc_unlock>
 800c456:	42a3      	cmp	r3, r4
 800c458:	d90b      	bls.n	800c472 <_free_r+0x4e>
 800c45a:	6821      	ldr	r1, [r4, #0]
 800c45c:	1862      	adds	r2, r4, r1
 800c45e:	4293      	cmp	r3, r2
 800c460:	bf04      	itt	eq
 800c462:	681a      	ldreq	r2, [r3, #0]
 800c464:	685b      	ldreq	r3, [r3, #4]
 800c466:	6063      	str	r3, [r4, #4]
 800c468:	bf04      	itt	eq
 800c46a:	1852      	addeq	r2, r2, r1
 800c46c:	6022      	streq	r2, [r4, #0]
 800c46e:	602c      	str	r4, [r5, #0]
 800c470:	e7ec      	b.n	800c44c <_free_r+0x28>
 800c472:	461a      	mov	r2, r3
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	b10b      	cbz	r3, 800c47c <_free_r+0x58>
 800c478:	42a3      	cmp	r3, r4
 800c47a:	d9fa      	bls.n	800c472 <_free_r+0x4e>
 800c47c:	6811      	ldr	r1, [r2, #0]
 800c47e:	1855      	adds	r5, r2, r1
 800c480:	42a5      	cmp	r5, r4
 800c482:	d10b      	bne.n	800c49c <_free_r+0x78>
 800c484:	6824      	ldr	r4, [r4, #0]
 800c486:	4421      	add	r1, r4
 800c488:	1854      	adds	r4, r2, r1
 800c48a:	42a3      	cmp	r3, r4
 800c48c:	6011      	str	r1, [r2, #0]
 800c48e:	d1dd      	bne.n	800c44c <_free_r+0x28>
 800c490:	681c      	ldr	r4, [r3, #0]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	6053      	str	r3, [r2, #4]
 800c496:	4421      	add	r1, r4
 800c498:	6011      	str	r1, [r2, #0]
 800c49a:	e7d7      	b.n	800c44c <_free_r+0x28>
 800c49c:	d902      	bls.n	800c4a4 <_free_r+0x80>
 800c49e:	230c      	movs	r3, #12
 800c4a0:	6003      	str	r3, [r0, #0]
 800c4a2:	e7d3      	b.n	800c44c <_free_r+0x28>
 800c4a4:	6825      	ldr	r5, [r4, #0]
 800c4a6:	1961      	adds	r1, r4, r5
 800c4a8:	428b      	cmp	r3, r1
 800c4aa:	bf04      	itt	eq
 800c4ac:	6819      	ldreq	r1, [r3, #0]
 800c4ae:	685b      	ldreq	r3, [r3, #4]
 800c4b0:	6063      	str	r3, [r4, #4]
 800c4b2:	bf04      	itt	eq
 800c4b4:	1949      	addeq	r1, r1, r5
 800c4b6:	6021      	streq	r1, [r4, #0]
 800c4b8:	6054      	str	r4, [r2, #4]
 800c4ba:	e7c7      	b.n	800c44c <_free_r+0x28>
 800c4bc:	b003      	add	sp, #12
 800c4be:	bd30      	pop	{r4, r5, pc}
 800c4c0:	20007ba0 	.word	0x20007ba0

0800c4c4 <_malloc_r>:
 800c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c6:	1ccd      	adds	r5, r1, #3
 800c4c8:	f025 0503 	bic.w	r5, r5, #3
 800c4cc:	3508      	adds	r5, #8
 800c4ce:	2d0c      	cmp	r5, #12
 800c4d0:	bf38      	it	cc
 800c4d2:	250c      	movcc	r5, #12
 800c4d4:	2d00      	cmp	r5, #0
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	db01      	blt.n	800c4de <_malloc_r+0x1a>
 800c4da:	42a9      	cmp	r1, r5
 800c4dc:	d903      	bls.n	800c4e6 <_malloc_r+0x22>
 800c4de:	230c      	movs	r3, #12
 800c4e0:	6033      	str	r3, [r6, #0]
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4e6:	f003 facf 	bl	800fa88 <__malloc_lock>
 800c4ea:	4921      	ldr	r1, [pc, #132]	; (800c570 <_malloc_r+0xac>)
 800c4ec:	680a      	ldr	r2, [r1, #0]
 800c4ee:	4614      	mov	r4, r2
 800c4f0:	b99c      	cbnz	r4, 800c51a <_malloc_r+0x56>
 800c4f2:	4f20      	ldr	r7, [pc, #128]	; (800c574 <_malloc_r+0xb0>)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	b923      	cbnz	r3, 800c502 <_malloc_r+0x3e>
 800c4f8:	4621      	mov	r1, r4
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f001 f810 	bl	800d520 <_sbrk_r>
 800c500:	6038      	str	r0, [r7, #0]
 800c502:	4629      	mov	r1, r5
 800c504:	4630      	mov	r0, r6
 800c506:	f001 f80b 	bl	800d520 <_sbrk_r>
 800c50a:	1c43      	adds	r3, r0, #1
 800c50c:	d123      	bne.n	800c556 <_malloc_r+0x92>
 800c50e:	230c      	movs	r3, #12
 800c510:	6033      	str	r3, [r6, #0]
 800c512:	4630      	mov	r0, r6
 800c514:	f003 fabe 	bl	800fa94 <__malloc_unlock>
 800c518:	e7e3      	b.n	800c4e2 <_malloc_r+0x1e>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	1b5b      	subs	r3, r3, r5
 800c51e:	d417      	bmi.n	800c550 <_malloc_r+0x8c>
 800c520:	2b0b      	cmp	r3, #11
 800c522:	d903      	bls.n	800c52c <_malloc_r+0x68>
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	441c      	add	r4, r3
 800c528:	6025      	str	r5, [r4, #0]
 800c52a:	e004      	b.n	800c536 <_malloc_r+0x72>
 800c52c:	6863      	ldr	r3, [r4, #4]
 800c52e:	42a2      	cmp	r2, r4
 800c530:	bf0c      	ite	eq
 800c532:	600b      	streq	r3, [r1, #0]
 800c534:	6053      	strne	r3, [r2, #4]
 800c536:	4630      	mov	r0, r6
 800c538:	f003 faac 	bl	800fa94 <__malloc_unlock>
 800c53c:	f104 000b 	add.w	r0, r4, #11
 800c540:	1d23      	adds	r3, r4, #4
 800c542:	f020 0007 	bic.w	r0, r0, #7
 800c546:	1ac2      	subs	r2, r0, r3
 800c548:	d0cc      	beq.n	800c4e4 <_malloc_r+0x20>
 800c54a:	1a1b      	subs	r3, r3, r0
 800c54c:	50a3      	str	r3, [r4, r2]
 800c54e:	e7c9      	b.n	800c4e4 <_malloc_r+0x20>
 800c550:	4622      	mov	r2, r4
 800c552:	6864      	ldr	r4, [r4, #4]
 800c554:	e7cc      	b.n	800c4f0 <_malloc_r+0x2c>
 800c556:	1cc4      	adds	r4, r0, #3
 800c558:	f024 0403 	bic.w	r4, r4, #3
 800c55c:	42a0      	cmp	r0, r4
 800c55e:	d0e3      	beq.n	800c528 <_malloc_r+0x64>
 800c560:	1a21      	subs	r1, r4, r0
 800c562:	4630      	mov	r0, r6
 800c564:	f000 ffdc 	bl	800d520 <_sbrk_r>
 800c568:	3001      	adds	r0, #1
 800c56a:	d1dd      	bne.n	800c528 <_malloc_r+0x64>
 800c56c:	e7cf      	b.n	800c50e <_malloc_r+0x4a>
 800c56e:	bf00      	nop
 800c570:	20007ba0 	.word	0x20007ba0
 800c574:	20007ba4 	.word	0x20007ba4

0800c578 <__sfputc_r>:
 800c578:	6893      	ldr	r3, [r2, #8]
 800c57a:	3b01      	subs	r3, #1
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	b410      	push	{r4}
 800c580:	6093      	str	r3, [r2, #8]
 800c582:	da08      	bge.n	800c596 <__sfputc_r+0x1e>
 800c584:	6994      	ldr	r4, [r2, #24]
 800c586:	42a3      	cmp	r3, r4
 800c588:	db01      	blt.n	800c58e <__sfputc_r+0x16>
 800c58a:	290a      	cmp	r1, #10
 800c58c:	d103      	bne.n	800c596 <__sfputc_r+0x1e>
 800c58e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c592:	f001 bf2d 	b.w	800e3f0 <__swbuf_r>
 800c596:	6813      	ldr	r3, [r2, #0]
 800c598:	1c58      	adds	r0, r3, #1
 800c59a:	6010      	str	r0, [r2, #0]
 800c59c:	7019      	strb	r1, [r3, #0]
 800c59e:	4608      	mov	r0, r1
 800c5a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <__sfputs_r>:
 800c5a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a8:	4606      	mov	r6, r0
 800c5aa:	460f      	mov	r7, r1
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	18d5      	adds	r5, r2, r3
 800c5b0:	42ac      	cmp	r4, r5
 800c5b2:	d101      	bne.n	800c5b8 <__sfputs_r+0x12>
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	e007      	b.n	800c5c8 <__sfputs_r+0x22>
 800c5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5bc:	463a      	mov	r2, r7
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f7ff ffda 	bl	800c578 <__sfputc_r>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d1f3      	bne.n	800c5b0 <__sfputs_r+0xa>
 800c5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5cc <_vfiprintf_r>:
 800c5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d0:	460d      	mov	r5, r1
 800c5d2:	b09d      	sub	sp, #116	; 0x74
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	4698      	mov	r8, r3
 800c5d8:	4606      	mov	r6, r0
 800c5da:	b118      	cbz	r0, 800c5e4 <_vfiprintf_r+0x18>
 800c5dc:	6983      	ldr	r3, [r0, #24]
 800c5de:	b90b      	cbnz	r3, 800c5e4 <_vfiprintf_r+0x18>
 800c5e0:	f7ff fdae 	bl	800c140 <__sinit>
 800c5e4:	4b89      	ldr	r3, [pc, #548]	; (800c80c <_vfiprintf_r+0x240>)
 800c5e6:	429d      	cmp	r5, r3
 800c5e8:	d11b      	bne.n	800c622 <_vfiprintf_r+0x56>
 800c5ea:	6875      	ldr	r5, [r6, #4]
 800c5ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5ee:	07d9      	lsls	r1, r3, #31
 800c5f0:	d405      	bmi.n	800c5fe <_vfiprintf_r+0x32>
 800c5f2:	89ab      	ldrh	r3, [r5, #12]
 800c5f4:	059a      	lsls	r2, r3, #22
 800c5f6:	d402      	bmi.n	800c5fe <_vfiprintf_r+0x32>
 800c5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5fa:	f7ff fe76 	bl	800c2ea <__retarget_lock_acquire_recursive>
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	071b      	lsls	r3, r3, #28
 800c602:	d501      	bpl.n	800c608 <_vfiprintf_r+0x3c>
 800c604:	692b      	ldr	r3, [r5, #16]
 800c606:	b9eb      	cbnz	r3, 800c644 <_vfiprintf_r+0x78>
 800c608:	4629      	mov	r1, r5
 800c60a:	4630      	mov	r0, r6
 800c60c:	f001 ff54 	bl	800e4b8 <__swsetup_r>
 800c610:	b1c0      	cbz	r0, 800c644 <_vfiprintf_r+0x78>
 800c612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c614:	07dc      	lsls	r4, r3, #31
 800c616:	d50e      	bpl.n	800c636 <_vfiprintf_r+0x6a>
 800c618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c61c:	b01d      	add	sp, #116	; 0x74
 800c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c622:	4b7b      	ldr	r3, [pc, #492]	; (800c810 <_vfiprintf_r+0x244>)
 800c624:	429d      	cmp	r5, r3
 800c626:	d101      	bne.n	800c62c <_vfiprintf_r+0x60>
 800c628:	68b5      	ldr	r5, [r6, #8]
 800c62a:	e7df      	b.n	800c5ec <_vfiprintf_r+0x20>
 800c62c:	4b79      	ldr	r3, [pc, #484]	; (800c814 <_vfiprintf_r+0x248>)
 800c62e:	429d      	cmp	r5, r3
 800c630:	bf08      	it	eq
 800c632:	68f5      	ldreq	r5, [r6, #12]
 800c634:	e7da      	b.n	800c5ec <_vfiprintf_r+0x20>
 800c636:	89ab      	ldrh	r3, [r5, #12]
 800c638:	0598      	lsls	r0, r3, #22
 800c63a:	d4ed      	bmi.n	800c618 <_vfiprintf_r+0x4c>
 800c63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c63e:	f7ff fe55 	bl	800c2ec <__retarget_lock_release_recursive>
 800c642:	e7e9      	b.n	800c618 <_vfiprintf_r+0x4c>
 800c644:	2300      	movs	r3, #0
 800c646:	9309      	str	r3, [sp, #36]	; 0x24
 800c648:	2320      	movs	r3, #32
 800c64a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c64e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c652:	2330      	movs	r3, #48	; 0x30
 800c654:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c818 <_vfiprintf_r+0x24c>
 800c658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c65c:	f04f 0901 	mov.w	r9, #1
 800c660:	4623      	mov	r3, r4
 800c662:	469a      	mov	sl, r3
 800c664:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c668:	b10a      	cbz	r2, 800c66e <_vfiprintf_r+0xa2>
 800c66a:	2a25      	cmp	r2, #37	; 0x25
 800c66c:	d1f9      	bne.n	800c662 <_vfiprintf_r+0x96>
 800c66e:	ebba 0b04 	subs.w	fp, sl, r4
 800c672:	d00b      	beq.n	800c68c <_vfiprintf_r+0xc0>
 800c674:	465b      	mov	r3, fp
 800c676:	4622      	mov	r2, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7ff ff93 	bl	800c5a6 <__sfputs_r>
 800c680:	3001      	adds	r0, #1
 800c682:	f000 80aa 	beq.w	800c7da <_vfiprintf_r+0x20e>
 800c686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c688:	445a      	add	r2, fp
 800c68a:	9209      	str	r2, [sp, #36]	; 0x24
 800c68c:	f89a 3000 	ldrb.w	r3, [sl]
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 80a2 	beq.w	800c7da <_vfiprintf_r+0x20e>
 800c696:	2300      	movs	r3, #0
 800c698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c69c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6a0:	f10a 0a01 	add.w	sl, sl, #1
 800c6a4:	9304      	str	r3, [sp, #16]
 800c6a6:	9307      	str	r3, [sp, #28]
 800c6a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c6ae:	4654      	mov	r4, sl
 800c6b0:	2205      	movs	r2, #5
 800c6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6b6:	4858      	ldr	r0, [pc, #352]	; (800c818 <_vfiprintf_r+0x24c>)
 800c6b8:	f7f3 fd9a 	bl	80001f0 <memchr>
 800c6bc:	9a04      	ldr	r2, [sp, #16]
 800c6be:	b9d8      	cbnz	r0, 800c6f8 <_vfiprintf_r+0x12c>
 800c6c0:	06d1      	lsls	r1, r2, #27
 800c6c2:	bf44      	itt	mi
 800c6c4:	2320      	movmi	r3, #32
 800c6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ca:	0713      	lsls	r3, r2, #28
 800c6cc:	bf44      	itt	mi
 800c6ce:	232b      	movmi	r3, #43	; 0x2b
 800c6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6da:	d015      	beq.n	800c708 <_vfiprintf_r+0x13c>
 800c6dc:	9a07      	ldr	r2, [sp, #28]
 800c6de:	4654      	mov	r4, sl
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	f04f 0c0a 	mov.w	ip, #10
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6ec:	3b30      	subs	r3, #48	; 0x30
 800c6ee:	2b09      	cmp	r3, #9
 800c6f0:	d94e      	bls.n	800c790 <_vfiprintf_r+0x1c4>
 800c6f2:	b1b0      	cbz	r0, 800c722 <_vfiprintf_r+0x156>
 800c6f4:	9207      	str	r2, [sp, #28]
 800c6f6:	e014      	b.n	800c722 <_vfiprintf_r+0x156>
 800c6f8:	eba0 0308 	sub.w	r3, r0, r8
 800c6fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c700:	4313      	orrs	r3, r2
 800c702:	9304      	str	r3, [sp, #16]
 800c704:	46a2      	mov	sl, r4
 800c706:	e7d2      	b.n	800c6ae <_vfiprintf_r+0xe2>
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	1d19      	adds	r1, r3, #4
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	9103      	str	r1, [sp, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	bfbb      	ittet	lt
 800c714:	425b      	neglt	r3, r3
 800c716:	f042 0202 	orrlt.w	r2, r2, #2
 800c71a:	9307      	strge	r3, [sp, #28]
 800c71c:	9307      	strlt	r3, [sp, #28]
 800c71e:	bfb8      	it	lt
 800c720:	9204      	strlt	r2, [sp, #16]
 800c722:	7823      	ldrb	r3, [r4, #0]
 800c724:	2b2e      	cmp	r3, #46	; 0x2e
 800c726:	d10c      	bne.n	800c742 <_vfiprintf_r+0x176>
 800c728:	7863      	ldrb	r3, [r4, #1]
 800c72a:	2b2a      	cmp	r3, #42	; 0x2a
 800c72c:	d135      	bne.n	800c79a <_vfiprintf_r+0x1ce>
 800c72e:	9b03      	ldr	r3, [sp, #12]
 800c730:	1d1a      	adds	r2, r3, #4
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	9203      	str	r2, [sp, #12]
 800c736:	2b00      	cmp	r3, #0
 800c738:	bfb8      	it	lt
 800c73a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c73e:	3402      	adds	r4, #2
 800c740:	9305      	str	r3, [sp, #20]
 800c742:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c828 <_vfiprintf_r+0x25c>
 800c746:	7821      	ldrb	r1, [r4, #0]
 800c748:	2203      	movs	r2, #3
 800c74a:	4650      	mov	r0, sl
 800c74c:	f7f3 fd50 	bl	80001f0 <memchr>
 800c750:	b140      	cbz	r0, 800c764 <_vfiprintf_r+0x198>
 800c752:	2340      	movs	r3, #64	; 0x40
 800c754:	eba0 000a 	sub.w	r0, r0, sl
 800c758:	fa03 f000 	lsl.w	r0, r3, r0
 800c75c:	9b04      	ldr	r3, [sp, #16]
 800c75e:	4303      	orrs	r3, r0
 800c760:	3401      	adds	r4, #1
 800c762:	9304      	str	r3, [sp, #16]
 800c764:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c768:	482c      	ldr	r0, [pc, #176]	; (800c81c <_vfiprintf_r+0x250>)
 800c76a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c76e:	2206      	movs	r2, #6
 800c770:	f7f3 fd3e 	bl	80001f0 <memchr>
 800c774:	2800      	cmp	r0, #0
 800c776:	d03f      	beq.n	800c7f8 <_vfiprintf_r+0x22c>
 800c778:	4b29      	ldr	r3, [pc, #164]	; (800c820 <_vfiprintf_r+0x254>)
 800c77a:	bb1b      	cbnz	r3, 800c7c4 <_vfiprintf_r+0x1f8>
 800c77c:	9b03      	ldr	r3, [sp, #12]
 800c77e:	3307      	adds	r3, #7
 800c780:	f023 0307 	bic.w	r3, r3, #7
 800c784:	3308      	adds	r3, #8
 800c786:	9303      	str	r3, [sp, #12]
 800c788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c78a:	443b      	add	r3, r7
 800c78c:	9309      	str	r3, [sp, #36]	; 0x24
 800c78e:	e767      	b.n	800c660 <_vfiprintf_r+0x94>
 800c790:	fb0c 3202 	mla	r2, ip, r2, r3
 800c794:	460c      	mov	r4, r1
 800c796:	2001      	movs	r0, #1
 800c798:	e7a5      	b.n	800c6e6 <_vfiprintf_r+0x11a>
 800c79a:	2300      	movs	r3, #0
 800c79c:	3401      	adds	r4, #1
 800c79e:	9305      	str	r3, [sp, #20]
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	f04f 0c0a 	mov.w	ip, #10
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ac:	3a30      	subs	r2, #48	; 0x30
 800c7ae:	2a09      	cmp	r2, #9
 800c7b0:	d903      	bls.n	800c7ba <_vfiprintf_r+0x1ee>
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d0c5      	beq.n	800c742 <_vfiprintf_r+0x176>
 800c7b6:	9105      	str	r1, [sp, #20]
 800c7b8:	e7c3      	b.n	800c742 <_vfiprintf_r+0x176>
 800c7ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7be:	4604      	mov	r4, r0
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e7f0      	b.n	800c7a6 <_vfiprintf_r+0x1da>
 800c7c4:	ab03      	add	r3, sp, #12
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	462a      	mov	r2, r5
 800c7ca:	4b16      	ldr	r3, [pc, #88]	; (800c824 <_vfiprintf_r+0x258>)
 800c7cc:	a904      	add	r1, sp, #16
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f000 f8cc 	bl	800c96c <_printf_float>
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	1c78      	adds	r0, r7, #1
 800c7d8:	d1d6      	bne.n	800c788 <_vfiprintf_r+0x1bc>
 800c7da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7dc:	07d9      	lsls	r1, r3, #31
 800c7de:	d405      	bmi.n	800c7ec <_vfiprintf_r+0x220>
 800c7e0:	89ab      	ldrh	r3, [r5, #12]
 800c7e2:	059a      	lsls	r2, r3, #22
 800c7e4:	d402      	bmi.n	800c7ec <_vfiprintf_r+0x220>
 800c7e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e8:	f7ff fd80 	bl	800c2ec <__retarget_lock_release_recursive>
 800c7ec:	89ab      	ldrh	r3, [r5, #12]
 800c7ee:	065b      	lsls	r3, r3, #25
 800c7f0:	f53f af12 	bmi.w	800c618 <_vfiprintf_r+0x4c>
 800c7f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7f6:	e711      	b.n	800c61c <_vfiprintf_r+0x50>
 800c7f8:	ab03      	add	r3, sp, #12
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	462a      	mov	r2, r5
 800c7fe:	4b09      	ldr	r3, [pc, #36]	; (800c824 <_vfiprintf_r+0x258>)
 800c800:	a904      	add	r1, sp, #16
 800c802:	4630      	mov	r0, r6
 800c804:	f000 fb56 	bl	800ceb4 <_printf_i>
 800c808:	e7e4      	b.n	800c7d4 <_vfiprintf_r+0x208>
 800c80a:	bf00      	nop
 800c80c:	08010a00 	.word	0x08010a00
 800c810:	08010a20 	.word	0x08010a20
 800c814:	080109e0 	.word	0x080109e0
 800c818:	08010a44 	.word	0x08010a44
 800c81c:	08010a4e 	.word	0x08010a4e
 800c820:	0800c96d 	.word	0x0800c96d
 800c824:	0800c5a7 	.word	0x0800c5a7
 800c828:	08010a4a 	.word	0x08010a4a

0800c82c <__cvt>:
 800c82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c830:	ec55 4b10 	vmov	r4, r5, d0
 800c834:	2d00      	cmp	r5, #0
 800c836:	460e      	mov	r6, r1
 800c838:	4619      	mov	r1, r3
 800c83a:	462b      	mov	r3, r5
 800c83c:	bfbb      	ittet	lt
 800c83e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c842:	461d      	movlt	r5, r3
 800c844:	2300      	movge	r3, #0
 800c846:	232d      	movlt	r3, #45	; 0x2d
 800c848:	700b      	strb	r3, [r1, #0]
 800c84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c84c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c850:	4691      	mov	r9, r2
 800c852:	f023 0820 	bic.w	r8, r3, #32
 800c856:	bfbc      	itt	lt
 800c858:	4622      	movlt	r2, r4
 800c85a:	4614      	movlt	r4, r2
 800c85c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c860:	d005      	beq.n	800c86e <__cvt+0x42>
 800c862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c866:	d100      	bne.n	800c86a <__cvt+0x3e>
 800c868:	3601      	adds	r6, #1
 800c86a:	2102      	movs	r1, #2
 800c86c:	e000      	b.n	800c870 <__cvt+0x44>
 800c86e:	2103      	movs	r1, #3
 800c870:	ab03      	add	r3, sp, #12
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	ab02      	add	r3, sp, #8
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	ec45 4b10 	vmov	d0, r4, r5
 800c87c:	4653      	mov	r3, sl
 800c87e:	4632      	mov	r2, r6
 800c880:	f001 ff42 	bl	800e708 <_dtoa_r>
 800c884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c888:	4607      	mov	r7, r0
 800c88a:	d102      	bne.n	800c892 <__cvt+0x66>
 800c88c:	f019 0f01 	tst.w	r9, #1
 800c890:	d022      	beq.n	800c8d8 <__cvt+0xac>
 800c892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c896:	eb07 0906 	add.w	r9, r7, r6
 800c89a:	d110      	bne.n	800c8be <__cvt+0x92>
 800c89c:	783b      	ldrb	r3, [r7, #0]
 800c89e:	2b30      	cmp	r3, #48	; 0x30
 800c8a0:	d10a      	bne.n	800c8b8 <__cvt+0x8c>
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	f7f4 f91d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8ae:	b918      	cbnz	r0, 800c8b8 <__cvt+0x8c>
 800c8b0:	f1c6 0601 	rsb	r6, r6, #1
 800c8b4:	f8ca 6000 	str.w	r6, [sl]
 800c8b8:	f8da 3000 	ldr.w	r3, [sl]
 800c8bc:	4499      	add	r9, r3
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f4 f90f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8ca:	b108      	cbz	r0, 800c8d0 <__cvt+0xa4>
 800c8cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8d0:	2230      	movs	r2, #48	; 0x30
 800c8d2:	9b03      	ldr	r3, [sp, #12]
 800c8d4:	454b      	cmp	r3, r9
 800c8d6:	d307      	bcc.n	800c8e8 <__cvt+0xbc>
 800c8d8:	9b03      	ldr	r3, [sp, #12]
 800c8da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8dc:	1bdb      	subs	r3, r3, r7
 800c8de:	4638      	mov	r0, r7
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	b004      	add	sp, #16
 800c8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e8:	1c59      	adds	r1, r3, #1
 800c8ea:	9103      	str	r1, [sp, #12]
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	e7f0      	b.n	800c8d2 <__cvt+0xa6>

0800c8f0 <__exponent>:
 800c8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2900      	cmp	r1, #0
 800c8f6:	bfb8      	it	lt
 800c8f8:	4249      	neglt	r1, r1
 800c8fa:	f803 2b02 	strb.w	r2, [r3], #2
 800c8fe:	bfb4      	ite	lt
 800c900:	222d      	movlt	r2, #45	; 0x2d
 800c902:	222b      	movge	r2, #43	; 0x2b
 800c904:	2909      	cmp	r1, #9
 800c906:	7042      	strb	r2, [r0, #1]
 800c908:	dd2a      	ble.n	800c960 <__exponent+0x70>
 800c90a:	f10d 0407 	add.w	r4, sp, #7
 800c90e:	46a4      	mov	ip, r4
 800c910:	270a      	movs	r7, #10
 800c912:	46a6      	mov	lr, r4
 800c914:	460a      	mov	r2, r1
 800c916:	fb91 f6f7 	sdiv	r6, r1, r7
 800c91a:	fb07 1516 	mls	r5, r7, r6, r1
 800c91e:	3530      	adds	r5, #48	; 0x30
 800c920:	2a63      	cmp	r2, #99	; 0x63
 800c922:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c926:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c92a:	4631      	mov	r1, r6
 800c92c:	dcf1      	bgt.n	800c912 <__exponent+0x22>
 800c92e:	3130      	adds	r1, #48	; 0x30
 800c930:	f1ae 0502 	sub.w	r5, lr, #2
 800c934:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c938:	1c44      	adds	r4, r0, #1
 800c93a:	4629      	mov	r1, r5
 800c93c:	4561      	cmp	r1, ip
 800c93e:	d30a      	bcc.n	800c956 <__exponent+0x66>
 800c940:	f10d 0209 	add.w	r2, sp, #9
 800c944:	eba2 020e 	sub.w	r2, r2, lr
 800c948:	4565      	cmp	r5, ip
 800c94a:	bf88      	it	hi
 800c94c:	2200      	movhi	r2, #0
 800c94e:	4413      	add	r3, r2
 800c950:	1a18      	subs	r0, r3, r0
 800c952:	b003      	add	sp, #12
 800c954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c95a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c95e:	e7ed      	b.n	800c93c <__exponent+0x4c>
 800c960:	2330      	movs	r3, #48	; 0x30
 800c962:	3130      	adds	r1, #48	; 0x30
 800c964:	7083      	strb	r3, [r0, #2]
 800c966:	70c1      	strb	r1, [r0, #3]
 800c968:	1d03      	adds	r3, r0, #4
 800c96a:	e7f1      	b.n	800c950 <__exponent+0x60>

0800c96c <_printf_float>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	ed2d 8b02 	vpush	{d8}
 800c974:	b08d      	sub	sp, #52	; 0x34
 800c976:	460c      	mov	r4, r1
 800c978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c97c:	4616      	mov	r6, r2
 800c97e:	461f      	mov	r7, r3
 800c980:	4605      	mov	r5, r0
 800c982:	f003 f83f 	bl	800fa04 <_localeconv_r>
 800c986:	f8d0 a000 	ldr.w	sl, [r0]
 800c98a:	4650      	mov	r0, sl
 800c98c:	f7f3 fc80 	bl	8000290 <strlen>
 800c990:	2300      	movs	r3, #0
 800c992:	930a      	str	r3, [sp, #40]	; 0x28
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	9305      	str	r3, [sp, #20]
 800c998:	f8d8 3000 	ldr.w	r3, [r8]
 800c99c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c9a0:	3307      	adds	r3, #7
 800c9a2:	f023 0307 	bic.w	r3, r3, #7
 800c9a6:	f103 0208 	add.w	r2, r3, #8
 800c9aa:	f8c8 2000 	str.w	r2, [r8]
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c9b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c9ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9be:	9307      	str	r3, [sp, #28]
 800c9c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c9c4:	ee08 0a10 	vmov	s16, r0
 800c9c8:	4b9f      	ldr	r3, [pc, #636]	; (800cc48 <_printf_float+0x2dc>)
 800c9ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9d2:	f7f4 f8bb 	bl	8000b4c <__aeabi_dcmpun>
 800c9d6:	bb88      	cbnz	r0, 800ca3c <_printf_float+0xd0>
 800c9d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9dc:	4b9a      	ldr	r3, [pc, #616]	; (800cc48 <_printf_float+0x2dc>)
 800c9de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9e2:	f7f4 f895 	bl	8000b10 <__aeabi_dcmple>
 800c9e6:	bb48      	cbnz	r0, 800ca3c <_printf_float+0xd0>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	f7f4 f884 	bl	8000afc <__aeabi_dcmplt>
 800c9f4:	b110      	cbz	r0, 800c9fc <_printf_float+0x90>
 800c9f6:	232d      	movs	r3, #45	; 0x2d
 800c9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9fc:	4b93      	ldr	r3, [pc, #588]	; (800cc4c <_printf_float+0x2e0>)
 800c9fe:	4894      	ldr	r0, [pc, #592]	; (800cc50 <_printf_float+0x2e4>)
 800ca00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ca04:	bf94      	ite	ls
 800ca06:	4698      	movls	r8, r3
 800ca08:	4680      	movhi	r8, r0
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	6123      	str	r3, [r4, #16]
 800ca0e:	9b05      	ldr	r3, [sp, #20]
 800ca10:	f023 0204 	bic.w	r2, r3, #4
 800ca14:	6022      	str	r2, [r4, #0]
 800ca16:	f04f 0900 	mov.w	r9, #0
 800ca1a:	9700      	str	r7, [sp, #0]
 800ca1c:	4633      	mov	r3, r6
 800ca1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca20:	4621      	mov	r1, r4
 800ca22:	4628      	mov	r0, r5
 800ca24:	f000 f9d8 	bl	800cdd8 <_printf_common>
 800ca28:	3001      	adds	r0, #1
 800ca2a:	f040 8090 	bne.w	800cb4e <_printf_float+0x1e2>
 800ca2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca32:	b00d      	add	sp, #52	; 0x34
 800ca34:	ecbd 8b02 	vpop	{d8}
 800ca38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3c:	4642      	mov	r2, r8
 800ca3e:	464b      	mov	r3, r9
 800ca40:	4640      	mov	r0, r8
 800ca42:	4649      	mov	r1, r9
 800ca44:	f7f4 f882 	bl	8000b4c <__aeabi_dcmpun>
 800ca48:	b140      	cbz	r0, 800ca5c <_printf_float+0xf0>
 800ca4a:	464b      	mov	r3, r9
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	bfbc      	itt	lt
 800ca50:	232d      	movlt	r3, #45	; 0x2d
 800ca52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca56:	487f      	ldr	r0, [pc, #508]	; (800cc54 <_printf_float+0x2e8>)
 800ca58:	4b7f      	ldr	r3, [pc, #508]	; (800cc58 <_printf_float+0x2ec>)
 800ca5a:	e7d1      	b.n	800ca00 <_printf_float+0x94>
 800ca5c:	6863      	ldr	r3, [r4, #4]
 800ca5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ca62:	9206      	str	r2, [sp, #24]
 800ca64:	1c5a      	adds	r2, r3, #1
 800ca66:	d13f      	bne.n	800cae8 <_printf_float+0x17c>
 800ca68:	2306      	movs	r3, #6
 800ca6a:	6063      	str	r3, [r4, #4]
 800ca6c:	9b05      	ldr	r3, [sp, #20]
 800ca6e:	6861      	ldr	r1, [r4, #4]
 800ca70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ca74:	2300      	movs	r3, #0
 800ca76:	9303      	str	r3, [sp, #12]
 800ca78:	ab0a      	add	r3, sp, #40	; 0x28
 800ca7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ca7e:	ab09      	add	r3, sp, #36	; 0x24
 800ca80:	ec49 8b10 	vmov	d0, r8, r9
 800ca84:	9300      	str	r3, [sp, #0]
 800ca86:	6022      	str	r2, [r4, #0]
 800ca88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	f7ff fecd 	bl	800c82c <__cvt>
 800ca92:	9b06      	ldr	r3, [sp, #24]
 800ca94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca96:	2b47      	cmp	r3, #71	; 0x47
 800ca98:	4680      	mov	r8, r0
 800ca9a:	d108      	bne.n	800caae <_printf_float+0x142>
 800ca9c:	1cc8      	adds	r0, r1, #3
 800ca9e:	db02      	blt.n	800caa6 <_printf_float+0x13a>
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	4299      	cmp	r1, r3
 800caa4:	dd41      	ble.n	800cb2a <_printf_float+0x1be>
 800caa6:	f1ab 0b02 	sub.w	fp, fp, #2
 800caaa:	fa5f fb8b 	uxtb.w	fp, fp
 800caae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cab2:	d820      	bhi.n	800caf6 <_printf_float+0x18a>
 800cab4:	3901      	subs	r1, #1
 800cab6:	465a      	mov	r2, fp
 800cab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cabc:	9109      	str	r1, [sp, #36]	; 0x24
 800cabe:	f7ff ff17 	bl	800c8f0 <__exponent>
 800cac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cac4:	1813      	adds	r3, r2, r0
 800cac6:	2a01      	cmp	r2, #1
 800cac8:	4681      	mov	r9, r0
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	dc02      	bgt.n	800cad4 <_printf_float+0x168>
 800cace:	6822      	ldr	r2, [r4, #0]
 800cad0:	07d2      	lsls	r2, r2, #31
 800cad2:	d501      	bpl.n	800cad8 <_printf_float+0x16c>
 800cad4:	3301      	adds	r3, #1
 800cad6:	6123      	str	r3, [r4, #16]
 800cad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d09c      	beq.n	800ca1a <_printf_float+0xae>
 800cae0:	232d      	movs	r3, #45	; 0x2d
 800cae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cae6:	e798      	b.n	800ca1a <_printf_float+0xae>
 800cae8:	9a06      	ldr	r2, [sp, #24]
 800caea:	2a47      	cmp	r2, #71	; 0x47
 800caec:	d1be      	bne.n	800ca6c <_printf_float+0x100>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1bc      	bne.n	800ca6c <_printf_float+0x100>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e7b9      	b.n	800ca6a <_printf_float+0xfe>
 800caf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cafa:	d118      	bne.n	800cb2e <_printf_float+0x1c2>
 800cafc:	2900      	cmp	r1, #0
 800cafe:	6863      	ldr	r3, [r4, #4]
 800cb00:	dd0b      	ble.n	800cb1a <_printf_float+0x1ae>
 800cb02:	6121      	str	r1, [r4, #16]
 800cb04:	b913      	cbnz	r3, 800cb0c <_printf_float+0x1a0>
 800cb06:	6822      	ldr	r2, [r4, #0]
 800cb08:	07d0      	lsls	r0, r2, #31
 800cb0a:	d502      	bpl.n	800cb12 <_printf_float+0x1a6>
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	440b      	add	r3, r1
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	65a1      	str	r1, [r4, #88]	; 0x58
 800cb14:	f04f 0900 	mov.w	r9, #0
 800cb18:	e7de      	b.n	800cad8 <_printf_float+0x16c>
 800cb1a:	b913      	cbnz	r3, 800cb22 <_printf_float+0x1b6>
 800cb1c:	6822      	ldr	r2, [r4, #0]
 800cb1e:	07d2      	lsls	r2, r2, #31
 800cb20:	d501      	bpl.n	800cb26 <_printf_float+0x1ba>
 800cb22:	3302      	adds	r3, #2
 800cb24:	e7f4      	b.n	800cb10 <_printf_float+0x1a4>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e7f2      	b.n	800cb10 <_printf_float+0x1a4>
 800cb2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb30:	4299      	cmp	r1, r3
 800cb32:	db05      	blt.n	800cb40 <_printf_float+0x1d4>
 800cb34:	6823      	ldr	r3, [r4, #0]
 800cb36:	6121      	str	r1, [r4, #16]
 800cb38:	07d8      	lsls	r0, r3, #31
 800cb3a:	d5ea      	bpl.n	800cb12 <_printf_float+0x1a6>
 800cb3c:	1c4b      	adds	r3, r1, #1
 800cb3e:	e7e7      	b.n	800cb10 <_printf_float+0x1a4>
 800cb40:	2900      	cmp	r1, #0
 800cb42:	bfd4      	ite	le
 800cb44:	f1c1 0202 	rsble	r2, r1, #2
 800cb48:	2201      	movgt	r2, #1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	e7e0      	b.n	800cb10 <_printf_float+0x1a4>
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	055a      	lsls	r2, r3, #21
 800cb52:	d407      	bmi.n	800cb64 <_printf_float+0x1f8>
 800cb54:	6923      	ldr	r3, [r4, #16]
 800cb56:	4642      	mov	r2, r8
 800cb58:	4631      	mov	r1, r6
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	47b8      	blx	r7
 800cb5e:	3001      	adds	r0, #1
 800cb60:	d12c      	bne.n	800cbbc <_printf_float+0x250>
 800cb62:	e764      	b.n	800ca2e <_printf_float+0xc2>
 800cb64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb68:	f240 80e0 	bls.w	800cd2c <_printf_float+0x3c0>
 800cb6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb70:	2200      	movs	r2, #0
 800cb72:	2300      	movs	r3, #0
 800cb74:	f7f3 ffb8 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d034      	beq.n	800cbe6 <_printf_float+0x27a>
 800cb7c:	4a37      	ldr	r2, [pc, #220]	; (800cc5c <_printf_float+0x2f0>)
 800cb7e:	2301      	movs	r3, #1
 800cb80:	4631      	mov	r1, r6
 800cb82:	4628      	mov	r0, r5
 800cb84:	47b8      	blx	r7
 800cb86:	3001      	adds	r0, #1
 800cb88:	f43f af51 	beq.w	800ca2e <_printf_float+0xc2>
 800cb8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb90:	429a      	cmp	r2, r3
 800cb92:	db02      	blt.n	800cb9a <_printf_float+0x22e>
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	07d8      	lsls	r0, r3, #31
 800cb98:	d510      	bpl.n	800cbbc <_printf_float+0x250>
 800cb9a:	ee18 3a10 	vmov	r3, s16
 800cb9e:	4652      	mov	r2, sl
 800cba0:	4631      	mov	r1, r6
 800cba2:	4628      	mov	r0, r5
 800cba4:	47b8      	blx	r7
 800cba6:	3001      	adds	r0, #1
 800cba8:	f43f af41 	beq.w	800ca2e <_printf_float+0xc2>
 800cbac:	f04f 0800 	mov.w	r8, #0
 800cbb0:	f104 091a 	add.w	r9, r4, #26
 800cbb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	4543      	cmp	r3, r8
 800cbba:	dc09      	bgt.n	800cbd0 <_printf_float+0x264>
 800cbbc:	6823      	ldr	r3, [r4, #0]
 800cbbe:	079b      	lsls	r3, r3, #30
 800cbc0:	f100 8105 	bmi.w	800cdce <_printf_float+0x462>
 800cbc4:	68e0      	ldr	r0, [r4, #12]
 800cbc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbc8:	4298      	cmp	r0, r3
 800cbca:	bfb8      	it	lt
 800cbcc:	4618      	movlt	r0, r3
 800cbce:	e730      	b.n	800ca32 <_printf_float+0xc6>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	464a      	mov	r2, r9
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	47b8      	blx	r7
 800cbda:	3001      	adds	r0, #1
 800cbdc:	f43f af27 	beq.w	800ca2e <_printf_float+0xc2>
 800cbe0:	f108 0801 	add.w	r8, r8, #1
 800cbe4:	e7e6      	b.n	800cbb4 <_printf_float+0x248>
 800cbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	dc39      	bgt.n	800cc60 <_printf_float+0x2f4>
 800cbec:	4a1b      	ldr	r2, [pc, #108]	; (800cc5c <_printf_float+0x2f0>)
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4631      	mov	r1, r6
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	47b8      	blx	r7
 800cbf6:	3001      	adds	r0, #1
 800cbf8:	f43f af19 	beq.w	800ca2e <_printf_float+0xc2>
 800cbfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc00:	4313      	orrs	r3, r2
 800cc02:	d102      	bne.n	800cc0a <_printf_float+0x29e>
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	07d9      	lsls	r1, r3, #31
 800cc08:	d5d8      	bpl.n	800cbbc <_printf_float+0x250>
 800cc0a:	ee18 3a10 	vmov	r3, s16
 800cc0e:	4652      	mov	r2, sl
 800cc10:	4631      	mov	r1, r6
 800cc12:	4628      	mov	r0, r5
 800cc14:	47b8      	blx	r7
 800cc16:	3001      	adds	r0, #1
 800cc18:	f43f af09 	beq.w	800ca2e <_printf_float+0xc2>
 800cc1c:	f04f 0900 	mov.w	r9, #0
 800cc20:	f104 0a1a 	add.w	sl, r4, #26
 800cc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc26:	425b      	negs	r3, r3
 800cc28:	454b      	cmp	r3, r9
 800cc2a:	dc01      	bgt.n	800cc30 <_printf_float+0x2c4>
 800cc2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc2e:	e792      	b.n	800cb56 <_printf_float+0x1ea>
 800cc30:	2301      	movs	r3, #1
 800cc32:	4652      	mov	r2, sl
 800cc34:	4631      	mov	r1, r6
 800cc36:	4628      	mov	r0, r5
 800cc38:	47b8      	blx	r7
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	f43f aef7 	beq.w	800ca2e <_printf_float+0xc2>
 800cc40:	f109 0901 	add.w	r9, r9, #1
 800cc44:	e7ee      	b.n	800cc24 <_printf_float+0x2b8>
 800cc46:	bf00      	nop
 800cc48:	7fefffff 	.word	0x7fefffff
 800cc4c:	08010a55 	.word	0x08010a55
 800cc50:	08010a59 	.word	0x08010a59
 800cc54:	08010a61 	.word	0x08010a61
 800cc58:	08010a5d 	.word	0x08010a5d
 800cc5c:	08010a65 	.word	0x08010a65
 800cc60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc64:	429a      	cmp	r2, r3
 800cc66:	bfa8      	it	ge
 800cc68:	461a      	movge	r2, r3
 800cc6a:	2a00      	cmp	r2, #0
 800cc6c:	4691      	mov	r9, r2
 800cc6e:	dc37      	bgt.n	800cce0 <_printf_float+0x374>
 800cc70:	f04f 0b00 	mov.w	fp, #0
 800cc74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc78:	f104 021a 	add.w	r2, r4, #26
 800cc7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc7e:	9305      	str	r3, [sp, #20]
 800cc80:	eba3 0309 	sub.w	r3, r3, r9
 800cc84:	455b      	cmp	r3, fp
 800cc86:	dc33      	bgt.n	800ccf0 <_printf_float+0x384>
 800cc88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	db3b      	blt.n	800cd08 <_printf_float+0x39c>
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	07da      	lsls	r2, r3, #31
 800cc94:	d438      	bmi.n	800cd08 <_printf_float+0x39c>
 800cc96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc98:	9b05      	ldr	r3, [sp, #20]
 800cc9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	eba2 0901 	sub.w	r9, r2, r1
 800cca2:	4599      	cmp	r9, r3
 800cca4:	bfa8      	it	ge
 800cca6:	4699      	movge	r9, r3
 800cca8:	f1b9 0f00 	cmp.w	r9, #0
 800ccac:	dc35      	bgt.n	800cd1a <_printf_float+0x3ae>
 800ccae:	f04f 0800 	mov.w	r8, #0
 800ccb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ccb6:	f104 0a1a 	add.w	sl, r4, #26
 800ccba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccbe:	1a9b      	subs	r3, r3, r2
 800ccc0:	eba3 0309 	sub.w	r3, r3, r9
 800ccc4:	4543      	cmp	r3, r8
 800ccc6:	f77f af79 	ble.w	800cbbc <_printf_float+0x250>
 800ccca:	2301      	movs	r3, #1
 800cccc:	4652      	mov	r2, sl
 800ccce:	4631      	mov	r1, r6
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	47b8      	blx	r7
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	f43f aeaa 	beq.w	800ca2e <_printf_float+0xc2>
 800ccda:	f108 0801 	add.w	r8, r8, #1
 800ccde:	e7ec      	b.n	800ccba <_printf_float+0x34e>
 800cce0:	4613      	mov	r3, r2
 800cce2:	4631      	mov	r1, r6
 800cce4:	4642      	mov	r2, r8
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b8      	blx	r7
 800ccea:	3001      	adds	r0, #1
 800ccec:	d1c0      	bne.n	800cc70 <_printf_float+0x304>
 800ccee:	e69e      	b.n	800ca2e <_printf_float+0xc2>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	9205      	str	r2, [sp, #20]
 800ccf8:	47b8      	blx	r7
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	f43f ae97 	beq.w	800ca2e <_printf_float+0xc2>
 800cd00:	9a05      	ldr	r2, [sp, #20]
 800cd02:	f10b 0b01 	add.w	fp, fp, #1
 800cd06:	e7b9      	b.n	800cc7c <_printf_float+0x310>
 800cd08:	ee18 3a10 	vmov	r3, s16
 800cd0c:	4652      	mov	r2, sl
 800cd0e:	4631      	mov	r1, r6
 800cd10:	4628      	mov	r0, r5
 800cd12:	47b8      	blx	r7
 800cd14:	3001      	adds	r0, #1
 800cd16:	d1be      	bne.n	800cc96 <_printf_float+0x32a>
 800cd18:	e689      	b.n	800ca2e <_printf_float+0xc2>
 800cd1a:	9a05      	ldr	r2, [sp, #20]
 800cd1c:	464b      	mov	r3, r9
 800cd1e:	4442      	add	r2, r8
 800cd20:	4631      	mov	r1, r6
 800cd22:	4628      	mov	r0, r5
 800cd24:	47b8      	blx	r7
 800cd26:	3001      	adds	r0, #1
 800cd28:	d1c1      	bne.n	800ccae <_printf_float+0x342>
 800cd2a:	e680      	b.n	800ca2e <_printf_float+0xc2>
 800cd2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd2e:	2a01      	cmp	r2, #1
 800cd30:	dc01      	bgt.n	800cd36 <_printf_float+0x3ca>
 800cd32:	07db      	lsls	r3, r3, #31
 800cd34:	d538      	bpl.n	800cda8 <_printf_float+0x43c>
 800cd36:	2301      	movs	r3, #1
 800cd38:	4642      	mov	r2, r8
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	47b8      	blx	r7
 800cd40:	3001      	adds	r0, #1
 800cd42:	f43f ae74 	beq.w	800ca2e <_printf_float+0xc2>
 800cd46:	ee18 3a10 	vmov	r3, s16
 800cd4a:	4652      	mov	r2, sl
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	f43f ae6b 	beq.w	800ca2e <_printf_float+0xc2>
 800cd58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	2300      	movs	r3, #0
 800cd60:	f7f3 fec2 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd64:	b9d8      	cbnz	r0, 800cd9e <_printf_float+0x432>
 800cd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd68:	f108 0201 	add.w	r2, r8, #1
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	4631      	mov	r1, r6
 800cd70:	4628      	mov	r0, r5
 800cd72:	47b8      	blx	r7
 800cd74:	3001      	adds	r0, #1
 800cd76:	d10e      	bne.n	800cd96 <_printf_float+0x42a>
 800cd78:	e659      	b.n	800ca2e <_printf_float+0xc2>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	4652      	mov	r2, sl
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4628      	mov	r0, r5
 800cd82:	47b8      	blx	r7
 800cd84:	3001      	adds	r0, #1
 800cd86:	f43f ae52 	beq.w	800ca2e <_printf_float+0xc2>
 800cd8a:	f108 0801 	add.w	r8, r8, #1
 800cd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd90:	3b01      	subs	r3, #1
 800cd92:	4543      	cmp	r3, r8
 800cd94:	dcf1      	bgt.n	800cd7a <_printf_float+0x40e>
 800cd96:	464b      	mov	r3, r9
 800cd98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd9c:	e6dc      	b.n	800cb58 <_printf_float+0x1ec>
 800cd9e:	f04f 0800 	mov.w	r8, #0
 800cda2:	f104 0a1a 	add.w	sl, r4, #26
 800cda6:	e7f2      	b.n	800cd8e <_printf_float+0x422>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	4642      	mov	r2, r8
 800cdac:	e7df      	b.n	800cd6e <_printf_float+0x402>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	464a      	mov	r2, r9
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	47b8      	blx	r7
 800cdb8:	3001      	adds	r0, #1
 800cdba:	f43f ae38 	beq.w	800ca2e <_printf_float+0xc2>
 800cdbe:	f108 0801 	add.w	r8, r8, #1
 800cdc2:	68e3      	ldr	r3, [r4, #12]
 800cdc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdc6:	1a5b      	subs	r3, r3, r1
 800cdc8:	4543      	cmp	r3, r8
 800cdca:	dcf0      	bgt.n	800cdae <_printf_float+0x442>
 800cdcc:	e6fa      	b.n	800cbc4 <_printf_float+0x258>
 800cdce:	f04f 0800 	mov.w	r8, #0
 800cdd2:	f104 0919 	add.w	r9, r4, #25
 800cdd6:	e7f4      	b.n	800cdc2 <_printf_float+0x456>

0800cdd8 <_printf_common>:
 800cdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cddc:	4616      	mov	r6, r2
 800cdde:	4699      	mov	r9, r3
 800cde0:	688a      	ldr	r2, [r1, #8]
 800cde2:	690b      	ldr	r3, [r1, #16]
 800cde4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cde8:	4293      	cmp	r3, r2
 800cdea:	bfb8      	it	lt
 800cdec:	4613      	movlt	r3, r2
 800cdee:	6033      	str	r3, [r6, #0]
 800cdf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdf4:	4607      	mov	r7, r0
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	b10a      	cbz	r2, 800cdfe <_printf_common+0x26>
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	6033      	str	r3, [r6, #0]
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	0699      	lsls	r1, r3, #26
 800ce02:	bf42      	ittt	mi
 800ce04:	6833      	ldrmi	r3, [r6, #0]
 800ce06:	3302      	addmi	r3, #2
 800ce08:	6033      	strmi	r3, [r6, #0]
 800ce0a:	6825      	ldr	r5, [r4, #0]
 800ce0c:	f015 0506 	ands.w	r5, r5, #6
 800ce10:	d106      	bne.n	800ce20 <_printf_common+0x48>
 800ce12:	f104 0a19 	add.w	sl, r4, #25
 800ce16:	68e3      	ldr	r3, [r4, #12]
 800ce18:	6832      	ldr	r2, [r6, #0]
 800ce1a:	1a9b      	subs	r3, r3, r2
 800ce1c:	42ab      	cmp	r3, r5
 800ce1e:	dc26      	bgt.n	800ce6e <_printf_common+0x96>
 800ce20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce24:	1e13      	subs	r3, r2, #0
 800ce26:	6822      	ldr	r2, [r4, #0]
 800ce28:	bf18      	it	ne
 800ce2a:	2301      	movne	r3, #1
 800ce2c:	0692      	lsls	r2, r2, #26
 800ce2e:	d42b      	bmi.n	800ce88 <_printf_common+0xb0>
 800ce30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce34:	4649      	mov	r1, r9
 800ce36:	4638      	mov	r0, r7
 800ce38:	47c0      	blx	r8
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	d01e      	beq.n	800ce7c <_printf_common+0xa4>
 800ce3e:	6823      	ldr	r3, [r4, #0]
 800ce40:	68e5      	ldr	r5, [r4, #12]
 800ce42:	6832      	ldr	r2, [r6, #0]
 800ce44:	f003 0306 	and.w	r3, r3, #6
 800ce48:	2b04      	cmp	r3, #4
 800ce4a:	bf08      	it	eq
 800ce4c:	1aad      	subeq	r5, r5, r2
 800ce4e:	68a3      	ldr	r3, [r4, #8]
 800ce50:	6922      	ldr	r2, [r4, #16]
 800ce52:	bf0c      	ite	eq
 800ce54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce58:	2500      	movne	r5, #0
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	bfc4      	itt	gt
 800ce5e:	1a9b      	subgt	r3, r3, r2
 800ce60:	18ed      	addgt	r5, r5, r3
 800ce62:	2600      	movs	r6, #0
 800ce64:	341a      	adds	r4, #26
 800ce66:	42b5      	cmp	r5, r6
 800ce68:	d11a      	bne.n	800cea0 <_printf_common+0xc8>
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	e008      	b.n	800ce80 <_printf_common+0xa8>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	4652      	mov	r2, sl
 800ce72:	4649      	mov	r1, r9
 800ce74:	4638      	mov	r0, r7
 800ce76:	47c0      	blx	r8
 800ce78:	3001      	adds	r0, #1
 800ce7a:	d103      	bne.n	800ce84 <_printf_common+0xac>
 800ce7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce84:	3501      	adds	r5, #1
 800ce86:	e7c6      	b.n	800ce16 <_printf_common+0x3e>
 800ce88:	18e1      	adds	r1, r4, r3
 800ce8a:	1c5a      	adds	r2, r3, #1
 800ce8c:	2030      	movs	r0, #48	; 0x30
 800ce8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce92:	4422      	add	r2, r4
 800ce94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce9c:	3302      	adds	r3, #2
 800ce9e:	e7c7      	b.n	800ce30 <_printf_common+0x58>
 800cea0:	2301      	movs	r3, #1
 800cea2:	4622      	mov	r2, r4
 800cea4:	4649      	mov	r1, r9
 800cea6:	4638      	mov	r0, r7
 800cea8:	47c0      	blx	r8
 800ceaa:	3001      	adds	r0, #1
 800ceac:	d0e6      	beq.n	800ce7c <_printf_common+0xa4>
 800ceae:	3601      	adds	r6, #1
 800ceb0:	e7d9      	b.n	800ce66 <_printf_common+0x8e>
	...

0800ceb4 <_printf_i>:
 800ceb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb8:	460c      	mov	r4, r1
 800ceba:	4691      	mov	r9, r2
 800cebc:	7e27      	ldrb	r7, [r4, #24]
 800cebe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cec0:	2f78      	cmp	r7, #120	; 0x78
 800cec2:	4680      	mov	r8, r0
 800cec4:	469a      	mov	sl, r3
 800cec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ceca:	d807      	bhi.n	800cedc <_printf_i+0x28>
 800cecc:	2f62      	cmp	r7, #98	; 0x62
 800cece:	d80a      	bhi.n	800cee6 <_printf_i+0x32>
 800ced0:	2f00      	cmp	r7, #0
 800ced2:	f000 80d8 	beq.w	800d086 <_printf_i+0x1d2>
 800ced6:	2f58      	cmp	r7, #88	; 0x58
 800ced8:	f000 80a3 	beq.w	800d022 <_printf_i+0x16e>
 800cedc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cee4:	e03a      	b.n	800cf5c <_printf_i+0xa8>
 800cee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ceea:	2b15      	cmp	r3, #21
 800ceec:	d8f6      	bhi.n	800cedc <_printf_i+0x28>
 800ceee:	a001      	add	r0, pc, #4	; (adr r0, 800cef4 <_printf_i+0x40>)
 800cef0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cef4:	0800cf4d 	.word	0x0800cf4d
 800cef8:	0800cf61 	.word	0x0800cf61
 800cefc:	0800cedd 	.word	0x0800cedd
 800cf00:	0800cedd 	.word	0x0800cedd
 800cf04:	0800cedd 	.word	0x0800cedd
 800cf08:	0800cedd 	.word	0x0800cedd
 800cf0c:	0800cf61 	.word	0x0800cf61
 800cf10:	0800cedd 	.word	0x0800cedd
 800cf14:	0800cedd 	.word	0x0800cedd
 800cf18:	0800cedd 	.word	0x0800cedd
 800cf1c:	0800cedd 	.word	0x0800cedd
 800cf20:	0800d06d 	.word	0x0800d06d
 800cf24:	0800cf91 	.word	0x0800cf91
 800cf28:	0800d04f 	.word	0x0800d04f
 800cf2c:	0800cedd 	.word	0x0800cedd
 800cf30:	0800cedd 	.word	0x0800cedd
 800cf34:	0800d08f 	.word	0x0800d08f
 800cf38:	0800cedd 	.word	0x0800cedd
 800cf3c:	0800cf91 	.word	0x0800cf91
 800cf40:	0800cedd 	.word	0x0800cedd
 800cf44:	0800cedd 	.word	0x0800cedd
 800cf48:	0800d057 	.word	0x0800d057
 800cf4c:	680b      	ldr	r3, [r1, #0]
 800cf4e:	1d1a      	adds	r2, r3, #4
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	600a      	str	r2, [r1, #0]
 800cf54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e0a3      	b.n	800d0a8 <_printf_i+0x1f4>
 800cf60:	6825      	ldr	r5, [r4, #0]
 800cf62:	6808      	ldr	r0, [r1, #0]
 800cf64:	062e      	lsls	r6, r5, #24
 800cf66:	f100 0304 	add.w	r3, r0, #4
 800cf6a:	d50a      	bpl.n	800cf82 <_printf_i+0xce>
 800cf6c:	6805      	ldr	r5, [r0, #0]
 800cf6e:	600b      	str	r3, [r1, #0]
 800cf70:	2d00      	cmp	r5, #0
 800cf72:	da03      	bge.n	800cf7c <_printf_i+0xc8>
 800cf74:	232d      	movs	r3, #45	; 0x2d
 800cf76:	426d      	negs	r5, r5
 800cf78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf7c:	485e      	ldr	r0, [pc, #376]	; (800d0f8 <_printf_i+0x244>)
 800cf7e:	230a      	movs	r3, #10
 800cf80:	e019      	b.n	800cfb6 <_printf_i+0x102>
 800cf82:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cf86:	6805      	ldr	r5, [r0, #0]
 800cf88:	600b      	str	r3, [r1, #0]
 800cf8a:	bf18      	it	ne
 800cf8c:	b22d      	sxthne	r5, r5
 800cf8e:	e7ef      	b.n	800cf70 <_printf_i+0xbc>
 800cf90:	680b      	ldr	r3, [r1, #0]
 800cf92:	6825      	ldr	r5, [r4, #0]
 800cf94:	1d18      	adds	r0, r3, #4
 800cf96:	6008      	str	r0, [r1, #0]
 800cf98:	0628      	lsls	r0, r5, #24
 800cf9a:	d501      	bpl.n	800cfa0 <_printf_i+0xec>
 800cf9c:	681d      	ldr	r5, [r3, #0]
 800cf9e:	e002      	b.n	800cfa6 <_printf_i+0xf2>
 800cfa0:	0669      	lsls	r1, r5, #25
 800cfa2:	d5fb      	bpl.n	800cf9c <_printf_i+0xe8>
 800cfa4:	881d      	ldrh	r5, [r3, #0]
 800cfa6:	4854      	ldr	r0, [pc, #336]	; (800d0f8 <_printf_i+0x244>)
 800cfa8:	2f6f      	cmp	r7, #111	; 0x6f
 800cfaa:	bf0c      	ite	eq
 800cfac:	2308      	moveq	r3, #8
 800cfae:	230a      	movne	r3, #10
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfb6:	6866      	ldr	r6, [r4, #4]
 800cfb8:	60a6      	str	r6, [r4, #8]
 800cfba:	2e00      	cmp	r6, #0
 800cfbc:	bfa2      	ittt	ge
 800cfbe:	6821      	ldrge	r1, [r4, #0]
 800cfc0:	f021 0104 	bicge.w	r1, r1, #4
 800cfc4:	6021      	strge	r1, [r4, #0]
 800cfc6:	b90d      	cbnz	r5, 800cfcc <_printf_i+0x118>
 800cfc8:	2e00      	cmp	r6, #0
 800cfca:	d04d      	beq.n	800d068 <_printf_i+0x1b4>
 800cfcc:	4616      	mov	r6, r2
 800cfce:	fbb5 f1f3 	udiv	r1, r5, r3
 800cfd2:	fb03 5711 	mls	r7, r3, r1, r5
 800cfd6:	5dc7      	ldrb	r7, [r0, r7]
 800cfd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cfdc:	462f      	mov	r7, r5
 800cfde:	42bb      	cmp	r3, r7
 800cfe0:	460d      	mov	r5, r1
 800cfe2:	d9f4      	bls.n	800cfce <_printf_i+0x11a>
 800cfe4:	2b08      	cmp	r3, #8
 800cfe6:	d10b      	bne.n	800d000 <_printf_i+0x14c>
 800cfe8:	6823      	ldr	r3, [r4, #0]
 800cfea:	07df      	lsls	r7, r3, #31
 800cfec:	d508      	bpl.n	800d000 <_printf_i+0x14c>
 800cfee:	6923      	ldr	r3, [r4, #16]
 800cff0:	6861      	ldr	r1, [r4, #4]
 800cff2:	4299      	cmp	r1, r3
 800cff4:	bfde      	ittt	le
 800cff6:	2330      	movle	r3, #48	; 0x30
 800cff8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cffc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d000:	1b92      	subs	r2, r2, r6
 800d002:	6122      	str	r2, [r4, #16]
 800d004:	f8cd a000 	str.w	sl, [sp]
 800d008:	464b      	mov	r3, r9
 800d00a:	aa03      	add	r2, sp, #12
 800d00c:	4621      	mov	r1, r4
 800d00e:	4640      	mov	r0, r8
 800d010:	f7ff fee2 	bl	800cdd8 <_printf_common>
 800d014:	3001      	adds	r0, #1
 800d016:	d14c      	bne.n	800d0b2 <_printf_i+0x1fe>
 800d018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d01c:	b004      	add	sp, #16
 800d01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d022:	4835      	ldr	r0, [pc, #212]	; (800d0f8 <_printf_i+0x244>)
 800d024:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	680e      	ldr	r6, [r1, #0]
 800d02c:	061f      	lsls	r7, r3, #24
 800d02e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d032:	600e      	str	r6, [r1, #0]
 800d034:	d514      	bpl.n	800d060 <_printf_i+0x1ac>
 800d036:	07d9      	lsls	r1, r3, #31
 800d038:	bf44      	itt	mi
 800d03a:	f043 0320 	orrmi.w	r3, r3, #32
 800d03e:	6023      	strmi	r3, [r4, #0]
 800d040:	b91d      	cbnz	r5, 800d04a <_printf_i+0x196>
 800d042:	6823      	ldr	r3, [r4, #0]
 800d044:	f023 0320 	bic.w	r3, r3, #32
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	2310      	movs	r3, #16
 800d04c:	e7b0      	b.n	800cfb0 <_printf_i+0xfc>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	f043 0320 	orr.w	r3, r3, #32
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	2378      	movs	r3, #120	; 0x78
 800d058:	4828      	ldr	r0, [pc, #160]	; (800d0fc <_printf_i+0x248>)
 800d05a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d05e:	e7e3      	b.n	800d028 <_printf_i+0x174>
 800d060:	065e      	lsls	r6, r3, #25
 800d062:	bf48      	it	mi
 800d064:	b2ad      	uxthmi	r5, r5
 800d066:	e7e6      	b.n	800d036 <_printf_i+0x182>
 800d068:	4616      	mov	r6, r2
 800d06a:	e7bb      	b.n	800cfe4 <_printf_i+0x130>
 800d06c:	680b      	ldr	r3, [r1, #0]
 800d06e:	6826      	ldr	r6, [r4, #0]
 800d070:	6960      	ldr	r0, [r4, #20]
 800d072:	1d1d      	adds	r5, r3, #4
 800d074:	600d      	str	r5, [r1, #0]
 800d076:	0635      	lsls	r5, r6, #24
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	d501      	bpl.n	800d080 <_printf_i+0x1cc>
 800d07c:	6018      	str	r0, [r3, #0]
 800d07e:	e002      	b.n	800d086 <_printf_i+0x1d2>
 800d080:	0671      	lsls	r1, r6, #25
 800d082:	d5fb      	bpl.n	800d07c <_printf_i+0x1c8>
 800d084:	8018      	strh	r0, [r3, #0]
 800d086:	2300      	movs	r3, #0
 800d088:	6123      	str	r3, [r4, #16]
 800d08a:	4616      	mov	r6, r2
 800d08c:	e7ba      	b.n	800d004 <_printf_i+0x150>
 800d08e:	680b      	ldr	r3, [r1, #0]
 800d090:	1d1a      	adds	r2, r3, #4
 800d092:	600a      	str	r2, [r1, #0]
 800d094:	681e      	ldr	r6, [r3, #0]
 800d096:	6862      	ldr	r2, [r4, #4]
 800d098:	2100      	movs	r1, #0
 800d09a:	4630      	mov	r0, r6
 800d09c:	f7f3 f8a8 	bl	80001f0 <memchr>
 800d0a0:	b108      	cbz	r0, 800d0a6 <_printf_i+0x1f2>
 800d0a2:	1b80      	subs	r0, r0, r6
 800d0a4:	6060      	str	r0, [r4, #4]
 800d0a6:	6863      	ldr	r3, [r4, #4]
 800d0a8:	6123      	str	r3, [r4, #16]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0b0:	e7a8      	b.n	800d004 <_printf_i+0x150>
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	4632      	mov	r2, r6
 800d0b6:	4649      	mov	r1, r9
 800d0b8:	4640      	mov	r0, r8
 800d0ba:	47d0      	blx	sl
 800d0bc:	3001      	adds	r0, #1
 800d0be:	d0ab      	beq.n	800d018 <_printf_i+0x164>
 800d0c0:	6823      	ldr	r3, [r4, #0]
 800d0c2:	079b      	lsls	r3, r3, #30
 800d0c4:	d413      	bmi.n	800d0ee <_printf_i+0x23a>
 800d0c6:	68e0      	ldr	r0, [r4, #12]
 800d0c8:	9b03      	ldr	r3, [sp, #12]
 800d0ca:	4298      	cmp	r0, r3
 800d0cc:	bfb8      	it	lt
 800d0ce:	4618      	movlt	r0, r3
 800d0d0:	e7a4      	b.n	800d01c <_printf_i+0x168>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	4632      	mov	r2, r6
 800d0d6:	4649      	mov	r1, r9
 800d0d8:	4640      	mov	r0, r8
 800d0da:	47d0      	blx	sl
 800d0dc:	3001      	adds	r0, #1
 800d0de:	d09b      	beq.n	800d018 <_printf_i+0x164>
 800d0e0:	3501      	adds	r5, #1
 800d0e2:	68e3      	ldr	r3, [r4, #12]
 800d0e4:	9903      	ldr	r1, [sp, #12]
 800d0e6:	1a5b      	subs	r3, r3, r1
 800d0e8:	42ab      	cmp	r3, r5
 800d0ea:	dcf2      	bgt.n	800d0d2 <_printf_i+0x21e>
 800d0ec:	e7eb      	b.n	800d0c6 <_printf_i+0x212>
 800d0ee:	2500      	movs	r5, #0
 800d0f0:	f104 0619 	add.w	r6, r4, #25
 800d0f4:	e7f5      	b.n	800d0e2 <_printf_i+0x22e>
 800d0f6:	bf00      	nop
 800d0f8:	08010a67 	.word	0x08010a67
 800d0fc:	08010a78 	.word	0x08010a78

0800d100 <_scanf_float>:
 800d100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d104:	b087      	sub	sp, #28
 800d106:	4617      	mov	r7, r2
 800d108:	9303      	str	r3, [sp, #12]
 800d10a:	688b      	ldr	r3, [r1, #8]
 800d10c:	1e5a      	subs	r2, r3, #1
 800d10e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d112:	bf83      	ittte	hi
 800d114:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d118:	195b      	addhi	r3, r3, r5
 800d11a:	9302      	strhi	r3, [sp, #8]
 800d11c:	2300      	movls	r3, #0
 800d11e:	bf86      	itte	hi
 800d120:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d124:	608b      	strhi	r3, [r1, #8]
 800d126:	9302      	strls	r3, [sp, #8]
 800d128:	680b      	ldr	r3, [r1, #0]
 800d12a:	468b      	mov	fp, r1
 800d12c:	2500      	movs	r5, #0
 800d12e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d132:	f84b 3b1c 	str.w	r3, [fp], #28
 800d136:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d13a:	4680      	mov	r8, r0
 800d13c:	460c      	mov	r4, r1
 800d13e:	465e      	mov	r6, fp
 800d140:	46aa      	mov	sl, r5
 800d142:	46a9      	mov	r9, r5
 800d144:	9501      	str	r5, [sp, #4]
 800d146:	68a2      	ldr	r2, [r4, #8]
 800d148:	b152      	cbz	r2, 800d160 <_scanf_float+0x60>
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b4e      	cmp	r3, #78	; 0x4e
 800d150:	d864      	bhi.n	800d21c <_scanf_float+0x11c>
 800d152:	2b40      	cmp	r3, #64	; 0x40
 800d154:	d83c      	bhi.n	800d1d0 <_scanf_float+0xd0>
 800d156:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d15a:	b2c8      	uxtb	r0, r1
 800d15c:	280e      	cmp	r0, #14
 800d15e:	d93a      	bls.n	800d1d6 <_scanf_float+0xd6>
 800d160:	f1b9 0f00 	cmp.w	r9, #0
 800d164:	d003      	beq.n	800d16e <_scanf_float+0x6e>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d172:	f1ba 0f01 	cmp.w	sl, #1
 800d176:	f200 8113 	bhi.w	800d3a0 <_scanf_float+0x2a0>
 800d17a:	455e      	cmp	r6, fp
 800d17c:	f200 8105 	bhi.w	800d38a <_scanf_float+0x28a>
 800d180:	2501      	movs	r5, #1
 800d182:	4628      	mov	r0, r5
 800d184:	b007      	add	sp, #28
 800d186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d18e:	2a0d      	cmp	r2, #13
 800d190:	d8e6      	bhi.n	800d160 <_scanf_float+0x60>
 800d192:	a101      	add	r1, pc, #4	; (adr r1, 800d198 <_scanf_float+0x98>)
 800d194:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d198:	0800d2d7 	.word	0x0800d2d7
 800d19c:	0800d161 	.word	0x0800d161
 800d1a0:	0800d161 	.word	0x0800d161
 800d1a4:	0800d161 	.word	0x0800d161
 800d1a8:	0800d337 	.word	0x0800d337
 800d1ac:	0800d30f 	.word	0x0800d30f
 800d1b0:	0800d161 	.word	0x0800d161
 800d1b4:	0800d161 	.word	0x0800d161
 800d1b8:	0800d2e5 	.word	0x0800d2e5
 800d1bc:	0800d161 	.word	0x0800d161
 800d1c0:	0800d161 	.word	0x0800d161
 800d1c4:	0800d161 	.word	0x0800d161
 800d1c8:	0800d161 	.word	0x0800d161
 800d1cc:	0800d29d 	.word	0x0800d29d
 800d1d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d1d4:	e7db      	b.n	800d18e <_scanf_float+0x8e>
 800d1d6:	290e      	cmp	r1, #14
 800d1d8:	d8c2      	bhi.n	800d160 <_scanf_float+0x60>
 800d1da:	a001      	add	r0, pc, #4	; (adr r0, 800d1e0 <_scanf_float+0xe0>)
 800d1dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d1e0:	0800d28f 	.word	0x0800d28f
 800d1e4:	0800d161 	.word	0x0800d161
 800d1e8:	0800d28f 	.word	0x0800d28f
 800d1ec:	0800d323 	.word	0x0800d323
 800d1f0:	0800d161 	.word	0x0800d161
 800d1f4:	0800d23d 	.word	0x0800d23d
 800d1f8:	0800d279 	.word	0x0800d279
 800d1fc:	0800d279 	.word	0x0800d279
 800d200:	0800d279 	.word	0x0800d279
 800d204:	0800d279 	.word	0x0800d279
 800d208:	0800d279 	.word	0x0800d279
 800d20c:	0800d279 	.word	0x0800d279
 800d210:	0800d279 	.word	0x0800d279
 800d214:	0800d279 	.word	0x0800d279
 800d218:	0800d279 	.word	0x0800d279
 800d21c:	2b6e      	cmp	r3, #110	; 0x6e
 800d21e:	d809      	bhi.n	800d234 <_scanf_float+0x134>
 800d220:	2b60      	cmp	r3, #96	; 0x60
 800d222:	d8b2      	bhi.n	800d18a <_scanf_float+0x8a>
 800d224:	2b54      	cmp	r3, #84	; 0x54
 800d226:	d077      	beq.n	800d318 <_scanf_float+0x218>
 800d228:	2b59      	cmp	r3, #89	; 0x59
 800d22a:	d199      	bne.n	800d160 <_scanf_float+0x60>
 800d22c:	2d07      	cmp	r5, #7
 800d22e:	d197      	bne.n	800d160 <_scanf_float+0x60>
 800d230:	2508      	movs	r5, #8
 800d232:	e029      	b.n	800d288 <_scanf_float+0x188>
 800d234:	2b74      	cmp	r3, #116	; 0x74
 800d236:	d06f      	beq.n	800d318 <_scanf_float+0x218>
 800d238:	2b79      	cmp	r3, #121	; 0x79
 800d23a:	e7f6      	b.n	800d22a <_scanf_float+0x12a>
 800d23c:	6821      	ldr	r1, [r4, #0]
 800d23e:	05c8      	lsls	r0, r1, #23
 800d240:	d51a      	bpl.n	800d278 <_scanf_float+0x178>
 800d242:	9b02      	ldr	r3, [sp, #8]
 800d244:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d248:	6021      	str	r1, [r4, #0]
 800d24a:	f109 0901 	add.w	r9, r9, #1
 800d24e:	b11b      	cbz	r3, 800d258 <_scanf_float+0x158>
 800d250:	3b01      	subs	r3, #1
 800d252:	3201      	adds	r2, #1
 800d254:	9302      	str	r3, [sp, #8]
 800d256:	60a2      	str	r2, [r4, #8]
 800d258:	68a3      	ldr	r3, [r4, #8]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	60a3      	str	r3, [r4, #8]
 800d25e:	6923      	ldr	r3, [r4, #16]
 800d260:	3301      	adds	r3, #1
 800d262:	6123      	str	r3, [r4, #16]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3b01      	subs	r3, #1
 800d268:	2b00      	cmp	r3, #0
 800d26a:	607b      	str	r3, [r7, #4]
 800d26c:	f340 8084 	ble.w	800d378 <_scanf_float+0x278>
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	3301      	adds	r3, #1
 800d274:	603b      	str	r3, [r7, #0]
 800d276:	e766      	b.n	800d146 <_scanf_float+0x46>
 800d278:	eb1a 0f05 	cmn.w	sl, r5
 800d27c:	f47f af70 	bne.w	800d160 <_scanf_float+0x60>
 800d280:	6822      	ldr	r2, [r4, #0]
 800d282:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d286:	6022      	str	r2, [r4, #0]
 800d288:	f806 3b01 	strb.w	r3, [r6], #1
 800d28c:	e7e4      	b.n	800d258 <_scanf_float+0x158>
 800d28e:	6822      	ldr	r2, [r4, #0]
 800d290:	0610      	lsls	r0, r2, #24
 800d292:	f57f af65 	bpl.w	800d160 <_scanf_float+0x60>
 800d296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d29a:	e7f4      	b.n	800d286 <_scanf_float+0x186>
 800d29c:	f1ba 0f00 	cmp.w	sl, #0
 800d2a0:	d10e      	bne.n	800d2c0 <_scanf_float+0x1c0>
 800d2a2:	f1b9 0f00 	cmp.w	r9, #0
 800d2a6:	d10e      	bne.n	800d2c6 <_scanf_float+0x1c6>
 800d2a8:	6822      	ldr	r2, [r4, #0]
 800d2aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d2ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d2b2:	d108      	bne.n	800d2c6 <_scanf_float+0x1c6>
 800d2b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d2b8:	6022      	str	r2, [r4, #0]
 800d2ba:	f04f 0a01 	mov.w	sl, #1
 800d2be:	e7e3      	b.n	800d288 <_scanf_float+0x188>
 800d2c0:	f1ba 0f02 	cmp.w	sl, #2
 800d2c4:	d055      	beq.n	800d372 <_scanf_float+0x272>
 800d2c6:	2d01      	cmp	r5, #1
 800d2c8:	d002      	beq.n	800d2d0 <_scanf_float+0x1d0>
 800d2ca:	2d04      	cmp	r5, #4
 800d2cc:	f47f af48 	bne.w	800d160 <_scanf_float+0x60>
 800d2d0:	3501      	adds	r5, #1
 800d2d2:	b2ed      	uxtb	r5, r5
 800d2d4:	e7d8      	b.n	800d288 <_scanf_float+0x188>
 800d2d6:	f1ba 0f01 	cmp.w	sl, #1
 800d2da:	f47f af41 	bne.w	800d160 <_scanf_float+0x60>
 800d2de:	f04f 0a02 	mov.w	sl, #2
 800d2e2:	e7d1      	b.n	800d288 <_scanf_float+0x188>
 800d2e4:	b97d      	cbnz	r5, 800d306 <_scanf_float+0x206>
 800d2e6:	f1b9 0f00 	cmp.w	r9, #0
 800d2ea:	f47f af3c 	bne.w	800d166 <_scanf_float+0x66>
 800d2ee:	6822      	ldr	r2, [r4, #0]
 800d2f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d2f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d2f8:	f47f af39 	bne.w	800d16e <_scanf_float+0x6e>
 800d2fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d300:	6022      	str	r2, [r4, #0]
 800d302:	2501      	movs	r5, #1
 800d304:	e7c0      	b.n	800d288 <_scanf_float+0x188>
 800d306:	2d03      	cmp	r5, #3
 800d308:	d0e2      	beq.n	800d2d0 <_scanf_float+0x1d0>
 800d30a:	2d05      	cmp	r5, #5
 800d30c:	e7de      	b.n	800d2cc <_scanf_float+0x1cc>
 800d30e:	2d02      	cmp	r5, #2
 800d310:	f47f af26 	bne.w	800d160 <_scanf_float+0x60>
 800d314:	2503      	movs	r5, #3
 800d316:	e7b7      	b.n	800d288 <_scanf_float+0x188>
 800d318:	2d06      	cmp	r5, #6
 800d31a:	f47f af21 	bne.w	800d160 <_scanf_float+0x60>
 800d31e:	2507      	movs	r5, #7
 800d320:	e7b2      	b.n	800d288 <_scanf_float+0x188>
 800d322:	6822      	ldr	r2, [r4, #0]
 800d324:	0591      	lsls	r1, r2, #22
 800d326:	f57f af1b 	bpl.w	800d160 <_scanf_float+0x60>
 800d32a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d32e:	6022      	str	r2, [r4, #0]
 800d330:	f8cd 9004 	str.w	r9, [sp, #4]
 800d334:	e7a8      	b.n	800d288 <_scanf_float+0x188>
 800d336:	6822      	ldr	r2, [r4, #0]
 800d338:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d33c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d340:	d006      	beq.n	800d350 <_scanf_float+0x250>
 800d342:	0550      	lsls	r0, r2, #21
 800d344:	f57f af0c 	bpl.w	800d160 <_scanf_float+0x60>
 800d348:	f1b9 0f00 	cmp.w	r9, #0
 800d34c:	f43f af0f 	beq.w	800d16e <_scanf_float+0x6e>
 800d350:	0591      	lsls	r1, r2, #22
 800d352:	bf58      	it	pl
 800d354:	9901      	ldrpl	r1, [sp, #4]
 800d356:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d35a:	bf58      	it	pl
 800d35c:	eba9 0101 	subpl.w	r1, r9, r1
 800d360:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d364:	bf58      	it	pl
 800d366:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d36a:	6022      	str	r2, [r4, #0]
 800d36c:	f04f 0900 	mov.w	r9, #0
 800d370:	e78a      	b.n	800d288 <_scanf_float+0x188>
 800d372:	f04f 0a03 	mov.w	sl, #3
 800d376:	e787      	b.n	800d288 <_scanf_float+0x188>
 800d378:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d37c:	4639      	mov	r1, r7
 800d37e:	4640      	mov	r0, r8
 800d380:	4798      	blx	r3
 800d382:	2800      	cmp	r0, #0
 800d384:	f43f aedf 	beq.w	800d146 <_scanf_float+0x46>
 800d388:	e6ea      	b.n	800d160 <_scanf_float+0x60>
 800d38a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d38e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d392:	463a      	mov	r2, r7
 800d394:	4640      	mov	r0, r8
 800d396:	4798      	blx	r3
 800d398:	6923      	ldr	r3, [r4, #16]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	6123      	str	r3, [r4, #16]
 800d39e:	e6ec      	b.n	800d17a <_scanf_float+0x7a>
 800d3a0:	1e6b      	subs	r3, r5, #1
 800d3a2:	2b06      	cmp	r3, #6
 800d3a4:	d825      	bhi.n	800d3f2 <_scanf_float+0x2f2>
 800d3a6:	2d02      	cmp	r5, #2
 800d3a8:	d836      	bhi.n	800d418 <_scanf_float+0x318>
 800d3aa:	455e      	cmp	r6, fp
 800d3ac:	f67f aee8 	bls.w	800d180 <_scanf_float+0x80>
 800d3b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d3b8:	463a      	mov	r2, r7
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	4798      	blx	r3
 800d3be:	6923      	ldr	r3, [r4, #16]
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	6123      	str	r3, [r4, #16]
 800d3c4:	e7f1      	b.n	800d3aa <_scanf_float+0x2aa>
 800d3c6:	9802      	ldr	r0, [sp, #8]
 800d3c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d3d0:	9002      	str	r0, [sp, #8]
 800d3d2:	463a      	mov	r2, r7
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	4798      	blx	r3
 800d3d8:	6923      	ldr	r3, [r4, #16]
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	6123      	str	r3, [r4, #16]
 800d3de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d3e2:	fa5f fa8a 	uxtb.w	sl, sl
 800d3e6:	f1ba 0f02 	cmp.w	sl, #2
 800d3ea:	d1ec      	bne.n	800d3c6 <_scanf_float+0x2c6>
 800d3ec:	3d03      	subs	r5, #3
 800d3ee:	b2ed      	uxtb	r5, r5
 800d3f0:	1b76      	subs	r6, r6, r5
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	05da      	lsls	r2, r3, #23
 800d3f6:	d52f      	bpl.n	800d458 <_scanf_float+0x358>
 800d3f8:	055b      	lsls	r3, r3, #21
 800d3fa:	d510      	bpl.n	800d41e <_scanf_float+0x31e>
 800d3fc:	455e      	cmp	r6, fp
 800d3fe:	f67f aebf 	bls.w	800d180 <_scanf_float+0x80>
 800d402:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d40a:	463a      	mov	r2, r7
 800d40c:	4640      	mov	r0, r8
 800d40e:	4798      	blx	r3
 800d410:	6923      	ldr	r3, [r4, #16]
 800d412:	3b01      	subs	r3, #1
 800d414:	6123      	str	r3, [r4, #16]
 800d416:	e7f1      	b.n	800d3fc <_scanf_float+0x2fc>
 800d418:	46aa      	mov	sl, r5
 800d41a:	9602      	str	r6, [sp, #8]
 800d41c:	e7df      	b.n	800d3de <_scanf_float+0x2de>
 800d41e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d422:	6923      	ldr	r3, [r4, #16]
 800d424:	2965      	cmp	r1, #101	; 0x65
 800d426:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d42a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800d42e:	6123      	str	r3, [r4, #16]
 800d430:	d00c      	beq.n	800d44c <_scanf_float+0x34c>
 800d432:	2945      	cmp	r1, #69	; 0x45
 800d434:	d00a      	beq.n	800d44c <_scanf_float+0x34c>
 800d436:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d43a:	463a      	mov	r2, r7
 800d43c:	4640      	mov	r0, r8
 800d43e:	4798      	blx	r3
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d446:	3b01      	subs	r3, #1
 800d448:	1eb5      	subs	r5, r6, #2
 800d44a:	6123      	str	r3, [r4, #16]
 800d44c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d450:	463a      	mov	r2, r7
 800d452:	4640      	mov	r0, r8
 800d454:	4798      	blx	r3
 800d456:	462e      	mov	r6, r5
 800d458:	6825      	ldr	r5, [r4, #0]
 800d45a:	f015 0510 	ands.w	r5, r5, #16
 800d45e:	d158      	bne.n	800d512 <_scanf_float+0x412>
 800d460:	7035      	strb	r5, [r6, #0]
 800d462:	6823      	ldr	r3, [r4, #0]
 800d464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d46c:	d11c      	bne.n	800d4a8 <_scanf_float+0x3a8>
 800d46e:	9b01      	ldr	r3, [sp, #4]
 800d470:	454b      	cmp	r3, r9
 800d472:	eba3 0209 	sub.w	r2, r3, r9
 800d476:	d124      	bne.n	800d4c2 <_scanf_float+0x3c2>
 800d478:	2200      	movs	r2, #0
 800d47a:	4659      	mov	r1, fp
 800d47c:	4640      	mov	r0, r8
 800d47e:	f000 fef1 	bl	800e264 <_strtod_r>
 800d482:	9b03      	ldr	r3, [sp, #12]
 800d484:	6821      	ldr	r1, [r4, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f011 0f02 	tst.w	r1, #2
 800d48c:	ec57 6b10 	vmov	r6, r7, d0
 800d490:	f103 0204 	add.w	r2, r3, #4
 800d494:	d020      	beq.n	800d4d8 <_scanf_float+0x3d8>
 800d496:	9903      	ldr	r1, [sp, #12]
 800d498:	600a      	str	r2, [r1, #0]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	e9c3 6700 	strd	r6, r7, [r3]
 800d4a0:	68e3      	ldr	r3, [r4, #12]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	60e3      	str	r3, [r4, #12]
 800d4a6:	e66c      	b.n	800d182 <_scanf_float+0x82>
 800d4a8:	9b04      	ldr	r3, [sp, #16]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0e4      	beq.n	800d478 <_scanf_float+0x378>
 800d4ae:	9905      	ldr	r1, [sp, #20]
 800d4b0:	230a      	movs	r3, #10
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	3101      	adds	r1, #1
 800d4b6:	4640      	mov	r0, r8
 800d4b8:	f000 ff5e 	bl	800e378 <_strtol_r>
 800d4bc:	9b04      	ldr	r3, [sp, #16]
 800d4be:	9e05      	ldr	r6, [sp, #20]
 800d4c0:	1ac2      	subs	r2, r0, r3
 800d4c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d4c6:	429e      	cmp	r6, r3
 800d4c8:	bf28      	it	cs
 800d4ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d4ce:	4912      	ldr	r1, [pc, #72]	; (800d518 <_scanf_float+0x418>)
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f000 f83b 	bl	800d54c <siprintf>
 800d4d6:	e7cf      	b.n	800d478 <_scanf_float+0x378>
 800d4d8:	f011 0f04 	tst.w	r1, #4
 800d4dc:	9903      	ldr	r1, [sp, #12]
 800d4de:	600a      	str	r2, [r1, #0]
 800d4e0:	d1db      	bne.n	800d49a <_scanf_float+0x39a>
 800d4e2:	f8d3 8000 	ldr.w	r8, [r3]
 800d4e6:	ee10 2a10 	vmov	r2, s0
 800d4ea:	ee10 0a10 	vmov	r0, s0
 800d4ee:	463b      	mov	r3, r7
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	f7f3 fb2b 	bl	8000b4c <__aeabi_dcmpun>
 800d4f6:	b128      	cbz	r0, 800d504 <_scanf_float+0x404>
 800d4f8:	4808      	ldr	r0, [pc, #32]	; (800d51c <_scanf_float+0x41c>)
 800d4fa:	f000 f821 	bl	800d540 <nanf>
 800d4fe:	ed88 0a00 	vstr	s0, [r8]
 800d502:	e7cd      	b.n	800d4a0 <_scanf_float+0x3a0>
 800d504:	4630      	mov	r0, r6
 800d506:	4639      	mov	r1, r7
 800d508:	f7f3 fb7e 	bl	8000c08 <__aeabi_d2f>
 800d50c:	f8c8 0000 	str.w	r0, [r8]
 800d510:	e7c6      	b.n	800d4a0 <_scanf_float+0x3a0>
 800d512:	2500      	movs	r5, #0
 800d514:	e635      	b.n	800d182 <_scanf_float+0x82>
 800d516:	bf00      	nop
 800d518:	08010a89 	.word	0x08010a89
 800d51c:	08010b1b 	.word	0x08010b1b

0800d520 <_sbrk_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d06      	ldr	r5, [pc, #24]	; (800d53c <_sbrk_r+0x1c>)
 800d524:	2300      	movs	r3, #0
 800d526:	4604      	mov	r4, r0
 800d528:	4608      	mov	r0, r1
 800d52a:	602b      	str	r3, [r5, #0]
 800d52c:	f003 f9ba 	bl	80108a4 <_sbrk>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d102      	bne.n	800d53a <_sbrk_r+0x1a>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	b103      	cbz	r3, 800d53a <_sbrk_r+0x1a>
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	200081d8 	.word	0x200081d8

0800d540 <nanf>:
 800d540:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d548 <nanf+0x8>
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	7fc00000 	.word	0x7fc00000

0800d54c <siprintf>:
 800d54c:	b40e      	push	{r1, r2, r3}
 800d54e:	b500      	push	{lr}
 800d550:	b09c      	sub	sp, #112	; 0x70
 800d552:	ab1d      	add	r3, sp, #116	; 0x74
 800d554:	9002      	str	r0, [sp, #8]
 800d556:	9006      	str	r0, [sp, #24]
 800d558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d55c:	4809      	ldr	r0, [pc, #36]	; (800d584 <siprintf+0x38>)
 800d55e:	9107      	str	r1, [sp, #28]
 800d560:	9104      	str	r1, [sp, #16]
 800d562:	4909      	ldr	r1, [pc, #36]	; (800d588 <siprintf+0x3c>)
 800d564:	f853 2b04 	ldr.w	r2, [r3], #4
 800d568:	9105      	str	r1, [sp, #20]
 800d56a:	6800      	ldr	r0, [r0, #0]
 800d56c:	9301      	str	r3, [sp, #4]
 800d56e:	a902      	add	r1, sp, #8
 800d570:	f002 ffd2 	bl	8010518 <_svfiprintf_r>
 800d574:	9b02      	ldr	r3, [sp, #8]
 800d576:	2200      	movs	r2, #0
 800d578:	701a      	strb	r2, [r3, #0]
 800d57a:	b01c      	add	sp, #112	; 0x70
 800d57c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d580:	b003      	add	sp, #12
 800d582:	4770      	bx	lr
 800d584:	20000018 	.word	0x20000018
 800d588:	ffff0208 	.word	0xffff0208

0800d58c <__sread>:
 800d58c:	b510      	push	{r4, lr}
 800d58e:	460c      	mov	r4, r1
 800d590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d594:	f003 f8c0 	bl	8010718 <_read_r>
 800d598:	2800      	cmp	r0, #0
 800d59a:	bfab      	itete	ge
 800d59c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d59e:	89a3      	ldrhlt	r3, [r4, #12]
 800d5a0:	181b      	addge	r3, r3, r0
 800d5a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5a6:	bfac      	ite	ge
 800d5a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5aa:	81a3      	strhlt	r3, [r4, #12]
 800d5ac:	bd10      	pop	{r4, pc}

0800d5ae <__swrite>:
 800d5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b2:	461f      	mov	r7, r3
 800d5b4:	898b      	ldrh	r3, [r1, #12]
 800d5b6:	05db      	lsls	r3, r3, #23
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	4616      	mov	r6, r2
 800d5be:	d505      	bpl.n	800d5cc <__swrite+0x1e>
 800d5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f002 fa20 	bl	800fa0c <_lseek_r>
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5d6:	81a3      	strh	r3, [r4, #12]
 800d5d8:	4632      	mov	r2, r6
 800d5da:	463b      	mov	r3, r7
 800d5dc:	4628      	mov	r0, r5
 800d5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e2:	f000 bf57 	b.w	800e494 <_write_r>

0800d5e6 <__sseek>:
 800d5e6:	b510      	push	{r4, lr}
 800d5e8:	460c      	mov	r4, r1
 800d5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ee:	f002 fa0d 	bl	800fa0c <_lseek_r>
 800d5f2:	1c43      	adds	r3, r0, #1
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	bf15      	itete	ne
 800d5f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d602:	81a3      	strheq	r3, [r4, #12]
 800d604:	bf18      	it	ne
 800d606:	81a3      	strhne	r3, [r4, #12]
 800d608:	bd10      	pop	{r4, pc}

0800d60a <__sclose>:
 800d60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d60e:	f000 bfdf 	b.w	800e5d0 <_close_r>

0800d612 <sulp>:
 800d612:	b570      	push	{r4, r5, r6, lr}
 800d614:	4604      	mov	r4, r0
 800d616:	460d      	mov	r5, r1
 800d618:	ec45 4b10 	vmov	d0, r4, r5
 800d61c:	4616      	mov	r6, r2
 800d61e:	f002 fdab 	bl	8010178 <__ulp>
 800d622:	ec51 0b10 	vmov	r0, r1, d0
 800d626:	b17e      	cbz	r6, 800d648 <sulp+0x36>
 800d628:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d62c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d630:	2b00      	cmp	r3, #0
 800d632:	dd09      	ble.n	800d648 <sulp+0x36>
 800d634:	051b      	lsls	r3, r3, #20
 800d636:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d63a:	2400      	movs	r4, #0
 800d63c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d640:	4622      	mov	r2, r4
 800d642:	462b      	mov	r3, r5
 800d644:	f7f2 ffe8 	bl	8000618 <__aeabi_dmul>
 800d648:	bd70      	pop	{r4, r5, r6, pc}
 800d64a:	0000      	movs	r0, r0
 800d64c:	0000      	movs	r0, r0
	...

0800d650 <_strtod_l>:
 800d650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d654:	b0a3      	sub	sp, #140	; 0x8c
 800d656:	461f      	mov	r7, r3
 800d658:	2300      	movs	r3, #0
 800d65a:	931e      	str	r3, [sp, #120]	; 0x78
 800d65c:	4ba4      	ldr	r3, [pc, #656]	; (800d8f0 <_strtod_l+0x2a0>)
 800d65e:	9219      	str	r2, [sp, #100]	; 0x64
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	9307      	str	r3, [sp, #28]
 800d664:	4604      	mov	r4, r0
 800d666:	4618      	mov	r0, r3
 800d668:	4688      	mov	r8, r1
 800d66a:	f7f2 fe11 	bl	8000290 <strlen>
 800d66e:	f04f 0a00 	mov.w	sl, #0
 800d672:	4605      	mov	r5, r0
 800d674:	f04f 0b00 	mov.w	fp, #0
 800d678:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d67c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d67e:	781a      	ldrb	r2, [r3, #0]
 800d680:	2a2b      	cmp	r2, #43	; 0x2b
 800d682:	d04c      	beq.n	800d71e <_strtod_l+0xce>
 800d684:	d839      	bhi.n	800d6fa <_strtod_l+0xaa>
 800d686:	2a0d      	cmp	r2, #13
 800d688:	d832      	bhi.n	800d6f0 <_strtod_l+0xa0>
 800d68a:	2a08      	cmp	r2, #8
 800d68c:	d832      	bhi.n	800d6f4 <_strtod_l+0xa4>
 800d68e:	2a00      	cmp	r2, #0
 800d690:	d03c      	beq.n	800d70c <_strtod_l+0xbc>
 800d692:	2300      	movs	r3, #0
 800d694:	930e      	str	r3, [sp, #56]	; 0x38
 800d696:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d698:	7833      	ldrb	r3, [r6, #0]
 800d69a:	2b30      	cmp	r3, #48	; 0x30
 800d69c:	f040 80b4 	bne.w	800d808 <_strtod_l+0x1b8>
 800d6a0:	7873      	ldrb	r3, [r6, #1]
 800d6a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d6a6:	2b58      	cmp	r3, #88	; 0x58
 800d6a8:	d16c      	bne.n	800d784 <_strtod_l+0x134>
 800d6aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	ab1e      	add	r3, sp, #120	; 0x78
 800d6b0:	9702      	str	r7, [sp, #8]
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	4a8f      	ldr	r2, [pc, #572]	; (800d8f4 <_strtod_l+0x2a4>)
 800d6b6:	ab1f      	add	r3, sp, #124	; 0x7c
 800d6b8:	a91d      	add	r1, sp, #116	; 0x74
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f001 fe8a 	bl	800f3d4 <__gethex>
 800d6c0:	f010 0707 	ands.w	r7, r0, #7
 800d6c4:	4605      	mov	r5, r0
 800d6c6:	d005      	beq.n	800d6d4 <_strtod_l+0x84>
 800d6c8:	2f06      	cmp	r7, #6
 800d6ca:	d12a      	bne.n	800d722 <_strtod_l+0xd2>
 800d6cc:	3601      	adds	r6, #1
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	961d      	str	r6, [sp, #116]	; 0x74
 800d6d2:	930e      	str	r3, [sp, #56]	; 0x38
 800d6d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f040 8596 	bne.w	800e208 <_strtod_l+0xbb8>
 800d6dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6de:	b1db      	cbz	r3, 800d718 <_strtod_l+0xc8>
 800d6e0:	4652      	mov	r2, sl
 800d6e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6e6:	ec43 2b10 	vmov	d0, r2, r3
 800d6ea:	b023      	add	sp, #140	; 0x8c
 800d6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f0:	2a20      	cmp	r2, #32
 800d6f2:	d1ce      	bne.n	800d692 <_strtod_l+0x42>
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	931d      	str	r3, [sp, #116]	; 0x74
 800d6f8:	e7c0      	b.n	800d67c <_strtod_l+0x2c>
 800d6fa:	2a2d      	cmp	r2, #45	; 0x2d
 800d6fc:	d1c9      	bne.n	800d692 <_strtod_l+0x42>
 800d6fe:	2201      	movs	r2, #1
 800d700:	920e      	str	r2, [sp, #56]	; 0x38
 800d702:	1c5a      	adds	r2, r3, #1
 800d704:	921d      	str	r2, [sp, #116]	; 0x74
 800d706:	785b      	ldrb	r3, [r3, #1]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1c4      	bne.n	800d696 <_strtod_l+0x46>
 800d70c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d70e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d712:	2b00      	cmp	r3, #0
 800d714:	f040 8576 	bne.w	800e204 <_strtod_l+0xbb4>
 800d718:	4652      	mov	r2, sl
 800d71a:	465b      	mov	r3, fp
 800d71c:	e7e3      	b.n	800d6e6 <_strtod_l+0x96>
 800d71e:	2200      	movs	r2, #0
 800d720:	e7ee      	b.n	800d700 <_strtod_l+0xb0>
 800d722:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d724:	b13a      	cbz	r2, 800d736 <_strtod_l+0xe6>
 800d726:	2135      	movs	r1, #53	; 0x35
 800d728:	a820      	add	r0, sp, #128	; 0x80
 800d72a:	f002 fe30 	bl	801038e <__copybits>
 800d72e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d730:	4620      	mov	r0, r4
 800d732:	f002 f9f5 	bl	800fb20 <_Bfree>
 800d736:	3f01      	subs	r7, #1
 800d738:	2f05      	cmp	r7, #5
 800d73a:	d807      	bhi.n	800d74c <_strtod_l+0xfc>
 800d73c:	e8df f007 	tbb	[pc, r7]
 800d740:	1d180b0e 	.word	0x1d180b0e
 800d744:	030e      	.short	0x030e
 800d746:	f04f 0b00 	mov.w	fp, #0
 800d74a:	46da      	mov	sl, fp
 800d74c:	0728      	lsls	r0, r5, #28
 800d74e:	d5c1      	bpl.n	800d6d4 <_strtod_l+0x84>
 800d750:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d754:	e7be      	b.n	800d6d4 <_strtod_l+0x84>
 800d756:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d75a:	e7f7      	b.n	800d74c <_strtod_l+0xfc>
 800d75c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d760:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d762:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d766:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d76a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d76e:	e7ed      	b.n	800d74c <_strtod_l+0xfc>
 800d770:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d8f8 <_strtod_l+0x2a8>
 800d774:	f04f 0a00 	mov.w	sl, #0
 800d778:	e7e8      	b.n	800d74c <_strtod_l+0xfc>
 800d77a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d77e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d782:	e7e3      	b.n	800d74c <_strtod_l+0xfc>
 800d784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	921d      	str	r2, [sp, #116]	; 0x74
 800d78a:	785b      	ldrb	r3, [r3, #1]
 800d78c:	2b30      	cmp	r3, #48	; 0x30
 800d78e:	d0f9      	beq.n	800d784 <_strtod_l+0x134>
 800d790:	2b00      	cmp	r3, #0
 800d792:	d09f      	beq.n	800d6d4 <_strtod_l+0x84>
 800d794:	2301      	movs	r3, #1
 800d796:	f04f 0900 	mov.w	r9, #0
 800d79a:	9304      	str	r3, [sp, #16]
 800d79c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d79e:	930a      	str	r3, [sp, #40]	; 0x28
 800d7a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d7a4:	464f      	mov	r7, r9
 800d7a6:	220a      	movs	r2, #10
 800d7a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d7aa:	7806      	ldrb	r6, [r0, #0]
 800d7ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d7b0:	b2d9      	uxtb	r1, r3
 800d7b2:	2909      	cmp	r1, #9
 800d7b4:	d92a      	bls.n	800d80c <_strtod_l+0x1bc>
 800d7b6:	9907      	ldr	r1, [sp, #28]
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	f002 ffc9 	bl	8010750 <strncmp>
 800d7be:	b398      	cbz	r0, 800d828 <_strtod_l+0x1d8>
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	4633      	mov	r3, r6
 800d7c4:	463d      	mov	r5, r7
 800d7c6:	9007      	str	r0, [sp, #28]
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	2b65      	cmp	r3, #101	; 0x65
 800d7cc:	d001      	beq.n	800d7d2 <_strtod_l+0x182>
 800d7ce:	2b45      	cmp	r3, #69	; 0x45
 800d7d0:	d118      	bne.n	800d804 <_strtod_l+0x1b4>
 800d7d2:	b91d      	cbnz	r5, 800d7dc <_strtod_l+0x18c>
 800d7d4:	9b04      	ldr	r3, [sp, #16]
 800d7d6:	4303      	orrs	r3, r0
 800d7d8:	d098      	beq.n	800d70c <_strtod_l+0xbc>
 800d7da:	2500      	movs	r5, #0
 800d7dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d7e0:	f108 0301 	add.w	r3, r8, #1
 800d7e4:	931d      	str	r3, [sp, #116]	; 0x74
 800d7e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d7ea:	2b2b      	cmp	r3, #43	; 0x2b
 800d7ec:	d075      	beq.n	800d8da <_strtod_l+0x28a>
 800d7ee:	2b2d      	cmp	r3, #45	; 0x2d
 800d7f0:	d07b      	beq.n	800d8ea <_strtod_l+0x29a>
 800d7f2:	f04f 0c00 	mov.w	ip, #0
 800d7f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d7fa:	2909      	cmp	r1, #9
 800d7fc:	f240 8082 	bls.w	800d904 <_strtod_l+0x2b4>
 800d800:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d804:	2600      	movs	r6, #0
 800d806:	e09d      	b.n	800d944 <_strtod_l+0x2f4>
 800d808:	2300      	movs	r3, #0
 800d80a:	e7c4      	b.n	800d796 <_strtod_l+0x146>
 800d80c:	2f08      	cmp	r7, #8
 800d80e:	bfd8      	it	le
 800d810:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d812:	f100 0001 	add.w	r0, r0, #1
 800d816:	bfda      	itte	le
 800d818:	fb02 3301 	mlale	r3, r2, r1, r3
 800d81c:	9309      	strle	r3, [sp, #36]	; 0x24
 800d81e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d822:	3701      	adds	r7, #1
 800d824:	901d      	str	r0, [sp, #116]	; 0x74
 800d826:	e7bf      	b.n	800d7a8 <_strtod_l+0x158>
 800d828:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d82a:	195a      	adds	r2, r3, r5
 800d82c:	921d      	str	r2, [sp, #116]	; 0x74
 800d82e:	5d5b      	ldrb	r3, [r3, r5]
 800d830:	2f00      	cmp	r7, #0
 800d832:	d037      	beq.n	800d8a4 <_strtod_l+0x254>
 800d834:	9007      	str	r0, [sp, #28]
 800d836:	463d      	mov	r5, r7
 800d838:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d83c:	2a09      	cmp	r2, #9
 800d83e:	d912      	bls.n	800d866 <_strtod_l+0x216>
 800d840:	2201      	movs	r2, #1
 800d842:	e7c2      	b.n	800d7ca <_strtod_l+0x17a>
 800d844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d846:	1c5a      	adds	r2, r3, #1
 800d848:	921d      	str	r2, [sp, #116]	; 0x74
 800d84a:	785b      	ldrb	r3, [r3, #1]
 800d84c:	3001      	adds	r0, #1
 800d84e:	2b30      	cmp	r3, #48	; 0x30
 800d850:	d0f8      	beq.n	800d844 <_strtod_l+0x1f4>
 800d852:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d856:	2a08      	cmp	r2, #8
 800d858:	f200 84db 	bhi.w	800e212 <_strtod_l+0xbc2>
 800d85c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d85e:	9007      	str	r0, [sp, #28]
 800d860:	2000      	movs	r0, #0
 800d862:	920a      	str	r2, [sp, #40]	; 0x28
 800d864:	4605      	mov	r5, r0
 800d866:	3b30      	subs	r3, #48	; 0x30
 800d868:	f100 0201 	add.w	r2, r0, #1
 800d86c:	d014      	beq.n	800d898 <_strtod_l+0x248>
 800d86e:	9907      	ldr	r1, [sp, #28]
 800d870:	4411      	add	r1, r2
 800d872:	9107      	str	r1, [sp, #28]
 800d874:	462a      	mov	r2, r5
 800d876:	eb00 0e05 	add.w	lr, r0, r5
 800d87a:	210a      	movs	r1, #10
 800d87c:	4572      	cmp	r2, lr
 800d87e:	d113      	bne.n	800d8a8 <_strtod_l+0x258>
 800d880:	182a      	adds	r2, r5, r0
 800d882:	2a08      	cmp	r2, #8
 800d884:	f105 0501 	add.w	r5, r5, #1
 800d888:	4405      	add	r5, r0
 800d88a:	dc1c      	bgt.n	800d8c6 <_strtod_l+0x276>
 800d88c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d88e:	220a      	movs	r2, #10
 800d890:	fb02 3301 	mla	r3, r2, r1, r3
 800d894:	9309      	str	r3, [sp, #36]	; 0x24
 800d896:	2200      	movs	r2, #0
 800d898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d89a:	1c59      	adds	r1, r3, #1
 800d89c:	911d      	str	r1, [sp, #116]	; 0x74
 800d89e:	785b      	ldrb	r3, [r3, #1]
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	e7c9      	b.n	800d838 <_strtod_l+0x1e8>
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	e7d2      	b.n	800d84e <_strtod_l+0x1fe>
 800d8a8:	2a08      	cmp	r2, #8
 800d8aa:	dc04      	bgt.n	800d8b6 <_strtod_l+0x266>
 800d8ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d8ae:	434e      	muls	r6, r1
 800d8b0:	9609      	str	r6, [sp, #36]	; 0x24
 800d8b2:	3201      	adds	r2, #1
 800d8b4:	e7e2      	b.n	800d87c <_strtod_l+0x22c>
 800d8b6:	f102 0c01 	add.w	ip, r2, #1
 800d8ba:	f1bc 0f10 	cmp.w	ip, #16
 800d8be:	bfd8      	it	le
 800d8c0:	fb01 f909 	mulle.w	r9, r1, r9
 800d8c4:	e7f5      	b.n	800d8b2 <_strtod_l+0x262>
 800d8c6:	2d10      	cmp	r5, #16
 800d8c8:	bfdc      	itt	le
 800d8ca:	220a      	movle	r2, #10
 800d8cc:	fb02 3909 	mlale	r9, r2, r9, r3
 800d8d0:	e7e1      	b.n	800d896 <_strtod_l+0x246>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	9307      	str	r3, [sp, #28]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	e77c      	b.n	800d7d4 <_strtod_l+0x184>
 800d8da:	f04f 0c00 	mov.w	ip, #0
 800d8de:	f108 0302 	add.w	r3, r8, #2
 800d8e2:	931d      	str	r3, [sp, #116]	; 0x74
 800d8e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d8e8:	e785      	b.n	800d7f6 <_strtod_l+0x1a6>
 800d8ea:	f04f 0c01 	mov.w	ip, #1
 800d8ee:	e7f6      	b.n	800d8de <_strtod_l+0x28e>
 800d8f0:	08010d1c 	.word	0x08010d1c
 800d8f4:	08010a90 	.word	0x08010a90
 800d8f8:	7ff00000 	.word	0x7ff00000
 800d8fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d8fe:	1c59      	adds	r1, r3, #1
 800d900:	911d      	str	r1, [sp, #116]	; 0x74
 800d902:	785b      	ldrb	r3, [r3, #1]
 800d904:	2b30      	cmp	r3, #48	; 0x30
 800d906:	d0f9      	beq.n	800d8fc <_strtod_l+0x2ac>
 800d908:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d90c:	2908      	cmp	r1, #8
 800d90e:	f63f af79 	bhi.w	800d804 <_strtod_l+0x1b4>
 800d912:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d916:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d918:	9308      	str	r3, [sp, #32]
 800d91a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d91c:	1c59      	adds	r1, r3, #1
 800d91e:	911d      	str	r1, [sp, #116]	; 0x74
 800d920:	785b      	ldrb	r3, [r3, #1]
 800d922:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d926:	2e09      	cmp	r6, #9
 800d928:	d937      	bls.n	800d99a <_strtod_l+0x34a>
 800d92a:	9e08      	ldr	r6, [sp, #32]
 800d92c:	1b89      	subs	r1, r1, r6
 800d92e:	2908      	cmp	r1, #8
 800d930:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d934:	dc02      	bgt.n	800d93c <_strtod_l+0x2ec>
 800d936:	4576      	cmp	r6, lr
 800d938:	bfa8      	it	ge
 800d93a:	4676      	movge	r6, lr
 800d93c:	f1bc 0f00 	cmp.w	ip, #0
 800d940:	d000      	beq.n	800d944 <_strtod_l+0x2f4>
 800d942:	4276      	negs	r6, r6
 800d944:	2d00      	cmp	r5, #0
 800d946:	d14f      	bne.n	800d9e8 <_strtod_l+0x398>
 800d948:	9904      	ldr	r1, [sp, #16]
 800d94a:	4301      	orrs	r1, r0
 800d94c:	f47f aec2 	bne.w	800d6d4 <_strtod_l+0x84>
 800d950:	2a00      	cmp	r2, #0
 800d952:	f47f aedb 	bne.w	800d70c <_strtod_l+0xbc>
 800d956:	2b69      	cmp	r3, #105	; 0x69
 800d958:	d027      	beq.n	800d9aa <_strtod_l+0x35a>
 800d95a:	dc24      	bgt.n	800d9a6 <_strtod_l+0x356>
 800d95c:	2b49      	cmp	r3, #73	; 0x49
 800d95e:	d024      	beq.n	800d9aa <_strtod_l+0x35a>
 800d960:	2b4e      	cmp	r3, #78	; 0x4e
 800d962:	f47f aed3 	bne.w	800d70c <_strtod_l+0xbc>
 800d966:	499e      	ldr	r1, [pc, #632]	; (800dbe0 <_strtod_l+0x590>)
 800d968:	a81d      	add	r0, sp, #116	; 0x74
 800d96a:	f001 ff8b 	bl	800f884 <__match>
 800d96e:	2800      	cmp	r0, #0
 800d970:	f43f aecc 	beq.w	800d70c <_strtod_l+0xbc>
 800d974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	2b28      	cmp	r3, #40	; 0x28
 800d97a:	d12d      	bne.n	800d9d8 <_strtod_l+0x388>
 800d97c:	4999      	ldr	r1, [pc, #612]	; (800dbe4 <_strtod_l+0x594>)
 800d97e:	aa20      	add	r2, sp, #128	; 0x80
 800d980:	a81d      	add	r0, sp, #116	; 0x74
 800d982:	f001 ff93 	bl	800f8ac <__hexnan>
 800d986:	2805      	cmp	r0, #5
 800d988:	d126      	bne.n	800d9d8 <_strtod_l+0x388>
 800d98a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d98c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d990:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d994:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d998:	e69c      	b.n	800d6d4 <_strtod_l+0x84>
 800d99a:	210a      	movs	r1, #10
 800d99c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d9a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d9a4:	e7b9      	b.n	800d91a <_strtod_l+0x2ca>
 800d9a6:	2b6e      	cmp	r3, #110	; 0x6e
 800d9a8:	e7db      	b.n	800d962 <_strtod_l+0x312>
 800d9aa:	498f      	ldr	r1, [pc, #572]	; (800dbe8 <_strtod_l+0x598>)
 800d9ac:	a81d      	add	r0, sp, #116	; 0x74
 800d9ae:	f001 ff69 	bl	800f884 <__match>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	f43f aeaa 	beq.w	800d70c <_strtod_l+0xbc>
 800d9b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9ba:	498c      	ldr	r1, [pc, #560]	; (800dbec <_strtod_l+0x59c>)
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	a81d      	add	r0, sp, #116	; 0x74
 800d9c0:	931d      	str	r3, [sp, #116]	; 0x74
 800d9c2:	f001 ff5f 	bl	800f884 <__match>
 800d9c6:	b910      	cbnz	r0, 800d9ce <_strtod_l+0x37e>
 800d9c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	931d      	str	r3, [sp, #116]	; 0x74
 800d9ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800dbfc <_strtod_l+0x5ac>
 800d9d2:	f04f 0a00 	mov.w	sl, #0
 800d9d6:	e67d      	b.n	800d6d4 <_strtod_l+0x84>
 800d9d8:	4885      	ldr	r0, [pc, #532]	; (800dbf0 <_strtod_l+0x5a0>)
 800d9da:	f002 feb1 	bl	8010740 <nan>
 800d9de:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d9e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d9e6:	e675      	b.n	800d6d4 <_strtod_l+0x84>
 800d9e8:	9b07      	ldr	r3, [sp, #28]
 800d9ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9ec:	1af3      	subs	r3, r6, r3
 800d9ee:	2f00      	cmp	r7, #0
 800d9f0:	bf08      	it	eq
 800d9f2:	462f      	moveq	r7, r5
 800d9f4:	2d10      	cmp	r5, #16
 800d9f6:	9308      	str	r3, [sp, #32]
 800d9f8:	46a8      	mov	r8, r5
 800d9fa:	bfa8      	it	ge
 800d9fc:	f04f 0810 	movge.w	r8, #16
 800da00:	f7f2 fd90 	bl	8000524 <__aeabi_ui2d>
 800da04:	2d09      	cmp	r5, #9
 800da06:	4682      	mov	sl, r0
 800da08:	468b      	mov	fp, r1
 800da0a:	dd13      	ble.n	800da34 <_strtod_l+0x3e4>
 800da0c:	4b79      	ldr	r3, [pc, #484]	; (800dbf4 <_strtod_l+0x5a4>)
 800da0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800da12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800da16:	f7f2 fdff 	bl	8000618 <__aeabi_dmul>
 800da1a:	4682      	mov	sl, r0
 800da1c:	4648      	mov	r0, r9
 800da1e:	468b      	mov	fp, r1
 800da20:	f7f2 fd80 	bl	8000524 <__aeabi_ui2d>
 800da24:	4602      	mov	r2, r0
 800da26:	460b      	mov	r3, r1
 800da28:	4650      	mov	r0, sl
 800da2a:	4659      	mov	r1, fp
 800da2c:	f7f2 fc3e 	bl	80002ac <__adddf3>
 800da30:	4682      	mov	sl, r0
 800da32:	468b      	mov	fp, r1
 800da34:	2d0f      	cmp	r5, #15
 800da36:	dc38      	bgt.n	800daaa <_strtod_l+0x45a>
 800da38:	9b08      	ldr	r3, [sp, #32]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f43f ae4a 	beq.w	800d6d4 <_strtod_l+0x84>
 800da40:	dd24      	ble.n	800da8c <_strtod_l+0x43c>
 800da42:	2b16      	cmp	r3, #22
 800da44:	dc0b      	bgt.n	800da5e <_strtod_l+0x40e>
 800da46:	4d6b      	ldr	r5, [pc, #428]	; (800dbf4 <_strtod_l+0x5a4>)
 800da48:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800da4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800da50:	4652      	mov	r2, sl
 800da52:	465b      	mov	r3, fp
 800da54:	f7f2 fde0 	bl	8000618 <__aeabi_dmul>
 800da58:	4682      	mov	sl, r0
 800da5a:	468b      	mov	fp, r1
 800da5c:	e63a      	b.n	800d6d4 <_strtod_l+0x84>
 800da5e:	9a08      	ldr	r2, [sp, #32]
 800da60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800da64:	4293      	cmp	r3, r2
 800da66:	db20      	blt.n	800daaa <_strtod_l+0x45a>
 800da68:	4c62      	ldr	r4, [pc, #392]	; (800dbf4 <_strtod_l+0x5a4>)
 800da6a:	f1c5 050f 	rsb	r5, r5, #15
 800da6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800da72:	4652      	mov	r2, sl
 800da74:	465b      	mov	r3, fp
 800da76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da7a:	f7f2 fdcd 	bl	8000618 <__aeabi_dmul>
 800da7e:	9b08      	ldr	r3, [sp, #32]
 800da80:	1b5d      	subs	r5, r3, r5
 800da82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800da86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800da8a:	e7e3      	b.n	800da54 <_strtod_l+0x404>
 800da8c:	9b08      	ldr	r3, [sp, #32]
 800da8e:	3316      	adds	r3, #22
 800da90:	db0b      	blt.n	800daaa <_strtod_l+0x45a>
 800da92:	9b07      	ldr	r3, [sp, #28]
 800da94:	4a57      	ldr	r2, [pc, #348]	; (800dbf4 <_strtod_l+0x5a4>)
 800da96:	1b9e      	subs	r6, r3, r6
 800da98:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800da9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800daa0:	4650      	mov	r0, sl
 800daa2:	4659      	mov	r1, fp
 800daa4:	f7f2 fee2 	bl	800086c <__aeabi_ddiv>
 800daa8:	e7d6      	b.n	800da58 <_strtod_l+0x408>
 800daaa:	9b08      	ldr	r3, [sp, #32]
 800daac:	eba5 0808 	sub.w	r8, r5, r8
 800dab0:	4498      	add	r8, r3
 800dab2:	f1b8 0f00 	cmp.w	r8, #0
 800dab6:	dd71      	ble.n	800db9c <_strtod_l+0x54c>
 800dab8:	f018 030f 	ands.w	r3, r8, #15
 800dabc:	d00a      	beq.n	800dad4 <_strtod_l+0x484>
 800dabe:	494d      	ldr	r1, [pc, #308]	; (800dbf4 <_strtod_l+0x5a4>)
 800dac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dac4:	4652      	mov	r2, sl
 800dac6:	465b      	mov	r3, fp
 800dac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dacc:	f7f2 fda4 	bl	8000618 <__aeabi_dmul>
 800dad0:	4682      	mov	sl, r0
 800dad2:	468b      	mov	fp, r1
 800dad4:	f038 080f 	bics.w	r8, r8, #15
 800dad8:	d04d      	beq.n	800db76 <_strtod_l+0x526>
 800dada:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800dade:	dd22      	ble.n	800db26 <_strtod_l+0x4d6>
 800dae0:	2500      	movs	r5, #0
 800dae2:	462e      	mov	r6, r5
 800dae4:	9509      	str	r5, [sp, #36]	; 0x24
 800dae6:	9507      	str	r5, [sp, #28]
 800dae8:	2322      	movs	r3, #34	; 0x22
 800daea:	f8df b110 	ldr.w	fp, [pc, #272]	; 800dbfc <_strtod_l+0x5ac>
 800daee:	6023      	str	r3, [r4, #0]
 800daf0:	f04f 0a00 	mov.w	sl, #0
 800daf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f43f adec 	beq.w	800d6d4 <_strtod_l+0x84>
 800dafc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dafe:	4620      	mov	r0, r4
 800db00:	f002 f80e 	bl	800fb20 <_Bfree>
 800db04:	9907      	ldr	r1, [sp, #28]
 800db06:	4620      	mov	r0, r4
 800db08:	f002 f80a 	bl	800fb20 <_Bfree>
 800db0c:	4631      	mov	r1, r6
 800db0e:	4620      	mov	r0, r4
 800db10:	f002 f806 	bl	800fb20 <_Bfree>
 800db14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db16:	4620      	mov	r0, r4
 800db18:	f002 f802 	bl	800fb20 <_Bfree>
 800db1c:	4629      	mov	r1, r5
 800db1e:	4620      	mov	r0, r4
 800db20:	f001 fffe 	bl	800fb20 <_Bfree>
 800db24:	e5d6      	b.n	800d6d4 <_strtod_l+0x84>
 800db26:	2300      	movs	r3, #0
 800db28:	ea4f 1828 	mov.w	r8, r8, asr #4
 800db2c:	4650      	mov	r0, sl
 800db2e:	4659      	mov	r1, fp
 800db30:	4699      	mov	r9, r3
 800db32:	f1b8 0f01 	cmp.w	r8, #1
 800db36:	dc21      	bgt.n	800db7c <_strtod_l+0x52c>
 800db38:	b10b      	cbz	r3, 800db3e <_strtod_l+0x4ee>
 800db3a:	4682      	mov	sl, r0
 800db3c:	468b      	mov	fp, r1
 800db3e:	4b2e      	ldr	r3, [pc, #184]	; (800dbf8 <_strtod_l+0x5a8>)
 800db40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800db44:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800db48:	4652      	mov	r2, sl
 800db4a:	465b      	mov	r3, fp
 800db4c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800db50:	f7f2 fd62 	bl	8000618 <__aeabi_dmul>
 800db54:	4b29      	ldr	r3, [pc, #164]	; (800dbfc <_strtod_l+0x5ac>)
 800db56:	460a      	mov	r2, r1
 800db58:	400b      	ands	r3, r1
 800db5a:	4929      	ldr	r1, [pc, #164]	; (800dc00 <_strtod_l+0x5b0>)
 800db5c:	428b      	cmp	r3, r1
 800db5e:	4682      	mov	sl, r0
 800db60:	d8be      	bhi.n	800dae0 <_strtod_l+0x490>
 800db62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800db66:	428b      	cmp	r3, r1
 800db68:	bf86      	itte	hi
 800db6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800dc04 <_strtod_l+0x5b4>
 800db6e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800db72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800db76:	2300      	movs	r3, #0
 800db78:	9304      	str	r3, [sp, #16]
 800db7a:	e081      	b.n	800dc80 <_strtod_l+0x630>
 800db7c:	f018 0f01 	tst.w	r8, #1
 800db80:	d007      	beq.n	800db92 <_strtod_l+0x542>
 800db82:	4b1d      	ldr	r3, [pc, #116]	; (800dbf8 <_strtod_l+0x5a8>)
 800db84:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800db88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8c:	f7f2 fd44 	bl	8000618 <__aeabi_dmul>
 800db90:	2301      	movs	r3, #1
 800db92:	f109 0901 	add.w	r9, r9, #1
 800db96:	ea4f 0868 	mov.w	r8, r8, asr #1
 800db9a:	e7ca      	b.n	800db32 <_strtod_l+0x4e2>
 800db9c:	d0eb      	beq.n	800db76 <_strtod_l+0x526>
 800db9e:	f1c8 0800 	rsb	r8, r8, #0
 800dba2:	f018 020f 	ands.w	r2, r8, #15
 800dba6:	d00a      	beq.n	800dbbe <_strtod_l+0x56e>
 800dba8:	4b12      	ldr	r3, [pc, #72]	; (800dbf4 <_strtod_l+0x5a4>)
 800dbaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbae:	4650      	mov	r0, sl
 800dbb0:	4659      	mov	r1, fp
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fe59 	bl	800086c <__aeabi_ddiv>
 800dbba:	4682      	mov	sl, r0
 800dbbc:	468b      	mov	fp, r1
 800dbbe:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dbc2:	d0d8      	beq.n	800db76 <_strtod_l+0x526>
 800dbc4:	f1b8 0f1f 	cmp.w	r8, #31
 800dbc8:	dd1e      	ble.n	800dc08 <_strtod_l+0x5b8>
 800dbca:	2500      	movs	r5, #0
 800dbcc:	462e      	mov	r6, r5
 800dbce:	9509      	str	r5, [sp, #36]	; 0x24
 800dbd0:	9507      	str	r5, [sp, #28]
 800dbd2:	2322      	movs	r3, #34	; 0x22
 800dbd4:	f04f 0a00 	mov.w	sl, #0
 800dbd8:	f04f 0b00 	mov.w	fp, #0
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	e789      	b.n	800daf4 <_strtod_l+0x4a4>
 800dbe0:	08010a62 	.word	0x08010a62
 800dbe4:	08010aa4 	.word	0x08010aa4
 800dbe8:	08010a5a 	.word	0x08010a5a
 800dbec:	08010c20 	.word	0x08010c20
 800dbf0:	08010b1b 	.word	0x08010b1b
 800dbf4:	08010db8 	.word	0x08010db8
 800dbf8:	08010d90 	.word	0x08010d90
 800dbfc:	7ff00000 	.word	0x7ff00000
 800dc00:	7ca00000 	.word	0x7ca00000
 800dc04:	7fefffff 	.word	0x7fefffff
 800dc08:	f018 0310 	ands.w	r3, r8, #16
 800dc0c:	bf18      	it	ne
 800dc0e:	236a      	movne	r3, #106	; 0x6a
 800dc10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800dfc8 <_strtod_l+0x978>
 800dc14:	9304      	str	r3, [sp, #16]
 800dc16:	4650      	mov	r0, sl
 800dc18:	4659      	mov	r1, fp
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	f018 0f01 	tst.w	r8, #1
 800dc20:	d004      	beq.n	800dc2c <_strtod_l+0x5dc>
 800dc22:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dc26:	f7f2 fcf7 	bl	8000618 <__aeabi_dmul>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800dc30:	f109 0908 	add.w	r9, r9, #8
 800dc34:	d1f2      	bne.n	800dc1c <_strtod_l+0x5cc>
 800dc36:	b10b      	cbz	r3, 800dc3c <_strtod_l+0x5ec>
 800dc38:	4682      	mov	sl, r0
 800dc3a:	468b      	mov	fp, r1
 800dc3c:	9b04      	ldr	r3, [sp, #16]
 800dc3e:	b1bb      	cbz	r3, 800dc70 <_strtod_l+0x620>
 800dc40:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800dc44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	4659      	mov	r1, fp
 800dc4c:	dd10      	ble.n	800dc70 <_strtod_l+0x620>
 800dc4e:	2b1f      	cmp	r3, #31
 800dc50:	f340 8128 	ble.w	800dea4 <_strtod_l+0x854>
 800dc54:	2b34      	cmp	r3, #52	; 0x34
 800dc56:	bfde      	ittt	le
 800dc58:	3b20      	suble	r3, #32
 800dc5a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800dc5e:	fa02 f303 	lslle.w	r3, r2, r3
 800dc62:	f04f 0a00 	mov.w	sl, #0
 800dc66:	bfcc      	ite	gt
 800dc68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dc6c:	ea03 0b01 	andle.w	fp, r3, r1
 800dc70:	2200      	movs	r2, #0
 800dc72:	2300      	movs	r3, #0
 800dc74:	4650      	mov	r0, sl
 800dc76:	4659      	mov	r1, fp
 800dc78:	f7f2 ff36 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	d1a4      	bne.n	800dbca <_strtod_l+0x57a>
 800dc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dc86:	462b      	mov	r3, r5
 800dc88:	463a      	mov	r2, r7
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f001 ffb4 	bl	800fbf8 <__s2b>
 800dc90:	9009      	str	r0, [sp, #36]	; 0x24
 800dc92:	2800      	cmp	r0, #0
 800dc94:	f43f af24 	beq.w	800dae0 <_strtod_l+0x490>
 800dc98:	9b07      	ldr	r3, [sp, #28]
 800dc9a:	1b9e      	subs	r6, r3, r6
 800dc9c:	9b08      	ldr	r3, [sp, #32]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	bfb4      	ite	lt
 800dca2:	4633      	movlt	r3, r6
 800dca4:	2300      	movge	r3, #0
 800dca6:	9310      	str	r3, [sp, #64]	; 0x40
 800dca8:	9b08      	ldr	r3, [sp, #32]
 800dcaa:	2500      	movs	r5, #0
 800dcac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dcb0:	9318      	str	r3, [sp, #96]	; 0x60
 800dcb2:	462e      	mov	r6, r5
 800dcb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	6859      	ldr	r1, [r3, #4]
 800dcba:	f001 fef1 	bl	800faa0 <_Balloc>
 800dcbe:	9007      	str	r0, [sp, #28]
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	f43f af11 	beq.w	800dae8 <_strtod_l+0x498>
 800dcc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc8:	691a      	ldr	r2, [r3, #16]
 800dcca:	3202      	adds	r2, #2
 800dccc:	f103 010c 	add.w	r1, r3, #12
 800dcd0:	0092      	lsls	r2, r2, #2
 800dcd2:	300c      	adds	r0, #12
 800dcd4:	f7fe fb80 	bl	800c3d8 <memcpy>
 800dcd8:	ec4b ab10 	vmov	d0, sl, fp
 800dcdc:	aa20      	add	r2, sp, #128	; 0x80
 800dcde:	a91f      	add	r1, sp, #124	; 0x7c
 800dce0:	4620      	mov	r0, r4
 800dce2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dce6:	f002 fac3 	bl	8010270 <__d2b>
 800dcea:	901e      	str	r0, [sp, #120]	; 0x78
 800dcec:	2800      	cmp	r0, #0
 800dcee:	f43f aefb 	beq.w	800dae8 <_strtod_l+0x498>
 800dcf2:	2101      	movs	r1, #1
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f002 f819 	bl	800fd2c <__i2b>
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	f43f aef3 	beq.w	800dae8 <_strtod_l+0x498>
 800dd02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd04:	9904      	ldr	r1, [sp, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	bfab      	itete	ge
 800dd0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800dd0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800dd0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800dd10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800dd14:	bfac      	ite	ge
 800dd16:	eb03 0902 	addge.w	r9, r3, r2
 800dd1a:	1ad7      	sublt	r7, r2, r3
 800dd1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dd1e:	eba3 0801 	sub.w	r8, r3, r1
 800dd22:	4490      	add	r8, r2
 800dd24:	4ba3      	ldr	r3, [pc, #652]	; (800dfb4 <_strtod_l+0x964>)
 800dd26:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dd2a:	4598      	cmp	r8, r3
 800dd2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dd30:	f280 80cc 	bge.w	800decc <_strtod_l+0x87c>
 800dd34:	eba3 0308 	sub.w	r3, r3, r8
 800dd38:	2b1f      	cmp	r3, #31
 800dd3a:	eba2 0203 	sub.w	r2, r2, r3
 800dd3e:	f04f 0101 	mov.w	r1, #1
 800dd42:	f300 80b6 	bgt.w	800deb2 <_strtod_l+0x862>
 800dd46:	fa01 f303 	lsl.w	r3, r1, r3
 800dd4a:	9311      	str	r3, [sp, #68]	; 0x44
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	930c      	str	r3, [sp, #48]	; 0x30
 800dd50:	eb09 0802 	add.w	r8, r9, r2
 800dd54:	9b04      	ldr	r3, [sp, #16]
 800dd56:	45c1      	cmp	r9, r8
 800dd58:	4417      	add	r7, r2
 800dd5a:	441f      	add	r7, r3
 800dd5c:	464b      	mov	r3, r9
 800dd5e:	bfa8      	it	ge
 800dd60:	4643      	movge	r3, r8
 800dd62:	42bb      	cmp	r3, r7
 800dd64:	bfa8      	it	ge
 800dd66:	463b      	movge	r3, r7
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	bfc2      	ittt	gt
 800dd6c:	eba8 0803 	subgt.w	r8, r8, r3
 800dd70:	1aff      	subgt	r7, r7, r3
 800dd72:	eba9 0903 	subgt.w	r9, r9, r3
 800dd76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	dd17      	ble.n	800ddac <_strtod_l+0x75c>
 800dd7c:	4631      	mov	r1, r6
 800dd7e:	461a      	mov	r2, r3
 800dd80:	4620      	mov	r0, r4
 800dd82:	f002 f88f 	bl	800fea4 <__pow5mult>
 800dd86:	4606      	mov	r6, r0
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	f43f aead 	beq.w	800dae8 <_strtod_l+0x498>
 800dd8e:	4601      	mov	r1, r0
 800dd90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dd92:	4620      	mov	r0, r4
 800dd94:	f001 ffe0 	bl	800fd58 <__multiply>
 800dd98:	900f      	str	r0, [sp, #60]	; 0x3c
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	f43f aea4 	beq.w	800dae8 <_strtod_l+0x498>
 800dda0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dda2:	4620      	mov	r0, r4
 800dda4:	f001 febc 	bl	800fb20 <_Bfree>
 800dda8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddaa:	931e      	str	r3, [sp, #120]	; 0x78
 800ddac:	f1b8 0f00 	cmp.w	r8, #0
 800ddb0:	f300 8091 	bgt.w	800ded6 <_strtod_l+0x886>
 800ddb4:	9b08      	ldr	r3, [sp, #32]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	dd08      	ble.n	800ddcc <_strtod_l+0x77c>
 800ddba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ddbc:	9907      	ldr	r1, [sp, #28]
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f002 f870 	bl	800fea4 <__pow5mult>
 800ddc4:	9007      	str	r0, [sp, #28]
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	f43f ae8e 	beq.w	800dae8 <_strtod_l+0x498>
 800ddcc:	2f00      	cmp	r7, #0
 800ddce:	dd08      	ble.n	800dde2 <_strtod_l+0x792>
 800ddd0:	9907      	ldr	r1, [sp, #28]
 800ddd2:	463a      	mov	r2, r7
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f002 f8bf 	bl	800ff58 <__lshift>
 800ddda:	9007      	str	r0, [sp, #28]
 800dddc:	2800      	cmp	r0, #0
 800ddde:	f43f ae83 	beq.w	800dae8 <_strtod_l+0x498>
 800dde2:	f1b9 0f00 	cmp.w	r9, #0
 800dde6:	dd08      	ble.n	800ddfa <_strtod_l+0x7aa>
 800dde8:	4631      	mov	r1, r6
 800ddea:	464a      	mov	r2, r9
 800ddec:	4620      	mov	r0, r4
 800ddee:	f002 f8b3 	bl	800ff58 <__lshift>
 800ddf2:	4606      	mov	r6, r0
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	f43f ae77 	beq.w	800dae8 <_strtod_l+0x498>
 800ddfa:	9a07      	ldr	r2, [sp, #28]
 800ddfc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ddfe:	4620      	mov	r0, r4
 800de00:	f002 f932 	bl	8010068 <__mdiff>
 800de04:	4605      	mov	r5, r0
 800de06:	2800      	cmp	r0, #0
 800de08:	f43f ae6e 	beq.w	800dae8 <_strtod_l+0x498>
 800de0c:	68c3      	ldr	r3, [r0, #12]
 800de0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800de10:	2300      	movs	r3, #0
 800de12:	60c3      	str	r3, [r0, #12]
 800de14:	4631      	mov	r1, r6
 800de16:	f002 f90b 	bl	8010030 <__mcmp>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	da65      	bge.n	800deea <_strtod_l+0x89a>
 800de1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de20:	ea53 030a 	orrs.w	r3, r3, sl
 800de24:	f040 8087 	bne.w	800df36 <_strtod_l+0x8e6>
 800de28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f040 8082 	bne.w	800df36 <_strtod_l+0x8e6>
 800de32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de36:	0d1b      	lsrs	r3, r3, #20
 800de38:	051b      	lsls	r3, r3, #20
 800de3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800de3e:	d97a      	bls.n	800df36 <_strtod_l+0x8e6>
 800de40:	696b      	ldr	r3, [r5, #20]
 800de42:	b913      	cbnz	r3, 800de4a <_strtod_l+0x7fa>
 800de44:	692b      	ldr	r3, [r5, #16]
 800de46:	2b01      	cmp	r3, #1
 800de48:	dd75      	ble.n	800df36 <_strtod_l+0x8e6>
 800de4a:	4629      	mov	r1, r5
 800de4c:	2201      	movs	r2, #1
 800de4e:	4620      	mov	r0, r4
 800de50:	f002 f882 	bl	800ff58 <__lshift>
 800de54:	4631      	mov	r1, r6
 800de56:	4605      	mov	r5, r0
 800de58:	f002 f8ea 	bl	8010030 <__mcmp>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	dd6a      	ble.n	800df36 <_strtod_l+0x8e6>
 800de60:	9904      	ldr	r1, [sp, #16]
 800de62:	4a55      	ldr	r2, [pc, #340]	; (800dfb8 <_strtod_l+0x968>)
 800de64:	465b      	mov	r3, fp
 800de66:	2900      	cmp	r1, #0
 800de68:	f000 8085 	beq.w	800df76 <_strtod_l+0x926>
 800de6c:	ea02 010b 	and.w	r1, r2, fp
 800de70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800de74:	dc7f      	bgt.n	800df76 <_strtod_l+0x926>
 800de76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800de7a:	f77f aeaa 	ble.w	800dbd2 <_strtod_l+0x582>
 800de7e:	4a4f      	ldr	r2, [pc, #316]	; (800dfbc <_strtod_l+0x96c>)
 800de80:	2300      	movs	r3, #0
 800de82:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800de86:	4650      	mov	r0, sl
 800de88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800de8c:	4659      	mov	r1, fp
 800de8e:	f7f2 fbc3 	bl	8000618 <__aeabi_dmul>
 800de92:	460b      	mov	r3, r1
 800de94:	4303      	orrs	r3, r0
 800de96:	bf08      	it	eq
 800de98:	2322      	moveq	r3, #34	; 0x22
 800de9a:	4682      	mov	sl, r0
 800de9c:	468b      	mov	fp, r1
 800de9e:	bf08      	it	eq
 800dea0:	6023      	streq	r3, [r4, #0]
 800dea2:	e62b      	b.n	800dafc <_strtod_l+0x4ac>
 800dea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dea8:	fa02 f303 	lsl.w	r3, r2, r3
 800deac:	ea03 0a0a 	and.w	sl, r3, sl
 800deb0:	e6de      	b.n	800dc70 <_strtod_l+0x620>
 800deb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800deb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800deba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800debe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dec2:	fa01 f308 	lsl.w	r3, r1, r8
 800dec6:	930c      	str	r3, [sp, #48]	; 0x30
 800dec8:	9111      	str	r1, [sp, #68]	; 0x44
 800deca:	e741      	b.n	800dd50 <_strtod_l+0x700>
 800decc:	2300      	movs	r3, #0
 800dece:	930c      	str	r3, [sp, #48]	; 0x30
 800ded0:	2301      	movs	r3, #1
 800ded2:	9311      	str	r3, [sp, #68]	; 0x44
 800ded4:	e73c      	b.n	800dd50 <_strtod_l+0x700>
 800ded6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ded8:	4642      	mov	r2, r8
 800deda:	4620      	mov	r0, r4
 800dedc:	f002 f83c 	bl	800ff58 <__lshift>
 800dee0:	901e      	str	r0, [sp, #120]	; 0x78
 800dee2:	2800      	cmp	r0, #0
 800dee4:	f47f af66 	bne.w	800ddb4 <_strtod_l+0x764>
 800dee8:	e5fe      	b.n	800dae8 <_strtod_l+0x498>
 800deea:	465f      	mov	r7, fp
 800deec:	d16e      	bne.n	800dfcc <_strtod_l+0x97c>
 800deee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800def0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800def4:	b342      	cbz	r2, 800df48 <_strtod_l+0x8f8>
 800def6:	4a32      	ldr	r2, [pc, #200]	; (800dfc0 <_strtod_l+0x970>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d128      	bne.n	800df4e <_strtod_l+0x8fe>
 800defc:	9b04      	ldr	r3, [sp, #16]
 800defe:	4650      	mov	r0, sl
 800df00:	b1eb      	cbz	r3, 800df3e <_strtod_l+0x8ee>
 800df02:	4a2d      	ldr	r2, [pc, #180]	; (800dfb8 <_strtod_l+0x968>)
 800df04:	403a      	ands	r2, r7
 800df06:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800df0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800df0e:	d819      	bhi.n	800df44 <_strtod_l+0x8f4>
 800df10:	0d12      	lsrs	r2, r2, #20
 800df12:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800df16:	fa01 f303 	lsl.w	r3, r1, r3
 800df1a:	4298      	cmp	r0, r3
 800df1c:	d117      	bne.n	800df4e <_strtod_l+0x8fe>
 800df1e:	4b29      	ldr	r3, [pc, #164]	; (800dfc4 <_strtod_l+0x974>)
 800df20:	429f      	cmp	r7, r3
 800df22:	d102      	bne.n	800df2a <_strtod_l+0x8da>
 800df24:	3001      	adds	r0, #1
 800df26:	f43f addf 	beq.w	800dae8 <_strtod_l+0x498>
 800df2a:	4b23      	ldr	r3, [pc, #140]	; (800dfb8 <_strtod_l+0x968>)
 800df2c:	403b      	ands	r3, r7
 800df2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800df32:	f04f 0a00 	mov.w	sl, #0
 800df36:	9b04      	ldr	r3, [sp, #16]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1a0      	bne.n	800de7e <_strtod_l+0x82e>
 800df3c:	e5de      	b.n	800dafc <_strtod_l+0x4ac>
 800df3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df42:	e7ea      	b.n	800df1a <_strtod_l+0x8ca>
 800df44:	460b      	mov	r3, r1
 800df46:	e7e8      	b.n	800df1a <_strtod_l+0x8ca>
 800df48:	ea53 030a 	orrs.w	r3, r3, sl
 800df4c:	d088      	beq.n	800de60 <_strtod_l+0x810>
 800df4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df50:	b1db      	cbz	r3, 800df8a <_strtod_l+0x93a>
 800df52:	423b      	tst	r3, r7
 800df54:	d0ef      	beq.n	800df36 <_strtod_l+0x8e6>
 800df56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df58:	9a04      	ldr	r2, [sp, #16]
 800df5a:	4650      	mov	r0, sl
 800df5c:	4659      	mov	r1, fp
 800df5e:	b1c3      	cbz	r3, 800df92 <_strtod_l+0x942>
 800df60:	f7ff fb57 	bl	800d612 <sulp>
 800df64:	4602      	mov	r2, r0
 800df66:	460b      	mov	r3, r1
 800df68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df6c:	f7f2 f99e 	bl	80002ac <__adddf3>
 800df70:	4682      	mov	sl, r0
 800df72:	468b      	mov	fp, r1
 800df74:	e7df      	b.n	800df36 <_strtod_l+0x8e6>
 800df76:	4013      	ands	r3, r2
 800df78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800df7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800df80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800df84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800df88:	e7d5      	b.n	800df36 <_strtod_l+0x8e6>
 800df8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df8c:	ea13 0f0a 	tst.w	r3, sl
 800df90:	e7e0      	b.n	800df54 <_strtod_l+0x904>
 800df92:	f7ff fb3e 	bl	800d612 <sulp>
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df9e:	f7f2 f983 	bl	80002a8 <__aeabi_dsub>
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	4682      	mov	sl, r0
 800dfa8:	468b      	mov	fp, r1
 800dfaa:	f7f2 fd9d 	bl	8000ae8 <__aeabi_dcmpeq>
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d0c1      	beq.n	800df36 <_strtod_l+0x8e6>
 800dfb2:	e60e      	b.n	800dbd2 <_strtod_l+0x582>
 800dfb4:	fffffc02 	.word	0xfffffc02
 800dfb8:	7ff00000 	.word	0x7ff00000
 800dfbc:	39500000 	.word	0x39500000
 800dfc0:	000fffff 	.word	0x000fffff
 800dfc4:	7fefffff 	.word	0x7fefffff
 800dfc8:	08010ab8 	.word	0x08010ab8
 800dfcc:	4631      	mov	r1, r6
 800dfce:	4628      	mov	r0, r5
 800dfd0:	f002 f9aa 	bl	8010328 <__ratio>
 800dfd4:	ec59 8b10 	vmov	r8, r9, d0
 800dfd8:	ee10 0a10 	vmov	r0, s0
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dfe2:	4649      	mov	r1, r9
 800dfe4:	f7f2 fd94 	bl	8000b10 <__aeabi_dcmple>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d07c      	beq.n	800e0e6 <_strtod_l+0xa96>
 800dfec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d04c      	beq.n	800e08c <_strtod_l+0xa3c>
 800dff2:	4b95      	ldr	r3, [pc, #596]	; (800e248 <_strtod_l+0xbf8>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dffa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e248 <_strtod_l+0xbf8>
 800dffe:	f04f 0800 	mov.w	r8, #0
 800e002:	4b92      	ldr	r3, [pc, #584]	; (800e24c <_strtod_l+0xbfc>)
 800e004:	403b      	ands	r3, r7
 800e006:	9311      	str	r3, [sp, #68]	; 0x44
 800e008:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e00a:	4b91      	ldr	r3, [pc, #580]	; (800e250 <_strtod_l+0xc00>)
 800e00c:	429a      	cmp	r2, r3
 800e00e:	f040 80b2 	bne.w	800e176 <_strtod_l+0xb26>
 800e012:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e01a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e01e:	ec4b ab10 	vmov	d0, sl, fp
 800e022:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e026:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e02a:	f002 f8a5 	bl	8010178 <__ulp>
 800e02e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e032:	ec53 2b10 	vmov	r2, r3, d0
 800e036:	f7f2 faef 	bl	8000618 <__aeabi_dmul>
 800e03a:	4652      	mov	r2, sl
 800e03c:	465b      	mov	r3, fp
 800e03e:	f7f2 f935 	bl	80002ac <__adddf3>
 800e042:	460b      	mov	r3, r1
 800e044:	4981      	ldr	r1, [pc, #516]	; (800e24c <_strtod_l+0xbfc>)
 800e046:	4a83      	ldr	r2, [pc, #524]	; (800e254 <_strtod_l+0xc04>)
 800e048:	4019      	ands	r1, r3
 800e04a:	4291      	cmp	r1, r2
 800e04c:	4682      	mov	sl, r0
 800e04e:	d95e      	bls.n	800e10e <_strtod_l+0xabe>
 800e050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e052:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e056:	4293      	cmp	r3, r2
 800e058:	d103      	bne.n	800e062 <_strtod_l+0xa12>
 800e05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e05c:	3301      	adds	r3, #1
 800e05e:	f43f ad43 	beq.w	800dae8 <_strtod_l+0x498>
 800e062:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e260 <_strtod_l+0xc10>
 800e066:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e06a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e06c:	4620      	mov	r0, r4
 800e06e:	f001 fd57 	bl	800fb20 <_Bfree>
 800e072:	9907      	ldr	r1, [sp, #28]
 800e074:	4620      	mov	r0, r4
 800e076:	f001 fd53 	bl	800fb20 <_Bfree>
 800e07a:	4631      	mov	r1, r6
 800e07c:	4620      	mov	r0, r4
 800e07e:	f001 fd4f 	bl	800fb20 <_Bfree>
 800e082:	4629      	mov	r1, r5
 800e084:	4620      	mov	r0, r4
 800e086:	f001 fd4b 	bl	800fb20 <_Bfree>
 800e08a:	e613      	b.n	800dcb4 <_strtod_l+0x664>
 800e08c:	f1ba 0f00 	cmp.w	sl, #0
 800e090:	d11b      	bne.n	800e0ca <_strtod_l+0xa7a>
 800e092:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e096:	b9f3      	cbnz	r3, 800e0d6 <_strtod_l+0xa86>
 800e098:	4b6b      	ldr	r3, [pc, #428]	; (800e248 <_strtod_l+0xbf8>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	4640      	mov	r0, r8
 800e09e:	4649      	mov	r1, r9
 800e0a0:	f7f2 fd2c 	bl	8000afc <__aeabi_dcmplt>
 800e0a4:	b9d0      	cbnz	r0, 800e0dc <_strtod_l+0xa8c>
 800e0a6:	4640      	mov	r0, r8
 800e0a8:	4649      	mov	r1, r9
 800e0aa:	4b6b      	ldr	r3, [pc, #428]	; (800e258 <_strtod_l+0xc08>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f7f2 fab3 	bl	8000618 <__aeabi_dmul>
 800e0b2:	4680      	mov	r8, r0
 800e0b4:	4689      	mov	r9, r1
 800e0b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e0ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e0be:	931b      	str	r3, [sp, #108]	; 0x6c
 800e0c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e0c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e0c8:	e79b      	b.n	800e002 <_strtod_l+0x9b2>
 800e0ca:	f1ba 0f01 	cmp.w	sl, #1
 800e0ce:	d102      	bne.n	800e0d6 <_strtod_l+0xa86>
 800e0d0:	2f00      	cmp	r7, #0
 800e0d2:	f43f ad7e 	beq.w	800dbd2 <_strtod_l+0x582>
 800e0d6:	4b61      	ldr	r3, [pc, #388]	; (800e25c <_strtod_l+0xc0c>)
 800e0d8:	2200      	movs	r2, #0
 800e0da:	e78c      	b.n	800dff6 <_strtod_l+0x9a6>
 800e0dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e258 <_strtod_l+0xc08>
 800e0e0:	f04f 0800 	mov.w	r8, #0
 800e0e4:	e7e7      	b.n	800e0b6 <_strtod_l+0xa66>
 800e0e6:	4b5c      	ldr	r3, [pc, #368]	; (800e258 <_strtod_l+0xc08>)
 800e0e8:	4640      	mov	r0, r8
 800e0ea:	4649      	mov	r1, r9
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f7f2 fa93 	bl	8000618 <__aeabi_dmul>
 800e0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0f4:	4680      	mov	r8, r0
 800e0f6:	4689      	mov	r9, r1
 800e0f8:	b933      	cbnz	r3, 800e108 <_strtod_l+0xab8>
 800e0fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0fe:	9012      	str	r0, [sp, #72]	; 0x48
 800e100:	9313      	str	r3, [sp, #76]	; 0x4c
 800e102:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e106:	e7dd      	b.n	800e0c4 <_strtod_l+0xa74>
 800e108:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e10c:	e7f9      	b.n	800e102 <_strtod_l+0xab2>
 800e10e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e112:	9b04      	ldr	r3, [sp, #16]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1a8      	bne.n	800e06a <_strtod_l+0xa1a>
 800e118:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e11c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e11e:	0d1b      	lsrs	r3, r3, #20
 800e120:	051b      	lsls	r3, r3, #20
 800e122:	429a      	cmp	r2, r3
 800e124:	d1a1      	bne.n	800e06a <_strtod_l+0xa1a>
 800e126:	4640      	mov	r0, r8
 800e128:	4649      	mov	r1, r9
 800e12a:	f7f2 fdbd 	bl	8000ca8 <__aeabi_d2lz>
 800e12e:	f7f2 fa45 	bl	80005bc <__aeabi_l2d>
 800e132:	4602      	mov	r2, r0
 800e134:	460b      	mov	r3, r1
 800e136:	4640      	mov	r0, r8
 800e138:	4649      	mov	r1, r9
 800e13a:	f7f2 f8b5 	bl	80002a8 <__aeabi_dsub>
 800e13e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e140:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e144:	ea43 030a 	orr.w	r3, r3, sl
 800e148:	4313      	orrs	r3, r2
 800e14a:	4680      	mov	r8, r0
 800e14c:	4689      	mov	r9, r1
 800e14e:	d053      	beq.n	800e1f8 <_strtod_l+0xba8>
 800e150:	a335      	add	r3, pc, #212	; (adr r3, 800e228 <_strtod_l+0xbd8>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	f7f2 fcd1 	bl	8000afc <__aeabi_dcmplt>
 800e15a:	2800      	cmp	r0, #0
 800e15c:	f47f acce 	bne.w	800dafc <_strtod_l+0x4ac>
 800e160:	a333      	add	r3, pc, #204	; (adr r3, 800e230 <_strtod_l+0xbe0>)
 800e162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e166:	4640      	mov	r0, r8
 800e168:	4649      	mov	r1, r9
 800e16a:	f7f2 fce5 	bl	8000b38 <__aeabi_dcmpgt>
 800e16e:	2800      	cmp	r0, #0
 800e170:	f43f af7b 	beq.w	800e06a <_strtod_l+0xa1a>
 800e174:	e4c2      	b.n	800dafc <_strtod_l+0x4ac>
 800e176:	9b04      	ldr	r3, [sp, #16]
 800e178:	b333      	cbz	r3, 800e1c8 <_strtod_l+0xb78>
 800e17a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e17c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e180:	d822      	bhi.n	800e1c8 <_strtod_l+0xb78>
 800e182:	a32d      	add	r3, pc, #180	; (adr r3, 800e238 <_strtod_l+0xbe8>)
 800e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e188:	4640      	mov	r0, r8
 800e18a:	4649      	mov	r1, r9
 800e18c:	f7f2 fcc0 	bl	8000b10 <__aeabi_dcmple>
 800e190:	b1a0      	cbz	r0, 800e1bc <_strtod_l+0xb6c>
 800e192:	4649      	mov	r1, r9
 800e194:	4640      	mov	r0, r8
 800e196:	f7f2 fd17 	bl	8000bc8 <__aeabi_d2uiz>
 800e19a:	2801      	cmp	r0, #1
 800e19c:	bf38      	it	cc
 800e19e:	2001      	movcc	r0, #1
 800e1a0:	f7f2 f9c0 	bl	8000524 <__aeabi_ui2d>
 800e1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1a6:	4680      	mov	r8, r0
 800e1a8:	4689      	mov	r9, r1
 800e1aa:	bb13      	cbnz	r3, 800e1f2 <_strtod_l+0xba2>
 800e1ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1b0:	9014      	str	r0, [sp, #80]	; 0x50
 800e1b2:	9315      	str	r3, [sp, #84]	; 0x54
 800e1b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e1b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e1bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e1c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e1c4:	1a9b      	subs	r3, r3, r2
 800e1c6:	930d      	str	r3, [sp, #52]	; 0x34
 800e1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e1cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e1d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e1d4:	f001 ffd0 	bl	8010178 <__ulp>
 800e1d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e1dc:	ec53 2b10 	vmov	r2, r3, d0
 800e1e0:	f7f2 fa1a 	bl	8000618 <__aeabi_dmul>
 800e1e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e1e8:	f7f2 f860 	bl	80002ac <__adddf3>
 800e1ec:	4682      	mov	sl, r0
 800e1ee:	468b      	mov	fp, r1
 800e1f0:	e78f      	b.n	800e112 <_strtod_l+0xac2>
 800e1f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e1f6:	e7dd      	b.n	800e1b4 <_strtod_l+0xb64>
 800e1f8:	a311      	add	r3, pc, #68	; (adr r3, 800e240 <_strtod_l+0xbf0>)
 800e1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fe:	f7f2 fc7d 	bl	8000afc <__aeabi_dcmplt>
 800e202:	e7b4      	b.n	800e16e <_strtod_l+0xb1e>
 800e204:	2300      	movs	r3, #0
 800e206:	930e      	str	r3, [sp, #56]	; 0x38
 800e208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e20a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e20c:	6013      	str	r3, [r2, #0]
 800e20e:	f7ff ba65 	b.w	800d6dc <_strtod_l+0x8c>
 800e212:	2b65      	cmp	r3, #101	; 0x65
 800e214:	f43f ab5d 	beq.w	800d8d2 <_strtod_l+0x282>
 800e218:	2b45      	cmp	r3, #69	; 0x45
 800e21a:	f43f ab5a 	beq.w	800d8d2 <_strtod_l+0x282>
 800e21e:	2201      	movs	r2, #1
 800e220:	f7ff bb92 	b.w	800d948 <_strtod_l+0x2f8>
 800e224:	f3af 8000 	nop.w
 800e228:	94a03595 	.word	0x94a03595
 800e22c:	3fdfffff 	.word	0x3fdfffff
 800e230:	35afe535 	.word	0x35afe535
 800e234:	3fe00000 	.word	0x3fe00000
 800e238:	ffc00000 	.word	0xffc00000
 800e23c:	41dfffff 	.word	0x41dfffff
 800e240:	94a03595 	.word	0x94a03595
 800e244:	3fcfffff 	.word	0x3fcfffff
 800e248:	3ff00000 	.word	0x3ff00000
 800e24c:	7ff00000 	.word	0x7ff00000
 800e250:	7fe00000 	.word	0x7fe00000
 800e254:	7c9fffff 	.word	0x7c9fffff
 800e258:	3fe00000 	.word	0x3fe00000
 800e25c:	bff00000 	.word	0xbff00000
 800e260:	7fefffff 	.word	0x7fefffff

0800e264 <_strtod_r>:
 800e264:	4b01      	ldr	r3, [pc, #4]	; (800e26c <_strtod_r+0x8>)
 800e266:	f7ff b9f3 	b.w	800d650 <_strtod_l>
 800e26a:	bf00      	nop
 800e26c:	20000080 	.word	0x20000080

0800e270 <_strtol_l.isra.0>:
 800e270:	2b01      	cmp	r3, #1
 800e272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e276:	d001      	beq.n	800e27c <_strtol_l.isra.0+0xc>
 800e278:	2b24      	cmp	r3, #36	; 0x24
 800e27a:	d906      	bls.n	800e28a <_strtol_l.isra.0+0x1a>
 800e27c:	f7fd fe40 	bl	800bf00 <__errno>
 800e280:	2316      	movs	r3, #22
 800e282:	6003      	str	r3, [r0, #0]
 800e284:	2000      	movs	r0, #0
 800e286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e28a:	4f3a      	ldr	r7, [pc, #232]	; (800e374 <_strtol_l.isra.0+0x104>)
 800e28c:	468e      	mov	lr, r1
 800e28e:	4676      	mov	r6, lr
 800e290:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e294:	5de5      	ldrb	r5, [r4, r7]
 800e296:	f015 0508 	ands.w	r5, r5, #8
 800e29a:	d1f8      	bne.n	800e28e <_strtol_l.isra.0+0x1e>
 800e29c:	2c2d      	cmp	r4, #45	; 0x2d
 800e29e:	d134      	bne.n	800e30a <_strtol_l.isra.0+0x9a>
 800e2a0:	f89e 4000 	ldrb.w	r4, [lr]
 800e2a4:	f04f 0801 	mov.w	r8, #1
 800e2a8:	f106 0e02 	add.w	lr, r6, #2
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d05c      	beq.n	800e36a <_strtol_l.isra.0+0xfa>
 800e2b0:	2b10      	cmp	r3, #16
 800e2b2:	d10c      	bne.n	800e2ce <_strtol_l.isra.0+0x5e>
 800e2b4:	2c30      	cmp	r4, #48	; 0x30
 800e2b6:	d10a      	bne.n	800e2ce <_strtol_l.isra.0+0x5e>
 800e2b8:	f89e 4000 	ldrb.w	r4, [lr]
 800e2bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e2c0:	2c58      	cmp	r4, #88	; 0x58
 800e2c2:	d14d      	bne.n	800e360 <_strtol_l.isra.0+0xf0>
 800e2c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e2c8:	2310      	movs	r3, #16
 800e2ca:	f10e 0e02 	add.w	lr, lr, #2
 800e2ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e2d2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800e2d6:	2600      	movs	r6, #0
 800e2d8:	fbbc f9f3 	udiv	r9, ip, r3
 800e2dc:	4635      	mov	r5, r6
 800e2de:	fb03 ca19 	mls	sl, r3, r9, ip
 800e2e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e2e6:	2f09      	cmp	r7, #9
 800e2e8:	d818      	bhi.n	800e31c <_strtol_l.isra.0+0xac>
 800e2ea:	463c      	mov	r4, r7
 800e2ec:	42a3      	cmp	r3, r4
 800e2ee:	dd24      	ble.n	800e33a <_strtol_l.isra.0+0xca>
 800e2f0:	2e00      	cmp	r6, #0
 800e2f2:	db1f      	blt.n	800e334 <_strtol_l.isra.0+0xc4>
 800e2f4:	45a9      	cmp	r9, r5
 800e2f6:	d31d      	bcc.n	800e334 <_strtol_l.isra.0+0xc4>
 800e2f8:	d101      	bne.n	800e2fe <_strtol_l.isra.0+0x8e>
 800e2fa:	45a2      	cmp	sl, r4
 800e2fc:	db1a      	blt.n	800e334 <_strtol_l.isra.0+0xc4>
 800e2fe:	fb05 4503 	mla	r5, r5, r3, r4
 800e302:	2601      	movs	r6, #1
 800e304:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e308:	e7eb      	b.n	800e2e2 <_strtol_l.isra.0+0x72>
 800e30a:	2c2b      	cmp	r4, #43	; 0x2b
 800e30c:	bf08      	it	eq
 800e30e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e312:	46a8      	mov	r8, r5
 800e314:	bf08      	it	eq
 800e316:	f106 0e02 	addeq.w	lr, r6, #2
 800e31a:	e7c7      	b.n	800e2ac <_strtol_l.isra.0+0x3c>
 800e31c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e320:	2f19      	cmp	r7, #25
 800e322:	d801      	bhi.n	800e328 <_strtol_l.isra.0+0xb8>
 800e324:	3c37      	subs	r4, #55	; 0x37
 800e326:	e7e1      	b.n	800e2ec <_strtol_l.isra.0+0x7c>
 800e328:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e32c:	2f19      	cmp	r7, #25
 800e32e:	d804      	bhi.n	800e33a <_strtol_l.isra.0+0xca>
 800e330:	3c57      	subs	r4, #87	; 0x57
 800e332:	e7db      	b.n	800e2ec <_strtol_l.isra.0+0x7c>
 800e334:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e338:	e7e4      	b.n	800e304 <_strtol_l.isra.0+0x94>
 800e33a:	2e00      	cmp	r6, #0
 800e33c:	da05      	bge.n	800e34a <_strtol_l.isra.0+0xda>
 800e33e:	2322      	movs	r3, #34	; 0x22
 800e340:	6003      	str	r3, [r0, #0]
 800e342:	4665      	mov	r5, ip
 800e344:	b942      	cbnz	r2, 800e358 <_strtol_l.isra.0+0xe8>
 800e346:	4628      	mov	r0, r5
 800e348:	e79d      	b.n	800e286 <_strtol_l.isra.0+0x16>
 800e34a:	f1b8 0f00 	cmp.w	r8, #0
 800e34e:	d000      	beq.n	800e352 <_strtol_l.isra.0+0xe2>
 800e350:	426d      	negs	r5, r5
 800e352:	2a00      	cmp	r2, #0
 800e354:	d0f7      	beq.n	800e346 <_strtol_l.isra.0+0xd6>
 800e356:	b10e      	cbz	r6, 800e35c <_strtol_l.isra.0+0xec>
 800e358:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800e35c:	6011      	str	r1, [r2, #0]
 800e35e:	e7f2      	b.n	800e346 <_strtol_l.isra.0+0xd6>
 800e360:	2430      	movs	r4, #48	; 0x30
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1b3      	bne.n	800e2ce <_strtol_l.isra.0+0x5e>
 800e366:	2308      	movs	r3, #8
 800e368:	e7b1      	b.n	800e2ce <_strtol_l.isra.0+0x5e>
 800e36a:	2c30      	cmp	r4, #48	; 0x30
 800e36c:	d0a4      	beq.n	800e2b8 <_strtol_l.isra.0+0x48>
 800e36e:	230a      	movs	r3, #10
 800e370:	e7ad      	b.n	800e2ce <_strtol_l.isra.0+0x5e>
 800e372:	bf00      	nop
 800e374:	08010b1d 	.word	0x08010b1d

0800e378 <_strtol_r>:
 800e378:	f7ff bf7a 	b.w	800e270 <_strtol_l.isra.0>

0800e37c <_vsniprintf_r>:
 800e37c:	b530      	push	{r4, r5, lr}
 800e37e:	1e14      	subs	r4, r2, #0
 800e380:	4605      	mov	r5, r0
 800e382:	b09b      	sub	sp, #108	; 0x6c
 800e384:	4618      	mov	r0, r3
 800e386:	da05      	bge.n	800e394 <_vsniprintf_r+0x18>
 800e388:	238b      	movs	r3, #139	; 0x8b
 800e38a:	602b      	str	r3, [r5, #0]
 800e38c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e390:	b01b      	add	sp, #108	; 0x6c
 800e392:	bd30      	pop	{r4, r5, pc}
 800e394:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e398:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e39c:	bf14      	ite	ne
 800e39e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e3a2:	4623      	moveq	r3, r4
 800e3a4:	9302      	str	r3, [sp, #8]
 800e3a6:	9305      	str	r3, [sp, #20]
 800e3a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3ac:	9100      	str	r1, [sp, #0]
 800e3ae:	9104      	str	r1, [sp, #16]
 800e3b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e3b8:	4669      	mov	r1, sp
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	f002 f8ac 	bl	8010518 <_svfiprintf_r>
 800e3c0:	1c43      	adds	r3, r0, #1
 800e3c2:	bfbc      	itt	lt
 800e3c4:	238b      	movlt	r3, #139	; 0x8b
 800e3c6:	602b      	strlt	r3, [r5, #0]
 800e3c8:	2c00      	cmp	r4, #0
 800e3ca:	d0e1      	beq.n	800e390 <_vsniprintf_r+0x14>
 800e3cc:	9b00      	ldr	r3, [sp, #0]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	701a      	strb	r2, [r3, #0]
 800e3d2:	e7dd      	b.n	800e390 <_vsniprintf_r+0x14>

0800e3d4 <vsniprintf>:
 800e3d4:	b507      	push	{r0, r1, r2, lr}
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	4613      	mov	r3, r2
 800e3da:	460a      	mov	r2, r1
 800e3dc:	4601      	mov	r1, r0
 800e3de:	4803      	ldr	r0, [pc, #12]	; (800e3ec <vsniprintf+0x18>)
 800e3e0:	6800      	ldr	r0, [r0, #0]
 800e3e2:	f7ff ffcb 	bl	800e37c <_vsniprintf_r>
 800e3e6:	b003      	add	sp, #12
 800e3e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3ec:	20000018 	.word	0x20000018

0800e3f0 <__swbuf_r>:
 800e3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f2:	460e      	mov	r6, r1
 800e3f4:	4614      	mov	r4, r2
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	b118      	cbz	r0, 800e402 <__swbuf_r+0x12>
 800e3fa:	6983      	ldr	r3, [r0, #24]
 800e3fc:	b90b      	cbnz	r3, 800e402 <__swbuf_r+0x12>
 800e3fe:	f7fd fe9f 	bl	800c140 <__sinit>
 800e402:	4b21      	ldr	r3, [pc, #132]	; (800e488 <__swbuf_r+0x98>)
 800e404:	429c      	cmp	r4, r3
 800e406:	d12b      	bne.n	800e460 <__swbuf_r+0x70>
 800e408:	686c      	ldr	r4, [r5, #4]
 800e40a:	69a3      	ldr	r3, [r4, #24]
 800e40c:	60a3      	str	r3, [r4, #8]
 800e40e:	89a3      	ldrh	r3, [r4, #12]
 800e410:	071a      	lsls	r2, r3, #28
 800e412:	d52f      	bpl.n	800e474 <__swbuf_r+0x84>
 800e414:	6923      	ldr	r3, [r4, #16]
 800e416:	b36b      	cbz	r3, 800e474 <__swbuf_r+0x84>
 800e418:	6923      	ldr	r3, [r4, #16]
 800e41a:	6820      	ldr	r0, [r4, #0]
 800e41c:	1ac0      	subs	r0, r0, r3
 800e41e:	6963      	ldr	r3, [r4, #20]
 800e420:	b2f6      	uxtb	r6, r6
 800e422:	4283      	cmp	r3, r0
 800e424:	4637      	mov	r7, r6
 800e426:	dc04      	bgt.n	800e432 <__swbuf_r+0x42>
 800e428:	4621      	mov	r1, r4
 800e42a:	4628      	mov	r0, r5
 800e42c:	f7fd fdf4 	bl	800c018 <_fflush_r>
 800e430:	bb30      	cbnz	r0, 800e480 <__swbuf_r+0x90>
 800e432:	68a3      	ldr	r3, [r4, #8]
 800e434:	3b01      	subs	r3, #1
 800e436:	60a3      	str	r3, [r4, #8]
 800e438:	6823      	ldr	r3, [r4, #0]
 800e43a:	1c5a      	adds	r2, r3, #1
 800e43c:	6022      	str	r2, [r4, #0]
 800e43e:	701e      	strb	r6, [r3, #0]
 800e440:	6963      	ldr	r3, [r4, #20]
 800e442:	3001      	adds	r0, #1
 800e444:	4283      	cmp	r3, r0
 800e446:	d004      	beq.n	800e452 <__swbuf_r+0x62>
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	07db      	lsls	r3, r3, #31
 800e44c:	d506      	bpl.n	800e45c <__swbuf_r+0x6c>
 800e44e:	2e0a      	cmp	r6, #10
 800e450:	d104      	bne.n	800e45c <__swbuf_r+0x6c>
 800e452:	4621      	mov	r1, r4
 800e454:	4628      	mov	r0, r5
 800e456:	f7fd fddf 	bl	800c018 <_fflush_r>
 800e45a:	b988      	cbnz	r0, 800e480 <__swbuf_r+0x90>
 800e45c:	4638      	mov	r0, r7
 800e45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e460:	4b0a      	ldr	r3, [pc, #40]	; (800e48c <__swbuf_r+0x9c>)
 800e462:	429c      	cmp	r4, r3
 800e464:	d101      	bne.n	800e46a <__swbuf_r+0x7a>
 800e466:	68ac      	ldr	r4, [r5, #8]
 800e468:	e7cf      	b.n	800e40a <__swbuf_r+0x1a>
 800e46a:	4b09      	ldr	r3, [pc, #36]	; (800e490 <__swbuf_r+0xa0>)
 800e46c:	429c      	cmp	r4, r3
 800e46e:	bf08      	it	eq
 800e470:	68ec      	ldreq	r4, [r5, #12]
 800e472:	e7ca      	b.n	800e40a <__swbuf_r+0x1a>
 800e474:	4621      	mov	r1, r4
 800e476:	4628      	mov	r0, r5
 800e478:	f000 f81e 	bl	800e4b8 <__swsetup_r>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d0cb      	beq.n	800e418 <__swbuf_r+0x28>
 800e480:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e484:	e7ea      	b.n	800e45c <__swbuf_r+0x6c>
 800e486:	bf00      	nop
 800e488:	08010a00 	.word	0x08010a00
 800e48c:	08010a20 	.word	0x08010a20
 800e490:	080109e0 	.word	0x080109e0

0800e494 <_write_r>:
 800e494:	b538      	push	{r3, r4, r5, lr}
 800e496:	4d07      	ldr	r5, [pc, #28]	; (800e4b4 <_write_r+0x20>)
 800e498:	4604      	mov	r4, r0
 800e49a:	4608      	mov	r0, r1
 800e49c:	4611      	mov	r1, r2
 800e49e:	2200      	movs	r2, #0
 800e4a0:	602a      	str	r2, [r5, #0]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	f7fa f8ca 	bl	800863c <_write>
 800e4a8:	1c43      	adds	r3, r0, #1
 800e4aa:	d102      	bne.n	800e4b2 <_write_r+0x1e>
 800e4ac:	682b      	ldr	r3, [r5, #0]
 800e4ae:	b103      	cbz	r3, 800e4b2 <_write_r+0x1e>
 800e4b0:	6023      	str	r3, [r4, #0]
 800e4b2:	bd38      	pop	{r3, r4, r5, pc}
 800e4b4:	200081d8 	.word	0x200081d8

0800e4b8 <__swsetup_r>:
 800e4b8:	4b32      	ldr	r3, [pc, #200]	; (800e584 <__swsetup_r+0xcc>)
 800e4ba:	b570      	push	{r4, r5, r6, lr}
 800e4bc:	681d      	ldr	r5, [r3, #0]
 800e4be:	4606      	mov	r6, r0
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	b125      	cbz	r5, 800e4ce <__swsetup_r+0x16>
 800e4c4:	69ab      	ldr	r3, [r5, #24]
 800e4c6:	b913      	cbnz	r3, 800e4ce <__swsetup_r+0x16>
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	f7fd fe39 	bl	800c140 <__sinit>
 800e4ce:	4b2e      	ldr	r3, [pc, #184]	; (800e588 <__swsetup_r+0xd0>)
 800e4d0:	429c      	cmp	r4, r3
 800e4d2:	d10f      	bne.n	800e4f4 <__swsetup_r+0x3c>
 800e4d4:	686c      	ldr	r4, [r5, #4]
 800e4d6:	89a3      	ldrh	r3, [r4, #12]
 800e4d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4dc:	0719      	lsls	r1, r3, #28
 800e4de:	d42c      	bmi.n	800e53a <__swsetup_r+0x82>
 800e4e0:	06dd      	lsls	r5, r3, #27
 800e4e2:	d411      	bmi.n	800e508 <__swsetup_r+0x50>
 800e4e4:	2309      	movs	r3, #9
 800e4e6:	6033      	str	r3, [r6, #0]
 800e4e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4ec:	81a3      	strh	r3, [r4, #12]
 800e4ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4f2:	e03e      	b.n	800e572 <__swsetup_r+0xba>
 800e4f4:	4b25      	ldr	r3, [pc, #148]	; (800e58c <__swsetup_r+0xd4>)
 800e4f6:	429c      	cmp	r4, r3
 800e4f8:	d101      	bne.n	800e4fe <__swsetup_r+0x46>
 800e4fa:	68ac      	ldr	r4, [r5, #8]
 800e4fc:	e7eb      	b.n	800e4d6 <__swsetup_r+0x1e>
 800e4fe:	4b24      	ldr	r3, [pc, #144]	; (800e590 <__swsetup_r+0xd8>)
 800e500:	429c      	cmp	r4, r3
 800e502:	bf08      	it	eq
 800e504:	68ec      	ldreq	r4, [r5, #12]
 800e506:	e7e6      	b.n	800e4d6 <__swsetup_r+0x1e>
 800e508:	0758      	lsls	r0, r3, #29
 800e50a:	d512      	bpl.n	800e532 <__swsetup_r+0x7a>
 800e50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e50e:	b141      	cbz	r1, 800e522 <__swsetup_r+0x6a>
 800e510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e514:	4299      	cmp	r1, r3
 800e516:	d002      	beq.n	800e51e <__swsetup_r+0x66>
 800e518:	4630      	mov	r0, r6
 800e51a:	f7fd ff83 	bl	800c424 <_free_r>
 800e51e:	2300      	movs	r3, #0
 800e520:	6363      	str	r3, [r4, #52]	; 0x34
 800e522:	89a3      	ldrh	r3, [r4, #12]
 800e524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e528:	81a3      	strh	r3, [r4, #12]
 800e52a:	2300      	movs	r3, #0
 800e52c:	6063      	str	r3, [r4, #4]
 800e52e:	6923      	ldr	r3, [r4, #16]
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	89a3      	ldrh	r3, [r4, #12]
 800e534:	f043 0308 	orr.w	r3, r3, #8
 800e538:	81a3      	strh	r3, [r4, #12]
 800e53a:	6923      	ldr	r3, [r4, #16]
 800e53c:	b94b      	cbnz	r3, 800e552 <__swsetup_r+0x9a>
 800e53e:	89a3      	ldrh	r3, [r4, #12]
 800e540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e548:	d003      	beq.n	800e552 <__swsetup_r+0x9a>
 800e54a:	4621      	mov	r1, r4
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7fd fef3 	bl	800c338 <__smakebuf_r>
 800e552:	89a0      	ldrh	r0, [r4, #12]
 800e554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e558:	f010 0301 	ands.w	r3, r0, #1
 800e55c:	d00a      	beq.n	800e574 <__swsetup_r+0xbc>
 800e55e:	2300      	movs	r3, #0
 800e560:	60a3      	str	r3, [r4, #8]
 800e562:	6963      	ldr	r3, [r4, #20]
 800e564:	425b      	negs	r3, r3
 800e566:	61a3      	str	r3, [r4, #24]
 800e568:	6923      	ldr	r3, [r4, #16]
 800e56a:	b943      	cbnz	r3, 800e57e <__swsetup_r+0xc6>
 800e56c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e570:	d1ba      	bne.n	800e4e8 <__swsetup_r+0x30>
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	0781      	lsls	r1, r0, #30
 800e576:	bf58      	it	pl
 800e578:	6963      	ldrpl	r3, [r4, #20]
 800e57a:	60a3      	str	r3, [r4, #8]
 800e57c:	e7f4      	b.n	800e568 <__swsetup_r+0xb0>
 800e57e:	2000      	movs	r0, #0
 800e580:	e7f7      	b.n	800e572 <__swsetup_r+0xba>
 800e582:	bf00      	nop
 800e584:	20000018 	.word	0x20000018
 800e588:	08010a00 	.word	0x08010a00
 800e58c:	08010a20 	.word	0x08010a20
 800e590:	080109e0 	.word	0x080109e0

0800e594 <__assert_func>:
 800e594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e596:	4614      	mov	r4, r2
 800e598:	461a      	mov	r2, r3
 800e59a:	4b09      	ldr	r3, [pc, #36]	; (800e5c0 <__assert_func+0x2c>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4605      	mov	r5, r0
 800e5a0:	68d8      	ldr	r0, [r3, #12]
 800e5a2:	b14c      	cbz	r4, 800e5b8 <__assert_func+0x24>
 800e5a4:	4b07      	ldr	r3, [pc, #28]	; (800e5c4 <__assert_func+0x30>)
 800e5a6:	9100      	str	r1, [sp, #0]
 800e5a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5ac:	4906      	ldr	r1, [pc, #24]	; (800e5c8 <__assert_func+0x34>)
 800e5ae:	462b      	mov	r3, r5
 800e5b0:	f7fd fe44 	bl	800c23c <fiprintf>
 800e5b4:	f002 f8eb 	bl	801078e <abort>
 800e5b8:	4b04      	ldr	r3, [pc, #16]	; (800e5cc <__assert_func+0x38>)
 800e5ba:	461c      	mov	r4, r3
 800e5bc:	e7f3      	b.n	800e5a6 <__assert_func+0x12>
 800e5be:	bf00      	nop
 800e5c0:	20000018 	.word	0x20000018
 800e5c4:	08010ae0 	.word	0x08010ae0
 800e5c8:	08010aed 	.word	0x08010aed
 800e5cc:	08010b1b 	.word	0x08010b1b

0800e5d0 <_close_r>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	4d06      	ldr	r5, [pc, #24]	; (800e5ec <_close_r+0x1c>)
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	4608      	mov	r0, r1
 800e5da:	602b      	str	r3, [r5, #0]
 800e5dc:	f002 f92a 	bl	8010834 <_close>
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	d102      	bne.n	800e5ea <_close_r+0x1a>
 800e5e4:	682b      	ldr	r3, [r5, #0]
 800e5e6:	b103      	cbz	r3, 800e5ea <_close_r+0x1a>
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	bd38      	pop	{r3, r4, r5, pc}
 800e5ec:	200081d8 	.word	0x200081d8

0800e5f0 <quorem>:
 800e5f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	6903      	ldr	r3, [r0, #16]
 800e5f6:	690c      	ldr	r4, [r1, #16]
 800e5f8:	42a3      	cmp	r3, r4
 800e5fa:	4607      	mov	r7, r0
 800e5fc:	f2c0 8081 	blt.w	800e702 <quorem+0x112>
 800e600:	3c01      	subs	r4, #1
 800e602:	f101 0814 	add.w	r8, r1, #20
 800e606:	f100 0514 	add.w	r5, r0, #20
 800e60a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e614:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e618:	3301      	adds	r3, #1
 800e61a:	429a      	cmp	r2, r3
 800e61c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e620:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e624:	fbb2 f6f3 	udiv	r6, r2, r3
 800e628:	d331      	bcc.n	800e68e <quorem+0x9e>
 800e62a:	f04f 0e00 	mov.w	lr, #0
 800e62e:	4640      	mov	r0, r8
 800e630:	46ac      	mov	ip, r5
 800e632:	46f2      	mov	sl, lr
 800e634:	f850 2b04 	ldr.w	r2, [r0], #4
 800e638:	b293      	uxth	r3, r2
 800e63a:	fb06 e303 	mla	r3, r6, r3, lr
 800e63e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e642:	b29b      	uxth	r3, r3
 800e644:	ebaa 0303 	sub.w	r3, sl, r3
 800e648:	0c12      	lsrs	r2, r2, #16
 800e64a:	f8dc a000 	ldr.w	sl, [ip]
 800e64e:	fb06 e202 	mla	r2, r6, r2, lr
 800e652:	fa13 f38a 	uxtah	r3, r3, sl
 800e656:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e65a:	fa1f fa82 	uxth.w	sl, r2
 800e65e:	f8dc 2000 	ldr.w	r2, [ip]
 800e662:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e666:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e670:	4581      	cmp	r9, r0
 800e672:	f84c 3b04 	str.w	r3, [ip], #4
 800e676:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e67a:	d2db      	bcs.n	800e634 <quorem+0x44>
 800e67c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e680:	b92b      	cbnz	r3, 800e68e <quorem+0x9e>
 800e682:	9b01      	ldr	r3, [sp, #4]
 800e684:	3b04      	subs	r3, #4
 800e686:	429d      	cmp	r5, r3
 800e688:	461a      	mov	r2, r3
 800e68a:	d32e      	bcc.n	800e6ea <quorem+0xfa>
 800e68c:	613c      	str	r4, [r7, #16]
 800e68e:	4638      	mov	r0, r7
 800e690:	f001 fcce 	bl	8010030 <__mcmp>
 800e694:	2800      	cmp	r0, #0
 800e696:	db24      	blt.n	800e6e2 <quorem+0xf2>
 800e698:	3601      	adds	r6, #1
 800e69a:	4628      	mov	r0, r5
 800e69c:	f04f 0c00 	mov.w	ip, #0
 800e6a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e6a4:	f8d0 e000 	ldr.w	lr, [r0]
 800e6a8:	b293      	uxth	r3, r2
 800e6aa:	ebac 0303 	sub.w	r3, ip, r3
 800e6ae:	0c12      	lsrs	r2, r2, #16
 800e6b0:	fa13 f38e 	uxtah	r3, r3, lr
 800e6b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e6b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6c2:	45c1      	cmp	r9, r8
 800e6c4:	f840 3b04 	str.w	r3, [r0], #4
 800e6c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e6cc:	d2e8      	bcs.n	800e6a0 <quorem+0xb0>
 800e6ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e6d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e6d6:	b922      	cbnz	r2, 800e6e2 <quorem+0xf2>
 800e6d8:	3b04      	subs	r3, #4
 800e6da:	429d      	cmp	r5, r3
 800e6dc:	461a      	mov	r2, r3
 800e6de:	d30a      	bcc.n	800e6f6 <quorem+0x106>
 800e6e0:	613c      	str	r4, [r7, #16]
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	b003      	add	sp, #12
 800e6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ea:	6812      	ldr	r2, [r2, #0]
 800e6ec:	3b04      	subs	r3, #4
 800e6ee:	2a00      	cmp	r2, #0
 800e6f0:	d1cc      	bne.n	800e68c <quorem+0x9c>
 800e6f2:	3c01      	subs	r4, #1
 800e6f4:	e7c7      	b.n	800e686 <quorem+0x96>
 800e6f6:	6812      	ldr	r2, [r2, #0]
 800e6f8:	3b04      	subs	r3, #4
 800e6fa:	2a00      	cmp	r2, #0
 800e6fc:	d1f0      	bne.n	800e6e0 <quorem+0xf0>
 800e6fe:	3c01      	subs	r4, #1
 800e700:	e7eb      	b.n	800e6da <quorem+0xea>
 800e702:	2000      	movs	r0, #0
 800e704:	e7ee      	b.n	800e6e4 <quorem+0xf4>
	...

0800e708 <_dtoa_r>:
 800e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	ed2d 8b02 	vpush	{d8}
 800e710:	ec57 6b10 	vmov	r6, r7, d0
 800e714:	b095      	sub	sp, #84	; 0x54
 800e716:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e718:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e71c:	9105      	str	r1, [sp, #20]
 800e71e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e722:	4604      	mov	r4, r0
 800e724:	9209      	str	r2, [sp, #36]	; 0x24
 800e726:	930f      	str	r3, [sp, #60]	; 0x3c
 800e728:	b975      	cbnz	r5, 800e748 <_dtoa_r+0x40>
 800e72a:	2010      	movs	r0, #16
 800e72c:	f7fd fe44 	bl	800c3b8 <malloc>
 800e730:	4602      	mov	r2, r0
 800e732:	6260      	str	r0, [r4, #36]	; 0x24
 800e734:	b920      	cbnz	r0, 800e740 <_dtoa_r+0x38>
 800e736:	4bb2      	ldr	r3, [pc, #712]	; (800ea00 <_dtoa_r+0x2f8>)
 800e738:	21ea      	movs	r1, #234	; 0xea
 800e73a:	48b2      	ldr	r0, [pc, #712]	; (800ea04 <_dtoa_r+0x2fc>)
 800e73c:	f7ff ff2a 	bl	800e594 <__assert_func>
 800e740:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e744:	6005      	str	r5, [r0, #0]
 800e746:	60c5      	str	r5, [r0, #12]
 800e748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e74a:	6819      	ldr	r1, [r3, #0]
 800e74c:	b151      	cbz	r1, 800e764 <_dtoa_r+0x5c>
 800e74e:	685a      	ldr	r2, [r3, #4]
 800e750:	604a      	str	r2, [r1, #4]
 800e752:	2301      	movs	r3, #1
 800e754:	4093      	lsls	r3, r2
 800e756:	608b      	str	r3, [r1, #8]
 800e758:	4620      	mov	r0, r4
 800e75a:	f001 f9e1 	bl	800fb20 <_Bfree>
 800e75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e760:	2200      	movs	r2, #0
 800e762:	601a      	str	r2, [r3, #0]
 800e764:	1e3b      	subs	r3, r7, #0
 800e766:	bfb9      	ittee	lt
 800e768:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e76c:	9303      	strlt	r3, [sp, #12]
 800e76e:	2300      	movge	r3, #0
 800e770:	f8c8 3000 	strge.w	r3, [r8]
 800e774:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e778:	4ba3      	ldr	r3, [pc, #652]	; (800ea08 <_dtoa_r+0x300>)
 800e77a:	bfbc      	itt	lt
 800e77c:	2201      	movlt	r2, #1
 800e77e:	f8c8 2000 	strlt.w	r2, [r8]
 800e782:	ea33 0309 	bics.w	r3, r3, r9
 800e786:	d11b      	bne.n	800e7c0 <_dtoa_r+0xb8>
 800e788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e78a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e78e:	6013      	str	r3, [r2, #0]
 800e790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e794:	4333      	orrs	r3, r6
 800e796:	f000 857a 	beq.w	800f28e <_dtoa_r+0xb86>
 800e79a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e79c:	b963      	cbnz	r3, 800e7b8 <_dtoa_r+0xb0>
 800e79e:	4b9b      	ldr	r3, [pc, #620]	; (800ea0c <_dtoa_r+0x304>)
 800e7a0:	e024      	b.n	800e7ec <_dtoa_r+0xe4>
 800e7a2:	4b9b      	ldr	r3, [pc, #620]	; (800ea10 <_dtoa_r+0x308>)
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	3308      	adds	r3, #8
 800e7a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7aa:	6013      	str	r3, [r2, #0]
 800e7ac:	9800      	ldr	r0, [sp, #0]
 800e7ae:	b015      	add	sp, #84	; 0x54
 800e7b0:	ecbd 8b02 	vpop	{d8}
 800e7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b8:	4b94      	ldr	r3, [pc, #592]	; (800ea0c <_dtoa_r+0x304>)
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	3303      	adds	r3, #3
 800e7be:	e7f3      	b.n	800e7a8 <_dtoa_r+0xa0>
 800e7c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	ec51 0b17 	vmov	r0, r1, d7
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e7d0:	f7f2 f98a 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7d4:	4680      	mov	r8, r0
 800e7d6:	b158      	cbz	r0, 800e7f0 <_dtoa_r+0xe8>
 800e7d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e7da:	2301      	movs	r3, #1
 800e7dc:	6013      	str	r3, [r2, #0]
 800e7de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	f000 8551 	beq.w	800f288 <_dtoa_r+0xb80>
 800e7e6:	488b      	ldr	r0, [pc, #556]	; (800ea14 <_dtoa_r+0x30c>)
 800e7e8:	6018      	str	r0, [r3, #0]
 800e7ea:	1e43      	subs	r3, r0, #1
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	e7dd      	b.n	800e7ac <_dtoa_r+0xa4>
 800e7f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e7f4:	aa12      	add	r2, sp, #72	; 0x48
 800e7f6:	a913      	add	r1, sp, #76	; 0x4c
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f001 fd39 	bl	8010270 <__d2b>
 800e7fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e802:	4683      	mov	fp, r0
 800e804:	2d00      	cmp	r5, #0
 800e806:	d07c      	beq.n	800e902 <_dtoa_r+0x1fa>
 800e808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e80a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e80e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e812:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e816:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e81a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e81e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e822:	4b7d      	ldr	r3, [pc, #500]	; (800ea18 <_dtoa_r+0x310>)
 800e824:	2200      	movs	r2, #0
 800e826:	4630      	mov	r0, r6
 800e828:	4639      	mov	r1, r7
 800e82a:	f7f1 fd3d 	bl	80002a8 <__aeabi_dsub>
 800e82e:	a36e      	add	r3, pc, #440	; (adr r3, 800e9e8 <_dtoa_r+0x2e0>)
 800e830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e834:	f7f1 fef0 	bl	8000618 <__aeabi_dmul>
 800e838:	a36d      	add	r3, pc, #436	; (adr r3, 800e9f0 <_dtoa_r+0x2e8>)
 800e83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83e:	f7f1 fd35 	bl	80002ac <__adddf3>
 800e842:	4606      	mov	r6, r0
 800e844:	4628      	mov	r0, r5
 800e846:	460f      	mov	r7, r1
 800e848:	f7f1 fe7c 	bl	8000544 <__aeabi_i2d>
 800e84c:	a36a      	add	r3, pc, #424	; (adr r3, 800e9f8 <_dtoa_r+0x2f0>)
 800e84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e852:	f7f1 fee1 	bl	8000618 <__aeabi_dmul>
 800e856:	4602      	mov	r2, r0
 800e858:	460b      	mov	r3, r1
 800e85a:	4630      	mov	r0, r6
 800e85c:	4639      	mov	r1, r7
 800e85e:	f7f1 fd25 	bl	80002ac <__adddf3>
 800e862:	4606      	mov	r6, r0
 800e864:	460f      	mov	r7, r1
 800e866:	f7f2 f987 	bl	8000b78 <__aeabi_d2iz>
 800e86a:	2200      	movs	r2, #0
 800e86c:	4682      	mov	sl, r0
 800e86e:	2300      	movs	r3, #0
 800e870:	4630      	mov	r0, r6
 800e872:	4639      	mov	r1, r7
 800e874:	f7f2 f942 	bl	8000afc <__aeabi_dcmplt>
 800e878:	b148      	cbz	r0, 800e88e <_dtoa_r+0x186>
 800e87a:	4650      	mov	r0, sl
 800e87c:	f7f1 fe62 	bl	8000544 <__aeabi_i2d>
 800e880:	4632      	mov	r2, r6
 800e882:	463b      	mov	r3, r7
 800e884:	f7f2 f930 	bl	8000ae8 <__aeabi_dcmpeq>
 800e888:	b908      	cbnz	r0, 800e88e <_dtoa_r+0x186>
 800e88a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e88e:	f1ba 0f16 	cmp.w	sl, #22
 800e892:	d854      	bhi.n	800e93e <_dtoa_r+0x236>
 800e894:	4b61      	ldr	r3, [pc, #388]	; (800ea1c <_dtoa_r+0x314>)
 800e896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8a2:	f7f2 f92b 	bl	8000afc <__aeabi_dcmplt>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d04b      	beq.n	800e942 <_dtoa_r+0x23a>
 800e8aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	930e      	str	r3, [sp, #56]	; 0x38
 800e8b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8b4:	1b5d      	subs	r5, r3, r5
 800e8b6:	1e6b      	subs	r3, r5, #1
 800e8b8:	9304      	str	r3, [sp, #16]
 800e8ba:	bf43      	ittte	mi
 800e8bc:	2300      	movmi	r3, #0
 800e8be:	f1c5 0801 	rsbmi	r8, r5, #1
 800e8c2:	9304      	strmi	r3, [sp, #16]
 800e8c4:	f04f 0800 	movpl.w	r8, #0
 800e8c8:	f1ba 0f00 	cmp.w	sl, #0
 800e8cc:	db3b      	blt.n	800e946 <_dtoa_r+0x23e>
 800e8ce:	9b04      	ldr	r3, [sp, #16]
 800e8d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e8d4:	4453      	add	r3, sl
 800e8d6:	9304      	str	r3, [sp, #16]
 800e8d8:	2300      	movs	r3, #0
 800e8da:	9306      	str	r3, [sp, #24]
 800e8dc:	9b05      	ldr	r3, [sp, #20]
 800e8de:	2b09      	cmp	r3, #9
 800e8e0:	d869      	bhi.n	800e9b6 <_dtoa_r+0x2ae>
 800e8e2:	2b05      	cmp	r3, #5
 800e8e4:	bfc4      	itt	gt
 800e8e6:	3b04      	subgt	r3, #4
 800e8e8:	9305      	strgt	r3, [sp, #20]
 800e8ea:	9b05      	ldr	r3, [sp, #20]
 800e8ec:	f1a3 0302 	sub.w	r3, r3, #2
 800e8f0:	bfcc      	ite	gt
 800e8f2:	2500      	movgt	r5, #0
 800e8f4:	2501      	movle	r5, #1
 800e8f6:	2b03      	cmp	r3, #3
 800e8f8:	d869      	bhi.n	800e9ce <_dtoa_r+0x2c6>
 800e8fa:	e8df f003 	tbb	[pc, r3]
 800e8fe:	4e2c      	.short	0x4e2c
 800e900:	5a4c      	.short	0x5a4c
 800e902:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e906:	441d      	add	r5, r3
 800e908:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e90c:	2b20      	cmp	r3, #32
 800e90e:	bfc1      	itttt	gt
 800e910:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e914:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e918:	fa09 f303 	lslgt.w	r3, r9, r3
 800e91c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e920:	bfda      	itte	le
 800e922:	f1c3 0320 	rsble	r3, r3, #32
 800e926:	fa06 f003 	lslle.w	r0, r6, r3
 800e92a:	4318      	orrgt	r0, r3
 800e92c:	f7f1 fdfa 	bl	8000524 <__aeabi_ui2d>
 800e930:	2301      	movs	r3, #1
 800e932:	4606      	mov	r6, r0
 800e934:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e938:	3d01      	subs	r5, #1
 800e93a:	9310      	str	r3, [sp, #64]	; 0x40
 800e93c:	e771      	b.n	800e822 <_dtoa_r+0x11a>
 800e93e:	2301      	movs	r3, #1
 800e940:	e7b6      	b.n	800e8b0 <_dtoa_r+0x1a8>
 800e942:	900e      	str	r0, [sp, #56]	; 0x38
 800e944:	e7b5      	b.n	800e8b2 <_dtoa_r+0x1aa>
 800e946:	f1ca 0300 	rsb	r3, sl, #0
 800e94a:	9306      	str	r3, [sp, #24]
 800e94c:	2300      	movs	r3, #0
 800e94e:	eba8 080a 	sub.w	r8, r8, sl
 800e952:	930d      	str	r3, [sp, #52]	; 0x34
 800e954:	e7c2      	b.n	800e8dc <_dtoa_r+0x1d4>
 800e956:	2300      	movs	r3, #0
 800e958:	9308      	str	r3, [sp, #32]
 800e95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	dc39      	bgt.n	800e9d4 <_dtoa_r+0x2cc>
 800e960:	f04f 0901 	mov.w	r9, #1
 800e964:	f8cd 9004 	str.w	r9, [sp, #4]
 800e968:	464b      	mov	r3, r9
 800e96a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e96e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e970:	2200      	movs	r2, #0
 800e972:	6042      	str	r2, [r0, #4]
 800e974:	2204      	movs	r2, #4
 800e976:	f102 0614 	add.w	r6, r2, #20
 800e97a:	429e      	cmp	r6, r3
 800e97c:	6841      	ldr	r1, [r0, #4]
 800e97e:	d92f      	bls.n	800e9e0 <_dtoa_r+0x2d8>
 800e980:	4620      	mov	r0, r4
 800e982:	f001 f88d 	bl	800faa0 <_Balloc>
 800e986:	9000      	str	r0, [sp, #0]
 800e988:	2800      	cmp	r0, #0
 800e98a:	d14b      	bne.n	800ea24 <_dtoa_r+0x31c>
 800e98c:	4b24      	ldr	r3, [pc, #144]	; (800ea20 <_dtoa_r+0x318>)
 800e98e:	4602      	mov	r2, r0
 800e990:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e994:	e6d1      	b.n	800e73a <_dtoa_r+0x32>
 800e996:	2301      	movs	r3, #1
 800e998:	e7de      	b.n	800e958 <_dtoa_r+0x250>
 800e99a:	2300      	movs	r3, #0
 800e99c:	9308      	str	r3, [sp, #32]
 800e99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9a0:	eb0a 0903 	add.w	r9, sl, r3
 800e9a4:	f109 0301 	add.w	r3, r9, #1
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	9301      	str	r3, [sp, #4]
 800e9ac:	bfb8      	it	lt
 800e9ae:	2301      	movlt	r3, #1
 800e9b0:	e7dd      	b.n	800e96e <_dtoa_r+0x266>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e7f2      	b.n	800e99c <_dtoa_r+0x294>
 800e9b6:	2501      	movs	r5, #1
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	9305      	str	r3, [sp, #20]
 800e9bc:	9508      	str	r5, [sp, #32]
 800e9be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9c8:	2312      	movs	r3, #18
 800e9ca:	9209      	str	r2, [sp, #36]	; 0x24
 800e9cc:	e7cf      	b.n	800e96e <_dtoa_r+0x266>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	9308      	str	r3, [sp, #32]
 800e9d2:	e7f4      	b.n	800e9be <_dtoa_r+0x2b6>
 800e9d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e9d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9dc:	464b      	mov	r3, r9
 800e9de:	e7c6      	b.n	800e96e <_dtoa_r+0x266>
 800e9e0:	3101      	adds	r1, #1
 800e9e2:	6041      	str	r1, [r0, #4]
 800e9e4:	0052      	lsls	r2, r2, #1
 800e9e6:	e7c6      	b.n	800e976 <_dtoa_r+0x26e>
 800e9e8:	636f4361 	.word	0x636f4361
 800e9ec:	3fd287a7 	.word	0x3fd287a7
 800e9f0:	8b60c8b3 	.word	0x8b60c8b3
 800e9f4:	3fc68a28 	.word	0x3fc68a28
 800e9f8:	509f79fb 	.word	0x509f79fb
 800e9fc:	3fd34413 	.word	0x3fd34413
 800ea00:	08010c2a 	.word	0x08010c2a
 800ea04:	08010c41 	.word	0x08010c41
 800ea08:	7ff00000 	.word	0x7ff00000
 800ea0c:	08010c26 	.word	0x08010c26
 800ea10:	08010c1d 	.word	0x08010c1d
 800ea14:	08010a66 	.word	0x08010a66
 800ea18:	3ff80000 	.word	0x3ff80000
 800ea1c:	08010db8 	.word	0x08010db8
 800ea20:	08010ca0 	.word	0x08010ca0
 800ea24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea26:	9a00      	ldr	r2, [sp, #0]
 800ea28:	601a      	str	r2, [r3, #0]
 800ea2a:	9b01      	ldr	r3, [sp, #4]
 800ea2c:	2b0e      	cmp	r3, #14
 800ea2e:	f200 80ad 	bhi.w	800eb8c <_dtoa_r+0x484>
 800ea32:	2d00      	cmp	r5, #0
 800ea34:	f000 80aa 	beq.w	800eb8c <_dtoa_r+0x484>
 800ea38:	f1ba 0f00 	cmp.w	sl, #0
 800ea3c:	dd36      	ble.n	800eaac <_dtoa_r+0x3a4>
 800ea3e:	4ac3      	ldr	r2, [pc, #780]	; (800ed4c <_dtoa_r+0x644>)
 800ea40:	f00a 030f 	and.w	r3, sl, #15
 800ea44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea48:	ed93 7b00 	vldr	d7, [r3]
 800ea4c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ea50:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ea54:	eeb0 8a47 	vmov.f32	s16, s14
 800ea58:	eef0 8a67 	vmov.f32	s17, s15
 800ea5c:	d016      	beq.n	800ea8c <_dtoa_r+0x384>
 800ea5e:	4bbc      	ldr	r3, [pc, #752]	; (800ed50 <_dtoa_r+0x648>)
 800ea60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ea64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea68:	f7f1 ff00 	bl	800086c <__aeabi_ddiv>
 800ea6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea70:	f007 070f 	and.w	r7, r7, #15
 800ea74:	2503      	movs	r5, #3
 800ea76:	4eb6      	ldr	r6, [pc, #728]	; (800ed50 <_dtoa_r+0x648>)
 800ea78:	b957      	cbnz	r7, 800ea90 <_dtoa_r+0x388>
 800ea7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea7e:	ec53 2b18 	vmov	r2, r3, d8
 800ea82:	f7f1 fef3 	bl	800086c <__aeabi_ddiv>
 800ea86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea8a:	e029      	b.n	800eae0 <_dtoa_r+0x3d8>
 800ea8c:	2502      	movs	r5, #2
 800ea8e:	e7f2      	b.n	800ea76 <_dtoa_r+0x36e>
 800ea90:	07f9      	lsls	r1, r7, #31
 800ea92:	d508      	bpl.n	800eaa6 <_dtoa_r+0x39e>
 800ea94:	ec51 0b18 	vmov	r0, r1, d8
 800ea98:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ea9c:	f7f1 fdbc 	bl	8000618 <__aeabi_dmul>
 800eaa0:	ec41 0b18 	vmov	d8, r0, r1
 800eaa4:	3501      	adds	r5, #1
 800eaa6:	107f      	asrs	r7, r7, #1
 800eaa8:	3608      	adds	r6, #8
 800eaaa:	e7e5      	b.n	800ea78 <_dtoa_r+0x370>
 800eaac:	f000 80a6 	beq.w	800ebfc <_dtoa_r+0x4f4>
 800eab0:	f1ca 0600 	rsb	r6, sl, #0
 800eab4:	4ba5      	ldr	r3, [pc, #660]	; (800ed4c <_dtoa_r+0x644>)
 800eab6:	4fa6      	ldr	r7, [pc, #664]	; (800ed50 <_dtoa_r+0x648>)
 800eab8:	f006 020f 	and.w	r2, r6, #15
 800eabc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eac8:	f7f1 fda6 	bl	8000618 <__aeabi_dmul>
 800eacc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ead0:	1136      	asrs	r6, r6, #4
 800ead2:	2300      	movs	r3, #0
 800ead4:	2502      	movs	r5, #2
 800ead6:	2e00      	cmp	r6, #0
 800ead8:	f040 8085 	bne.w	800ebe6 <_dtoa_r+0x4de>
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1d2      	bne.n	800ea86 <_dtoa_r+0x37e>
 800eae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 808c 	beq.w	800ec00 <_dtoa_r+0x4f8>
 800eae8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eaec:	4b99      	ldr	r3, [pc, #612]	; (800ed54 <_dtoa_r+0x64c>)
 800eaee:	2200      	movs	r2, #0
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	4639      	mov	r1, r7
 800eaf4:	f7f2 f802 	bl	8000afc <__aeabi_dcmplt>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	f000 8081 	beq.w	800ec00 <_dtoa_r+0x4f8>
 800eafe:	9b01      	ldr	r3, [sp, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d07d      	beq.n	800ec00 <_dtoa_r+0x4f8>
 800eb04:	f1b9 0f00 	cmp.w	r9, #0
 800eb08:	dd3c      	ble.n	800eb84 <_dtoa_r+0x47c>
 800eb0a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800eb0e:	9307      	str	r3, [sp, #28]
 800eb10:	2200      	movs	r2, #0
 800eb12:	4b91      	ldr	r3, [pc, #580]	; (800ed58 <_dtoa_r+0x650>)
 800eb14:	4630      	mov	r0, r6
 800eb16:	4639      	mov	r1, r7
 800eb18:	f7f1 fd7e 	bl	8000618 <__aeabi_dmul>
 800eb1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb20:	3501      	adds	r5, #1
 800eb22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800eb26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	f7f1 fd0a 	bl	8000544 <__aeabi_i2d>
 800eb30:	4632      	mov	r2, r6
 800eb32:	463b      	mov	r3, r7
 800eb34:	f7f1 fd70 	bl	8000618 <__aeabi_dmul>
 800eb38:	4b88      	ldr	r3, [pc, #544]	; (800ed5c <_dtoa_r+0x654>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f7f1 fbb6 	bl	80002ac <__adddf3>
 800eb40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eb44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb48:	9303      	str	r3, [sp, #12]
 800eb4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d15c      	bne.n	800ec0a <_dtoa_r+0x502>
 800eb50:	4b83      	ldr	r3, [pc, #524]	; (800ed60 <_dtoa_r+0x658>)
 800eb52:	2200      	movs	r2, #0
 800eb54:	4630      	mov	r0, r6
 800eb56:	4639      	mov	r1, r7
 800eb58:	f7f1 fba6 	bl	80002a8 <__aeabi_dsub>
 800eb5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb60:	4606      	mov	r6, r0
 800eb62:	460f      	mov	r7, r1
 800eb64:	f7f1 ffe8 	bl	8000b38 <__aeabi_dcmpgt>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	f040 8296 	bne.w	800f09a <_dtoa_r+0x992>
 800eb6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eb72:	4630      	mov	r0, r6
 800eb74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb78:	4639      	mov	r1, r7
 800eb7a:	f7f1 ffbf 	bl	8000afc <__aeabi_dcmplt>
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	f040 8288 	bne.w	800f094 <_dtoa_r+0x98c>
 800eb84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eb88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f2c0 8158 	blt.w	800ee44 <_dtoa_r+0x73c>
 800eb94:	f1ba 0f0e 	cmp.w	sl, #14
 800eb98:	f300 8154 	bgt.w	800ee44 <_dtoa_r+0x73c>
 800eb9c:	4b6b      	ldr	r3, [pc, #428]	; (800ed4c <_dtoa_r+0x644>)
 800eb9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eba2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f280 80e3 	bge.w	800ed74 <_dtoa_r+0x66c>
 800ebae:	9b01      	ldr	r3, [sp, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	f300 80df 	bgt.w	800ed74 <_dtoa_r+0x66c>
 800ebb6:	f040 826d 	bne.w	800f094 <_dtoa_r+0x98c>
 800ebba:	4b69      	ldr	r3, [pc, #420]	; (800ed60 <_dtoa_r+0x658>)
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	f7f1 fd29 	bl	8000618 <__aeabi_dmul>
 800ebc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebca:	f7f1 ffab 	bl	8000b24 <__aeabi_dcmpge>
 800ebce:	9e01      	ldr	r6, [sp, #4]
 800ebd0:	4637      	mov	r7, r6
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	f040 8243 	bne.w	800f05e <_dtoa_r+0x956>
 800ebd8:	9d00      	ldr	r5, [sp, #0]
 800ebda:	2331      	movs	r3, #49	; 0x31
 800ebdc:	f805 3b01 	strb.w	r3, [r5], #1
 800ebe0:	f10a 0a01 	add.w	sl, sl, #1
 800ebe4:	e23f      	b.n	800f066 <_dtoa_r+0x95e>
 800ebe6:	07f2      	lsls	r2, r6, #31
 800ebe8:	d505      	bpl.n	800ebf6 <_dtoa_r+0x4ee>
 800ebea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebee:	f7f1 fd13 	bl	8000618 <__aeabi_dmul>
 800ebf2:	3501      	adds	r5, #1
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	1076      	asrs	r6, r6, #1
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	e76c      	b.n	800ead6 <_dtoa_r+0x3ce>
 800ebfc:	2502      	movs	r5, #2
 800ebfe:	e76f      	b.n	800eae0 <_dtoa_r+0x3d8>
 800ec00:	9b01      	ldr	r3, [sp, #4]
 800ec02:	f8cd a01c 	str.w	sl, [sp, #28]
 800ec06:	930c      	str	r3, [sp, #48]	; 0x30
 800ec08:	e78d      	b.n	800eb26 <_dtoa_r+0x41e>
 800ec0a:	9900      	ldr	r1, [sp, #0]
 800ec0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ec0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec10:	4b4e      	ldr	r3, [pc, #312]	; (800ed4c <_dtoa_r+0x644>)
 800ec12:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec16:	4401      	add	r1, r0
 800ec18:	9102      	str	r1, [sp, #8]
 800ec1a:	9908      	ldr	r1, [sp, #32]
 800ec1c:	eeb0 8a47 	vmov.f32	s16, s14
 800ec20:	eef0 8a67 	vmov.f32	s17, s15
 800ec24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec2c:	2900      	cmp	r1, #0
 800ec2e:	d045      	beq.n	800ecbc <_dtoa_r+0x5b4>
 800ec30:	494c      	ldr	r1, [pc, #304]	; (800ed64 <_dtoa_r+0x65c>)
 800ec32:	2000      	movs	r0, #0
 800ec34:	f7f1 fe1a 	bl	800086c <__aeabi_ddiv>
 800ec38:	ec53 2b18 	vmov	r2, r3, d8
 800ec3c:	f7f1 fb34 	bl	80002a8 <__aeabi_dsub>
 800ec40:	9d00      	ldr	r5, [sp, #0]
 800ec42:	ec41 0b18 	vmov	d8, r0, r1
 800ec46:	4639      	mov	r1, r7
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f7f1 ff95 	bl	8000b78 <__aeabi_d2iz>
 800ec4e:	900c      	str	r0, [sp, #48]	; 0x30
 800ec50:	f7f1 fc78 	bl	8000544 <__aeabi_i2d>
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	4630      	mov	r0, r6
 800ec5a:	4639      	mov	r1, r7
 800ec5c:	f7f1 fb24 	bl	80002a8 <__aeabi_dsub>
 800ec60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec62:	3330      	adds	r3, #48	; 0x30
 800ec64:	f805 3b01 	strb.w	r3, [r5], #1
 800ec68:	ec53 2b18 	vmov	r2, r3, d8
 800ec6c:	4606      	mov	r6, r0
 800ec6e:	460f      	mov	r7, r1
 800ec70:	f7f1 ff44 	bl	8000afc <__aeabi_dcmplt>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d165      	bne.n	800ed44 <_dtoa_r+0x63c>
 800ec78:	4632      	mov	r2, r6
 800ec7a:	463b      	mov	r3, r7
 800ec7c:	4935      	ldr	r1, [pc, #212]	; (800ed54 <_dtoa_r+0x64c>)
 800ec7e:	2000      	movs	r0, #0
 800ec80:	f7f1 fb12 	bl	80002a8 <__aeabi_dsub>
 800ec84:	ec53 2b18 	vmov	r2, r3, d8
 800ec88:	f7f1 ff38 	bl	8000afc <__aeabi_dcmplt>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f040 80b9 	bne.w	800ee04 <_dtoa_r+0x6fc>
 800ec92:	9b02      	ldr	r3, [sp, #8]
 800ec94:	429d      	cmp	r5, r3
 800ec96:	f43f af75 	beq.w	800eb84 <_dtoa_r+0x47c>
 800ec9a:	4b2f      	ldr	r3, [pc, #188]	; (800ed58 <_dtoa_r+0x650>)
 800ec9c:	ec51 0b18 	vmov	r0, r1, d8
 800eca0:	2200      	movs	r2, #0
 800eca2:	f7f1 fcb9 	bl	8000618 <__aeabi_dmul>
 800eca6:	4b2c      	ldr	r3, [pc, #176]	; (800ed58 <_dtoa_r+0x650>)
 800eca8:	ec41 0b18 	vmov	d8, r0, r1
 800ecac:	2200      	movs	r2, #0
 800ecae:	4630      	mov	r0, r6
 800ecb0:	4639      	mov	r1, r7
 800ecb2:	f7f1 fcb1 	bl	8000618 <__aeabi_dmul>
 800ecb6:	4606      	mov	r6, r0
 800ecb8:	460f      	mov	r7, r1
 800ecba:	e7c4      	b.n	800ec46 <_dtoa_r+0x53e>
 800ecbc:	ec51 0b17 	vmov	r0, r1, d7
 800ecc0:	f7f1 fcaa 	bl	8000618 <__aeabi_dmul>
 800ecc4:	9b02      	ldr	r3, [sp, #8]
 800ecc6:	9d00      	ldr	r5, [sp, #0]
 800ecc8:	930c      	str	r3, [sp, #48]	; 0x30
 800ecca:	ec41 0b18 	vmov	d8, r0, r1
 800ecce:	4639      	mov	r1, r7
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f7f1 ff51 	bl	8000b78 <__aeabi_d2iz>
 800ecd6:	9011      	str	r0, [sp, #68]	; 0x44
 800ecd8:	f7f1 fc34 	bl	8000544 <__aeabi_i2d>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	460b      	mov	r3, r1
 800ece0:	4630      	mov	r0, r6
 800ece2:	4639      	mov	r1, r7
 800ece4:	f7f1 fae0 	bl	80002a8 <__aeabi_dsub>
 800ece8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecea:	3330      	adds	r3, #48	; 0x30
 800ecec:	f805 3b01 	strb.w	r3, [r5], #1
 800ecf0:	9b02      	ldr	r3, [sp, #8]
 800ecf2:	429d      	cmp	r5, r3
 800ecf4:	4606      	mov	r6, r0
 800ecf6:	460f      	mov	r7, r1
 800ecf8:	f04f 0200 	mov.w	r2, #0
 800ecfc:	d134      	bne.n	800ed68 <_dtoa_r+0x660>
 800ecfe:	4b19      	ldr	r3, [pc, #100]	; (800ed64 <_dtoa_r+0x65c>)
 800ed00:	ec51 0b18 	vmov	r0, r1, d8
 800ed04:	f7f1 fad2 	bl	80002ac <__adddf3>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	4639      	mov	r1, r7
 800ed10:	f7f1 ff12 	bl	8000b38 <__aeabi_dcmpgt>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d175      	bne.n	800ee04 <_dtoa_r+0x6fc>
 800ed18:	ec53 2b18 	vmov	r2, r3, d8
 800ed1c:	4911      	ldr	r1, [pc, #68]	; (800ed64 <_dtoa_r+0x65c>)
 800ed1e:	2000      	movs	r0, #0
 800ed20:	f7f1 fac2 	bl	80002a8 <__aeabi_dsub>
 800ed24:	4602      	mov	r2, r0
 800ed26:	460b      	mov	r3, r1
 800ed28:	4630      	mov	r0, r6
 800ed2a:	4639      	mov	r1, r7
 800ed2c:	f7f1 fee6 	bl	8000afc <__aeabi_dcmplt>
 800ed30:	2800      	cmp	r0, #0
 800ed32:	f43f af27 	beq.w	800eb84 <_dtoa_r+0x47c>
 800ed36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed38:	1e6b      	subs	r3, r5, #1
 800ed3a:	930c      	str	r3, [sp, #48]	; 0x30
 800ed3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed40:	2b30      	cmp	r3, #48	; 0x30
 800ed42:	d0f8      	beq.n	800ed36 <_dtoa_r+0x62e>
 800ed44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ed48:	e04a      	b.n	800ede0 <_dtoa_r+0x6d8>
 800ed4a:	bf00      	nop
 800ed4c:	08010db8 	.word	0x08010db8
 800ed50:	08010d90 	.word	0x08010d90
 800ed54:	3ff00000 	.word	0x3ff00000
 800ed58:	40240000 	.word	0x40240000
 800ed5c:	401c0000 	.word	0x401c0000
 800ed60:	40140000 	.word	0x40140000
 800ed64:	3fe00000 	.word	0x3fe00000
 800ed68:	4baf      	ldr	r3, [pc, #700]	; (800f028 <_dtoa_r+0x920>)
 800ed6a:	f7f1 fc55 	bl	8000618 <__aeabi_dmul>
 800ed6e:	4606      	mov	r6, r0
 800ed70:	460f      	mov	r7, r1
 800ed72:	e7ac      	b.n	800ecce <_dtoa_r+0x5c6>
 800ed74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ed78:	9d00      	ldr	r5, [sp, #0]
 800ed7a:	4642      	mov	r2, r8
 800ed7c:	464b      	mov	r3, r9
 800ed7e:	4630      	mov	r0, r6
 800ed80:	4639      	mov	r1, r7
 800ed82:	f7f1 fd73 	bl	800086c <__aeabi_ddiv>
 800ed86:	f7f1 fef7 	bl	8000b78 <__aeabi_d2iz>
 800ed8a:	9002      	str	r0, [sp, #8]
 800ed8c:	f7f1 fbda 	bl	8000544 <__aeabi_i2d>
 800ed90:	4642      	mov	r2, r8
 800ed92:	464b      	mov	r3, r9
 800ed94:	f7f1 fc40 	bl	8000618 <__aeabi_dmul>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	4639      	mov	r1, r7
 800eda0:	f7f1 fa82 	bl	80002a8 <__aeabi_dsub>
 800eda4:	9e02      	ldr	r6, [sp, #8]
 800eda6:	9f01      	ldr	r7, [sp, #4]
 800eda8:	3630      	adds	r6, #48	; 0x30
 800edaa:	f805 6b01 	strb.w	r6, [r5], #1
 800edae:	9e00      	ldr	r6, [sp, #0]
 800edb0:	1bae      	subs	r6, r5, r6
 800edb2:	42b7      	cmp	r7, r6
 800edb4:	4602      	mov	r2, r0
 800edb6:	460b      	mov	r3, r1
 800edb8:	d137      	bne.n	800ee2a <_dtoa_r+0x722>
 800edba:	f7f1 fa77 	bl	80002ac <__adddf3>
 800edbe:	4642      	mov	r2, r8
 800edc0:	464b      	mov	r3, r9
 800edc2:	4606      	mov	r6, r0
 800edc4:	460f      	mov	r7, r1
 800edc6:	f7f1 feb7 	bl	8000b38 <__aeabi_dcmpgt>
 800edca:	b9c8      	cbnz	r0, 800ee00 <_dtoa_r+0x6f8>
 800edcc:	4642      	mov	r2, r8
 800edce:	464b      	mov	r3, r9
 800edd0:	4630      	mov	r0, r6
 800edd2:	4639      	mov	r1, r7
 800edd4:	f7f1 fe88 	bl	8000ae8 <__aeabi_dcmpeq>
 800edd8:	b110      	cbz	r0, 800ede0 <_dtoa_r+0x6d8>
 800edda:	9b02      	ldr	r3, [sp, #8]
 800eddc:	07d9      	lsls	r1, r3, #31
 800edde:	d40f      	bmi.n	800ee00 <_dtoa_r+0x6f8>
 800ede0:	4620      	mov	r0, r4
 800ede2:	4659      	mov	r1, fp
 800ede4:	f000 fe9c 	bl	800fb20 <_Bfree>
 800ede8:	2300      	movs	r3, #0
 800edea:	702b      	strb	r3, [r5, #0]
 800edec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edee:	f10a 0001 	add.w	r0, sl, #1
 800edf2:	6018      	str	r0, [r3, #0]
 800edf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f43f acd8 	beq.w	800e7ac <_dtoa_r+0xa4>
 800edfc:	601d      	str	r5, [r3, #0]
 800edfe:	e4d5      	b.n	800e7ac <_dtoa_r+0xa4>
 800ee00:	f8cd a01c 	str.w	sl, [sp, #28]
 800ee04:	462b      	mov	r3, r5
 800ee06:	461d      	mov	r5, r3
 800ee08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee0c:	2a39      	cmp	r2, #57	; 0x39
 800ee0e:	d108      	bne.n	800ee22 <_dtoa_r+0x71a>
 800ee10:	9a00      	ldr	r2, [sp, #0]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d1f7      	bne.n	800ee06 <_dtoa_r+0x6fe>
 800ee16:	9a07      	ldr	r2, [sp, #28]
 800ee18:	9900      	ldr	r1, [sp, #0]
 800ee1a:	3201      	adds	r2, #1
 800ee1c:	9207      	str	r2, [sp, #28]
 800ee1e:	2230      	movs	r2, #48	; 0x30
 800ee20:	700a      	strb	r2, [r1, #0]
 800ee22:	781a      	ldrb	r2, [r3, #0]
 800ee24:	3201      	adds	r2, #1
 800ee26:	701a      	strb	r2, [r3, #0]
 800ee28:	e78c      	b.n	800ed44 <_dtoa_r+0x63c>
 800ee2a:	4b7f      	ldr	r3, [pc, #508]	; (800f028 <_dtoa_r+0x920>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f7f1 fbf3 	bl	8000618 <__aeabi_dmul>
 800ee32:	2200      	movs	r2, #0
 800ee34:	2300      	movs	r3, #0
 800ee36:	4606      	mov	r6, r0
 800ee38:	460f      	mov	r7, r1
 800ee3a:	f7f1 fe55 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d09b      	beq.n	800ed7a <_dtoa_r+0x672>
 800ee42:	e7cd      	b.n	800ede0 <_dtoa_r+0x6d8>
 800ee44:	9a08      	ldr	r2, [sp, #32]
 800ee46:	2a00      	cmp	r2, #0
 800ee48:	f000 80c4 	beq.w	800efd4 <_dtoa_r+0x8cc>
 800ee4c:	9a05      	ldr	r2, [sp, #20]
 800ee4e:	2a01      	cmp	r2, #1
 800ee50:	f300 80a8 	bgt.w	800efa4 <_dtoa_r+0x89c>
 800ee54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee56:	2a00      	cmp	r2, #0
 800ee58:	f000 80a0 	beq.w	800ef9c <_dtoa_r+0x894>
 800ee5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee60:	9e06      	ldr	r6, [sp, #24]
 800ee62:	4645      	mov	r5, r8
 800ee64:	9a04      	ldr	r2, [sp, #16]
 800ee66:	2101      	movs	r1, #1
 800ee68:	441a      	add	r2, r3
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	4498      	add	r8, r3
 800ee6e:	9204      	str	r2, [sp, #16]
 800ee70:	f000 ff5c 	bl	800fd2c <__i2b>
 800ee74:	4607      	mov	r7, r0
 800ee76:	2d00      	cmp	r5, #0
 800ee78:	dd0b      	ble.n	800ee92 <_dtoa_r+0x78a>
 800ee7a:	9b04      	ldr	r3, [sp, #16]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	dd08      	ble.n	800ee92 <_dtoa_r+0x78a>
 800ee80:	42ab      	cmp	r3, r5
 800ee82:	9a04      	ldr	r2, [sp, #16]
 800ee84:	bfa8      	it	ge
 800ee86:	462b      	movge	r3, r5
 800ee88:	eba8 0803 	sub.w	r8, r8, r3
 800ee8c:	1aed      	subs	r5, r5, r3
 800ee8e:	1ad3      	subs	r3, r2, r3
 800ee90:	9304      	str	r3, [sp, #16]
 800ee92:	9b06      	ldr	r3, [sp, #24]
 800ee94:	b1fb      	cbz	r3, 800eed6 <_dtoa_r+0x7ce>
 800ee96:	9b08      	ldr	r3, [sp, #32]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 809f 	beq.w	800efdc <_dtoa_r+0x8d4>
 800ee9e:	2e00      	cmp	r6, #0
 800eea0:	dd11      	ble.n	800eec6 <_dtoa_r+0x7be>
 800eea2:	4639      	mov	r1, r7
 800eea4:	4632      	mov	r2, r6
 800eea6:	4620      	mov	r0, r4
 800eea8:	f000 fffc 	bl	800fea4 <__pow5mult>
 800eeac:	465a      	mov	r2, fp
 800eeae:	4601      	mov	r1, r0
 800eeb0:	4607      	mov	r7, r0
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 ff50 	bl	800fd58 <__multiply>
 800eeb8:	4659      	mov	r1, fp
 800eeba:	9007      	str	r0, [sp, #28]
 800eebc:	4620      	mov	r0, r4
 800eebe:	f000 fe2f 	bl	800fb20 <_Bfree>
 800eec2:	9b07      	ldr	r3, [sp, #28]
 800eec4:	469b      	mov	fp, r3
 800eec6:	9b06      	ldr	r3, [sp, #24]
 800eec8:	1b9a      	subs	r2, r3, r6
 800eeca:	d004      	beq.n	800eed6 <_dtoa_r+0x7ce>
 800eecc:	4659      	mov	r1, fp
 800eece:	4620      	mov	r0, r4
 800eed0:	f000 ffe8 	bl	800fea4 <__pow5mult>
 800eed4:	4683      	mov	fp, r0
 800eed6:	2101      	movs	r1, #1
 800eed8:	4620      	mov	r0, r4
 800eeda:	f000 ff27 	bl	800fd2c <__i2b>
 800eede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	4606      	mov	r6, r0
 800eee4:	dd7c      	ble.n	800efe0 <_dtoa_r+0x8d8>
 800eee6:	461a      	mov	r2, r3
 800eee8:	4601      	mov	r1, r0
 800eeea:	4620      	mov	r0, r4
 800eeec:	f000 ffda 	bl	800fea4 <__pow5mult>
 800eef0:	9b05      	ldr	r3, [sp, #20]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	4606      	mov	r6, r0
 800eef6:	dd76      	ble.n	800efe6 <_dtoa_r+0x8de>
 800eef8:	2300      	movs	r3, #0
 800eefa:	9306      	str	r3, [sp, #24]
 800eefc:	6933      	ldr	r3, [r6, #16]
 800eefe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ef02:	6918      	ldr	r0, [r3, #16]
 800ef04:	f000 fec2 	bl	800fc8c <__hi0bits>
 800ef08:	f1c0 0020 	rsb	r0, r0, #32
 800ef0c:	9b04      	ldr	r3, [sp, #16]
 800ef0e:	4418      	add	r0, r3
 800ef10:	f010 001f 	ands.w	r0, r0, #31
 800ef14:	f000 8086 	beq.w	800f024 <_dtoa_r+0x91c>
 800ef18:	f1c0 0320 	rsb	r3, r0, #32
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	dd7f      	ble.n	800f020 <_dtoa_r+0x918>
 800ef20:	f1c0 001c 	rsb	r0, r0, #28
 800ef24:	9b04      	ldr	r3, [sp, #16]
 800ef26:	4403      	add	r3, r0
 800ef28:	4480      	add	r8, r0
 800ef2a:	4405      	add	r5, r0
 800ef2c:	9304      	str	r3, [sp, #16]
 800ef2e:	f1b8 0f00 	cmp.w	r8, #0
 800ef32:	dd05      	ble.n	800ef40 <_dtoa_r+0x838>
 800ef34:	4659      	mov	r1, fp
 800ef36:	4642      	mov	r2, r8
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f001 f80d 	bl	800ff58 <__lshift>
 800ef3e:	4683      	mov	fp, r0
 800ef40:	9b04      	ldr	r3, [sp, #16]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	dd05      	ble.n	800ef52 <_dtoa_r+0x84a>
 800ef46:	4631      	mov	r1, r6
 800ef48:	461a      	mov	r2, r3
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f001 f804 	bl	800ff58 <__lshift>
 800ef50:	4606      	mov	r6, r0
 800ef52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d069      	beq.n	800f02c <_dtoa_r+0x924>
 800ef58:	4631      	mov	r1, r6
 800ef5a:	4658      	mov	r0, fp
 800ef5c:	f001 f868 	bl	8010030 <__mcmp>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	da63      	bge.n	800f02c <_dtoa_r+0x924>
 800ef64:	2300      	movs	r3, #0
 800ef66:	4659      	mov	r1, fp
 800ef68:	220a      	movs	r2, #10
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f000 fdfa 	bl	800fb64 <__multadd>
 800ef70:	9b08      	ldr	r3, [sp, #32]
 800ef72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ef76:	4683      	mov	fp, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	f000 818f 	beq.w	800f29c <_dtoa_r+0xb94>
 800ef7e:	4639      	mov	r1, r7
 800ef80:	2300      	movs	r3, #0
 800ef82:	220a      	movs	r2, #10
 800ef84:	4620      	mov	r0, r4
 800ef86:	f000 fded 	bl	800fb64 <__multadd>
 800ef8a:	f1b9 0f00 	cmp.w	r9, #0
 800ef8e:	4607      	mov	r7, r0
 800ef90:	f300 808e 	bgt.w	800f0b0 <_dtoa_r+0x9a8>
 800ef94:	9b05      	ldr	r3, [sp, #20]
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	dc50      	bgt.n	800f03c <_dtoa_r+0x934>
 800ef9a:	e089      	b.n	800f0b0 <_dtoa_r+0x9a8>
 800ef9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800efa2:	e75d      	b.n	800ee60 <_dtoa_r+0x758>
 800efa4:	9b01      	ldr	r3, [sp, #4]
 800efa6:	1e5e      	subs	r6, r3, #1
 800efa8:	9b06      	ldr	r3, [sp, #24]
 800efaa:	42b3      	cmp	r3, r6
 800efac:	bfbf      	itttt	lt
 800efae:	9b06      	ldrlt	r3, [sp, #24]
 800efb0:	9606      	strlt	r6, [sp, #24]
 800efb2:	1af2      	sublt	r2, r6, r3
 800efb4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800efb6:	bfb6      	itet	lt
 800efb8:	189b      	addlt	r3, r3, r2
 800efba:	1b9e      	subge	r6, r3, r6
 800efbc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800efbe:	9b01      	ldr	r3, [sp, #4]
 800efc0:	bfb8      	it	lt
 800efc2:	2600      	movlt	r6, #0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	bfb5      	itete	lt
 800efc8:	eba8 0503 	sublt.w	r5, r8, r3
 800efcc:	9b01      	ldrge	r3, [sp, #4]
 800efce:	2300      	movlt	r3, #0
 800efd0:	4645      	movge	r5, r8
 800efd2:	e747      	b.n	800ee64 <_dtoa_r+0x75c>
 800efd4:	9e06      	ldr	r6, [sp, #24]
 800efd6:	9f08      	ldr	r7, [sp, #32]
 800efd8:	4645      	mov	r5, r8
 800efda:	e74c      	b.n	800ee76 <_dtoa_r+0x76e>
 800efdc:	9a06      	ldr	r2, [sp, #24]
 800efde:	e775      	b.n	800eecc <_dtoa_r+0x7c4>
 800efe0:	9b05      	ldr	r3, [sp, #20]
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	dc18      	bgt.n	800f018 <_dtoa_r+0x910>
 800efe6:	9b02      	ldr	r3, [sp, #8]
 800efe8:	b9b3      	cbnz	r3, 800f018 <_dtoa_r+0x910>
 800efea:	9b03      	ldr	r3, [sp, #12]
 800efec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eff0:	b9a3      	cbnz	r3, 800f01c <_dtoa_r+0x914>
 800eff2:	9b03      	ldr	r3, [sp, #12]
 800eff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eff8:	0d1b      	lsrs	r3, r3, #20
 800effa:	051b      	lsls	r3, r3, #20
 800effc:	b12b      	cbz	r3, 800f00a <_dtoa_r+0x902>
 800effe:	9b04      	ldr	r3, [sp, #16]
 800f000:	3301      	adds	r3, #1
 800f002:	9304      	str	r3, [sp, #16]
 800f004:	f108 0801 	add.w	r8, r8, #1
 800f008:	2301      	movs	r3, #1
 800f00a:	9306      	str	r3, [sp, #24]
 800f00c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f47f af74 	bne.w	800eefc <_dtoa_r+0x7f4>
 800f014:	2001      	movs	r0, #1
 800f016:	e779      	b.n	800ef0c <_dtoa_r+0x804>
 800f018:	2300      	movs	r3, #0
 800f01a:	e7f6      	b.n	800f00a <_dtoa_r+0x902>
 800f01c:	9b02      	ldr	r3, [sp, #8]
 800f01e:	e7f4      	b.n	800f00a <_dtoa_r+0x902>
 800f020:	d085      	beq.n	800ef2e <_dtoa_r+0x826>
 800f022:	4618      	mov	r0, r3
 800f024:	301c      	adds	r0, #28
 800f026:	e77d      	b.n	800ef24 <_dtoa_r+0x81c>
 800f028:	40240000 	.word	0x40240000
 800f02c:	9b01      	ldr	r3, [sp, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	dc38      	bgt.n	800f0a4 <_dtoa_r+0x99c>
 800f032:	9b05      	ldr	r3, [sp, #20]
 800f034:	2b02      	cmp	r3, #2
 800f036:	dd35      	ble.n	800f0a4 <_dtoa_r+0x99c>
 800f038:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f03c:	f1b9 0f00 	cmp.w	r9, #0
 800f040:	d10d      	bne.n	800f05e <_dtoa_r+0x956>
 800f042:	4631      	mov	r1, r6
 800f044:	464b      	mov	r3, r9
 800f046:	2205      	movs	r2, #5
 800f048:	4620      	mov	r0, r4
 800f04a:	f000 fd8b 	bl	800fb64 <__multadd>
 800f04e:	4601      	mov	r1, r0
 800f050:	4606      	mov	r6, r0
 800f052:	4658      	mov	r0, fp
 800f054:	f000 ffec 	bl	8010030 <__mcmp>
 800f058:	2800      	cmp	r0, #0
 800f05a:	f73f adbd 	bgt.w	800ebd8 <_dtoa_r+0x4d0>
 800f05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f060:	9d00      	ldr	r5, [sp, #0]
 800f062:	ea6f 0a03 	mvn.w	sl, r3
 800f066:	f04f 0800 	mov.w	r8, #0
 800f06a:	4631      	mov	r1, r6
 800f06c:	4620      	mov	r0, r4
 800f06e:	f000 fd57 	bl	800fb20 <_Bfree>
 800f072:	2f00      	cmp	r7, #0
 800f074:	f43f aeb4 	beq.w	800ede0 <_dtoa_r+0x6d8>
 800f078:	f1b8 0f00 	cmp.w	r8, #0
 800f07c:	d005      	beq.n	800f08a <_dtoa_r+0x982>
 800f07e:	45b8      	cmp	r8, r7
 800f080:	d003      	beq.n	800f08a <_dtoa_r+0x982>
 800f082:	4641      	mov	r1, r8
 800f084:	4620      	mov	r0, r4
 800f086:	f000 fd4b 	bl	800fb20 <_Bfree>
 800f08a:	4639      	mov	r1, r7
 800f08c:	4620      	mov	r0, r4
 800f08e:	f000 fd47 	bl	800fb20 <_Bfree>
 800f092:	e6a5      	b.n	800ede0 <_dtoa_r+0x6d8>
 800f094:	2600      	movs	r6, #0
 800f096:	4637      	mov	r7, r6
 800f098:	e7e1      	b.n	800f05e <_dtoa_r+0x956>
 800f09a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f09c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f0a0:	4637      	mov	r7, r6
 800f0a2:	e599      	b.n	800ebd8 <_dtoa_r+0x4d0>
 800f0a4:	9b08      	ldr	r3, [sp, #32]
 800f0a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f000 80fd 	beq.w	800f2aa <_dtoa_r+0xba2>
 800f0b0:	2d00      	cmp	r5, #0
 800f0b2:	dd05      	ble.n	800f0c0 <_dtoa_r+0x9b8>
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	462a      	mov	r2, r5
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f000 ff4d 	bl	800ff58 <__lshift>
 800f0be:	4607      	mov	r7, r0
 800f0c0:	9b06      	ldr	r3, [sp, #24]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d05c      	beq.n	800f180 <_dtoa_r+0xa78>
 800f0c6:	6879      	ldr	r1, [r7, #4]
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f000 fce9 	bl	800faa0 <_Balloc>
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	b928      	cbnz	r0, 800f0de <_dtoa_r+0x9d6>
 800f0d2:	4b80      	ldr	r3, [pc, #512]	; (800f2d4 <_dtoa_r+0xbcc>)
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f0da:	f7ff bb2e 	b.w	800e73a <_dtoa_r+0x32>
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	3202      	adds	r2, #2
 800f0e2:	0092      	lsls	r2, r2, #2
 800f0e4:	f107 010c 	add.w	r1, r7, #12
 800f0e8:	300c      	adds	r0, #12
 800f0ea:	f7fd f975 	bl	800c3d8 <memcpy>
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	4629      	mov	r1, r5
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 ff30 	bl	800ff58 <__lshift>
 800f0f8:	9b00      	ldr	r3, [sp, #0]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	9301      	str	r3, [sp, #4]
 800f0fe:	9b00      	ldr	r3, [sp, #0]
 800f100:	444b      	add	r3, r9
 800f102:	9307      	str	r3, [sp, #28]
 800f104:	9b02      	ldr	r3, [sp, #8]
 800f106:	f003 0301 	and.w	r3, r3, #1
 800f10a:	46b8      	mov	r8, r7
 800f10c:	9306      	str	r3, [sp, #24]
 800f10e:	4607      	mov	r7, r0
 800f110:	9b01      	ldr	r3, [sp, #4]
 800f112:	4631      	mov	r1, r6
 800f114:	3b01      	subs	r3, #1
 800f116:	4658      	mov	r0, fp
 800f118:	9302      	str	r3, [sp, #8]
 800f11a:	f7ff fa69 	bl	800e5f0 <quorem>
 800f11e:	4603      	mov	r3, r0
 800f120:	3330      	adds	r3, #48	; 0x30
 800f122:	9004      	str	r0, [sp, #16]
 800f124:	4641      	mov	r1, r8
 800f126:	4658      	mov	r0, fp
 800f128:	9308      	str	r3, [sp, #32]
 800f12a:	f000 ff81 	bl	8010030 <__mcmp>
 800f12e:	463a      	mov	r2, r7
 800f130:	4681      	mov	r9, r0
 800f132:	4631      	mov	r1, r6
 800f134:	4620      	mov	r0, r4
 800f136:	f000 ff97 	bl	8010068 <__mdiff>
 800f13a:	68c2      	ldr	r2, [r0, #12]
 800f13c:	9b08      	ldr	r3, [sp, #32]
 800f13e:	4605      	mov	r5, r0
 800f140:	bb02      	cbnz	r2, 800f184 <_dtoa_r+0xa7c>
 800f142:	4601      	mov	r1, r0
 800f144:	4658      	mov	r0, fp
 800f146:	f000 ff73 	bl	8010030 <__mcmp>
 800f14a:	9b08      	ldr	r3, [sp, #32]
 800f14c:	4602      	mov	r2, r0
 800f14e:	4629      	mov	r1, r5
 800f150:	4620      	mov	r0, r4
 800f152:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f156:	f000 fce3 	bl	800fb20 <_Bfree>
 800f15a:	9b05      	ldr	r3, [sp, #20]
 800f15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f15e:	9d01      	ldr	r5, [sp, #4]
 800f160:	ea43 0102 	orr.w	r1, r3, r2
 800f164:	9b06      	ldr	r3, [sp, #24]
 800f166:	430b      	orrs	r3, r1
 800f168:	9b08      	ldr	r3, [sp, #32]
 800f16a:	d10d      	bne.n	800f188 <_dtoa_r+0xa80>
 800f16c:	2b39      	cmp	r3, #57	; 0x39
 800f16e:	d029      	beq.n	800f1c4 <_dtoa_r+0xabc>
 800f170:	f1b9 0f00 	cmp.w	r9, #0
 800f174:	dd01      	ble.n	800f17a <_dtoa_r+0xa72>
 800f176:	9b04      	ldr	r3, [sp, #16]
 800f178:	3331      	adds	r3, #49	; 0x31
 800f17a:	9a02      	ldr	r2, [sp, #8]
 800f17c:	7013      	strb	r3, [r2, #0]
 800f17e:	e774      	b.n	800f06a <_dtoa_r+0x962>
 800f180:	4638      	mov	r0, r7
 800f182:	e7b9      	b.n	800f0f8 <_dtoa_r+0x9f0>
 800f184:	2201      	movs	r2, #1
 800f186:	e7e2      	b.n	800f14e <_dtoa_r+0xa46>
 800f188:	f1b9 0f00 	cmp.w	r9, #0
 800f18c:	db06      	blt.n	800f19c <_dtoa_r+0xa94>
 800f18e:	9905      	ldr	r1, [sp, #20]
 800f190:	ea41 0909 	orr.w	r9, r1, r9
 800f194:	9906      	ldr	r1, [sp, #24]
 800f196:	ea59 0101 	orrs.w	r1, r9, r1
 800f19a:	d120      	bne.n	800f1de <_dtoa_r+0xad6>
 800f19c:	2a00      	cmp	r2, #0
 800f19e:	ddec      	ble.n	800f17a <_dtoa_r+0xa72>
 800f1a0:	4659      	mov	r1, fp
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	9301      	str	r3, [sp, #4]
 800f1a8:	f000 fed6 	bl	800ff58 <__lshift>
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	4683      	mov	fp, r0
 800f1b0:	f000 ff3e 	bl	8010030 <__mcmp>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	9b01      	ldr	r3, [sp, #4]
 800f1b8:	dc02      	bgt.n	800f1c0 <_dtoa_r+0xab8>
 800f1ba:	d1de      	bne.n	800f17a <_dtoa_r+0xa72>
 800f1bc:	07da      	lsls	r2, r3, #31
 800f1be:	d5dc      	bpl.n	800f17a <_dtoa_r+0xa72>
 800f1c0:	2b39      	cmp	r3, #57	; 0x39
 800f1c2:	d1d8      	bne.n	800f176 <_dtoa_r+0xa6e>
 800f1c4:	9a02      	ldr	r2, [sp, #8]
 800f1c6:	2339      	movs	r3, #57	; 0x39
 800f1c8:	7013      	strb	r3, [r2, #0]
 800f1ca:	462b      	mov	r3, r5
 800f1cc:	461d      	mov	r5, r3
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f1d4:	2a39      	cmp	r2, #57	; 0x39
 800f1d6:	d050      	beq.n	800f27a <_dtoa_r+0xb72>
 800f1d8:	3201      	adds	r2, #1
 800f1da:	701a      	strb	r2, [r3, #0]
 800f1dc:	e745      	b.n	800f06a <_dtoa_r+0x962>
 800f1de:	2a00      	cmp	r2, #0
 800f1e0:	dd03      	ble.n	800f1ea <_dtoa_r+0xae2>
 800f1e2:	2b39      	cmp	r3, #57	; 0x39
 800f1e4:	d0ee      	beq.n	800f1c4 <_dtoa_r+0xabc>
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	e7c7      	b.n	800f17a <_dtoa_r+0xa72>
 800f1ea:	9a01      	ldr	r2, [sp, #4]
 800f1ec:	9907      	ldr	r1, [sp, #28]
 800f1ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f1f2:	428a      	cmp	r2, r1
 800f1f4:	d02a      	beq.n	800f24c <_dtoa_r+0xb44>
 800f1f6:	4659      	mov	r1, fp
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	220a      	movs	r2, #10
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	f000 fcb1 	bl	800fb64 <__multadd>
 800f202:	45b8      	cmp	r8, r7
 800f204:	4683      	mov	fp, r0
 800f206:	f04f 0300 	mov.w	r3, #0
 800f20a:	f04f 020a 	mov.w	r2, #10
 800f20e:	4641      	mov	r1, r8
 800f210:	4620      	mov	r0, r4
 800f212:	d107      	bne.n	800f224 <_dtoa_r+0xb1c>
 800f214:	f000 fca6 	bl	800fb64 <__multadd>
 800f218:	4680      	mov	r8, r0
 800f21a:	4607      	mov	r7, r0
 800f21c:	9b01      	ldr	r3, [sp, #4]
 800f21e:	3301      	adds	r3, #1
 800f220:	9301      	str	r3, [sp, #4]
 800f222:	e775      	b.n	800f110 <_dtoa_r+0xa08>
 800f224:	f000 fc9e 	bl	800fb64 <__multadd>
 800f228:	4639      	mov	r1, r7
 800f22a:	4680      	mov	r8, r0
 800f22c:	2300      	movs	r3, #0
 800f22e:	220a      	movs	r2, #10
 800f230:	4620      	mov	r0, r4
 800f232:	f000 fc97 	bl	800fb64 <__multadd>
 800f236:	4607      	mov	r7, r0
 800f238:	e7f0      	b.n	800f21c <_dtoa_r+0xb14>
 800f23a:	f1b9 0f00 	cmp.w	r9, #0
 800f23e:	9a00      	ldr	r2, [sp, #0]
 800f240:	bfcc      	ite	gt
 800f242:	464d      	movgt	r5, r9
 800f244:	2501      	movle	r5, #1
 800f246:	4415      	add	r5, r2
 800f248:	f04f 0800 	mov.w	r8, #0
 800f24c:	4659      	mov	r1, fp
 800f24e:	2201      	movs	r2, #1
 800f250:	4620      	mov	r0, r4
 800f252:	9301      	str	r3, [sp, #4]
 800f254:	f000 fe80 	bl	800ff58 <__lshift>
 800f258:	4631      	mov	r1, r6
 800f25a:	4683      	mov	fp, r0
 800f25c:	f000 fee8 	bl	8010030 <__mcmp>
 800f260:	2800      	cmp	r0, #0
 800f262:	dcb2      	bgt.n	800f1ca <_dtoa_r+0xac2>
 800f264:	d102      	bne.n	800f26c <_dtoa_r+0xb64>
 800f266:	9b01      	ldr	r3, [sp, #4]
 800f268:	07db      	lsls	r3, r3, #31
 800f26a:	d4ae      	bmi.n	800f1ca <_dtoa_r+0xac2>
 800f26c:	462b      	mov	r3, r5
 800f26e:	461d      	mov	r5, r3
 800f270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f274:	2a30      	cmp	r2, #48	; 0x30
 800f276:	d0fa      	beq.n	800f26e <_dtoa_r+0xb66>
 800f278:	e6f7      	b.n	800f06a <_dtoa_r+0x962>
 800f27a:	9a00      	ldr	r2, [sp, #0]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d1a5      	bne.n	800f1cc <_dtoa_r+0xac4>
 800f280:	f10a 0a01 	add.w	sl, sl, #1
 800f284:	2331      	movs	r3, #49	; 0x31
 800f286:	e779      	b.n	800f17c <_dtoa_r+0xa74>
 800f288:	4b13      	ldr	r3, [pc, #76]	; (800f2d8 <_dtoa_r+0xbd0>)
 800f28a:	f7ff baaf 	b.w	800e7ec <_dtoa_r+0xe4>
 800f28e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f290:	2b00      	cmp	r3, #0
 800f292:	f47f aa86 	bne.w	800e7a2 <_dtoa_r+0x9a>
 800f296:	4b11      	ldr	r3, [pc, #68]	; (800f2dc <_dtoa_r+0xbd4>)
 800f298:	f7ff baa8 	b.w	800e7ec <_dtoa_r+0xe4>
 800f29c:	f1b9 0f00 	cmp.w	r9, #0
 800f2a0:	dc03      	bgt.n	800f2aa <_dtoa_r+0xba2>
 800f2a2:	9b05      	ldr	r3, [sp, #20]
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	f73f aec9 	bgt.w	800f03c <_dtoa_r+0x934>
 800f2aa:	9d00      	ldr	r5, [sp, #0]
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4658      	mov	r0, fp
 800f2b0:	f7ff f99e 	bl	800e5f0 <quorem>
 800f2b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f2b8:	f805 3b01 	strb.w	r3, [r5], #1
 800f2bc:	9a00      	ldr	r2, [sp, #0]
 800f2be:	1aaa      	subs	r2, r5, r2
 800f2c0:	4591      	cmp	r9, r2
 800f2c2:	ddba      	ble.n	800f23a <_dtoa_r+0xb32>
 800f2c4:	4659      	mov	r1, fp
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	220a      	movs	r2, #10
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	f000 fc4a 	bl	800fb64 <__multadd>
 800f2d0:	4683      	mov	fp, r0
 800f2d2:	e7eb      	b.n	800f2ac <_dtoa_r+0xba4>
 800f2d4:	08010ca0 	.word	0x08010ca0
 800f2d8:	08010a65 	.word	0x08010a65
 800f2dc:	08010c1d 	.word	0x08010c1d

0800f2e0 <_fstat_r>:
 800f2e0:	b538      	push	{r3, r4, r5, lr}
 800f2e2:	4d07      	ldr	r5, [pc, #28]	; (800f300 <_fstat_r+0x20>)
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	4608      	mov	r0, r1
 800f2ea:	4611      	mov	r1, r2
 800f2ec:	602b      	str	r3, [r5, #0]
 800f2ee:	f001 faa9 	bl	8010844 <_fstat>
 800f2f2:	1c43      	adds	r3, r0, #1
 800f2f4:	d102      	bne.n	800f2fc <_fstat_r+0x1c>
 800f2f6:	682b      	ldr	r3, [r5, #0]
 800f2f8:	b103      	cbz	r3, 800f2fc <_fstat_r+0x1c>
 800f2fa:	6023      	str	r3, [r4, #0]
 800f2fc:	bd38      	pop	{r3, r4, r5, pc}
 800f2fe:	bf00      	nop
 800f300:	200081d8 	.word	0x200081d8

0800f304 <rshift>:
 800f304:	6903      	ldr	r3, [r0, #16]
 800f306:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f30a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f30e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f312:	f100 0414 	add.w	r4, r0, #20
 800f316:	dd45      	ble.n	800f3a4 <rshift+0xa0>
 800f318:	f011 011f 	ands.w	r1, r1, #31
 800f31c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f320:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f324:	d10c      	bne.n	800f340 <rshift+0x3c>
 800f326:	f100 0710 	add.w	r7, r0, #16
 800f32a:	4629      	mov	r1, r5
 800f32c:	42b1      	cmp	r1, r6
 800f32e:	d334      	bcc.n	800f39a <rshift+0x96>
 800f330:	1a9b      	subs	r3, r3, r2
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	1eea      	subs	r2, r5, #3
 800f336:	4296      	cmp	r6, r2
 800f338:	bf38      	it	cc
 800f33a:	2300      	movcc	r3, #0
 800f33c:	4423      	add	r3, r4
 800f33e:	e015      	b.n	800f36c <rshift+0x68>
 800f340:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f344:	f1c1 0820 	rsb	r8, r1, #32
 800f348:	40cf      	lsrs	r7, r1
 800f34a:	f105 0e04 	add.w	lr, r5, #4
 800f34e:	46a1      	mov	r9, r4
 800f350:	4576      	cmp	r6, lr
 800f352:	46f4      	mov	ip, lr
 800f354:	d815      	bhi.n	800f382 <rshift+0x7e>
 800f356:	1a9b      	subs	r3, r3, r2
 800f358:	009a      	lsls	r2, r3, #2
 800f35a:	3a04      	subs	r2, #4
 800f35c:	3501      	adds	r5, #1
 800f35e:	42ae      	cmp	r6, r5
 800f360:	bf38      	it	cc
 800f362:	2200      	movcc	r2, #0
 800f364:	18a3      	adds	r3, r4, r2
 800f366:	50a7      	str	r7, [r4, r2]
 800f368:	b107      	cbz	r7, 800f36c <rshift+0x68>
 800f36a:	3304      	adds	r3, #4
 800f36c:	1b1a      	subs	r2, r3, r4
 800f36e:	42a3      	cmp	r3, r4
 800f370:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f374:	bf08      	it	eq
 800f376:	2300      	moveq	r3, #0
 800f378:	6102      	str	r2, [r0, #16]
 800f37a:	bf08      	it	eq
 800f37c:	6143      	streq	r3, [r0, #20]
 800f37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f382:	f8dc c000 	ldr.w	ip, [ip]
 800f386:	fa0c fc08 	lsl.w	ip, ip, r8
 800f38a:	ea4c 0707 	orr.w	r7, ip, r7
 800f38e:	f849 7b04 	str.w	r7, [r9], #4
 800f392:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f396:	40cf      	lsrs	r7, r1
 800f398:	e7da      	b.n	800f350 <rshift+0x4c>
 800f39a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f39e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f3a2:	e7c3      	b.n	800f32c <rshift+0x28>
 800f3a4:	4623      	mov	r3, r4
 800f3a6:	e7e1      	b.n	800f36c <rshift+0x68>

0800f3a8 <__hexdig_fun>:
 800f3a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f3ac:	2b09      	cmp	r3, #9
 800f3ae:	d802      	bhi.n	800f3b6 <__hexdig_fun+0xe>
 800f3b0:	3820      	subs	r0, #32
 800f3b2:	b2c0      	uxtb	r0, r0
 800f3b4:	4770      	bx	lr
 800f3b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f3ba:	2b05      	cmp	r3, #5
 800f3bc:	d801      	bhi.n	800f3c2 <__hexdig_fun+0x1a>
 800f3be:	3847      	subs	r0, #71	; 0x47
 800f3c0:	e7f7      	b.n	800f3b2 <__hexdig_fun+0xa>
 800f3c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f3c6:	2b05      	cmp	r3, #5
 800f3c8:	d801      	bhi.n	800f3ce <__hexdig_fun+0x26>
 800f3ca:	3827      	subs	r0, #39	; 0x27
 800f3cc:	e7f1      	b.n	800f3b2 <__hexdig_fun+0xa>
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	4770      	bx	lr
	...

0800f3d4 <__gethex>:
 800f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d8:	ed2d 8b02 	vpush	{d8}
 800f3dc:	b089      	sub	sp, #36	; 0x24
 800f3de:	ee08 0a10 	vmov	s16, r0
 800f3e2:	9304      	str	r3, [sp, #16]
 800f3e4:	4bbc      	ldr	r3, [pc, #752]	; (800f6d8 <__gethex+0x304>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	468b      	mov	fp, r1
 800f3ee:	4690      	mov	r8, r2
 800f3f0:	f7f0 ff4e 	bl	8000290 <strlen>
 800f3f4:	9b01      	ldr	r3, [sp, #4]
 800f3f6:	f8db 2000 	ldr.w	r2, [fp]
 800f3fa:	4403      	add	r3, r0
 800f3fc:	4682      	mov	sl, r0
 800f3fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f402:	9305      	str	r3, [sp, #20]
 800f404:	1c93      	adds	r3, r2, #2
 800f406:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f40a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f40e:	32fe      	adds	r2, #254	; 0xfe
 800f410:	18d1      	adds	r1, r2, r3
 800f412:	461f      	mov	r7, r3
 800f414:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f418:	9100      	str	r1, [sp, #0]
 800f41a:	2830      	cmp	r0, #48	; 0x30
 800f41c:	d0f8      	beq.n	800f410 <__gethex+0x3c>
 800f41e:	f7ff ffc3 	bl	800f3a8 <__hexdig_fun>
 800f422:	4604      	mov	r4, r0
 800f424:	2800      	cmp	r0, #0
 800f426:	d13a      	bne.n	800f49e <__gethex+0xca>
 800f428:	9901      	ldr	r1, [sp, #4]
 800f42a:	4652      	mov	r2, sl
 800f42c:	4638      	mov	r0, r7
 800f42e:	f001 f98f 	bl	8010750 <strncmp>
 800f432:	4605      	mov	r5, r0
 800f434:	2800      	cmp	r0, #0
 800f436:	d168      	bne.n	800f50a <__gethex+0x136>
 800f438:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f43c:	eb07 060a 	add.w	r6, r7, sl
 800f440:	f7ff ffb2 	bl	800f3a8 <__hexdig_fun>
 800f444:	2800      	cmp	r0, #0
 800f446:	d062      	beq.n	800f50e <__gethex+0x13a>
 800f448:	4633      	mov	r3, r6
 800f44a:	7818      	ldrb	r0, [r3, #0]
 800f44c:	2830      	cmp	r0, #48	; 0x30
 800f44e:	461f      	mov	r7, r3
 800f450:	f103 0301 	add.w	r3, r3, #1
 800f454:	d0f9      	beq.n	800f44a <__gethex+0x76>
 800f456:	f7ff ffa7 	bl	800f3a8 <__hexdig_fun>
 800f45a:	2301      	movs	r3, #1
 800f45c:	fab0 f480 	clz	r4, r0
 800f460:	0964      	lsrs	r4, r4, #5
 800f462:	4635      	mov	r5, r6
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	463a      	mov	r2, r7
 800f468:	4616      	mov	r6, r2
 800f46a:	3201      	adds	r2, #1
 800f46c:	7830      	ldrb	r0, [r6, #0]
 800f46e:	f7ff ff9b 	bl	800f3a8 <__hexdig_fun>
 800f472:	2800      	cmp	r0, #0
 800f474:	d1f8      	bne.n	800f468 <__gethex+0x94>
 800f476:	9901      	ldr	r1, [sp, #4]
 800f478:	4652      	mov	r2, sl
 800f47a:	4630      	mov	r0, r6
 800f47c:	f001 f968 	bl	8010750 <strncmp>
 800f480:	b980      	cbnz	r0, 800f4a4 <__gethex+0xd0>
 800f482:	b94d      	cbnz	r5, 800f498 <__gethex+0xc4>
 800f484:	eb06 050a 	add.w	r5, r6, sl
 800f488:	462a      	mov	r2, r5
 800f48a:	4616      	mov	r6, r2
 800f48c:	3201      	adds	r2, #1
 800f48e:	7830      	ldrb	r0, [r6, #0]
 800f490:	f7ff ff8a 	bl	800f3a8 <__hexdig_fun>
 800f494:	2800      	cmp	r0, #0
 800f496:	d1f8      	bne.n	800f48a <__gethex+0xb6>
 800f498:	1bad      	subs	r5, r5, r6
 800f49a:	00ad      	lsls	r5, r5, #2
 800f49c:	e004      	b.n	800f4a8 <__gethex+0xd4>
 800f49e:	2400      	movs	r4, #0
 800f4a0:	4625      	mov	r5, r4
 800f4a2:	e7e0      	b.n	800f466 <__gethex+0x92>
 800f4a4:	2d00      	cmp	r5, #0
 800f4a6:	d1f7      	bne.n	800f498 <__gethex+0xc4>
 800f4a8:	7833      	ldrb	r3, [r6, #0]
 800f4aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f4ae:	2b50      	cmp	r3, #80	; 0x50
 800f4b0:	d13b      	bne.n	800f52a <__gethex+0x156>
 800f4b2:	7873      	ldrb	r3, [r6, #1]
 800f4b4:	2b2b      	cmp	r3, #43	; 0x2b
 800f4b6:	d02c      	beq.n	800f512 <__gethex+0x13e>
 800f4b8:	2b2d      	cmp	r3, #45	; 0x2d
 800f4ba:	d02e      	beq.n	800f51a <__gethex+0x146>
 800f4bc:	1c71      	adds	r1, r6, #1
 800f4be:	f04f 0900 	mov.w	r9, #0
 800f4c2:	7808      	ldrb	r0, [r1, #0]
 800f4c4:	f7ff ff70 	bl	800f3a8 <__hexdig_fun>
 800f4c8:	1e43      	subs	r3, r0, #1
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	2b18      	cmp	r3, #24
 800f4ce:	d82c      	bhi.n	800f52a <__gethex+0x156>
 800f4d0:	f1a0 0210 	sub.w	r2, r0, #16
 800f4d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f4d8:	f7ff ff66 	bl	800f3a8 <__hexdig_fun>
 800f4dc:	1e43      	subs	r3, r0, #1
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b18      	cmp	r3, #24
 800f4e2:	d91d      	bls.n	800f520 <__gethex+0x14c>
 800f4e4:	f1b9 0f00 	cmp.w	r9, #0
 800f4e8:	d000      	beq.n	800f4ec <__gethex+0x118>
 800f4ea:	4252      	negs	r2, r2
 800f4ec:	4415      	add	r5, r2
 800f4ee:	f8cb 1000 	str.w	r1, [fp]
 800f4f2:	b1e4      	cbz	r4, 800f52e <__gethex+0x15a>
 800f4f4:	9b00      	ldr	r3, [sp, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	bf14      	ite	ne
 800f4fa:	2700      	movne	r7, #0
 800f4fc:	2706      	moveq	r7, #6
 800f4fe:	4638      	mov	r0, r7
 800f500:	b009      	add	sp, #36	; 0x24
 800f502:	ecbd 8b02 	vpop	{d8}
 800f506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f50a:	463e      	mov	r6, r7
 800f50c:	4625      	mov	r5, r4
 800f50e:	2401      	movs	r4, #1
 800f510:	e7ca      	b.n	800f4a8 <__gethex+0xd4>
 800f512:	f04f 0900 	mov.w	r9, #0
 800f516:	1cb1      	adds	r1, r6, #2
 800f518:	e7d3      	b.n	800f4c2 <__gethex+0xee>
 800f51a:	f04f 0901 	mov.w	r9, #1
 800f51e:	e7fa      	b.n	800f516 <__gethex+0x142>
 800f520:	230a      	movs	r3, #10
 800f522:	fb03 0202 	mla	r2, r3, r2, r0
 800f526:	3a10      	subs	r2, #16
 800f528:	e7d4      	b.n	800f4d4 <__gethex+0x100>
 800f52a:	4631      	mov	r1, r6
 800f52c:	e7df      	b.n	800f4ee <__gethex+0x11a>
 800f52e:	1bf3      	subs	r3, r6, r7
 800f530:	3b01      	subs	r3, #1
 800f532:	4621      	mov	r1, r4
 800f534:	2b07      	cmp	r3, #7
 800f536:	dc0b      	bgt.n	800f550 <__gethex+0x17c>
 800f538:	ee18 0a10 	vmov	r0, s16
 800f53c:	f000 fab0 	bl	800faa0 <_Balloc>
 800f540:	4604      	mov	r4, r0
 800f542:	b940      	cbnz	r0, 800f556 <__gethex+0x182>
 800f544:	4b65      	ldr	r3, [pc, #404]	; (800f6dc <__gethex+0x308>)
 800f546:	4602      	mov	r2, r0
 800f548:	21de      	movs	r1, #222	; 0xde
 800f54a:	4865      	ldr	r0, [pc, #404]	; (800f6e0 <__gethex+0x30c>)
 800f54c:	f7ff f822 	bl	800e594 <__assert_func>
 800f550:	3101      	adds	r1, #1
 800f552:	105b      	asrs	r3, r3, #1
 800f554:	e7ee      	b.n	800f534 <__gethex+0x160>
 800f556:	f100 0914 	add.w	r9, r0, #20
 800f55a:	f04f 0b00 	mov.w	fp, #0
 800f55e:	f1ca 0301 	rsb	r3, sl, #1
 800f562:	f8cd 9008 	str.w	r9, [sp, #8]
 800f566:	f8cd b000 	str.w	fp, [sp]
 800f56a:	9306      	str	r3, [sp, #24]
 800f56c:	42b7      	cmp	r7, r6
 800f56e:	d340      	bcc.n	800f5f2 <__gethex+0x21e>
 800f570:	9802      	ldr	r0, [sp, #8]
 800f572:	9b00      	ldr	r3, [sp, #0]
 800f574:	f840 3b04 	str.w	r3, [r0], #4
 800f578:	eba0 0009 	sub.w	r0, r0, r9
 800f57c:	1080      	asrs	r0, r0, #2
 800f57e:	0146      	lsls	r6, r0, #5
 800f580:	6120      	str	r0, [r4, #16]
 800f582:	4618      	mov	r0, r3
 800f584:	f000 fb82 	bl	800fc8c <__hi0bits>
 800f588:	1a30      	subs	r0, r6, r0
 800f58a:	f8d8 6000 	ldr.w	r6, [r8]
 800f58e:	42b0      	cmp	r0, r6
 800f590:	dd63      	ble.n	800f65a <__gethex+0x286>
 800f592:	1b87      	subs	r7, r0, r6
 800f594:	4639      	mov	r1, r7
 800f596:	4620      	mov	r0, r4
 800f598:	f000 ff1c 	bl	80103d4 <__any_on>
 800f59c:	4682      	mov	sl, r0
 800f59e:	b1a8      	cbz	r0, 800f5cc <__gethex+0x1f8>
 800f5a0:	1e7b      	subs	r3, r7, #1
 800f5a2:	1159      	asrs	r1, r3, #5
 800f5a4:	f003 021f 	and.w	r2, r3, #31
 800f5a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f5ac:	f04f 0a01 	mov.w	sl, #1
 800f5b0:	fa0a f202 	lsl.w	r2, sl, r2
 800f5b4:	420a      	tst	r2, r1
 800f5b6:	d009      	beq.n	800f5cc <__gethex+0x1f8>
 800f5b8:	4553      	cmp	r3, sl
 800f5ba:	dd05      	ble.n	800f5c8 <__gethex+0x1f4>
 800f5bc:	1eb9      	subs	r1, r7, #2
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f000 ff08 	bl	80103d4 <__any_on>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d145      	bne.n	800f654 <__gethex+0x280>
 800f5c8:	f04f 0a02 	mov.w	sl, #2
 800f5cc:	4639      	mov	r1, r7
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f7ff fe98 	bl	800f304 <rshift>
 800f5d4:	443d      	add	r5, r7
 800f5d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5da:	42ab      	cmp	r3, r5
 800f5dc:	da4c      	bge.n	800f678 <__gethex+0x2a4>
 800f5de:	ee18 0a10 	vmov	r0, s16
 800f5e2:	4621      	mov	r1, r4
 800f5e4:	f000 fa9c 	bl	800fb20 <_Bfree>
 800f5e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	6013      	str	r3, [r2, #0]
 800f5ee:	27a3      	movs	r7, #163	; 0xa3
 800f5f0:	e785      	b.n	800f4fe <__gethex+0x12a>
 800f5f2:	1e73      	subs	r3, r6, #1
 800f5f4:	9a05      	ldr	r2, [sp, #20]
 800f5f6:	9303      	str	r3, [sp, #12]
 800f5f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d019      	beq.n	800f634 <__gethex+0x260>
 800f600:	f1bb 0f20 	cmp.w	fp, #32
 800f604:	d107      	bne.n	800f616 <__gethex+0x242>
 800f606:	9b02      	ldr	r3, [sp, #8]
 800f608:	9a00      	ldr	r2, [sp, #0]
 800f60a:	f843 2b04 	str.w	r2, [r3], #4
 800f60e:	9302      	str	r3, [sp, #8]
 800f610:	2300      	movs	r3, #0
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	469b      	mov	fp, r3
 800f616:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f61a:	f7ff fec5 	bl	800f3a8 <__hexdig_fun>
 800f61e:	9b00      	ldr	r3, [sp, #0]
 800f620:	f000 000f 	and.w	r0, r0, #15
 800f624:	fa00 f00b 	lsl.w	r0, r0, fp
 800f628:	4303      	orrs	r3, r0
 800f62a:	9300      	str	r3, [sp, #0]
 800f62c:	f10b 0b04 	add.w	fp, fp, #4
 800f630:	9b03      	ldr	r3, [sp, #12]
 800f632:	e00d      	b.n	800f650 <__gethex+0x27c>
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	9a06      	ldr	r2, [sp, #24]
 800f638:	4413      	add	r3, r2
 800f63a:	42bb      	cmp	r3, r7
 800f63c:	d3e0      	bcc.n	800f600 <__gethex+0x22c>
 800f63e:	4618      	mov	r0, r3
 800f640:	9901      	ldr	r1, [sp, #4]
 800f642:	9307      	str	r3, [sp, #28]
 800f644:	4652      	mov	r2, sl
 800f646:	f001 f883 	bl	8010750 <strncmp>
 800f64a:	9b07      	ldr	r3, [sp, #28]
 800f64c:	2800      	cmp	r0, #0
 800f64e:	d1d7      	bne.n	800f600 <__gethex+0x22c>
 800f650:	461e      	mov	r6, r3
 800f652:	e78b      	b.n	800f56c <__gethex+0x198>
 800f654:	f04f 0a03 	mov.w	sl, #3
 800f658:	e7b8      	b.n	800f5cc <__gethex+0x1f8>
 800f65a:	da0a      	bge.n	800f672 <__gethex+0x29e>
 800f65c:	1a37      	subs	r7, r6, r0
 800f65e:	4621      	mov	r1, r4
 800f660:	ee18 0a10 	vmov	r0, s16
 800f664:	463a      	mov	r2, r7
 800f666:	f000 fc77 	bl	800ff58 <__lshift>
 800f66a:	1bed      	subs	r5, r5, r7
 800f66c:	4604      	mov	r4, r0
 800f66e:	f100 0914 	add.w	r9, r0, #20
 800f672:	f04f 0a00 	mov.w	sl, #0
 800f676:	e7ae      	b.n	800f5d6 <__gethex+0x202>
 800f678:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f67c:	42a8      	cmp	r0, r5
 800f67e:	dd72      	ble.n	800f766 <__gethex+0x392>
 800f680:	1b45      	subs	r5, r0, r5
 800f682:	42ae      	cmp	r6, r5
 800f684:	dc36      	bgt.n	800f6f4 <__gethex+0x320>
 800f686:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d02a      	beq.n	800f6e4 <__gethex+0x310>
 800f68e:	2b03      	cmp	r3, #3
 800f690:	d02c      	beq.n	800f6ec <__gethex+0x318>
 800f692:	2b01      	cmp	r3, #1
 800f694:	d115      	bne.n	800f6c2 <__gethex+0x2ee>
 800f696:	42ae      	cmp	r6, r5
 800f698:	d113      	bne.n	800f6c2 <__gethex+0x2ee>
 800f69a:	2e01      	cmp	r6, #1
 800f69c:	d10b      	bne.n	800f6b6 <__gethex+0x2e2>
 800f69e:	9a04      	ldr	r2, [sp, #16]
 800f6a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f6a4:	6013      	str	r3, [r2, #0]
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	6123      	str	r3, [r4, #16]
 800f6aa:	f8c9 3000 	str.w	r3, [r9]
 800f6ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6b0:	2762      	movs	r7, #98	; 0x62
 800f6b2:	601c      	str	r4, [r3, #0]
 800f6b4:	e723      	b.n	800f4fe <__gethex+0x12a>
 800f6b6:	1e71      	subs	r1, r6, #1
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f000 fe8b 	bl	80103d4 <__any_on>
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	d1ed      	bne.n	800f69e <__gethex+0x2ca>
 800f6c2:	ee18 0a10 	vmov	r0, s16
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	f000 fa2a 	bl	800fb20 <_Bfree>
 800f6cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	6013      	str	r3, [r2, #0]
 800f6d2:	2750      	movs	r7, #80	; 0x50
 800f6d4:	e713      	b.n	800f4fe <__gethex+0x12a>
 800f6d6:	bf00      	nop
 800f6d8:	08010d1c 	.word	0x08010d1c
 800f6dc:	08010ca0 	.word	0x08010ca0
 800f6e0:	08010cb1 	.word	0x08010cb1
 800f6e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1eb      	bne.n	800f6c2 <__gethex+0x2ee>
 800f6ea:	e7d8      	b.n	800f69e <__gethex+0x2ca>
 800f6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1d5      	bne.n	800f69e <__gethex+0x2ca>
 800f6f2:	e7e6      	b.n	800f6c2 <__gethex+0x2ee>
 800f6f4:	1e6f      	subs	r7, r5, #1
 800f6f6:	f1ba 0f00 	cmp.w	sl, #0
 800f6fa:	d131      	bne.n	800f760 <__gethex+0x38c>
 800f6fc:	b127      	cbz	r7, 800f708 <__gethex+0x334>
 800f6fe:	4639      	mov	r1, r7
 800f700:	4620      	mov	r0, r4
 800f702:	f000 fe67 	bl	80103d4 <__any_on>
 800f706:	4682      	mov	sl, r0
 800f708:	117b      	asrs	r3, r7, #5
 800f70a:	2101      	movs	r1, #1
 800f70c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f710:	f007 071f 	and.w	r7, r7, #31
 800f714:	fa01 f707 	lsl.w	r7, r1, r7
 800f718:	421f      	tst	r7, r3
 800f71a:	4629      	mov	r1, r5
 800f71c:	4620      	mov	r0, r4
 800f71e:	bf18      	it	ne
 800f720:	f04a 0a02 	orrne.w	sl, sl, #2
 800f724:	1b76      	subs	r6, r6, r5
 800f726:	f7ff fded 	bl	800f304 <rshift>
 800f72a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f72e:	2702      	movs	r7, #2
 800f730:	f1ba 0f00 	cmp.w	sl, #0
 800f734:	d048      	beq.n	800f7c8 <__gethex+0x3f4>
 800f736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f73a:	2b02      	cmp	r3, #2
 800f73c:	d015      	beq.n	800f76a <__gethex+0x396>
 800f73e:	2b03      	cmp	r3, #3
 800f740:	d017      	beq.n	800f772 <__gethex+0x39e>
 800f742:	2b01      	cmp	r3, #1
 800f744:	d109      	bne.n	800f75a <__gethex+0x386>
 800f746:	f01a 0f02 	tst.w	sl, #2
 800f74a:	d006      	beq.n	800f75a <__gethex+0x386>
 800f74c:	f8d9 0000 	ldr.w	r0, [r9]
 800f750:	ea4a 0a00 	orr.w	sl, sl, r0
 800f754:	f01a 0f01 	tst.w	sl, #1
 800f758:	d10e      	bne.n	800f778 <__gethex+0x3a4>
 800f75a:	f047 0710 	orr.w	r7, r7, #16
 800f75e:	e033      	b.n	800f7c8 <__gethex+0x3f4>
 800f760:	f04f 0a01 	mov.w	sl, #1
 800f764:	e7d0      	b.n	800f708 <__gethex+0x334>
 800f766:	2701      	movs	r7, #1
 800f768:	e7e2      	b.n	800f730 <__gethex+0x35c>
 800f76a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f76c:	f1c3 0301 	rsb	r3, r3, #1
 800f770:	9315      	str	r3, [sp, #84]	; 0x54
 800f772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f774:	2b00      	cmp	r3, #0
 800f776:	d0f0      	beq.n	800f75a <__gethex+0x386>
 800f778:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f77c:	f104 0314 	add.w	r3, r4, #20
 800f780:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f784:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f788:	f04f 0c00 	mov.w	ip, #0
 800f78c:	4618      	mov	r0, r3
 800f78e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f792:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800f796:	d01c      	beq.n	800f7d2 <__gethex+0x3fe>
 800f798:	3201      	adds	r2, #1
 800f79a:	6002      	str	r2, [r0, #0]
 800f79c:	2f02      	cmp	r7, #2
 800f79e:	f104 0314 	add.w	r3, r4, #20
 800f7a2:	d13f      	bne.n	800f824 <__gethex+0x450>
 800f7a4:	f8d8 2000 	ldr.w	r2, [r8]
 800f7a8:	3a01      	subs	r2, #1
 800f7aa:	42b2      	cmp	r2, r6
 800f7ac:	d10a      	bne.n	800f7c4 <__gethex+0x3f0>
 800f7ae:	1171      	asrs	r1, r6, #5
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f7b6:	f006 061f 	and.w	r6, r6, #31
 800f7ba:	fa02 f606 	lsl.w	r6, r2, r6
 800f7be:	421e      	tst	r6, r3
 800f7c0:	bf18      	it	ne
 800f7c2:	4617      	movne	r7, r2
 800f7c4:	f047 0720 	orr.w	r7, r7, #32
 800f7c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7ca:	601c      	str	r4, [r3, #0]
 800f7cc:	9b04      	ldr	r3, [sp, #16]
 800f7ce:	601d      	str	r5, [r3, #0]
 800f7d0:	e695      	b.n	800f4fe <__gethex+0x12a>
 800f7d2:	4299      	cmp	r1, r3
 800f7d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f7d8:	d8d8      	bhi.n	800f78c <__gethex+0x3b8>
 800f7da:	68a3      	ldr	r3, [r4, #8]
 800f7dc:	459b      	cmp	fp, r3
 800f7de:	db19      	blt.n	800f814 <__gethex+0x440>
 800f7e0:	6861      	ldr	r1, [r4, #4]
 800f7e2:	ee18 0a10 	vmov	r0, s16
 800f7e6:	3101      	adds	r1, #1
 800f7e8:	f000 f95a 	bl	800faa0 <_Balloc>
 800f7ec:	4681      	mov	r9, r0
 800f7ee:	b918      	cbnz	r0, 800f7f8 <__gethex+0x424>
 800f7f0:	4b1a      	ldr	r3, [pc, #104]	; (800f85c <__gethex+0x488>)
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	2184      	movs	r1, #132	; 0x84
 800f7f6:	e6a8      	b.n	800f54a <__gethex+0x176>
 800f7f8:	6922      	ldr	r2, [r4, #16]
 800f7fa:	3202      	adds	r2, #2
 800f7fc:	f104 010c 	add.w	r1, r4, #12
 800f800:	0092      	lsls	r2, r2, #2
 800f802:	300c      	adds	r0, #12
 800f804:	f7fc fde8 	bl	800c3d8 <memcpy>
 800f808:	4621      	mov	r1, r4
 800f80a:	ee18 0a10 	vmov	r0, s16
 800f80e:	f000 f987 	bl	800fb20 <_Bfree>
 800f812:	464c      	mov	r4, r9
 800f814:	6923      	ldr	r3, [r4, #16]
 800f816:	1c5a      	adds	r2, r3, #1
 800f818:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f81c:	6122      	str	r2, [r4, #16]
 800f81e:	2201      	movs	r2, #1
 800f820:	615a      	str	r2, [r3, #20]
 800f822:	e7bb      	b.n	800f79c <__gethex+0x3c8>
 800f824:	6922      	ldr	r2, [r4, #16]
 800f826:	455a      	cmp	r2, fp
 800f828:	dd0b      	ble.n	800f842 <__gethex+0x46e>
 800f82a:	2101      	movs	r1, #1
 800f82c:	4620      	mov	r0, r4
 800f82e:	f7ff fd69 	bl	800f304 <rshift>
 800f832:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f836:	3501      	adds	r5, #1
 800f838:	42ab      	cmp	r3, r5
 800f83a:	f6ff aed0 	blt.w	800f5de <__gethex+0x20a>
 800f83e:	2701      	movs	r7, #1
 800f840:	e7c0      	b.n	800f7c4 <__gethex+0x3f0>
 800f842:	f016 061f 	ands.w	r6, r6, #31
 800f846:	d0fa      	beq.n	800f83e <__gethex+0x46a>
 800f848:	449a      	add	sl, r3
 800f84a:	f1c6 0620 	rsb	r6, r6, #32
 800f84e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f852:	f000 fa1b 	bl	800fc8c <__hi0bits>
 800f856:	42b0      	cmp	r0, r6
 800f858:	dbe7      	blt.n	800f82a <__gethex+0x456>
 800f85a:	e7f0      	b.n	800f83e <__gethex+0x46a>
 800f85c:	08010ca0 	.word	0x08010ca0

0800f860 <L_shift>:
 800f860:	f1c2 0208 	rsb	r2, r2, #8
 800f864:	0092      	lsls	r2, r2, #2
 800f866:	b570      	push	{r4, r5, r6, lr}
 800f868:	f1c2 0620 	rsb	r6, r2, #32
 800f86c:	6843      	ldr	r3, [r0, #4]
 800f86e:	6804      	ldr	r4, [r0, #0]
 800f870:	fa03 f506 	lsl.w	r5, r3, r6
 800f874:	432c      	orrs	r4, r5
 800f876:	40d3      	lsrs	r3, r2
 800f878:	6004      	str	r4, [r0, #0]
 800f87a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f87e:	4288      	cmp	r0, r1
 800f880:	d3f4      	bcc.n	800f86c <L_shift+0xc>
 800f882:	bd70      	pop	{r4, r5, r6, pc}

0800f884 <__match>:
 800f884:	b530      	push	{r4, r5, lr}
 800f886:	6803      	ldr	r3, [r0, #0]
 800f888:	3301      	adds	r3, #1
 800f88a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f88e:	b914      	cbnz	r4, 800f896 <__match+0x12>
 800f890:	6003      	str	r3, [r0, #0]
 800f892:	2001      	movs	r0, #1
 800f894:	bd30      	pop	{r4, r5, pc}
 800f896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f89a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f89e:	2d19      	cmp	r5, #25
 800f8a0:	bf98      	it	ls
 800f8a2:	3220      	addls	r2, #32
 800f8a4:	42a2      	cmp	r2, r4
 800f8a6:	d0f0      	beq.n	800f88a <__match+0x6>
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e7f3      	b.n	800f894 <__match+0x10>

0800f8ac <__hexnan>:
 800f8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b0:	680b      	ldr	r3, [r1, #0]
 800f8b2:	6801      	ldr	r1, [r0, #0]
 800f8b4:	115e      	asrs	r6, r3, #5
 800f8b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f8ba:	f013 031f 	ands.w	r3, r3, #31
 800f8be:	b087      	sub	sp, #28
 800f8c0:	bf18      	it	ne
 800f8c2:	3604      	addne	r6, #4
 800f8c4:	2500      	movs	r5, #0
 800f8c6:	1f37      	subs	r7, r6, #4
 800f8c8:	4682      	mov	sl, r0
 800f8ca:	4690      	mov	r8, r2
 800f8cc:	9301      	str	r3, [sp, #4]
 800f8ce:	f846 5c04 	str.w	r5, [r6, #-4]
 800f8d2:	46b9      	mov	r9, r7
 800f8d4:	463c      	mov	r4, r7
 800f8d6:	9502      	str	r5, [sp, #8]
 800f8d8:	46ab      	mov	fp, r5
 800f8da:	784a      	ldrb	r2, [r1, #1]
 800f8dc:	1c4b      	adds	r3, r1, #1
 800f8de:	9303      	str	r3, [sp, #12]
 800f8e0:	b342      	cbz	r2, 800f934 <__hexnan+0x88>
 800f8e2:	4610      	mov	r0, r2
 800f8e4:	9105      	str	r1, [sp, #20]
 800f8e6:	9204      	str	r2, [sp, #16]
 800f8e8:	f7ff fd5e 	bl	800f3a8 <__hexdig_fun>
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	d14f      	bne.n	800f990 <__hexnan+0xe4>
 800f8f0:	9a04      	ldr	r2, [sp, #16]
 800f8f2:	9905      	ldr	r1, [sp, #20]
 800f8f4:	2a20      	cmp	r2, #32
 800f8f6:	d818      	bhi.n	800f92a <__hexnan+0x7e>
 800f8f8:	9b02      	ldr	r3, [sp, #8]
 800f8fa:	459b      	cmp	fp, r3
 800f8fc:	dd13      	ble.n	800f926 <__hexnan+0x7a>
 800f8fe:	454c      	cmp	r4, r9
 800f900:	d206      	bcs.n	800f910 <__hexnan+0x64>
 800f902:	2d07      	cmp	r5, #7
 800f904:	dc04      	bgt.n	800f910 <__hexnan+0x64>
 800f906:	462a      	mov	r2, r5
 800f908:	4649      	mov	r1, r9
 800f90a:	4620      	mov	r0, r4
 800f90c:	f7ff ffa8 	bl	800f860 <L_shift>
 800f910:	4544      	cmp	r4, r8
 800f912:	d950      	bls.n	800f9b6 <__hexnan+0x10a>
 800f914:	2300      	movs	r3, #0
 800f916:	f1a4 0904 	sub.w	r9, r4, #4
 800f91a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f91e:	f8cd b008 	str.w	fp, [sp, #8]
 800f922:	464c      	mov	r4, r9
 800f924:	461d      	mov	r5, r3
 800f926:	9903      	ldr	r1, [sp, #12]
 800f928:	e7d7      	b.n	800f8da <__hexnan+0x2e>
 800f92a:	2a29      	cmp	r2, #41	; 0x29
 800f92c:	d156      	bne.n	800f9dc <__hexnan+0x130>
 800f92e:	3102      	adds	r1, #2
 800f930:	f8ca 1000 	str.w	r1, [sl]
 800f934:	f1bb 0f00 	cmp.w	fp, #0
 800f938:	d050      	beq.n	800f9dc <__hexnan+0x130>
 800f93a:	454c      	cmp	r4, r9
 800f93c:	d206      	bcs.n	800f94c <__hexnan+0xa0>
 800f93e:	2d07      	cmp	r5, #7
 800f940:	dc04      	bgt.n	800f94c <__hexnan+0xa0>
 800f942:	462a      	mov	r2, r5
 800f944:	4649      	mov	r1, r9
 800f946:	4620      	mov	r0, r4
 800f948:	f7ff ff8a 	bl	800f860 <L_shift>
 800f94c:	4544      	cmp	r4, r8
 800f94e:	d934      	bls.n	800f9ba <__hexnan+0x10e>
 800f950:	f1a8 0204 	sub.w	r2, r8, #4
 800f954:	4623      	mov	r3, r4
 800f956:	f853 1b04 	ldr.w	r1, [r3], #4
 800f95a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f95e:	429f      	cmp	r7, r3
 800f960:	d2f9      	bcs.n	800f956 <__hexnan+0xaa>
 800f962:	1b3b      	subs	r3, r7, r4
 800f964:	f023 0303 	bic.w	r3, r3, #3
 800f968:	3304      	adds	r3, #4
 800f96a:	3401      	adds	r4, #1
 800f96c:	3e03      	subs	r6, #3
 800f96e:	42b4      	cmp	r4, r6
 800f970:	bf88      	it	hi
 800f972:	2304      	movhi	r3, #4
 800f974:	4443      	add	r3, r8
 800f976:	2200      	movs	r2, #0
 800f978:	f843 2b04 	str.w	r2, [r3], #4
 800f97c:	429f      	cmp	r7, r3
 800f97e:	d2fb      	bcs.n	800f978 <__hexnan+0xcc>
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	b91b      	cbnz	r3, 800f98c <__hexnan+0xe0>
 800f984:	4547      	cmp	r7, r8
 800f986:	d127      	bne.n	800f9d8 <__hexnan+0x12c>
 800f988:	2301      	movs	r3, #1
 800f98a:	603b      	str	r3, [r7, #0]
 800f98c:	2005      	movs	r0, #5
 800f98e:	e026      	b.n	800f9de <__hexnan+0x132>
 800f990:	3501      	adds	r5, #1
 800f992:	2d08      	cmp	r5, #8
 800f994:	f10b 0b01 	add.w	fp, fp, #1
 800f998:	dd06      	ble.n	800f9a8 <__hexnan+0xfc>
 800f99a:	4544      	cmp	r4, r8
 800f99c:	d9c3      	bls.n	800f926 <__hexnan+0x7a>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9a4:	2501      	movs	r5, #1
 800f9a6:	3c04      	subs	r4, #4
 800f9a8:	6822      	ldr	r2, [r4, #0]
 800f9aa:	f000 000f 	and.w	r0, r0, #15
 800f9ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f9b2:	6022      	str	r2, [r4, #0]
 800f9b4:	e7b7      	b.n	800f926 <__hexnan+0x7a>
 800f9b6:	2508      	movs	r5, #8
 800f9b8:	e7b5      	b.n	800f926 <__hexnan+0x7a>
 800f9ba:	9b01      	ldr	r3, [sp, #4]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d0df      	beq.n	800f980 <__hexnan+0xd4>
 800f9c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9c4:	f1c3 0320 	rsb	r3, r3, #32
 800f9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f9cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f9d0:	401a      	ands	r2, r3
 800f9d2:	f846 2c04 	str.w	r2, [r6, #-4]
 800f9d6:	e7d3      	b.n	800f980 <__hexnan+0xd4>
 800f9d8:	3f04      	subs	r7, #4
 800f9da:	e7d1      	b.n	800f980 <__hexnan+0xd4>
 800f9dc:	2004      	movs	r0, #4
 800f9de:	b007      	add	sp, #28
 800f9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9e4 <_isatty_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4d06      	ldr	r5, [pc, #24]	; (800fa00 <_isatty_r+0x1c>)
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	4608      	mov	r0, r1
 800f9ee:	602b      	str	r3, [r5, #0]
 800f9f0:	f000 ff38 	bl	8010864 <_isatty>
 800f9f4:	1c43      	adds	r3, r0, #1
 800f9f6:	d102      	bne.n	800f9fe <_isatty_r+0x1a>
 800f9f8:	682b      	ldr	r3, [r5, #0]
 800f9fa:	b103      	cbz	r3, 800f9fe <_isatty_r+0x1a>
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
 800fa00:	200081d8 	.word	0x200081d8

0800fa04 <_localeconv_r>:
 800fa04:	4800      	ldr	r0, [pc, #0]	; (800fa08 <_localeconv_r+0x4>)
 800fa06:	4770      	bx	lr
 800fa08:	20000170 	.word	0x20000170

0800fa0c <_lseek_r>:
 800fa0c:	b538      	push	{r3, r4, r5, lr}
 800fa0e:	4d07      	ldr	r5, [pc, #28]	; (800fa2c <_lseek_r+0x20>)
 800fa10:	4604      	mov	r4, r0
 800fa12:	4608      	mov	r0, r1
 800fa14:	4611      	mov	r1, r2
 800fa16:	2200      	movs	r2, #0
 800fa18:	602a      	str	r2, [r5, #0]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	f000 ff32 	bl	8010884 <_lseek>
 800fa20:	1c43      	adds	r3, r0, #1
 800fa22:	d102      	bne.n	800fa2a <_lseek_r+0x1e>
 800fa24:	682b      	ldr	r3, [r5, #0]
 800fa26:	b103      	cbz	r3, 800fa2a <_lseek_r+0x1e>
 800fa28:	6023      	str	r3, [r4, #0]
 800fa2a:	bd38      	pop	{r3, r4, r5, pc}
 800fa2c:	200081d8 	.word	0x200081d8

0800fa30 <__ascii_mbtowc>:
 800fa30:	b082      	sub	sp, #8
 800fa32:	b901      	cbnz	r1, 800fa36 <__ascii_mbtowc+0x6>
 800fa34:	a901      	add	r1, sp, #4
 800fa36:	b142      	cbz	r2, 800fa4a <__ascii_mbtowc+0x1a>
 800fa38:	b14b      	cbz	r3, 800fa4e <__ascii_mbtowc+0x1e>
 800fa3a:	7813      	ldrb	r3, [r2, #0]
 800fa3c:	600b      	str	r3, [r1, #0]
 800fa3e:	7812      	ldrb	r2, [r2, #0]
 800fa40:	1e10      	subs	r0, r2, #0
 800fa42:	bf18      	it	ne
 800fa44:	2001      	movne	r0, #1
 800fa46:	b002      	add	sp, #8
 800fa48:	4770      	bx	lr
 800fa4a:	4610      	mov	r0, r2
 800fa4c:	e7fb      	b.n	800fa46 <__ascii_mbtowc+0x16>
 800fa4e:	f06f 0001 	mvn.w	r0, #1
 800fa52:	e7f8      	b.n	800fa46 <__ascii_mbtowc+0x16>

0800fa54 <memmove>:
 800fa54:	4288      	cmp	r0, r1
 800fa56:	b510      	push	{r4, lr}
 800fa58:	eb01 0402 	add.w	r4, r1, r2
 800fa5c:	d902      	bls.n	800fa64 <memmove+0x10>
 800fa5e:	4284      	cmp	r4, r0
 800fa60:	4623      	mov	r3, r4
 800fa62:	d807      	bhi.n	800fa74 <memmove+0x20>
 800fa64:	1e43      	subs	r3, r0, #1
 800fa66:	42a1      	cmp	r1, r4
 800fa68:	d008      	beq.n	800fa7c <memmove+0x28>
 800fa6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa72:	e7f8      	b.n	800fa66 <memmove+0x12>
 800fa74:	4402      	add	r2, r0
 800fa76:	4601      	mov	r1, r0
 800fa78:	428a      	cmp	r2, r1
 800fa7a:	d100      	bne.n	800fa7e <memmove+0x2a>
 800fa7c:	bd10      	pop	{r4, pc}
 800fa7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa86:	e7f7      	b.n	800fa78 <memmove+0x24>

0800fa88 <__malloc_lock>:
 800fa88:	4801      	ldr	r0, [pc, #4]	; (800fa90 <__malloc_lock+0x8>)
 800fa8a:	f7fc bc2e 	b.w	800c2ea <__retarget_lock_acquire_recursive>
 800fa8e:	bf00      	nop
 800fa90:	200081d0 	.word	0x200081d0

0800fa94 <__malloc_unlock>:
 800fa94:	4801      	ldr	r0, [pc, #4]	; (800fa9c <__malloc_unlock+0x8>)
 800fa96:	f7fc bc29 	b.w	800c2ec <__retarget_lock_release_recursive>
 800fa9a:	bf00      	nop
 800fa9c:	200081d0 	.word	0x200081d0

0800faa0 <_Balloc>:
 800faa0:	b570      	push	{r4, r5, r6, lr}
 800faa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800faa4:	4604      	mov	r4, r0
 800faa6:	460d      	mov	r5, r1
 800faa8:	b976      	cbnz	r6, 800fac8 <_Balloc+0x28>
 800faaa:	2010      	movs	r0, #16
 800faac:	f7fc fc84 	bl	800c3b8 <malloc>
 800fab0:	4602      	mov	r2, r0
 800fab2:	6260      	str	r0, [r4, #36]	; 0x24
 800fab4:	b920      	cbnz	r0, 800fac0 <_Balloc+0x20>
 800fab6:	4b18      	ldr	r3, [pc, #96]	; (800fb18 <_Balloc+0x78>)
 800fab8:	4818      	ldr	r0, [pc, #96]	; (800fb1c <_Balloc+0x7c>)
 800faba:	2166      	movs	r1, #102	; 0x66
 800fabc:	f7fe fd6a 	bl	800e594 <__assert_func>
 800fac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fac4:	6006      	str	r6, [r0, #0]
 800fac6:	60c6      	str	r6, [r0, #12]
 800fac8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800faca:	68f3      	ldr	r3, [r6, #12]
 800facc:	b183      	cbz	r3, 800faf0 <_Balloc+0x50>
 800face:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fad6:	b9b8      	cbnz	r0, 800fb08 <_Balloc+0x68>
 800fad8:	2101      	movs	r1, #1
 800fada:	fa01 f605 	lsl.w	r6, r1, r5
 800fade:	1d72      	adds	r2, r6, #5
 800fae0:	0092      	lsls	r2, r2, #2
 800fae2:	4620      	mov	r0, r4
 800fae4:	f7fc fc8e 	bl	800c404 <_calloc_r>
 800fae8:	b160      	cbz	r0, 800fb04 <_Balloc+0x64>
 800faea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800faee:	e00e      	b.n	800fb0e <_Balloc+0x6e>
 800faf0:	2221      	movs	r2, #33	; 0x21
 800faf2:	2104      	movs	r1, #4
 800faf4:	4620      	mov	r0, r4
 800faf6:	f7fc fc85 	bl	800c404 <_calloc_r>
 800fafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fafc:	60f0      	str	r0, [r6, #12]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d1e4      	bne.n	800face <_Balloc+0x2e>
 800fb04:	2000      	movs	r0, #0
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
 800fb08:	6802      	ldr	r2, [r0, #0]
 800fb0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb14:	e7f7      	b.n	800fb06 <_Balloc+0x66>
 800fb16:	bf00      	nop
 800fb18:	08010c2a 	.word	0x08010c2a
 800fb1c:	08010d30 	.word	0x08010d30

0800fb20 <_Bfree>:
 800fb20:	b570      	push	{r4, r5, r6, lr}
 800fb22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb24:	4605      	mov	r5, r0
 800fb26:	460c      	mov	r4, r1
 800fb28:	b976      	cbnz	r6, 800fb48 <_Bfree+0x28>
 800fb2a:	2010      	movs	r0, #16
 800fb2c:	f7fc fc44 	bl	800c3b8 <malloc>
 800fb30:	4602      	mov	r2, r0
 800fb32:	6268      	str	r0, [r5, #36]	; 0x24
 800fb34:	b920      	cbnz	r0, 800fb40 <_Bfree+0x20>
 800fb36:	4b09      	ldr	r3, [pc, #36]	; (800fb5c <_Bfree+0x3c>)
 800fb38:	4809      	ldr	r0, [pc, #36]	; (800fb60 <_Bfree+0x40>)
 800fb3a:	218a      	movs	r1, #138	; 0x8a
 800fb3c:	f7fe fd2a 	bl	800e594 <__assert_func>
 800fb40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb44:	6006      	str	r6, [r0, #0]
 800fb46:	60c6      	str	r6, [r0, #12]
 800fb48:	b13c      	cbz	r4, 800fb5a <_Bfree+0x3a>
 800fb4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb4c:	6862      	ldr	r2, [r4, #4]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb54:	6021      	str	r1, [r4, #0]
 800fb56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb5a:	bd70      	pop	{r4, r5, r6, pc}
 800fb5c:	08010c2a 	.word	0x08010c2a
 800fb60:	08010d30 	.word	0x08010d30

0800fb64 <__multadd>:
 800fb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb68:	690e      	ldr	r6, [r1, #16]
 800fb6a:	4607      	mov	r7, r0
 800fb6c:	4698      	mov	r8, r3
 800fb6e:	460c      	mov	r4, r1
 800fb70:	f101 0014 	add.w	r0, r1, #20
 800fb74:	2300      	movs	r3, #0
 800fb76:	6805      	ldr	r5, [r0, #0]
 800fb78:	b2a9      	uxth	r1, r5
 800fb7a:	fb02 8101 	mla	r1, r2, r1, r8
 800fb7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fb82:	0c2d      	lsrs	r5, r5, #16
 800fb84:	fb02 c505 	mla	r5, r2, r5, ip
 800fb88:	b289      	uxth	r1, r1
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fb90:	429e      	cmp	r6, r3
 800fb92:	f840 1b04 	str.w	r1, [r0], #4
 800fb96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fb9a:	dcec      	bgt.n	800fb76 <__multadd+0x12>
 800fb9c:	f1b8 0f00 	cmp.w	r8, #0
 800fba0:	d022      	beq.n	800fbe8 <__multadd+0x84>
 800fba2:	68a3      	ldr	r3, [r4, #8]
 800fba4:	42b3      	cmp	r3, r6
 800fba6:	dc19      	bgt.n	800fbdc <__multadd+0x78>
 800fba8:	6861      	ldr	r1, [r4, #4]
 800fbaa:	4638      	mov	r0, r7
 800fbac:	3101      	adds	r1, #1
 800fbae:	f7ff ff77 	bl	800faa0 <_Balloc>
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	b928      	cbnz	r0, 800fbc2 <__multadd+0x5e>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	4b0d      	ldr	r3, [pc, #52]	; (800fbf0 <__multadd+0x8c>)
 800fbba:	480e      	ldr	r0, [pc, #56]	; (800fbf4 <__multadd+0x90>)
 800fbbc:	21b5      	movs	r1, #181	; 0xb5
 800fbbe:	f7fe fce9 	bl	800e594 <__assert_func>
 800fbc2:	6922      	ldr	r2, [r4, #16]
 800fbc4:	3202      	adds	r2, #2
 800fbc6:	f104 010c 	add.w	r1, r4, #12
 800fbca:	0092      	lsls	r2, r2, #2
 800fbcc:	300c      	adds	r0, #12
 800fbce:	f7fc fc03 	bl	800c3d8 <memcpy>
 800fbd2:	4621      	mov	r1, r4
 800fbd4:	4638      	mov	r0, r7
 800fbd6:	f7ff ffa3 	bl	800fb20 <_Bfree>
 800fbda:	462c      	mov	r4, r5
 800fbdc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fbe0:	3601      	adds	r6, #1
 800fbe2:	f8c3 8014 	str.w	r8, [r3, #20]
 800fbe6:	6126      	str	r6, [r4, #16]
 800fbe8:	4620      	mov	r0, r4
 800fbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbee:	bf00      	nop
 800fbf0:	08010ca0 	.word	0x08010ca0
 800fbf4:	08010d30 	.word	0x08010d30

0800fbf8 <__s2b>:
 800fbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbfc:	460c      	mov	r4, r1
 800fbfe:	4615      	mov	r5, r2
 800fc00:	461f      	mov	r7, r3
 800fc02:	2209      	movs	r2, #9
 800fc04:	3308      	adds	r3, #8
 800fc06:	4606      	mov	r6, r0
 800fc08:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc0c:	2100      	movs	r1, #0
 800fc0e:	2201      	movs	r2, #1
 800fc10:	429a      	cmp	r2, r3
 800fc12:	db09      	blt.n	800fc28 <__s2b+0x30>
 800fc14:	4630      	mov	r0, r6
 800fc16:	f7ff ff43 	bl	800faa0 <_Balloc>
 800fc1a:	b940      	cbnz	r0, 800fc2e <__s2b+0x36>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	4b19      	ldr	r3, [pc, #100]	; (800fc84 <__s2b+0x8c>)
 800fc20:	4819      	ldr	r0, [pc, #100]	; (800fc88 <__s2b+0x90>)
 800fc22:	21ce      	movs	r1, #206	; 0xce
 800fc24:	f7fe fcb6 	bl	800e594 <__assert_func>
 800fc28:	0052      	lsls	r2, r2, #1
 800fc2a:	3101      	adds	r1, #1
 800fc2c:	e7f0      	b.n	800fc10 <__s2b+0x18>
 800fc2e:	9b08      	ldr	r3, [sp, #32]
 800fc30:	6143      	str	r3, [r0, #20]
 800fc32:	2d09      	cmp	r5, #9
 800fc34:	f04f 0301 	mov.w	r3, #1
 800fc38:	6103      	str	r3, [r0, #16]
 800fc3a:	dd16      	ble.n	800fc6a <__s2b+0x72>
 800fc3c:	f104 0909 	add.w	r9, r4, #9
 800fc40:	46c8      	mov	r8, r9
 800fc42:	442c      	add	r4, r5
 800fc44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc48:	4601      	mov	r1, r0
 800fc4a:	3b30      	subs	r3, #48	; 0x30
 800fc4c:	220a      	movs	r2, #10
 800fc4e:	4630      	mov	r0, r6
 800fc50:	f7ff ff88 	bl	800fb64 <__multadd>
 800fc54:	45a0      	cmp	r8, r4
 800fc56:	d1f5      	bne.n	800fc44 <__s2b+0x4c>
 800fc58:	f1a5 0408 	sub.w	r4, r5, #8
 800fc5c:	444c      	add	r4, r9
 800fc5e:	1b2d      	subs	r5, r5, r4
 800fc60:	1963      	adds	r3, r4, r5
 800fc62:	42bb      	cmp	r3, r7
 800fc64:	db04      	blt.n	800fc70 <__s2b+0x78>
 800fc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc6a:	340a      	adds	r4, #10
 800fc6c:	2509      	movs	r5, #9
 800fc6e:	e7f6      	b.n	800fc5e <__s2b+0x66>
 800fc70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc74:	4601      	mov	r1, r0
 800fc76:	3b30      	subs	r3, #48	; 0x30
 800fc78:	220a      	movs	r2, #10
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f7ff ff72 	bl	800fb64 <__multadd>
 800fc80:	e7ee      	b.n	800fc60 <__s2b+0x68>
 800fc82:	bf00      	nop
 800fc84:	08010ca0 	.word	0x08010ca0
 800fc88:	08010d30 	.word	0x08010d30

0800fc8c <__hi0bits>:
 800fc8c:	0c03      	lsrs	r3, r0, #16
 800fc8e:	041b      	lsls	r3, r3, #16
 800fc90:	b9d3      	cbnz	r3, 800fcc8 <__hi0bits+0x3c>
 800fc92:	0400      	lsls	r0, r0, #16
 800fc94:	2310      	movs	r3, #16
 800fc96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fc9a:	bf04      	itt	eq
 800fc9c:	0200      	lsleq	r0, r0, #8
 800fc9e:	3308      	addeq	r3, #8
 800fca0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fca4:	bf04      	itt	eq
 800fca6:	0100      	lsleq	r0, r0, #4
 800fca8:	3304      	addeq	r3, #4
 800fcaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fcae:	bf04      	itt	eq
 800fcb0:	0080      	lsleq	r0, r0, #2
 800fcb2:	3302      	addeq	r3, #2
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	db05      	blt.n	800fcc4 <__hi0bits+0x38>
 800fcb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fcbc:	f103 0301 	add.w	r3, r3, #1
 800fcc0:	bf08      	it	eq
 800fcc2:	2320      	moveq	r3, #32
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	4770      	bx	lr
 800fcc8:	2300      	movs	r3, #0
 800fcca:	e7e4      	b.n	800fc96 <__hi0bits+0xa>

0800fccc <__lo0bits>:
 800fccc:	6803      	ldr	r3, [r0, #0]
 800fcce:	f013 0207 	ands.w	r2, r3, #7
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	d00b      	beq.n	800fcee <__lo0bits+0x22>
 800fcd6:	07da      	lsls	r2, r3, #31
 800fcd8:	d424      	bmi.n	800fd24 <__lo0bits+0x58>
 800fcda:	0798      	lsls	r0, r3, #30
 800fcdc:	bf49      	itett	mi
 800fcde:	085b      	lsrmi	r3, r3, #1
 800fce0:	089b      	lsrpl	r3, r3, #2
 800fce2:	2001      	movmi	r0, #1
 800fce4:	600b      	strmi	r3, [r1, #0]
 800fce6:	bf5c      	itt	pl
 800fce8:	600b      	strpl	r3, [r1, #0]
 800fcea:	2002      	movpl	r0, #2
 800fcec:	4770      	bx	lr
 800fcee:	b298      	uxth	r0, r3
 800fcf0:	b9b0      	cbnz	r0, 800fd20 <__lo0bits+0x54>
 800fcf2:	0c1b      	lsrs	r3, r3, #16
 800fcf4:	2010      	movs	r0, #16
 800fcf6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fcfa:	bf04      	itt	eq
 800fcfc:	0a1b      	lsreq	r3, r3, #8
 800fcfe:	3008      	addeq	r0, #8
 800fd00:	071a      	lsls	r2, r3, #28
 800fd02:	bf04      	itt	eq
 800fd04:	091b      	lsreq	r3, r3, #4
 800fd06:	3004      	addeq	r0, #4
 800fd08:	079a      	lsls	r2, r3, #30
 800fd0a:	bf04      	itt	eq
 800fd0c:	089b      	lsreq	r3, r3, #2
 800fd0e:	3002      	addeq	r0, #2
 800fd10:	07da      	lsls	r2, r3, #31
 800fd12:	d403      	bmi.n	800fd1c <__lo0bits+0x50>
 800fd14:	085b      	lsrs	r3, r3, #1
 800fd16:	f100 0001 	add.w	r0, r0, #1
 800fd1a:	d005      	beq.n	800fd28 <__lo0bits+0x5c>
 800fd1c:	600b      	str	r3, [r1, #0]
 800fd1e:	4770      	bx	lr
 800fd20:	4610      	mov	r0, r2
 800fd22:	e7e8      	b.n	800fcf6 <__lo0bits+0x2a>
 800fd24:	2000      	movs	r0, #0
 800fd26:	4770      	bx	lr
 800fd28:	2020      	movs	r0, #32
 800fd2a:	4770      	bx	lr

0800fd2c <__i2b>:
 800fd2c:	b510      	push	{r4, lr}
 800fd2e:	460c      	mov	r4, r1
 800fd30:	2101      	movs	r1, #1
 800fd32:	f7ff feb5 	bl	800faa0 <_Balloc>
 800fd36:	4602      	mov	r2, r0
 800fd38:	b928      	cbnz	r0, 800fd46 <__i2b+0x1a>
 800fd3a:	4b05      	ldr	r3, [pc, #20]	; (800fd50 <__i2b+0x24>)
 800fd3c:	4805      	ldr	r0, [pc, #20]	; (800fd54 <__i2b+0x28>)
 800fd3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd42:	f7fe fc27 	bl	800e594 <__assert_func>
 800fd46:	2301      	movs	r3, #1
 800fd48:	6144      	str	r4, [r0, #20]
 800fd4a:	6103      	str	r3, [r0, #16]
 800fd4c:	bd10      	pop	{r4, pc}
 800fd4e:	bf00      	nop
 800fd50:	08010ca0 	.word	0x08010ca0
 800fd54:	08010d30 	.word	0x08010d30

0800fd58 <__multiply>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	4614      	mov	r4, r2
 800fd5e:	690a      	ldr	r2, [r1, #16]
 800fd60:	6923      	ldr	r3, [r4, #16]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	bfb8      	it	lt
 800fd66:	460b      	movlt	r3, r1
 800fd68:	460d      	mov	r5, r1
 800fd6a:	bfbc      	itt	lt
 800fd6c:	4625      	movlt	r5, r4
 800fd6e:	461c      	movlt	r4, r3
 800fd70:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fd74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fd78:	68ab      	ldr	r3, [r5, #8]
 800fd7a:	6869      	ldr	r1, [r5, #4]
 800fd7c:	eb0a 0709 	add.w	r7, sl, r9
 800fd80:	42bb      	cmp	r3, r7
 800fd82:	b085      	sub	sp, #20
 800fd84:	bfb8      	it	lt
 800fd86:	3101      	addlt	r1, #1
 800fd88:	f7ff fe8a 	bl	800faa0 <_Balloc>
 800fd8c:	b930      	cbnz	r0, 800fd9c <__multiply+0x44>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	4b42      	ldr	r3, [pc, #264]	; (800fe9c <__multiply+0x144>)
 800fd92:	4843      	ldr	r0, [pc, #268]	; (800fea0 <__multiply+0x148>)
 800fd94:	f240 115d 	movw	r1, #349	; 0x15d
 800fd98:	f7fe fbfc 	bl	800e594 <__assert_func>
 800fd9c:	f100 0614 	add.w	r6, r0, #20
 800fda0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fda4:	4633      	mov	r3, r6
 800fda6:	2200      	movs	r2, #0
 800fda8:	4543      	cmp	r3, r8
 800fdaa:	d31e      	bcc.n	800fdea <__multiply+0x92>
 800fdac:	f105 0c14 	add.w	ip, r5, #20
 800fdb0:	f104 0314 	add.w	r3, r4, #20
 800fdb4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fdb8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fdbc:	9202      	str	r2, [sp, #8]
 800fdbe:	ebac 0205 	sub.w	r2, ip, r5
 800fdc2:	3a15      	subs	r2, #21
 800fdc4:	f022 0203 	bic.w	r2, r2, #3
 800fdc8:	3204      	adds	r2, #4
 800fdca:	f105 0115 	add.w	r1, r5, #21
 800fdce:	458c      	cmp	ip, r1
 800fdd0:	bf38      	it	cc
 800fdd2:	2204      	movcc	r2, #4
 800fdd4:	9201      	str	r2, [sp, #4]
 800fdd6:	9a02      	ldr	r2, [sp, #8]
 800fdd8:	9303      	str	r3, [sp, #12]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d808      	bhi.n	800fdf0 <__multiply+0x98>
 800fdde:	2f00      	cmp	r7, #0
 800fde0:	dc55      	bgt.n	800fe8e <__multiply+0x136>
 800fde2:	6107      	str	r7, [r0, #16]
 800fde4:	b005      	add	sp, #20
 800fde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdea:	f843 2b04 	str.w	r2, [r3], #4
 800fdee:	e7db      	b.n	800fda8 <__multiply+0x50>
 800fdf0:	f8b3 a000 	ldrh.w	sl, [r3]
 800fdf4:	f1ba 0f00 	cmp.w	sl, #0
 800fdf8:	d020      	beq.n	800fe3c <__multiply+0xe4>
 800fdfa:	f105 0e14 	add.w	lr, r5, #20
 800fdfe:	46b1      	mov	r9, r6
 800fe00:	2200      	movs	r2, #0
 800fe02:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fe06:	f8d9 b000 	ldr.w	fp, [r9]
 800fe0a:	b2a1      	uxth	r1, r4
 800fe0c:	fa1f fb8b 	uxth.w	fp, fp
 800fe10:	fb0a b101 	mla	r1, sl, r1, fp
 800fe14:	4411      	add	r1, r2
 800fe16:	f8d9 2000 	ldr.w	r2, [r9]
 800fe1a:	0c24      	lsrs	r4, r4, #16
 800fe1c:	0c12      	lsrs	r2, r2, #16
 800fe1e:	fb0a 2404 	mla	r4, sl, r4, r2
 800fe22:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fe26:	b289      	uxth	r1, r1
 800fe28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fe2c:	45f4      	cmp	ip, lr
 800fe2e:	f849 1b04 	str.w	r1, [r9], #4
 800fe32:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fe36:	d8e4      	bhi.n	800fe02 <__multiply+0xaa>
 800fe38:	9901      	ldr	r1, [sp, #4]
 800fe3a:	5072      	str	r2, [r6, r1]
 800fe3c:	9a03      	ldr	r2, [sp, #12]
 800fe3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fe42:	3304      	adds	r3, #4
 800fe44:	f1b9 0f00 	cmp.w	r9, #0
 800fe48:	d01f      	beq.n	800fe8a <__multiply+0x132>
 800fe4a:	6834      	ldr	r4, [r6, #0]
 800fe4c:	f105 0114 	add.w	r1, r5, #20
 800fe50:	46b6      	mov	lr, r6
 800fe52:	f04f 0a00 	mov.w	sl, #0
 800fe56:	880a      	ldrh	r2, [r1, #0]
 800fe58:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fe5c:	fb09 b202 	mla	r2, r9, r2, fp
 800fe60:	4492      	add	sl, r2
 800fe62:	b2a4      	uxth	r4, r4
 800fe64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fe68:	f84e 4b04 	str.w	r4, [lr], #4
 800fe6c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fe70:	f8be 2000 	ldrh.w	r2, [lr]
 800fe74:	0c24      	lsrs	r4, r4, #16
 800fe76:	fb09 2404 	mla	r4, r9, r4, r2
 800fe7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fe7e:	458c      	cmp	ip, r1
 800fe80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fe84:	d8e7      	bhi.n	800fe56 <__multiply+0xfe>
 800fe86:	9a01      	ldr	r2, [sp, #4]
 800fe88:	50b4      	str	r4, [r6, r2]
 800fe8a:	3604      	adds	r6, #4
 800fe8c:	e7a3      	b.n	800fdd6 <__multiply+0x7e>
 800fe8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1a5      	bne.n	800fde2 <__multiply+0x8a>
 800fe96:	3f01      	subs	r7, #1
 800fe98:	e7a1      	b.n	800fdde <__multiply+0x86>
 800fe9a:	bf00      	nop
 800fe9c:	08010ca0 	.word	0x08010ca0
 800fea0:	08010d30 	.word	0x08010d30

0800fea4 <__pow5mult>:
 800fea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea8:	4615      	mov	r5, r2
 800feaa:	f012 0203 	ands.w	r2, r2, #3
 800feae:	4606      	mov	r6, r0
 800feb0:	460f      	mov	r7, r1
 800feb2:	d007      	beq.n	800fec4 <__pow5mult+0x20>
 800feb4:	4c25      	ldr	r4, [pc, #148]	; (800ff4c <__pow5mult+0xa8>)
 800feb6:	3a01      	subs	r2, #1
 800feb8:	2300      	movs	r3, #0
 800feba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800febe:	f7ff fe51 	bl	800fb64 <__multadd>
 800fec2:	4607      	mov	r7, r0
 800fec4:	10ad      	asrs	r5, r5, #2
 800fec6:	d03d      	beq.n	800ff44 <__pow5mult+0xa0>
 800fec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800feca:	b97c      	cbnz	r4, 800feec <__pow5mult+0x48>
 800fecc:	2010      	movs	r0, #16
 800fece:	f7fc fa73 	bl	800c3b8 <malloc>
 800fed2:	4602      	mov	r2, r0
 800fed4:	6270      	str	r0, [r6, #36]	; 0x24
 800fed6:	b928      	cbnz	r0, 800fee4 <__pow5mult+0x40>
 800fed8:	4b1d      	ldr	r3, [pc, #116]	; (800ff50 <__pow5mult+0xac>)
 800feda:	481e      	ldr	r0, [pc, #120]	; (800ff54 <__pow5mult+0xb0>)
 800fedc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fee0:	f7fe fb58 	bl	800e594 <__assert_func>
 800fee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fee8:	6004      	str	r4, [r0, #0]
 800feea:	60c4      	str	r4, [r0, #12]
 800feec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fef4:	b94c      	cbnz	r4, 800ff0a <__pow5mult+0x66>
 800fef6:	f240 2171 	movw	r1, #625	; 0x271
 800fefa:	4630      	mov	r0, r6
 800fefc:	f7ff ff16 	bl	800fd2c <__i2b>
 800ff00:	2300      	movs	r3, #0
 800ff02:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff06:	4604      	mov	r4, r0
 800ff08:	6003      	str	r3, [r0, #0]
 800ff0a:	f04f 0900 	mov.w	r9, #0
 800ff0e:	07eb      	lsls	r3, r5, #31
 800ff10:	d50a      	bpl.n	800ff28 <__pow5mult+0x84>
 800ff12:	4639      	mov	r1, r7
 800ff14:	4622      	mov	r2, r4
 800ff16:	4630      	mov	r0, r6
 800ff18:	f7ff ff1e 	bl	800fd58 <__multiply>
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	4680      	mov	r8, r0
 800ff20:	4630      	mov	r0, r6
 800ff22:	f7ff fdfd 	bl	800fb20 <_Bfree>
 800ff26:	4647      	mov	r7, r8
 800ff28:	106d      	asrs	r5, r5, #1
 800ff2a:	d00b      	beq.n	800ff44 <__pow5mult+0xa0>
 800ff2c:	6820      	ldr	r0, [r4, #0]
 800ff2e:	b938      	cbnz	r0, 800ff40 <__pow5mult+0x9c>
 800ff30:	4622      	mov	r2, r4
 800ff32:	4621      	mov	r1, r4
 800ff34:	4630      	mov	r0, r6
 800ff36:	f7ff ff0f 	bl	800fd58 <__multiply>
 800ff3a:	6020      	str	r0, [r4, #0]
 800ff3c:	f8c0 9000 	str.w	r9, [r0]
 800ff40:	4604      	mov	r4, r0
 800ff42:	e7e4      	b.n	800ff0e <__pow5mult+0x6a>
 800ff44:	4638      	mov	r0, r7
 800ff46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff4a:	bf00      	nop
 800ff4c:	08010e80 	.word	0x08010e80
 800ff50:	08010c2a 	.word	0x08010c2a
 800ff54:	08010d30 	.word	0x08010d30

0800ff58 <__lshift>:
 800ff58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff5c:	460c      	mov	r4, r1
 800ff5e:	6849      	ldr	r1, [r1, #4]
 800ff60:	6923      	ldr	r3, [r4, #16]
 800ff62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff66:	68a3      	ldr	r3, [r4, #8]
 800ff68:	4607      	mov	r7, r0
 800ff6a:	4691      	mov	r9, r2
 800ff6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff70:	f108 0601 	add.w	r6, r8, #1
 800ff74:	42b3      	cmp	r3, r6
 800ff76:	db0b      	blt.n	800ff90 <__lshift+0x38>
 800ff78:	4638      	mov	r0, r7
 800ff7a:	f7ff fd91 	bl	800faa0 <_Balloc>
 800ff7e:	4605      	mov	r5, r0
 800ff80:	b948      	cbnz	r0, 800ff96 <__lshift+0x3e>
 800ff82:	4602      	mov	r2, r0
 800ff84:	4b28      	ldr	r3, [pc, #160]	; (8010028 <__lshift+0xd0>)
 800ff86:	4829      	ldr	r0, [pc, #164]	; (801002c <__lshift+0xd4>)
 800ff88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ff8c:	f7fe fb02 	bl	800e594 <__assert_func>
 800ff90:	3101      	adds	r1, #1
 800ff92:	005b      	lsls	r3, r3, #1
 800ff94:	e7ee      	b.n	800ff74 <__lshift+0x1c>
 800ff96:	2300      	movs	r3, #0
 800ff98:	f100 0114 	add.w	r1, r0, #20
 800ff9c:	f100 0210 	add.w	r2, r0, #16
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	4553      	cmp	r3, sl
 800ffa4:	db33      	blt.n	801000e <__lshift+0xb6>
 800ffa6:	6920      	ldr	r0, [r4, #16]
 800ffa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ffac:	f104 0314 	add.w	r3, r4, #20
 800ffb0:	f019 091f 	ands.w	r9, r9, #31
 800ffb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ffbc:	d02b      	beq.n	8010016 <__lshift+0xbe>
 800ffbe:	f1c9 0e20 	rsb	lr, r9, #32
 800ffc2:	468a      	mov	sl, r1
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	6818      	ldr	r0, [r3, #0]
 800ffc8:	fa00 f009 	lsl.w	r0, r0, r9
 800ffcc:	4302      	orrs	r2, r0
 800ffce:	f84a 2b04 	str.w	r2, [sl], #4
 800ffd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffd6:	459c      	cmp	ip, r3
 800ffd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ffdc:	d8f3      	bhi.n	800ffc6 <__lshift+0x6e>
 800ffde:	ebac 0304 	sub.w	r3, ip, r4
 800ffe2:	3b15      	subs	r3, #21
 800ffe4:	f023 0303 	bic.w	r3, r3, #3
 800ffe8:	3304      	adds	r3, #4
 800ffea:	f104 0015 	add.w	r0, r4, #21
 800ffee:	4584      	cmp	ip, r0
 800fff0:	bf38      	it	cc
 800fff2:	2304      	movcc	r3, #4
 800fff4:	50ca      	str	r2, [r1, r3]
 800fff6:	b10a      	cbz	r2, 800fffc <__lshift+0xa4>
 800fff8:	f108 0602 	add.w	r6, r8, #2
 800fffc:	3e01      	subs	r6, #1
 800fffe:	4638      	mov	r0, r7
 8010000:	612e      	str	r6, [r5, #16]
 8010002:	4621      	mov	r1, r4
 8010004:	f7ff fd8c 	bl	800fb20 <_Bfree>
 8010008:	4628      	mov	r0, r5
 801000a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801000e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010012:	3301      	adds	r3, #1
 8010014:	e7c5      	b.n	800ffa2 <__lshift+0x4a>
 8010016:	3904      	subs	r1, #4
 8010018:	f853 2b04 	ldr.w	r2, [r3], #4
 801001c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010020:	459c      	cmp	ip, r3
 8010022:	d8f9      	bhi.n	8010018 <__lshift+0xc0>
 8010024:	e7ea      	b.n	800fffc <__lshift+0xa4>
 8010026:	bf00      	nop
 8010028:	08010ca0 	.word	0x08010ca0
 801002c:	08010d30 	.word	0x08010d30

08010030 <__mcmp>:
 8010030:	b530      	push	{r4, r5, lr}
 8010032:	6902      	ldr	r2, [r0, #16]
 8010034:	690c      	ldr	r4, [r1, #16]
 8010036:	1b12      	subs	r2, r2, r4
 8010038:	d10e      	bne.n	8010058 <__mcmp+0x28>
 801003a:	f100 0314 	add.w	r3, r0, #20
 801003e:	3114      	adds	r1, #20
 8010040:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010044:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010048:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801004c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010050:	42a5      	cmp	r5, r4
 8010052:	d003      	beq.n	801005c <__mcmp+0x2c>
 8010054:	d305      	bcc.n	8010062 <__mcmp+0x32>
 8010056:	2201      	movs	r2, #1
 8010058:	4610      	mov	r0, r2
 801005a:	bd30      	pop	{r4, r5, pc}
 801005c:	4283      	cmp	r3, r0
 801005e:	d3f3      	bcc.n	8010048 <__mcmp+0x18>
 8010060:	e7fa      	b.n	8010058 <__mcmp+0x28>
 8010062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010066:	e7f7      	b.n	8010058 <__mcmp+0x28>

08010068 <__mdiff>:
 8010068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801006c:	460c      	mov	r4, r1
 801006e:	4606      	mov	r6, r0
 8010070:	4611      	mov	r1, r2
 8010072:	4620      	mov	r0, r4
 8010074:	4617      	mov	r7, r2
 8010076:	f7ff ffdb 	bl	8010030 <__mcmp>
 801007a:	1e05      	subs	r5, r0, #0
 801007c:	d110      	bne.n	80100a0 <__mdiff+0x38>
 801007e:	4629      	mov	r1, r5
 8010080:	4630      	mov	r0, r6
 8010082:	f7ff fd0d 	bl	800faa0 <_Balloc>
 8010086:	b930      	cbnz	r0, 8010096 <__mdiff+0x2e>
 8010088:	4b39      	ldr	r3, [pc, #228]	; (8010170 <__mdiff+0x108>)
 801008a:	4602      	mov	r2, r0
 801008c:	f240 2132 	movw	r1, #562	; 0x232
 8010090:	4838      	ldr	r0, [pc, #224]	; (8010174 <__mdiff+0x10c>)
 8010092:	f7fe fa7f 	bl	800e594 <__assert_func>
 8010096:	2301      	movs	r3, #1
 8010098:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801009c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a0:	bfa4      	itt	ge
 80100a2:	463b      	movge	r3, r7
 80100a4:	4627      	movge	r7, r4
 80100a6:	4630      	mov	r0, r6
 80100a8:	6879      	ldr	r1, [r7, #4]
 80100aa:	bfa6      	itte	ge
 80100ac:	461c      	movge	r4, r3
 80100ae:	2500      	movge	r5, #0
 80100b0:	2501      	movlt	r5, #1
 80100b2:	f7ff fcf5 	bl	800faa0 <_Balloc>
 80100b6:	b920      	cbnz	r0, 80100c2 <__mdiff+0x5a>
 80100b8:	4b2d      	ldr	r3, [pc, #180]	; (8010170 <__mdiff+0x108>)
 80100ba:	4602      	mov	r2, r0
 80100bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80100c0:	e7e6      	b.n	8010090 <__mdiff+0x28>
 80100c2:	693e      	ldr	r6, [r7, #16]
 80100c4:	60c5      	str	r5, [r0, #12]
 80100c6:	6925      	ldr	r5, [r4, #16]
 80100c8:	f107 0114 	add.w	r1, r7, #20
 80100cc:	f104 0914 	add.w	r9, r4, #20
 80100d0:	f100 0e14 	add.w	lr, r0, #20
 80100d4:	f107 0210 	add.w	r2, r7, #16
 80100d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80100dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80100e0:	46f2      	mov	sl, lr
 80100e2:	2700      	movs	r7, #0
 80100e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80100e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80100ec:	fa1f f883 	uxth.w	r8, r3
 80100f0:	fa17 f78b 	uxtah	r7, r7, fp
 80100f4:	0c1b      	lsrs	r3, r3, #16
 80100f6:	eba7 0808 	sub.w	r8, r7, r8
 80100fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80100fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010102:	fa1f f888 	uxth.w	r8, r8
 8010106:	141f      	asrs	r7, r3, #16
 8010108:	454d      	cmp	r5, r9
 801010a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801010e:	f84a 3b04 	str.w	r3, [sl], #4
 8010112:	d8e7      	bhi.n	80100e4 <__mdiff+0x7c>
 8010114:	1b2b      	subs	r3, r5, r4
 8010116:	3b15      	subs	r3, #21
 8010118:	f023 0303 	bic.w	r3, r3, #3
 801011c:	3304      	adds	r3, #4
 801011e:	3415      	adds	r4, #21
 8010120:	42a5      	cmp	r5, r4
 8010122:	bf38      	it	cc
 8010124:	2304      	movcc	r3, #4
 8010126:	4419      	add	r1, r3
 8010128:	4473      	add	r3, lr
 801012a:	469e      	mov	lr, r3
 801012c:	460d      	mov	r5, r1
 801012e:	4565      	cmp	r5, ip
 8010130:	d30e      	bcc.n	8010150 <__mdiff+0xe8>
 8010132:	f10c 0203 	add.w	r2, ip, #3
 8010136:	1a52      	subs	r2, r2, r1
 8010138:	f022 0203 	bic.w	r2, r2, #3
 801013c:	3903      	subs	r1, #3
 801013e:	458c      	cmp	ip, r1
 8010140:	bf38      	it	cc
 8010142:	2200      	movcc	r2, #0
 8010144:	441a      	add	r2, r3
 8010146:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801014a:	b17b      	cbz	r3, 801016c <__mdiff+0x104>
 801014c:	6106      	str	r6, [r0, #16]
 801014e:	e7a5      	b.n	801009c <__mdiff+0x34>
 8010150:	f855 8b04 	ldr.w	r8, [r5], #4
 8010154:	fa17 f488 	uxtah	r4, r7, r8
 8010158:	1422      	asrs	r2, r4, #16
 801015a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801015e:	b2a4      	uxth	r4, r4
 8010160:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010164:	f84e 4b04 	str.w	r4, [lr], #4
 8010168:	1417      	asrs	r7, r2, #16
 801016a:	e7e0      	b.n	801012e <__mdiff+0xc6>
 801016c:	3e01      	subs	r6, #1
 801016e:	e7ea      	b.n	8010146 <__mdiff+0xde>
 8010170:	08010ca0 	.word	0x08010ca0
 8010174:	08010d30 	.word	0x08010d30

08010178 <__ulp>:
 8010178:	b082      	sub	sp, #8
 801017a:	ed8d 0b00 	vstr	d0, [sp]
 801017e:	9b01      	ldr	r3, [sp, #4]
 8010180:	4912      	ldr	r1, [pc, #72]	; (80101cc <__ulp+0x54>)
 8010182:	4019      	ands	r1, r3
 8010184:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010188:	2900      	cmp	r1, #0
 801018a:	dd05      	ble.n	8010198 <__ulp+0x20>
 801018c:	2200      	movs	r2, #0
 801018e:	460b      	mov	r3, r1
 8010190:	ec43 2b10 	vmov	d0, r2, r3
 8010194:	b002      	add	sp, #8
 8010196:	4770      	bx	lr
 8010198:	4249      	negs	r1, r1
 801019a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801019e:	ea4f 5021 	mov.w	r0, r1, asr #20
 80101a2:	f04f 0200 	mov.w	r2, #0
 80101a6:	f04f 0300 	mov.w	r3, #0
 80101aa:	da04      	bge.n	80101b6 <__ulp+0x3e>
 80101ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80101b0:	fa41 f300 	asr.w	r3, r1, r0
 80101b4:	e7ec      	b.n	8010190 <__ulp+0x18>
 80101b6:	f1a0 0114 	sub.w	r1, r0, #20
 80101ba:	291e      	cmp	r1, #30
 80101bc:	bfda      	itte	le
 80101be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80101c2:	fa20 f101 	lsrle.w	r1, r0, r1
 80101c6:	2101      	movgt	r1, #1
 80101c8:	460a      	mov	r2, r1
 80101ca:	e7e1      	b.n	8010190 <__ulp+0x18>
 80101cc:	7ff00000 	.word	0x7ff00000

080101d0 <__b2d>:
 80101d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101d2:	6905      	ldr	r5, [r0, #16]
 80101d4:	f100 0714 	add.w	r7, r0, #20
 80101d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80101dc:	1f2e      	subs	r6, r5, #4
 80101de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80101e2:	4620      	mov	r0, r4
 80101e4:	f7ff fd52 	bl	800fc8c <__hi0bits>
 80101e8:	f1c0 0320 	rsb	r3, r0, #32
 80101ec:	280a      	cmp	r0, #10
 80101ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801026c <__b2d+0x9c>
 80101f2:	600b      	str	r3, [r1, #0]
 80101f4:	dc14      	bgt.n	8010220 <__b2d+0x50>
 80101f6:	f1c0 0e0b 	rsb	lr, r0, #11
 80101fa:	fa24 f10e 	lsr.w	r1, r4, lr
 80101fe:	42b7      	cmp	r7, r6
 8010200:	ea41 030c 	orr.w	r3, r1, ip
 8010204:	bf34      	ite	cc
 8010206:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801020a:	2100      	movcs	r1, #0
 801020c:	3015      	adds	r0, #21
 801020e:	fa04 f000 	lsl.w	r0, r4, r0
 8010212:	fa21 f10e 	lsr.w	r1, r1, lr
 8010216:	ea40 0201 	orr.w	r2, r0, r1
 801021a:	ec43 2b10 	vmov	d0, r2, r3
 801021e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010220:	42b7      	cmp	r7, r6
 8010222:	bf3a      	itte	cc
 8010224:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010228:	f1a5 0608 	subcc.w	r6, r5, #8
 801022c:	2100      	movcs	r1, #0
 801022e:	380b      	subs	r0, #11
 8010230:	d017      	beq.n	8010262 <__b2d+0x92>
 8010232:	f1c0 0c20 	rsb	ip, r0, #32
 8010236:	fa04 f500 	lsl.w	r5, r4, r0
 801023a:	42be      	cmp	r6, r7
 801023c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010240:	ea45 0504 	orr.w	r5, r5, r4
 8010244:	bf8c      	ite	hi
 8010246:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801024a:	2400      	movls	r4, #0
 801024c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010250:	fa01 f000 	lsl.w	r0, r1, r0
 8010254:	fa24 f40c 	lsr.w	r4, r4, ip
 8010258:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801025c:	ea40 0204 	orr.w	r2, r0, r4
 8010260:	e7db      	b.n	801021a <__b2d+0x4a>
 8010262:	ea44 030c 	orr.w	r3, r4, ip
 8010266:	460a      	mov	r2, r1
 8010268:	e7d7      	b.n	801021a <__b2d+0x4a>
 801026a:	bf00      	nop
 801026c:	3ff00000 	.word	0x3ff00000

08010270 <__d2b>:
 8010270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010274:	4689      	mov	r9, r1
 8010276:	2101      	movs	r1, #1
 8010278:	ec57 6b10 	vmov	r6, r7, d0
 801027c:	4690      	mov	r8, r2
 801027e:	f7ff fc0f 	bl	800faa0 <_Balloc>
 8010282:	4604      	mov	r4, r0
 8010284:	b930      	cbnz	r0, 8010294 <__d2b+0x24>
 8010286:	4602      	mov	r2, r0
 8010288:	4b25      	ldr	r3, [pc, #148]	; (8010320 <__d2b+0xb0>)
 801028a:	4826      	ldr	r0, [pc, #152]	; (8010324 <__d2b+0xb4>)
 801028c:	f240 310a 	movw	r1, #778	; 0x30a
 8010290:	f7fe f980 	bl	800e594 <__assert_func>
 8010294:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801029c:	bb35      	cbnz	r5, 80102ec <__d2b+0x7c>
 801029e:	2e00      	cmp	r6, #0
 80102a0:	9301      	str	r3, [sp, #4]
 80102a2:	d028      	beq.n	80102f6 <__d2b+0x86>
 80102a4:	4668      	mov	r0, sp
 80102a6:	9600      	str	r6, [sp, #0]
 80102a8:	f7ff fd10 	bl	800fccc <__lo0bits>
 80102ac:	9900      	ldr	r1, [sp, #0]
 80102ae:	b300      	cbz	r0, 80102f2 <__d2b+0x82>
 80102b0:	9a01      	ldr	r2, [sp, #4]
 80102b2:	f1c0 0320 	rsb	r3, r0, #32
 80102b6:	fa02 f303 	lsl.w	r3, r2, r3
 80102ba:	430b      	orrs	r3, r1
 80102bc:	40c2      	lsrs	r2, r0
 80102be:	6163      	str	r3, [r4, #20]
 80102c0:	9201      	str	r2, [sp, #4]
 80102c2:	9b01      	ldr	r3, [sp, #4]
 80102c4:	61a3      	str	r3, [r4, #24]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	bf14      	ite	ne
 80102ca:	2202      	movne	r2, #2
 80102cc:	2201      	moveq	r2, #1
 80102ce:	6122      	str	r2, [r4, #16]
 80102d0:	b1d5      	cbz	r5, 8010308 <__d2b+0x98>
 80102d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80102d6:	4405      	add	r5, r0
 80102d8:	f8c9 5000 	str.w	r5, [r9]
 80102dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102e0:	f8c8 0000 	str.w	r0, [r8]
 80102e4:	4620      	mov	r0, r4
 80102e6:	b003      	add	sp, #12
 80102e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102f0:	e7d5      	b.n	801029e <__d2b+0x2e>
 80102f2:	6161      	str	r1, [r4, #20]
 80102f4:	e7e5      	b.n	80102c2 <__d2b+0x52>
 80102f6:	a801      	add	r0, sp, #4
 80102f8:	f7ff fce8 	bl	800fccc <__lo0bits>
 80102fc:	9b01      	ldr	r3, [sp, #4]
 80102fe:	6163      	str	r3, [r4, #20]
 8010300:	2201      	movs	r2, #1
 8010302:	6122      	str	r2, [r4, #16]
 8010304:	3020      	adds	r0, #32
 8010306:	e7e3      	b.n	80102d0 <__d2b+0x60>
 8010308:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801030c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010310:	f8c9 0000 	str.w	r0, [r9]
 8010314:	6918      	ldr	r0, [r3, #16]
 8010316:	f7ff fcb9 	bl	800fc8c <__hi0bits>
 801031a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801031e:	e7df      	b.n	80102e0 <__d2b+0x70>
 8010320:	08010ca0 	.word	0x08010ca0
 8010324:	08010d30 	.word	0x08010d30

08010328 <__ratio>:
 8010328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032c:	4688      	mov	r8, r1
 801032e:	4669      	mov	r1, sp
 8010330:	4681      	mov	r9, r0
 8010332:	f7ff ff4d 	bl	80101d0 <__b2d>
 8010336:	a901      	add	r1, sp, #4
 8010338:	4640      	mov	r0, r8
 801033a:	ec55 4b10 	vmov	r4, r5, d0
 801033e:	f7ff ff47 	bl	80101d0 <__b2d>
 8010342:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010346:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801034a:	eba3 0c02 	sub.w	ip, r3, r2
 801034e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010352:	1a9b      	subs	r3, r3, r2
 8010354:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010358:	ec51 0b10 	vmov	r0, r1, d0
 801035c:	2b00      	cmp	r3, #0
 801035e:	bfd6      	itet	le
 8010360:	460a      	movle	r2, r1
 8010362:	462a      	movgt	r2, r5
 8010364:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010368:	468b      	mov	fp, r1
 801036a:	462f      	mov	r7, r5
 801036c:	bfd4      	ite	le
 801036e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010372:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010376:	4620      	mov	r0, r4
 8010378:	ee10 2a10 	vmov	r2, s0
 801037c:	465b      	mov	r3, fp
 801037e:	4639      	mov	r1, r7
 8010380:	f7f0 fa74 	bl	800086c <__aeabi_ddiv>
 8010384:	ec41 0b10 	vmov	d0, r0, r1
 8010388:	b003      	add	sp, #12
 801038a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801038e <__copybits>:
 801038e:	3901      	subs	r1, #1
 8010390:	b570      	push	{r4, r5, r6, lr}
 8010392:	1149      	asrs	r1, r1, #5
 8010394:	6914      	ldr	r4, [r2, #16]
 8010396:	3101      	adds	r1, #1
 8010398:	f102 0314 	add.w	r3, r2, #20
 801039c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103a4:	1f05      	subs	r5, r0, #4
 80103a6:	42a3      	cmp	r3, r4
 80103a8:	d30c      	bcc.n	80103c4 <__copybits+0x36>
 80103aa:	1aa3      	subs	r3, r4, r2
 80103ac:	3b11      	subs	r3, #17
 80103ae:	f023 0303 	bic.w	r3, r3, #3
 80103b2:	3211      	adds	r2, #17
 80103b4:	42a2      	cmp	r2, r4
 80103b6:	bf88      	it	hi
 80103b8:	2300      	movhi	r3, #0
 80103ba:	4418      	add	r0, r3
 80103bc:	2300      	movs	r3, #0
 80103be:	4288      	cmp	r0, r1
 80103c0:	d305      	bcc.n	80103ce <__copybits+0x40>
 80103c2:	bd70      	pop	{r4, r5, r6, pc}
 80103c4:	f853 6b04 	ldr.w	r6, [r3], #4
 80103c8:	f845 6f04 	str.w	r6, [r5, #4]!
 80103cc:	e7eb      	b.n	80103a6 <__copybits+0x18>
 80103ce:	f840 3b04 	str.w	r3, [r0], #4
 80103d2:	e7f4      	b.n	80103be <__copybits+0x30>

080103d4 <__any_on>:
 80103d4:	f100 0214 	add.w	r2, r0, #20
 80103d8:	6900      	ldr	r0, [r0, #16]
 80103da:	114b      	asrs	r3, r1, #5
 80103dc:	4298      	cmp	r0, r3
 80103de:	b510      	push	{r4, lr}
 80103e0:	db11      	blt.n	8010406 <__any_on+0x32>
 80103e2:	dd0a      	ble.n	80103fa <__any_on+0x26>
 80103e4:	f011 011f 	ands.w	r1, r1, #31
 80103e8:	d007      	beq.n	80103fa <__any_on+0x26>
 80103ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80103ee:	fa24 f001 	lsr.w	r0, r4, r1
 80103f2:	fa00 f101 	lsl.w	r1, r0, r1
 80103f6:	428c      	cmp	r4, r1
 80103f8:	d10b      	bne.n	8010412 <__any_on+0x3e>
 80103fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103fe:	4293      	cmp	r3, r2
 8010400:	d803      	bhi.n	801040a <__any_on+0x36>
 8010402:	2000      	movs	r0, #0
 8010404:	bd10      	pop	{r4, pc}
 8010406:	4603      	mov	r3, r0
 8010408:	e7f7      	b.n	80103fa <__any_on+0x26>
 801040a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801040e:	2900      	cmp	r1, #0
 8010410:	d0f5      	beq.n	80103fe <__any_on+0x2a>
 8010412:	2001      	movs	r0, #1
 8010414:	e7f6      	b.n	8010404 <__any_on+0x30>

08010416 <_realloc_r>:
 8010416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010418:	4607      	mov	r7, r0
 801041a:	4614      	mov	r4, r2
 801041c:	460e      	mov	r6, r1
 801041e:	b921      	cbnz	r1, 801042a <_realloc_r+0x14>
 8010420:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010424:	4611      	mov	r1, r2
 8010426:	f7fc b84d 	b.w	800c4c4 <_malloc_r>
 801042a:	b922      	cbnz	r2, 8010436 <_realloc_r+0x20>
 801042c:	f7fb fffa 	bl	800c424 <_free_r>
 8010430:	4625      	mov	r5, r4
 8010432:	4628      	mov	r0, r5
 8010434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010436:	f000 f9b1 	bl	801079c <_malloc_usable_size_r>
 801043a:	42a0      	cmp	r0, r4
 801043c:	d20f      	bcs.n	801045e <_realloc_r+0x48>
 801043e:	4621      	mov	r1, r4
 8010440:	4638      	mov	r0, r7
 8010442:	f7fc f83f 	bl	800c4c4 <_malloc_r>
 8010446:	4605      	mov	r5, r0
 8010448:	2800      	cmp	r0, #0
 801044a:	d0f2      	beq.n	8010432 <_realloc_r+0x1c>
 801044c:	4631      	mov	r1, r6
 801044e:	4622      	mov	r2, r4
 8010450:	f7fb ffc2 	bl	800c3d8 <memcpy>
 8010454:	4631      	mov	r1, r6
 8010456:	4638      	mov	r0, r7
 8010458:	f7fb ffe4 	bl	800c424 <_free_r>
 801045c:	e7e9      	b.n	8010432 <_realloc_r+0x1c>
 801045e:	4635      	mov	r5, r6
 8010460:	e7e7      	b.n	8010432 <_realloc_r+0x1c>

08010462 <__ssputs_r>:
 8010462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010466:	688e      	ldr	r6, [r1, #8]
 8010468:	429e      	cmp	r6, r3
 801046a:	4682      	mov	sl, r0
 801046c:	460c      	mov	r4, r1
 801046e:	4690      	mov	r8, r2
 8010470:	461f      	mov	r7, r3
 8010472:	d838      	bhi.n	80104e6 <__ssputs_r+0x84>
 8010474:	898a      	ldrh	r2, [r1, #12]
 8010476:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801047a:	d032      	beq.n	80104e2 <__ssputs_r+0x80>
 801047c:	6825      	ldr	r5, [r4, #0]
 801047e:	6909      	ldr	r1, [r1, #16]
 8010480:	eba5 0901 	sub.w	r9, r5, r1
 8010484:	6965      	ldr	r5, [r4, #20]
 8010486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801048a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801048e:	3301      	adds	r3, #1
 8010490:	444b      	add	r3, r9
 8010492:	106d      	asrs	r5, r5, #1
 8010494:	429d      	cmp	r5, r3
 8010496:	bf38      	it	cc
 8010498:	461d      	movcc	r5, r3
 801049a:	0553      	lsls	r3, r2, #21
 801049c:	d531      	bpl.n	8010502 <__ssputs_r+0xa0>
 801049e:	4629      	mov	r1, r5
 80104a0:	f7fc f810 	bl	800c4c4 <_malloc_r>
 80104a4:	4606      	mov	r6, r0
 80104a6:	b950      	cbnz	r0, 80104be <__ssputs_r+0x5c>
 80104a8:	230c      	movs	r3, #12
 80104aa:	f8ca 3000 	str.w	r3, [sl]
 80104ae:	89a3      	ldrh	r3, [r4, #12]
 80104b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104b4:	81a3      	strh	r3, [r4, #12]
 80104b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104be:	6921      	ldr	r1, [r4, #16]
 80104c0:	464a      	mov	r2, r9
 80104c2:	f7fb ff89 	bl	800c3d8 <memcpy>
 80104c6:	89a3      	ldrh	r3, [r4, #12]
 80104c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80104cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104d0:	81a3      	strh	r3, [r4, #12]
 80104d2:	6126      	str	r6, [r4, #16]
 80104d4:	6165      	str	r5, [r4, #20]
 80104d6:	444e      	add	r6, r9
 80104d8:	eba5 0509 	sub.w	r5, r5, r9
 80104dc:	6026      	str	r6, [r4, #0]
 80104de:	60a5      	str	r5, [r4, #8]
 80104e0:	463e      	mov	r6, r7
 80104e2:	42be      	cmp	r6, r7
 80104e4:	d900      	bls.n	80104e8 <__ssputs_r+0x86>
 80104e6:	463e      	mov	r6, r7
 80104e8:	4632      	mov	r2, r6
 80104ea:	6820      	ldr	r0, [r4, #0]
 80104ec:	4641      	mov	r1, r8
 80104ee:	f7ff fab1 	bl	800fa54 <memmove>
 80104f2:	68a3      	ldr	r3, [r4, #8]
 80104f4:	6822      	ldr	r2, [r4, #0]
 80104f6:	1b9b      	subs	r3, r3, r6
 80104f8:	4432      	add	r2, r6
 80104fa:	60a3      	str	r3, [r4, #8]
 80104fc:	6022      	str	r2, [r4, #0]
 80104fe:	2000      	movs	r0, #0
 8010500:	e7db      	b.n	80104ba <__ssputs_r+0x58>
 8010502:	462a      	mov	r2, r5
 8010504:	f7ff ff87 	bl	8010416 <_realloc_r>
 8010508:	4606      	mov	r6, r0
 801050a:	2800      	cmp	r0, #0
 801050c:	d1e1      	bne.n	80104d2 <__ssputs_r+0x70>
 801050e:	6921      	ldr	r1, [r4, #16]
 8010510:	4650      	mov	r0, sl
 8010512:	f7fb ff87 	bl	800c424 <_free_r>
 8010516:	e7c7      	b.n	80104a8 <__ssputs_r+0x46>

08010518 <_svfiprintf_r>:
 8010518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051c:	4698      	mov	r8, r3
 801051e:	898b      	ldrh	r3, [r1, #12]
 8010520:	061b      	lsls	r3, r3, #24
 8010522:	b09d      	sub	sp, #116	; 0x74
 8010524:	4607      	mov	r7, r0
 8010526:	460d      	mov	r5, r1
 8010528:	4614      	mov	r4, r2
 801052a:	d50e      	bpl.n	801054a <_svfiprintf_r+0x32>
 801052c:	690b      	ldr	r3, [r1, #16]
 801052e:	b963      	cbnz	r3, 801054a <_svfiprintf_r+0x32>
 8010530:	2140      	movs	r1, #64	; 0x40
 8010532:	f7fb ffc7 	bl	800c4c4 <_malloc_r>
 8010536:	6028      	str	r0, [r5, #0]
 8010538:	6128      	str	r0, [r5, #16]
 801053a:	b920      	cbnz	r0, 8010546 <_svfiprintf_r+0x2e>
 801053c:	230c      	movs	r3, #12
 801053e:	603b      	str	r3, [r7, #0]
 8010540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010544:	e0d1      	b.n	80106ea <_svfiprintf_r+0x1d2>
 8010546:	2340      	movs	r3, #64	; 0x40
 8010548:	616b      	str	r3, [r5, #20]
 801054a:	2300      	movs	r3, #0
 801054c:	9309      	str	r3, [sp, #36]	; 0x24
 801054e:	2320      	movs	r3, #32
 8010550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010554:	f8cd 800c 	str.w	r8, [sp, #12]
 8010558:	2330      	movs	r3, #48	; 0x30
 801055a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010704 <_svfiprintf_r+0x1ec>
 801055e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010562:	f04f 0901 	mov.w	r9, #1
 8010566:	4623      	mov	r3, r4
 8010568:	469a      	mov	sl, r3
 801056a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801056e:	b10a      	cbz	r2, 8010574 <_svfiprintf_r+0x5c>
 8010570:	2a25      	cmp	r2, #37	; 0x25
 8010572:	d1f9      	bne.n	8010568 <_svfiprintf_r+0x50>
 8010574:	ebba 0b04 	subs.w	fp, sl, r4
 8010578:	d00b      	beq.n	8010592 <_svfiprintf_r+0x7a>
 801057a:	465b      	mov	r3, fp
 801057c:	4622      	mov	r2, r4
 801057e:	4629      	mov	r1, r5
 8010580:	4638      	mov	r0, r7
 8010582:	f7ff ff6e 	bl	8010462 <__ssputs_r>
 8010586:	3001      	adds	r0, #1
 8010588:	f000 80aa 	beq.w	80106e0 <_svfiprintf_r+0x1c8>
 801058c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801058e:	445a      	add	r2, fp
 8010590:	9209      	str	r2, [sp, #36]	; 0x24
 8010592:	f89a 3000 	ldrb.w	r3, [sl]
 8010596:	2b00      	cmp	r3, #0
 8010598:	f000 80a2 	beq.w	80106e0 <_svfiprintf_r+0x1c8>
 801059c:	2300      	movs	r3, #0
 801059e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105a6:	f10a 0a01 	add.w	sl, sl, #1
 80105aa:	9304      	str	r3, [sp, #16]
 80105ac:	9307      	str	r3, [sp, #28]
 80105ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105b2:	931a      	str	r3, [sp, #104]	; 0x68
 80105b4:	4654      	mov	r4, sl
 80105b6:	2205      	movs	r2, #5
 80105b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105bc:	4851      	ldr	r0, [pc, #324]	; (8010704 <_svfiprintf_r+0x1ec>)
 80105be:	f7ef fe17 	bl	80001f0 <memchr>
 80105c2:	9a04      	ldr	r2, [sp, #16]
 80105c4:	b9d8      	cbnz	r0, 80105fe <_svfiprintf_r+0xe6>
 80105c6:	06d0      	lsls	r0, r2, #27
 80105c8:	bf44      	itt	mi
 80105ca:	2320      	movmi	r3, #32
 80105cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105d0:	0711      	lsls	r1, r2, #28
 80105d2:	bf44      	itt	mi
 80105d4:	232b      	movmi	r3, #43	; 0x2b
 80105d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105da:	f89a 3000 	ldrb.w	r3, [sl]
 80105de:	2b2a      	cmp	r3, #42	; 0x2a
 80105e0:	d015      	beq.n	801060e <_svfiprintf_r+0xf6>
 80105e2:	9a07      	ldr	r2, [sp, #28]
 80105e4:	4654      	mov	r4, sl
 80105e6:	2000      	movs	r0, #0
 80105e8:	f04f 0c0a 	mov.w	ip, #10
 80105ec:	4621      	mov	r1, r4
 80105ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105f2:	3b30      	subs	r3, #48	; 0x30
 80105f4:	2b09      	cmp	r3, #9
 80105f6:	d94e      	bls.n	8010696 <_svfiprintf_r+0x17e>
 80105f8:	b1b0      	cbz	r0, 8010628 <_svfiprintf_r+0x110>
 80105fa:	9207      	str	r2, [sp, #28]
 80105fc:	e014      	b.n	8010628 <_svfiprintf_r+0x110>
 80105fe:	eba0 0308 	sub.w	r3, r0, r8
 8010602:	fa09 f303 	lsl.w	r3, r9, r3
 8010606:	4313      	orrs	r3, r2
 8010608:	9304      	str	r3, [sp, #16]
 801060a:	46a2      	mov	sl, r4
 801060c:	e7d2      	b.n	80105b4 <_svfiprintf_r+0x9c>
 801060e:	9b03      	ldr	r3, [sp, #12]
 8010610:	1d19      	adds	r1, r3, #4
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	9103      	str	r1, [sp, #12]
 8010616:	2b00      	cmp	r3, #0
 8010618:	bfbb      	ittet	lt
 801061a:	425b      	neglt	r3, r3
 801061c:	f042 0202 	orrlt.w	r2, r2, #2
 8010620:	9307      	strge	r3, [sp, #28]
 8010622:	9307      	strlt	r3, [sp, #28]
 8010624:	bfb8      	it	lt
 8010626:	9204      	strlt	r2, [sp, #16]
 8010628:	7823      	ldrb	r3, [r4, #0]
 801062a:	2b2e      	cmp	r3, #46	; 0x2e
 801062c:	d10c      	bne.n	8010648 <_svfiprintf_r+0x130>
 801062e:	7863      	ldrb	r3, [r4, #1]
 8010630:	2b2a      	cmp	r3, #42	; 0x2a
 8010632:	d135      	bne.n	80106a0 <_svfiprintf_r+0x188>
 8010634:	9b03      	ldr	r3, [sp, #12]
 8010636:	1d1a      	adds	r2, r3, #4
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	9203      	str	r2, [sp, #12]
 801063c:	2b00      	cmp	r3, #0
 801063e:	bfb8      	it	lt
 8010640:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010644:	3402      	adds	r4, #2
 8010646:	9305      	str	r3, [sp, #20]
 8010648:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010714 <_svfiprintf_r+0x1fc>
 801064c:	7821      	ldrb	r1, [r4, #0]
 801064e:	2203      	movs	r2, #3
 8010650:	4650      	mov	r0, sl
 8010652:	f7ef fdcd 	bl	80001f0 <memchr>
 8010656:	b140      	cbz	r0, 801066a <_svfiprintf_r+0x152>
 8010658:	2340      	movs	r3, #64	; 0x40
 801065a:	eba0 000a 	sub.w	r0, r0, sl
 801065e:	fa03 f000 	lsl.w	r0, r3, r0
 8010662:	9b04      	ldr	r3, [sp, #16]
 8010664:	4303      	orrs	r3, r0
 8010666:	3401      	adds	r4, #1
 8010668:	9304      	str	r3, [sp, #16]
 801066a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801066e:	4826      	ldr	r0, [pc, #152]	; (8010708 <_svfiprintf_r+0x1f0>)
 8010670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010674:	2206      	movs	r2, #6
 8010676:	f7ef fdbb 	bl	80001f0 <memchr>
 801067a:	2800      	cmp	r0, #0
 801067c:	d038      	beq.n	80106f0 <_svfiprintf_r+0x1d8>
 801067e:	4b23      	ldr	r3, [pc, #140]	; (801070c <_svfiprintf_r+0x1f4>)
 8010680:	bb1b      	cbnz	r3, 80106ca <_svfiprintf_r+0x1b2>
 8010682:	9b03      	ldr	r3, [sp, #12]
 8010684:	3307      	adds	r3, #7
 8010686:	f023 0307 	bic.w	r3, r3, #7
 801068a:	3308      	adds	r3, #8
 801068c:	9303      	str	r3, [sp, #12]
 801068e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010690:	4433      	add	r3, r6
 8010692:	9309      	str	r3, [sp, #36]	; 0x24
 8010694:	e767      	b.n	8010566 <_svfiprintf_r+0x4e>
 8010696:	fb0c 3202 	mla	r2, ip, r2, r3
 801069a:	460c      	mov	r4, r1
 801069c:	2001      	movs	r0, #1
 801069e:	e7a5      	b.n	80105ec <_svfiprintf_r+0xd4>
 80106a0:	2300      	movs	r3, #0
 80106a2:	3401      	adds	r4, #1
 80106a4:	9305      	str	r3, [sp, #20]
 80106a6:	4619      	mov	r1, r3
 80106a8:	f04f 0c0a 	mov.w	ip, #10
 80106ac:	4620      	mov	r0, r4
 80106ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106b2:	3a30      	subs	r2, #48	; 0x30
 80106b4:	2a09      	cmp	r2, #9
 80106b6:	d903      	bls.n	80106c0 <_svfiprintf_r+0x1a8>
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d0c5      	beq.n	8010648 <_svfiprintf_r+0x130>
 80106bc:	9105      	str	r1, [sp, #20]
 80106be:	e7c3      	b.n	8010648 <_svfiprintf_r+0x130>
 80106c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80106c4:	4604      	mov	r4, r0
 80106c6:	2301      	movs	r3, #1
 80106c8:	e7f0      	b.n	80106ac <_svfiprintf_r+0x194>
 80106ca:	ab03      	add	r3, sp, #12
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	462a      	mov	r2, r5
 80106d0:	4b0f      	ldr	r3, [pc, #60]	; (8010710 <_svfiprintf_r+0x1f8>)
 80106d2:	a904      	add	r1, sp, #16
 80106d4:	4638      	mov	r0, r7
 80106d6:	f7fc f949 	bl	800c96c <_printf_float>
 80106da:	1c42      	adds	r2, r0, #1
 80106dc:	4606      	mov	r6, r0
 80106de:	d1d6      	bne.n	801068e <_svfiprintf_r+0x176>
 80106e0:	89ab      	ldrh	r3, [r5, #12]
 80106e2:	065b      	lsls	r3, r3, #25
 80106e4:	f53f af2c 	bmi.w	8010540 <_svfiprintf_r+0x28>
 80106e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106ea:	b01d      	add	sp, #116	; 0x74
 80106ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f0:	ab03      	add	r3, sp, #12
 80106f2:	9300      	str	r3, [sp, #0]
 80106f4:	462a      	mov	r2, r5
 80106f6:	4b06      	ldr	r3, [pc, #24]	; (8010710 <_svfiprintf_r+0x1f8>)
 80106f8:	a904      	add	r1, sp, #16
 80106fa:	4638      	mov	r0, r7
 80106fc:	f7fc fbda 	bl	800ceb4 <_printf_i>
 8010700:	e7eb      	b.n	80106da <_svfiprintf_r+0x1c2>
 8010702:	bf00      	nop
 8010704:	08010a44 	.word	0x08010a44
 8010708:	08010a4e 	.word	0x08010a4e
 801070c:	0800c96d 	.word	0x0800c96d
 8010710:	08010463 	.word	0x08010463
 8010714:	08010a4a 	.word	0x08010a4a

08010718 <_read_r>:
 8010718:	b538      	push	{r3, r4, r5, lr}
 801071a:	4d07      	ldr	r5, [pc, #28]	; (8010738 <_read_r+0x20>)
 801071c:	4604      	mov	r4, r0
 801071e:	4608      	mov	r0, r1
 8010720:	4611      	mov	r1, r2
 8010722:	2200      	movs	r2, #0
 8010724:	602a      	str	r2, [r5, #0]
 8010726:	461a      	mov	r2, r3
 8010728:	f000 f8b4 	bl	8010894 <_read>
 801072c:	1c43      	adds	r3, r0, #1
 801072e:	d102      	bne.n	8010736 <_read_r+0x1e>
 8010730:	682b      	ldr	r3, [r5, #0]
 8010732:	b103      	cbz	r3, 8010736 <_read_r+0x1e>
 8010734:	6023      	str	r3, [r4, #0]
 8010736:	bd38      	pop	{r3, r4, r5, pc}
 8010738:	200081d8 	.word	0x200081d8
 801073c:	00000000 	.word	0x00000000

08010740 <nan>:
 8010740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010748 <nan+0x8>
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	00000000 	.word	0x00000000
 801074c:	7ff80000 	.word	0x7ff80000

08010750 <strncmp>:
 8010750:	b510      	push	{r4, lr}
 8010752:	b16a      	cbz	r2, 8010770 <strncmp+0x20>
 8010754:	3901      	subs	r1, #1
 8010756:	1884      	adds	r4, r0, r2
 8010758:	f810 3b01 	ldrb.w	r3, [r0], #1
 801075c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010760:	4293      	cmp	r3, r2
 8010762:	d103      	bne.n	801076c <strncmp+0x1c>
 8010764:	42a0      	cmp	r0, r4
 8010766:	d001      	beq.n	801076c <strncmp+0x1c>
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1f5      	bne.n	8010758 <strncmp+0x8>
 801076c:	1a98      	subs	r0, r3, r2
 801076e:	bd10      	pop	{r4, pc}
 8010770:	4610      	mov	r0, r2
 8010772:	e7fc      	b.n	801076e <strncmp+0x1e>

08010774 <__ascii_wctomb>:
 8010774:	b149      	cbz	r1, 801078a <__ascii_wctomb+0x16>
 8010776:	2aff      	cmp	r2, #255	; 0xff
 8010778:	bf85      	ittet	hi
 801077a:	238a      	movhi	r3, #138	; 0x8a
 801077c:	6003      	strhi	r3, [r0, #0]
 801077e:	700a      	strbls	r2, [r1, #0]
 8010780:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010784:	bf98      	it	ls
 8010786:	2001      	movls	r0, #1
 8010788:	4770      	bx	lr
 801078a:	4608      	mov	r0, r1
 801078c:	4770      	bx	lr

0801078e <abort>:
 801078e:	b508      	push	{r3, lr}
 8010790:	2006      	movs	r0, #6
 8010792:	f000 f833 	bl	80107fc <raise>
 8010796:	2001      	movs	r0, #1
 8010798:	f000 f892 	bl	80108c0 <_exit>

0801079c <_malloc_usable_size_r>:
 801079c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107a0:	1f18      	subs	r0, r3, #4
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	bfbc      	itt	lt
 80107a6:	580b      	ldrlt	r3, [r1, r0]
 80107a8:	18c0      	addlt	r0, r0, r3
 80107aa:	4770      	bx	lr

080107ac <_raise_r>:
 80107ac:	291f      	cmp	r1, #31
 80107ae:	b538      	push	{r3, r4, r5, lr}
 80107b0:	4604      	mov	r4, r0
 80107b2:	460d      	mov	r5, r1
 80107b4:	d904      	bls.n	80107c0 <_raise_r+0x14>
 80107b6:	2316      	movs	r3, #22
 80107b8:	6003      	str	r3, [r0, #0]
 80107ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80107c2:	b112      	cbz	r2, 80107ca <_raise_r+0x1e>
 80107c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80107c8:	b94b      	cbnz	r3, 80107de <_raise_r+0x32>
 80107ca:	4620      	mov	r0, r4
 80107cc:	f000 f830 	bl	8010830 <_getpid_r>
 80107d0:	462a      	mov	r2, r5
 80107d2:	4601      	mov	r1, r0
 80107d4:	4620      	mov	r0, r4
 80107d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107da:	f000 b817 	b.w	801080c <_kill_r>
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d00a      	beq.n	80107f8 <_raise_r+0x4c>
 80107e2:	1c59      	adds	r1, r3, #1
 80107e4:	d103      	bne.n	80107ee <_raise_r+0x42>
 80107e6:	2316      	movs	r3, #22
 80107e8:	6003      	str	r3, [r0, #0]
 80107ea:	2001      	movs	r0, #1
 80107ec:	e7e7      	b.n	80107be <_raise_r+0x12>
 80107ee:	2400      	movs	r4, #0
 80107f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80107f4:	4628      	mov	r0, r5
 80107f6:	4798      	blx	r3
 80107f8:	2000      	movs	r0, #0
 80107fa:	e7e0      	b.n	80107be <_raise_r+0x12>

080107fc <raise>:
 80107fc:	4b02      	ldr	r3, [pc, #8]	; (8010808 <raise+0xc>)
 80107fe:	4601      	mov	r1, r0
 8010800:	6818      	ldr	r0, [r3, #0]
 8010802:	f7ff bfd3 	b.w	80107ac <_raise_r>
 8010806:	bf00      	nop
 8010808:	20000018 	.word	0x20000018

0801080c <_kill_r>:
 801080c:	b538      	push	{r3, r4, r5, lr}
 801080e:	4d07      	ldr	r5, [pc, #28]	; (801082c <_kill_r+0x20>)
 8010810:	2300      	movs	r3, #0
 8010812:	4604      	mov	r4, r0
 8010814:	4608      	mov	r0, r1
 8010816:	4611      	mov	r1, r2
 8010818:	602b      	str	r3, [r5, #0]
 801081a:	f000 f82b 	bl	8010874 <_kill>
 801081e:	1c43      	adds	r3, r0, #1
 8010820:	d102      	bne.n	8010828 <_kill_r+0x1c>
 8010822:	682b      	ldr	r3, [r5, #0]
 8010824:	b103      	cbz	r3, 8010828 <_kill_r+0x1c>
 8010826:	6023      	str	r3, [r4, #0]
 8010828:	bd38      	pop	{r3, r4, r5, pc}
 801082a:	bf00      	nop
 801082c:	200081d8 	.word	0x200081d8

08010830 <_getpid_r>:
 8010830:	f000 b810 	b.w	8010854 <_getpid>

08010834 <_close>:
 8010834:	4b02      	ldr	r3, [pc, #8]	; (8010840 <_close+0xc>)
 8010836:	2258      	movs	r2, #88	; 0x58
 8010838:	601a      	str	r2, [r3, #0]
 801083a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801083e:	4770      	bx	lr
 8010840:	200081d8 	.word	0x200081d8

08010844 <_fstat>:
 8010844:	4b02      	ldr	r3, [pc, #8]	; (8010850 <_fstat+0xc>)
 8010846:	2258      	movs	r2, #88	; 0x58
 8010848:	601a      	str	r2, [r3, #0]
 801084a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801084e:	4770      	bx	lr
 8010850:	200081d8 	.word	0x200081d8

08010854 <_getpid>:
 8010854:	4b02      	ldr	r3, [pc, #8]	; (8010860 <_getpid+0xc>)
 8010856:	2258      	movs	r2, #88	; 0x58
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801085e:	4770      	bx	lr
 8010860:	200081d8 	.word	0x200081d8

08010864 <_isatty>:
 8010864:	4b02      	ldr	r3, [pc, #8]	; (8010870 <_isatty+0xc>)
 8010866:	2258      	movs	r2, #88	; 0x58
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	2000      	movs	r0, #0
 801086c:	4770      	bx	lr
 801086e:	bf00      	nop
 8010870:	200081d8 	.word	0x200081d8

08010874 <_kill>:
 8010874:	4b02      	ldr	r3, [pc, #8]	; (8010880 <_kill+0xc>)
 8010876:	2258      	movs	r2, #88	; 0x58
 8010878:	601a      	str	r2, [r3, #0]
 801087a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801087e:	4770      	bx	lr
 8010880:	200081d8 	.word	0x200081d8

08010884 <_lseek>:
 8010884:	4b02      	ldr	r3, [pc, #8]	; (8010890 <_lseek+0xc>)
 8010886:	2258      	movs	r2, #88	; 0x58
 8010888:	601a      	str	r2, [r3, #0]
 801088a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801088e:	4770      	bx	lr
 8010890:	200081d8 	.word	0x200081d8

08010894 <_read>:
 8010894:	4b02      	ldr	r3, [pc, #8]	; (80108a0 <_read+0xc>)
 8010896:	2258      	movs	r2, #88	; 0x58
 8010898:	601a      	str	r2, [r3, #0]
 801089a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801089e:	4770      	bx	lr
 80108a0:	200081d8 	.word	0x200081d8

080108a4 <_sbrk>:
 80108a4:	4b04      	ldr	r3, [pc, #16]	; (80108b8 <_sbrk+0x14>)
 80108a6:	6819      	ldr	r1, [r3, #0]
 80108a8:	4602      	mov	r2, r0
 80108aa:	b909      	cbnz	r1, 80108b0 <_sbrk+0xc>
 80108ac:	4903      	ldr	r1, [pc, #12]	; (80108bc <_sbrk+0x18>)
 80108ae:	6019      	str	r1, [r3, #0]
 80108b0:	6818      	ldr	r0, [r3, #0]
 80108b2:	4402      	add	r2, r0
 80108b4:	601a      	str	r2, [r3, #0]
 80108b6:	4770      	bx	lr
 80108b8:	20007ba8 	.word	0x20007ba8
 80108bc:	200081e0 	.word	0x200081e0

080108c0 <_exit>:
 80108c0:	e7fe      	b.n	80108c0 <_exit>
	...

080108c4 <_init>:
 80108c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108c6:	bf00      	nop
 80108c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108ca:	bc08      	pop	{r3}
 80108cc:	469e      	mov	lr, r3
 80108ce:	4770      	bx	lr

080108d0 <_fini>:
 80108d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d2:	bf00      	nop
 80108d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108d6:	bc08      	pop	{r3}
 80108d8:	469e      	mov	lr, r3
 80108da:	4770      	bx	lr

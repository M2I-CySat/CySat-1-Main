
discoboard_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007850  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad4  08007ad4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007adc  08007adc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000074  08007b58  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08007b58  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9a8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002362  00000000  00000000  0002fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  00031db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  00032a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000234c2  00000000  00000000  00033540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc30  00000000  00000000  00056a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3985  00000000  00000000  00062632  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135fb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f0  00000000  00000000  00136034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080079e8 	.word	0x080079e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080079e8 	.word	0x080079e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f92b 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f006 fbe0 	bl	8006d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f943 	bl	800087e <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000610:	f000 f90b 	bl	800082a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000000c 	.word	0x2000000c
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	2000009c 	.word	0x2000009c

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000009c 	.word	0x2000009c

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db0b      	blt.n	8000702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f003 021f 	and.w	r2, r3, #31
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <__NVIC_EnableIRQ+0x38>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	2001      	movs	r0, #1
 80006fa:	fa00 f202 	lsl.w	r2, r0, r2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007f4:	f7ff ff8e 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff29 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff3e 	bl	80006bc <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff8e 	bl	8000768 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff31 	bl	80006d8 <__NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffa2 	bl	80007d0 <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d004      	beq.n	80008b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e00c      	b.n	80008ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2205      	movs	r2, #5
 80008b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f022 0201 	bic.w	r2, r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008e8:	b2db      	uxtb	r3, r3
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	e177      	b.n	8000c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000914:	2201      	movs	r2, #1
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	429a      	cmp	r2, r3
 800092e:	f040 8166 	bne.w	8000bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d00b      	beq.n	8000952 <HAL_GPIO_Init+0x5a>
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d007      	beq.n	8000952 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000946:	2b11      	cmp	r3, #17
 8000948:	d003      	beq.n	8000952 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b12      	cmp	r3, #18
 8000950:	d130      	bne.n	80009b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	2203      	movs	r2, #3
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4013      	ands	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4313      	orrs	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000988:	2201      	movs	r2, #1
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	4013      	ands	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	091b      	lsrs	r3, r3, #4
 800099e:	f003 0201 	and.w	r2, r3, #1
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2203      	movs	r2, #3
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4013      	ands	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4313      	orrs	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0xfc>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b12      	cmp	r3, #18
 80009f2:	d123      	bne.n	8000a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	08da      	lsrs	r2, r3, #3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3208      	adds	r2, #8
 80009fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	08da      	lsrs	r2, r3, #3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3208      	adds	r2, #8
 8000a36:	69b9      	ldr	r1, [r7, #24]
 8000a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	4013      	ands	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0203 	and.w	r2, r3, #3
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	f000 80c0 	beq.w	8000bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b65      	ldr	r3, [pc, #404]	; (8000c18 <HAL_GPIO_Init+0x320>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a64      	ldr	r2, [pc, #400]	; (8000c18 <HAL_GPIO_Init+0x320>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b62      	ldr	r3, [pc, #392]	; (8000c18 <HAL_GPIO_Init+0x320>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a9a:	4a60      	ldr	r2, [pc, #384]	; (8000c1c <HAL_GPIO_Init+0x324>)
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <HAL_GPIO_Init+0x328>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d037      	beq.n	8000b36 <HAL_GPIO_Init+0x23e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a56      	ldr	r2, [pc, #344]	; (8000c24 <HAL_GPIO_Init+0x32c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d031      	beq.n	8000b32 <HAL_GPIO_Init+0x23a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a55      	ldr	r2, [pc, #340]	; (8000c28 <HAL_GPIO_Init+0x330>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d02b      	beq.n	8000b2e <HAL_GPIO_Init+0x236>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a54      	ldr	r2, [pc, #336]	; (8000c2c <HAL_GPIO_Init+0x334>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d025      	beq.n	8000b2a <HAL_GPIO_Init+0x232>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a53      	ldr	r2, [pc, #332]	; (8000c30 <HAL_GPIO_Init+0x338>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d01f      	beq.n	8000b26 <HAL_GPIO_Init+0x22e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a52      	ldr	r2, [pc, #328]	; (8000c34 <HAL_GPIO_Init+0x33c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d019      	beq.n	8000b22 <HAL_GPIO_Init+0x22a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a51      	ldr	r2, [pc, #324]	; (8000c38 <HAL_GPIO_Init+0x340>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d013      	beq.n	8000b1e <HAL_GPIO_Init+0x226>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a50      	ldr	r2, [pc, #320]	; (8000c3c <HAL_GPIO_Init+0x344>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d00d      	beq.n	8000b1a <HAL_GPIO_Init+0x222>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4f      	ldr	r2, [pc, #316]	; (8000c40 <HAL_GPIO_Init+0x348>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d007      	beq.n	8000b16 <HAL_GPIO_Init+0x21e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4e      	ldr	r2, [pc, #312]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_GPIO_Init+0x21a>
 8000b0e:	2309      	movs	r3, #9
 8000b10:	e012      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b12:	230a      	movs	r3, #10
 8000b14:	e010      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b16:	2308      	movs	r3, #8
 8000b18:	e00e      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	e00c      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b1e:	2306      	movs	r3, #6
 8000b20:	e00a      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b22:	2305      	movs	r3, #5
 8000b24:	e008      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b26:	2304      	movs	r3, #4
 8000b28:	e006      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e004      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b36:	2300      	movs	r3, #0
 8000b38:	69fa      	ldr	r2, [r7, #28]
 8000b3a:	f002 0203 	and.w	r2, r2, #3
 8000b3e:	0092      	lsls	r2, r2, #2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b48:	4934      	ldr	r1, [pc, #208]	; (8000c1c <HAL_GPIO_Init+0x324>)
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	3302      	adds	r3, #2
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b7a:	4a33      	ldr	r2, [pc, #204]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	2b0f      	cmp	r3, #15
 8000c08:	f67f ae84 	bls.w	8000914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3724      	adds	r7, #36	; 0x24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40021400 	.word	0x40021400
 8000c38:	40021800 	.word	0x40021800
 8000c3c:	40021c00 	.word	0x40021c00
 8000c40:	40022000 	.word	0x40022000
 8000c44:	40022400 	.word	0x40022400
 8000c48:	40013c00 	.word	0x40013c00

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c68:	e003      	b.n	8000c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	619a      	str	r2, [r3, #24]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e11f      	b.n	8000ed2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f005 ff0a 	bl	8006ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2224      	movs	r2, #36	; 0x24
 8000cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 0201 	bic.w	r2, r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ce4:	f003 f826 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 8000ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a7b      	ldr	r2, [pc, #492]	; (8000edc <HAL_I2C_Init+0x25c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d807      	bhi.n	8000d04 <HAL_I2C_Init+0x84>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4a7a      	ldr	r2, [pc, #488]	; (8000ee0 <HAL_I2C_Init+0x260>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	bf94      	ite	ls
 8000cfc:	2301      	movls	r3, #1
 8000cfe:	2300      	movhi	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	e006      	b.n	8000d12 <HAL_I2C_Init+0x92>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4a77      	ldr	r2, [pc, #476]	; (8000ee4 <HAL_I2C_Init+0x264>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	bf94      	ite	ls
 8000d0c:	2301      	movls	r3, #1
 8000d0e:	2300      	movhi	r3, #0
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e0db      	b.n	8000ed2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4a72      	ldr	r2, [pc, #456]	; (8000ee8 <HAL_I2C_Init+0x268>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	0c9b      	lsrs	r3, r3, #18
 8000d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	430a      	orrs	r2, r1
 8000d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	4a64      	ldr	r2, [pc, #400]	; (8000edc <HAL_I2C_Init+0x25c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d802      	bhi.n	8000d54 <HAL_I2C_Init+0xd4>
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	3301      	adds	r3, #1
 8000d52:	e009      	b.n	8000d68 <HAL_I2C_Init+0xe8>
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	4a63      	ldr	r2, [pc, #396]	; (8000eec <HAL_I2C_Init+0x26c>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	099b      	lsrs	r3, r3, #6
 8000d66:	3301      	adds	r3, #1
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	4956      	ldr	r1, [pc, #344]	; (8000edc <HAL_I2C_Init+0x25c>)
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d80d      	bhi.n	8000da4 <HAL_I2C_Init+0x124>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	1e59      	subs	r1, r3, #1
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d96:	3301      	adds	r3, #1
 8000d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	bf38      	it	cc
 8000da0:	2304      	movcc	r3, #4
 8000da2:	e04f      	b.n	8000e44 <HAL_I2C_Init+0x1c4>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d111      	bne.n	8000dd0 <HAL_I2C_Init+0x150>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1e58      	subs	r0, r3, #1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6859      	ldr	r1, [r3, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	440b      	add	r3, r1
 8000dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf0c      	ite	eq
 8000dc8:	2301      	moveq	r3, #1
 8000dca:	2300      	movne	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	e012      	b.n	8000df6 <HAL_I2C_Init+0x176>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	1e58      	subs	r0, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6859      	ldr	r1, [r3, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	0099      	lsls	r1, r3, #2
 8000de0:	440b      	add	r3, r1
 8000de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	bf0c      	ite	eq
 8000df0:	2301      	moveq	r3, #1
 8000df2:	2300      	movne	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_I2C_Init+0x17e>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e022      	b.n	8000e44 <HAL_I2C_Init+0x1c4>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10e      	bne.n	8000e24 <HAL_I2C_Init+0x1a4>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1e58      	subs	r0, r3, #1
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6859      	ldr	r1, [r3, #4]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	440b      	add	r3, r1
 8000e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e22:	e00f      	b.n	8000e44 <HAL_I2C_Init+0x1c4>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	1e58      	subs	r0, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6859      	ldr	r1, [r3, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	0099      	lsls	r1, r3, #2
 8000e34:	440b      	add	r3, r1
 8000e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	6809      	ldr	r1, [r1, #0]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69da      	ldr	r2, [r3, #28]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6911      	ldr	r1, [r2, #16]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68d2      	ldr	r2, [r2, #12]
 8000e7e:	4311      	orrs	r1, r2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	430b      	orrs	r3, r1
 8000e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	000186a0 	.word	0x000186a0
 8000ee0:	001e847f 	.word	0x001e847f
 8000ee4:	003d08ff 	.word	0x003d08ff
 8000ee8:	431bde83 	.word	0x431bde83
 8000eec:	10624dd3 	.word	0x10624dd3

08000ef0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	461a      	mov	r2, r3
 8000efc:	460b      	mov	r3, r1
 8000efe:	817b      	strh	r3, [r7, #10]
 8000f00:	4613      	mov	r3, r2
 8000f02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff fbaa 	bl	800065c <HAL_GetTick>
 8000f08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b20      	cmp	r3, #32
 8000f14:	f040 80e0 	bne.w	80010d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2319      	movs	r3, #25
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4970      	ldr	r1, [pc, #448]	; (80010e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f002 f84c 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e0d3      	b.n	80010da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d101      	bne.n	8000f40 <HAL_I2C_Master_Transmit+0x50>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e0cc      	b.n	80010da <HAL_I2C_Master_Transmit+0x1ea>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d007      	beq.n	8000f66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0201 	orr.w	r2, r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2221      	movs	r2, #33	; 0x21
 8000f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2210      	movs	r2, #16
 8000f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	893a      	ldrh	r2, [r7, #8]
 8000f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4a50      	ldr	r2, [pc, #320]	; (80010e8 <HAL_I2C_Master_Transmit+0x1f8>)
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fa8:	8979      	ldrh	r1, [r7, #10]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	6a3a      	ldr	r2, [r7, #32]
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f001 fe0e 	bl	8002bd0 <I2C_MasterRequestWrite>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e08d      	b.n	80010da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000fd4:	e066      	b.n	80010a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	6a39      	ldr	r1, [r7, #32]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f002 f8c6 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00d      	beq.n	8001002 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d107      	bne.n	8000ffe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e06b      	b.n	80010da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800101c:	b29b      	uxth	r3, r3
 800101e:	3b01      	subs	r3, #1
 8001020:	b29a      	uxth	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800102a:	3b01      	subs	r3, #1
 800102c:	b29a      	uxth	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b04      	cmp	r3, #4
 800103e:	d11b      	bne.n	8001078 <HAL_I2C_Master_Transmit+0x188>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001044:	2b00      	cmp	r3, #0
 8001046:	d017      	beq.n	8001078 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001062:	b29b      	uxth	r3, r3
 8001064:	3b01      	subs	r3, #1
 8001066:	b29a      	uxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001070:	3b01      	subs	r3, #1
 8001072:	b29a      	uxth	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	6a39      	ldr	r1, [r7, #32]
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f002 f8b6 	bl	80031ee <I2C_WaitOnBTFFlagUntilTimeout>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00d      	beq.n	80010a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	2b04      	cmp	r3, #4
 800108e:	d107      	bne.n	80010a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800109e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e01a      	b.n	80010da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d194      	bne.n	8000fd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2220      	movs	r2, #32
 80010c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e000      	b.n	80010da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80010d8:	2302      	movs	r3, #2
  }
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	00100002 	.word	0x00100002
 80010e8:	ffff0000 	.word	0xffff0000

080010ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	461a      	mov	r2, r3
 80010f8:	460b      	mov	r3, r1
 80010fa:	817b      	strh	r3, [r7, #10]
 80010fc:	4613      	mov	r3, r2
 80010fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff faac 	bl	800065c <HAL_GetTick>
 8001104:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b20      	cmp	r3, #32
 8001110:	f040 820b 	bne.w	800152a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2319      	movs	r3, #25
 800111a:	2201      	movs	r2, #1
 800111c:	497c      	ldr	r1, [pc, #496]	; (8001310 <HAL_I2C_Master_Receive+0x224>)
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f001 ff4e 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800112a:	2302      	movs	r3, #2
 800112c:	e1fe      	b.n	800152c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_I2C_Master_Receive+0x50>
 8001138:	2302      	movs	r3, #2
 800113a:	e1f7      	b.n	800152c <HAL_I2C_Master_Receive+0x440>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b01      	cmp	r3, #1
 8001150:	d007      	beq.n	8001162 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0201 	orr.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2222      	movs	r2, #34	; 0x22
 8001176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2210      	movs	r2, #16
 800117e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	893a      	ldrh	r2, [r7, #8]
 8001192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001198:	b29a      	uxth	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4a5c      	ldr	r2, [pc, #368]	; (8001314 <HAL_I2C_Master_Receive+0x228>)
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011a4:	8979      	ldrh	r1, [r7, #10]
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f001 fd92 	bl	8002cd4 <I2C_MasterRequestRead>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e1b8      	b.n	800152c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d113      	bne.n	80011ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	623b      	str	r3, [r7, #32]
 80011d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e18c      	b.n	8001504 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d11b      	bne.n	800122a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e16c      	b.n	8001504 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800122e:	2b02      	cmp	r3, #2
 8001230:	d11b      	bne.n	800126a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001240:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	e14c      	b.n	8001504 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001290:	e138      	b.n	8001504 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001296:	2b03      	cmp	r3, #3
 8001298:	f200 80f1 	bhi.w	800147e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d123      	bne.n	80012ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f002 f813 	bl	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e139      	b.n	800152c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	3b01      	subs	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80012ea:	e10b      	b.n	8001504 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d14e      	bne.n	8001392 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	2200      	movs	r2, #0
 80012fc:	4906      	ldr	r1, [pc, #24]	; (8001318 <HAL_I2C_Master_Receive+0x22c>)
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f001 fe5e 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d008      	beq.n	800131c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e10e      	b.n	800152c <HAL_I2C_Master_Receive+0x440>
 800130e:	bf00      	nop
 8001310:	00100002 	.word	0x00100002
 8001314:	ffff0000 	.word	0xffff0000
 8001318:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800132a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691a      	ldr	r2, [r3, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001348:	3b01      	subs	r3, #1
 800134a:	b29a      	uxth	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001354:	b29b      	uxth	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b29a      	uxth	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137a:	3b01      	subs	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001386:	b29b      	uxth	r3, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	b29a      	uxth	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001390:	e0b8      	b.n	8001504 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001398:	2200      	movs	r2, #0
 800139a:	4966      	ldr	r1, [pc, #408]	; (8001534 <HAL_I2C_Master_Receive+0x448>)
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f001 fe0f 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0bf      	b.n	800152c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d8:	3b01      	subs	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f4:	2200      	movs	r2, #0
 80013f6:	494f      	ldr	r1, [pc, #316]	; (8001534 <HAL_I2C_Master_Receive+0x448>)
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f001 fde1 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e091      	b.n	800152c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001434:	3b01      	subs	r3, #1
 8001436:	b29a      	uxth	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001466:	3b01      	subs	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001472:	b29b      	uxth	r3, r3
 8001474:	3b01      	subs	r3, #1
 8001476:	b29a      	uxth	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800147c:	e042      	b.n	8001504 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f001 ff26 	bl	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e04c      	b.n	800152c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d118      	bne.n	8001504 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	f47f aec2 	bne.w	8001292 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2220      	movs	r2, #32
 8001512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800152a:	2302      	movs	r3, #2
  }
}
 800152c:	4618      	mov	r0, r3
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	00010004 	.word	0x00010004

08001538 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	461a      	mov	r2, r3
 8001544:	460b      	mov	r3, r1
 8001546:	817b      	strh	r3, [r7, #10]
 8001548:	4613      	mov	r3, r2
 800154a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b20      	cmp	r3, #32
 800155a:	f040 808d 	bne.w	8001678 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800155e:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <HAL_I2C_Master_Receive_IT+0x150>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	08db      	lsrs	r3, r3, #3
 8001564:	4a49      	ldr	r2, [pc, #292]	; (800168c <HAL_I2C_Master_Receive_IT+0x154>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0a1a      	lsrs	r2, r3, #8
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009a      	lsls	r2, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3b01      	subs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d116      	bne.n	80015b2 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2220      	movs	r2, #32
 800158e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f043 0220 	orr.w	r2, r3, #32
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e063      	b.n	800167a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d0db      	beq.n	8001578 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_I2C_Master_Receive_IT+0x96>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e055      	b.n	800167a <HAL_I2C_Master_Receive_IT+0x142>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d007      	beq.n	80015f4 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2222      	movs	r2, #34	; 0x22
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2210      	movs	r2, #16
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	893a      	ldrh	r2, [r7, #8]
 8001624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a17      	ldr	r2, [pc, #92]	; (8001690 <HAL_I2C_Master_Receive_IT+0x158>)
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001636:	897a      	ldrh	r2, [r7, #10]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800164a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800165a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001672:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	e000      	b.n	800167a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8001678:	2302      	movs	r3, #2
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	2000000c 	.word	0x2000000c
 800168c:	14f8b589 	.word	0x14f8b589
 8001690:	ffff0000 	.word	0xffff0000

08001694 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b10      	cmp	r3, #16
 80016c2:	d003      	beq.n	80016cc <HAL_I2C_EV_IRQHandler+0x38>
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b40      	cmp	r3, #64	; 0x40
 80016c8:	f040 80bd 	bne.w	8001846 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10d      	bne.n	8001702 <HAL_I2C_EV_IRQHandler+0x6e>
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80016ec:	d003      	beq.n	80016f6 <HAL_I2C_EV_IRQHandler+0x62>
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80016f4:	d101      	bne.n	80016fa <HAL_I2C_EV_IRQHandler+0x66>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_I2C_EV_IRQHandler+0x68>
 80016fa:	2300      	movs	r3, #0
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	f000 812e 	beq.w	800195e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00c      	beq.n	8001726 <HAL_I2C_EV_IRQHandler+0x92>
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	0a5b      	lsrs	r3, r3, #9
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f001 fe60 	bl	80033de <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fcb1 	bl	8002086 <I2C_Master_SB>
 8001724:	e08e      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_I2C_EV_IRQHandler+0xb2>
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	0a5b      	lsrs	r3, r3, #9
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fd27 	bl	8002192 <I2C_Master_ADD10>
 8001744:	e07e      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_I2C_EV_IRQHandler+0xd2>
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	0a5b      	lsrs	r3, r3, #9
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fd41 	bl	80021e6 <I2C_Master_ADDR>
 8001764:	e06e      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d037      	beq.n	80017e2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001780:	f000 80ef 	beq.w	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	09db      	lsrs	r3, r3, #7
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00f      	beq.n	80017b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	0a9b      	lsrs	r3, r3, #10
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d103      	bne.n	80017b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f93e 	bl	8001a2a <I2C_MasterTransmit_TXE>
 80017ae:	e049      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80d2 	beq.w	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	0a5b      	lsrs	r3, r3, #9
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80cb 	beq.w	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d103      	bne.n	80017da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f9c5 	bl	8001b62 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d8:	e0c3      	b.n	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fa29 	bl	8001c32 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017e0:	e0bf      	b.n	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017f0:	f000 80b7 	beq.w	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00f      	beq.n	8001820 <HAL_I2C_EV_IRQHandler+0x18c>
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	0a9b      	lsrs	r3, r3, #10
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <HAL_I2C_EV_IRQHandler+0x18c>
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d103      	bne.n	8001820 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fa99 	bl	8001d50 <I2C_MasterReceive_RXNE>
 800181e:	e011      	b.n	8001844 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 809a 	beq.w	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	0a5b      	lsrs	r3, r3, #9
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8093 	beq.w	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fb38 	bl	8001eb2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001842:	e08e      	b.n	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
 8001844:	e08d      	b.n	8001962 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	e007      	b.n	8001868 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d012      	beq.n	800189a <HAL_I2C_EV_IRQHandler+0x206>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	0a5b      	lsrs	r3, r3, #9
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00c      	beq.n	800189a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001890:	69b9      	ldr	r1, [r7, #24]
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fef6 	bl	8002684 <I2C_Slave_ADDR>
 8001898:	e066      	b.n	8001968 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_I2C_EV_IRQHandler+0x226>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	0a5b      	lsrs	r3, r3, #9
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 ff2a 	bl	800270c <I2C_Slave_STOPF>
 80018b8:	e056      	b.n	8001968 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80018ba:	7bbb      	ldrb	r3, [r7, #14]
 80018bc:	2b21      	cmp	r3, #33	; 0x21
 80018be:	d002      	beq.n	80018c6 <HAL_I2C_EV_IRQHandler+0x232>
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	2b29      	cmp	r3, #41	; 0x29
 80018c4:	d125      	bne.n	8001912 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	09db      	lsrs	r3, r3, #7
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00f      	beq.n	80018f2 <HAL_I2C_EV_IRQHandler+0x25e>
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	0a9b      	lsrs	r3, r3, #10
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_I2C_EV_IRQHandler+0x25e>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d103      	bne.n	80018f2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fe0c 	bl	8002508 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018f0:	e039      	b.n	8001966 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d033      	beq.n	8001966 <HAL_I2C_EV_IRQHandler+0x2d2>
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	0a5b      	lsrs	r3, r3, #9
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d02d      	beq.n	8001966 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fe39 	bl	8002582 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001910:	e029      	b.n	8001966 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00f      	beq.n	800193e <HAL_I2C_EV_IRQHandler+0x2aa>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	0a9b      	lsrs	r3, r3, #10
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_I2C_EV_IRQHandler+0x2aa>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fe44 	bl	80025c4 <I2C_SlaveReceive_RXNE>
 800193c:	e014      	b.n	8001968 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00e      	beq.n	8001968 <HAL_I2C_EV_IRQHandler+0x2d4>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	0a5b      	lsrs	r3, r3, #9
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d008      	beq.n	8001968 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fe72 	bl	8002640 <I2C_SlaveReceive_BTF>
 800195c:	e004      	b.n	8001968 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800195e:	bf00      	nop
 8001960:	e002      	b.n	8001968 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001966:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	70fb      	strb	r3, [r7, #3]
 80019b6:	4613      	mov	r3, r2
 80019b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a40:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d150      	bne.n	8001af2 <I2C_MasterTransmit_TXE+0xc8>
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b21      	cmp	r3, #33	; 0x21
 8001a54:	d14d      	bne.n	8001af2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d01d      	beq.n	8001a98 <I2C_MasterTransmit_TXE+0x6e>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	d01a      	beq.n	8001a98 <I2C_MasterTransmit_TXE+0x6e>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a68:	d016      	beq.n	8001a98 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a78:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2211      	movs	r2, #17
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff6c 	bl	800196e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a96:	e060      	b.n	8001b5a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001aa6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b40      	cmp	r3, #64	; 0x40
 8001ad0:	d107      	bne.n	8001ae2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff7d 	bl	80019da <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ae0:	e03b      	b.n	8001b5a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff3f 	bl	800196e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001af0:	e033      	b.n	8001b5a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b21      	cmp	r3, #33	; 0x21
 8001af6:	d005      	beq.n	8001b04 <I2C_MasterTransmit_TXE+0xda>
 8001af8:	7bbb      	ldrb	r3, [r7, #14]
 8001afa:	2b40      	cmp	r3, #64	; 0x40
 8001afc:	d12d      	bne.n	8001b5a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	2b22      	cmp	r3, #34	; 0x22
 8001b02:	d12a      	bne.n	8001b5a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d108      	bne.n	8001b20 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b1c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001b1e:	e01c      	b.n	8001b5a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	d103      	bne.n	8001b34 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f880 	bl	8001c32 <I2C_MemoryTransmit_TXE_BTF>
}
 8001b32:	e012      	b.n	8001b5a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b58:	e7ff      	b.n	8001b5a <I2C_MasterTransmit_TXE+0x130>
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b21      	cmp	r3, #33	; 0x21
 8001b7a:	d156      	bne.n	8001c2a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d012      	beq.n	8001bac <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001baa:	e03e      	b.n	8001c2a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d01d      	beq.n	8001bee <I2C_MasterTransmit_BTF+0x8c>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d01a      	beq.n	8001bee <I2C_MasterTransmit_BTF+0x8c>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bbe:	d016      	beq.n	8001bee <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bce:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2211      	movs	r2, #17
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fec1 	bl	800196e <HAL_I2C_MasterTxCpltCallback>
}
 8001bec:	e01d      	b.n	8001c2a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bfc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fea2 	bl	800196e <HAL_I2C_MasterTxCpltCallback>
}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d11d      	bne.n	8001c86 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10b      	bne.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c62:	1c9a      	adds	r2, r3, #2
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001c68:	e06e      	b.n	8001d48 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	121b      	asrs	r3, r3, #8
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c84:	e060      	b.n	8001d48 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10b      	bne.n	8001ca6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ca4:	e050      	b.n	8001d48 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d14c      	bne.n	8001d48 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2b22      	cmp	r3, #34	; 0x22
 8001cb2:	d108      	bne.n	8001cc6 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc2:	601a      	str	r2, [r3, #0]
}
 8001cc4:	e040      	b.n	8001d48 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d015      	beq.n	8001cfc <I2C_MemoryTransmit_TXE_BTF+0xca>
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b21      	cmp	r3, #33	; 0x21
 8001cd4:	d112      	bne.n	8001cfc <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001cfa:	e025      	b.n	8001d48 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d120      	bne.n	8001d48 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b21      	cmp	r3, #33	; 0x21
 8001d0a:	d11d      	bne.n	8001d48 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d1a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fe49 	bl	80019da <HAL_I2C_MemTxCpltCallback>
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b22      	cmp	r3, #34	; 0x22
 8001d62:	f040 80a2 	bne.w	8001eaa <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d921      	bls.n	8001db8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	f040 8082 	bne.w	8001eaa <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001db6:	e078      	b.n	8001eaa <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d074      	beq.n	8001eaa <I2C_MasterReceive_RXNE+0x15a>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d002      	beq.n	8001dcc <I2C_MasterReceive_RXNE+0x7c>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d16e      	bne.n	8001eaa <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f001 fa4f 	bl	8003270 <I2C_WaitOnSTOPRequestThroughIT>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d142      	bne.n	8001e5e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001df6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b40      	cmp	r3, #64	; 0x40
 8001e30:	d10a      	bne.n	8001e48 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fdd4 	bl	80019ee <HAL_I2C_MemRxCpltCallback>
}
 8001e46:	e030      	b.n	8001eaa <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2212      	movs	r2, #18
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f004 ff72 	bl	8006d40 <HAL_I2C_MasterRxCpltCallback>
}
 8001e5c:	e025      	b.n	8001eaa <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fdac 	bl	8001a02 <HAL_I2C_ErrorCallback>
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d11b      	bne.n	8001f02 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001f00:	e0bd      	b.n	800207e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d129      	bne.n	8001f60 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d00a      	beq.n	8001f38 <I2C_MasterReceive_BTF+0x86>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d007      	beq.n	8001f38 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f5e:	e08e      	b.n	800207e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d176      	bne.n	8002058 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d002      	beq.n	8001f76 <I2C_MasterReceive_BTF+0xc4>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d108      	bne.n	8001f88 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e019      	b.n	8001fbc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d002      	beq.n	8001f94 <I2C_MasterReceive_BTF+0xe2>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d108      	bne.n	8001fa6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e00a      	b.n	8001fbc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d007      	beq.n	8001fbc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002016:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d10a      	bne.n	8002042 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fcd7 	bl	80019ee <HAL_I2C_MemRxCpltCallback>
}
 8002040:	e01d      	b.n	800207e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2212      	movs	r2, #18
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f004 fe75 	bl	8006d40 <HAL_I2C_MasterRxCpltCallback>
}
 8002056:	e012      	b.n	800207e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d117      	bne.n	80020ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80020b4:	e067      	b.n	8002186 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]
}
 80020c8:	e05d      	b.n	8002186 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d2:	d133      	bne.n	800213c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b21      	cmp	r3, #33	; 0x21
 80020de:	d109      	bne.n	80020f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020f0:	611a      	str	r2, [r3, #16]
 80020f2:	e008      	b.n	8002106 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <I2C_Master_SB+0x92>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d108      	bne.n	800212a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211c:	2b00      	cmp	r3, #0
 800211e:	d032      	beq.n	8002186 <I2C_Master_SB+0x100>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d02d      	beq.n	8002186 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002138:	605a      	str	r2, [r3, #4]
}
 800213a:	e024      	b.n	8002186 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10e      	bne.n	8002162 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	b29b      	uxth	r3, r3
 800214a:	11db      	asrs	r3, r3, #7
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 0306 	and.w	r3, r3, #6
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f063 030f 	orn	r3, r3, #15
 8002158:	b2da      	uxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]
}
 8002160:	e011      	b.n	8002186 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10d      	bne.n	8002186 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	b29b      	uxth	r3, r3
 8002170:	11db      	asrs	r3, r3, #7
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f003 0306 	and.w	r3, r3, #6
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f063 030e 	orn	r3, r3, #14
 800217e:	b2da      	uxtb	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	611a      	str	r2, [r3, #16]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <I2C_Master_ADD10+0x24>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d011      	beq.n	80021da <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d104      	bne.n	80021ca <I2C_Master_ADD10+0x38>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b091      	sub	sp, #68	; 0x44
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b22      	cmp	r3, #34	; 0x22
 800220e:	f040 8169 	bne.w	80024e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <I2C_Master_ADDR+0x54>
 800221a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d10b      	bne.n	800223a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002222:	2300      	movs	r3, #0
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	e160      	b.n	80024fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11d      	bne.n	800227e <I2C_Master_ADDR+0x98>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800224a:	d118      	bne.n	800227e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002270:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	651a      	str	r2, [r3, #80]	; 0x50
 800227c:	e13e      	b.n	80024fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d113      	bne.n	80022b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e115      	b.n	80024dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	f040 808a 	bne.w	80023d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80022bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022c2:	d137      	bne.n	8002334 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e2:	d113      	bne.n	800230c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	e0e7      	b.n	80024dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e0d3      	b.n	80024dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002336:	2b08      	cmp	r3, #8
 8002338:	d02e      	beq.n	8002398 <I2C_Master_ADDR+0x1b2>
 800233a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233c:	2b20      	cmp	r3, #32
 800233e:	d02b      	beq.n	8002398 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002342:	2b12      	cmp	r3, #18
 8002344:	d102      	bne.n	800234c <I2C_Master_ADDR+0x166>
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	2b01      	cmp	r3, #1
 800234a:	d125      	bne.n	8002398 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	2b04      	cmp	r3, #4
 8002350:	d00e      	beq.n	8002370 <I2C_Master_ADDR+0x18a>
 8002352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002354:	2b02      	cmp	r3, #2
 8002356:	d00b      	beq.n	8002370 <I2C_Master_ADDR+0x18a>
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	2b10      	cmp	r3, #16
 800235c:	d008      	beq.n	8002370 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e007      	b.n	8002380 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800237e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	e0a1      	b.n	80024dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e085      	b.n	80024dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d14d      	bne.n	8002476 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d016      	beq.n	800240e <I2C_Master_ADDR+0x228>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d013      	beq.n	800240e <I2C_Master_ADDR+0x228>
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d010      	beq.n	800240e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e007      	b.n	800241e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800241c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242c:	d117      	bne.n	800245e <I2C_Master_ADDR+0x278>
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002434:	d00b      	beq.n	800244e <I2C_Master_ADDR+0x268>
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002438:	2b01      	cmp	r3, #1
 800243a:	d008      	beq.n	800244e <I2C_Master_ADDR+0x268>
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	2b08      	cmp	r3, #8
 8002440:	d005      	beq.n	800244e <I2C_Master_ADDR+0x268>
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	2b10      	cmp	r3, #16
 8002446:	d002      	beq.n	800244e <I2C_Master_ADDR+0x268>
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	2b20      	cmp	r3, #32
 800244c:	d107      	bne.n	800245e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800245c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	e032      	b.n	80024dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002484:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002494:	d117      	bne.n	80024c6 <I2C_Master_ADDR+0x2e0>
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800249c:	d00b      	beq.n	80024b6 <I2C_Master_ADDR+0x2d0>
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d008      	beq.n	80024b6 <I2C_Master_ADDR+0x2d0>
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d005      	beq.n	80024b6 <I2C_Master_ADDR+0x2d0>
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d002      	beq.n	80024b6 <I2C_Master_ADDR+0x2d0>
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d107      	bne.n	80024c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80024e2:	e00b      	b.n	80024fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
}
 80024fa:	e7ff      	b.n	80024fc <I2C_Master_ADDR+0x316>
 80024fc:	bf00      	nop
 80024fe:	3744      	adds	r7, #68	; 0x44
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002516:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d02b      	beq.n	800257a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d114      	bne.n	800257a <I2C_SlaveTransmit_TXE+0x72>
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b29      	cmp	r3, #41	; 0x29
 8002554:	d111      	bne.n	800257a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002564:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2221      	movs	r2, #33	; 0x21
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2228      	movs	r2, #40	; 0x28
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fa04 	bl	8001982 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d011      	beq.n	80025b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d02c      	beq.n	8002638 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d114      	bne.n	8002638 <I2C_SlaveReceive_RXNE+0x74>
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2b2a      	cmp	r3, #42	; 0x2a
 8002612:	d111      	bne.n	8002638 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002622:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2222      	movs	r2, #34	; 0x22
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2228      	movs	r2, #40	; 0x28
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff f9af 	bl	8001996 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d012      	beq.n	8002678 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800269e:	2b28      	cmp	r3, #40	; 0x28
 80026a0:	d127      	bne.n	80026f2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	09db      	lsrs	r3, r3, #7
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	81bb      	strh	r3, [r7, #12]
 80026d4:	e002      	b.n	80026dc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80026e4:	89ba      	ldrh	r2, [r7, #12]
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	4619      	mov	r1, r3
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff f95d 	bl	80019aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80026f0:	e008      	b.n	8002704 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f06f 0202 	mvn.w	r2, #2
 80026fa:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800272a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002758:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002768:	d172      	bne.n	8002850 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b22      	cmp	r3, #34	; 0x22
 800276e:	d002      	beq.n	8002776 <I2C_Slave_STOPF+0x6a>
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b2a      	cmp	r3, #42	; 0x2a
 8002774:	d135      	bne.n	80027e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b29a      	uxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe f893 	bl	80008da <HAL_DMA_GetState>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d049      	beq.n	800284e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	4a69      	ldr	r2, [pc, #420]	; (8002964 <I2C_Slave_STOPF+0x258>)
 80027c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe f865 	bl	8000896 <HAL_DMA_Abort_IT>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d03d      	beq.n	800284e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027dc:	4610      	mov	r0, r2
 80027de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027e0:	e035      	b.n	800284e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0204 	orr.w	r2, r3, #4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002814:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe f85d 	bl	80008da <HAL_DMA_GetState>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d014      	beq.n	8002850 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	4a4e      	ldr	r2, [pc, #312]	; (8002964 <I2C_Slave_STOPF+0x258>)
 800282c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe f82f 	bl	8000896 <HAL_DMA_Abort_IT>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002848:	4610      	mov	r0, r2
 800284a:	4798      	blx	r3
 800284c:	e000      	b.n	8002850 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800284e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d03e      	beq.n	80028d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d112      	bne.n	800288e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	d112      	bne.n	80028c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f043 0204 	orr.w	r2, r3, #4
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f843 	bl	800296c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80028e6:	e039      	b.n	800295c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b2a      	cmp	r3, #42	; 0x2a
 80028ec:	d109      	bne.n	8002902 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2228      	movs	r2, #40	; 0x28
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff f84a 	bl	8001996 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b28      	cmp	r3, #40	; 0x28
 800290c:	d111      	bne.n	8002932 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <I2C_Slave_STOPF+0x25c>)
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff f84b 	bl	80019c6 <HAL_I2C_ListenCpltCallback>
}
 8002930:	e014      	b.n	800295c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	2b22      	cmp	r3, #34	; 0x22
 8002938:	d002      	beq.n	8002940 <I2C_Slave_STOPF+0x234>
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b22      	cmp	r3, #34	; 0x22
 800293e:	d10d      	bne.n	800295c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff f81d 	bl	8001996 <HAL_I2C_SlaveRxCpltCallback>
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	08002e71 	.word	0x08002e71
 8002968:	ffff0000 	.word	0xffff0000

0800296c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002982:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002984:	7bbb      	ldrb	r3, [r7, #14]
 8002986:	2b10      	cmp	r3, #16
 8002988:	d002      	beq.n	8002990 <I2C_ITError+0x24>
 800298a:	7bbb      	ldrb	r3, [r7, #14]
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d10a      	bne.n	80029a6 <I2C_ITError+0x3a>
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b22      	cmp	r3, #34	; 0x22
 8002994:	d107      	bne.n	80029a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029ac:	2b28      	cmp	r3, #40	; 0x28
 80029ae:	d107      	bne.n	80029c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2228      	movs	r2, #40	; 0x28
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029be:	e015      	b.n	80029ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ce:	d00a      	beq.n	80029e6 <I2C_ITError+0x7a>
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b60      	cmp	r3, #96	; 0x60
 80029d4:	d007      	beq.n	80029e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029fa:	d162      	bne.n	8002ac2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d020      	beq.n	8002a5c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1e:	4a6a      	ldr	r2, [pc, #424]	; (8002bc8 <I2C_ITError+0x25c>)
 8002a20:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd ff35 	bl	8000896 <HAL_DMA_Abort_IT>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8089 	beq.w	8002b46 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a56:	4610      	mov	r0, r2
 8002a58:	4798      	blx	r3
 8002a5a:	e074      	b.n	8002b46 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	4a59      	ldr	r2, [pc, #356]	; (8002bc8 <I2C_ITError+0x25c>)
 8002a62:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd ff14 	bl	8000896 <HAL_DMA_Abort_IT>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d068      	beq.n	8002b46 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7e:	2b40      	cmp	r3, #64	; 0x40
 8002a80:	d10b      	bne.n	8002a9a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002abc:	4610      	mov	r0, r2
 8002abe:	4798      	blx	r3
 8002ac0:	e041      	b.n	8002b46 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b60      	cmp	r3, #96	; 0x60
 8002acc:	d125      	bne.n	8002b1a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	d10b      	bne.n	8002b02 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe ff7f 	bl	8001a16 <HAL_I2C_AbortCpltCallback>
 8002b18:	e015      	b.n	8002b46 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d10b      	bne.n	8002b40 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7fe ff5e 	bl	8001a02 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10e      	bne.n	8002b74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b82:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d113      	bne.n	8002bc0 <I2C_ITError+0x254>
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b28      	cmp	r3, #40	; 0x28
 8002b9c:	d110      	bne.n	8002bc0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <I2C_ITError+0x260>)
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe ff03 	bl	80019c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	08002e71 	.word	0x08002e71
 8002bcc:	ffff0000 	.word	0xffff0000

08002bd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d006      	beq.n	8002bfa <I2C_MasterRequestWrite+0x2a>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d003      	beq.n	8002bfa <I2C_MasterRequestWrite+0x2a>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bf8:	d108      	bne.n	8002c0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e00b      	b.n	8002c24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	2b12      	cmp	r3, #18
 8002c12:	d107      	bne.n	8002c24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f9c5 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4a:	d103      	bne.n	8002c54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e035      	b.n	8002cc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c60:	d108      	bne.n	8002c74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c62:	897b      	ldrh	r3, [r7, #10]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	e01b      	b.n	8002cac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c74:	897b      	ldrh	r3, [r7, #10]
 8002c76:	11db      	asrs	r3, r3, #7
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f003 0306 	and.w	r3, r3, #6
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f063 030f 	orn	r3, r3, #15
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	490e      	ldr	r1, [pc, #56]	; (8002ccc <I2C_MasterRequestWrite+0xfc>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f9eb 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e010      	b.n	8002cc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4907      	ldr	r1, [pc, #28]	; (8002cd0 <I2C_MasterRequestWrite+0x100>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f9db 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	00010008 	.word	0x00010008
 8002cd0:	00010002 	.word	0x00010002

08002cd4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d006      	beq.n	8002d0e <I2C_MasterRequestRead+0x3a>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d003      	beq.n	8002d0e <I2C_MasterRequestRead+0x3a>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d0c:	d108      	bne.n	8002d20 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e00b      	b.n	8002d38 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	2b11      	cmp	r3, #17
 8002d26:	d107      	bne.n	8002d38 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f93b 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5e:	d103      	bne.n	8002d68 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e079      	b.n	8002e60 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d74:	d108      	bne.n	8002d88 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d76:	897b      	ldrh	r3, [r7, #10]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	611a      	str	r2, [r3, #16]
 8002d86:	e05f      	b.n	8002e48 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d88:	897b      	ldrh	r3, [r7, #10]
 8002d8a:	11db      	asrs	r3, r3, #7
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 0306 	and.w	r3, r3, #6
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f063 030f 	orn	r3, r3, #15
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4930      	ldr	r1, [pc, #192]	; (8002e68 <I2C_MasterRequestRead+0x194>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f961 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e054      	b.n	8002e60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4929      	ldr	r1, [pc, #164]	; (8002e6c <I2C_MasterRequestRead+0x198>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f951 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e044      	b.n	8002e60 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f8d9 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e22:	d103      	bne.n	8002e2c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e017      	b.n	8002e60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e30:	897b      	ldrh	r3, [r7, #10]
 8002e32:	11db      	asrs	r3, r3, #7
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f003 0306 	and.w	r3, r3, #6
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f063 030e 	orn	r3, r3, #14
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4907      	ldr	r1, [pc, #28]	; (8002e6c <I2C_MasterRequestRead+0x198>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f90d 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	00010008 	.word	0x00010008
 8002e6c:	00010002 	.word	0x00010002

08002e70 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e88:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e8a:	4b4b      	ldr	r3, [pc, #300]	; (8002fb8 <I2C_DMAAbort+0x148>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	08db      	lsrs	r3, r3, #3
 8002e90:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <I2C_DMAAbort+0x14c>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0a1a      	lsrs	r2, r3, #8
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00da      	lsls	r2, r3, #3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002eb6:	e00a      	b.n	8002ece <I2C_DMAAbort+0x5e>
    }
    count--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d0ea      	beq.n	8002ea4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	2200      	movs	r2, #0
 8002edc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	2200      	movs	r2, #0
 8002eec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2200      	movs	r2, #0
 8002f02:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	2200      	movs	r2, #0
 8002f12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	2200      	movs	r2, #0
 8002f22:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b60      	cmp	r3, #96	; 0x60
 8002f3e:	d10e      	bne.n	8002f5e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2200      	movs	r2, #0
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f7fe fd5d 	bl	8001a16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f5c:	e027      	b.n	8002fae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f64:	2b28      	cmp	r3, #40	; 0x28
 8002f66:	d117      	bne.n	8002f98 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2228      	movs	r2, #40	; 0x28
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f96:	e007      	b.n	8002fa8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002fa8:	6978      	ldr	r0, [r7, #20]
 8002faa:	f7fe fd2a 	bl	8001a02 <HAL_I2C_ErrorCallback>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000000c 	.word	0x2000000c
 8002fbc:	14f8b589 	.word	0x14f8b589

08002fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd0:	e025      	b.n	800301e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd8:	d021      	beq.n	800301e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fd fb3f 	bl	800065c <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d116      	bne.n	800301e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e023      	b.n	8003066 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10d      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	e00c      	b.n	800305e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	429a      	cmp	r2, r3
 8003062:	d0b6      	beq.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800307c:	e051      	b.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d123      	bne.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e046      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030dc:	d021      	beq.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fd fabd 	bl	800065c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d116      	bne.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e020      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d10c      	bne.n	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e00b      	b.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	43da      	mvns	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d18d      	bne.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003178:	e02d      	b.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f900 	bl	8003380 <I2C_IsAcknowledgeFailed>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e02d      	b.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003190:	d021      	beq.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fd fa63 	bl	800065c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d116      	bne.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e007      	b.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d1ca      	bne.n	800317a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031fa:	e02d      	b.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f8bf 	bl	8003380 <I2C_IsAcknowledgeFailed>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e02d      	b.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003212:	d021      	beq.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003214:	f7fd fa22 	bl	800065c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	429a      	cmp	r2, r3
 8003222:	d302      	bcc.n	800322a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b04      	cmp	r3, #4
 8003264:	d1ca      	bne.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	08db      	lsrs	r3, r3, #3
 8003282:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	0a1a      	lsrs	r2, r3, #8
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3b01      	subs	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d107      	bne.n	80032ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e008      	b.n	80032c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032bc:	d0e9      	beq.n	8003292 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	2000000c 	.word	0x2000000c
 80032d0:	14f8b589 	.word	0x14f8b589

080032d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e0:	e042      	b.n	8003368 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d119      	bne.n	8003324 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0210 	mvn.w	r2, #16
 80032f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e029      	b.n	8003378 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003324:	f7fd f99a 	bl	800065c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	429a      	cmp	r2, r3
 8003332:	d302      	bcc.n	800333a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e007      	b.n	8003378 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d1b5      	bne.n	80032e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003396:	d11b      	bne.n	80033d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033ee:	d103      	bne.n	80033f8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80033f6:	e007      	b.n	8003408 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003400:	d102      	bne.n	8003408 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2208      	movs	r2, #8
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b20      	cmp	r3, #32
 8003428:	d129      	bne.n	800347e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2224      	movs	r2, #36	; 0x24
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0210 	bic.w	r2, r2, #16
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	e000      	b.n	8003480 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800347e:	2302      	movs	r3, #2
  }
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d12a      	bne.n	80034fc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2224      	movs	r2, #36	; 0x24
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80034c6:	89fb      	ldrh	r3, [r7, #14]
 80034c8:	f023 030f 	bic.w	r3, r3, #15
 80034cc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	89fb      	ldrh	r3, [r7, #14]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	89fa      	ldrh	r2, [r7, #14]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e25b      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d075      	beq.n	8003616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	4ba3      	ldr	r3, [pc, #652]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00c      	beq.n	8003550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4ba0      	ldr	r3, [pc, #640]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	2b08      	cmp	r3, #8
 8003540:	d112      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b9d      	ldr	r3, [pc, #628]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354e:	d10b      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	4b99      	ldr	r3, [pc, #612]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05b      	beq.n	8003614 <HAL_RCC_OscConfig+0x108>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d157      	bne.n	8003614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e236      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d106      	bne.n	8003580 <HAL_RCC_OscConfig+0x74>
 8003572:	4b91      	ldr	r3, [pc, #580]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a90      	ldr	r2, [pc, #576]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x98>
 800358a:	4b8b      	ldr	r3, [pc, #556]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a8a      	ldr	r2, [pc, #552]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a87      	ldr	r2, [pc, #540]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 80035a4:	4b84      	ldr	r3, [pc, #528]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a83      	ldr	r2, [pc, #524]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd f84a 	bl	800065c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fd f846 	bl	800065c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1fb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b76      	ldr	r3, [pc, #472]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xc0>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fd f836 	bl	800065c <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fd f832 	bl	800065c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1e7      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0xe8>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	4b65      	ldr	r3, [pc, #404]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b5c      	ldr	r3, [pc, #368]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e1bb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4952      	ldr	r1, [pc, #328]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	e03a      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b4f      	ldr	r3, [pc, #316]	; (80037bc <HAL_RCC_OscConfig+0x2b0>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fc ffeb 	bl	800065c <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368a:	f7fc ffe7 	bl	800065c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e19c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4940      	ldr	r1, [pc, #256]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <HAL_RCC_OscConfig+0x2b0>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fc ffca 	bl	800065c <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fc ffc6 	bl	800065c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e17b      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d030      	beq.n	8003758 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <HAL_RCC_OscConfig+0x2b4>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fc ffaa 	bl	800065c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370c:	f7fc ffa6 	bl	800065c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e15b      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x200>
 800372a:	e015      	b.n	8003758 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_RCC_OscConfig+0x2b4>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fc ff93 	bl	800065c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373a:	f7fc ff8f 	bl	800065c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e144      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800374e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a0 	beq.w	80038a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_OscConfig+0x2b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d121      	bne.n	80037e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_RCC_OscConfig+0x2b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <HAL_RCC_OscConfig+0x2b8>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ae:	f7fc ff55 	bl	800065c <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	e011      	b.n	80037da <HAL_RCC_OscConfig+0x2ce>
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	42470000 	.word	0x42470000
 80037c0:	42470e80 	.word	0x42470e80
 80037c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c8:	f7fc ff48 	bl	800065c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0fd      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCC_OscConfig+0x4d4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d106      	bne.n	80037fc <HAL_RCC_OscConfig+0x2f0>
 80037ee:	4b7d      	ldr	r3, [pc, #500]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a7c      	ldr	r2, [pc, #496]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
 80037fa:	e01c      	b.n	8003836 <HAL_RCC_OscConfig+0x32a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b05      	cmp	r3, #5
 8003802:	d10c      	bne.n	800381e <HAL_RCC_OscConfig+0x312>
 8003804:	4b77      	ldr	r3, [pc, #476]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a76      	ldr	r2, [pc, #472]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	4b74      	ldr	r3, [pc, #464]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a73      	ldr	r2, [pc, #460]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	e00b      	b.n	8003836 <HAL_RCC_OscConfig+0x32a>
 800381e:	4b71      	ldr	r3, [pc, #452]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a70      	ldr	r2, [pc, #448]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	4b6e      	ldr	r3, [pc, #440]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a6d      	ldr	r2, [pc, #436]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d015      	beq.n	800386a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fc ff0d 	bl	800065c <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fc ff09 	bl	800065c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e0bc      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ee      	beq.n	8003846 <HAL_RCC_OscConfig+0x33a>
 8003868:	e014      	b.n	8003894 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7fc fef7 	bl	800065c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fc fef3 	bl	800065c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e0a6      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003888:	4b56      	ldr	r3, [pc, #344]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ee      	bne.n	8003872 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389a:	4b52      	ldr	r3, [pc, #328]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a51      	ldr	r2, [pc, #324]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80038a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8092 	beq.w	80039d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b0:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d05c      	beq.n	8003976 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d141      	bne.n	8003948 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c4:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <HAL_RCC_OscConfig+0x4dc>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ca:	f7fc fec7 	bl	800065c <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d2:	f7fc fec3 	bl	800065c <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e078      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e4:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	019b      	lsls	r3, r3, #6
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	3b01      	subs	r3, #1
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	061b      	lsls	r3, r3, #24
 8003914:	4933      	ldr	r1, [pc, #204]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391a:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <HAL_RCC_OscConfig+0x4dc>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fc fe9c 	bl	800065c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003928:	f7fc fe98 	bl	800065c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e04d      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x41c>
 8003946:	e045      	b.n	80039d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_OscConfig+0x4dc>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fc fe85 	bl	800065c <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003956:	f7fc fe81 	bl	800065c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e036      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003968:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x44a>
 8003974:	e02e      	b.n	80039d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e029      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	429a      	cmp	r2, r3
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d115      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039aa:	4013      	ands	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10d      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40007000 	.word	0x40007000
 80039e4:	40023800 	.word	0x40023800
 80039e8:	42470060 	.word	0x42470060

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0cc      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b68      	ldr	r3, [pc, #416]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d90c      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b63      	ldr	r3, [pc, #396]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0b8      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a40:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a58      	ldr	r2, [pc, #352]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	494d      	ldr	r1, [pc, #308]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d044      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d119      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e06f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e067      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4934      	ldr	r1, [pc, #208]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003adc:	f7fc fdbe 	bl	800065c <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7fc fdba 	bl	800065c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e04f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 020c 	and.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1eb      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d20c      	bcs.n	8003b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e032      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4916      	ldr	r1, [pc, #88]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	490e      	ldr	r1, [pc, #56]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b72:	f000 f821 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003b76:	4601      	mov	r1, r0
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	5cd3      	ldrb	r3, [r2, r3]
 8003b86:	fa21 f303 	lsr.w	r3, r1, r3
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fc fd1e 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023c00 	.word	0x40023c00
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	08007a88 	.word	0x08007a88
 8003bb0:	2000000c 	.word	0x2000000c
 8003bb4:	20000000 	.word	0x20000000

08003bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bce:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d007      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x32>
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x38>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 808d 	bne.w	8003cfe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003be6:	60bb      	str	r3, [r7, #8]
       break;
 8003be8:	e08c      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bec:	60bb      	str	r3, [r7, #8]
      break;
 8003bee:	e089      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfa:	4b45      	ldr	r3, [pc, #276]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d023      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	f04f 0400 	mov.w	r4, #0
 8003c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	ea03 0501 	and.w	r5, r3, r1
 8003c1c:	ea04 0602 	and.w	r6, r4, r2
 8003c20:	4a3d      	ldr	r2, [pc, #244]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c22:	fb02 f106 	mul.w	r1, r2, r6
 8003c26:	2200      	movs	r2, #0
 8003c28:	fb02 f205 	mul.w	r2, r2, r5
 8003c2c:	440a      	add	r2, r1
 8003c2e:	493a      	ldr	r1, [pc, #232]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c30:	fba5 0101 	umull	r0, r1, r5, r1
 8003c34:	1853      	adds	r3, r2, r1
 8003c36:	4619      	mov	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f04f 0400 	mov.w	r4, #0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4623      	mov	r3, r4
 8003c42:	f7fc fb25 	bl	8000290 <__aeabi_uldivmod>
 8003c46:	4603      	mov	r3, r0
 8003c48:	460c      	mov	r4, r1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e049      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	f04f 0400 	mov.w	r4, #0
 8003c58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	ea03 0501 	and.w	r5, r3, r1
 8003c64:	ea04 0602 	and.w	r6, r4, r2
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4632      	mov	r2, r6
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	f04f 0400 	mov.w	r4, #0
 8003c74:	0154      	lsls	r4, r2, #5
 8003c76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c7a:	014b      	lsls	r3, r1, #5
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4622      	mov	r2, r4
 8003c80:	1b49      	subs	r1, r1, r5
 8003c82:	eb62 0206 	sbc.w	r2, r2, r6
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	f04f 0400 	mov.w	r4, #0
 8003c8e:	0194      	lsls	r4, r2, #6
 8003c90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c94:	018b      	lsls	r3, r1, #6
 8003c96:	1a5b      	subs	r3, r3, r1
 8003c98:	eb64 0402 	sbc.w	r4, r4, r2
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	00e2      	lsls	r2, r4, #3
 8003ca6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003caa:	00d9      	lsls	r1, r3, #3
 8003cac:	460b      	mov	r3, r1
 8003cae:	4614      	mov	r4, r2
 8003cb0:	195b      	adds	r3, r3, r5
 8003cb2:	eb44 0406 	adc.w	r4, r4, r6
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	02a2      	lsls	r2, r4, #10
 8003cc0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cc4:	0299      	lsls	r1, r3, #10
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	4621      	mov	r1, r4
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f04f 0400 	mov.w	r4, #0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	f7fc fada 	bl	8000290 <__aeabi_uldivmod>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	3301      	adds	r3, #1
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfa:	60bb      	str	r3, [r7, #8]
      break;
 8003cfc:	e002      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d00:	60bb      	str	r3, [r7, #8]
      break;
 8003d02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d04:	68bb      	ldr	r3, [r7, #8]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	017d7840 	.word	0x017d7840

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	2000000c 	.word	0x2000000c

08003d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d38:	f7ff fff0 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d3c:	4601      	mov	r1, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0a9b      	lsrs	r3, r3, #10
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4a03      	ldr	r2, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4a:	5cd3      	ldrb	r3, [r2, r3]
 8003d4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08007a98 	.word	0x08007a98

08003d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d60:	f7ff ffdc 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d64:	4601      	mov	r1, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0b5b      	lsrs	r3, r3, #13
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d72:	5cd3      	ldrb	r3, [r2, r3]
 8003d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	08007a98 	.word	0x08007a98

08003d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e03f      	b.n	8003e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f003 f900 	bl	8006fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fbb5 	bl	8004538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b088      	sub	sp, #32
 8003e22:	af02      	add	r7, sp, #8
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	f040 8083 	bne.w	8003f46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_UART_Transmit+0x2e>
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e07b      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Transmit+0x40>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e074      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2221      	movs	r2, #33	; 0x21
 8003e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e74:	f7fc fbf2 	bl	800065c <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e8e:	e042      	b.n	8003f16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	d122      	bne.n	8003eee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2180      	movs	r1, #128	; 0x80
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f9b6 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e042      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	e017      	b.n	8003f16 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	e013      	b.n	8003f16 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f993 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e01f      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	60ba      	str	r2, [r7, #8]
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1b7      	bne.n	8003e90 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2200      	movs	r2, #0
 8003f28:	2140      	movs	r1, #64	; 0x40
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f97a 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e006      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d140      	bne.n	8003fec <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_UART_Receive_IT+0x26>
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e039      	b.n	8003fee <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_UART_Receive_IT+0x38>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e032      	b.n	8003fee <HAL_UART_Receive_IT+0x9e>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2222      	movs	r2, #34	; 0x22
 8003fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0220 	orr.w	r2, r2, #32
 8003fe6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
  }
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_UART_IRQHandler+0x52>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f9d6 	bl	80043f8 <UART_Receive_IT>
      return;
 800404c:	e0d1      	b.n	80041f2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80b0 	beq.w	80041b6 <HAL_UART_IRQHandler+0x1ba>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_UART_IRQHandler+0x70>
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80a5 	beq.w	80041b6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_UART_IRQHandler+0x90>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	f043 0201 	orr.w	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_UART_IRQHandler+0xb0>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	f043 0202 	orr.w	r2, r3, #2
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_UART_IRQHandler+0xd0>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	f043 0204 	orr.w	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00f      	beq.n	80040f6 <HAL_UART_IRQHandler+0xfa>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <HAL_UART_IRQHandler+0xee>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	f043 0208 	orr.w	r2, r3, #8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d078      	beq.n	80041f0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_UART_IRQHandler+0x11c>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f970 	bl	80043f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <HAL_UART_IRQHandler+0x144>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d031      	beq.n	80041a4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f8b9 	bl	80042b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d123      	bne.n	800419c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004162:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	2b00      	cmp	r3, #0
 800416a:	d013      	beq.n	8004194 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	4a21      	ldr	r2, [pc, #132]	; (80041f8 <HAL_UART_IRQHandler+0x1fc>)
 8004172:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc fb8c 	bl	8000896 <HAL_DMA_Abort_IT>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d016      	beq.n	80041b2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800418e:	4610      	mov	r0, r2
 8004190:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004192:	e00e      	b.n	80041b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f83b 	bl	8004210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419a:	e00a      	b.n	80041b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f837 	bl	8004210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a2:	e006      	b.n	80041b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f833 	bl	8004210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80041b0:	e01e      	b.n	80041f0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b2:	bf00      	nop
    return;
 80041b4:	e01c      	b.n	80041f0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_UART_IRQHandler+0x1d6>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f8a6 	bl	800431c <UART_Transmit_IT>
    return;
 80041d0:	e00f      	b.n	80041f2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_UART_IRQHandler+0x1f6>
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f8ee 	bl	80043c8 <UART_EndTransmit_IT>
    return;
 80041ec:	bf00      	nop
 80041ee:	e000      	b.n	80041f2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80041f0:	bf00      	nop
  }
}
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	080042f5 	.word	0x080042f5

080041fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004234:	e02c      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423c:	d028      	beq.n	8004290 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <UART_WaitOnFlagUntilTimeout+0x30>
 8004244:	f7fc fa0a 	bl	800065c <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	429a      	cmp	r2, r3
 8004252:	d21d      	bcs.n	8004290 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004262:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e00f      	b.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4013      	ands	r3, r2
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d0c3      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff ff7e 	bl	8004210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b21      	cmp	r3, #33	; 0x21
 800432e:	d144      	bne.n	80043ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d11a      	bne.n	8004370 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	1c9a      	adds	r2, r3, #2
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]
 8004362:	e00e      	b.n	8004382 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]
 800436e:	e008      	b.n	8004382 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	1c59      	adds	r1, r3, #1
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6211      	str	r1, [r2, #32]
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29b      	uxth	r3, r3
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4619      	mov	r1, r3
 8004390:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff07 	bl	80041fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b22      	cmp	r3, #34	; 0x22
 800440a:	f040 8090 	bne.w	800452e <UART_Receive_IT+0x136>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004416:	d123      	bne.n	8004460 <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10e      	bne.n	8004444 <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	b29b      	uxth	r3, r3
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	1c9a      	adds	r2, r3, #2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	629a      	str	r2, [r3, #40]	; 0x28
 8004442:	e029      	b.n	8004498 <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b29b      	uxth	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
 800445e:	e01b      	b.n	8004498 <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6858      	ldr	r0, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6291      	str	r1, [r2, #40]	; 0x28
 8004478:	b2c2      	uxtb	r2, r0
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	e00c      	b.n	8004498 <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	b2da      	uxtb	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	1c58      	adds	r0, r3, #1
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	6288      	str	r0, [r1, #40]	; 0x28
 8004490:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	4619      	mov	r1, r3
 80044a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d13e      	bne.n	800452a <UART_Receive_IT+0x132>
    {
    	//This allows the buffer to resize based on length of the Ground Station commands over UART
    	if((*(huart->pRxBuffPtr-1)!= 0) && (huart->RxXferSize == 4)){
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d017      	beq.n	80044e8 <UART_Receive_IT+0xf0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d113      	bne.n	80044e8 <UART_Receive_IT+0xf0>
    		huart->RxXferCount = *(huart->pRxBuffPtr-1) + 1;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	3b01      	subs	r3, #1
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    		huart->RxXferSize = *(huart->pRxBuffPtr-1) + 5;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3305      	adds	r3, #5
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	859a      	strh	r2, [r3, #44]	; 0x2c
    		return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e023      	b.n	8004530 <UART_Receive_IT+0x138>
    	}
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0220 	bic.w	r2, r2, #32
 80044f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f002 fbd3 	bl	8006ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e002      	b.n	8004530 <UART_Receive_IT+0x138>
    }
    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <UART_Receive_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800457a:	f023 030c 	bic.w	r3, r3, #12
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	430b      	orrs	r3, r1
 8004586:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	f040 818b 	bne.w	80048c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4ac1      	ldr	r2, [pc, #772]	; (80048b4 <UART_SetConfig+0x37c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d005      	beq.n	80045c0 <UART_SetConfig+0x88>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4abf      	ldr	r2, [pc, #764]	; (80048b8 <UART_SetConfig+0x380>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	f040 80bd 	bne.w	800473a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045c0:	f7ff fbcc 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
 80045c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	461d      	mov	r5, r3
 80045ca:	f04f 0600 	mov.w	r6, #0
 80045ce:	46a8      	mov	r8, r5
 80045d0:	46b1      	mov	r9, r6
 80045d2:	eb18 0308 	adds.w	r3, r8, r8
 80045d6:	eb49 0409 	adc.w	r4, r9, r9
 80045da:	4698      	mov	r8, r3
 80045dc:	46a1      	mov	r9, r4
 80045de:	eb18 0805 	adds.w	r8, r8, r5
 80045e2:	eb49 0906 	adc.w	r9, r9, r6
 80045e6:	f04f 0100 	mov.w	r1, #0
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045fa:	4688      	mov	r8, r1
 80045fc:	4691      	mov	r9, r2
 80045fe:	eb18 0005 	adds.w	r0, r8, r5
 8004602:	eb49 0106 	adc.w	r1, r9, r6
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	461d      	mov	r5, r3
 800460c:	f04f 0600 	mov.w	r6, #0
 8004610:	196b      	adds	r3, r5, r5
 8004612:	eb46 0406 	adc.w	r4, r6, r6
 8004616:	461a      	mov	r2, r3
 8004618:	4623      	mov	r3, r4
 800461a:	f7fb fe39 	bl	8000290 <__aeabi_uldivmod>
 800461e:	4603      	mov	r3, r0
 8004620:	460c      	mov	r4, r1
 8004622:	461a      	mov	r2, r3
 8004624:	4ba5      	ldr	r3, [pc, #660]	; (80048bc <UART_SetConfig+0x384>)
 8004626:	fba3 2302 	umull	r2, r3, r3, r2
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	461d      	mov	r5, r3
 8004634:	f04f 0600 	mov.w	r6, #0
 8004638:	46a9      	mov	r9, r5
 800463a:	46b2      	mov	sl, r6
 800463c:	eb19 0309 	adds.w	r3, r9, r9
 8004640:	eb4a 040a 	adc.w	r4, sl, sl
 8004644:	4699      	mov	r9, r3
 8004646:	46a2      	mov	sl, r4
 8004648:	eb19 0905 	adds.w	r9, r9, r5
 800464c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004664:	4689      	mov	r9, r1
 8004666:	4692      	mov	sl, r2
 8004668:	eb19 0005 	adds.w	r0, r9, r5
 800466c:	eb4a 0106 	adc.w	r1, sl, r6
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	461d      	mov	r5, r3
 8004676:	f04f 0600 	mov.w	r6, #0
 800467a:	196b      	adds	r3, r5, r5
 800467c:	eb46 0406 	adc.w	r4, r6, r6
 8004680:	461a      	mov	r2, r3
 8004682:	4623      	mov	r3, r4
 8004684:	f7fb fe04 	bl	8000290 <__aeabi_uldivmod>
 8004688:	4603      	mov	r3, r0
 800468a:	460c      	mov	r4, r1
 800468c:	461a      	mov	r2, r3
 800468e:	4b8b      	ldr	r3, [pc, #556]	; (80048bc <UART_SetConfig+0x384>)
 8004690:	fba3 1302 	umull	r1, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	2164      	movs	r1, #100	; 0x64
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	3332      	adds	r3, #50	; 0x32
 80046a2:	4a86      	ldr	r2, [pc, #536]	; (80048bc <UART_SetConfig+0x384>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046b0:	4498      	add	r8, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	461d      	mov	r5, r3
 80046b6:	f04f 0600 	mov.w	r6, #0
 80046ba:	46a9      	mov	r9, r5
 80046bc:	46b2      	mov	sl, r6
 80046be:	eb19 0309 	adds.w	r3, r9, r9
 80046c2:	eb4a 040a 	adc.w	r4, sl, sl
 80046c6:	4699      	mov	r9, r3
 80046c8:	46a2      	mov	sl, r4
 80046ca:	eb19 0905 	adds.w	r9, r9, r5
 80046ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046e6:	4689      	mov	r9, r1
 80046e8:	4692      	mov	sl, r2
 80046ea:	eb19 0005 	adds.w	r0, r9, r5
 80046ee:	eb4a 0106 	adc.w	r1, sl, r6
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	461d      	mov	r5, r3
 80046f8:	f04f 0600 	mov.w	r6, #0
 80046fc:	196b      	adds	r3, r5, r5
 80046fe:	eb46 0406 	adc.w	r4, r6, r6
 8004702:	461a      	mov	r2, r3
 8004704:	4623      	mov	r3, r4
 8004706:	f7fb fdc3 	bl	8000290 <__aeabi_uldivmod>
 800470a:	4603      	mov	r3, r0
 800470c:	460c      	mov	r4, r1
 800470e:	461a      	mov	r2, r3
 8004710:	4b6a      	ldr	r3, [pc, #424]	; (80048bc <UART_SetConfig+0x384>)
 8004712:	fba3 1302 	umull	r1, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2164      	movs	r1, #100	; 0x64
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	3332      	adds	r3, #50	; 0x32
 8004724:	4a65      	ldr	r2, [pc, #404]	; (80048bc <UART_SetConfig+0x384>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	f003 0207 	and.w	r2, r3, #7
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4442      	add	r2, r8
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	e26f      	b.n	8004c1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800473a:	f7ff fafb 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 800473e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	461d      	mov	r5, r3
 8004744:	f04f 0600 	mov.w	r6, #0
 8004748:	46a8      	mov	r8, r5
 800474a:	46b1      	mov	r9, r6
 800474c:	eb18 0308 	adds.w	r3, r8, r8
 8004750:	eb49 0409 	adc.w	r4, r9, r9
 8004754:	4698      	mov	r8, r3
 8004756:	46a1      	mov	r9, r4
 8004758:	eb18 0805 	adds.w	r8, r8, r5
 800475c:	eb49 0906 	adc.w	r9, r9, r6
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800476c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004770:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004774:	4688      	mov	r8, r1
 8004776:	4691      	mov	r9, r2
 8004778:	eb18 0005 	adds.w	r0, r8, r5
 800477c:	eb49 0106 	adc.w	r1, r9, r6
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	461d      	mov	r5, r3
 8004786:	f04f 0600 	mov.w	r6, #0
 800478a:	196b      	adds	r3, r5, r5
 800478c:	eb46 0406 	adc.w	r4, r6, r6
 8004790:	461a      	mov	r2, r3
 8004792:	4623      	mov	r3, r4
 8004794:	f7fb fd7c 	bl	8000290 <__aeabi_uldivmod>
 8004798:	4603      	mov	r3, r0
 800479a:	460c      	mov	r4, r1
 800479c:	461a      	mov	r2, r3
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <UART_SetConfig+0x384>)
 80047a0:	fba3 2302 	umull	r2, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	461d      	mov	r5, r3
 80047ae:	f04f 0600 	mov.w	r6, #0
 80047b2:	46a9      	mov	r9, r5
 80047b4:	46b2      	mov	sl, r6
 80047b6:	eb19 0309 	adds.w	r3, r9, r9
 80047ba:	eb4a 040a 	adc.w	r4, sl, sl
 80047be:	4699      	mov	r9, r3
 80047c0:	46a2      	mov	sl, r4
 80047c2:	eb19 0905 	adds.w	r9, r9, r5
 80047c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047de:	4689      	mov	r9, r1
 80047e0:	4692      	mov	sl, r2
 80047e2:	eb19 0005 	adds.w	r0, r9, r5
 80047e6:	eb4a 0106 	adc.w	r1, sl, r6
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	461d      	mov	r5, r3
 80047f0:	f04f 0600 	mov.w	r6, #0
 80047f4:	196b      	adds	r3, r5, r5
 80047f6:	eb46 0406 	adc.w	r4, r6, r6
 80047fa:	461a      	mov	r2, r3
 80047fc:	4623      	mov	r3, r4
 80047fe:	f7fb fd47 	bl	8000290 <__aeabi_uldivmod>
 8004802:	4603      	mov	r3, r0
 8004804:	460c      	mov	r4, r1
 8004806:	461a      	mov	r2, r3
 8004808:	4b2c      	ldr	r3, [pc, #176]	; (80048bc <UART_SetConfig+0x384>)
 800480a:	fba3 1302 	umull	r1, r3, r3, r2
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	2164      	movs	r1, #100	; 0x64
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	3332      	adds	r3, #50	; 0x32
 800481c:	4a27      	ldr	r2, [pc, #156]	; (80048bc <UART_SetConfig+0x384>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800482a:	4498      	add	r8, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	461d      	mov	r5, r3
 8004830:	f04f 0600 	mov.w	r6, #0
 8004834:	46a9      	mov	r9, r5
 8004836:	46b2      	mov	sl, r6
 8004838:	eb19 0309 	adds.w	r3, r9, r9
 800483c:	eb4a 040a 	adc.w	r4, sl, sl
 8004840:	4699      	mov	r9, r3
 8004842:	46a2      	mov	sl, r4
 8004844:	eb19 0905 	adds.w	r9, r9, r5
 8004848:	eb4a 0a06 	adc.w	sl, sl, r6
 800484c:	f04f 0100 	mov.w	r1, #0
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004858:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800485c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004860:	4689      	mov	r9, r1
 8004862:	4692      	mov	sl, r2
 8004864:	eb19 0005 	adds.w	r0, r9, r5
 8004868:	eb4a 0106 	adc.w	r1, sl, r6
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	461d      	mov	r5, r3
 8004872:	f04f 0600 	mov.w	r6, #0
 8004876:	196b      	adds	r3, r5, r5
 8004878:	eb46 0406 	adc.w	r4, r6, r6
 800487c:	461a      	mov	r2, r3
 800487e:	4623      	mov	r3, r4
 8004880:	f7fb fd06 	bl	8000290 <__aeabi_uldivmod>
 8004884:	4603      	mov	r3, r0
 8004886:	460c      	mov	r4, r1
 8004888:	461a      	mov	r2, r3
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <UART_SetConfig+0x384>)
 800488c:	fba3 1302 	umull	r1, r3, r3, r2
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	2164      	movs	r1, #100	; 0x64
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	3332      	adds	r3, #50	; 0x32
 800489e:	4a07      	ldr	r2, [pc, #28]	; (80048bc <UART_SetConfig+0x384>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	f003 0207 	and.w	r2, r3, #7
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4442      	add	r2, r8
 80048b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80048b2:	e1b2      	b.n	8004c1a <UART_SetConfig+0x6e2>
 80048b4:	40011000 	.word	0x40011000
 80048b8:	40011400 	.word	0x40011400
 80048bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4ad7      	ldr	r2, [pc, #860]	; (8004c24 <UART_SetConfig+0x6ec>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d005      	beq.n	80048d6 <UART_SetConfig+0x39e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4ad6      	ldr	r2, [pc, #856]	; (8004c28 <UART_SetConfig+0x6f0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	f040 80d1 	bne.w	8004a78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80048d6:	f7ff fa41 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
 80048da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	469a      	mov	sl, r3
 80048e0:	f04f 0b00 	mov.w	fp, #0
 80048e4:	46d0      	mov	r8, sl
 80048e6:	46d9      	mov	r9, fp
 80048e8:	eb18 0308 	adds.w	r3, r8, r8
 80048ec:	eb49 0409 	adc.w	r4, r9, r9
 80048f0:	4698      	mov	r8, r3
 80048f2:	46a1      	mov	r9, r4
 80048f4:	eb18 080a 	adds.w	r8, r8, sl
 80048f8:	eb49 090b 	adc.w	r9, r9, fp
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004908:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800490c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004910:	4688      	mov	r8, r1
 8004912:	4691      	mov	r9, r2
 8004914:	eb1a 0508 	adds.w	r5, sl, r8
 8004918:	eb4b 0609 	adc.w	r6, fp, r9
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4619      	mov	r1, r3
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	0094      	lsls	r4, r2, #2
 8004930:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004934:	008b      	lsls	r3, r1, #2
 8004936:	461a      	mov	r2, r3
 8004938:	4623      	mov	r3, r4
 800493a:	4628      	mov	r0, r5
 800493c:	4631      	mov	r1, r6
 800493e:	f7fb fca7 	bl	8000290 <__aeabi_uldivmod>
 8004942:	4603      	mov	r3, r0
 8004944:	460c      	mov	r4, r1
 8004946:	461a      	mov	r2, r3
 8004948:	4bb8      	ldr	r3, [pc, #736]	; (8004c2c <UART_SetConfig+0x6f4>)
 800494a:	fba3 2302 	umull	r2, r3, r3, r2
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	469b      	mov	fp, r3
 8004958:	f04f 0c00 	mov.w	ip, #0
 800495c:	46d9      	mov	r9, fp
 800495e:	46e2      	mov	sl, ip
 8004960:	eb19 0309 	adds.w	r3, r9, r9
 8004964:	eb4a 040a 	adc.w	r4, sl, sl
 8004968:	4699      	mov	r9, r3
 800496a:	46a2      	mov	sl, r4
 800496c:	eb19 090b 	adds.w	r9, r9, fp
 8004970:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004974:	f04f 0100 	mov.w	r1, #0
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004980:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004984:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004988:	4689      	mov	r9, r1
 800498a:	4692      	mov	sl, r2
 800498c:	eb1b 0509 	adds.w	r5, fp, r9
 8004990:	eb4c 060a 	adc.w	r6, ip, sl
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4619      	mov	r1, r3
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	f04f 0400 	mov.w	r4, #0
 80049a6:	0094      	lsls	r4, r2, #2
 80049a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049ac:	008b      	lsls	r3, r1, #2
 80049ae:	461a      	mov	r2, r3
 80049b0:	4623      	mov	r3, r4
 80049b2:	4628      	mov	r0, r5
 80049b4:	4631      	mov	r1, r6
 80049b6:	f7fb fc6b 	bl	8000290 <__aeabi_uldivmod>
 80049ba:	4603      	mov	r3, r0
 80049bc:	460c      	mov	r4, r1
 80049be:	461a      	mov	r2, r3
 80049c0:	4b9a      	ldr	r3, [pc, #616]	; (8004c2c <UART_SetConfig+0x6f4>)
 80049c2:	fba3 1302 	umull	r1, r3, r3, r2
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	2164      	movs	r1, #100	; 0x64
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	3332      	adds	r3, #50	; 0x32
 80049d4:	4a95      	ldr	r2, [pc, #596]	; (8004c2c <UART_SetConfig+0x6f4>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049e0:	4498      	add	r8, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	469b      	mov	fp, r3
 80049e6:	f04f 0c00 	mov.w	ip, #0
 80049ea:	46d9      	mov	r9, fp
 80049ec:	46e2      	mov	sl, ip
 80049ee:	eb19 0309 	adds.w	r3, r9, r9
 80049f2:	eb4a 040a 	adc.w	r4, sl, sl
 80049f6:	4699      	mov	r9, r3
 80049f8:	46a2      	mov	sl, r4
 80049fa:	eb19 090b 	adds.w	r9, r9, fp
 80049fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a16:	4689      	mov	r9, r1
 8004a18:	4692      	mov	sl, r2
 8004a1a:	eb1b 0509 	adds.w	r5, fp, r9
 8004a1e:	eb4c 060a 	adc.w	r6, ip, sl
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4619      	mov	r1, r3
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	f04f 0400 	mov.w	r4, #0
 8004a34:	0094      	lsls	r4, r2, #2
 8004a36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a3a:	008b      	lsls	r3, r1, #2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	4631      	mov	r1, r6
 8004a44:	f7fb fc24 	bl	8000290 <__aeabi_uldivmod>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b77      	ldr	r3, [pc, #476]	; (8004c2c <UART_SetConfig+0x6f4>)
 8004a50:	fba3 1302 	umull	r1, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2164      	movs	r1, #100	; 0x64
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	3332      	adds	r3, #50	; 0x32
 8004a62:	4a72      	ldr	r2, [pc, #456]	; (8004c2c <UART_SetConfig+0x6f4>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	f003 020f 	and.w	r2, r3, #15
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4442      	add	r2, r8
 8004a74:	609a      	str	r2, [r3, #8]
 8004a76:	e0d0      	b.n	8004c1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7ff f95c 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	469a      	mov	sl, r3
 8004a82:	f04f 0b00 	mov.w	fp, #0
 8004a86:	46d0      	mov	r8, sl
 8004a88:	46d9      	mov	r9, fp
 8004a8a:	eb18 0308 	adds.w	r3, r8, r8
 8004a8e:	eb49 0409 	adc.w	r4, r9, r9
 8004a92:	4698      	mov	r8, r3
 8004a94:	46a1      	mov	r9, r4
 8004a96:	eb18 080a 	adds.w	r8, r8, sl
 8004a9a:	eb49 090b 	adc.w	r9, r9, fp
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004aaa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004aae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ab2:	4688      	mov	r8, r1
 8004ab4:	4691      	mov	r9, r2
 8004ab6:	eb1a 0508 	adds.w	r5, sl, r8
 8004aba:	eb4b 0609 	adc.w	r6, fp, r9
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	f04f 0400 	mov.w	r4, #0
 8004ad0:	0094      	lsls	r4, r2, #2
 8004ad2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ad6:	008b      	lsls	r3, r1, #2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4623      	mov	r3, r4
 8004adc:	4628      	mov	r0, r5
 8004ade:	4631      	mov	r1, r6
 8004ae0:	f7fb fbd6 	bl	8000290 <__aeabi_uldivmod>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b50      	ldr	r3, [pc, #320]	; (8004c2c <UART_SetConfig+0x6f4>)
 8004aec:	fba3 2302 	umull	r2, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	469b      	mov	fp, r3
 8004afa:	f04f 0c00 	mov.w	ip, #0
 8004afe:	46d9      	mov	r9, fp
 8004b00:	46e2      	mov	sl, ip
 8004b02:	eb19 0309 	adds.w	r3, r9, r9
 8004b06:	eb4a 040a 	adc.w	r4, sl, sl
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	46a2      	mov	sl, r4
 8004b0e:	eb19 090b 	adds.w	r9, r9, fp
 8004b12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b16:	f04f 0100 	mov.w	r1, #0
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b2a:	4689      	mov	r9, r1
 8004b2c:	4692      	mov	sl, r2
 8004b2e:	eb1b 0509 	adds.w	r5, fp, r9
 8004b32:	eb4c 060a 	adc.w	r6, ip, sl
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	0094      	lsls	r4, r2, #2
 8004b4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b4e:	008b      	lsls	r3, r1, #2
 8004b50:	461a      	mov	r2, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	4628      	mov	r0, r5
 8004b56:	4631      	mov	r1, r6
 8004b58:	f7fb fb9a 	bl	8000290 <__aeabi_uldivmod>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	461a      	mov	r2, r3
 8004b62:	4b32      	ldr	r3, [pc, #200]	; (8004c2c <UART_SetConfig+0x6f4>)
 8004b64:	fba3 1302 	umull	r1, r3, r3, r2
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	2164      	movs	r1, #100	; 0x64
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	3332      	adds	r3, #50	; 0x32
 8004b76:	4a2d      	ldr	r2, [pc, #180]	; (8004c2c <UART_SetConfig+0x6f4>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b82:	4498      	add	r8, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	469b      	mov	fp, r3
 8004b88:	f04f 0c00 	mov.w	ip, #0
 8004b8c:	46d9      	mov	r9, fp
 8004b8e:	46e2      	mov	sl, ip
 8004b90:	eb19 0309 	adds.w	r3, r9, r9
 8004b94:	eb4a 040a 	adc.w	r4, sl, sl
 8004b98:	4699      	mov	r9, r3
 8004b9a:	46a2      	mov	sl, r4
 8004b9c:	eb19 090b 	adds.w	r9, r9, fp
 8004ba0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bb8:	4689      	mov	r9, r1
 8004bba:	4692      	mov	sl, r2
 8004bbc:	eb1b 0509 	adds.w	r5, fp, r9
 8004bc0:	eb4c 060a 	adc.w	r6, ip, sl
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	f04f 0400 	mov.w	r4, #0
 8004bd6:	0094      	lsls	r4, r2, #2
 8004bd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bdc:	008b      	lsls	r3, r1, #2
 8004bde:	461a      	mov	r2, r3
 8004be0:	4623      	mov	r3, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	4631      	mov	r1, r6
 8004be6:	f7fb fb53 	bl	8000290 <__aeabi_uldivmod>
 8004bea:	4603      	mov	r3, r0
 8004bec:	460c      	mov	r4, r1
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <UART_SetConfig+0x6f4>)
 8004bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	2164      	movs	r1, #100	; 0x64
 8004bfa:	fb01 f303 	mul.w	r3, r1, r3
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	3332      	adds	r3, #50	; 0x32
 8004c04:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <UART_SetConfig+0x6f4>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	f003 020f 	and.w	r2, r3, #15
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4442      	add	r2, r8
 8004c16:	609a      	str	r2, [r3, #8]
}
 8004c18:	e7ff      	b.n	8004c1a <UART_SetConfig+0x6e2>
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c24:	40011000 	.word	0x40011000
 8004c28:	40011400 	.word	0x40011400
 8004c2c:	51eb851f 	.word	0x51eb851f

08004c30 <READ_EPS_BATTERY_VOLTAGE>:
/**
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(float* volt_ptr){
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 1; //battery voltage command
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004c40:	f107 0208 	add.w	r2, r7, #8
 8004c44:	7bbb      	ldrb	r3, [r7, #14]
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fdcb 	bl	80057e4 <EPS_READ>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <READ_EPS_BATTERY_VOLTAGE+0x2c>
        return status;
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	e014      	b.n	8004c86 <READ_EPS_BATTERY_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004c5c:	7a3b      	ldrb	r3, [r7, #8]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	7a7b      	ldrb	r3, [r7, #9]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 8004c6c:	89bb      	ldrh	r3, [r7, #12]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004c90 <READ_EPS_BATTERY_VOLTAGE+0x60>
 8004c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58
    return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	3b1951eb 	.word	0x3b1951eb

08004c94 <READ_EPS_BATTERY_CURRENT>:
/**
  * @brief Reads the current level of the EPS battery bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_CURRENT(float* curr_ptr){
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 2; //battery current command
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004ca4:	f107 0208 	add.w	r2, r7, #8
 8004ca8:	7bbb      	ldrb	r3, [r7, #14]
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fd99 	bl	80057e4 <EPS_READ>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <READ_EPS_BATTERY_CURRENT+0x2c>
        return status;
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	e014      	b.n	8004cea <READ_EPS_BATTERY_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004cc0:	7a3b      	ldrb	r3, [r7, #8]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	7a7b      	ldrb	r3, [r7, #9]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0030517578f * (float) raw_value; //multiply by the conversion coeff
 8004cd0:	89bb      	ldrh	r3, [r7, #12]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004cf4 <READ_EPS_BATTERY_CURRENT+0x60>
 8004cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0030517578f * 4095 = 12.497 A
    return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	3b480000 	.word	0x3b480000

08004cf8 <READ_EPS_SOLAR_X_VOLTAGE>:
/**
  * @brief Reads the voltage of the X-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_VOLTAGE(float* volt_ptr){
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 5; //solar panel x-axis voltage command
 8004d04:	2305      	movs	r3, #5
 8004d06:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004d08:	f107 0208 	add.w	r2, r7, #8
 8004d0c:	7bbb      	ldrb	r3, [r7, #14]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fd67 	bl	80057e4 <EPS_READ>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <READ_EPS_SOLAR_X_VOLTAGE+0x2c>
        return status;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	e014      	b.n	8004d4e <READ_EPS_SOLAR_X_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004d24:	7a3b      	ldrb	r3, [r7, #8]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	7a7b      	ldrb	r3, [r7, #9]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8004d34:	89bb      	ldrh	r3, [r7, #12]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004d58 <READ_EPS_SOLAR_X_VOLTAGE+0x60>
 8004d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	3b200000 	.word	0x3b200000

08004d5c <READ_EPS_SOLAR_X_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the X- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_NEG_CURRENT(float* curr_ptr){
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 6; //solar panel x- current command
 8004d68:	2306      	movs	r3, #6
 8004d6a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004d6c:	f107 0208 	add.w	r2, r7, #8
 8004d70:	7bbb      	ldrb	r3, [r7, #14]
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fd35 	bl	80057e4 <EPS_READ>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <READ_EPS_SOLAR_X_NEG_CURRENT+0x2c>
        return status;
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	e014      	b.n	8004db2 <READ_EPS_SOLAR_X_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004d88:	7a3b      	ldrb	r3, [r7, #8]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	7a7b      	ldrb	r3, [r7, #9]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8004d98:	89bb      	ldrh	r3, [r7, #12]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004dbc <READ_EPS_SOLAR_X_NEG_CURRENT+0x60>
 8004da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	3a200001 	.word	0x3a200001

08004dc0 <READ_EPS_SOLAR_X_POS_CURRENT>:
/**
  * @brief Reads the voltage of the X+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_POS_CURRENT(float* curr_ptr){
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 7; //solar panel x+ current command
 8004dcc:	2307      	movs	r3, #7
 8004dce:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004dd0:	f107 0208 	add.w	r2, r7, #8
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fd03 	bl	80057e4 <EPS_READ>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <READ_EPS_SOLAR_X_POS_CURRENT+0x2c>
        return status;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	e014      	b.n	8004e16 <READ_EPS_SOLAR_X_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004dec:	7a3b      	ldrb	r3, [r7, #8]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	7a7b      	ldrb	r3, [r7, #9]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8004dfc:	89bb      	ldrh	r3, [r7, #12]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004e20 <READ_EPS_SOLAR_X_POS_CURRENT+0x60>
 8004e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	3a200001 	.word	0x3a200001

08004e24 <READ_EPS_SOLAR_Y_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_VOLTAGE(float* volt_ptr){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 8; //solar panel y-axis voltage command
 8004e30:	2308      	movs	r3, #8
 8004e32:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004e34:	f107 0208 	add.w	r2, r7, #8
 8004e38:	7bbb      	ldrb	r3, [r7, #14]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fcd1 	bl	80057e4 <EPS_READ>
 8004e42:	4603      	mov	r3, r0
 8004e44:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <READ_EPS_SOLAR_Y_VOLTAGE+0x2c>
        return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	e014      	b.n	8004e7a <READ_EPS_SOLAR_Y_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004e50:	7a3b      	ldrb	r3, [r7, #8]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	7a7b      	ldrb	r3, [r7, #9]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8004e60:	89bb      	ldrh	r3, [r7, #12]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004e84 <READ_EPS_SOLAR_Y_VOLTAGE+0x60>
 8004e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	3b200000 	.word	0x3b200000

08004e88 <READ_EPS_SOLAR_Y_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Y- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_NEG_CURRENT(float* curr_ptr){
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 9; //solar panel y- current command
 8004e94:	2309      	movs	r3, #9
 8004e96:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004e98:	f107 0208 	add.w	r2, r7, #8
 8004e9c:	7bbb      	ldrb	r3, [r7, #14]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fc9f 	bl	80057e4 <EPS_READ>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x2c>
        return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	e014      	b.n	8004ede <READ_EPS_SOLAR_Y_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004eb4:	7a3b      	ldrb	r3, [r7, #8]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	7a7b      	ldrb	r3, [r7, #9]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8004ec4:	89bb      	ldrh	r3, [r7, #12]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004ee8 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x60>
 8004ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	3a200001 	.word	0x3a200001

08004eec <READ_EPS_SOLAR_Y_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Y+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_POS_CURRENT(float* curr_ptr){
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 10; //solar panel y+ current command
 8004ef8:	230a      	movs	r3, #10
 8004efa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004efc:	f107 0208 	add.w	r2, r7, #8
 8004f00:	7bbb      	ldrb	r3, [r7, #14]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fc6d 	bl	80057e4 <EPS_READ>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <READ_EPS_SOLAR_Y_POS_CURRENT+0x2c>
        return status;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	e014      	b.n	8004f42 <READ_EPS_SOLAR_Y_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004f18:	7a3b      	ldrb	r3, [r7, #8]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	7a7b      	ldrb	r3, [r7, #9]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8004f28:	89bb      	ldrh	r3, [r7, #12]
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f32:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f4c <READ_EPS_SOLAR_Y_POS_CURRENT+0x60>
 8004f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	3a200001 	.word	0x3a200001

08004f50 <READ_EPS_SOLAR_Z_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_VOLTAGE(float* volt_ptr){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 11; //solar panel z-axis voltage command
 8004f5c:	230b      	movs	r3, #11
 8004f5e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004f60:	f107 0208 	add.w	r2, r7, #8
 8004f64:	7bbb      	ldrb	r3, [r7, #14]
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fc3b 	bl	80057e4 <EPS_READ>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <READ_EPS_SOLAR_Z_VOLTAGE+0x2c>
        return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	e014      	b.n	8004fa6 <READ_EPS_SOLAR_Z_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004f7c:	7a3b      	ldrb	r3, [r7, #8]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	7a7b      	ldrb	r3, [r7, #9]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	4413      	add	r3, r2
 8004f8a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8004f8c:	89bb      	ldrh	r3, [r7, #12]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004fb0 <READ_EPS_SOLAR_Z_VOLTAGE+0x60>
 8004f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	3b200000 	.word	0x3b200000

08004fb4 <READ_EPS_SOLAR_Z_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Z- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_NEG_CURRENT(float* curr_ptr){
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 12; //solar panel z- current command
 8004fc0:	230c      	movs	r3, #12
 8004fc2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004fc4:	f107 0208 	add.w	r2, r7, #8
 8004fc8:	7bbb      	ldrb	r3, [r7, #14]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fc09 	bl	80057e4 <EPS_READ>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x2c>
        return status;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	e014      	b.n	800500a <READ_EPS_SOLAR_Z_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004fe0:	7a3b      	ldrb	r3, [r7, #8]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	7a7b      	ldrb	r3, [r7, #9]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4413      	add	r3, r2
 8004fee:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8004ff0:	89bb      	ldrh	r3, [r7, #12]
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005014 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x60>
 8004ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	3a200001 	.word	0x3a200001

08005018 <READ_EPS_SOLAR_Z_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Z+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_POS_CURRENT(float* curr_ptr){
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 13; //solar panel z+ current command
 8005024:	230d      	movs	r3, #13
 8005026:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005028:	f107 0208 	add.w	r2, r7, #8
 800502c:	7bbb      	ldrb	r3, [r7, #14]
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fbd7 	bl	80057e4 <EPS_READ>
 8005036:	4603      	mov	r3, r0
 8005038:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <READ_EPS_SOLAR_Z_POS_CURRENT+0x2c>
        return status;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	e014      	b.n	800506e <READ_EPS_SOLAR_Z_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005044:	7a3b      	ldrb	r3, [r7, #8]
 8005046:	b29b      	uxth	r3, r3
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	b29a      	uxth	r2, r3
 800504c:	7a7b      	ldrb	r3, [r7, #9]
 800504e:	b29b      	uxth	r3, r3
 8005050:	4413      	add	r3, r2
 8005052:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8005054:	89bb      	ldrh	r3, [r7, #12]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005078 <READ_EPS_SOLAR_Z_POS_CURRENT+0x60>
 8005062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	3a200001 	.word	0x3a200001

0800507c <READ_EPS_3V_CURRENT>:
/**
  * @brief Reads the current of the EPS 3.3v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_3V_CURRENT(float* curr_ptr){
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 14; //3.3v bus current command
 8005088:	230e      	movs	r3, #14
 800508a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800508c:	f107 0208 	add.w	r2, r7, #8
 8005090:	7bbb      	ldrb	r3, [r7, #14]
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fba5 	bl	80057e4 <EPS_READ>
 800509a:	4603      	mov	r3, r0
 800509c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <READ_EPS_3V_CURRENT+0x2c>
        return status;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	e014      	b.n	80050d2 <READ_EPS_3V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80050a8:	7a3b      	ldrb	r3, [r7, #8]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	7a7b      	ldrb	r3, [r7, #9]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	4413      	add	r3, r2
 80050b6:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 80050b8:	89bb      	ldrh	r3, [r7, #12]
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80050dc <READ_EPS_3V_CURRENT+0x60>
 80050c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	3b055555 	.word	0x3b055555

080050e0 <READ_EPS_5V_CURRENT>:
/**
  * @brief Reads the current of the EPS 5v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_5V_CURRENT(float* curr_ptr){
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 15; //5v bus current command
 80050ec:	230f      	movs	r3, #15
 80050ee:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80050f0:	f107 0208 	add.w	r2, r7, #8
 80050f4:	7bbb      	ldrb	r3, [r7, #14]
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fb73 	bl	80057e4 <EPS_READ>
 80050fe:	4603      	mov	r3, r0
 8005100:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <READ_EPS_5V_CURRENT+0x2c>
        return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	e014      	b.n	8005136 <READ_EPS_5V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800510c:	7a3b      	ldrb	r3, [r7, #8]
 800510e:	b29b      	uxth	r3, r3
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	b29a      	uxth	r2, r3
 8005114:	7a7b      	ldrb	r3, [r7, #9]
 8005116:	b29b      	uxth	r3, r3
 8005118:	4413      	add	r3, r2
 800511a:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 800511c:	89bb      	ldrh	r3, [r7, #12]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005140 <READ_EPS_5V_CURRENT+0x60>
 800512a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	3b055555 	.word	0x3b055555

08005144 <READ_EPS_MCU_TEMP>:
/**
  * @brief Reads the temperature of the EPS microcontroller in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_MCU_TEMP(float* temp_ptr){
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 18; //MCU temperature command
 8005150:	2312      	movs	r3, #18
 8005152:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005154:	f107 0208 	add.w	r2, r7, #8
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	4611      	mov	r1, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fb41 	bl	80057e4 <EPS_READ>
 8005162:	4603      	mov	r3, r0
 8005164:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <READ_EPS_MCU_TEMP+0x2c>
        return status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	e01c      	b.n	80051aa <READ_EPS_MCU_TEMP+0x66>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005170:	7a3b      	ldrb	r3, [r7, #8]
 8005172:	b29b      	uxth	r3, r3
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	b29a      	uxth	r2, r3
 8005178:	7a7b      	ldrb	r3, [r7, #9]
 800517a:	b29b      	uxth	r3, r3
 800517c:	4413      	add	r3, r2
 800517e:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = (((float) raw_value * 0.0006103516f) - 0.986f) / 0.00355f;
 8005180:	89bb      	ldrh	r3, [r7, #12]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80051b4 <READ_EPS_MCU_TEMP+0x70>
 800518e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005192:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80051b8 <READ_EPS_MCU_TEMP+0x74>
 8005196:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800519a:	eddf 6a08 	vldr	s13, [pc, #32]	; 80051bc <READ_EPS_MCU_TEMP+0x78>
 800519e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	3a200001 	.word	0x3a200001
 80051b8:	3f7c6a7f 	.word	0x3f7c6a7f
 80051bc:	3b68a71e 	.word	0x3b68a71e

080051c0 <READ_EPS_BATT_1_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 1 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_1_TEMP(float* temp_ptr){
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 19; //battery cell 1 temperature command
 80051cc:	2313      	movs	r3, #19
 80051ce:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80051d0:	f107 0208 	add.w	r2, r7, #8
 80051d4:	7bbb      	ldrb	r3, [r7, #14]
 80051d6:	4611      	mov	r1, r2
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fb03 	bl	80057e4 <EPS_READ>
 80051de:	4603      	mov	r3, r0
 80051e0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <READ_EPS_BATT_1_TEMP+0x2c>
        return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	e014      	b.n	8005216 <READ_EPS_BATT_1_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80051ec:	7a3b      	ldrb	r3, [r7, #8]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	7a7b      	ldrb	r3, [r7, #9]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80051fc:	89bb      	ldrh	r3, [r7, #12]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005220 <READ_EPS_BATT_1_TEMP+0x60>
 800520a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	3b800000 	.word	0x3b800000

08005224 <READ_EPS_BATT_2_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 2 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_2_TEMP(float* temp_ptr){
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 20; //battery cell 2 temperature command
 8005230:	2314      	movs	r3, #20
 8005232:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005234:	f107 0208 	add.w	r2, r7, #8
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fad1 	bl	80057e4 <EPS_READ>
 8005242:	4603      	mov	r3, r0
 8005244:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <READ_EPS_BATT_2_TEMP+0x2c>
        return status;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	e014      	b.n	800527a <READ_EPS_BATT_2_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005250:	7a3b      	ldrb	r3, [r7, #8]
 8005252:	b29b      	uxth	r3, r3
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	b29a      	uxth	r2, r3
 8005258:	7a7b      	ldrb	r3, [r7, #9]
 800525a:	b29b      	uxth	r3, r3
 800525c:	4413      	add	r3, r2
 800525e:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8005260:	89bb      	ldrh	r3, [r7, #12]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005284 <READ_EPS_BATT_2_TEMP+0x60>
 800526e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	3b800000 	.word	0x3b800000

08005288 <READ_EPS_BATT_3_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 3 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_3_TEMP(float* temp_ptr){
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 21; //battery cell 3 temperature command
 8005294:	2315      	movs	r3, #21
 8005296:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005298:	f107 0208 	add.w	r2, r7, #8
 800529c:	7bbb      	ldrb	r3, [r7, #14]
 800529e:	4611      	mov	r1, r2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fa9f 	bl	80057e4 <EPS_READ>
 80052a6:	4603      	mov	r3, r0
 80052a8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <READ_EPS_BATT_3_TEMP+0x2c>
        return status;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	e014      	b.n	80052de <READ_EPS_BATT_3_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80052b4:	7a3b      	ldrb	r3, [r7, #8]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	7a7b      	ldrb	r3, [r7, #9]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	4413      	add	r3, r2
 80052c2:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80052c4:	89bb      	ldrh	r3, [r7, #12]
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80052e8 <READ_EPS_BATT_3_TEMP+0x60>
 80052d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	3b800000 	.word	0x3b800000

080052ec <READ_EPS_BATT_4_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 4 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_4_TEMP(float* temp_ptr){
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 22; //battery cell 4 temperature command
 80052f8:	2316      	movs	r3, #22
 80052fa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80052fc:	f107 0208 	add.w	r2, r7, #8
 8005300:	7bbb      	ldrb	r3, [r7, #14]
 8005302:	4611      	mov	r1, r2
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fa6d 	bl	80057e4 <EPS_READ>
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <READ_EPS_BATT_4_TEMP+0x2c>
        return status;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	e014      	b.n	8005342 <READ_EPS_BATT_4_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005318:	7a3b      	ldrb	r3, [r7, #8]
 800531a:	b29b      	uxth	r3, r3
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	b29a      	uxth	r2, r3
 8005320:	7a7b      	ldrb	r3, [r7, #9]
 8005322:	b29b      	uxth	r3, r3
 8005324:	4413      	add	r3, r2
 8005326:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8005328:	89bb      	ldrh	r3, [r7, #12]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800534c <READ_EPS_BATT_4_TEMP+0x60>
 8005336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	3b800000 	.word	0x3b800000

08005350 <READ_EPS_INPUT_CONDITION>:
/**
  * @brief Reads raw return value of the Input Condition command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_INPUT_CONDITION(uint16_t *cond_ptr){
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 23; //input conditions command
 800535c:	2317      	movs	r3, #23
 800535e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005360:	f107 020c 	add.w	r2, r7, #12
 8005364:	7bbb      	ldrb	r3, [r7, #14]
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fa3b 	bl	80057e4 <EPS_READ>
 800536e:	4603      	mov	r3, r0
 8005370:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <READ_EPS_INPUT_CONDITION+0x2c>
        return status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	e00a      	b.n	8005392 <READ_EPS_INPUT_CONDITION+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800537c:	7b3b      	ldrb	r3, [r7, #12]
 800537e:	b29b      	uxth	r3, r3
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	b29a      	uxth	r2, r3
 8005384:	7b7b      	ldrb	r3, [r7, #13]
 8005386:	b29b      	uxth	r3, r3
 8005388:	4413      	add	r3, r2
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	801a      	strh	r2, [r3, #0]
    return status;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <READ_EPS_OUTPUT_CONDITION1>:
/**
  * @brief Reads raw return value of the Output Condition 1 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION1(uint16_t *cond_ptr){
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80053a2:	2301      	movs	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 80053a6:	2318      	movs	r3, #24
 80053a8:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80053aa:	f107 020c 	add.w	r2, r7, #12
 80053ae:	7bbb      	ldrb	r3, [r7, #14]
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fa16 	bl	80057e4 <EPS_READ>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <READ_EPS_OUTPUT_CONDITION1+0x2c>
        return status;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	e00a      	b.n	80053dc <READ_EPS_OUTPUT_CONDITION1+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80053c6:	7b3b      	ldrb	r3, [r7, #12]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	7b7b      	ldrb	r3, [r7, #13]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	801a      	strh	r2, [r3, #0]
    return status;
 80053da:	7bfb      	ldrb	r3, [r7, #15]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <READ_EPS_OUTPUT_CONDITION2>:
/**
  * @brief Reads raw return value of the Output Condition 2 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION2(uint16_t *cond_ptr){
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 80053f0:	2318      	movs	r3, #24
 80053f2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80053f4:	f107 020c 	add.w	r2, r7, #12
 80053f8:	7bbb      	ldrb	r3, [r7, #14]
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f9f1 	bl	80057e4 <EPS_READ>
 8005402:	4603      	mov	r3, r0
 8005404:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <READ_EPS_OUTPUT_CONDITION2+0x2c>
        return status;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	e00a      	b.n	8005426 <READ_EPS_OUTPUT_CONDITION2+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005410:	7b3b      	ldrb	r3, [r7, #12]
 8005412:	b29b      	uxth	r3, r3
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	b29a      	uxth	r2, r3
 8005418:	7b7b      	ldrb	r3, [r7, #13]
 800541a:	b29b      	uxth	r3, r3
 800541c:	4413      	add	r3, r2
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	801a      	strh	r2, [r3, #0]
    return status;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <READ_EPS_POWER_ON_CYCLES>:
/**
  * @brief Reads the current count of EPS power cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_POWER_ON_CYCLES(uint16_t *count_ptr){
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 26; //power on cycles count command
 800543a:	231a      	movs	r3, #26
 800543c:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800543e:	f107 020c 	add.w	r2, r7, #12
 8005442:	7bbb      	ldrb	r3, [r7, #14]
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f9cc 	bl	80057e4 <EPS_READ>
 800544c:	4603      	mov	r3, r0
 800544e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <READ_EPS_POWER_ON_CYCLES+0x2c>
        return status;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	e00a      	b.n	8005470 <READ_EPS_POWER_ON_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800545a:	7b3b      	ldrb	r3, [r7, #12]
 800545c:	b29b      	uxth	r3, r3
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	b29a      	uxth	r2, r3
 8005462:	7b7b      	ldrb	r3, [r7, #13]
 8005464:	b29b      	uxth	r3, r3
 8005466:	4413      	add	r3, r2
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	801a      	strh	r2, [r3, #0]
    return status;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <READ_EPS_UNDER_VOLT_COUNT>:
/**
  * @brief Reads the current count of EPS under-voltage occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_UNDER_VOLT_COUNT(uint16_t *count_ptr){
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 27; //under voltage count command
 8005484:	231b      	movs	r3, #27
 8005486:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005488:	f107 020c 	add.w	r2, r7, #12
 800548c:	7bbb      	ldrb	r3, [r7, #14]
 800548e:	4611      	mov	r1, r2
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f9a7 	bl	80057e4 <EPS_READ>
 8005496:	4603      	mov	r3, r0
 8005498:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <READ_EPS_UNDER_VOLT_COUNT+0x2c>
        return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	e00a      	b.n	80054ba <READ_EPS_UNDER_VOLT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80054a4:	7b3b      	ldrb	r3, [r7, #12]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	7b7b      	ldrb	r3, [r7, #13]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	801a      	strh	r2, [r3, #0]
    return status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <READ_EPS_SHORT_CIRCUIT_COUNT>:
/**
  * @brief Reads the current count of EPS short-circuit occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SHORT_CIRCUIT_COUNT(uint16_t *count_ptr){
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80054ca:	2301      	movs	r3, #1
 80054cc:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 28; //short circuit count command
 80054ce:	231c      	movs	r3, #28
 80054d0:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80054d2:	f107 020c 	add.w	r2, r7, #12
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	4611      	mov	r1, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f982 	bl	80057e4 <EPS_READ>
 80054e0:	4603      	mov	r3, r0
 80054e2:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <READ_EPS_SHORT_CIRCUIT_COUNT+0x2c>
        return status;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	e00a      	b.n	8005504 <READ_EPS_SHORT_CIRCUIT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80054ee:	7b3b      	ldrb	r3, [r7, #12]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	7b7b      	ldrb	r3, [r7, #13]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	801a      	strh	r2, [r3, #0]
    return status;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <READ_EPS_OVER_TEMP_COUNT>:
/**
  * @brief Reads the current count of EPS over-temp occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OVER_TEMP_COUNT(uint16_t *count_ptr){
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 29; //over temperature count command
 8005518:	231d      	movs	r3, #29
 800551a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800551c:	f107 020c 	add.w	r2, r7, #12
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	4611      	mov	r1, r2
 8005524:	4618      	mov	r0, r3
 8005526:	f000 f95d 	bl	80057e4 <EPS_READ>
 800552a:	4603      	mov	r3, r0
 800552c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <READ_EPS_OVER_TEMP_COUNT+0x2c>
        return status;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	e00a      	b.n	800554e <READ_EPS_OVER_TEMP_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005538:	7b3b      	ldrb	r3, [r7, #12]
 800553a:	b29b      	uxth	r3, r3
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	b29a      	uxth	r2, r3
 8005540:	7b7b      	ldrb	r3, [r7, #13]
 8005542:	b29b      	uxth	r3, r3
 8005544:	4413      	add	r3, r2
 8005546:	b29a      	uxth	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	801a      	strh	r2, [r3, #0]
    return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <READ_EPS_CHARGE_CYCLES>:
/**
  * @brief Reads the current count of EPS battery charge cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_CHARGE_CYCLES(uint16_t *count_ptr){
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 48; //charging cycles count command
 8005562:	2330      	movs	r3, #48	; 0x30
 8005564:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005566:	f107 020c 	add.w	r2, r7, #12
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	4611      	mov	r1, r2
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f938 	bl	80057e4 <EPS_READ>
 8005574:	4603      	mov	r3, r0
 8005576:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <READ_EPS_CHARGE_CYCLES+0x2c>
        return status;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	e00a      	b.n	8005598 <READ_EPS_CHARGE_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005582:	7b3b      	ldrb	r3, [r7, #12]
 8005584:	b29b      	uxth	r3, r3
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	b29a      	uxth	r2, r3
 800558a:	7b7b      	ldrb	r3, [r7, #13]
 800558c:	b29b      	uxth	r3, r3
 800558e:	4413      	add	r3, r2
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	801a      	strh	r2, [r3, #0]
    return status;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <READ_EPS_DEFAULTS1>:
/**
  * @brief Reads the default values of LUPs and fast charge modes and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS1(uint16_t *default_ptr){
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 43; //output 1 default value command
 80055ac:	232b      	movs	r3, #43	; 0x2b
 80055ae:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80055b0:	f107 020c 	add.w	r2, r7, #12
 80055b4:	7bbb      	ldrb	r3, [r7, #14]
 80055b6:	4611      	mov	r1, r2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 f913 	bl	80057e4 <EPS_READ>
 80055be:	4603      	mov	r3, r0
 80055c0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <READ_EPS_DEFAULTS1+0x2c>
        return status;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	e00a      	b.n	80055e2 <READ_EPS_DEFAULTS1+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80055cc:	7b3b      	ldrb	r3, [r7, #12]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	7b7b      	ldrb	r3, [r7, #13]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	4413      	add	r3, r2
 80055da:	b29a      	uxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	801a      	strh	r2, [r3, #0]
    return status;
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <READ_EPS_DEFAULTS2>:
/**
  * @brief Reads the default values of OUT1-OUT6 and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS2(uint16_t *default_ptr){
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 44; //output 3 default value command
 80055f6:	232c      	movs	r3, #44	; 0x2c
 80055f8:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80055fa:	f107 020c 	add.w	r2, r7, #12
 80055fe:	7bbb      	ldrb	r3, [r7, #14]
 8005600:	4611      	mov	r1, r2
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f8ee 	bl	80057e4 <EPS_READ>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <READ_EPS_DEFAULTS2+0x2c>
        return status;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	e00a      	b.n	800562c <READ_EPS_DEFAULTS2+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005616:	7b3b      	ldrb	r3, [r7, #12]
 8005618:	b29b      	uxth	r3, r3
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	b29a      	uxth	r2, r3
 800561e:	7b7b      	ldrb	r3, [r7, #13]
 8005620:	b29b      	uxth	r3, r3
 8005622:	4413      	add	r3, r2
 8005624:	b29a      	uxth	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	801a      	strh	r2, [r3, #0]
    return status;
 800562a:	7bfb      	ldrb	r3, [r7, #15]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <enable_EPS_Vbatt_Bus>:


/********************************************** WRITE FUNCTIONS **********************************************************************************/
HAL_StatusTypeDef enable_EPS_Vbatt_Bus(){
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 1); //turn command 1 to the ON state
 8005638:	2101      	movs	r1, #1
 800563a:	2001      	movs	r0, #1
 800563c:	f000 f8fc 	bl	8005838 <EPS_WRITE>
 8005640:	4603      	mov	r3, r0
}
 8005642:	4618      	mov	r0, r3
 8005644:	bd80      	pop	{r7, pc}

08005646 <disable_EPS_Vbatt_Bus>:

HAL_StatusTypeDef disable_EPS_Vbatt_Bus(){
 8005646:	b580      	push	{r7, lr}
 8005648:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 0); //turn command 1 to the OFF state
 800564a:	2100      	movs	r1, #0
 800564c:	2001      	movs	r0, #1
 800564e:	f000 f8f3 	bl	8005838 <EPS_WRITE>
 8005652:	4603      	mov	r3, r0
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}

08005658 <enable_EPS_5v_Bus>:

HAL_StatusTypeDef enable_EPS_5v_Bus(){
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 1); //turn command 4 to the ON state
 800565c:	2101      	movs	r1, #1
 800565e:	2004      	movs	r0, #4
 8005660:	f000 f8ea 	bl	8005838 <EPS_WRITE>
 8005664:	4603      	mov	r3, r0
}
 8005666:	4618      	mov	r0, r3
 8005668:	bd80      	pop	{r7, pc}

0800566a <disable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_5v_Bus(){
 800566a:	b580      	push	{r7, lr}
 800566c:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 0); //turn command 4 to the OFF state
 800566e:	2100      	movs	r1, #0
 8005670:	2004      	movs	r0, #4
 8005672:	f000 f8e1 	bl	8005838 <EPS_WRITE>
 8005676:	4603      	mov	r3, r0
}
 8005678:	4618      	mov	r0, r3
 800567a:	bd80      	pop	{r7, pc}

0800567c <enable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_LUP_3v(){
    return EPS_WRITE(5, 0); //turn command 5 to the OFF state
}

HAL_StatusTypeDef enable_EPS_Fast_Charge1(){
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 1); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8005680:	2101      	movs	r1, #1
 8005682:	2008      	movs	r0, #8
 8005684:	f000 f8d8 	bl	8005838 <EPS_WRITE>
 8005688:	4603      	mov	r3, r0
}
 800568a:	4618      	mov	r0, r3
 800568c:	bd80      	pop	{r7, pc}

0800568e <disable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_Fast_Charge1(){
 800568e:	b580      	push	{r7, lr}
 8005690:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 0); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8005692:	2100      	movs	r1, #0
 8005694:	2008      	movs	r0, #8
 8005696:	f000 f8cf 	bl	8005838 <EPS_WRITE>
 800569a:	4603      	mov	r3, r0
}
 800569c:	4618      	mov	r0, r3
 800569e:	bd80      	pop	{r7, pc}

080056a0 <enable_EPS_Fast_Charge2>:

HAL_StatusTypeDef enable_EPS_Fast_Charge2(){
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 1); //turn command 9 to the ON state (HIGH = Fast?, LOW = Slow?)
 80056a4:	2101      	movs	r1, #1
 80056a6:	2009      	movs	r0, #9
 80056a8:	f000 f8c6 	bl	8005838 <EPS_WRITE>
 80056ac:	4603      	mov	r3, r0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <disable_EPS_Fast_Charge2>:

HAL_StatusTypeDef disable_EPS_Fast_Charge2(){
 80056b2:	b580      	push	{r7, lr}
 80056b4:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 0); //turn command 9 to the OFF state (HIGH = Fast?, LOW = Slow?)
 80056b6:	2100      	movs	r1, #0
 80056b8:	2009      	movs	r0, #9
 80056ba:	f000 f8bd 	bl	8005838 <EPS_WRITE>
 80056be:	4603      	mov	r3, r0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <enable_EPS_Output_1>:

HAL_StatusTypeDef enable_EPS_Output_1(){
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 1); //turn command 10 to the ON state
 80056c8:	2101      	movs	r1, #1
 80056ca:	200a      	movs	r0, #10
 80056cc:	f000 f8b4 	bl	8005838 <EPS_WRITE>
 80056d0:	4603      	mov	r3, r0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <disable_EPS_Output_1>:

HAL_StatusTypeDef disable_EPS_Output_1(){
 80056d6:	b580      	push	{r7, lr}
 80056d8:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 0); //turn command 10 to the OFF state
 80056da:	2100      	movs	r1, #0
 80056dc:	200a      	movs	r0, #10
 80056de:	f000 f8ab 	bl	8005838 <EPS_WRITE>
 80056e2:	4603      	mov	r3, r0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <enable_EPS_Output_2>:

HAL_StatusTypeDef enable_EPS_Output_2(){
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 1); //turn command 11 to the ON state
 80056ec:	2101      	movs	r1, #1
 80056ee:	200b      	movs	r0, #11
 80056f0:	f000 f8a2 	bl	8005838 <EPS_WRITE>
 80056f4:	4603      	mov	r3, r0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	bd80      	pop	{r7, pc}

080056fa <disable_EPS_Output_2>:

HAL_StatusTypeDef disable_EPS_Output_2(){
 80056fa:	b580      	push	{r7, lr}
 80056fc:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 0); //turn command 11 to the OFF state
 80056fe:	2100      	movs	r1, #0
 8005700:	200b      	movs	r0, #11
 8005702:	f000 f899 	bl	8005838 <EPS_WRITE>
 8005706:	4603      	mov	r3, r0
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}

0800570c <enable_EPS_Output_3>:

HAL_StatusTypeDef enable_EPS_Output_3(){
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 1); //turn command 12 to the ON state
 8005710:	2101      	movs	r1, #1
 8005712:	200c      	movs	r0, #12
 8005714:	f000 f890 	bl	8005838 <EPS_WRITE>
 8005718:	4603      	mov	r3, r0
}
 800571a:	4618      	mov	r0, r3
 800571c:	bd80      	pop	{r7, pc}

0800571e <disable_EPS_Output_3>:

HAL_StatusTypeDef disable_EPS_Output_3(){
 800571e:	b580      	push	{r7, lr}
 8005720:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 0); //turn command 12 to the OFF state
 8005722:	2100      	movs	r1, #0
 8005724:	200c      	movs	r0, #12
 8005726:	f000 f887 	bl	8005838 <EPS_WRITE>
 800572a:	4603      	mov	r3, r0
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}

08005730 <enable_EPS_Output_5>:

HAL_StatusTypeDef enable_EPS_Output_5(){
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 1); //turn command 14 to the ON state
 8005734:	2101      	movs	r1, #1
 8005736:	200e      	movs	r0, #14
 8005738:	f000 f87e 	bl	8005838 <EPS_WRITE>
 800573c:	4603      	mov	r3, r0
}
 800573e:	4618      	mov	r0, r3
 8005740:	bd80      	pop	{r7, pc}

08005742 <disable_EPS_Output_5>:

HAL_StatusTypeDef disable_EPS_Output_5(){
 8005742:	b580      	push	{r7, lr}
 8005744:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 0); //turn command 14 to the OFF state
 8005746:	2100      	movs	r1, #0
 8005748:	200e      	movs	r0, #14
 800574a:	f000 f875 	bl	8005838 <EPS_WRITE>
 800574e:	4603      	mov	r3, r0
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}

08005754 <enable_EPS_Output_6>:

HAL_StatusTypeDef enable_EPS_Output_6(){
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 1); //turn command 15 to the ON state
 8005758:	2101      	movs	r1, #1
 800575a:	200f      	movs	r0, #15
 800575c:	f000 f86c 	bl	8005838 <EPS_WRITE>
 8005760:	4603      	mov	r3, r0
}
 8005762:	4618      	mov	r0, r3
 8005764:	bd80      	pop	{r7, pc}

08005766 <disable_EPS_Output_6>:

HAL_StatusTypeDef disable_EPS_Output_6(){
 8005766:	b580      	push	{r7, lr}
 8005768:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 0); //turn command 15 to the OFF state
 800576a:	2100      	movs	r1, #0
 800576c:	200f      	movs	r0, #15
 800576e:	f000 f863 	bl	8005838 <EPS_WRITE>
 8005772:	4603      	mov	r3, r0
}
 8005774:	4618      	mov	r0, r3
 8005776:	bd80      	pop	{r7, pc}

08005778 <enable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_1(){
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 1); //turn command 16 to the ON state
 800577c:	2101      	movs	r1, #1
 800577e:	2010      	movs	r0, #16
 8005780:	f000 f85a 	bl	8005838 <EPS_WRITE>
 8005784:	4603      	mov	r3, r0
}
 8005786:	4618      	mov	r0, r3
 8005788:	bd80      	pop	{r7, pc}

0800578a <disable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_1(){
 800578a:	b580      	push	{r7, lr}
 800578c:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 0); //turn command 16 to the OFF state
 800578e:	2100      	movs	r1, #0
 8005790:	2010      	movs	r0, #16
 8005792:	f000 f851 	bl	8005838 <EPS_WRITE>
 8005796:	4603      	mov	r3, r0
}
 8005798:	4618      	mov	r0, r3
 800579a:	bd80      	pop	{r7, pc}

0800579c <enable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_2(){
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 1); //turn command 17 to the ON state
 80057a0:	2101      	movs	r1, #1
 80057a2:	2011      	movs	r0, #17
 80057a4:	f000 f848 	bl	8005838 <EPS_WRITE>
 80057a8:	4603      	mov	r3, r0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	bd80      	pop	{r7, pc}

080057ae <disable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_2(){
 80057ae:	b580      	push	{r7, lr}
 80057b0:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 0); //turn command 17 to the OFF state
 80057b2:	2100      	movs	r1, #0
 80057b4:	2011      	movs	r0, #17
 80057b6:	f000 f83f 	bl	8005838 <EPS_WRITE>
 80057ba:	4603      	mov	r3, r0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	bd80      	pop	{r7, pc}

080057c0 <enable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_3(){
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 1); //turn command 18 to the ON state
 80057c4:	2101      	movs	r1, #1
 80057c6:	2012      	movs	r0, #18
 80057c8:	f000 f836 	bl	8005838 <EPS_WRITE>
 80057cc:	4603      	mov	r3, r0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <disable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_3(){
 80057d2:	b580      	push	{r7, lr}
 80057d4:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 0); //turn command 18 to the OFF state
 80057d6:	2100      	movs	r1, #0
 80057d8:	2012      	movs	r0, #18
 80057da:	f000 f82d 	bl	8005838 <EPS_WRITE>
 80057de:	4603      	mov	r3, r0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <EPS_READ>:
  * @brief Sends a write command to the EPS module over a given I2C instance and reads back a response
  * @param command : the command to be used on the transceiver
  * @param data_ptr : A pointer to allow information from the health check to be viewed.
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_READ(uint8_t command, uint8_t* data_ptr){
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	4603      	mov	r3, r0
 80057ec:	6039      	str	r1, [r7, #0]
 80057ee:	71fb      	strb	r3, [r7, #7]
        HAL_StatusTypeDef status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 80057f4:	1dfa      	adds	r2, r7, #7
 80057f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	2301      	movs	r3, #1
 80057fe:	2130      	movs	r1, #48	; 0x30
 8005800:	480c      	ldr	r0, [pc, #48]	; (8005834 <EPS_READ+0x50>)
 8005802:	f7fb fb75 	bl	8000ef0 <HAL_I2C_Master_Transmit>
 8005806:	4603      	mov	r3, r0
 8005808:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK){
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <EPS_READ+0x30>
            return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	e00b      	b.n	800582c <EPS_READ+0x48>
        }
        status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 8005814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2302      	movs	r3, #2
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	2130      	movs	r1, #48	; 0x30
 8005820:	4804      	ldr	r0, [pc, #16]	; (8005834 <EPS_READ+0x50>)
 8005822:	f7fb fc63 	bl	80010ec <HAL_I2C_Master_Receive>
 8005826:	4603      	mov	r3, r0
 8005828:	73fb      	strb	r3, [r7, #15]
        return status;
 800582a:	7bfb      	ldrb	r3, [r7, #15]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	200000a0 	.word	0x200000a0

08005838 <EPS_WRITE>:
/**
  * @brief Sends a write command to the EPS module over a given I2C instance
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(uint8_t command, uint8_t state){
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af02      	add	r7, sp, #8
 800583e:	4603      	mov	r3, r0
 8005840:	460a      	mov	r2, r1
 8005842:	71fb      	strb	r3, [r7, #7]
 8005844:	4613      	mov	r3, r2
 8005846:	71bb      	strb	r3, [r7, #6]
        HAL_StatusTypeDef status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
        uint8_t data[2];
        data[0] = command;
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	733b      	strb	r3, [r7, #12]
        data[1] = state;
 8005850:	79bb      	ldrb	r3, [r7, #6]
 8005852:	737b      	strb	r3, [r7, #13]
        status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT);
 8005854:	f107 020c 	add.w	r2, r7, #12
 8005858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2302      	movs	r3, #2
 8005860:	2130      	movs	r1, #48	; 0x30
 8005862:	4805      	ldr	r0, [pc, #20]	; (8005878 <EPS_WRITE+0x40>)
 8005864:	f7fb fb44 	bl	8000ef0 <HAL_I2C_Master_Transmit>
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
        return status;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200000a0 	.word	0x200000a0

0800587c <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = packet[1];
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	733b      	strb	r3, [r7, #12]
    cySatPacket.Command = packet[2];
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	789b      	ldrb	r3, [r3, #2]
 8005890:	737b      	strb	r3, [r7, #13]
    cySatPacket.Data_Length = packet[3];
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	78db      	ldrb	r3, [r3, #3]
 8005896:	73bb      	strb	r3, [r7, #14]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * cySatPacket.Data_Length);
 8005898:	7bbb      	ldrb	r3, [r7, #14]
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fc6a 	bl	8007174 <malloc>
 80058a0:	4603      	mov	r3, r0
 80058a2:	613b      	str	r3, [r7, #16]
    memcpy(cySatPacket.Data, packet+4, cySatPacket.Data_Length);
 80058a4:	6938      	ldr	r0, [r7, #16]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	3304      	adds	r3, #4
 80058aa:	7bba      	ldrb	r2, [r7, #14]
 80058ac:	4619      	mov	r1, r3
 80058ae:	f001 fc71 	bl	8007194 <memcpy>
    cySatPacket.Checksum = packet[cySatPacket.Data_Length+4];
 80058b2:	7bbb      	ldrb	r3, [r7, #14]
 80058b4:	3304      	adds	r3, #4
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	4413      	add	r3, r2
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	753b      	strb	r3, [r7, #20]
    return cySatPacket;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	461c      	mov	r4, r3
 80058c2:	f107 030c 	add.w	r3, r7, #12
 80058c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd90      	pop	{r4, r7, pc}
	...

080058d8 <sendCySatPacket>:
 * @brief Takes in a packet and sends it to the Ground Station via UART serial connection
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendCySatPacket(CySat_Packet_t packet){
 80058d8:	b5b0      	push	{r4, r5, r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80058e4:	466b      	mov	r3, sp
 80058e6:	461d      	mov	r5, r3
    uint8_t message[packet.Data_Length + 5];
 80058e8:	79bb      	ldrb	r3, [r7, #6]
 80058ea:	1d58      	adds	r0, r3, #5
 80058ec:	1e43      	subs	r3, r0, #1
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	4603      	mov	r3, r0
 80058f2:	4619      	mov	r1, r3
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	f04f 0400 	mov.w	r4, #0
 8005900:	00d4      	lsls	r4, r2, #3
 8005902:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005906:	00cb      	lsls	r3, r1, #3
 8005908:	4603      	mov	r3, r0
 800590a:	4619      	mov	r1, r3
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	f04f 0400 	mov.w	r4, #0
 8005918:	00d4      	lsls	r4, r2, #3
 800591a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800591e:	00cb      	lsls	r3, r1, #3
 8005920:	4603      	mov	r3, r0
 8005922:	3307      	adds	r3, #7
 8005924:	08db      	lsrs	r3, r3, #3
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	ebad 0d03 	sub.w	sp, sp, r3
 800592c:	466b      	mov	r3, sp
 800592e:	3300      	adds	r3, #0
 8005930:	617b      	str	r3, [r7, #20]

    //build byte array
    message[0] = 0xFF; //start byte
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 8005938:	793a      	ldrb	r2, [r7, #4]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	705a      	strb	r2, [r3, #1]
    message[2] = packet.Command;
 800593e:	797a      	ldrb	r2, [r7, #5]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	709a      	strb	r2, [r3, #2]
    message[3] = packet.Data_Length;
 8005944:	79ba      	ldrb	r2, [r7, #6]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	70da      	strb	r2, [r3, #3]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	e00a      	b.n	8005966 <sendCySatPacket+0x8e>
        message[i + 4] = packet.Data[i];
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	441a      	add	r2, r3
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	3304      	adds	r3, #4
 800595a:	7811      	ldrb	r1, [r2, #0]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < packet.Data_Length; i++){
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	3301      	adds	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	79bb      	ldrb	r3, [r7, #6]
 8005968:	461a      	mov	r2, r3
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4293      	cmp	r3, r2
 800596e:	dbef      	blt.n	8005950 <sendCySatPacket+0x78>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8005970:	79bb      	ldrb	r3, [r7, #6]
 8005972:	3304      	adds	r3, #4
 8005974:	7b39      	ldrb	r1, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	79bb      	ldrb	r3, [r7, #6]
 800597e:	b29b      	uxth	r3, r3
 8005980:	3305      	adds	r3, #5
 8005982:	b29a      	uxth	r2, r3
 8005984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005988:	4808      	ldr	r0, [pc, #32]	; (80059ac <sendCySatPacket+0xd4>)
 800598a:	f7fe fa48 	bl	8003e1e <HAL_UART_Transmit>
 800598e:	4603      	mov	r3, r0
 8005990:	74fb      	strb	r3, [r7, #19]
    if(status != HAL_OK){
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <sendCySatPacket+0xc6>
        return -1;
 8005998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800599c:	e000      	b.n	80059a0 <sendCySatPacket+0xc8>
    }
    return 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	46ad      	mov	sp, r5
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bdb0      	pop	{r4, r5, r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000104 	.word	0x20000104

080059b0 <sendErrorPacket>:
/**
 * @brief This function sends an error packet to the Ground Station
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendErrorPacket(){
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 80059b6:	230a      	movs	r3, #10
 80059b8:	713b      	strb	r3, [r7, #4]
    cySatPacket.Command = 0xFF;
 80059ba:	23ff      	movs	r3, #255	; 0xff
 80059bc:	717b      	strb	r3, [r7, #5]
    cySatPacket.Data_Length = 0x02;
 80059be:	2302      	movs	r3, #2
 80059c0:	71bb      	strb	r3, [r7, #6]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 80059c2:	2002      	movs	r0, #2
 80059c4:	f001 fbd6 	bl	8007174 <malloc>
 80059c8:	4603      	mov	r3, r0
 80059ca:	60bb      	str	r3, [r7, #8]
    cySatPacket.Data[0] = 0xFF;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	22ff      	movs	r2, #255	; 0xff
 80059d0:	701a      	strb	r2, [r3, #0]
    cySatPacket.Data[1] = 0xFF;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	3301      	adds	r3, #1
 80059d6:	22ff      	movs	r2, #255	; 0xff
 80059d8:	701a      	strb	r2, [r3, #0]
    cySatPacket.Checksum = generateCySatChecksum(cySatPacket);
 80059da:	1d3b      	adds	r3, r7, #4
 80059dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059e0:	f000 fecc 	bl	800677c <generateCySatChecksum>
 80059e4:	4603      	mov	r3, r0
 80059e6:	733b      	strb	r3, [r7, #12]
    return sendCySatPacket(cySatPacket);
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059ee:	f7ff ff73 	bl	80058d8 <sendCySatPacket>
 80059f2:	4603      	mov	r3, r0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b0a9      	sub	sp, #164	; 0xa4
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    HAL_StatusTypeDef status;
    CySat_Packet_t outgoingPacket;
    switch(packet.Subsystem_Type){
 8005a08:	793b      	ldrb	r3, [r7, #4]
 8005a0a:	2b1e      	cmp	r3, #30
 8005a0c:	d011      	beq.n	8005a32 <handleCySatPacket+0x36>
 8005a0e:	2b1e      	cmp	r3, #30
 8005a10:	dc07      	bgt.n	8005a22 <handleCySatPacket+0x26>
 8005a12:	2b0a      	cmp	r3, #10
 8005a14:	f000 86a4 	beq.w	8006760 <handleCySatPacket+0xd64>
 8005a18:	2b14      	cmp	r3, #20
 8005a1a:	f000 86a3 	beq.w	8006764 <handleCySatPacket+0xd68>
 8005a1e:	f000 be9c 	b.w	800675a <handleCySatPacket+0xd5e>
 8005a22:	2b28      	cmp	r3, #40	; 0x28
 8005a24:	f000 86a0 	beq.w	8006768 <handleCySatPacket+0xd6c>
 8005a28:	2b5a      	cmp	r3, #90	; 0x5a
 8005a2a:	f000 869f 	beq.w	800676c <handleCySatPacket+0xd70>
 8005a2e:	f000 be94 	b.w	800675a <handleCySatPacket+0xd5e>
        case ADCS_SUBSYSTEM_TYPE: //ADCS

            break;

        case EPS_SUBSYSTEM_TYPE: //EPS
            switch(packet.Command){
 8005a32:	797b      	ldrb	r3, [r7, #5]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	2b10      	cmp	r3, #16
 8005a38:	f200 869a 	bhi.w	8006770 <handleCySatPacket+0xd74>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <handleCySatPacket+0x48>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a89 	.word	0x08005a89
 8005a48:	08006771 	.word	0x08006771
 8005a4c:	08005b63 	.word	0x08005b63
 8005a50:	08006771 	.word	0x08006771
 8005a54:	08005c9b 	.word	0x08005c9b
 8005a58:	08006771 	.word	0x08006771
 8005a5c:	08005dd3 	.word	0x08005dd3
 8005a60:	08006771 	.word	0x08006771
 8005a64:	08005f0b 	.word	0x08005f0b
 8005a68:	08006771 	.word	0x08006771
 8005a6c:	08005ff3 	.word	0x08005ff3
 8005a70:	08006771 	.word	0x08006771
 8005a74:	080061bb 	.word	0x080061bb
 8005a78:	08006771 	.word	0x08006771
 8005a7c:	080062dd 	.word	0x080062dd
 8005a80:	08006771 	.word	0x08006771
 8005a84:	08006437 	.word	0x08006437
                case 0x01: { //Battery Pack Voltage/Current Request
                    float voltage, current;
                    status = READ_EPS_BATTERY_VOLTAGE(&voltage); //read the voltage from the EPS Battery Pack
 8005a88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff f8cf 	bl	8004c30 <READ_EPS_BATTERY_VOLTAGE>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005a98:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <handleCySatPacket+0xac>
                        return -1;
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aa4:	f000 be66 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_BATTERY_CURRENT(&current); //read the current from the EPS Battery Pack
 8005aa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff f8f1 	bl	8004c94 <READ_EPS_BATTERY_CURRENT>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005ab8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <handleCySatPacket+0xcc>
                        return -1;
 8005ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac4:	f000 be56 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(voltage);
 8005ac8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005acc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ad0:	f000 ff8c 	bl	80069ec <FloatToUnsigned16bits>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
                    uint16_t data2 = FloatToUnsigned16bits(current);
 8005ada:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005ade:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae2:	f000 ff83 	bl	80069ec <FloatToUnsigned16bits>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8005aec:	231e      	movs	r3, #30
 8005aee:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x00; //Battery Pack Voltage/Current Response
 8005af2:	2300      	movs	r3, #0
 8005af4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8005afe:	2004      	movs	r0, #4
 8005b00:	f001 fb38 	bl	8007174 <malloc>
 8005b04:	4603      	mov	r3, r0
 8005b06:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8005b08:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8005b0c:	0a1b      	lsrs	r3, r3, #8
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8005b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8005b22:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8005b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b34:	3303      	adds	r3, #3
 8005b36:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8005b3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b46:	f000 fe19 	bl	800677c <generateCySatChecksum>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    return sendCySatPacket(outgoingPacket); //send the response
 8005b50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005b54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b58:	f7ff febe 	bl	80058d8 <sendCySatPacket>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f000 be09 	b.w	8006774 <handleCySatPacket+0xd78>
                }
                case 0x03: { //Solar Panel X Status Request
                    float x_voltage, x_neg_current, x_pos_current;
                    status = READ_EPS_SOLAR_X_VOLTAGE(&x_voltage); //read the Solar Panel X axis voltage
 8005b62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff f8c6 	bl	8004cf8 <READ_EPS_SOLAR_X_VOLTAGE>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005b72:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <handleCySatPacket+0x186>
                        return -1;
 8005b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b7e:	f000 bdf9 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current); //read the Solar Panel X- current
 8005b82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff f8e8 	bl	8004d5c <READ_EPS_SOLAR_X_NEG_CURRENT>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005b92:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <handleCySatPacket+0x1a6>
                        return -1;
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b9e:	f000 bde9 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current); //read the Solar Panel X+ current
 8005ba2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff f90a 	bl	8004dc0 <READ_EPS_SOLAR_X_POS_CURRENT>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005bb2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <handleCySatPacket+0x1c6>
                        return -1;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bbe:	f000 bdd9 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(x_voltage);
 8005bc2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8005bca:	f000 ff0f 	bl	80069ec <FloatToUnsigned16bits>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                    uint16_t data2 = FloatToUnsigned16bits(x_neg_current);
 8005bd4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8005bdc:	f000 ff06 	bl	80069ec <FloatToUnsigned16bits>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                    uint16_t data3 = FloatToUnsigned16bits(x_pos_current);
 8005be6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005bea:	eeb0 0a67 	vmov.f32	s0, s15
 8005bee:	f000 fefd 	bl	80069ec <FloatToUnsigned16bits>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8005bf8:	231e      	movs	r3, #30
 8005bfa:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x02; //Solar Panel X Status Response
 8005bfe:	2302      	movs	r3, #2
 8005c00:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8005c04:	2306      	movs	r3, #6
 8005c06:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8005c0a:	2006      	movs	r0, #6
 8005c0c:	f001 fab2 	bl	8007174 <malloc>
 8005c10:	4603      	mov	r3, r0
 8005c12:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8005c14:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005c18:	0a1b      	lsrs	r3, r3, #8
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8005c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c24:	3301      	adds	r3, #1
 8005c26:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8005c2e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c38:	3302      	adds	r3, #2
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8005c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c40:	3303      	adds	r3, #3
 8005c42:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8005c4a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c54:	3304      	adds	r3, #4
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8005c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c5c:	3305      	adds	r3, #5
 8005c5e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8005c66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c6e:	f000 fd85 	bl	800677c <generateCySatChecksum>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8005c78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c80:	f7ff fe2a 	bl	80058d8 <sendCySatPacket>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8005c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 fa79 	bl	8007184 <free>
                    return status; //send the response
 8005c92:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005c96:	f000 bd6d 	b.w	8006774 <handleCySatPacket+0xd78>
                }
                case 0x05: { //Solar Panel Y Status Request
                    float y_voltage, y_neg_current, y_pos_current;
                    status = READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage); //read the Solar Panel Y axis voltage
 8005c9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff f8c0 	bl	8004e24 <READ_EPS_SOLAR_Y_VOLTAGE>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005caa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <handleCySatPacket+0x2be>
                        return -1;
 8005cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cb6:	f000 bd5d 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current); //read the Solar Panel Y- current
 8005cba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff f8e2 	bl	8004e88 <READ_EPS_SOLAR_Y_NEG_CURRENT>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005cca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <handleCySatPacket+0x2de>
                        return -1;
 8005cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cd6:	f000 bd4d 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current); //read the Solar Panel Y+ current
 8005cda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff f904 	bl	8004eec <READ_EPS_SOLAR_Y_POS_CURRENT>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005cea:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <handleCySatPacket+0x2fe>
                        return -1;
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf6:	f000 bd3d 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(y_voltage);
 8005cfa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8005d02:	f000 fe73 	bl	80069ec <FloatToUnsigned16bits>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                    uint16_t data2 = FloatToUnsigned16bits(y_neg_current);
 8005d0c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005d10:	eeb0 0a67 	vmov.f32	s0, s15
 8005d14:	f000 fe6a 	bl	80069ec <FloatToUnsigned16bits>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                    uint16_t data3 = FloatToUnsigned16bits(y_pos_current);
 8005d1e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005d22:	eeb0 0a67 	vmov.f32	s0, s15
 8005d26:	f000 fe61 	bl	80069ec <FloatToUnsigned16bits>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8005d30:	231e      	movs	r3, #30
 8005d32:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x04; //Solar Panel Y Status Response
 8005d36:	2304      	movs	r3, #4
 8005d38:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8005d3c:	2306      	movs	r3, #6
 8005d3e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8005d42:	2006      	movs	r0, #6
 8005d44:	f001 fa16 	bl	8007174 <malloc>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8005d4c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005d50:	0a1b      	lsrs	r3, r3, #8
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8005d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8005d66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d6a:	0a1b      	lsrs	r3, r3, #8
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d70:	3302      	adds	r3, #2
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8005d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d78:	3303      	adds	r3, #3
 8005d7a:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8005d82:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8005d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d94:	3305      	adds	r3, #5
 8005d96:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8005d9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005da6:	f000 fce9 	bl	800677c <generateCySatChecksum>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8005db0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005db4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005db8:	f7ff fd8e 	bl	80058d8 <sendCySatPacket>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8005dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f001 f9dd 	bl	8007184 <free>
                    return status; //send the response
 8005dca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005dce:	f000 bcd1 	b.w	8006774 <handleCySatPacket+0xd78>
                }
                case 0x07: { //Solar Panel Z Status Request
                    float z_voltage, z_neg_current, z_pos_current;
                    status = READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage); //read the Solar Panel Z axis voltage
 8005dd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff f8ba 	bl	8004f50 <READ_EPS_SOLAR_Z_VOLTAGE>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005de2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <handleCySatPacket+0x3f6>
                        return -1;
 8005dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dee:	f000 bcc1 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current); //read the Solar Panel Z- current
 8005df2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff f8dc 	bl	8004fb4 <READ_EPS_SOLAR_Z_NEG_CURRENT>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005e02:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <handleCySatPacket+0x416>
                        return -1;
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e0e:	f000 bcb1 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current); //read the Solar Panel Z+ current
 8005e12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff f8fe 	bl	8005018 <READ_EPS_SOLAR_Z_POS_CURRENT>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005e22:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <handleCySatPacket+0x436>
                        return -1;
 8005e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e2e:	f000 bca1 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(z_voltage);
 8005e32:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005e36:	eeb0 0a67 	vmov.f32	s0, s15
 8005e3a:	f000 fdd7 	bl	80069ec <FloatToUnsigned16bits>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
                    uint16_t data2 = FloatToUnsigned16bits(z_neg_current);
 8005e44:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005e48:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4c:	f000 fdce 	bl	80069ec <FloatToUnsigned16bits>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                    uint16_t data3 = FloatToUnsigned16bits(z_pos_current);
 8005e56:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e5e:	f000 fdc5 	bl	80069ec <FloatToUnsigned16bits>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8005e68:	231e      	movs	r3, #30
 8005e6a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x06; //Solar Panel Z Status Response
 8005e6e:	2306      	movs	r3, #6
 8005e70:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8005e74:	2306      	movs	r3, #6
 8005e76:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8005e7a:	2006      	movs	r0, #6
 8005e7c:	f001 f97a 	bl	8007174 <malloc>
 8005e80:	4603      	mov	r3, r0
 8005e82:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8005e84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005e88:	0a1b      	lsrs	r3, r3, #8
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8005e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e94:	3301      	adds	r3, #1
 8005e96:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8005e9e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8005eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eb0:	3303      	adds	r3, #3
 8005eb2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8005eba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ebe:	0a1b      	lsrs	r3, r3, #8
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8005eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ecc:	3305      	adds	r3, #5
 8005ece:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8005ed6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ede:	f000 fc4d 	bl	800677c <generateCySatChecksum>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8005ee8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ef0:	f7ff fcf2 	bl	80058d8 <sendCySatPacket>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8005efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 f941 	bl	8007184 <free>
                    return status; //send the response
 8005f02:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005f06:	f000 bc35 	b.w	8006774 <handleCySatPacket+0xd78>
                }
                case 0x09: { //BUS Current Request
                    float current_3, current_5;
                    status = READ_EPS_3V_CURRENT(&current_3); //read the 3.3v BUS current
 8005f0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff f8b4 	bl	800507c <READ_EPS_3V_CURRENT>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005f1a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <handleCySatPacket+0x52e>
                        return -1;
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f26:	f000 bc25 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_5V_CURRENT(&current_5); //read the 5v BUS current
 8005f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff f8d6 	bl	80050e0 <READ_EPS_5V_CURRENT>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005f3a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <handleCySatPacket+0x54e>
                        return -1;
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f46:	f000 bc15 	b.w	8006774 <handleCySatPacket+0xd78>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(current_3);
 8005f4a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f52:	f000 fd4b 	bl	80069ec <FloatToUnsigned16bits>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
                    uint16_t data2 = FloatToUnsigned16bits(current_5);
 8005f5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005f60:	eeb0 0a67 	vmov.f32	s0, s15
 8005f64:	f000 fd42 	bl	80069ec <FloatToUnsigned16bits>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8005f6e:	231e      	movs	r3, #30
 8005f70:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x08; //BUS Current Response
 8005f74:	2308      	movs	r3, #8
 8005f76:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8005f80:	2004      	movs	r0, #4
 8005f82:	f001 f8f7 	bl	8007174 <malloc>
 8005f86:	4603      	mov	r3, r0
 8005f88:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8005f8a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005f8e:	0a1b      	lsrs	r3, r3, #8
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8005f98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8005fa4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fae:	3302      	adds	r3, #2
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8005fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fb6:	3303      	adds	r3, #3
 8005fb8:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8005fc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005fc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fc8:	f000 fbd8 	bl	800677c <generateCySatChecksum>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8005fd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005fd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fda:	f7ff fc7d 	bl	80058d8 <sendCySatPacket>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8005fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 f8cc 	bl	8007184 <free>
                    return status; //send the response
 8005fec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005ff0:	e3c0      	b.n	8006774 <handleCySatPacket+0xd78>
                }
                case 0x0B: { //Temperature Request
                    float mcu_temp, battery1_temp, battery2_temp, battery3_temp, battery4_temp;
                    status = READ_EPS_MCU_TEMP(&mcu_temp); //read the MCU Temperature
 8005ff2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff f8a4 	bl	8005144 <READ_EPS_MCU_TEMP>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006002:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <handleCySatPacket+0x614>
                        return -1;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800600e:	e3b1      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_BATT_1_TEMP(&battery1_temp); //read the Battery Cell 1 Temperature
 8006010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff f8d3 	bl	80051c0 <READ_EPS_BATT_1_TEMP>
 800601a:	4603      	mov	r3, r0
 800601c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006020:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <handleCySatPacket+0x632>
                        return -1;
 8006028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800602c:	e3a2      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_BATT_2_TEMP(&battery2_temp); //read the Battery Cell 2 Temperature
 800602e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff f8f6 	bl	8005224 <READ_EPS_BATT_2_TEMP>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800603e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <handleCySatPacket+0x650>
                        return -1;
 8006046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800604a:	e393      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_BATT_3_TEMP(&battery3_temp); //read the Battery Cell 3 Temperature
 800604c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff f919 	bl	8005288 <READ_EPS_BATT_3_TEMP>
 8006056:	4603      	mov	r3, r0
 8006058:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800605c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <handleCySatPacket+0x66e>
                        return -1;
 8006064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006068:	e384      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_BATT_4_TEMP(&battery4_temp); //read the Battery Cell 4 Temperature
 800606a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff f93c 	bl	80052ec <READ_EPS_BATT_4_TEMP>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800607a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <handleCySatPacket+0x68c>
                        return -1;
 8006082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006086:	e375      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(mcu_temp);
 8006088:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800608c:	eeb0 0a67 	vmov.f32	s0, s15
 8006090:	f000 fcac 	bl	80069ec <FloatToUnsigned16bits>
 8006094:	4603      	mov	r3, r0
 8006096:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                    uint16_t data2 = FloatToUnsigned16bits(battery1_temp);
 800609a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800609e:	eeb0 0a67 	vmov.f32	s0, s15
 80060a2:	f000 fca3 	bl	80069ec <FloatToUnsigned16bits>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                    uint16_t data3 = FloatToUnsigned16bits(battery2_temp);
 80060ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80060b0:	eeb0 0a67 	vmov.f32	s0, s15
 80060b4:	f000 fc9a 	bl	80069ec <FloatToUnsigned16bits>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                    uint16_t data4 = FloatToUnsigned16bits(battery3_temp);
 80060be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80060c2:	eeb0 0a67 	vmov.f32	s0, s15
 80060c6:	f000 fc91 	bl	80069ec <FloatToUnsigned16bits>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
                    uint16_t data5 = FloatToUnsigned16bits(battery4_temp);
 80060d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80060d4:	eeb0 0a67 	vmov.f32	s0, s15
 80060d8:	f000 fc88 	bl	80069ec <FloatToUnsigned16bits>
 80060dc:	4603      	mov	r3, r0
 80060de:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80060e2:	231e      	movs	r3, #30
 80060e4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0A; //Temperature Response
 80060e8:	230a      	movs	r3, #10
 80060ea:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 80060ee:	230a      	movs	r3, #10
 80060f0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 80060f4:	200a      	movs	r0, #10
 80060f6:	f001 f83d 	bl	8007174 <malloc>
 80060fa:	4603      	mov	r3, r0
 80060fc:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80060fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006102:	0a1b      	lsrs	r3, r3, #8
 8006104:	b29a      	uxth	r2, r3
 8006106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 800610c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800610e:	3301      	adds	r3, #1
 8006110:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8006118:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800611c:	0a1b      	lsrs	r3, r3, #8
 800611e:	b29a      	uxth	r2, r3
 8006120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006122:	3302      	adds	r3, #2
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8006128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800612a:	3303      	adds	r3, #3
 800612c:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8006134:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	b29a      	uxth	r2, r3
 800613c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800613e:	3304      	adds	r3, #4
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8006144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006146:	3305      	adds	r3, #5
 8006148:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (data4 & 0xFF00) >> 8;
 8006150:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	b29a      	uxth	r2, r3
 8006158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800615a:	3306      	adds	r3, #6
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = data4 & 0xFF;
 8006160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006162:	3307      	adds	r3, #7
 8006164:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (data5 & 0xFF00) >> 8;
 800616c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	b29a      	uxth	r2, r3
 8006174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006176:	3308      	adds	r3, #8
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = data5 & 0xFF;
 800617c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800617e:	3309      	adds	r3, #9
 8006180:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8006188:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800618c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006190:	f000 faf4 	bl	800677c <generateCySatChecksum>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800619a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800619e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061a2:	f7ff fb99 	bl	80058d8 <sendCySatPacket>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 80061ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 ffe8 	bl	8007184 <free>
                    return status; //send the response
 80061b4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80061b8:	e2dc      	b.n	8006774 <handleCySatPacket+0xd78>
                }
                case 0x0D: { //Input, Output, and Default Conditions Request
                    uint16_t input, output1, output2, defaults1, defaults2;
                    status = READ_EPS_INPUT_CONDITION(&input); //read the Input Conditions
 80061ba:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff f8c6 	bl	8005350 <READ_EPS_INPUT_CONDITION>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80061ca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <handleCySatPacket+0x7dc>
                        return -1;
 80061d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061d6:	e2cd      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_OUTPUT_CONDITION1(&output1); //read the Output 1 Conditions
 80061d8:	f107 0320 	add.w	r3, r7, #32
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff f8dc 	bl	800539a <READ_EPS_OUTPUT_CONDITION1>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80061e8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <handleCySatPacket+0x7fa>
                        return -1;
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061f4:	e2be      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_OUTPUT_CONDITION2(&output2); //read the Output 2 Conditions
 80061f6:	f107 031e 	add.w	r3, r7, #30
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff f8f2 	bl	80053e4 <READ_EPS_OUTPUT_CONDITION2>
 8006200:	4603      	mov	r3, r0
 8006202:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006206:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <handleCySatPacket+0x818>
                        return -1;
 800620e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006212:	e2af      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_DEFAULTS1(&defaults1); //read the Defaults 1 Conditions
 8006214:	f107 031c 	add.w	r3, r7, #28
 8006218:	4618      	mov	r0, r3
 800621a:	f7ff f9c1 	bl	80055a0 <READ_EPS_DEFAULTS1>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006224:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <handleCySatPacket+0x836>
                        return -1;
 800622c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006230:	e2a0      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_DEFAULTS2(&defaults2); //read the Defaults 2 Conditions
 8006232:	f107 031a 	add.w	r3, r7, #26
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff f9d7 	bl	80055ea <READ_EPS_DEFAULTS2>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006242:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <handleCySatPacket+0x854>
                        return -1;
 800624a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800624e:	e291      	b.n	8006774 <handleCySatPacket+0xd78>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8006250:	231e      	movs	r3, #30
 8006252:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0C; //Input, Output, and Default Conditions Response
 8006256:	230c      	movs	r3, #12
 8006258:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 800625c:	2306      	movs	r3, #6
 800625e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8006262:	2006      	movs	r0, #6
 8006264:	f000 ff86 	bl	8007174 <malloc>
 8006268:	4603      	mov	r3, r0
 800626a:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = input & 0xFF;
 800626c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800626e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = (output1 & 0xFF00) >> 8;
 8006274:	8c3b      	ldrh	r3, [r7, #32]
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	b29a      	uxth	r2, r3
 800627a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800627c:	3301      	adds	r3, #1
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = output1 & 0xFF;
 8006282:	8c3a      	ldrh	r2, [r7, #32]
 8006284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006286:	3302      	adds	r3, #2
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = output2 & 0xFF;
 800628c:	8bfa      	ldrh	r2, [r7, #30]
 800628e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006290:	3303      	adds	r3, #3
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = defaults1 & 0xFF;
 8006296:	8bba      	ldrh	r2, [r7, #28]
 8006298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800629a:	3304      	adds	r3, #4
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = defaults2 & 0xFF;
 80062a0:	8b7a      	ldrh	r2, [r7, #26]
 80062a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062a4:	3305      	adds	r3, #5
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80062aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80062b2:	f000 fa63 	bl	800677c <generateCySatChecksum>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 80062bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80062c4:	f7ff fb08 	bl	80058d8 <sendCySatPacket>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 80062ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 ff57 	bl	8007184 <free>
                    return status; //send the response
 80062d6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80062da:	e24b      	b.n	8006774 <handleCySatPacket+0xd78>
                }
                case 0x0F: { //Counter Check Request
                    uint16_t power_on, under_voltage, short_circuited, over_temp, charging_cycles;
                    status = READ_EPS_POWER_ON_CYCLES(&power_on); //read the MCU Temperature
 80062dc:	f107 0318 	add.w	r3, r7, #24
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff f8a4 	bl	800542e <READ_EPS_POWER_ON_CYCLES>
 80062e6:	4603      	mov	r3, r0
 80062e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80062ec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <handleCySatPacket+0x8fe>
                        return -1;
 80062f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062f8:	e23c      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_UNDER_VOLT_COUNT(&under_voltage); //read the Battery Cell 1 Temperature
 80062fa:	f107 0316 	add.w	r3, r7, #22
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff f8ba 	bl	8005478 <READ_EPS_UNDER_VOLT_COUNT>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800630a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <handleCySatPacket+0x91c>
                        return -1;
 8006312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006316:	e22d      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_SHORT_CIRCUIT_COUNT(&short_circuited); //read the Battery Cell 2 Temperature
 8006318:	f107 0314 	add.w	r3, r7, #20
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff f8d0 	bl	80054c2 <READ_EPS_SHORT_CIRCUIT_COUNT>
 8006322:	4603      	mov	r3, r0
 8006324:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006328:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <handleCySatPacket+0x93a>
                        return -1;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006334:	e21e      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_OVER_TEMP_COUNT(&over_temp); //read the Battery Cell 3 Temperature
 8006336:	f107 0312 	add.w	r3, r7, #18
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff f8e6 	bl	800550c <READ_EPS_OVER_TEMP_COUNT>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006346:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <handleCySatPacket+0x958>
                        return -1;
 800634e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006352:	e20f      	b.n	8006774 <handleCySatPacket+0xd78>
                    }
                    status = READ_EPS_CHARGE_CYCLES(&charging_cycles); //read the Battery Cell 4 Temperature
 8006354:	f107 0310 	add.w	r3, r7, #16
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff f8fc 	bl	8005556 <READ_EPS_CHARGE_CYCLES>
 800635e:	4603      	mov	r3, r0
 8006360:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006364:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <handleCySatPacket+0x976>
                        return -1;
 800636c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006370:	e200      	b.n	8006774 <handleCySatPacket+0xd78>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8006372:	231e      	movs	r3, #30
 8006374:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0E; //Temperature Response
 8006378:	230e      	movs	r3, #14
 800637a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 800637e:	230a      	movs	r3, #10
 8006380:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8006384:	200a      	movs	r0, #10
 8006386:	f000 fef5 	bl	8007174 <malloc>
 800638a:	4603      	mov	r3, r0
 800638c:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (power_on & 0xFF00) >> 8;
 800638e:	8b3b      	ldrh	r3, [r7, #24]
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	b29a      	uxth	r2, r3
 8006394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = power_on & 0xFF;
 800639a:	8b3a      	ldrh	r2, [r7, #24]
 800639c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800639e:	3301      	adds	r3, #1
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (under_voltage & 0xFF00) >> 8;
 80063a4:	8afb      	ldrh	r3, [r7, #22]
 80063a6:	0a1b      	lsrs	r3, r3, #8
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ac:	3302      	adds	r3, #2
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = under_voltage & 0xFF;
 80063b2:	8afa      	ldrh	r2, [r7, #22]
 80063b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063b6:	3303      	adds	r3, #3
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (short_circuited & 0xFF00) >> 8;
 80063bc:	8abb      	ldrh	r3, [r7, #20]
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c4:	3304      	adds	r3, #4
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = short_circuited & 0xFF;
 80063ca:	8aba      	ldrh	r2, [r7, #20]
 80063cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ce:	3305      	adds	r3, #5
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (over_temp & 0xFF00) >> 8;
 80063d4:	8a7b      	ldrh	r3, [r7, #18]
 80063d6:	0a1b      	lsrs	r3, r3, #8
 80063d8:	b29a      	uxth	r2, r3
 80063da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063dc:	3306      	adds	r3, #6
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = over_temp & 0xFF;
 80063e2:	8a7a      	ldrh	r2, [r7, #18]
 80063e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e6:	3307      	adds	r3, #7
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (charging_cycles & 0xFF00) >> 8;
 80063ec:	8a3b      	ldrh	r3, [r7, #16]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063f4:	3308      	adds	r3, #8
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = charging_cycles & 0xFF;
 80063fa:	8a3a      	ldrh	r2, [r7, #16]
 80063fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063fe:	3309      	adds	r3, #9
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8006404:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006408:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800640c:	f000 f9b6 	bl	800677c <generateCySatChecksum>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8006416:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800641a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800641e:	f7ff fa5b 	bl	80058d8 <sendCySatPacket>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8006428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800642a:	4618      	mov	r0, r3
 800642c:	f000 feaa 	bl	8007184 <free>
                    return status; //send the response
 8006430:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006434:	e19e      	b.n	8006774 <handleCySatPacket+0xd78>
                }
                case 0x11: { //Enable/Disable Request
                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8006436:	231e      	movs	r3, #30
 8006438:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x10; //Enable/Disable Response
 800643c:	2310      	movs	r3, #16
 800643e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x01;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t));
 8006448:	2001      	movs	r0, #1
 800644a:	f000 fe93 	bl	8007174 <malloc>
 800644e:	4603      	mov	r3, r0
 8006450:	673b      	str	r3, [r7, #112]	; 0x70
                    if(validateCySatChecksum(packet)==0){
 8006452:	1d3b      	adds	r3, r7, #4
 8006454:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006458:	f000 f9c5 	bl	80067e6 <validateCySatChecksum>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d103      	bne.n	800646a <handleCySatPacket+0xa6e>
                        outgoingPacket.Data[0] = 0;
 8006462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	e15e      	b.n	8006728 <handleCySatPacket+0xd2c>
                    }
                    else{
                        switch(packet.Data[0]){
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	3b01      	subs	r3, #1
 8006470:	2b0e      	cmp	r3, #14
 8006472:	f200 8159 	bhi.w	8006728 <handleCySatPacket+0xd2c>
 8006476:	a201      	add	r2, pc, #4	; (adr r2, 800647c <handleCySatPacket+0xa80>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	080064b9 	.word	0x080064b9
 8006480:	08006729 	.word	0x08006729
 8006484:	08006729 	.word	0x08006729
 8006488:	080064ed 	.word	0x080064ed
 800648c:	08006729 	.word	0x08006729
 8006490:	08006521 	.word	0x08006521
 8006494:	08006555 	.word	0x08006555
 8006498:	08006589 	.word	0x08006589
 800649c:	080065bd 	.word	0x080065bd
 80064a0:	080065f1 	.word	0x080065f1
 80064a4:	08006625 	.word	0x08006625
 80064a8:	08006659 	.word	0x08006659
 80064ac:	0800668d 	.word	0x0800668d
 80064b0:	080066c1 	.word	0x080066c1
 80064b4:	080066f5 	.word	0x080066f5
                            case 0x01:{ //Enable/Disable Battery BUS
                                if(packet.Data[1] == 0){
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	3301      	adds	r3, #1
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d105      	bne.n	80064ce <handleCySatPacket+0xad2>
                                    outgoingPacket.Data[0] = disable_EPS_Vbatt_Bus();
 80064c2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80064c4:	f7ff f8bf 	bl	8005646 <disable_EPS_Vbatt_Bus>
 80064c8:	4603      	mov	r3, r0
 80064ca:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80064cc:	e12c      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	3301      	adds	r3, #1
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d105      	bne.n	80064e4 <handleCySatPacket+0xae8>
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
 80064d8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80064da:	f7ff f8ab 	bl	8005634 <enable_EPS_Vbatt_Bus>
 80064de:	4603      	mov	r3, r0
 80064e0:	7023      	strb	r3, [r4, #0]
                                break;
 80064e2:	e121      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 80064e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
                                break;
 80064ea:	e11d      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x04:{ //Enable/Disable 5v BUS
                                if(packet.Data[1] == 0){
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	3301      	adds	r3, #1
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d105      	bne.n	8006502 <handleCySatPacket+0xb06>
                                    outgoingPacket.Data[0] = disable_EPS_5v_Bus();
 80064f6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80064f8:	f7ff f8b7 	bl	800566a <disable_EPS_5v_Bus>
 80064fc:	4603      	mov	r3, r0
 80064fe:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006500:	e112      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	3301      	adds	r3, #1
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d105      	bne.n	8006518 <handleCySatPacket+0xb1c>
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
 800650c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800650e:	f7ff f8a3 	bl	8005658 <enable_EPS_5v_Bus>
 8006512:	4603      	mov	r3, r0
 8006514:	7023      	strb	r3, [r4, #0]
                                break;
 8006516:	e107      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 8006518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800651a:	2200      	movs	r2, #0
 800651c:	701a      	strb	r2, [r3, #0]
                                break;
 800651e:	e103      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x06:{ //Enable/Disable Fast/Slow Battery Charge 1
                                if(packet.Data[1] == 0){
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	3301      	adds	r3, #1
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <handleCySatPacket+0xb3a>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge1();
 800652a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800652c:	f7ff f8af 	bl	800568e <disable_EPS_Fast_Charge1>
 8006530:	4603      	mov	r3, r0
 8006532:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006534:	e0f8      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	3301      	adds	r3, #1
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d105      	bne.n	800654c <handleCySatPacket+0xb50>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
 8006540:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006542:	f7ff f89b 	bl	800567c <enable_EPS_Fast_Charge1>
 8006546:	4603      	mov	r3, r0
 8006548:	7023      	strb	r3, [r4, #0]
                                break;
 800654a:	e0ed      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 800654c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
                                break;
 8006552:	e0e9      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x07:{ //Enable/Disable Fast/Slow Battery Charge 2
                                if(packet.Data[1] == 0){
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	3301      	adds	r3, #1
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d105      	bne.n	800656a <handleCySatPacket+0xb6e>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge2();
 800655e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006560:	f7ff f8a7 	bl	80056b2 <disable_EPS_Fast_Charge2>
 8006564:	4603      	mov	r3, r0
 8006566:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006568:	e0de      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	3301      	adds	r3, #1
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d105      	bne.n	8006580 <handleCySatPacket+0xb84>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
 8006574:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006576:	f7ff f893 	bl	80056a0 <enable_EPS_Fast_Charge2>
 800657a:	4603      	mov	r3, r0
 800657c:	7023      	strb	r3, [r4, #0]
                                break;
 800657e:	e0d3      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 8006580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
                                break;
 8006586:	e0cf      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x08:{ //Enable/Disable Out1/Boost Board
                                if(packet.Data[1] == 0){
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	3301      	adds	r3, #1
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d105      	bne.n	800659e <handleCySatPacket+0xba2>
                                    outgoingPacket.Data[0] = disable_EPS_Output_1();
 8006592:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006594:	f7ff f89f 	bl	80056d6 <disable_EPS_Output_1>
 8006598:	4603      	mov	r3, r0
 800659a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800659c:	e0c4      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	3301      	adds	r3, #1
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d105      	bne.n	80065b4 <handleCySatPacket+0xbb8>
                                    outgoingPacket.Data[0] = enable_EPS_Output_1();
 80065a8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80065aa:	f7ff f88b 	bl	80056c4 <enable_EPS_Output_1>
 80065ae:	4603      	mov	r3, r0
 80065b0:	7023      	strb	r3, [r4, #0]
                                break;
 80065b2:	e0b9      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 80065b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b6:	2200      	movs	r2, #0
 80065b8:	701a      	strb	r2, [r3, #0]
                                break;
 80065ba:	e0b5      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x09:{ //Enable/Disable Out2
                                if(packet.Data[1] == 0){
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	3301      	adds	r3, #1
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d105      	bne.n	80065d2 <handleCySatPacket+0xbd6>
                                    outgoingPacket.Data[0] = disable_EPS_Output_2();
 80065c6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80065c8:	f7ff f897 	bl	80056fa <disable_EPS_Output_2>
 80065cc:	4603      	mov	r3, r0
 80065ce:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80065d0:	e0aa      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	3301      	adds	r3, #1
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d105      	bne.n	80065e8 <handleCySatPacket+0xbec>
                                    outgoingPacket.Data[0] = enable_EPS_Output_2();
 80065dc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80065de:	f7ff f883 	bl	80056e8 <enable_EPS_Output_2>
 80065e2:	4603      	mov	r3, r0
 80065e4:	7023      	strb	r3, [r4, #0]
                                break;
 80065e6:	e09f      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 80065e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
                                break;
 80065ee:	e09b      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x0A:{ //Enable/Disable Out3
                                if(packet.Data[1] == 0){
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	3301      	adds	r3, #1
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d105      	bne.n	8006606 <handleCySatPacket+0xc0a>
                                    outgoingPacket.Data[0] = disable_EPS_Output_3();
 80065fa:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80065fc:	f7ff f88f 	bl	800571e <disable_EPS_Output_3>
 8006600:	4603      	mov	r3, r0
 8006602:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006604:	e090      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	3301      	adds	r3, #1
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d105      	bne.n	800661c <handleCySatPacket+0xc20>
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
 8006610:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006612:	f7ff f87b 	bl	800570c <enable_EPS_Output_3>
 8006616:	4603      	mov	r3, r0
 8006618:	7023      	strb	r3, [r4, #0]
                                break;
 800661a:	e085      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 800661c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
                                break;
 8006622:	e081      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x0B:{ //Enable/Disable Out5/UHF
                                if(packet.Data[1] == 0){
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	3301      	adds	r3, #1
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d105      	bne.n	800663a <handleCySatPacket+0xc3e>
                                    outgoingPacket.Data[0] = disable_EPS_Output_5();
 800662e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006630:	f7ff f887 	bl	8005742 <disable_EPS_Output_5>
 8006634:	4603      	mov	r3, r0
 8006636:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_5();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006638:	e076      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	3301      	adds	r3, #1
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d105      	bne.n	8006650 <handleCySatPacket+0xc54>
                                    outgoingPacket.Data[0] = enable_EPS_Output_5();
 8006644:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006646:	f7ff f873 	bl	8005730 <enable_EPS_Output_5>
 800664a:	4603      	mov	r3, r0
 800664c:	7023      	strb	r3, [r4, #0]
                                break;
 800664e:	e06b      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 8006650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
                                break;
 8006656:	e067      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x0C:{ //Enable/Disable Out6
                                if(packet.Data[1] == 0){
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	3301      	adds	r3, #1
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d105      	bne.n	800666e <handleCySatPacket+0xc72>
                                    outgoingPacket.Data[0] = disable_EPS_Output_6();
 8006662:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006664:	f7ff f87f 	bl	8005766 <disable_EPS_Output_6>
 8006668:	4603      	mov	r3, r0
 800666a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800666c:	e05c      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	3301      	adds	r3, #1
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d105      	bne.n	8006684 <handleCySatPacket+0xc88>
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
 8006678:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800667a:	f7ff f86b 	bl	8005754 <enable_EPS_Output_6>
 800667e:	4603      	mov	r3, r0
 8006680:	7023      	strb	r3, [r4, #0]
                                break;
 8006682:	e051      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 8006684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
                                break;
 800668a:	e04d      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x0D:{ //Enable/Disable Heater 1
                                if(packet.Data[1] == 0){
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	3301      	adds	r3, #1
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <handleCySatPacket+0xca6>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_1();
 8006696:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006698:	f7ff f877 	bl	800578a <disable_EPS_Batt_Heater_1>
 800669c:	4603      	mov	r3, r0
 800669e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80066a0:	e042      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	3301      	adds	r3, #1
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d105      	bne.n	80066b8 <handleCySatPacket+0xcbc>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
 80066ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80066ae:	f7ff f863 	bl	8005778 <enable_EPS_Batt_Heater_1>
 80066b2:	4603      	mov	r3, r0
 80066b4:	7023      	strb	r3, [r4, #0]
                                break;
 80066b6:	e037      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 80066b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066ba:	2200      	movs	r2, #0
 80066bc:	701a      	strb	r2, [r3, #0]
                                break;
 80066be:	e033      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x0E:{ //Enable/Disable Heater 2
                                if(packet.Data[1] == 0){
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	3301      	adds	r3, #1
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d105      	bne.n	80066d6 <handleCySatPacket+0xcda>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_2();
 80066ca:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80066cc:	f7ff f86f 	bl	80057ae <disable_EPS_Batt_Heater_2>
 80066d0:	4603      	mov	r3, r0
 80066d2:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80066d4:	e028      	b.n	8006728 <handleCySatPacket+0xd2c>
                                else if(packet.Data[1] == 1){
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	3301      	adds	r3, #1
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d105      	bne.n	80066ec <handleCySatPacket+0xcf0>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
 80066e0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80066e2:	f7ff f85b 	bl	800579c <enable_EPS_Batt_Heater_2>
 80066e6:	4603      	mov	r3, r0
 80066e8:	7023      	strb	r3, [r4, #0]
                                break;
 80066ea:	e01d      	b.n	8006728 <handleCySatPacket+0xd2c>
                                    outgoingPacket.Data[0] = 0x00;
 80066ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066ee:	2200      	movs	r2, #0
 80066f0:	701a      	strb	r2, [r3, #0]
                                break;
 80066f2:	e019      	b.n	8006728 <handleCySatPacket+0xd2c>
                            }
                            case 0x0F:{ //Enable/Disable Heater 3
                                if(packet.Data[1] == 0){
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	3301      	adds	r3, #1
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d105      	bne.n	800670a <handleCySatPacket+0xd0e>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_3();
 80066fe:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006700:	f7ff f867 	bl	80057d2 <disable_EPS_Batt_Heater_3>
 8006704:	4603      	mov	r3, r0
 8006706:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006708:	e00d      	b.n	8006726 <handleCySatPacket+0xd2a>
                                else if(packet.Data[1] == 1){
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	3301      	adds	r3, #1
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d105      	bne.n	8006720 <handleCySatPacket+0xd24>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
 8006714:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006716:	f7ff f853 	bl	80057c0 <enable_EPS_Batt_Heater_3>
 800671a:	4603      	mov	r3, r0
 800671c:	7023      	strb	r3, [r4, #0]
                                break;
 800671e:	e002      	b.n	8006726 <handleCySatPacket+0xd2a>
                                    outgoingPacket.Data[0] = 0x00;
 8006720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
                                break;
 8006726:	bf00      	nop
                            }
                        }
                    }
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8006728:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800672c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006730:	f000 f824 	bl	800677c <generateCySatChecksum>
 8006734:	4603      	mov	r3, r0
 8006736:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800673a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800673e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006742:	f7ff f8c9 	bl	80058d8 <sendCySatPacket>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 800674c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fd18 	bl	8007184 <free>
                    return status; //send the response
 8006754:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006758:	e00c      	b.n	8006774 <handleCySatPacket+0xd78>
        case EOL_SUBSYSTEM_TYPE: //End of Life

            break;

        default:
            return -1;
 800675a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800675e:	e009      	b.n	8006774 <handleCySatPacket+0xd78>
            break;
 8006760:	bf00      	nop
 8006762:	e006      	b.n	8006772 <handleCySatPacket+0xd76>
            break;
 8006764:	bf00      	nop
 8006766:	e004      	b.n	8006772 <handleCySatPacket+0xd76>
            break;
 8006768:	bf00      	nop
 800676a:	e002      	b.n	8006772 <handleCySatPacket+0xd76>
            break;
 800676c:	bf00      	nop
 800676e:	e000      	b.n	8006772 <handleCySatPacket+0xd76>
            break;
 8006770:	bf00      	nop
    }

    return 0;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	37a4      	adds	r7, #164	; 0xa4
 8006778:	46bd      	mov	sp, r7
 800677a:	bd90      	pop	{r4, r7, pc}

0800677c <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 800677c:	b480      	push	{r7}
 800677e:	b089      	sub	sp, #36	; 0x24
 8006780:	af00      	add	r7, sp, #0
 8006782:	1d3b      	adds	r3, r7, #4
 8006784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 800678c:	793b      	ldrb	r3, [r7, #4]
 800678e:	461a      	mov	r2, r3
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	4413      	add	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 8006796:	797b      	ldrb	r3, [r7, #5]
 8006798:	461a      	mov	r2, r3
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	4413      	add	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 80067a0:	79bb      	ldrb	r3, [r7, #6]
 80067a2:	461a      	mov	r2, r3
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	4413      	add	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80067aa:	2300      	movs	r3, #0
 80067ac:	61fb      	str	r3, [r7, #28]
 80067ae:	e00a      	b.n	80067c6 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	4413      	add	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	3301      	adds	r3, #1
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	79bb      	ldrb	r3, [r7, #6]
 80067c8:	461a      	mov	r2, r3
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4293      	cmp	r3, r2
 80067ce:	dbef      	blt.n	80067b0 <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	43db      	mvns	r3, r3
 80067d8:	b2db      	uxtb	r3, r3
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3724      	adds	r7, #36	; 0x24
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 80067e6:	b480      	push	{r7}
 80067e8:	b087      	sub	sp, #28
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	1d3b      	adds	r3, r7, #4
 80067ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 80067f6:	793b      	ldrb	r3, [r7, #4]
 80067f8:	461a      	mov	r2, r3
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 8006800:	797b      	ldrb	r3, [r7, #5]
 8006802:	461a      	mov	r2, r3
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4413      	add	r3, r2
 8006808:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 800680a:	79bb      	ldrb	r3, [r7, #6]
 800680c:	461a      	mov	r2, r3
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4413      	add	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e00a      	b.n	8006830 <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	4413      	add	r3, r2
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	3301      	adds	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	79bb      	ldrb	r3, [r7, #6]
 8006832:	461a      	mov	r2, r3
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	4293      	cmp	r3, r2
 8006838:	dbef      	blt.n	800681a <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 800683a:	7b3b      	ldrb	r3, [r7, #12]
 800683c:	461a      	mov	r2, r3
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4413      	add	r3, r2
 8006842:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2bff      	cmp	r3, #255	; 0xff
 800684a:	d101      	bne.n	8006850 <validateCySatChecksum+0x6a>
        return 1;
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 8006850:	2300      	movs	r3, #0
    }
}
 8006852:	4618      	mov	r0, r3
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006866:	f107 0314 	add.w	r3, r7, #20
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	605a      	str	r2, [r3, #4]
 8006870:	609a      	str	r2, [r3, #8]
 8006872:	60da      	str	r2, [r3, #12]
 8006874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	4b27      	ldr	r3, [pc, #156]	; (8006918 <MX_GPIO_Init+0xb8>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	4a26      	ldr	r2, [pc, #152]	; (8006918 <MX_GPIO_Init+0xb8>)
 8006880:	f043 0304 	orr.w	r3, r3, #4
 8006884:	6313      	str	r3, [r2, #48]	; 0x30
 8006886:	4b24      	ldr	r3, [pc, #144]	; (8006918 <MX_GPIO_Init+0xb8>)
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	4b20      	ldr	r3, [pc, #128]	; (8006918 <MX_GPIO_Init+0xb8>)
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <MX_GPIO_Init+0xb8>)
 800689c:	f043 0301 	orr.w	r3, r3, #1
 80068a0:	6313      	str	r3, [r2, #48]	; 0x30
 80068a2:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <MX_GPIO_Init+0xb8>)
 80068a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80068ae:	2300      	movs	r3, #0
 80068b0:	60bb      	str	r3, [r7, #8]
 80068b2:	4b19      	ldr	r3, [pc, #100]	; (8006918 <MX_GPIO_Init+0xb8>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	4a18      	ldr	r2, [pc, #96]	; (8006918 <MX_GPIO_Init+0xb8>)
 80068b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068bc:	6313      	str	r3, [r2, #48]	; 0x30
 80068be:	4b16      	ldr	r3, [pc, #88]	; (8006918 <MX_GPIO_Init+0xb8>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	60bb      	str	r3, [r7, #8]
 80068c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ca:	2300      	movs	r3, #0
 80068cc:	607b      	str	r3, [r7, #4]
 80068ce:	4b12      	ldr	r3, [pc, #72]	; (8006918 <MX_GPIO_Init+0xb8>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	4a11      	ldr	r2, [pc, #68]	; (8006918 <MX_GPIO_Init+0xb8>)
 80068d4:	f043 0302 	orr.w	r3, r3, #2
 80068d8:	6313      	str	r3, [r2, #48]	; 0x30
 80068da:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <MX_GPIO_Init+0xb8>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	607b      	str	r3, [r7, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80068e6:	2200      	movs	r2, #0
 80068e8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80068ec:	480b      	ldr	r0, [pc, #44]	; (800691c <MX_GPIO_Init+0xbc>)
 80068ee:	f7fa f9ad 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80068f2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80068f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068f8:	2301      	movs	r3, #1
 80068fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006900:	2300      	movs	r3, #0
 8006902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006904:	f107 0314 	add.w	r3, r7, #20
 8006908:	4619      	mov	r1, r3
 800690a:	4804      	ldr	r0, [pc, #16]	; (800691c <MX_GPIO_Init+0xbc>)
 800690c:	f7f9 fff4 	bl	80008f8 <HAL_GPIO_Init>

}
 8006910:	bf00      	nop
 8006912:	3728      	adds	r7, #40	; 0x28
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	40023800 	.word	0x40023800
 800691c:	40021800 	.word	0x40021800

08006920 <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 8006920:	b40f      	push	{r0, r1, r2, r3}
 8006922:	b5b0      	push	{r4, r5, r7, lr}
 8006924:	b088      	sub	sp, #32
 8006926:	af00      	add	r7, sp, #0
 8006928:	466b      	mov	r3, sp
 800692a:	461d      	mov	r5, r3

    uint32_t bufferSize = 512;
 800692c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006930:	61bb      	str	r3, [r7, #24]
    uint8_t formatBuffer[bufferSize];
 8006932:	69b8      	ldr	r0, [r7, #24]
 8006934:	4603      	mov	r3, r0
 8006936:	3b01      	subs	r3, #1
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	4601      	mov	r1, r0
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	f04f 0400 	mov.w	r4, #0
 8006948:	00d4      	lsls	r4, r2, #3
 800694a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800694e:	00cb      	lsls	r3, r1, #3
 8006950:	4601      	mov	r1, r0
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	f04f 0400 	mov.w	r4, #0
 800695e:	00d4      	lsls	r4, r2, #3
 8006960:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006964:	00cb      	lsls	r3, r1, #3
 8006966:	1dc3      	adds	r3, r0, #7
 8006968:	08db      	lsrs	r3, r3, #3
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	ebad 0d03 	sub.w	sp, sp, r3
 8006970:	466b      	mov	r3, sp
 8006972:	3300      	adds	r3, #0
 8006974:	613b      	str	r3, [r7, #16]

    va_list args;
    va_start(args, format);
 8006976:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800697a:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 800697c:	6938      	ldr	r0, [r7, #16]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006982:	69b9      	ldr	r1, [r7, #24]
 8006984:	f000 fcfe 	bl	8007384 <vsniprintf>
 8006988:	60f8      	str	r0, [r7, #12]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	77fb      	strb	r3, [r7, #31]
    if (len > 0) {
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dd1b      	ble.n	80069cc <debug_printf+0xac>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 8006994:	6939      	ldr	r1, [r7, #16]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	b29a      	uxth	r2, r3
 800699a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800699e:	4811      	ldr	r0, [pc, #68]	; (80069e4 <debug_printf+0xc4>)
 80069a0:	f7fd fa3d 	bl	8003e1e <HAL_UART_Transmit>
 80069a4:	4603      	mov	r3, r0
 80069a6:	77fb      	strb	r3, [r7, #31]
        uint8_t crlf[] = "\r\n";
 80069a8:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <debug_printf+0xc8>)
 80069aa:	1d3b      	adds	r3, r7, #4
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	4611      	mov	r1, r2
 80069b0:	8019      	strh	r1, [r3, #0]
 80069b2:	3302      	adds	r3, #2
 80069b4:	0c12      	lsrs	r2, r2, #16
 80069b6:	701a      	strb	r2, [r3, #0]
        status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
 80069b8:	1d39      	adds	r1, r7, #4
 80069ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069be:	2202      	movs	r2, #2
 80069c0:	4808      	ldr	r0, [pc, #32]	; (80069e4 <debug_printf+0xc4>)
 80069c2:	f7fd fa2c 	bl	8003e1e <HAL_UART_Transmit>
 80069c6:	4603      	mov	r3, r0
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e001      	b.n	80069d0 <debug_printf+0xb0>
    }
    else{
        status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 80069d0:	7ffb      	ldrb	r3, [r7, #31]
 80069d2:	46ad      	mov	sp, r5
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3720      	adds	r7, #32
 80069d8:	46bd      	mov	sp, r7
 80069da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80069de:	b004      	add	sp, #16
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	20000144 	.word	0x20000144
 80069e8:	08007a00 	.word	0x08007a00

080069ec <FloatToUnsigned16bits>:
  * @brief Converts a float into a uint16_t
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a uint16_t
  * @retval The 16 bit unsigned integer
  */
uint16_t FloatToUnsigned16bits(float float_value){
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t x = *((uint32_t*)&float_value);
 80069f6:	1d3b      	adds	r3, r7, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]
    return ((x>>16)&0x8000)|((((x&0x7f800000)-0x38000000)>>13)&0x7c00)|((x>>13)&0x03ff);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	0c1b      	lsrs	r3, r3, #16
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8006a12:	f103 4348 	add.w	r3, r3, #3355443200	; 0xc8000000
 8006a16:	0b5b      	lsrs	r3, r3, #13
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	0b5b      	lsrs	r3, r3, #13
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4313      	orrs	r3, r2
 8006a32:	b29b      	uxth	r3, r3
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006a44:	4b1b      	ldr	r3, [pc, #108]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a46:	4a1c      	ldr	r2, [pc, #112]	; (8006ab8 <MX_I2C1_Init+0x78>)
 8006a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006a4a:	4b1a      	ldr	r3, [pc, #104]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a4c:	4a1b      	ldr	r2, [pc, #108]	; (8006abc <MX_I2C1_Init+0x7c>)
 8006a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006a50:	4b18      	ldr	r3, [pc, #96]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006a56:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006a5c:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006a64:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a70:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006a7c:	480d      	ldr	r0, [pc, #52]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a7e:	f7fa f8ff 	bl	8000c80 <HAL_I2C_Init>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006a88:	f000 f976 	bl	8006d78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4809      	ldr	r0, [pc, #36]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006a90:	f7fc fcc0 	bl	8003414 <HAL_I2CEx_ConfigAnalogFilter>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8006a9a:	f000 f96d 	bl	8006d78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	4804      	ldr	r0, [pc, #16]	; (8006ab4 <MX_I2C1_Init+0x74>)
 8006aa2:	f7fc fcf3 	bl	800348c <HAL_I2CEx_ConfigDigitalFilter>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8006aac:	f000 f964 	bl	8006d78 <Error_Handler>
  }

}
 8006ab0:	bf00      	nop
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	200000a0 	.word	0x200000a0
 8006ab8:	40005400 	.word	0x40005400
 8006abc:	000186a0 	.word	0x000186a0

08006ac0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	; 0x28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ac8:	f107 0314 	add.w	r3, r7, #20
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <HAL_I2C_MspInit+0x94>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d133      	bne.n	8006b4a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	4b1c      	ldr	r3, [pc, #112]	; (8006b58 <HAL_I2C_MspInit+0x98>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	4a1b      	ldr	r2, [pc, #108]	; (8006b58 <HAL_I2C_MspInit+0x98>)
 8006aec:	f043 0302 	orr.w	r3, r3, #2
 8006af0:	6313      	str	r3, [r2, #48]	; 0x30
 8006af2:	4b19      	ldr	r3, [pc, #100]	; (8006b58 <HAL_I2C_MspInit+0x98>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006afe:	23c0      	movs	r3, #192	; 0xc0
 8006b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b02:	2312      	movs	r3, #18
 8006b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b06:	2301      	movs	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b0e:	2304      	movs	r3, #4
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b12:	f107 0314 	add.w	r3, r7, #20
 8006b16:	4619      	mov	r1, r3
 8006b18:	4810      	ldr	r0, [pc, #64]	; (8006b5c <HAL_I2C_MspInit+0x9c>)
 8006b1a:	f7f9 feed 	bl	80008f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <HAL_I2C_MspInit+0x98>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <HAL_I2C_MspInit+0x98>)
 8006b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <HAL_I2C_MspInit+0x98>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	201f      	movs	r0, #31
 8006b40:	f7f9 fe73 	bl	800082a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006b44:	201f      	movs	r0, #31
 8006b46:	f7f9 fe8c 	bl	8000862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	3728      	adds	r7, #40	; 0x28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40005400 	.word	0x40005400
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	40020400 	.word	0x40020400

08006b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b64:	f7f9 fd14 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b68:	f000 f850 	bl	8006c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b6c:	f7ff fe78 	bl	8006860 <MX_GPIO_Init>
  MX_I2C1_Init();
 8006b70:	f7ff ff66 	bl	8006a40 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8006b74:	f000 f9c8 	bl	8006f08 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8006b78:	f000 f9f0 	bl	8006f5c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  SatFlags.Detumbling = 0;
 8006b7c:	4a1f      	ldr	r2, [pc, #124]	; (8006bfc <main+0x9c>)
 8006b7e:	7813      	ldrb	r3, [r2, #0]
 8006b80:	f36f 0300 	bfc	r3, #0, #1
 8006b84:	7013      	strb	r3, [r2, #0]
  SatFlags.Auto_Control = 0;
 8006b86:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <main+0x9c>)
 8006b88:	7813      	ldrb	r3, [r2, #0]
 8006b8a:	f36f 0382 	bfc	r3, #2, #1
 8006b8e:	7013      	strb	r3, [r2, #0]
  SatFlags.Infinity_Detumbling = 0;
 8006b90:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <main+0x9c>)
 8006b92:	7813      	ldrb	r3, [r2, #0]
 8006b94:	f36f 0341 	bfc	r3, #1, #1
 8006b98:	7013      	strb	r3, [r2, #0]
  SatFlags.AD_is_Running = 0;
 8006b9a:	4a18      	ldr	r2, [pc, #96]	; (8006bfc <main+0x9c>)
 8006b9c:	7813      	ldrb	r3, [r2, #0]
 8006b9e:	f36f 03c3 	bfc	r3, #3, #1
 8006ba2:	7013      	strb	r3, [r2, #0]
  SatFlags.Antenna_is_Released = 0;
 8006ba4:	4a15      	ldr	r2, [pc, #84]	; (8006bfc <main+0x9c>)
 8006ba6:	7813      	ldrb	r3, [r2, #0]
 8006ba8:	f36f 1304 	bfc	r3, #4, #1
 8006bac:	7013      	strb	r3, [r2, #0]
  SatFlags.Battery_Low = 0;
 8006bae:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <main+0x9c>)
 8006bb0:	7813      	ldrb	r3, [r2, #0]
 8006bb2:	f36f 1345 	bfc	r3, #5, #1
 8006bb6:	7013      	strb	r3, [r2, #0]
  SatFlags.MelodyEnabled = 0;
 8006bb8:	4a10      	ldr	r2, [pc, #64]	; (8006bfc <main+0x9c>)
 8006bba:	7813      	ldrb	r3, [r2, #0]
 8006bbc:	f36f 13c7 	bfc	r3, #7, #1
 8006bc0:	7013      	strb	r3, [r2, #0]
  SatFlags.CameraReady = 0;
 8006bc2:	4a0e      	ldr	r2, [pc, #56]	; (8006bfc <main+0x9c>)
 8006bc4:	7853      	ldrb	r3, [r2, #1]
 8006bc6:	f36f 0300 	bfc	r3, #0, #1
 8006bca:	7053      	strb	r3, [r2, #1]
  SatFlags.MakePicture = 0;
 8006bcc:	4a0b      	ldr	r2, [pc, #44]	; (8006bfc <main+0x9c>)
 8006bce:	7853      	ldrb	r3, [r2, #1]
 8006bd0:	f36f 0341 	bfc	r3, #1, #1
 8006bd4:	7053      	strb	r3, [r2, #1]
  SatFlags.Gyros_ON_OFF = 0;
 8006bd6:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <main+0x9c>)
 8006bd8:	7853      	ldrb	r3, [r2, #1]
 8006bda:	f36f 0382 	bfc	r3, #2, #1
 8006bde:	7053      	strb	r3, [r2, #1]
  SatFlags.BeaconEnabled = 0;
 8006be0:	4a06      	ldr	r2, [pc, #24]	; (8006bfc <main+0x9c>)
 8006be2:	7813      	ldrb	r3, [r2, #0]
 8006be4:	f36f 1386 	bfc	r3, #6, #1
 8006be8:	7013      	strb	r3, [r2, #0]

  GroundStationRxDataLength = 4;
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <main+0xa0>)
 8006bec:	2204      	movs	r2, #4
 8006bee:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, GroundStationRxBuffer, 4);
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	4904      	ldr	r1, [pc, #16]	; (8006c04 <main+0xa4>)
 8006bf4:	4804      	ldr	r0, [pc, #16]	; (8006c08 <main+0xa8>)
 8006bf6:	f7fd f9ab 	bl	8003f50 <HAL_UART_Receive_IT>
//  HAL_I2C_Master_Receive_IT(&hi2c1, 0x18 << 1, data_echo, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006bfa:	e7fe      	b.n	8006bfa <main+0x9a>
 8006bfc:	20000100 	.word	0x20000100
 8006c00:	200000fc 	.word	0x200000fc
 8006c04:	200000f4 	.word	0x200000f4
 8006c08:	20000104 	.word	0x20000104

08006c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b094      	sub	sp, #80	; 0x50
 8006c10:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c12:	f107 0320 	add.w	r3, r7, #32
 8006c16:	2230      	movs	r2, #48	; 0x30
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fac5 	bl	80071aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	60da      	str	r2, [r3, #12]
 8006c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c30:	2300      	movs	r3, #0
 8006c32:	60bb      	str	r3, [r7, #8]
 8006c34:	4b23      	ldr	r3, [pc, #140]	; (8006cc4 <SystemClock_Config+0xb8>)
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	4a22      	ldr	r2, [pc, #136]	; (8006cc4 <SystemClock_Config+0xb8>)
 8006c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8006c40:	4b20      	ldr	r3, [pc, #128]	; (8006cc4 <SystemClock_Config+0xb8>)
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c48:	60bb      	str	r3, [r7, #8]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	607b      	str	r3, [r7, #4]
 8006c50:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <SystemClock_Config+0xbc>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006c58:	4a1b      	ldr	r2, [pc, #108]	; (8006cc8 <SystemClock_Config+0xbc>)
 8006c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <SystemClock_Config+0xbc>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c68:	607b      	str	r3, [r7, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c70:	2301      	movs	r3, #1
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c74:	2310      	movs	r3, #16
 8006c76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c7c:	f107 0320 	add.w	r3, r7, #32
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fc fc43 	bl	800350c <HAL_RCC_OscConfig>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8006c8c:	f000 f874 	bl	8006d78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c90:	230f      	movs	r3, #15
 8006c92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006c94:	2300      	movs	r3, #0
 8006c96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006ca4:	f107 030c 	add.w	r3, r7, #12
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fc fe9e 	bl	80039ec <HAL_RCC_ClockConfig>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006cb6:	f000 f85f 	bl	8006d78 <Error_Handler>
  }
}
 8006cba:	bf00      	nop
 8006cbc:	3750      	adds	r7, #80	; 0x50
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	40007000 	.word	0x40007000

08006ccc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){ //OBC connected to computer
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <HAL_UART_RxCpltCallback+0x60>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d117      	bne.n	8006d0c <HAL_UART_RxCpltCallback+0x40>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 8006cdc:	f107 030c 	add.w	r3, r7, #12
 8006ce0:	4913      	ldr	r1, [pc, #76]	; (8006d30 <HAL_UART_RxCpltCallback+0x64>)
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fdca 	bl	800587c <parseCySatPacket>
 8006ce8:	f107 030c 	add.w	r3, r7, #12
 8006cec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006cf0:	f7fe fe84 	bl	80059fc <handleCySatPacket>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cfa:	d101      	bne.n	8006d00 <HAL_UART_RxCpltCallback+0x34>
            sendErrorPacket();
 8006cfc:	f7fe fe58 	bl	80059b0 <sendErrorPacket>
        }
		HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);
 8006d00:	2204      	movs	r2, #4
 8006d02:	490b      	ldr	r1, [pc, #44]	; (8006d30 <HAL_UART_RxCpltCallback+0x64>)
 8006d04:	4809      	ldr	r0, [pc, #36]	; (8006d2c <HAL_UART_RxCpltCallback+0x60>)
 8006d06:	f7fd f923 	bl	8003f50 <HAL_UART_Receive_IT>
	}
	else if(huart == &huart6){ //OBC connected to Payload
		debug_printf("Got UART6 Connection!");
		HAL_UART_Receive_IT(&huart6, data_echo, 1);
	}
}
 8006d0a:	e00b      	b.n	8006d24 <HAL_UART_RxCpltCallback+0x58>
	else if(huart == &huart6){ //OBC connected to Payload
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <HAL_UART_RxCpltCallback+0x68>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d107      	bne.n	8006d24 <HAL_UART_RxCpltCallback+0x58>
		debug_printf("Got UART6 Connection!");
 8006d14:	4808      	ldr	r0, [pc, #32]	; (8006d38 <HAL_UART_RxCpltCallback+0x6c>)
 8006d16:	f7ff fe03 	bl	8006920 <debug_printf>
		HAL_UART_Receive_IT(&huart6, data_echo, 1);
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	4907      	ldr	r1, [pc, #28]	; (8006d3c <HAL_UART_RxCpltCallback+0x70>)
 8006d1e:	4805      	ldr	r0, [pc, #20]	; (8006d34 <HAL_UART_RxCpltCallback+0x68>)
 8006d20:	f7fd f916 	bl	8003f50 <HAL_UART_Receive_IT>
}
 8006d24:	bf00      	nop
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20000104 	.word	0x20000104
 8006d30:	200000f4 	.word	0x200000f4
 8006d34:	20000144 	.word	0x20000144
 8006d38:	08007a5c 	.word	0x08007a5c
 8006d3c:	20000008 	.word	0x20000008

08006d40 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){ //OBC connected to EPS, UHF, and ADCS
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a08      	ldr	r2, [pc, #32]	; (8006d6c <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d108      	bne.n	8006d62 <HAL_I2C_MasterRxCpltCallback+0x22>
		debug_printf("Got I2C Connection!");
 8006d50:	4807      	ldr	r0, [pc, #28]	; (8006d70 <HAL_I2C_MasterRxCpltCallback+0x30>)
 8006d52:	f7ff fde5 	bl	8006920 <debug_printf>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x18 << 1, data_echo, 1);
 8006d56:	2301      	movs	r3, #1
 8006d58:	4a06      	ldr	r2, [pc, #24]	; (8006d74 <HAL_I2C_MasterRxCpltCallback+0x34>)
 8006d5a:	2130      	movs	r1, #48	; 0x30
 8006d5c:	4803      	ldr	r0, [pc, #12]	; (8006d6c <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8006d5e:	f7fa fbeb 	bl	8001538 <HAL_I2C_Master_Receive_IT>
	}
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	200000a0 	.word	0x200000a0
 8006d70:	08007a74 	.word	0x08007a74
 8006d74:	20000008 	.word	0x20000008

08006d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006d7c:	bf00      	nop
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	607b      	str	r3, [r7, #4]
 8006d92:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <HAL_MspInit+0x4c>)
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	4a0f      	ldr	r2, [pc, #60]	; (8006dd4 <HAL_MspInit+0x4c>)
 8006d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	; (8006dd4 <HAL_MspInit+0x4c>)
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da6:	607b      	str	r3, [r7, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006daa:	2300      	movs	r3, #0
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <HAL_MspInit+0x4c>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	4a08      	ldr	r2, [pc, #32]	; (8006dd4 <HAL_MspInit+0x4c>)
 8006db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dba:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <HAL_MspInit+0x4c>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40023800 	.word	0x40023800

08006dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006ddc:	bf00      	nop
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006de6:	b480      	push	{r7}
 8006de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006dea:	e7fe      	b.n	8006dea <HardFault_Handler+0x4>

08006dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006df0:	e7fe      	b.n	8006df0 <MemManage_Handler+0x4>

08006df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006df2:	b480      	push	{r7}
 8006df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006df6:	e7fe      	b.n	8006df6 <BusFault_Handler+0x4>

08006df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006dfc:	e7fe      	b.n	8006dfc <UsageFault_Handler+0x4>

08006dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006e02:	bf00      	nop
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e10:	bf00      	nop
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e1e:	bf00      	nop
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e2c:	f7f9 fc02 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e30:	bf00      	nop
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006e38:	4802      	ldr	r0, [pc, #8]	; (8006e44 <I2C1_EV_IRQHandler+0x10>)
 8006e3a:	f7fa fc2b 	bl	8001694 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200000a0 	.word	0x200000a0

08006e48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006e4c:	4802      	ldr	r0, [pc, #8]	; (8006e58 <USART1_IRQHandler+0x10>)
 8006e4e:	f7fd f8d5 	bl	8003ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006e52:	bf00      	nop
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000104 	.word	0x20000104

08006e5c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006e60:	4802      	ldr	r0, [pc, #8]	; (8006e6c <USART6_IRQHandler+0x10>)
 8006e62:	f7fd f8cb 	bl	8003ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006e66:	bf00      	nop
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000144 	.word	0x20000144

08006e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e78:	4a14      	ldr	r2, [pc, #80]	; (8006ecc <_sbrk+0x5c>)
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <_sbrk+0x60>)
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e84:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <_sbrk+0x64>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e8c:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <_sbrk+0x64>)
 8006e8e:	4a12      	ldr	r2, [pc, #72]	; (8006ed8 <_sbrk+0x68>)
 8006e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <_sbrk+0x64>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4413      	add	r3, r2
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d207      	bcs.n	8006eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ea0:	f000 f93e 	bl	8007120 <__errno>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	230c      	movs	r3, #12
 8006ea8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eae:	e009      	b.n	8006ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006eb0:	4b08      	ldr	r3, [pc, #32]	; (8006ed4 <_sbrk+0x64>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <_sbrk+0x64>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	4a05      	ldr	r2, [pc, #20]	; (8006ed4 <_sbrk+0x64>)
 8006ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20030000 	.word	0x20030000
 8006ed0:	00000400 	.word	0x00000400
 8006ed4:	20000090 	.word	0x20000090
 8006ed8:	20000188 	.word	0x20000188

08006edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ee0:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <SystemInit+0x28>)
 8006ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee6:	4a07      	ldr	r2, [pc, #28]	; (8006f04 <SystemInit+0x28>)
 8006ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ef0:	4b04      	ldr	r3, [pc, #16]	; (8006f04 <SystemInit+0x28>)
 8006ef2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ef6:	609a      	str	r2, [r3, #8]
#endif
}
 8006ef8:	bf00      	nop
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	e000ed00 	.word	0xe000ed00

08006f08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006f0c:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <MX_USART1_UART_Init+0x4c>)
 8006f0e:	4a12      	ldr	r2, [pc, #72]	; (8006f58 <MX_USART1_UART_Init+0x50>)
 8006f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006f12:	4b10      	ldr	r3, [pc, #64]	; (8006f54 <MX_USART1_UART_Init+0x4c>)
 8006f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f1a:	4b0e      	ldr	r3, [pc, #56]	; (8006f54 <MX_USART1_UART_Init+0x4c>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <MX_USART1_UART_Init+0x4c>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <MX_USART1_UART_Init+0x4c>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <MX_USART1_UART_Init+0x4c>)
 8006f2e:	220c      	movs	r2, #12
 8006f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f32:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <MX_USART1_UART_Init+0x4c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f38:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <MX_USART1_UART_Init+0x4c>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f3e:	4805      	ldr	r0, [pc, #20]	; (8006f54 <MX_USART1_UART_Init+0x4c>)
 8006f40:	f7fc ff20 	bl	8003d84 <HAL_UART_Init>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006f4a:	f7ff ff15 	bl	8006d78 <Error_Handler>
  }

}
 8006f4e:	bf00      	nop
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000104 	.word	0x20000104
 8006f58:	40011000 	.word	0x40011000

08006f5c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <MX_USART6_UART_Init+0x4c>)
 8006f62:	4a12      	ldr	r2, [pc, #72]	; (8006fac <MX_USART6_UART_Init+0x50>)
 8006f64:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8006f66:	4b10      	ldr	r3, [pc, #64]	; (8006fa8 <MX_USART6_UART_Init+0x4c>)
 8006f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f6c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006f6e:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <MX_USART6_UART_Init+0x4c>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <MX_USART6_UART_Init+0x4c>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <MX_USART6_UART_Init+0x4c>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006f80:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <MX_USART6_UART_Init+0x4c>)
 8006f82:	220c      	movs	r2, #12
 8006f84:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f86:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <MX_USART6_UART_Init+0x4c>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <MX_USART6_UART_Init+0x4c>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006f92:	4805      	ldr	r0, [pc, #20]	; (8006fa8 <MX_USART6_UART_Init+0x4c>)
 8006f94:	f7fc fef6 	bl	8003d84 <HAL_UART_Init>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006f9e:	f7ff feeb 	bl	8006d78 <Error_Handler>
  }

}
 8006fa2:	bf00      	nop
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000144 	.word	0x20000144
 8006fac:	40011400 	.word	0x40011400

08006fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08c      	sub	sp, #48	; 0x30
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fb8:	f107 031c 	add.w	r3, r7, #28
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	605a      	str	r2, [r3, #4]
 8006fc2:	609a      	str	r2, [r3, #8]
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a3a      	ldr	r2, [pc, #232]	; (80070b8 <HAL_UART_MspInit+0x108>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d135      	bne.n	800703e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <HAL_UART_MspInit+0x10c>)
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fda:	4a38      	ldr	r2, [pc, #224]	; (80070bc <HAL_UART_MspInit+0x10c>)
 8006fdc:	f043 0310 	orr.w	r3, r3, #16
 8006fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fe2:	4b36      	ldr	r3, [pc, #216]	; (80070bc <HAL_UART_MspInit+0x10c>)
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	4b32      	ldr	r3, [pc, #200]	; (80070bc <HAL_UART_MspInit+0x10c>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	4a31      	ldr	r2, [pc, #196]	; (80070bc <HAL_UART_MspInit+0x10c>)
 8006ff8:	f043 0301 	orr.w	r3, r3, #1
 8006ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ffe:	4b2f      	ldr	r3, [pc, #188]	; (80070bc <HAL_UART_MspInit+0x10c>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800700a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800700e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007010:	2302      	movs	r3, #2
 8007012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007014:	2300      	movs	r3, #0
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007018:	2303      	movs	r3, #3
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800701c:	2307      	movs	r3, #7
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007020:	f107 031c 	add.w	r3, r7, #28
 8007024:	4619      	mov	r1, r3
 8007026:	4826      	ldr	r0, [pc, #152]	; (80070c0 <HAL_UART_MspInit+0x110>)
 8007028:	f7f9 fc66 	bl	80008f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800702c:	2200      	movs	r2, #0
 800702e:	2100      	movs	r1, #0
 8007030:	2025      	movs	r0, #37	; 0x25
 8007032:	f7f9 fbfa 	bl	800082a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007036:	2025      	movs	r0, #37	; 0x25
 8007038:	f7f9 fc13 	bl	8000862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800703c:	e038      	b.n	80070b0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a20      	ldr	r2, [pc, #128]	; (80070c4 <HAL_UART_MspInit+0x114>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d133      	bne.n	80070b0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007048:	2300      	movs	r3, #0
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <HAL_UART_MspInit+0x10c>)
 800704e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007050:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <HAL_UART_MspInit+0x10c>)
 8007052:	f043 0320 	orr.w	r3, r3, #32
 8007056:	6453      	str	r3, [r2, #68]	; 0x44
 8007058:	4b18      	ldr	r3, [pc, #96]	; (80070bc <HAL_UART_MspInit+0x10c>)
 800705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	4b14      	ldr	r3, [pc, #80]	; (80070bc <HAL_UART_MspInit+0x10c>)
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	4a13      	ldr	r2, [pc, #76]	; (80070bc <HAL_UART_MspInit+0x10c>)
 800706e:	f043 0304 	orr.w	r3, r3, #4
 8007072:	6313      	str	r3, [r2, #48]	; 0x30
 8007074:	4b11      	ldr	r3, [pc, #68]	; (80070bc <HAL_UART_MspInit+0x10c>)
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007080:	23c0      	movs	r3, #192	; 0xc0
 8007082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007084:	2302      	movs	r3, #2
 8007086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007088:	2300      	movs	r3, #0
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800708c:	2303      	movs	r3, #3
 800708e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007090:	2308      	movs	r3, #8
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007094:	f107 031c 	add.w	r3, r7, #28
 8007098:	4619      	mov	r1, r3
 800709a:	480b      	ldr	r0, [pc, #44]	; (80070c8 <HAL_UART_MspInit+0x118>)
 800709c:	f7f9 fc2c 	bl	80008f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80070a0:	2200      	movs	r2, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	2047      	movs	r0, #71	; 0x47
 80070a6:	f7f9 fbc0 	bl	800082a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80070aa:	2047      	movs	r0, #71	; 0x47
 80070ac:	f7f9 fbd9 	bl	8000862 <HAL_NVIC_EnableIRQ>
}
 80070b0:	bf00      	nop
 80070b2:	3730      	adds	r7, #48	; 0x30
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	40011000 	.word	0x40011000
 80070bc:	40023800 	.word	0x40023800
 80070c0:	40020000 	.word	0x40020000
 80070c4:	40011400 	.word	0x40011400
 80070c8:	40020800 	.word	0x40020800

080070cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80070cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007104 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80070d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80070d2:	e003      	b.n	80070dc <LoopCopyDataInit>

080070d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80070d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80070d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80070da:	3104      	adds	r1, #4

080070dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80070dc:	480b      	ldr	r0, [pc, #44]	; (800710c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80070e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80070e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80070e4:	d3f6      	bcc.n	80070d4 <CopyDataInit>
  ldr  r2, =_sbss
 80070e6:	4a0b      	ldr	r2, [pc, #44]	; (8007114 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80070e8:	e002      	b.n	80070f0 <LoopFillZerobss>

080070ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80070ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80070ec:	f842 3b04 	str.w	r3, [r2], #4

080070f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80070f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80070f4:	d3f9      	bcc.n	80070ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80070f6:	f7ff fef1 	bl	8006edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070fa:	f000 f817 	bl	800712c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070fe:	f7ff fd2f 	bl	8006b60 <main>
  bx  lr    
 8007102:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007104:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007108:	08007ae4 	.word	0x08007ae4
  ldr  r0, =_sdata
 800710c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007110:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8007114:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8007118:	20000188 	.word	0x20000188

0800711c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800711c:	e7fe      	b.n	800711c <ADC_IRQHandler>
	...

08007120 <__errno>:
 8007120:	4b01      	ldr	r3, [pc, #4]	; (8007128 <__errno+0x8>)
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000010 	.word	0x20000010

0800712c <__libc_init_array>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	4e0d      	ldr	r6, [pc, #52]	; (8007164 <__libc_init_array+0x38>)
 8007130:	4c0d      	ldr	r4, [pc, #52]	; (8007168 <__libc_init_array+0x3c>)
 8007132:	1ba4      	subs	r4, r4, r6
 8007134:	10a4      	asrs	r4, r4, #2
 8007136:	2500      	movs	r5, #0
 8007138:	42a5      	cmp	r5, r4
 800713a:	d109      	bne.n	8007150 <__libc_init_array+0x24>
 800713c:	4e0b      	ldr	r6, [pc, #44]	; (800716c <__libc_init_array+0x40>)
 800713e:	4c0c      	ldr	r4, [pc, #48]	; (8007170 <__libc_init_array+0x44>)
 8007140:	f000 fc52 	bl	80079e8 <_init>
 8007144:	1ba4      	subs	r4, r4, r6
 8007146:	10a4      	asrs	r4, r4, #2
 8007148:	2500      	movs	r5, #0
 800714a:	42a5      	cmp	r5, r4
 800714c:	d105      	bne.n	800715a <__libc_init_array+0x2e>
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007154:	4798      	blx	r3
 8007156:	3501      	adds	r5, #1
 8007158:	e7ee      	b.n	8007138 <__libc_init_array+0xc>
 800715a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800715e:	4798      	blx	r3
 8007160:	3501      	adds	r5, #1
 8007162:	e7f2      	b.n	800714a <__libc_init_array+0x1e>
 8007164:	08007adc 	.word	0x08007adc
 8007168:	08007adc 	.word	0x08007adc
 800716c:	08007adc 	.word	0x08007adc
 8007170:	08007ae0 	.word	0x08007ae0

08007174 <malloc>:
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <malloc+0xc>)
 8007176:	4601      	mov	r1, r0
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f000 b86d 	b.w	8007258 <_malloc_r>
 800717e:	bf00      	nop
 8007180:	20000010 	.word	0x20000010

08007184 <free>:
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <free+0xc>)
 8007186:	4601      	mov	r1, r0
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	f000 b817 	b.w	80071bc <_free_r>
 800718e:	bf00      	nop
 8007190:	20000010 	.word	0x20000010

08007194 <memcpy>:
 8007194:	b510      	push	{r4, lr}
 8007196:	1e43      	subs	r3, r0, #1
 8007198:	440a      	add	r2, r1
 800719a:	4291      	cmp	r1, r2
 800719c:	d100      	bne.n	80071a0 <memcpy+0xc>
 800719e:	bd10      	pop	{r4, pc}
 80071a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a8:	e7f7      	b.n	800719a <memcpy+0x6>

080071aa <memset>:
 80071aa:	4402      	add	r2, r0
 80071ac:	4603      	mov	r3, r0
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d100      	bne.n	80071b4 <memset+0xa>
 80071b2:	4770      	bx	lr
 80071b4:	f803 1b01 	strb.w	r1, [r3], #1
 80071b8:	e7f9      	b.n	80071ae <memset+0x4>
	...

080071bc <_free_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4605      	mov	r5, r0
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d045      	beq.n	8007250 <_free_r+0x94>
 80071c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071c8:	1f0c      	subs	r4, r1, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bfb8      	it	lt
 80071ce:	18e4      	addlt	r4, r4, r3
 80071d0:	f000 f8e6 	bl	80073a0 <__malloc_lock>
 80071d4:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <_free_r+0x98>)
 80071d6:	6813      	ldr	r3, [r2, #0]
 80071d8:	4610      	mov	r0, r2
 80071da:	b933      	cbnz	r3, 80071ea <_free_r+0x2e>
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	6014      	str	r4, [r2, #0]
 80071e0:	4628      	mov	r0, r5
 80071e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071e6:	f000 b8dc 	b.w	80073a2 <__malloc_unlock>
 80071ea:	42a3      	cmp	r3, r4
 80071ec:	d90c      	bls.n	8007208 <_free_r+0x4c>
 80071ee:	6821      	ldr	r1, [r4, #0]
 80071f0:	1862      	adds	r2, r4, r1
 80071f2:	4293      	cmp	r3, r2
 80071f4:	bf04      	itt	eq
 80071f6:	681a      	ldreq	r2, [r3, #0]
 80071f8:	685b      	ldreq	r3, [r3, #4]
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	bf04      	itt	eq
 80071fe:	1852      	addeq	r2, r2, r1
 8007200:	6022      	streq	r2, [r4, #0]
 8007202:	6004      	str	r4, [r0, #0]
 8007204:	e7ec      	b.n	80071e0 <_free_r+0x24>
 8007206:	4613      	mov	r3, r2
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	b10a      	cbz	r2, 8007210 <_free_r+0x54>
 800720c:	42a2      	cmp	r2, r4
 800720e:	d9fa      	bls.n	8007206 <_free_r+0x4a>
 8007210:	6819      	ldr	r1, [r3, #0]
 8007212:	1858      	adds	r0, r3, r1
 8007214:	42a0      	cmp	r0, r4
 8007216:	d10b      	bne.n	8007230 <_free_r+0x74>
 8007218:	6820      	ldr	r0, [r4, #0]
 800721a:	4401      	add	r1, r0
 800721c:	1858      	adds	r0, r3, r1
 800721e:	4282      	cmp	r2, r0
 8007220:	6019      	str	r1, [r3, #0]
 8007222:	d1dd      	bne.n	80071e0 <_free_r+0x24>
 8007224:	6810      	ldr	r0, [r2, #0]
 8007226:	6852      	ldr	r2, [r2, #4]
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	4401      	add	r1, r0
 800722c:	6019      	str	r1, [r3, #0]
 800722e:	e7d7      	b.n	80071e0 <_free_r+0x24>
 8007230:	d902      	bls.n	8007238 <_free_r+0x7c>
 8007232:	230c      	movs	r3, #12
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	e7d3      	b.n	80071e0 <_free_r+0x24>
 8007238:	6820      	ldr	r0, [r4, #0]
 800723a:	1821      	adds	r1, r4, r0
 800723c:	428a      	cmp	r2, r1
 800723e:	bf04      	itt	eq
 8007240:	6811      	ldreq	r1, [r2, #0]
 8007242:	6852      	ldreq	r2, [r2, #4]
 8007244:	6062      	str	r2, [r4, #4]
 8007246:	bf04      	itt	eq
 8007248:	1809      	addeq	r1, r1, r0
 800724a:	6021      	streq	r1, [r4, #0]
 800724c:	605c      	str	r4, [r3, #4]
 800724e:	e7c7      	b.n	80071e0 <_free_r+0x24>
 8007250:	bd38      	pop	{r3, r4, r5, pc}
 8007252:	bf00      	nop
 8007254:	20000094 	.word	0x20000094

08007258 <_malloc_r>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	1ccd      	adds	r5, r1, #3
 800725c:	f025 0503 	bic.w	r5, r5, #3
 8007260:	3508      	adds	r5, #8
 8007262:	2d0c      	cmp	r5, #12
 8007264:	bf38      	it	cc
 8007266:	250c      	movcc	r5, #12
 8007268:	2d00      	cmp	r5, #0
 800726a:	4606      	mov	r6, r0
 800726c:	db01      	blt.n	8007272 <_malloc_r+0x1a>
 800726e:	42a9      	cmp	r1, r5
 8007270:	d903      	bls.n	800727a <_malloc_r+0x22>
 8007272:	230c      	movs	r3, #12
 8007274:	6033      	str	r3, [r6, #0]
 8007276:	2000      	movs	r0, #0
 8007278:	bd70      	pop	{r4, r5, r6, pc}
 800727a:	f000 f891 	bl	80073a0 <__malloc_lock>
 800727e:	4a21      	ldr	r2, [pc, #132]	; (8007304 <_malloc_r+0xac>)
 8007280:	6814      	ldr	r4, [r2, #0]
 8007282:	4621      	mov	r1, r4
 8007284:	b991      	cbnz	r1, 80072ac <_malloc_r+0x54>
 8007286:	4c20      	ldr	r4, [pc, #128]	; (8007308 <_malloc_r+0xb0>)
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	b91b      	cbnz	r3, 8007294 <_malloc_r+0x3c>
 800728c:	4630      	mov	r0, r6
 800728e:	f000 f83d 	bl	800730c <_sbrk_r>
 8007292:	6020      	str	r0, [r4, #0]
 8007294:	4629      	mov	r1, r5
 8007296:	4630      	mov	r0, r6
 8007298:	f000 f838 	bl	800730c <_sbrk_r>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d124      	bne.n	80072ea <_malloc_r+0x92>
 80072a0:	230c      	movs	r3, #12
 80072a2:	6033      	str	r3, [r6, #0]
 80072a4:	4630      	mov	r0, r6
 80072a6:	f000 f87c 	bl	80073a2 <__malloc_unlock>
 80072aa:	e7e4      	b.n	8007276 <_malloc_r+0x1e>
 80072ac:	680b      	ldr	r3, [r1, #0]
 80072ae:	1b5b      	subs	r3, r3, r5
 80072b0:	d418      	bmi.n	80072e4 <_malloc_r+0x8c>
 80072b2:	2b0b      	cmp	r3, #11
 80072b4:	d90f      	bls.n	80072d6 <_malloc_r+0x7e>
 80072b6:	600b      	str	r3, [r1, #0]
 80072b8:	50cd      	str	r5, [r1, r3]
 80072ba:	18cc      	adds	r4, r1, r3
 80072bc:	4630      	mov	r0, r6
 80072be:	f000 f870 	bl	80073a2 <__malloc_unlock>
 80072c2:	f104 000b 	add.w	r0, r4, #11
 80072c6:	1d23      	adds	r3, r4, #4
 80072c8:	f020 0007 	bic.w	r0, r0, #7
 80072cc:	1ac3      	subs	r3, r0, r3
 80072ce:	d0d3      	beq.n	8007278 <_malloc_r+0x20>
 80072d0:	425a      	negs	r2, r3
 80072d2:	50e2      	str	r2, [r4, r3]
 80072d4:	e7d0      	b.n	8007278 <_malloc_r+0x20>
 80072d6:	428c      	cmp	r4, r1
 80072d8:	684b      	ldr	r3, [r1, #4]
 80072da:	bf16      	itet	ne
 80072dc:	6063      	strne	r3, [r4, #4]
 80072de:	6013      	streq	r3, [r2, #0]
 80072e0:	460c      	movne	r4, r1
 80072e2:	e7eb      	b.n	80072bc <_malloc_r+0x64>
 80072e4:	460c      	mov	r4, r1
 80072e6:	6849      	ldr	r1, [r1, #4]
 80072e8:	e7cc      	b.n	8007284 <_malloc_r+0x2c>
 80072ea:	1cc4      	adds	r4, r0, #3
 80072ec:	f024 0403 	bic.w	r4, r4, #3
 80072f0:	42a0      	cmp	r0, r4
 80072f2:	d005      	beq.n	8007300 <_malloc_r+0xa8>
 80072f4:	1a21      	subs	r1, r4, r0
 80072f6:	4630      	mov	r0, r6
 80072f8:	f000 f808 	bl	800730c <_sbrk_r>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d0cf      	beq.n	80072a0 <_malloc_r+0x48>
 8007300:	6025      	str	r5, [r4, #0]
 8007302:	e7db      	b.n	80072bc <_malloc_r+0x64>
 8007304:	20000094 	.word	0x20000094
 8007308:	20000098 	.word	0x20000098

0800730c <_sbrk_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4c06      	ldr	r4, [pc, #24]	; (8007328 <_sbrk_r+0x1c>)
 8007310:	2300      	movs	r3, #0
 8007312:	4605      	mov	r5, r0
 8007314:	4608      	mov	r0, r1
 8007316:	6023      	str	r3, [r4, #0]
 8007318:	f7ff fdaa 	bl	8006e70 <_sbrk>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_sbrk_r+0x1a>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	b103      	cbz	r3, 8007326 <_sbrk_r+0x1a>
 8007324:	602b      	str	r3, [r5, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	20000184 	.word	0x20000184

0800732c <_vsniprintf_r>:
 800732c:	b530      	push	{r4, r5, lr}
 800732e:	1e14      	subs	r4, r2, #0
 8007330:	4605      	mov	r5, r0
 8007332:	b09b      	sub	sp, #108	; 0x6c
 8007334:	4618      	mov	r0, r3
 8007336:	da05      	bge.n	8007344 <_vsniprintf_r+0x18>
 8007338:	238b      	movs	r3, #139	; 0x8b
 800733a:	602b      	str	r3, [r5, #0]
 800733c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007340:	b01b      	add	sp, #108	; 0x6c
 8007342:	bd30      	pop	{r4, r5, pc}
 8007344:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007348:	f8ad 300c 	strh.w	r3, [sp, #12]
 800734c:	bf14      	ite	ne
 800734e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007352:	4623      	moveq	r3, r4
 8007354:	9302      	str	r3, [sp, #8]
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800735c:	9100      	str	r1, [sp, #0]
 800735e:	9104      	str	r1, [sp, #16]
 8007360:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007364:	4602      	mov	r2, r0
 8007366:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007368:	4669      	mov	r1, sp
 800736a:	4628      	mov	r0, r5
 800736c:	f000 f874 	bl	8007458 <_svfiprintf_r>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	bfbc      	itt	lt
 8007374:	238b      	movlt	r3, #139	; 0x8b
 8007376:	602b      	strlt	r3, [r5, #0]
 8007378:	2c00      	cmp	r4, #0
 800737a:	d0e1      	beq.n	8007340 <_vsniprintf_r+0x14>
 800737c:	9b00      	ldr	r3, [sp, #0]
 800737e:	2200      	movs	r2, #0
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	e7dd      	b.n	8007340 <_vsniprintf_r+0x14>

08007384 <vsniprintf>:
 8007384:	b507      	push	{r0, r1, r2, lr}
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4613      	mov	r3, r2
 800738a:	460a      	mov	r2, r1
 800738c:	4601      	mov	r1, r0
 800738e:	4803      	ldr	r0, [pc, #12]	; (800739c <vsniprintf+0x18>)
 8007390:	6800      	ldr	r0, [r0, #0]
 8007392:	f7ff ffcb 	bl	800732c <_vsniprintf_r>
 8007396:	b003      	add	sp, #12
 8007398:	f85d fb04 	ldr.w	pc, [sp], #4
 800739c:	20000010 	.word	0x20000010

080073a0 <__malloc_lock>:
 80073a0:	4770      	bx	lr

080073a2 <__malloc_unlock>:
 80073a2:	4770      	bx	lr

080073a4 <__ssputs_r>:
 80073a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a8:	688e      	ldr	r6, [r1, #8]
 80073aa:	429e      	cmp	r6, r3
 80073ac:	4682      	mov	sl, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	4690      	mov	r8, r2
 80073b2:	4699      	mov	r9, r3
 80073b4:	d837      	bhi.n	8007426 <__ssputs_r+0x82>
 80073b6:	898a      	ldrh	r2, [r1, #12]
 80073b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073bc:	d031      	beq.n	8007422 <__ssputs_r+0x7e>
 80073be:	6825      	ldr	r5, [r4, #0]
 80073c0:	6909      	ldr	r1, [r1, #16]
 80073c2:	1a6f      	subs	r7, r5, r1
 80073c4:	6965      	ldr	r5, [r4, #20]
 80073c6:	2302      	movs	r3, #2
 80073c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80073d0:	f109 0301 	add.w	r3, r9, #1
 80073d4:	443b      	add	r3, r7
 80073d6:	429d      	cmp	r5, r3
 80073d8:	bf38      	it	cc
 80073da:	461d      	movcc	r5, r3
 80073dc:	0553      	lsls	r3, r2, #21
 80073de:	d530      	bpl.n	8007442 <__ssputs_r+0x9e>
 80073e0:	4629      	mov	r1, r5
 80073e2:	f7ff ff39 	bl	8007258 <_malloc_r>
 80073e6:	4606      	mov	r6, r0
 80073e8:	b950      	cbnz	r0, 8007400 <__ssputs_r+0x5c>
 80073ea:	230c      	movs	r3, #12
 80073ec:	f8ca 3000 	str.w	r3, [sl]
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007400:	463a      	mov	r2, r7
 8007402:	6921      	ldr	r1, [r4, #16]
 8007404:	f7ff fec6 	bl	8007194 <memcpy>
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	6126      	str	r6, [r4, #16]
 8007416:	6165      	str	r5, [r4, #20]
 8007418:	443e      	add	r6, r7
 800741a:	1bed      	subs	r5, r5, r7
 800741c:	6026      	str	r6, [r4, #0]
 800741e:	60a5      	str	r5, [r4, #8]
 8007420:	464e      	mov	r6, r9
 8007422:	454e      	cmp	r6, r9
 8007424:	d900      	bls.n	8007428 <__ssputs_r+0x84>
 8007426:	464e      	mov	r6, r9
 8007428:	4632      	mov	r2, r6
 800742a:	4641      	mov	r1, r8
 800742c:	6820      	ldr	r0, [r4, #0]
 800742e:	f000 fa93 	bl	8007958 <memmove>
 8007432:	68a3      	ldr	r3, [r4, #8]
 8007434:	1b9b      	subs	r3, r3, r6
 8007436:	60a3      	str	r3, [r4, #8]
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	441e      	add	r6, r3
 800743c:	6026      	str	r6, [r4, #0]
 800743e:	2000      	movs	r0, #0
 8007440:	e7dc      	b.n	80073fc <__ssputs_r+0x58>
 8007442:	462a      	mov	r2, r5
 8007444:	f000 faa1 	bl	800798a <_realloc_r>
 8007448:	4606      	mov	r6, r0
 800744a:	2800      	cmp	r0, #0
 800744c:	d1e2      	bne.n	8007414 <__ssputs_r+0x70>
 800744e:	6921      	ldr	r1, [r4, #16]
 8007450:	4650      	mov	r0, sl
 8007452:	f7ff feb3 	bl	80071bc <_free_r>
 8007456:	e7c8      	b.n	80073ea <__ssputs_r+0x46>

08007458 <_svfiprintf_r>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	461d      	mov	r5, r3
 800745e:	898b      	ldrh	r3, [r1, #12]
 8007460:	061f      	lsls	r7, r3, #24
 8007462:	b09d      	sub	sp, #116	; 0x74
 8007464:	4680      	mov	r8, r0
 8007466:	460c      	mov	r4, r1
 8007468:	4616      	mov	r6, r2
 800746a:	d50f      	bpl.n	800748c <_svfiprintf_r+0x34>
 800746c:	690b      	ldr	r3, [r1, #16]
 800746e:	b96b      	cbnz	r3, 800748c <_svfiprintf_r+0x34>
 8007470:	2140      	movs	r1, #64	; 0x40
 8007472:	f7ff fef1 	bl	8007258 <_malloc_r>
 8007476:	6020      	str	r0, [r4, #0]
 8007478:	6120      	str	r0, [r4, #16]
 800747a:	b928      	cbnz	r0, 8007488 <_svfiprintf_r+0x30>
 800747c:	230c      	movs	r3, #12
 800747e:	f8c8 3000 	str.w	r3, [r8]
 8007482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007486:	e0c8      	b.n	800761a <_svfiprintf_r+0x1c2>
 8007488:	2340      	movs	r3, #64	; 0x40
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	2300      	movs	r3, #0
 800748e:	9309      	str	r3, [sp, #36]	; 0x24
 8007490:	2320      	movs	r3, #32
 8007492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007496:	2330      	movs	r3, #48	; 0x30
 8007498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800749c:	9503      	str	r5, [sp, #12]
 800749e:	f04f 0b01 	mov.w	fp, #1
 80074a2:	4637      	mov	r7, r6
 80074a4:	463d      	mov	r5, r7
 80074a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074aa:	b10b      	cbz	r3, 80074b0 <_svfiprintf_r+0x58>
 80074ac:	2b25      	cmp	r3, #37	; 0x25
 80074ae:	d13e      	bne.n	800752e <_svfiprintf_r+0xd6>
 80074b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80074b4:	d00b      	beq.n	80074ce <_svfiprintf_r+0x76>
 80074b6:	4653      	mov	r3, sl
 80074b8:	4632      	mov	r2, r6
 80074ba:	4621      	mov	r1, r4
 80074bc:	4640      	mov	r0, r8
 80074be:	f7ff ff71 	bl	80073a4 <__ssputs_r>
 80074c2:	3001      	adds	r0, #1
 80074c4:	f000 80a4 	beq.w	8007610 <_svfiprintf_r+0x1b8>
 80074c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ca:	4453      	add	r3, sl
 80074cc:	9309      	str	r3, [sp, #36]	; 0x24
 80074ce:	783b      	ldrb	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 809d 	beq.w	8007610 <_svfiprintf_r+0x1b8>
 80074d6:	2300      	movs	r3, #0
 80074d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	9307      	str	r3, [sp, #28]
 80074e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074e8:	931a      	str	r3, [sp, #104]	; 0x68
 80074ea:	462f      	mov	r7, r5
 80074ec:	2205      	movs	r2, #5
 80074ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80074f2:	4850      	ldr	r0, [pc, #320]	; (8007634 <_svfiprintf_r+0x1dc>)
 80074f4:	f7f8 fe7c 	bl	80001f0 <memchr>
 80074f8:	9b04      	ldr	r3, [sp, #16]
 80074fa:	b9d0      	cbnz	r0, 8007532 <_svfiprintf_r+0xda>
 80074fc:	06d9      	lsls	r1, r3, #27
 80074fe:	bf44      	itt	mi
 8007500:	2220      	movmi	r2, #32
 8007502:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007506:	071a      	lsls	r2, r3, #28
 8007508:	bf44      	itt	mi
 800750a:	222b      	movmi	r2, #43	; 0x2b
 800750c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007510:	782a      	ldrb	r2, [r5, #0]
 8007512:	2a2a      	cmp	r2, #42	; 0x2a
 8007514:	d015      	beq.n	8007542 <_svfiprintf_r+0xea>
 8007516:	9a07      	ldr	r2, [sp, #28]
 8007518:	462f      	mov	r7, r5
 800751a:	2000      	movs	r0, #0
 800751c:	250a      	movs	r5, #10
 800751e:	4639      	mov	r1, r7
 8007520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007524:	3b30      	subs	r3, #48	; 0x30
 8007526:	2b09      	cmp	r3, #9
 8007528:	d94d      	bls.n	80075c6 <_svfiprintf_r+0x16e>
 800752a:	b1b8      	cbz	r0, 800755c <_svfiprintf_r+0x104>
 800752c:	e00f      	b.n	800754e <_svfiprintf_r+0xf6>
 800752e:	462f      	mov	r7, r5
 8007530:	e7b8      	b.n	80074a4 <_svfiprintf_r+0x4c>
 8007532:	4a40      	ldr	r2, [pc, #256]	; (8007634 <_svfiprintf_r+0x1dc>)
 8007534:	1a80      	subs	r0, r0, r2
 8007536:	fa0b f000 	lsl.w	r0, fp, r0
 800753a:	4318      	orrs	r0, r3
 800753c:	9004      	str	r0, [sp, #16]
 800753e:	463d      	mov	r5, r7
 8007540:	e7d3      	b.n	80074ea <_svfiprintf_r+0x92>
 8007542:	9a03      	ldr	r2, [sp, #12]
 8007544:	1d11      	adds	r1, r2, #4
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	9103      	str	r1, [sp, #12]
 800754a:	2a00      	cmp	r2, #0
 800754c:	db01      	blt.n	8007552 <_svfiprintf_r+0xfa>
 800754e:	9207      	str	r2, [sp, #28]
 8007550:	e004      	b.n	800755c <_svfiprintf_r+0x104>
 8007552:	4252      	negs	r2, r2
 8007554:	f043 0302 	orr.w	r3, r3, #2
 8007558:	9207      	str	r2, [sp, #28]
 800755a:	9304      	str	r3, [sp, #16]
 800755c:	783b      	ldrb	r3, [r7, #0]
 800755e:	2b2e      	cmp	r3, #46	; 0x2e
 8007560:	d10c      	bne.n	800757c <_svfiprintf_r+0x124>
 8007562:	787b      	ldrb	r3, [r7, #1]
 8007564:	2b2a      	cmp	r3, #42	; 0x2a
 8007566:	d133      	bne.n	80075d0 <_svfiprintf_r+0x178>
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	1d1a      	adds	r2, r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	9203      	str	r2, [sp, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	bfb8      	it	lt
 8007574:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007578:	3702      	adds	r7, #2
 800757a:	9305      	str	r3, [sp, #20]
 800757c:	4d2e      	ldr	r5, [pc, #184]	; (8007638 <_svfiprintf_r+0x1e0>)
 800757e:	7839      	ldrb	r1, [r7, #0]
 8007580:	2203      	movs	r2, #3
 8007582:	4628      	mov	r0, r5
 8007584:	f7f8 fe34 	bl	80001f0 <memchr>
 8007588:	b138      	cbz	r0, 800759a <_svfiprintf_r+0x142>
 800758a:	2340      	movs	r3, #64	; 0x40
 800758c:	1b40      	subs	r0, r0, r5
 800758e:	fa03 f000 	lsl.w	r0, r3, r0
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	4303      	orrs	r3, r0
 8007596:	3701      	adds	r7, #1
 8007598:	9304      	str	r3, [sp, #16]
 800759a:	7839      	ldrb	r1, [r7, #0]
 800759c:	4827      	ldr	r0, [pc, #156]	; (800763c <_svfiprintf_r+0x1e4>)
 800759e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075a2:	2206      	movs	r2, #6
 80075a4:	1c7e      	adds	r6, r7, #1
 80075a6:	f7f8 fe23 	bl	80001f0 <memchr>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d038      	beq.n	8007620 <_svfiprintf_r+0x1c8>
 80075ae:	4b24      	ldr	r3, [pc, #144]	; (8007640 <_svfiprintf_r+0x1e8>)
 80075b0:	bb13      	cbnz	r3, 80075f8 <_svfiprintf_r+0x1a0>
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	3307      	adds	r3, #7
 80075b6:	f023 0307 	bic.w	r3, r3, #7
 80075ba:	3308      	adds	r3, #8
 80075bc:	9303      	str	r3, [sp, #12]
 80075be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c0:	444b      	add	r3, r9
 80075c2:	9309      	str	r3, [sp, #36]	; 0x24
 80075c4:	e76d      	b.n	80074a2 <_svfiprintf_r+0x4a>
 80075c6:	fb05 3202 	mla	r2, r5, r2, r3
 80075ca:	2001      	movs	r0, #1
 80075cc:	460f      	mov	r7, r1
 80075ce:	e7a6      	b.n	800751e <_svfiprintf_r+0xc6>
 80075d0:	2300      	movs	r3, #0
 80075d2:	3701      	adds	r7, #1
 80075d4:	9305      	str	r3, [sp, #20]
 80075d6:	4619      	mov	r1, r3
 80075d8:	250a      	movs	r5, #10
 80075da:	4638      	mov	r0, r7
 80075dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075e0:	3a30      	subs	r2, #48	; 0x30
 80075e2:	2a09      	cmp	r2, #9
 80075e4:	d903      	bls.n	80075ee <_svfiprintf_r+0x196>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0c8      	beq.n	800757c <_svfiprintf_r+0x124>
 80075ea:	9105      	str	r1, [sp, #20]
 80075ec:	e7c6      	b.n	800757c <_svfiprintf_r+0x124>
 80075ee:	fb05 2101 	mla	r1, r5, r1, r2
 80075f2:	2301      	movs	r3, #1
 80075f4:	4607      	mov	r7, r0
 80075f6:	e7f0      	b.n	80075da <_svfiprintf_r+0x182>
 80075f8:	ab03      	add	r3, sp, #12
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	4622      	mov	r2, r4
 80075fe:	4b11      	ldr	r3, [pc, #68]	; (8007644 <_svfiprintf_r+0x1ec>)
 8007600:	a904      	add	r1, sp, #16
 8007602:	4640      	mov	r0, r8
 8007604:	f3af 8000 	nop.w
 8007608:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800760c:	4681      	mov	r9, r0
 800760e:	d1d6      	bne.n	80075be <_svfiprintf_r+0x166>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	065b      	lsls	r3, r3, #25
 8007614:	f53f af35 	bmi.w	8007482 <_svfiprintf_r+0x2a>
 8007618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800761a:	b01d      	add	sp, #116	; 0x74
 800761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007620:	ab03      	add	r3, sp, #12
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4622      	mov	r2, r4
 8007626:	4b07      	ldr	r3, [pc, #28]	; (8007644 <_svfiprintf_r+0x1ec>)
 8007628:	a904      	add	r1, sp, #16
 800762a:	4640      	mov	r0, r8
 800762c:	f000 f882 	bl	8007734 <_printf_i>
 8007630:	e7ea      	b.n	8007608 <_svfiprintf_r+0x1b0>
 8007632:	bf00      	nop
 8007634:	08007aa0 	.word	0x08007aa0
 8007638:	08007aa6 	.word	0x08007aa6
 800763c:	08007aaa 	.word	0x08007aaa
 8007640:	00000000 	.word	0x00000000
 8007644:	080073a5 	.word	0x080073a5

08007648 <_printf_common>:
 8007648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800764c:	4691      	mov	r9, r2
 800764e:	461f      	mov	r7, r3
 8007650:	688a      	ldr	r2, [r1, #8]
 8007652:	690b      	ldr	r3, [r1, #16]
 8007654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007658:	4293      	cmp	r3, r2
 800765a:	bfb8      	it	lt
 800765c:	4613      	movlt	r3, r2
 800765e:	f8c9 3000 	str.w	r3, [r9]
 8007662:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007666:	4606      	mov	r6, r0
 8007668:	460c      	mov	r4, r1
 800766a:	b112      	cbz	r2, 8007672 <_printf_common+0x2a>
 800766c:	3301      	adds	r3, #1
 800766e:	f8c9 3000 	str.w	r3, [r9]
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	0699      	lsls	r1, r3, #26
 8007676:	bf42      	ittt	mi
 8007678:	f8d9 3000 	ldrmi.w	r3, [r9]
 800767c:	3302      	addmi	r3, #2
 800767e:	f8c9 3000 	strmi.w	r3, [r9]
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	f015 0506 	ands.w	r5, r5, #6
 8007688:	d107      	bne.n	800769a <_printf_common+0x52>
 800768a:	f104 0a19 	add.w	sl, r4, #25
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	f8d9 2000 	ldr.w	r2, [r9]
 8007694:	1a9b      	subs	r3, r3, r2
 8007696:	42ab      	cmp	r3, r5
 8007698:	dc28      	bgt.n	80076ec <_printf_common+0xa4>
 800769a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	3300      	adds	r3, #0
 80076a2:	bf18      	it	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	0692      	lsls	r2, r2, #26
 80076a8:	d42d      	bmi.n	8007706 <_printf_common+0xbe>
 80076aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076ae:	4639      	mov	r1, r7
 80076b0:	4630      	mov	r0, r6
 80076b2:	47c0      	blx	r8
 80076b4:	3001      	adds	r0, #1
 80076b6:	d020      	beq.n	80076fa <_printf_common+0xb2>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	68e5      	ldr	r5, [r4, #12]
 80076bc:	f8d9 2000 	ldr.w	r2, [r9]
 80076c0:	f003 0306 	and.w	r3, r3, #6
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	bf08      	it	eq
 80076c8:	1aad      	subeq	r5, r5, r2
 80076ca:	68a3      	ldr	r3, [r4, #8]
 80076cc:	6922      	ldr	r2, [r4, #16]
 80076ce:	bf0c      	ite	eq
 80076d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d4:	2500      	movne	r5, #0
 80076d6:	4293      	cmp	r3, r2
 80076d8:	bfc4      	itt	gt
 80076da:	1a9b      	subgt	r3, r3, r2
 80076dc:	18ed      	addgt	r5, r5, r3
 80076de:	f04f 0900 	mov.w	r9, #0
 80076e2:	341a      	adds	r4, #26
 80076e4:	454d      	cmp	r5, r9
 80076e6:	d11a      	bne.n	800771e <_printf_common+0xd6>
 80076e8:	2000      	movs	r0, #0
 80076ea:	e008      	b.n	80076fe <_printf_common+0xb6>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4652      	mov	r2, sl
 80076f0:	4639      	mov	r1, r7
 80076f2:	4630      	mov	r0, r6
 80076f4:	47c0      	blx	r8
 80076f6:	3001      	adds	r0, #1
 80076f8:	d103      	bne.n	8007702 <_printf_common+0xba>
 80076fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007702:	3501      	adds	r5, #1
 8007704:	e7c3      	b.n	800768e <_printf_common+0x46>
 8007706:	18e1      	adds	r1, r4, r3
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	2030      	movs	r0, #48	; 0x30
 800770c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007710:	4422      	add	r2, r4
 8007712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800771a:	3302      	adds	r3, #2
 800771c:	e7c5      	b.n	80076aa <_printf_common+0x62>
 800771e:	2301      	movs	r3, #1
 8007720:	4622      	mov	r2, r4
 8007722:	4639      	mov	r1, r7
 8007724:	4630      	mov	r0, r6
 8007726:	47c0      	blx	r8
 8007728:	3001      	adds	r0, #1
 800772a:	d0e6      	beq.n	80076fa <_printf_common+0xb2>
 800772c:	f109 0901 	add.w	r9, r9, #1
 8007730:	e7d8      	b.n	80076e4 <_printf_common+0x9c>
	...

08007734 <_printf_i>:
 8007734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007738:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800773c:	460c      	mov	r4, r1
 800773e:	7e09      	ldrb	r1, [r1, #24]
 8007740:	b085      	sub	sp, #20
 8007742:	296e      	cmp	r1, #110	; 0x6e
 8007744:	4617      	mov	r7, r2
 8007746:	4606      	mov	r6, r0
 8007748:	4698      	mov	r8, r3
 800774a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800774c:	f000 80b3 	beq.w	80078b6 <_printf_i+0x182>
 8007750:	d822      	bhi.n	8007798 <_printf_i+0x64>
 8007752:	2963      	cmp	r1, #99	; 0x63
 8007754:	d036      	beq.n	80077c4 <_printf_i+0x90>
 8007756:	d80a      	bhi.n	800776e <_printf_i+0x3a>
 8007758:	2900      	cmp	r1, #0
 800775a:	f000 80b9 	beq.w	80078d0 <_printf_i+0x19c>
 800775e:	2958      	cmp	r1, #88	; 0x58
 8007760:	f000 8083 	beq.w	800786a <_printf_i+0x136>
 8007764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007768:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800776c:	e032      	b.n	80077d4 <_printf_i+0xa0>
 800776e:	2964      	cmp	r1, #100	; 0x64
 8007770:	d001      	beq.n	8007776 <_printf_i+0x42>
 8007772:	2969      	cmp	r1, #105	; 0x69
 8007774:	d1f6      	bne.n	8007764 <_printf_i+0x30>
 8007776:	6820      	ldr	r0, [r4, #0]
 8007778:	6813      	ldr	r3, [r2, #0]
 800777a:	0605      	lsls	r5, r0, #24
 800777c:	f103 0104 	add.w	r1, r3, #4
 8007780:	d52a      	bpl.n	80077d8 <_printf_i+0xa4>
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6011      	str	r1, [r2, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	da03      	bge.n	8007792 <_printf_i+0x5e>
 800778a:	222d      	movs	r2, #45	; 0x2d
 800778c:	425b      	negs	r3, r3
 800778e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007792:	486f      	ldr	r0, [pc, #444]	; (8007950 <_printf_i+0x21c>)
 8007794:	220a      	movs	r2, #10
 8007796:	e039      	b.n	800780c <_printf_i+0xd8>
 8007798:	2973      	cmp	r1, #115	; 0x73
 800779a:	f000 809d 	beq.w	80078d8 <_printf_i+0x1a4>
 800779e:	d808      	bhi.n	80077b2 <_printf_i+0x7e>
 80077a0:	296f      	cmp	r1, #111	; 0x6f
 80077a2:	d020      	beq.n	80077e6 <_printf_i+0xb2>
 80077a4:	2970      	cmp	r1, #112	; 0x70
 80077a6:	d1dd      	bne.n	8007764 <_printf_i+0x30>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	f043 0320 	orr.w	r3, r3, #32
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	e003      	b.n	80077ba <_printf_i+0x86>
 80077b2:	2975      	cmp	r1, #117	; 0x75
 80077b4:	d017      	beq.n	80077e6 <_printf_i+0xb2>
 80077b6:	2978      	cmp	r1, #120	; 0x78
 80077b8:	d1d4      	bne.n	8007764 <_printf_i+0x30>
 80077ba:	2378      	movs	r3, #120	; 0x78
 80077bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077c0:	4864      	ldr	r0, [pc, #400]	; (8007954 <_printf_i+0x220>)
 80077c2:	e055      	b.n	8007870 <_printf_i+0x13c>
 80077c4:	6813      	ldr	r3, [r2, #0]
 80077c6:	1d19      	adds	r1, r3, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6011      	str	r1, [r2, #0]
 80077cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d4:	2301      	movs	r3, #1
 80077d6:	e08c      	b.n	80078f2 <_printf_i+0x1be>
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6011      	str	r1, [r2, #0]
 80077dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077e0:	bf18      	it	ne
 80077e2:	b21b      	sxthne	r3, r3
 80077e4:	e7cf      	b.n	8007786 <_printf_i+0x52>
 80077e6:	6813      	ldr	r3, [r2, #0]
 80077e8:	6825      	ldr	r5, [r4, #0]
 80077ea:	1d18      	adds	r0, r3, #4
 80077ec:	6010      	str	r0, [r2, #0]
 80077ee:	0628      	lsls	r0, r5, #24
 80077f0:	d501      	bpl.n	80077f6 <_printf_i+0xc2>
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	e002      	b.n	80077fc <_printf_i+0xc8>
 80077f6:	0668      	lsls	r0, r5, #25
 80077f8:	d5fb      	bpl.n	80077f2 <_printf_i+0xbe>
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	4854      	ldr	r0, [pc, #336]	; (8007950 <_printf_i+0x21c>)
 80077fe:	296f      	cmp	r1, #111	; 0x6f
 8007800:	bf14      	ite	ne
 8007802:	220a      	movne	r2, #10
 8007804:	2208      	moveq	r2, #8
 8007806:	2100      	movs	r1, #0
 8007808:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800780c:	6865      	ldr	r5, [r4, #4]
 800780e:	60a5      	str	r5, [r4, #8]
 8007810:	2d00      	cmp	r5, #0
 8007812:	f2c0 8095 	blt.w	8007940 <_printf_i+0x20c>
 8007816:	6821      	ldr	r1, [r4, #0]
 8007818:	f021 0104 	bic.w	r1, r1, #4
 800781c:	6021      	str	r1, [r4, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d13d      	bne.n	800789e <_printf_i+0x16a>
 8007822:	2d00      	cmp	r5, #0
 8007824:	f040 808e 	bne.w	8007944 <_printf_i+0x210>
 8007828:	4665      	mov	r5, ip
 800782a:	2a08      	cmp	r2, #8
 800782c:	d10b      	bne.n	8007846 <_printf_i+0x112>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	07db      	lsls	r3, r3, #31
 8007832:	d508      	bpl.n	8007846 <_printf_i+0x112>
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	6862      	ldr	r2, [r4, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	bfde      	ittt	le
 800783c:	2330      	movle	r3, #48	; 0x30
 800783e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007842:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007846:	ebac 0305 	sub.w	r3, ip, r5
 800784a:	6123      	str	r3, [r4, #16]
 800784c:	f8cd 8000 	str.w	r8, [sp]
 8007850:	463b      	mov	r3, r7
 8007852:	aa03      	add	r2, sp, #12
 8007854:	4621      	mov	r1, r4
 8007856:	4630      	mov	r0, r6
 8007858:	f7ff fef6 	bl	8007648 <_printf_common>
 800785c:	3001      	adds	r0, #1
 800785e:	d14d      	bne.n	80078fc <_printf_i+0x1c8>
 8007860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007864:	b005      	add	sp, #20
 8007866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800786a:	4839      	ldr	r0, [pc, #228]	; (8007950 <_printf_i+0x21c>)
 800786c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007870:	6813      	ldr	r3, [r2, #0]
 8007872:	6821      	ldr	r1, [r4, #0]
 8007874:	1d1d      	adds	r5, r3, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6015      	str	r5, [r2, #0]
 800787a:	060a      	lsls	r2, r1, #24
 800787c:	d50b      	bpl.n	8007896 <_printf_i+0x162>
 800787e:	07ca      	lsls	r2, r1, #31
 8007880:	bf44      	itt	mi
 8007882:	f041 0120 	orrmi.w	r1, r1, #32
 8007886:	6021      	strmi	r1, [r4, #0]
 8007888:	b91b      	cbnz	r3, 8007892 <_printf_i+0x15e>
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	f022 0220 	bic.w	r2, r2, #32
 8007890:	6022      	str	r2, [r4, #0]
 8007892:	2210      	movs	r2, #16
 8007894:	e7b7      	b.n	8007806 <_printf_i+0xd2>
 8007896:	064d      	lsls	r5, r1, #25
 8007898:	bf48      	it	mi
 800789a:	b29b      	uxthmi	r3, r3
 800789c:	e7ef      	b.n	800787e <_printf_i+0x14a>
 800789e:	4665      	mov	r5, ip
 80078a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80078a4:	fb02 3311 	mls	r3, r2, r1, r3
 80078a8:	5cc3      	ldrb	r3, [r0, r3]
 80078aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80078ae:	460b      	mov	r3, r1
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d1f5      	bne.n	80078a0 <_printf_i+0x16c>
 80078b4:	e7b9      	b.n	800782a <_printf_i+0xf6>
 80078b6:	6813      	ldr	r3, [r2, #0]
 80078b8:	6825      	ldr	r5, [r4, #0]
 80078ba:	6961      	ldr	r1, [r4, #20]
 80078bc:	1d18      	adds	r0, r3, #4
 80078be:	6010      	str	r0, [r2, #0]
 80078c0:	0628      	lsls	r0, r5, #24
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	d501      	bpl.n	80078ca <_printf_i+0x196>
 80078c6:	6019      	str	r1, [r3, #0]
 80078c8:	e002      	b.n	80078d0 <_printf_i+0x19c>
 80078ca:	066a      	lsls	r2, r5, #25
 80078cc:	d5fb      	bpl.n	80078c6 <_printf_i+0x192>
 80078ce:	8019      	strh	r1, [r3, #0]
 80078d0:	2300      	movs	r3, #0
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	4665      	mov	r5, ip
 80078d6:	e7b9      	b.n	800784c <_printf_i+0x118>
 80078d8:	6813      	ldr	r3, [r2, #0]
 80078da:	1d19      	adds	r1, r3, #4
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	681d      	ldr	r5, [r3, #0]
 80078e0:	6862      	ldr	r2, [r4, #4]
 80078e2:	2100      	movs	r1, #0
 80078e4:	4628      	mov	r0, r5
 80078e6:	f7f8 fc83 	bl	80001f0 <memchr>
 80078ea:	b108      	cbz	r0, 80078f0 <_printf_i+0x1bc>
 80078ec:	1b40      	subs	r0, r0, r5
 80078ee:	6060      	str	r0, [r4, #4]
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	2300      	movs	r3, #0
 80078f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078fa:	e7a7      	b.n	800784c <_printf_i+0x118>
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	462a      	mov	r2, r5
 8007900:	4639      	mov	r1, r7
 8007902:	4630      	mov	r0, r6
 8007904:	47c0      	blx	r8
 8007906:	3001      	adds	r0, #1
 8007908:	d0aa      	beq.n	8007860 <_printf_i+0x12c>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	079b      	lsls	r3, r3, #30
 800790e:	d413      	bmi.n	8007938 <_printf_i+0x204>
 8007910:	68e0      	ldr	r0, [r4, #12]
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	4298      	cmp	r0, r3
 8007916:	bfb8      	it	lt
 8007918:	4618      	movlt	r0, r3
 800791a:	e7a3      	b.n	8007864 <_printf_i+0x130>
 800791c:	2301      	movs	r3, #1
 800791e:	464a      	mov	r2, r9
 8007920:	4639      	mov	r1, r7
 8007922:	4630      	mov	r0, r6
 8007924:	47c0      	blx	r8
 8007926:	3001      	adds	r0, #1
 8007928:	d09a      	beq.n	8007860 <_printf_i+0x12c>
 800792a:	3501      	adds	r5, #1
 800792c:	68e3      	ldr	r3, [r4, #12]
 800792e:	9a03      	ldr	r2, [sp, #12]
 8007930:	1a9b      	subs	r3, r3, r2
 8007932:	42ab      	cmp	r3, r5
 8007934:	dcf2      	bgt.n	800791c <_printf_i+0x1e8>
 8007936:	e7eb      	b.n	8007910 <_printf_i+0x1dc>
 8007938:	2500      	movs	r5, #0
 800793a:	f104 0919 	add.w	r9, r4, #25
 800793e:	e7f5      	b.n	800792c <_printf_i+0x1f8>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1ac      	bne.n	800789e <_printf_i+0x16a>
 8007944:	7803      	ldrb	r3, [r0, #0]
 8007946:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800794a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800794e:	e76c      	b.n	800782a <_printf_i+0xf6>
 8007950:	08007ab1 	.word	0x08007ab1
 8007954:	08007ac2 	.word	0x08007ac2

08007958 <memmove>:
 8007958:	4288      	cmp	r0, r1
 800795a:	b510      	push	{r4, lr}
 800795c:	eb01 0302 	add.w	r3, r1, r2
 8007960:	d807      	bhi.n	8007972 <memmove+0x1a>
 8007962:	1e42      	subs	r2, r0, #1
 8007964:	4299      	cmp	r1, r3
 8007966:	d00a      	beq.n	800797e <memmove+0x26>
 8007968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800796c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007970:	e7f8      	b.n	8007964 <memmove+0xc>
 8007972:	4283      	cmp	r3, r0
 8007974:	d9f5      	bls.n	8007962 <memmove+0xa>
 8007976:	1881      	adds	r1, r0, r2
 8007978:	1ad2      	subs	r2, r2, r3
 800797a:	42d3      	cmn	r3, r2
 800797c:	d100      	bne.n	8007980 <memmove+0x28>
 800797e:	bd10      	pop	{r4, pc}
 8007980:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007984:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007988:	e7f7      	b.n	800797a <memmove+0x22>

0800798a <_realloc_r>:
 800798a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798c:	4607      	mov	r7, r0
 800798e:	4614      	mov	r4, r2
 8007990:	460e      	mov	r6, r1
 8007992:	b921      	cbnz	r1, 800799e <_realloc_r+0x14>
 8007994:	4611      	mov	r1, r2
 8007996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800799a:	f7ff bc5d 	b.w	8007258 <_malloc_r>
 800799e:	b922      	cbnz	r2, 80079aa <_realloc_r+0x20>
 80079a0:	f7ff fc0c 	bl	80071bc <_free_r>
 80079a4:	4625      	mov	r5, r4
 80079a6:	4628      	mov	r0, r5
 80079a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079aa:	f000 f814 	bl	80079d6 <_malloc_usable_size_r>
 80079ae:	42a0      	cmp	r0, r4
 80079b0:	d20f      	bcs.n	80079d2 <_realloc_r+0x48>
 80079b2:	4621      	mov	r1, r4
 80079b4:	4638      	mov	r0, r7
 80079b6:	f7ff fc4f 	bl	8007258 <_malloc_r>
 80079ba:	4605      	mov	r5, r0
 80079bc:	2800      	cmp	r0, #0
 80079be:	d0f2      	beq.n	80079a6 <_realloc_r+0x1c>
 80079c0:	4631      	mov	r1, r6
 80079c2:	4622      	mov	r2, r4
 80079c4:	f7ff fbe6 	bl	8007194 <memcpy>
 80079c8:	4631      	mov	r1, r6
 80079ca:	4638      	mov	r0, r7
 80079cc:	f7ff fbf6 	bl	80071bc <_free_r>
 80079d0:	e7e9      	b.n	80079a6 <_realloc_r+0x1c>
 80079d2:	4635      	mov	r5, r6
 80079d4:	e7e7      	b.n	80079a6 <_realloc_r+0x1c>

080079d6 <_malloc_usable_size_r>:
 80079d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079da:	1f18      	subs	r0, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bfbc      	itt	lt
 80079e0:	580b      	ldrlt	r3, [r1, r0]
 80079e2:	18c0      	addlt	r0, r0, r3
 80079e4:	4770      	bx	lr
	...

080079e8 <_init>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr

080079f4 <_fini>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr

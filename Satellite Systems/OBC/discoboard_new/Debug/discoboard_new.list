
discoboard_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f00  08007f00  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f08  08007f08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000074  08007f84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08007f84  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df7c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002470  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  000310e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023526  00000000  00000000  00031c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa74  00000000  00000000  00055146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3804  00000000  00000000  00064bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001383be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d0  00000000  00000000  00138410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e14 	.word	0x08007e14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007e14 	.word	0x08007e14

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_Init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <HAL_Init+0x40>)
 800059e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_Init+0x40>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <HAL_Init+0x40>)
 80005aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_Init+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_Init+0x40>)
 80005b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f92b 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f808 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f006 fd8e 	bl	80070e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023c00 	.word	0x40023c00

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f943 	bl	8000882 <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f90b 	bl	800082e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000000c 	.word	0x2000000c
 8000630:	20000004 	.word	0x20000004
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000004 	.word	0x20000004
 800065c:	20000090 	.word	0x20000090

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000090 	.word	0x20000090

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db0b      	blt.n	8000706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 021f 	and.w	r2, r3, #31
 80006f4:	4907      	ldr	r1, [pc, #28]	; (8000714 <__NVIC_EnableIRQ+0x38>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	2001      	movs	r0, #1
 80006fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100

08000718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	f04f 32ff 	mov.w	r2, #4294967295
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43d9      	mvns	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ff8e 	bl	8000718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff29 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff3e 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff8e 	bl	800076c <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5d 	bl	8000718 <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff31 	bl	80006dc <__NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffa2 	bl	80007d4 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d004      	beq.n	80008b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e00c      	b.n	80008d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2205      	movs	r2, #5
 80008bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f022 0201 	bic.w	r2, r2, #1
 80008ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008ec:	b2db      	uxtb	r3, r3
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
 8000916:	e177      	b.n	8000c08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000918:	2201      	movs	r2, #1
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	429a      	cmp	r2, r3
 8000932:	f040 8166 	bne.w	8000c02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d00b      	beq.n	8000956 <HAL_GPIO_Init+0x5a>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d007      	beq.n	8000956 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094a:	2b11      	cmp	r3, #17
 800094c:	d003      	beq.n	8000956 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b12      	cmp	r3, #18
 8000954:	d130      	bne.n	80009b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	2203      	movs	r2, #3
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4013      	ands	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	68da      	ldr	r2, [r3, #12]
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4313      	orrs	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800098c:	2201      	movs	r2, #1
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	091b      	lsrs	r3, r3, #4
 80009a2:	f003 0201 	and.w	r2, r3, #1
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4013      	ands	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4313      	orrs	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0xfc>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b12      	cmp	r3, #18
 80009f6:	d123      	bne.n	8000a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	08da      	lsrs	r2, r3, #3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3208      	adds	r2, #8
 8000a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	691a      	ldr	r2, [r3, #16]
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	69b9      	ldr	r1, [r7, #24]
 8000a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0203 	and.w	r2, r3, #3
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 80c0 	beq.w	8000c02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b66      	ldr	r3, [pc, #408]	; (8000c20 <HAL_GPIO_Init+0x324>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a65      	ldr	r2, [pc, #404]	; (8000c20 <HAL_GPIO_Init+0x324>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b63      	ldr	r3, [pc, #396]	; (8000c20 <HAL_GPIO_Init+0x324>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a9e:	4a61      	ldr	r2, [pc, #388]	; (8000c24 <HAL_GPIO_Init+0x328>)
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a58      	ldr	r2, [pc, #352]	; (8000c28 <HAL_GPIO_Init+0x32c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d037      	beq.n	8000b3a <HAL_GPIO_Init+0x23e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a57      	ldr	r2, [pc, #348]	; (8000c2c <HAL_GPIO_Init+0x330>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d031      	beq.n	8000b36 <HAL_GPIO_Init+0x23a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a56      	ldr	r2, [pc, #344]	; (8000c30 <HAL_GPIO_Init+0x334>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d02b      	beq.n	8000b32 <HAL_GPIO_Init+0x236>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a55      	ldr	r2, [pc, #340]	; (8000c34 <HAL_GPIO_Init+0x338>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d025      	beq.n	8000b2e <HAL_GPIO_Init+0x232>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a54      	ldr	r2, [pc, #336]	; (8000c38 <HAL_GPIO_Init+0x33c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d01f      	beq.n	8000b2a <HAL_GPIO_Init+0x22e>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a53      	ldr	r2, [pc, #332]	; (8000c3c <HAL_GPIO_Init+0x340>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d019      	beq.n	8000b26 <HAL_GPIO_Init+0x22a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a52      	ldr	r2, [pc, #328]	; (8000c40 <HAL_GPIO_Init+0x344>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d013      	beq.n	8000b22 <HAL_GPIO_Init+0x226>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <HAL_GPIO_Init+0x348>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d00d      	beq.n	8000b1e <HAL_GPIO_Init+0x222>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a50      	ldr	r2, [pc, #320]	; (8000c48 <HAL_GPIO_Init+0x34c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d007      	beq.n	8000b1a <HAL_GPIO_Init+0x21e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4f      	ldr	r2, [pc, #316]	; (8000c4c <HAL_GPIO_Init+0x350>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_GPIO_Init+0x21a>
 8000b12:	2309      	movs	r3, #9
 8000b14:	e012      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b16:	230a      	movs	r3, #10
 8000b18:	e010      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	e00e      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b1e:	2307      	movs	r3, #7
 8000b20:	e00c      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b22:	2306      	movs	r3, #6
 8000b24:	e00a      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b26:	2305      	movs	r3, #5
 8000b28:	e008      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e004      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b32:	2302      	movs	r3, #2
 8000b34:	e002      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <HAL_GPIO_Init+0x240>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	69fa      	ldr	r2, [r7, #28]
 8000b3e:	f002 0203 	and.w	r2, r2, #3
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	4093      	lsls	r3, r2
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b4c:	4935      	ldr	r1, [pc, #212]	; (8000c24 <HAL_GPIO_Init+0x328>)
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	3302      	adds	r3, #2
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b5a:	4b3d      	ldr	r3, [pc, #244]	; (8000c50 <HAL_GPIO_Init+0x354>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4013      	ands	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b7e:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <HAL_GPIO_Init+0x354>)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b84:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <HAL_GPIO_Init+0x354>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <HAL_GPIO_Init+0x354>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bae:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <HAL_GPIO_Init+0x354>)
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bd2:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <HAL_GPIO_Init+0x354>)
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_GPIO_Init+0x354>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_GPIO_Init+0x354>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3301      	adds	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	f67f ae84 	bls.w	8000918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40013800 	.word	0x40013800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40021400 	.word	0x40021400
 8000c40:	40021800 	.word	0x40021800
 8000c44:	40021c00 	.word	0x40021c00
 8000c48:	40022000 	.word	0x40022000
 8000c4c:	40022400 	.word	0x40022400
 8000c50:	40013c00 	.word	0x40013c00

08000c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
 8000c60:	4613      	mov	r3, r2
 8000c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c64:	787b      	ldrb	r3, [r7, #1]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c70:	e003      	b.n	8000c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	041a      	lsls	r2, r3, #16
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	619a      	str	r2, [r3, #24]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e12b      	b.n	8000ef2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d106      	bne.n	8000cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f006 f8b6 	bl	8006e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2224      	movs	r2, #36	; 0x24
 8000cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0201 	bic.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cec:	f003 f844 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4a81      	ldr	r2, [pc, #516]	; (8000efc <HAL_I2C_Init+0x274>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d807      	bhi.n	8000d0c <HAL_I2C_Init+0x84>
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4a80      	ldr	r2, [pc, #512]	; (8000f00 <HAL_I2C_Init+0x278>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	bf94      	ite	ls
 8000d04:	2301      	movls	r3, #1
 8000d06:	2300      	movhi	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	e006      	b.n	8000d1a <HAL_I2C_Init+0x92>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4a7d      	ldr	r2, [pc, #500]	; (8000f04 <HAL_I2C_Init+0x27c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	bf94      	ite	ls
 8000d14:	2301      	movls	r3, #1
 8000d16:	2300      	movhi	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e0e7      	b.n	8000ef2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4a78      	ldr	r2, [pc, #480]	; (8000f08 <HAL_I2C_Init+0x280>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	0c9b      	lsrs	r3, r3, #18
 8000d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4a6a      	ldr	r2, [pc, #424]	; (8000efc <HAL_I2C_Init+0x274>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d802      	bhi.n	8000d5c <HAL_I2C_Init+0xd4>
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	e009      	b.n	8000d70 <HAL_I2C_Init+0xe8>
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d62:	fb02 f303 	mul.w	r3, r2, r3
 8000d66:	4a69      	ldr	r2, [pc, #420]	; (8000f0c <HAL_I2C_Init+0x284>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	099b      	lsrs	r3, r3, #6
 8000d6e:	3301      	adds	r3, #1
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	6812      	ldr	r2, [r2, #0]
 8000d74:	430b      	orrs	r3, r1
 8000d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	495c      	ldr	r1, [pc, #368]	; (8000efc <HAL_I2C_Init+0x274>)
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d819      	bhi.n	8000dc4 <HAL_I2C_Init+0x13c>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	1e59      	subs	r1, r3, #1
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d9e:	1c59      	adds	r1, r3, #1
 8000da0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000da4:	400b      	ands	r3, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00a      	beq.n	8000dc0 <HAL_I2C_Init+0x138>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	1e59      	subs	r1, r3, #1
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dbe:	e051      	b.n	8000e64 <HAL_I2C_Init+0x1dc>
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	e04f      	b.n	8000e64 <HAL_I2C_Init+0x1dc>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d111      	bne.n	8000df0 <HAL_I2C_Init+0x168>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1e58      	subs	r0, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6859      	ldr	r1, [r3, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	440b      	add	r3, r1
 8000dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	e012      	b.n	8000e16 <HAL_I2C_Init+0x18e>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	1e58      	subs	r0, r3, #1
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6859      	ldr	r1, [r3, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	0099      	lsls	r1, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e06:	3301      	adds	r3, #1
 8000e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf0c      	ite	eq
 8000e10:	2301      	moveq	r3, #1
 8000e12:	2300      	movne	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_I2C_Init+0x196>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e022      	b.n	8000e64 <HAL_I2C_Init+0x1dc>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10e      	bne.n	8000e44 <HAL_I2C_Init+0x1bc>
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	1e58      	subs	r0, r3, #1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6859      	ldr	r1, [r3, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	440b      	add	r3, r1
 8000e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e38:	3301      	adds	r3, #1
 8000e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e42:	e00f      	b.n	8000e64 <HAL_I2C_Init+0x1dc>
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1e58      	subs	r0, r3, #1
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6859      	ldr	r1, [r3, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	0099      	lsls	r1, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	6809      	ldr	r1, [r1, #0]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69da      	ldr	r2, [r3, #28]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6911      	ldr	r1, [r2, #16]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68d2      	ldr	r2, [r2, #12]
 8000e9e:	4311      	orrs	r1, r2
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2220      	movs	r2, #32
 8000ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	000186a0 	.word	0x000186a0
 8000f00:	001e847f 	.word	0x001e847f
 8000f04:	003d08ff 	.word	0x003d08ff
 8000f08:	431bde83 	.word	0x431bde83
 8000f0c:	10624dd3 	.word	0x10624dd3

08000f10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	817b      	strh	r3, [r7, #10]
 8000f20:	4613      	mov	r3, r2
 8000f22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff fb9c 	bl	8000660 <HAL_GetTick>
 8000f28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b20      	cmp	r3, #32
 8000f34:	f040 80e0 	bne.w	80010f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2319      	movs	r3, #25
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4970      	ldr	r1, [pc, #448]	; (8001104 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f002 f84c 	bl	8002fe0 <I2C_WaitOnFlagUntilTimeout>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e0d3      	b.n	80010fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_I2C_Master_Transmit+0x50>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e0cc      	b.n	80010fa <HAL_I2C_Master_Transmit+0x1ea>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d007      	beq.n	8000f86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0201 	orr.w	r2, r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2221      	movs	r2, #33	; 0x21
 8000f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	893a      	ldrh	r2, [r7, #8]
 8000fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4a50      	ldr	r2, [pc, #320]	; (8001108 <HAL_I2C_Master_Transmit+0x1f8>)
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fc8:	8979      	ldrh	r1, [r7, #10]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	6a3a      	ldr	r2, [r7, #32]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f001 fe0e 	bl	8002bf0 <I2C_MasterRequestWrite>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e08d      	b.n	80010fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000ff4:	e066      	b.n	80010c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	6a39      	ldr	r1, [r7, #32]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f002 f8c6 	bl	800318c <I2C_WaitOnTXEFlagUntilTimeout>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00d      	beq.n	8001022 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	2b04      	cmp	r3, #4
 800100c:	d107      	bne.n	800101e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800101c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e06b      	b.n	80010fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103c:	b29b      	uxth	r3, r3
 800103e:	3b01      	subs	r3, #1
 8001040:	b29a      	uxth	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104a:	3b01      	subs	r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b04      	cmp	r3, #4
 800105e:	d11b      	bne.n	8001098 <HAL_I2C_Master_Transmit+0x188>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001064:	2b00      	cmp	r3, #0
 8001066:	d017      	beq.n	8001098 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001082:	b29b      	uxth	r3, r3
 8001084:	3b01      	subs	r3, #1
 8001086:	b29a      	uxth	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001090:	3b01      	subs	r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	6a39      	ldr	r1, [r7, #32]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f002 f8b6 	bl	800320e <I2C_WaitOnBTFFlagUntilTimeout>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00d      	beq.n	80010c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d107      	bne.n	80010c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e01a      	b.n	80010fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d194      	bne.n	8000ff6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2220      	movs	r2, #32
 80010e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e000      	b.n	80010fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80010f8:	2302      	movs	r3, #2
  }
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	00100002 	.word	0x00100002
 8001108:	ffff0000 	.word	0xffff0000

0800110c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af02      	add	r7, sp, #8
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	461a      	mov	r2, r3
 8001118:	460b      	mov	r3, r1
 800111a:	817b      	strh	r3, [r7, #10]
 800111c:	4613      	mov	r3, r2
 800111e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fa9e 	bl	8000660 <HAL_GetTick>
 8001124:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b20      	cmp	r3, #32
 8001130:	f040 820b 	bne.w	800154a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2319      	movs	r3, #25
 800113a:	2201      	movs	r2, #1
 800113c:	497c      	ldr	r1, [pc, #496]	; (8001330 <HAL_I2C_Master_Receive+0x224>)
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f001 ff4e 	bl	8002fe0 <I2C_WaitOnFlagUntilTimeout>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800114a:	2302      	movs	r3, #2
 800114c:	e1fe      	b.n	800154c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_I2C_Master_Receive+0x50>
 8001158:	2302      	movs	r3, #2
 800115a:	e1f7      	b.n	800154c <HAL_I2C_Master_Receive+0x440>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b01      	cmp	r3, #1
 8001170:	d007      	beq.n	8001182 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001190:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2222      	movs	r2, #34	; 0x22
 8001196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2210      	movs	r2, #16
 800119e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	893a      	ldrh	r2, [r7, #8]
 80011b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4a5c      	ldr	r2, [pc, #368]	; (8001334 <HAL_I2C_Master_Receive+0x228>)
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011c4:	8979      	ldrh	r1, [r7, #10]
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f001 fd92 	bl	8002cf4 <I2C_MasterRequestRead>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e1b8      	b.n	800154c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d113      	bne.n	800120a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	623b      	str	r3, [r7, #32]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	623b      	str	r3, [r7, #32]
 80011f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e18c      	b.n	8001524 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120e:	2b01      	cmp	r3, #1
 8001210:	d11b      	bne.n	800124a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e16c      	b.n	8001524 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124e:	2b02      	cmp	r3, #2
 8001250:	d11b      	bne.n	800128a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001260:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	e14c      	b.n	8001524 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80012b0:	e138      	b.n	8001524 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	f200 80f1 	bhi.w	800149e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d123      	bne.n	800130c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f002 f813 	bl	80032f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e139      	b.n	800154c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001300:	b29b      	uxth	r3, r3
 8001302:	3b01      	subs	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800130a:	e10b      	b.n	8001524 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001310:	2b02      	cmp	r3, #2
 8001312:	d14e      	bne.n	80013b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131a:	2200      	movs	r2, #0
 800131c:	4906      	ldr	r1, [pc, #24]	; (8001338 <HAL_I2C_Master_Receive+0x22c>)
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f001 fe5e 	bl	8002fe0 <I2C_WaitOnFlagUntilTimeout>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e10e      	b.n	800154c <HAL_I2C_Master_Receive+0x440>
 800132e:	bf00      	nop
 8001330:	00100002 	.word	0x00100002
 8001334:	ffff0000 	.word	0xffff0000
 8001338:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800134a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001374:	b29b      	uxth	r3, r3
 8001376:	3b01      	subs	r3, #1
 8001378:	b29a      	uxth	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139a:	3b01      	subs	r3, #1
 800139c:	b29a      	uxth	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3b01      	subs	r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80013b0:	e0b8      	b.n	8001524 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b8:	2200      	movs	r2, #0
 80013ba:	4966      	ldr	r1, [pc, #408]	; (8001554 <HAL_I2C_Master_Receive+0x448>)
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f001 fe0f 	bl	8002fe0 <I2C_WaitOnFlagUntilTimeout>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0bf      	b.n	800154c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001404:	b29b      	uxth	r3, r3
 8001406:	3b01      	subs	r3, #1
 8001408:	b29a      	uxth	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001414:	2200      	movs	r2, #0
 8001416:	494f      	ldr	r1, [pc, #316]	; (8001554 <HAL_I2C_Master_Receive+0x448>)
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f001 fde1 	bl	8002fe0 <I2C_WaitOnFlagUntilTimeout>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e091      	b.n	800154c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001454:	3b01      	subs	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001460:	b29b      	uxth	r3, r3
 8001462:	3b01      	subs	r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001486:	3b01      	subs	r3, #1
 8001488:	b29a      	uxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001492:	b29b      	uxth	r3, r3
 8001494:	3b01      	subs	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800149c:	e042      	b.n	8001524 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f001 ff26 	bl	80032f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e04c      	b.n	800154c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d118      	bne.n	8001524 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150e:	3b01      	subs	r3, #1
 8001510:	b29a      	uxth	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151a:	b29b      	uxth	r3, r3
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f aec2 	bne.w	80012b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2220      	movs	r2, #32
 8001532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800154a:	2302      	movs	r3, #2
  }
}
 800154c:	4618      	mov	r0, r3
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	00010004 	.word	0x00010004

08001558 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	461a      	mov	r2, r3
 8001564:	460b      	mov	r3, r1
 8001566:	817b      	strh	r3, [r7, #10]
 8001568:	4613      	mov	r3, r2
 800156a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b20      	cmp	r3, #32
 800157a:	f040 808d 	bne.w	8001698 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800157e:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_I2C_Master_Receive_IT+0x150>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	4a49      	ldr	r2, [pc, #292]	; (80016ac <HAL_I2C_Master_Receive_IT+0x154>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0a1a      	lsrs	r2, r3, #8
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	009a      	lsls	r2, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3b01      	subs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d116      	bne.n	80015d2 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f043 0220 	orr.w	r2, r3, #32
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e063      	b.n	800169a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d0db      	beq.n	8001598 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_I2C_Master_Receive_IT+0x96>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e055      	b.n	800169a <HAL_I2C_Master_Receive_IT+0x142>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d007      	beq.n	8001614 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001622:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2222      	movs	r2, #34	; 0x22
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2210      	movs	r2, #16
 8001630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	893a      	ldrh	r2, [r7, #8]
 8001644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_I2C_Master_Receive_IT+0x158>)
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001656:	897a      	ldrh	r2, [r7, #10]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800166a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001692:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	e000      	b.n	800169a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8001698:	2302      	movs	r3, #2
  }
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	2000000c 	.word	0x2000000c
 80016ac:	14f8b589 	.word	0x14f8b589
 80016b0:	ffff0000 	.word	0xffff0000

080016b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	d003      	beq.n	80016ec <HAL_I2C_EV_IRQHandler+0x38>
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	2b40      	cmp	r3, #64	; 0x40
 80016e8:	f040 80bd 	bne.w	8001866 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <HAL_I2C_EV_IRQHandler+0x6e>
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800170c:	d003      	beq.n	8001716 <HAL_I2C_EV_IRQHandler+0x62>
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001714:	d101      	bne.n	800171a <HAL_I2C_EV_IRQHandler+0x66>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_I2C_EV_IRQHandler+0x68>
 800171a:	2300      	movs	r3, #0
 800171c:	2b01      	cmp	r3, #1
 800171e:	f000 812e 	beq.w	800197e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00c      	beq.n	8001746 <HAL_I2C_EV_IRQHandler+0x92>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	0a5b      	lsrs	r3, r3, #9
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f001 fe60 	bl	80033fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fcb1 	bl	80020a6 <I2C_Master_SB>
 8001744:	e08e      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_I2C_EV_IRQHandler+0xb2>
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	0a5b      	lsrs	r3, r3, #9
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fd27 	bl	80021b2 <I2C_Master_ADD10>
 8001764:	e07e      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <HAL_I2C_EV_IRQHandler+0xd2>
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	0a5b      	lsrs	r3, r3, #9
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fd41 	bl	8002206 <I2C_Master_ADDR>
 8001784:	e06e      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d037      	beq.n	8001802 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017a0:	f000 80ef 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	09db      	lsrs	r3, r3, #7
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00f      	beq.n	80017d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	0a9b      	lsrs	r3, r3, #10
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d009      	beq.n	80017d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f93e 	bl	8001a4a <I2C_MasterTransmit_TXE>
 80017ce:	e049      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80d2 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	0a5b      	lsrs	r3, r3, #9
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80cb 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d103      	bne.n	80017fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f9c5 	bl	8001b82 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f8:	e0c3      	b.n	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 fa29 	bl	8001c52 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001800:	e0bf      	b.n	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001810:	f000 80b7 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00f      	beq.n	8001840 <HAL_I2C_EV_IRQHandler+0x18c>
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	0a9b      	lsrs	r3, r3, #10
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <HAL_I2C_EV_IRQHandler+0x18c>
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d103      	bne.n	8001840 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fa99 	bl	8001d70 <I2C_MasterReceive_RXNE>
 800183e:	e011      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 809a 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	0a5b      	lsrs	r3, r3, #9
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8093 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fb38 	bl	8001ed2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001862:	e08e      	b.n	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
 8001864:	e08d      	b.n	8001982 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e007      	b.n	8001888 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d012      	beq.n	80018ba <HAL_I2C_EV_IRQHandler+0x206>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	0a5b      	lsrs	r3, r3, #9
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80018b0:	69b9      	ldr	r1, [r7, #24]
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fef6 	bl	80026a4 <I2C_Slave_ADDR>
 80018b8:	e066      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_I2C_EV_IRQHandler+0x226>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	0a5b      	lsrs	r3, r3, #9
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 ff2a 	bl	800272c <I2C_Slave_STOPF>
 80018d8:	e056      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80018da:	7bbb      	ldrb	r3, [r7, #14]
 80018dc:	2b21      	cmp	r3, #33	; 0x21
 80018de:	d002      	beq.n	80018e6 <HAL_I2C_EV_IRQHandler+0x232>
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	2b29      	cmp	r3, #41	; 0x29
 80018e4:	d125      	bne.n	8001932 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	09db      	lsrs	r3, r3, #7
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00f      	beq.n	8001912 <HAL_I2C_EV_IRQHandler+0x25e>
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	0a9b      	lsrs	r3, r3, #10
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_I2C_EV_IRQHandler+0x25e>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fe0c 	bl	8002528 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001910:	e039      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d033      	beq.n	8001986 <HAL_I2C_EV_IRQHandler+0x2d2>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	0a5b      	lsrs	r3, r3, #9
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02d      	beq.n	8001986 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fe39 	bl	80025a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001930:	e029      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	099b      	lsrs	r3, r3, #6
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00f      	beq.n	800195e <HAL_I2C_EV_IRQHandler+0x2aa>
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	0a9b      	lsrs	r3, r3, #10
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_I2C_EV_IRQHandler+0x2aa>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d103      	bne.n	800195e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fe44 	bl	80025e4 <I2C_SlaveReceive_RXNE>
 800195c:	e014      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00e      	beq.n	8001988 <HAL_I2C_EV_IRQHandler+0x2d4>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	0a5b      	lsrs	r3, r3, #9
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fe72 	bl	8002660 <I2C_SlaveReceive_BTF>
 800197c:	e004      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800197e:	bf00      	nop
 8001980:	e002      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001982:	bf00      	nop
 8001984:	e000      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001986:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	70fb      	strb	r3, [r7, #3]
 80019d6:	4613      	mov	r3, r2
 80019d8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a60:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d150      	bne.n	8001b12 <I2C_MasterTransmit_TXE+0xc8>
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b21      	cmp	r3, #33	; 0x21
 8001a74:	d14d      	bne.n	8001b12 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d01d      	beq.n	8001ab8 <I2C_MasterTransmit_TXE+0x6e>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d01a      	beq.n	8001ab8 <I2C_MasterTransmit_TXE+0x6e>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a88:	d016      	beq.n	8001ab8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a98:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2211      	movs	r2, #17
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff6c 	bl	800198e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ab6:	e060      	b.n	8001b7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ac6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	d107      	bne.n	8001b02 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff7d 	bl	80019fa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b00:	e03b      	b.n	8001b7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff3f 	bl	800198e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b10:	e033      	b.n	8001b7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	2b21      	cmp	r3, #33	; 0x21
 8001b16:	d005      	beq.n	8001b24 <I2C_MasterTransmit_TXE+0xda>
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	2b40      	cmp	r3, #64	; 0x40
 8001b1c:	d12d      	bne.n	8001b7a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b22      	cmp	r3, #34	; 0x22
 8001b22:	d12a      	bne.n	8001b7a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d108      	bne.n	8001b40 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001b3e:	e01c      	b.n	8001b7a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b40      	cmp	r3, #64	; 0x40
 8001b4a:	d103      	bne.n	8001b54 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f880 	bl	8001c52 <I2C_MemoryTransmit_TXE_BTF>
}
 8001b52:	e012      	b.n	8001b7a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b78:	e7ff      	b.n	8001b7a <I2C_MasterTransmit_TXE+0x130>
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b21      	cmp	r3, #33	; 0x21
 8001b9a:	d156      	bne.n	8001c4a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d012      	beq.n	8001bcc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001bca:	e03e      	b.n	8001c4a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d01d      	beq.n	8001c0e <I2C_MasterTransmit_BTF+0x8c>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d01a      	beq.n	8001c0e <I2C_MasterTransmit_BTF+0x8c>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bde:	d016      	beq.n	8001c0e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2211      	movs	r2, #17
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fec1 	bl	800198e <HAL_I2C_MasterTxCpltCallback>
}
 8001c0c:	e01d      	b.n	8001c4a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c1c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fea2 	bl	800198e <HAL_I2C_MasterTxCpltCallback>
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d11d      	bne.n	8001ca6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d10b      	bne.n	8001c8a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c82:	1c9a      	adds	r2, r3, #2
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001c88:	e06e      	b.n	8001d68 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	121b      	asrs	r3, r3, #8
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ca4:	e060      	b.n	8001d68 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d10b      	bne.n	8001cc6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cc4:	e050      	b.n	8001d68 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d14c      	bne.n	8001d68 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b22      	cmp	r3, #34	; 0x22
 8001cd2:	d108      	bne.n	8001ce6 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce2:	601a      	str	r2, [r3, #0]
}
 8001ce4:	e040      	b.n	8001d68 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d015      	beq.n	8001d1c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b21      	cmp	r3, #33	; 0x21
 8001cf4:	d112      	bne.n	8001d1c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d1a:	e025      	b.n	8001d68 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d120      	bne.n	8001d68 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	2b21      	cmp	r3, #33	; 0x21
 8001d2a:	d11d      	bne.n	8001d68 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fe49 	bl	80019fa <HAL_I2C_MemTxCpltCallback>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b22      	cmp	r3, #34	; 0x22
 8001d82:	f040 80a2 	bne.w	8001eca <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d921      	bls.n	8001dd8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	f040 8082 	bne.w	8001eca <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001dd6:	e078      	b.n	8001eca <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d074      	beq.n	8001eca <I2C_MasterReceive_RXNE+0x15a>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d002      	beq.n	8001dec <I2C_MasterReceive_RXNE+0x7c>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d16e      	bne.n	8001eca <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f001 fa4f 	bl	8003290 <I2C_WaitOnSTOPRequestThroughIT>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d142      	bne.n	8001e7e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e06:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b40      	cmp	r3, #64	; 0x40
 8001e50:	d10a      	bne.n	8001e68 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fdd4 	bl	8001a0e <HAL_I2C_MemRxCpltCallback>
}
 8001e66:	e030      	b.n	8001eca <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2212      	movs	r2, #18
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f005 f912 	bl	80070a0 <HAL_I2C_MasterRxCpltCallback>
}
 8001e7c:	e025      	b.n	8001eca <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff fdac 	bl	8001a22 <HAL_I2C_ErrorCallback>
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d11b      	bne.n	8001f22 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001f20:	e0bd      	b.n	800209e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d129      	bne.n	8001f80 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d00a      	beq.n	8001f58 <I2C_MasterReceive_BTF+0x86>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d007      	beq.n	8001f58 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f7e:	e08e      	b.n	800209e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d176      	bne.n	8002078 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d002      	beq.n	8001f96 <I2C_MasterReceive_BTF+0xc4>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d108      	bne.n	8001fa8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e019      	b.n	8001fdc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d002      	beq.n	8001fb4 <I2C_MasterReceive_BTF+0xe2>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d108      	bne.n	8001fc6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e00a      	b.n	8001fdc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d007      	beq.n	8001fdc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002036:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d10a      	bne.n	8002062 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fcd7 	bl	8001a0e <HAL_I2C_MemRxCpltCallback>
}
 8002060:	e01d      	b.n	800209e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2212      	movs	r2, #18
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f005 f815 	bl	80070a0 <HAL_I2C_MasterRxCpltCallback>
}
 8002076:	e012      	b.n	800209e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b40      	cmp	r3, #64	; 0x40
 80020b8:	d117      	bne.n	80020ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80020d4:	e067      	b.n	80021a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	611a      	str	r2, [r3, #16]
}
 80020e8:	e05d      	b.n	80021a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020f2:	d133      	bne.n	800215c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b21      	cmp	r3, #33	; 0x21
 80020fe:	d109      	bne.n	8002114 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002110:	611a      	str	r2, [r3, #16]
 8002112:	e008      	b.n	8002126 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	b2da      	uxtb	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <I2C_Master_SB+0x92>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d108      	bne.n	800214a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	2b00      	cmp	r3, #0
 800213e:	d032      	beq.n	80021a6 <I2C_Master_SB+0x100>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02d      	beq.n	80021a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002158:	605a      	str	r2, [r3, #4]
}
 800215a:	e024      	b.n	80021a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10e      	bne.n	8002182 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	b29b      	uxth	r3, r3
 800216a:	11db      	asrs	r3, r3, #7
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f003 0306 	and.w	r3, r3, #6
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f063 030f 	orn	r3, r3, #15
 8002178:	b2da      	uxtb	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	611a      	str	r2, [r3, #16]
}
 8002180:	e011      	b.n	80021a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10d      	bne.n	80021a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	b29b      	uxth	r3, r3
 8002190:	11db      	asrs	r3, r3, #7
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f003 0306 	and.w	r3, r3, #6
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f063 030e 	orn	r3, r3, #14
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	611a      	str	r2, [r3, #16]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <I2C_Master_ADD10+0x24>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d011      	beq.n	80021fa <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d104      	bne.n	80021ea <I2C_Master_ADD10+0x38>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021f8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002206:	b480      	push	{r7}
 8002208:	b091      	sub	sp, #68	; 0x44
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002214:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b22      	cmp	r3, #34	; 0x22
 800222e:	f040 8169 	bne.w	8002504 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10f      	bne.n	800225a <I2C_Master_ADDR+0x54>
 800223a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d10b      	bne.n	800225a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	633b      	str	r3, [r7, #48]	; 0x30
 8002256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002258:	e160      	b.n	800251c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11d      	bne.n	800229e <I2C_Master_ADDR+0x98>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800226a:	d118      	bne.n	800229e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002290:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	651a      	str	r2, [r3, #80]	; 0x50
 800229c:	e13e      	b.n	800251c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d113      	bne.n	80022d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a8:	2300      	movs	r3, #0
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e115      	b.n	80024fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	f040 808a 	bne.w	80023f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e2:	d137      	bne.n	8002354 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002302:	d113      	bne.n	800232c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002312:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	e0e7      	b.n	80024fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e0d3      	b.n	80024fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	2b08      	cmp	r3, #8
 8002358:	d02e      	beq.n	80023b8 <I2C_Master_ADDR+0x1b2>
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	2b20      	cmp	r3, #32
 800235e:	d02b      	beq.n	80023b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002362:	2b12      	cmp	r3, #18
 8002364:	d102      	bne.n	800236c <I2C_Master_ADDR+0x166>
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	2b01      	cmp	r3, #1
 800236a:	d125      	bne.n	80023b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236e:	2b04      	cmp	r3, #4
 8002370:	d00e      	beq.n	8002390 <I2C_Master_ADDR+0x18a>
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	2b02      	cmp	r3, #2
 8002376:	d00b      	beq.n	8002390 <I2C_Master_ADDR+0x18a>
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	2b10      	cmp	r3, #16
 800237c:	d008      	beq.n	8002390 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e007      	b.n	80023a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800239e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	e0a1      	b.n	80024fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e085      	b.n	80024fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d14d      	bne.n	8002496 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d016      	beq.n	800242e <I2C_Master_ADDR+0x228>
 8002400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002402:	2b02      	cmp	r3, #2
 8002404:	d013      	beq.n	800242e <I2C_Master_ADDR+0x228>
 8002406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002408:	2b10      	cmp	r3, #16
 800240a:	d010      	beq.n	800242e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e007      	b.n	800243e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800243c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800244c:	d117      	bne.n	800247e <I2C_Master_ADDR+0x278>
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002454:	d00b      	beq.n	800246e <I2C_Master_ADDR+0x268>
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	2b01      	cmp	r3, #1
 800245a:	d008      	beq.n	800246e <I2C_Master_ADDR+0x268>
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	2b08      	cmp	r3, #8
 8002460:	d005      	beq.n	800246e <I2C_Master_ADDR+0x268>
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	2b10      	cmp	r3, #16
 8002466:	d002      	beq.n	800246e <I2C_Master_ADDR+0x268>
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	2b20      	cmp	r3, #32
 800246c:	d107      	bne.n	800247e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800247c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	e032      	b.n	80024fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b4:	d117      	bne.n	80024e6 <I2C_Master_ADDR+0x2e0>
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024bc:	d00b      	beq.n	80024d6 <I2C_Master_ADDR+0x2d0>
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d008      	beq.n	80024d6 <I2C_Master_ADDR+0x2d0>
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d005      	beq.n	80024d6 <I2C_Master_ADDR+0x2d0>
 80024ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d002      	beq.n	80024d6 <I2C_Master_ADDR+0x2d0>
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d107      	bne.n	80024e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002502:	e00b      	b.n	800251c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
}
 800251a:	e7ff      	b.n	800251c <I2C_Master_ADDR+0x316>
 800251c:	bf00      	nop
 800251e:	3744      	adds	r7, #68	; 0x44
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002536:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02b      	beq.n	800259a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d114      	bne.n	800259a <I2C_SlaveTransmit_TXE+0x72>
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b29      	cmp	r3, #41	; 0x29
 8002574:	d111      	bne.n	800259a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002584:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2221      	movs	r2, #33	; 0x21
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2228      	movs	r2, #40	; 0x28
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fa04 	bl	80019a2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d011      	beq.n	80025d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d02c      	beq.n	8002658 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d114      	bne.n	8002658 <I2C_SlaveReceive_RXNE+0x74>
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b2a      	cmp	r3, #42	; 0x2a
 8002632:	d111      	bne.n	8002658 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002642:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2222      	movs	r2, #34	; 0x22
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2228      	movs	r2, #40	; 0x28
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff f9af 	bl	80019b6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026be:	2b28      	cmp	r3, #40	; 0x28
 80026c0:	d127      	bne.n	8002712 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	09db      	lsrs	r3, r3, #7
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	81bb      	strh	r3, [r7, #12]
 80026f4:	e002      	b.n	80026fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002704:	89ba      	ldrh	r2, [r7, #12]
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff f95d 	bl	80019ca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002710:	e008      	b.n	8002724 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f06f 0202 	mvn.w	r2, #2
 800271a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800274a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002788:	d172      	bne.n	8002870 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b22      	cmp	r3, #34	; 0x22
 800278e:	d002      	beq.n	8002796 <I2C_Slave_STOPF+0x6a>
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b2a      	cmp	r3, #42	; 0x2a
 8002794:	d135      	bne.n	8002802 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f043 0204 	orr.w	r2, r3, #4
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe f885 	bl	80008de <HAL_DMA_GetState>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d049      	beq.n	800286e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	4a69      	ldr	r2, [pc, #420]	; (8002984 <I2C_Slave_STOPF+0x258>)
 80027e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe f857 	bl	800089a <HAL_DMA_Abort_IT>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d03d      	beq.n	800286e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027fc:	4610      	mov	r0, r2
 80027fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002800:	e035      	b.n	800286e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	b29a      	uxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f043 0204 	orr.w	r2, r3, #4
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002834:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe f84f 	bl	80008de <HAL_DMA_GetState>
 8002840:	4603      	mov	r3, r0
 8002842:	2b01      	cmp	r3, #1
 8002844:	d014      	beq.n	8002870 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	4a4e      	ldr	r2, [pc, #312]	; (8002984 <I2C_Slave_STOPF+0x258>)
 800284c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe f821 	bl	800089a <HAL_DMA_Abort_IT>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002868:	4610      	mov	r0, r2
 800286a:	4798      	blx	r3
 800286c:	e000      	b.n	8002870 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800286e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d03e      	beq.n	80028f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d112      	bne.n	80028ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d112      	bne.n	80028e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0204 	orr.w	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f843 	bl	800298c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002906:	e039      	b.n	800297c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b2a      	cmp	r3, #42	; 0x2a
 800290c:	d109      	bne.n	8002922 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2228      	movs	r2, #40	; 0x28
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff f84a 	bl	80019b6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b28      	cmp	r3, #40	; 0x28
 800292c:	d111      	bne.n	8002952 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a15      	ldr	r2, [pc, #84]	; (8002988 <I2C_Slave_STOPF+0x25c>)
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff f84b 	bl	80019e6 <HAL_I2C_ListenCpltCallback>
}
 8002950:	e014      	b.n	800297c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	2b22      	cmp	r3, #34	; 0x22
 8002958:	d002      	beq.n	8002960 <I2C_Slave_STOPF+0x234>
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b22      	cmp	r3, #34	; 0x22
 800295e:	d10d      	bne.n	800297c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff f81d 	bl	80019b6 <HAL_I2C_SlaveRxCpltCallback>
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	08002e91 	.word	0x08002e91
 8002988:	ffff0000 	.word	0xffff0000

0800298c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029a4:	7bbb      	ldrb	r3, [r7, #14]
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d002      	beq.n	80029b0 <I2C_ITError+0x24>
 80029aa:	7bbb      	ldrb	r3, [r7, #14]
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d10a      	bne.n	80029c6 <I2C_ITError+0x3a>
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b22      	cmp	r3, #34	; 0x22
 80029b4:	d107      	bne.n	80029c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029cc:	2b28      	cmp	r3, #40	; 0x28
 80029ce:	d107      	bne.n	80029e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2228      	movs	r2, #40	; 0x28
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029de:	e015      	b.n	8002a0c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ee:	d00a      	beq.n	8002a06 <I2C_ITError+0x7a>
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b60      	cmp	r3, #96	; 0x60
 80029f4:	d007      	beq.n	8002a06 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1a:	d162      	bne.n	8002ae2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d020      	beq.n	8002a7c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	4a6a      	ldr	r2, [pc, #424]	; (8002be8 <I2C_ITError+0x25c>)
 8002a40:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd ff27 	bl	800089a <HAL_DMA_Abort_IT>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8089 	beq.w	8002b66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a76:	4610      	mov	r0, r2
 8002a78:	4798      	blx	r3
 8002a7a:	e074      	b.n	8002b66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	4a59      	ldr	r2, [pc, #356]	; (8002be8 <I2C_ITError+0x25c>)
 8002a82:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd ff06 	bl	800089a <HAL_DMA_Abort_IT>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d068      	beq.n	8002b66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d10b      	bne.n	8002aba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002adc:	4610      	mov	r0, r2
 8002ade:	4798      	blx	r3
 8002ae0:	e041      	b.n	8002b66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b60      	cmp	r3, #96	; 0x60
 8002aec:	d125      	bne.n	8002b3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d10b      	bne.n	8002b22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe ff7f 	bl	8001a36 <HAL_I2C_AbortCpltCallback>
 8002b38:	e015      	b.n	8002b66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d10b      	bne.n	8002b60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7fe ff5e 	bl	8001a22 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10e      	bne.n	8002b94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ba2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002baa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d113      	bne.n	8002be0 <I2C_ITError+0x254>
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b28      	cmp	r3, #40	; 0x28
 8002bbc:	d110      	bne.n	8002be0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <I2C_ITError+0x260>)
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe ff03 	bl	80019e6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	08002e91 	.word	0x08002e91
 8002bec:	ffff0000 	.word	0xffff0000

08002bf0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d006      	beq.n	8002c1a <I2C_MasterRequestWrite+0x2a>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d003      	beq.n	8002c1a <I2C_MasterRequestWrite+0x2a>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c18:	d108      	bne.n	8002c2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e00b      	b.n	8002c44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	2b12      	cmp	r3, #18
 8002c32:	d107      	bne.n	8002c44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f9c5 	bl	8002fe0 <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6a:	d103      	bne.n	8002c74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e035      	b.n	8002ce4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c80:	d108      	bne.n	8002c94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	e01b      	b.n	8002ccc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	11db      	asrs	r3, r3, #7
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 0306 	and.w	r3, r3, #6
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f063 030f 	orn	r3, r3, #15
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	490e      	ldr	r1, [pc, #56]	; (8002cec <I2C_MasterRequestWrite+0xfc>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f9eb 	bl	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e010      	b.n	8002ce4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cc2:	897b      	ldrh	r3, [r7, #10]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <I2C_MasterRequestWrite+0x100>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f9db 	bl	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	00010008 	.word	0x00010008
 8002cf0:	00010002 	.word	0x00010002

08002cf4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	460b      	mov	r3, r1
 8002d02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d006      	beq.n	8002d2e <I2C_MasterRequestRead+0x3a>
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d003      	beq.n	8002d2e <I2C_MasterRequestRead+0x3a>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d2c:	d108      	bne.n	8002d40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e00b      	b.n	8002d58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	2b11      	cmp	r3, #17
 8002d46:	d107      	bne.n	8002d58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f93b 	bl	8002fe0 <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7e:	d103      	bne.n	8002d88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e079      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d94:	d108      	bne.n	8002da8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	611a      	str	r2, [r3, #16]
 8002da6:	e05f      	b.n	8002e68 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002da8:	897b      	ldrh	r3, [r7, #10]
 8002daa:	11db      	asrs	r3, r3, #7
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0306 	and.w	r3, r3, #6
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f063 030f 	orn	r3, r3, #15
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4930      	ldr	r1, [pc, #192]	; (8002e88 <I2C_MasterRequestRead+0x194>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f961 	bl	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e054      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4929      	ldr	r1, [pc, #164]	; (8002e8c <I2C_MasterRequestRead+0x198>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f951 	bl	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e044      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f8d9 	bl	8002fe0 <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e42:	d103      	bne.n	8002e4c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e017      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e50:	897b      	ldrh	r3, [r7, #10]
 8002e52:	11db      	asrs	r3, r3, #7
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f003 0306 	and.w	r3, r3, #6
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f063 030e 	orn	r3, r3, #14
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4907      	ldr	r1, [pc, #28]	; (8002e8c <I2C_MasterRequestRead+0x198>)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f90d 	bl	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	00010008 	.word	0x00010008
 8002e8c:	00010002 	.word	0x00010002

08002e90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002eaa:	4b4b      	ldr	r3, [pc, #300]	; (8002fd8 <I2C_DMAAbort+0x148>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	08db      	lsrs	r3, r3, #3
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	; (8002fdc <I2C_DMAAbort+0x14c>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0a1a      	lsrs	r2, r3, #8
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00da      	lsls	r2, r3, #3
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002ed6:	e00a      	b.n	8002eee <I2C_DMAAbort+0x5e>
    }
    count--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eec:	d0ea      	beq.n	8002ec4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	2200      	movs	r2, #0
 8002efc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	2200      	movs	r2, #0
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	2200      	movs	r2, #0
 8002f42:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b60      	cmp	r3, #96	; 0x60
 8002f5e:	d10e      	bne.n	8002f7e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f7fe fd5d 	bl	8001a36 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f7c:	e027      	b.n	8002fce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f84:	2b28      	cmp	r3, #40	; 0x28
 8002f86:	d117      	bne.n	8002fb8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fa6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2228      	movs	r2, #40	; 0x28
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fb6:	e007      	b.n	8002fc8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002fc8:	6978      	ldr	r0, [r7, #20]
 8002fca:	f7fe fd2a 	bl	8001a22 <HAL_I2C_ErrorCallback>
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2000000c 	.word	0x2000000c
 8002fdc:	14f8b589 	.word	0x14f8b589

08002fe0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff0:	e025      	b.n	800303e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d021      	beq.n	800303e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffa:	f7fd fb31 	bl	8000660 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x30>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d116      	bne.n	800303e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e023      	b.n	8003086 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10d      	bne.n	8003064 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	43da      	mvns	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4013      	ands	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	e00c      	b.n	800307e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	429a      	cmp	r2, r3
 8003082:	d0b6      	beq.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800309c:	e051      	b.n	8003142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ac:	d123      	bne.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e046      	b.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d021      	beq.n	8003142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7fd faaf 	bl	8000660 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d116      	bne.n	8003142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e020      	b.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10c      	bne.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	e00b      	b.n	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	43da      	mvns	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4013      	ands	r3, r2
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d18d      	bne.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003198:	e02d      	b.n	80031f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f900 	bl	80033a0 <I2C_IsAcknowledgeFailed>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e02d      	b.n	8003206 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d021      	beq.n	80031f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fd fa55 	bl	8000660 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d116      	bne.n	80031f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e007      	b.n	8003206 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b80      	cmp	r3, #128	; 0x80
 8003202:	d1ca      	bne.n	800319a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800321a:	e02d      	b.n	8003278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f8bf 	bl	80033a0 <I2C_IsAcknowledgeFailed>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e02d      	b.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d021      	beq.n	8003278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003234:	f7fd fa14 	bl	8000660 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	d302      	bcc.n	800324a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d116      	bne.n	8003278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e007      	b.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b04      	cmp	r3, #4
 8003284:	d1ca      	bne.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	0a1a      	lsrs	r2, r3, #8
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d107      	bne.n	80032ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e008      	b.n	80032e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032dc:	d0e9      	beq.n	80032b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	2000000c 	.word	0x2000000c
 80032f0:	14f8b589 	.word	0x14f8b589

080032f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003300:	e042      	b.n	8003388 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d119      	bne.n	8003344 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0210 	mvn.w	r2, #16
 8003318:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e029      	b.n	8003398 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003344:	f7fd f98c 	bl	8000660 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	429a      	cmp	r2, r3
 8003352:	d302      	bcc.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d116      	bne.n	8003388 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e007      	b.n	8003398 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d1b5      	bne.n	8003302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b6:	d11b      	bne.n	80033f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800340e:	d103      	bne.n	8003418 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003416:	e007      	b.n	8003428 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003420:	d102      	bne.n	8003428 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2208      	movs	r2, #8
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	d129      	bne.n	800349e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2224      	movs	r2, #36	; 0x24
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0210 	bic.w	r2, r2, #16
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e000      	b.n	80034a0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
  }
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d12a      	bne.n	800351c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2224      	movs	r2, #36	; 0x24
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80034e6:	89fb      	ldrh	r3, [r7, #14]
 80034e8:	f023 030f 	bic.w	r3, r3, #15
 80034ec:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	89fb      	ldrh	r3, [r7, #14]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	89fa      	ldrh	r2, [r7, #14]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e25e      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d075      	beq.n	8003636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354a:	4b88      	ldr	r3, [pc, #544]	; (800376c <HAL_RCC_OscConfig+0x240>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b04      	cmp	r3, #4
 8003554:	d00c      	beq.n	8003570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003556:	4b85      	ldr	r3, [pc, #532]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355e:	2b08      	cmp	r3, #8
 8003560:	d112      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003562:	4b82      	ldr	r3, [pc, #520]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800356e:	d10b      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	4b7e      	ldr	r3, [pc, #504]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05b      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d157      	bne.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e239      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x74>
 8003592:	4b76      	ldr	r3, [pc, #472]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e01d      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x98>
 80035aa:	4b70      	ldr	r3, [pc, #448]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6f      	ldr	r2, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b6d      	ldr	r3, [pc, #436]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6c      	ldr	r2, [pc, #432]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035c4:	4b69      	ldr	r3, [pc, #420]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a68      	ldr	r2, [pc, #416]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b66      	ldr	r3, [pc, #408]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a65      	ldr	r2, [pc, #404]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fd f83c 	bl	8000660 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fd f838 	bl	8000660 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e1fe      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b5b      	ldr	r3, [pc, #364]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xc0>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fd f828 	bl	8000660 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003614:	f7fd f824 	bl	8000660 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1ea      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	4b51      	ldr	r3, [pc, #324]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d063      	beq.n	800370a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003642:	4b4a      	ldr	r3, [pc, #296]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003656:	2b08      	cmp	r3, #8
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b44      	ldr	r3, [pc, #272]	; (800376c <HAL_RCC_OscConfig+0x240>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1be      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4937      	ldr	r1, [pc, #220]	; (800376c <HAL_RCC_OscConfig+0x240>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b34      	ldr	r3, [pc, #208]	; (8003770 <HAL_RCC_OscConfig+0x244>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fc ffdd 	bl	8000660 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fc ffd9 	bl	8000660 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e19f      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4925      	ldr	r1, [pc, #148]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x244>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fc ffbc 	bl	8000660 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fc ffb8 	bl	8000660 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e17e      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCC_OscConfig+0x248>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fc ff9c 	bl	8000660 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372c:	f7fc ff98 	bl	8000660 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e15e      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x200>
 800374a:	e01b      	b.n	8003784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_OscConfig+0x248>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fc ff85 	bl	8000660 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e00e      	b.n	8003778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375a:	f7fc ff81 	bl	8000660 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d907      	bls.n	8003778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e147      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
 800376c:	40023800 	.word	0x40023800
 8003770:	42470000 	.word	0x42470000
 8003774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	4b88      	ldr	r3, [pc, #544]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ea      	bne.n	800375a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8097 	beq.w	80038c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003796:	4b81      	ldr	r3, [pc, #516]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	4b7d      	ldr	r3, [pc, #500]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a7c      	ldr	r2, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b7a      	ldr	r3, [pc, #488]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c2:	4b77      	ldr	r3, [pc, #476]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d118      	bne.n	8003800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ce:	4b74      	ldr	r3, [pc, #464]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a73      	ldr	r2, [pc, #460]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037da:	f7fc ff41 	bl	8000660 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e2:	f7fc ff3d 	bl	8000660 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e103      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	4b6a      	ldr	r3, [pc, #424]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x2ea>
 8003808:	4b64      	ldr	r3, [pc, #400]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a63      	ldr	r2, [pc, #396]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
 8003814:	e01c      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x30c>
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a5e      	ldr	r2, [pc, #376]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	4b5c      	ldr	r3, [pc, #368]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a5b      	ldr	r2, [pc, #364]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003838:	4b58      	ldr	r3, [pc, #352]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a57      	ldr	r2, [pc, #348]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	4b55      	ldr	r3, [pc, #340]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a54      	ldr	r2, [pc, #336]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800384a:	f023 0304 	bic.w	r3, r3, #4
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fc ff02 	bl	8000660 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fc fefe 	bl	8000660 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0c2      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	4b49      	ldr	r3, [pc, #292]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCC_OscConfig+0x334>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fc feec 	bl	8000660 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fc fee8 	bl	8000660 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0ac      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	4b3e      	ldr	r3, [pc, #248]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ee      	bne.n	800388c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b39      	ldr	r3, [pc, #228]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	4a38      	ldr	r2, [pc, #224]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8098 	beq.w	80039fa <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ca:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d05c      	beq.n	8003990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d141      	bne.n	8003962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_RCC_OscConfig+0x478>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fc febc 	bl	8000660 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fc feb8 	bl	8000660 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e07e      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	491b      	ldr	r1, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fc fe91 	bl	8000660 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003942:	f7fc fe8d 	bl	8000660 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e053      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x416>
 8003960:	e04b      	b.n	80039fa <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fc fe7a 	bl	8000660 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003970:	f7fc fe76 	bl	8000660 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e03c      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x444>
 800398e:	e034      	b.n	80039fa <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e02f      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
 800399c:	40023800 	.word	0x40023800
 80039a0:	40007000 	.word	0x40007000
 80039a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_RCC_OscConfig+0x4d8>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d11c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d115      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10d      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d90c      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d044      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d119      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e067      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4934      	ldr	r1, [pc, #208]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af8:	f7fc fdb2 	bl	8000660 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fc fdae 	bl	8000660 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d20c      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	5ccb      	ldrb	r3, [r1, r3]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fd12 	bl	80005d8 <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08007eb4 	.word	0x08007eb4
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	20000000 	.word	0x20000000

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b090      	sub	sp, #64	; 0x40
 8003bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
 8003be0:	2300      	movs	r3, #0
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be4:	2300      	movs	r3, #0
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d00d      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	f200 80a1 	bhi.w	8003d40 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x34>
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c06:	e09b      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c0c:	e09b      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0e:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c12:	e098      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1e:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d028      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	2200      	movs	r2, #0
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	627a      	str	r2, [r7, #36]	; 0x24
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c40:	fb03 f201 	mul.w	r2, r3, r1
 8003c44:	2300      	movs	r3, #0
 8003c46:	fb00 f303 	mul.w	r3, r0, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c54:	460a      	mov	r2, r1
 8003c56:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5a:	4413      	add	r3, r2
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	2200      	movs	r2, #0
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	61fa      	str	r2, [r7, #28]
 8003c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c6e:	f7fc fb0f 	bl	8000290 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4613      	mov	r3, r2
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7a:	e053      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	2200      	movs	r2, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	617a      	str	r2, [r7, #20]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c8e:	f04f 0b00 	mov.w	fp, #0
 8003c92:	4652      	mov	r2, sl
 8003c94:	465b      	mov	r3, fp
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	0159      	lsls	r1, r3, #5
 8003ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca4:	0150      	lsls	r0, r2, #5
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	ebb2 080a 	subs.w	r8, r2, sl
 8003cae:	eb63 090b 	sbc.w	r9, r3, fp
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cc6:	ebb2 0408 	subs.w	r4, r2, r8
 8003cca:	eb63 0509 	sbc.w	r5, r3, r9
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	00eb      	lsls	r3, r5, #3
 8003cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cdc:	00e2      	lsls	r2, r4, #3
 8003cde:	4614      	mov	r4, r2
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	eb14 030a 	adds.w	r3, r4, sl
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	eb45 030b 	adc.w	r3, r5, fp
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	028b      	lsls	r3, r1, #10
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d04:	4621      	mov	r1, r4
 8003d06:	028a      	lsls	r2, r1, #10
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	60fa      	str	r2, [r7, #12]
 8003d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d18:	f7fc faba 	bl	8000290 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4613      	mov	r3, r2
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3740      	adds	r7, #64	; 0x40
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	017d7840 	.word	0x017d7840

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d7c:	f7ff fff0 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0a9b      	lsrs	r3, r3, #10
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4903      	ldr	r1, [pc, #12]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	08007ec4 	.word	0x08007ec4

08003da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da4:	f7ff ffdc 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0b5b      	lsrs	r3, r3, #13
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	08007ec4 	.word	0x08007ec4

08003dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e03f      	b.n	8003e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f003 fa8e 	bl	8007310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	; 0x24
 8003df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fbb5 	bl	800457c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b088      	sub	sp, #32
 8003e66:	af02      	add	r7, sp, #8
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	f040 8083 	bne.w	8003f8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_UART_Transmit+0x2e>
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e07b      	b.n	8003f8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Transmit+0x40>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e074      	b.n	8003f8c <HAL_UART_Transmit+0x12a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2221      	movs	r2, #33	; 0x21
 8003eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003eb8:	f7fc fbd2 	bl	8000660 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	88fa      	ldrh	r2, [r7, #6]
 8003ec2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003ed2:	e042      	b.n	8003f5a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	d122      	bne.n	8003f32 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2180      	movs	r1, #128	; 0x80
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f9b6 	bl	8004268 <UART_WaitOnFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e042      	b.n	8003f8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f18:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	3302      	adds	r3, #2
 8003f26:	60bb      	str	r3, [r7, #8]
 8003f28:	e017      	b.n	8003f5a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	e013      	b.n	8003f5a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2180      	movs	r1, #128	; 0x80
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f993 	bl	8004268 <UART_WaitOnFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e01f      	b.n	8003f8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	60ba      	str	r2, [r7, #8]
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1b7      	bne.n	8003ed4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f97a 	bl	8004268 <UART_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e006      	b.n	8003f8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d140      	bne.n	8004030 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_UART_Receive_IT+0x26>
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e039      	b.n	8004032 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Receive_IT+0x38>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e032      	b.n	8004032 <HAL_UART_Receive_IT+0x9e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	88fa      	ldrh	r2, [r7, #6]
 8003fde:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2222      	movs	r2, #34	; 0x22
 8003ff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800400a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0220 	orr.w	r2, r2, #32
 800402a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	e000      	b.n	8004032 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004030:	2302      	movs	r3, #2
  }
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10d      	bne.n	8004092 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_UART_IRQHandler+0x52>
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f9d6 	bl	800443c <UART_Receive_IT>
      return;
 8004090:	e0d0      	b.n	8004234 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80b0 	beq.w	80041fa <HAL_UART_IRQHandler+0x1ba>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_UART_IRQHandler+0x70>
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80a5 	beq.w	80041fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_UART_IRQHandler+0x90>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_UART_IRQHandler+0xb0>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	f043 0202 	orr.w	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_UART_IRQHandler+0xd0>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00f      	beq.n	800413a <HAL_UART_IRQHandler+0xfa>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <HAL_UART_IRQHandler+0xee>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	f043 0208 	orr.w	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d077      	beq.n	8004232 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <HAL_UART_IRQHandler+0x11c>
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f970 	bl	800443c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	bf0c      	ite	eq
 800416a:	2301      	moveq	r3, #1
 800416c:	2300      	movne	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_UART_IRQHandler+0x144>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d031      	beq.n	80041e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f8b9 	bl	80042fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d123      	bne.n	80041e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	4a21      	ldr	r2, [pc, #132]	; (800423c <HAL_UART_IRQHandler+0x1fc>)
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fc fb6c 	bl	800089a <HAL_DMA_Abort_IT>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d016      	beq.n	80041f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041d2:	4610      	mov	r0, r2
 80041d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d6:	e00e      	b.n	80041f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f83b 	bl	8004254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041de:	e00a      	b.n	80041f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f837 	bl	8004254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e6:	e006      	b.n	80041f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f833 	bl	8004254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80041f4:	e01d      	b.n	8004232 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f6:	bf00      	nop
    return;
 80041f8:	e01b      	b.n	8004232 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_UART_IRQHandler+0x1d6>
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8a6 	bl	8004360 <UART_Transmit_IT>
    return;
 8004214:	e00e      	b.n	8004234 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <HAL_UART_IRQHandler+0x1f4>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d004      	beq.n	8004234 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8ee 	bl	800440c <UART_EndTransmit_IT>
    return;
 8004230:	e000      	b.n	8004234 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004232:	bf00      	nop
  }
}
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	08004339 	.word	0x08004339

08004240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004278:	e02c      	b.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d028      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x30>
 8004288:	f7fc f9ea 	bl	8000660 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	429a      	cmp	r2, r3
 8004296:	d21d      	bcs.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e00f      	b.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d0c3      	beq.n	800427a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004312:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff ff7e 	bl	8004254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b21      	cmp	r3, #33	; 0x21
 8004372:	d144      	bne.n	80043fe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d11a      	bne.n	80043b4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004392:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	1c9a      	adds	r2, r3, #2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	621a      	str	r2, [r3, #32]
 80043a6:	e00e      	b.n	80043c6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	621a      	str	r2, [r3, #32]
 80043b2:	e008      	b.n	80043c6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	1c59      	adds	r1, r3, #1
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6211      	str	r1, [r2, #32]
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4619      	mov	r1, r3
 80043d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004422:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff07 	bl	8004240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b22      	cmp	r3, #34	; 0x22
 800444e:	f040 8090 	bne.w	8004572 <UART_Receive_IT+0x136>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800445a:	d123      	bne.n	80044a4 <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10e      	bne.n	8004488 <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	1c9a      	adds	r2, r3, #2
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	629a      	str	r2, [r3, #40]	; 0x28
 8004486:	e029      	b.n	80044dc <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b29b      	uxth	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
 80044a2:	e01b      	b.n	80044dc <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6858      	ldr	r0, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	1c59      	adds	r1, r3, #1
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6291      	str	r1, [r2, #40]	; 0x28
 80044bc:	b2c2      	uxtb	r2, r0
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	e00c      	b.n	80044dc <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	1c58      	adds	r0, r3, #1
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	6288      	str	r0, [r1, #40]	; 0x28
 80044d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4619      	mov	r1, r3
 80044ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d13e      	bne.n	800456e <UART_Receive_IT+0x132>
    {
    	//This allows the buffer to resize based on length of the Ground Station commands over UART
    	if((*(huart->pRxBuffPtr-1)!= 0) && (huart->RxXferSize == 4)){
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d017      	beq.n	800452c <UART_Receive_IT+0xf0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004500:	2b04      	cmp	r3, #4
 8004502:	d113      	bne.n	800452c <UART_Receive_IT+0xf0>
    		huart->RxXferCount = *(huart->pRxBuffPtr-1) + 1;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	3301      	adds	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	85da      	strh	r2, [r3, #46]	; 0x2e
    		huart->RxXferSize = *(huart->pRxBuffPtr-1) + 5;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	3b01      	subs	r3, #1
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	3305      	adds	r3, #5
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	859a      	strh	r2, [r3, #44]	; 0x2c
    		return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e023      	b.n	8004574 <UART_Receive_IT+0x138>
    	}
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0220 	bic.w	r2, r2, #32
 800453a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800454a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f002 fd61 	bl	800702c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e002      	b.n	8004574 <UART_Receive_IT+0x138>
    }
    return HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	e000      	b.n	8004574 <UART_Receive_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8004572:	2302      	movs	r3, #2
  }
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800457c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004580:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004584:	af00      	add	r7, sp, #0
 8004586:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800458a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004596:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800459a:	68d9      	ldr	r1, [r3, #12]
 800459c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	ea40 0301 	orr.w	r3, r0, r1
 80045a6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	431a      	orrs	r2, r3
 80045be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80045ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045d6:	f021 010c 	bic.w	r1, r1, #12
 80045da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80045e4:	430b      	orrs	r3, r1
 80045e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045f8:	6999      	ldr	r1, [r3, #24]
 80045fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	ea40 0301 	orr.w	r3, r0, r1
 8004604:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004606:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004610:	f040 824a 	bne.w	8004aa8 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004614:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b96      	ldr	r3, [pc, #600]	; (8004874 <UART_SetConfig+0x2f8>)
 800461c:	429a      	cmp	r2, r3
 800461e:	d006      	beq.n	800462e <UART_SetConfig+0xb2>
 8004620:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b94      	ldr	r3, [pc, #592]	; (8004878 <UART_SetConfig+0x2fc>)
 8004628:	429a      	cmp	r2, r3
 800462a:	f040 8129 	bne.w	8004880 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800462e:	f7ff fbb7 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8004632:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004636:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004640:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004644:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004648:	4622      	mov	r2, r4
 800464a:	462b      	mov	r3, r5
 800464c:	1891      	adds	r1, r2, r2
 800464e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004652:	415b      	adcs	r3, r3
 8004654:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004658:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800465c:	4621      	mov	r1, r4
 800465e:	1851      	adds	r1, r2, r1
 8004660:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004664:	4629      	mov	r1, r5
 8004666:	414b      	adcs	r3, r1
 8004668:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004678:	4649      	mov	r1, r9
 800467a:	00cb      	lsls	r3, r1, #3
 800467c:	4641      	mov	r1, r8
 800467e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004682:	4641      	mov	r1, r8
 8004684:	00ca      	lsls	r2, r1, #3
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	4603      	mov	r3, r0
 800468c:	4622      	mov	r2, r4
 800468e:	189b      	adds	r3, r3, r2
 8004690:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004694:	462b      	mov	r3, r5
 8004696:	460a      	mov	r2, r1
 8004698:	eb42 0303 	adc.w	r3, r2, r3
 800469c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80046a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80046ac:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80046b0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80046b4:	460b      	mov	r3, r1
 80046b6:	18db      	adds	r3, r3, r3
 80046b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046bc:	4613      	mov	r3, r2
 80046be:	eb42 0303 	adc.w	r3, r2, r3
 80046c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046c6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80046ca:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80046ce:	f7fb fddf 	bl	8000290 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4b69      	ldr	r3, [pc, #420]	; (800487c <UART_SetConfig+0x300>)
 80046d8:	fba3 2302 	umull	r2, r3, r3, r2
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	011c      	lsls	r4, r3, #4
 80046e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80046ea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80046ee:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80046f2:	4642      	mov	r2, r8
 80046f4:	464b      	mov	r3, r9
 80046f6:	1891      	adds	r1, r2, r2
 80046f8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80046fc:	415b      	adcs	r3, r3
 80046fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004702:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004706:	4641      	mov	r1, r8
 8004708:	1851      	adds	r1, r2, r1
 800470a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800470e:	4649      	mov	r1, r9
 8004710:	414b      	adcs	r3, r1
 8004712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004722:	4659      	mov	r1, fp
 8004724:	00cb      	lsls	r3, r1, #3
 8004726:	4651      	mov	r1, sl
 8004728:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472c:	4651      	mov	r1, sl
 800472e:	00ca      	lsls	r2, r1, #3
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	4603      	mov	r3, r0
 8004736:	4642      	mov	r2, r8
 8004738:	189b      	adds	r3, r3, r2
 800473a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800473e:	464b      	mov	r3, r9
 8004740:	460a      	mov	r2, r1
 8004742:	eb42 0303 	adc.w	r3, r2, r3
 8004746:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800474a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004756:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800475a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800475e:	460b      	mov	r3, r1
 8004760:	18db      	adds	r3, r3, r3
 8004762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004766:	4613      	mov	r3, r2
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004770:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004774:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004778:	f7fb fd8a 	bl	8000290 <__aeabi_uldivmod>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4611      	mov	r1, r2
 8004782:	4b3e      	ldr	r3, [pc, #248]	; (800487c <UART_SetConfig+0x300>)
 8004784:	fba3 2301 	umull	r2, r3, r3, r1
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	2264      	movs	r2, #100	; 0x64
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	1acb      	subs	r3, r1, r3
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004798:	4b38      	ldr	r3, [pc, #224]	; (800487c <UART_SetConfig+0x300>)
 800479a:	fba3 2302 	umull	r2, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047a6:	441c      	add	r4, r3
 80047a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047ac:	2200      	movs	r2, #0
 80047ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80047b2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80047b6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80047ba:	4642      	mov	r2, r8
 80047bc:	464b      	mov	r3, r9
 80047be:	1891      	adds	r1, r2, r2
 80047c0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80047c4:	415b      	adcs	r3, r3
 80047c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047ca:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80047ce:	4641      	mov	r1, r8
 80047d0:	1851      	adds	r1, r2, r1
 80047d2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80047d6:	4649      	mov	r1, r9
 80047d8:	414b      	adcs	r3, r1
 80047da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80047ea:	4659      	mov	r1, fp
 80047ec:	00cb      	lsls	r3, r1, #3
 80047ee:	4651      	mov	r1, sl
 80047f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f4:	4651      	mov	r1, sl
 80047f6:	00ca      	lsls	r2, r1, #3
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	4603      	mov	r3, r0
 80047fe:	4642      	mov	r2, r8
 8004800:	189b      	adds	r3, r3, r2
 8004802:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004806:	464b      	mov	r3, r9
 8004808:	460a      	mov	r2, r1
 800480a:	eb42 0303 	adc.w	r3, r2, r3
 800480e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004812:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800481e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004822:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004826:	460b      	mov	r3, r1
 8004828:	18db      	adds	r3, r3, r3
 800482a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800482e:	4613      	mov	r3, r2
 8004830:	eb42 0303 	adc.w	r3, r2, r3
 8004834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004838:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800483c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004840:	f7fb fd26 	bl	8000290 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <UART_SetConfig+0x300>)
 800484a:	fba3 1302 	umull	r1, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2164      	movs	r1, #100	; 0x64
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	3332      	adds	r3, #50	; 0x32
 800485c:	4a07      	ldr	r2, [pc, #28]	; (800487c <UART_SetConfig+0x300>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f003 0207 	and.w	r2, r3, #7
 8004868:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4422      	add	r2, r4
 8004870:	609a      	str	r2, [r3, #8]
 8004872:	e349      	b.n	8004f08 <UART_SetConfig+0x98c>
 8004874:	40011000 	.word	0x40011000
 8004878:	40011400 	.word	0x40011400
 800487c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004880:	f7ff fa7a 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8004884:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004888:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800488c:	2200      	movs	r2, #0
 800488e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004892:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004896:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800489a:	4622      	mov	r2, r4
 800489c:	462b      	mov	r3, r5
 800489e:	1891      	adds	r1, r2, r2
 80048a0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80048a4:	415b      	adcs	r3, r3
 80048a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80048aa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048ae:	4621      	mov	r1, r4
 80048b0:	eb12 0a01 	adds.w	sl, r2, r1
 80048b4:	4629      	mov	r1, r5
 80048b6:	eb43 0b01 	adc.w	fp, r3, r1
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ce:	4692      	mov	sl, r2
 80048d0:	469b      	mov	fp, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	eb1a 0303 	adds.w	r3, sl, r3
 80048d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80048dc:	462b      	mov	r3, r5
 80048de:	eb4b 0303 	adc.w	r3, fp, r3
 80048e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80048e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80048f2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80048f6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80048fa:	460b      	mov	r3, r1
 80048fc:	18db      	adds	r3, r3, r3
 80048fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004902:	4613      	mov	r3, r2
 8004904:	eb42 0303 	adc.w	r3, r2, r3
 8004908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800490c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004910:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004914:	f7fb fcbc 	bl	8000290 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <UART_SetConfig+0x528>)
 800491e:	fba3 2302 	umull	r2, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	011c      	lsls	r4, r3, #4
 8004926:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004930:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004934:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	1891      	adds	r1, r2, r2
 800493e:	67b9      	str	r1, [r7, #120]	; 0x78
 8004940:	415b      	adcs	r3, r3
 8004942:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004944:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004948:	4641      	mov	r1, r8
 800494a:	1851      	adds	r1, r2, r1
 800494c:	6739      	str	r1, [r7, #112]	; 0x70
 800494e:	4649      	mov	r1, r9
 8004950:	414b      	adcs	r3, r1
 8004952:	677b      	str	r3, [r7, #116]	; 0x74
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004960:	4659      	mov	r1, fp
 8004962:	00cb      	lsls	r3, r1, #3
 8004964:	4651      	mov	r1, sl
 8004966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800496a:	4651      	mov	r1, sl
 800496c:	00ca      	lsls	r2, r1, #3
 800496e:	4610      	mov	r0, r2
 8004970:	4619      	mov	r1, r3
 8004972:	4603      	mov	r3, r0
 8004974:	4642      	mov	r2, r8
 8004976:	189b      	adds	r3, r3, r2
 8004978:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800497c:	464b      	mov	r3, r9
 800497e:	460a      	mov	r2, r1
 8004980:	eb42 0303 	adc.w	r3, r2, r3
 8004984:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004988:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004994:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004998:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 800499c:	460b      	mov	r3, r1
 800499e:	18db      	adds	r3, r3, r3
 80049a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a2:	4613      	mov	r3, r2
 80049a4:	eb42 0303 	adc.w	r3, r2, r3
 80049a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80049ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80049b2:	f7fb fc6d 	bl	8000290 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	4b39      	ldr	r3, [pc, #228]	; (8004aa4 <UART_SetConfig+0x528>)
 80049be:	fba3 2301 	umull	r2, r3, r3, r1
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2264      	movs	r2, #100	; 0x64
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	1acb      	subs	r3, r1, r3
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049d2:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <UART_SetConfig+0x528>)
 80049d4:	fba3 2302 	umull	r2, r3, r3, r2
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049e0:	441c      	add	r4, r3
 80049e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80049ec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80049f0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	1891      	adds	r1, r2, r2
 80049fa:	6639      	str	r1, [r7, #96]	; 0x60
 80049fc:	415b      	adcs	r3, r3
 80049fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004a00:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004a04:	4641      	mov	r1, r8
 8004a06:	1851      	adds	r1, r2, r1
 8004a08:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	414b      	adcs	r3, r1
 8004a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	00cb      	lsls	r3, r1, #3
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a26:	4651      	mov	r1, sl
 8004a28:	00ca      	lsls	r2, r1, #3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4642      	mov	r2, r8
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004a38:	464b      	mov	r3, r9
 8004a3a:	460a      	mov	r2, r1
 8004a3c:	eb42 0303 	adc.w	r3, r2, r3
 8004a40:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004a44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004a50:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004a54:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004a58:	460b      	mov	r3, r1
 8004a5a:	18db      	adds	r3, r3, r3
 8004a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a5e:	4613      	mov	r3, r2
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	657b      	str	r3, [r7, #84]	; 0x54
 8004a66:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a6a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004a6e:	f7fb fc0f 	bl	8000290 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <UART_SetConfig+0x528>)
 8004a78:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	2164      	movs	r1, #100	; 0x64
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	3332      	adds	r3, #50	; 0x32
 8004a8a:	4a06      	ldr	r2, [pc, #24]	; (8004aa4 <UART_SetConfig+0x528>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	f003 0207 	and.w	r2, r3, #7
 8004a96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4422      	add	r2, r4
 8004a9e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004aa0:	e232      	b.n	8004f08 <UART_SetConfig+0x98c>
 8004aa2:	bf00      	nop
 8004aa4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aa8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b8d      	ldr	r3, [pc, #564]	; (8004ce4 <UART_SetConfig+0x768>)
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d006      	beq.n	8004ac2 <UART_SetConfig+0x546>
 8004ab4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b8b      	ldr	r3, [pc, #556]	; (8004ce8 <UART_SetConfig+0x76c>)
 8004abc:	429a      	cmp	r2, r3
 8004abe:	f040 8117 	bne.w	8004cf0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ac2:	f7ff f96d 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8004ac6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004ad4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004ad8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004adc:	4622      	mov	r2, r4
 8004ade:	462b      	mov	r3, r5
 8004ae0:	1891      	adds	r1, r2, r2
 8004ae2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ae4:	415b      	adcs	r3, r3
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004aec:	4621      	mov	r1, r4
 8004aee:	eb12 0801 	adds.w	r8, r2, r1
 8004af2:	4629      	mov	r1, r5
 8004af4:	eb43 0901 	adc.w	r9, r3, r1
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0c:	4690      	mov	r8, r2
 8004b0e:	4699      	mov	r9, r3
 8004b10:	4623      	mov	r3, r4
 8004b12:	eb18 0303 	adds.w	r3, r8, r3
 8004b16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	eb49 0303 	adc.w	r3, r9, r3
 8004b20:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004b24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b30:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004b40:	4629      	mov	r1, r5
 8004b42:	008b      	lsls	r3, r1, #2
 8004b44:	4621      	mov	r1, r4
 8004b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	008a      	lsls	r2, r1, #2
 8004b4e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004b52:	f7fb fb9d 	bl	8000290 <__aeabi_uldivmod>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4b64      	ldr	r3, [pc, #400]	; (8004cec <UART_SetConfig+0x770>)
 8004b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	011c      	lsls	r4, r3, #4
 8004b64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004b6e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004b72:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004b76:	4642      	mov	r2, r8
 8004b78:	464b      	mov	r3, r9
 8004b7a:	1891      	adds	r1, r2, r2
 8004b7c:	6439      	str	r1, [r7, #64]	; 0x40
 8004b7e:	415b      	adcs	r3, r3
 8004b80:	647b      	str	r3, [r7, #68]	; 0x44
 8004b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b86:	4641      	mov	r1, r8
 8004b88:	1851      	adds	r1, r2, r1
 8004b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	414b      	adcs	r3, r1
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004b9e:	4659      	mov	r1, fp
 8004ba0:	00cb      	lsls	r3, r1, #3
 8004ba2:	4651      	mov	r1, sl
 8004ba4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba8:	4651      	mov	r1, sl
 8004baa:	00ca      	lsls	r2, r1, #3
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4642      	mov	r2, r8
 8004bb4:	189b      	adds	r3, r3, r2
 8004bb6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004bba:	464b      	mov	r3, r9
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	eb42 0303 	adc.w	r3, r2, r3
 8004bc2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004bc6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004bd2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004be2:	4649      	mov	r1, r9
 8004be4:	008b      	lsls	r3, r1, #2
 8004be6:	4641      	mov	r1, r8
 8004be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bec:	4641      	mov	r1, r8
 8004bee:	008a      	lsls	r2, r1, #2
 8004bf0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004bf4:	f7fb fb4c 	bl	8000290 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <UART_SetConfig+0x770>)
 8004bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	2164      	movs	r1, #100	; 0x64
 8004c06:	fb01 f303 	mul.w	r3, r1, r3
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	3332      	adds	r3, #50	; 0x32
 8004c10:	4a36      	ldr	r2, [pc, #216]	; (8004cec <UART_SetConfig+0x770>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c1c:	441c      	add	r4, r3
 8004c1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004c28:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004c2c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	6339      	str	r1, [r7, #48]	; 0x30
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c40:	4641      	mov	r1, r8
 8004c42:	1851      	adds	r1, r2, r1
 8004c44:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c46:	4649      	mov	r1, r9
 8004c48:	414b      	adcs	r3, r1
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004c58:	4659      	mov	r1, fp
 8004c5a:	00cb      	lsls	r3, r1, #3
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c62:	4651      	mov	r1, sl
 8004c64:	00ca      	lsls	r2, r1, #3
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c74:	464b      	mov	r3, r9
 8004c76:	460a      	mov	r2, r1
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c8c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	008b      	lsls	r3, r1, #2
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	008a      	lsls	r2, r1, #2
 8004caa:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004cae:	f7fb faef 	bl	8000290 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <UART_SetConfig+0x770>)
 8004cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	2164      	movs	r1, #100	; 0x64
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	3332      	adds	r3, #50	; 0x32
 8004cca:	4a08      	ldr	r2, [pc, #32]	; (8004cec <UART_SetConfig+0x770>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	f003 020f 	and.w	r2, r3, #15
 8004cd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4422      	add	r2, r4
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	e112      	b.n	8004f08 <UART_SetConfig+0x98c>
 8004ce2:	bf00      	nop
 8004ce4:	40011000 	.word	0x40011000
 8004ce8:	40011400 	.word	0x40011400
 8004cec:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7ff f842 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004d02:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004d06:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	1891      	adds	r1, r2, r2
 8004d10:	6239      	str	r1, [r7, #32]
 8004d12:	415b      	adcs	r3, r3
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
 8004d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	1854      	adds	r4, r2, r1
 8004d1e:	4649      	mov	r1, r9
 8004d20:	eb43 0501 	adc.w	r5, r3, r1
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	00eb      	lsls	r3, r5, #3
 8004d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d32:	00e2      	lsls	r2, r4, #3
 8004d34:	4614      	mov	r4, r2
 8004d36:	461d      	mov	r5, r3
 8004d38:	4643      	mov	r3, r8
 8004d3a:	18e3      	adds	r3, r4, r3
 8004d3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004d40:	464b      	mov	r3, r9
 8004d42:	eb45 0303 	adc.w	r3, r5, r3
 8004d46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004d4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d56:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004d66:	4629      	mov	r1, r5
 8004d68:	008b      	lsls	r3, r1, #2
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d70:	4621      	mov	r1, r4
 8004d72:	008a      	lsls	r2, r1, #2
 8004d74:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004d78:	f7fb fa8a 	bl	8000290 <__aeabi_uldivmod>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4b64      	ldr	r3, [pc, #400]	; (8004f14 <UART_SetConfig+0x998>)
 8004d82:	fba3 2302 	umull	r2, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	011c      	lsls	r4, r3, #4
 8004d8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d94:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004d98:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	1891      	adds	r1, r2, r2
 8004da2:	61b9      	str	r1, [r7, #24]
 8004da4:	415b      	adcs	r3, r3
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dac:	4641      	mov	r1, r8
 8004dae:	1851      	adds	r1, r2, r1
 8004db0:	6139      	str	r1, [r7, #16]
 8004db2:	4649      	mov	r1, r9
 8004db4:	414b      	adcs	r3, r1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	00cb      	lsls	r3, r1, #3
 8004dc8:	4651      	mov	r1, sl
 8004dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dce:	4651      	mov	r1, sl
 8004dd0:	00ca      	lsls	r2, r1, #3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4642      	mov	r2, r8
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004de0:	464b      	mov	r3, r9
 8004de2:	460a      	mov	r2, r1
 8004de4:	eb42 0303 	adc.w	r3, r2, r3
 8004de8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004dec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004df8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004e08:	4649      	mov	r1, r9
 8004e0a:	008b      	lsls	r3, r1, #2
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e12:	4641      	mov	r1, r8
 8004e14:	008a      	lsls	r2, r1, #2
 8004e16:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004e1a:	f7fb fa39 	bl	8000290 <__aeabi_uldivmod>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4b3c      	ldr	r3, [pc, #240]	; (8004f14 <UART_SetConfig+0x998>)
 8004e24:	fba3 1302 	umull	r1, r3, r3, r2
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	2164      	movs	r1, #100	; 0x64
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	3332      	adds	r3, #50	; 0x32
 8004e36:	4a37      	ldr	r2, [pc, #220]	; (8004f14 <UART_SetConfig+0x998>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e42:	441c      	add	r4, r3
 8004e44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e52:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004e56:	4642      	mov	r2, r8
 8004e58:	464b      	mov	r3, r9
 8004e5a:	1891      	adds	r1, r2, r2
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	415b      	adcs	r3, r3
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e66:	4641      	mov	r1, r8
 8004e68:	1851      	adds	r1, r2, r1
 8004e6a:	6039      	str	r1, [r7, #0]
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	414b      	adcs	r3, r1
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e7e:	4659      	mov	r1, fp
 8004e80:	00cb      	lsls	r3, r1, #3
 8004e82:	4651      	mov	r1, sl
 8004e84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e88:	4651      	mov	r1, sl
 8004e8a:	00ca      	lsls	r2, r1, #3
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4603      	mov	r3, r0
 8004e92:	4642      	mov	r2, r8
 8004e94:	189b      	adds	r3, r3, r2
 8004e96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ea6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	008b      	lsls	r3, r1, #2
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ecc:	4641      	mov	r1, r8
 8004ece:	008a      	lsls	r2, r1, #2
 8004ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ed4:	f7fb f9dc 	bl	8000290 <__aeabi_uldivmod>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <UART_SetConfig+0x998>)
 8004ede:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2164      	movs	r1, #100	; 0x64
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	3332      	adds	r3, #50	; 0x32
 8004ef0:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <UART_SetConfig+0x998>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	f003 020f 	and.w	r2, r3, #15
 8004efc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4422      	add	r2, r4
 8004f04:	609a      	str	r2, [r3, #8]
}
 8004f06:	e7ff      	b.n	8004f08 <UART_SetConfig+0x98c>
 8004f08:	bf00      	nop
 8004f0a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f14:	51eb851f 	.word	0x51eb851f

08004f18 <READ_EPS_BATTERY_VOLTAGE>:
/**
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(float* volt_ptr){
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 1; //battery voltage command
 8004f24:	2301      	movs	r3, #1
 8004f26:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004f28:	f107 0208 	add.w	r2, r7, #8
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fdcb 	bl	8005acc <EPS_READ>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <READ_EPS_BATTERY_VOLTAGE+0x2c>
        return status;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	e014      	b.n	8004f6e <READ_EPS_BATTERY_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004f44:	7a3b      	ldrb	r3, [r7, #8]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	7a7b      	ldrb	r3, [r7, #9]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	4413      	add	r3, r2
 8004f52:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 8004f54:	89bb      	ldrh	r3, [r7, #12]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f78 <READ_EPS_BATTERY_VOLTAGE+0x60>
 8004f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58
    return status;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	3b1951eb 	.word	0x3b1951eb

08004f7c <READ_EPS_BATTERY_CURRENT>:
/**
  * @brief Reads the current level of the EPS battery bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_CURRENT(float* curr_ptr){
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 2; //battery current command
 8004f88:	2302      	movs	r3, #2
 8004f8a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004f8c:	f107 0208 	add.w	r2, r7, #8
 8004f90:	7bbb      	ldrb	r3, [r7, #14]
 8004f92:	4611      	mov	r1, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fd99 	bl	8005acc <EPS_READ>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <READ_EPS_BATTERY_CURRENT+0x2c>
        return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	e014      	b.n	8004fd2 <READ_EPS_BATTERY_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8004fa8:	7a3b      	ldrb	r3, [r7, #8]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	7a7b      	ldrb	r3, [r7, #9]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0030517578f * (float) raw_value; //multiply by the conversion coeff
 8004fb8:	89bb      	ldrh	r3, [r7, #12]
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004fdc <READ_EPS_BATTERY_CURRENT+0x60>
 8004fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0030517578f * 4095 = 12.497 A
    return status;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	3b480000 	.word	0x3b480000

08004fe0 <READ_EPS_SOLAR_X_VOLTAGE>:
/**
  * @brief Reads the voltage of the X-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_VOLTAGE(float* volt_ptr){
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 5; //solar panel x-axis voltage command
 8004fec:	2305      	movs	r3, #5
 8004fee:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8004ff0:	f107 0208 	add.w	r2, r7, #8
 8004ff4:	7bbb      	ldrb	r3, [r7, #14]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fd67 	bl	8005acc <EPS_READ>
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <READ_EPS_SOLAR_X_VOLTAGE+0x2c>
        return status;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	e014      	b.n	8005036 <READ_EPS_SOLAR_X_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800500c:	7a3b      	ldrb	r3, [r7, #8]
 800500e:	b29b      	uxth	r3, r3
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	b29a      	uxth	r2, r3
 8005014:	7a7b      	ldrb	r3, [r7, #9]
 8005016:	b29b      	uxth	r3, r3
 8005018:	4413      	add	r3, r2
 800501a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 800501c:	89bb      	ldrh	r3, [r7, #12]
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005026:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005040 <READ_EPS_SOLAR_X_VOLTAGE+0x60>
 800502a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005034:	7bfb      	ldrb	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	3b200000 	.word	0x3b200000

08005044 <READ_EPS_SOLAR_X_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the X- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_NEG_CURRENT(float* curr_ptr){
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 6; //solar panel x- current command
 8005050:	2306      	movs	r3, #6
 8005052:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005054:	f107 0208 	add.w	r2, r7, #8
 8005058:	7bbb      	ldrb	r3, [r7, #14]
 800505a:	4611      	mov	r1, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fd35 	bl	8005acc <EPS_READ>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <READ_EPS_SOLAR_X_NEG_CURRENT+0x2c>
        return status;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	e014      	b.n	800509a <READ_EPS_SOLAR_X_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005070:	7a3b      	ldrb	r3, [r7, #8]
 8005072:	b29b      	uxth	r3, r3
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	b29a      	uxth	r2, r3
 8005078:	7a7b      	ldrb	r3, [r7, #9]
 800507a:	b29b      	uxth	r3, r3
 800507c:	4413      	add	r3, r2
 800507e:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8005080:	89bb      	ldrh	r3, [r7, #12]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80050a4 <READ_EPS_SOLAR_X_NEG_CURRENT+0x60>
 800508e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	3a200001 	.word	0x3a200001

080050a8 <READ_EPS_SOLAR_X_POS_CURRENT>:
/**
  * @brief Reads the voltage of the X+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_POS_CURRENT(float* curr_ptr){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 7; //solar panel x+ current command
 80050b4:	2307      	movs	r3, #7
 80050b6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80050b8:	f107 0208 	add.w	r2, r7, #8
 80050bc:	7bbb      	ldrb	r3, [r7, #14]
 80050be:	4611      	mov	r1, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fd03 	bl	8005acc <EPS_READ>
 80050c6:	4603      	mov	r3, r0
 80050c8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <READ_EPS_SOLAR_X_POS_CURRENT+0x2c>
        return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	e014      	b.n	80050fe <READ_EPS_SOLAR_X_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80050d4:	7a3b      	ldrb	r3, [r7, #8]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	b29a      	uxth	r2, r3
 80050dc:	7a7b      	ldrb	r3, [r7, #9]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4413      	add	r3, r2
 80050e2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80050e4:	89bb      	ldrh	r3, [r7, #12]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005108 <READ_EPS_SOLAR_X_POS_CURRENT+0x60>
 80050f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	3a200001 	.word	0x3a200001

0800510c <READ_EPS_SOLAR_Y_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_VOLTAGE(float* volt_ptr){
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 8; //solar panel y-axis voltage command
 8005118:	2308      	movs	r3, #8
 800511a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800511c:	f107 0208 	add.w	r2, r7, #8
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fcd1 	bl	8005acc <EPS_READ>
 800512a:	4603      	mov	r3, r0
 800512c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <READ_EPS_SOLAR_Y_VOLTAGE+0x2c>
        return status;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	e014      	b.n	8005162 <READ_EPS_SOLAR_Y_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005138:	7a3b      	ldrb	r3, [r7, #8]
 800513a:	b29b      	uxth	r3, r3
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	b29a      	uxth	r2, r3
 8005140:	7a7b      	ldrb	r3, [r7, #9]
 8005142:	b29b      	uxth	r3, r3
 8005144:	4413      	add	r3, r2
 8005146:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8005148:	89bb      	ldrh	r3, [r7, #12]
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800516c <READ_EPS_SOLAR_Y_VOLTAGE+0x60>
 8005156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	3b200000 	.word	0x3b200000

08005170 <READ_EPS_SOLAR_Y_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Y- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_NEG_CURRENT(float* curr_ptr){
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 9; //solar panel y- current command
 800517c:	2309      	movs	r3, #9
 800517e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005180:	f107 0208 	add.w	r2, r7, #8
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fc9f 	bl	8005acc <EPS_READ>
 800518e:	4603      	mov	r3, r0
 8005190:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <READ_EPS_SOLAR_Y_NEG_CURRENT+0x2c>
        return status;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	e014      	b.n	80051c6 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800519c:	7a3b      	ldrb	r3, [r7, #8]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	7a7b      	ldrb	r3, [r7, #9]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4413      	add	r3, r2
 80051aa:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80051ac:	89bb      	ldrh	r3, [r7, #12]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80051d0 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x60>
 80051ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	3a200001 	.word	0x3a200001

080051d4 <READ_EPS_SOLAR_Y_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Y+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_POS_CURRENT(float* curr_ptr){
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 10; //solar panel y+ current command
 80051e0:	230a      	movs	r3, #10
 80051e2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80051e4:	f107 0208 	add.w	r2, r7, #8
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	4611      	mov	r1, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fc6d 	bl	8005acc <EPS_READ>
 80051f2:	4603      	mov	r3, r0
 80051f4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <READ_EPS_SOLAR_Y_POS_CURRENT+0x2c>
        return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	e014      	b.n	800522a <READ_EPS_SOLAR_Y_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005200:	7a3b      	ldrb	r3, [r7, #8]
 8005202:	b29b      	uxth	r3, r3
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	b29a      	uxth	r2, r3
 8005208:	7a7b      	ldrb	r3, [r7, #9]
 800520a:	b29b      	uxth	r3, r3
 800520c:	4413      	add	r3, r2
 800520e:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8005210:	89bb      	ldrh	r3, [r7, #12]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005234 <READ_EPS_SOLAR_Y_POS_CURRENT+0x60>
 800521e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	3a200001 	.word	0x3a200001

08005238 <READ_EPS_SOLAR_Z_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_VOLTAGE(float* volt_ptr){
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 11; //solar panel z-axis voltage command
 8005244:	230b      	movs	r3, #11
 8005246:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005248:	f107 0208 	add.w	r2, r7, #8
 800524c:	7bbb      	ldrb	r3, [r7, #14]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fc3b 	bl	8005acc <EPS_READ>
 8005256:	4603      	mov	r3, r0
 8005258:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <READ_EPS_SOLAR_Z_VOLTAGE+0x2c>
        return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	e014      	b.n	800528e <READ_EPS_SOLAR_Z_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005264:	7a3b      	ldrb	r3, [r7, #8]
 8005266:	b29b      	uxth	r3, r3
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	b29a      	uxth	r2, r3
 800526c:	7a7b      	ldrb	r3, [r7, #9]
 800526e:	b29b      	uxth	r3, r3
 8005270:	4413      	add	r3, r2
 8005272:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8005274:	89bb      	ldrh	r3, [r7, #12]
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005298 <READ_EPS_SOLAR_Z_VOLTAGE+0x60>
 8005282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800528c:	7bfb      	ldrb	r3, [r7, #15]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	3b200000 	.word	0x3b200000

0800529c <READ_EPS_SOLAR_Z_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Z- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_NEG_CURRENT(float* curr_ptr){
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 12; //solar panel z- current command
 80052a8:	230c      	movs	r3, #12
 80052aa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80052ac:	f107 0208 	add.w	r2, r7, #8
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	4611      	mov	r1, r2
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fc09 	bl	8005acc <EPS_READ>
 80052ba:	4603      	mov	r3, r0
 80052bc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x2c>
        return status;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	e014      	b.n	80052f2 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80052c8:	7a3b      	ldrb	r3, [r7, #8]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	7a7b      	ldrb	r3, [r7, #9]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	4413      	add	r3, r2
 80052d6:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80052d8:	89bb      	ldrh	r3, [r7, #12]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80052fc <READ_EPS_SOLAR_Z_NEG_CURRENT+0x60>
 80052e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	3a200001 	.word	0x3a200001

08005300 <READ_EPS_SOLAR_Z_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Z+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_POS_CURRENT(float* curr_ptr){
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 13; //solar panel z+ current command
 800530c:	230d      	movs	r3, #13
 800530e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005310:	f107 0208 	add.w	r2, r7, #8
 8005314:	7bbb      	ldrb	r3, [r7, #14]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fbd7 	bl	8005acc <EPS_READ>
 800531e:	4603      	mov	r3, r0
 8005320:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <READ_EPS_SOLAR_Z_POS_CURRENT+0x2c>
        return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	e014      	b.n	8005356 <READ_EPS_SOLAR_Z_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800532c:	7a3b      	ldrb	r3, [r7, #8]
 800532e:	b29b      	uxth	r3, r3
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	b29a      	uxth	r2, r3
 8005334:	7a7b      	ldrb	r3, [r7, #9]
 8005336:	b29b      	uxth	r3, r3
 8005338:	4413      	add	r3, r2
 800533a:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 800533c:	89bb      	ldrh	r3, [r7, #12]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005360 <READ_EPS_SOLAR_Z_POS_CURRENT+0x60>
 800534a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	3a200001 	.word	0x3a200001

08005364 <READ_EPS_3V_CURRENT>:
/**
  * @brief Reads the current of the EPS 3.3v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_3V_CURRENT(float* curr_ptr){
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 14; //3.3v bus current command
 8005370:	230e      	movs	r3, #14
 8005372:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005374:	f107 0208 	add.w	r2, r7, #8
 8005378:	7bbb      	ldrb	r3, [r7, #14]
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fba5 	bl	8005acc <EPS_READ>
 8005382:	4603      	mov	r3, r0
 8005384:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <READ_EPS_3V_CURRENT+0x2c>
        return status;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	e014      	b.n	80053ba <READ_EPS_3V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005390:	7a3b      	ldrb	r3, [r7, #8]
 8005392:	b29b      	uxth	r3, r3
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	b29a      	uxth	r2, r3
 8005398:	7a7b      	ldrb	r3, [r7, #9]
 800539a:	b29b      	uxth	r3, r3
 800539c:	4413      	add	r3, r2
 800539e:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 80053a0:	89bb      	ldrh	r3, [r7, #12]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80053c4 <READ_EPS_3V_CURRENT+0x60>
 80053ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	3b055555 	.word	0x3b055555

080053c8 <READ_EPS_5V_CURRENT>:
/**
  * @brief Reads the current of the EPS 5v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_5V_CURRENT(float* curr_ptr){
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 15; //5v bus current command
 80053d4:	230f      	movs	r3, #15
 80053d6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80053d8:	f107 0208 	add.w	r2, r7, #8
 80053dc:	7bbb      	ldrb	r3, [r7, #14]
 80053de:	4611      	mov	r1, r2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fb73 	bl	8005acc <EPS_READ>
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <READ_EPS_5V_CURRENT+0x2c>
        return status;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	e014      	b.n	800541e <READ_EPS_5V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80053f4:	7a3b      	ldrb	r3, [r7, #8]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	7a7b      	ldrb	r3, [r7, #9]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4413      	add	r3, r2
 8005402:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 8005404:	89bb      	ldrh	r3, [r7, #12]
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005428 <READ_EPS_5V_CURRENT+0x60>
 8005412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	3b055555 	.word	0x3b055555

0800542c <READ_EPS_MCU_TEMP>:
/**
  * @brief Reads the temperature of the EPS microcontroller in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_MCU_TEMP(float* temp_ptr){
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 18; //MCU temperature command
 8005438:	2312      	movs	r3, #18
 800543a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800543c:	f107 0208 	add.w	r2, r7, #8
 8005440:	7bbb      	ldrb	r3, [r7, #14]
 8005442:	4611      	mov	r1, r2
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fb41 	bl	8005acc <EPS_READ>
 800544a:	4603      	mov	r3, r0
 800544c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <READ_EPS_MCU_TEMP+0x2c>
        return status;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	e01c      	b.n	8005492 <READ_EPS_MCU_TEMP+0x66>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005458:	7a3b      	ldrb	r3, [r7, #8]
 800545a:	b29b      	uxth	r3, r3
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	b29a      	uxth	r2, r3
 8005460:	7a7b      	ldrb	r3, [r7, #9]
 8005462:	b29b      	uxth	r3, r3
 8005464:	4413      	add	r3, r2
 8005466:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = (((float) raw_value * 0.0006103516f) - 0.986f) / 0.00355f;
 8005468:	89bb      	ldrh	r3, [r7, #12]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800549c <READ_EPS_MCU_TEMP+0x70>
 8005476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800547a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80054a0 <READ_EPS_MCU_TEMP+0x74>
 800547e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005482:	eddf 6a08 	vldr	s13, [pc, #32]	; 80054a4 <READ_EPS_MCU_TEMP+0x78>
 8005486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	3a200001 	.word	0x3a200001
 80054a0:	3f7c6a7f 	.word	0x3f7c6a7f
 80054a4:	3b68a71e 	.word	0x3b68a71e

080054a8 <READ_EPS_BATT_1_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 1 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_1_TEMP(float* temp_ptr){
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80054b0:	2301      	movs	r3, #1
 80054b2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 19; //battery cell 1 temperature command
 80054b4:	2313      	movs	r3, #19
 80054b6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80054b8:	f107 0208 	add.w	r2, r7, #8
 80054bc:	7bbb      	ldrb	r3, [r7, #14]
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fb03 	bl	8005acc <EPS_READ>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <READ_EPS_BATT_1_TEMP+0x2c>
        return status;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	e014      	b.n	80054fe <READ_EPS_BATT_1_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80054d4:	7a3b      	ldrb	r3, [r7, #8]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	b29a      	uxth	r2, r3
 80054dc:	7a7b      	ldrb	r3, [r7, #9]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4413      	add	r3, r2
 80054e2:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80054e4:	89bb      	ldrh	r3, [r7, #12]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005508 <READ_EPS_BATT_1_TEMP+0x60>
 80054f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	3b800000 	.word	0x3b800000

0800550c <READ_EPS_BATT_2_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 2 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_2_TEMP(float* temp_ptr){
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 20; //battery cell 2 temperature command
 8005518:	2314      	movs	r3, #20
 800551a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800551c:	f107 0208 	add.w	r2, r7, #8
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	4611      	mov	r1, r2
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fad1 	bl	8005acc <EPS_READ>
 800552a:	4603      	mov	r3, r0
 800552c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <READ_EPS_BATT_2_TEMP+0x2c>
        return status;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	e014      	b.n	8005562 <READ_EPS_BATT_2_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005538:	7a3b      	ldrb	r3, [r7, #8]
 800553a:	b29b      	uxth	r3, r3
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	b29a      	uxth	r2, r3
 8005540:	7a7b      	ldrb	r3, [r7, #9]
 8005542:	b29b      	uxth	r3, r3
 8005544:	4413      	add	r3, r2
 8005546:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8005548:	89bb      	ldrh	r3, [r7, #12]
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005552:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800556c <READ_EPS_BATT_2_TEMP+0x60>
 8005556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	3b800000 	.word	0x3b800000

08005570 <READ_EPS_BATT_3_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 3 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_3_TEMP(float* temp_ptr){
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 21; //battery cell 3 temperature command
 800557c:	2315      	movs	r3, #21
 800557e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005580:	f107 0208 	add.w	r2, r7, #8
 8005584:	7bbb      	ldrb	r3, [r7, #14]
 8005586:	4611      	mov	r1, r2
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fa9f 	bl	8005acc <EPS_READ>
 800558e:	4603      	mov	r3, r0
 8005590:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <READ_EPS_BATT_3_TEMP+0x2c>
        return status;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	e014      	b.n	80055c6 <READ_EPS_BATT_3_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800559c:	7a3b      	ldrb	r3, [r7, #8]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	7a7b      	ldrb	r3, [r7, #9]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	4413      	add	r3, r2
 80055aa:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80055ac:	89bb      	ldrh	r3, [r7, #12]
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80055d0 <READ_EPS_BATT_3_TEMP+0x60>
 80055ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	3b800000 	.word	0x3b800000

080055d4 <READ_EPS_BATT_4_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 4 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_4_TEMP(float* temp_ptr){
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80055dc:	2301      	movs	r3, #1
 80055de:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 22; //battery cell 4 temperature command
 80055e0:	2316      	movs	r3, #22
 80055e2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80055e4:	f107 0208 	add.w	r2, r7, #8
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	4611      	mov	r1, r2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fa6d 	bl	8005acc <EPS_READ>
 80055f2:	4603      	mov	r3, r0
 80055f4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <READ_EPS_BATT_4_TEMP+0x2c>
        return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	e014      	b.n	800562a <READ_EPS_BATT_4_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005600:	7a3b      	ldrb	r3, [r7, #8]
 8005602:	b29b      	uxth	r3, r3
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	b29a      	uxth	r2, r3
 8005608:	7a7b      	ldrb	r3, [r7, #9]
 800560a:	b29b      	uxth	r3, r3
 800560c:	4413      	add	r3, r2
 800560e:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8005610:	89bb      	ldrh	r3, [r7, #12]
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005634 <READ_EPS_BATT_4_TEMP+0x60>
 800561e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	3b800000 	.word	0x3b800000

08005638 <READ_EPS_INPUT_CONDITION>:
/**
  * @brief Reads raw return value of the Input Condition command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_INPUT_CONDITION(uint16_t *cond_ptr){
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 23; //input conditions command
 8005644:	2317      	movs	r3, #23
 8005646:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005648:	f107 020c 	add.w	r2, r7, #12
 800564c:	7bbb      	ldrb	r3, [r7, #14]
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fa3b 	bl	8005acc <EPS_READ>
 8005656:	4603      	mov	r3, r0
 8005658:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <READ_EPS_INPUT_CONDITION+0x2c>
        return status;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	e00a      	b.n	800567a <READ_EPS_INPUT_CONDITION+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005664:	7b3b      	ldrb	r3, [r7, #12]
 8005666:	b29b      	uxth	r3, r3
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	b29a      	uxth	r2, r3
 800566c:	7b7b      	ldrb	r3, [r7, #13]
 800566e:	b29b      	uxth	r3, r3
 8005670:	4413      	add	r3, r2
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	801a      	strh	r2, [r3, #0]
    return status;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <READ_EPS_OUTPUT_CONDITION1>:
/**
  * @brief Reads raw return value of the Output Condition 1 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION1(uint16_t *cond_ptr){
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800568a:	2301      	movs	r3, #1
 800568c:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 800568e:	2318      	movs	r3, #24
 8005690:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005692:	f107 020c 	add.w	r2, r7, #12
 8005696:	7bbb      	ldrb	r3, [r7, #14]
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fa16 	bl	8005acc <EPS_READ>
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <READ_EPS_OUTPUT_CONDITION1+0x2c>
        return status;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	e00a      	b.n	80056c4 <READ_EPS_OUTPUT_CONDITION1+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80056ae:	7b3b      	ldrb	r3, [r7, #12]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	7b7b      	ldrb	r3, [r7, #13]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4413      	add	r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	801a      	strh	r2, [r3, #0]
    return status;
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <READ_EPS_OUTPUT_CONDITION2>:
/**
  * @brief Reads raw return value of the Output Condition 2 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION2(uint16_t *cond_ptr){
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 80056d8:	2318      	movs	r3, #24
 80056da:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80056dc:	f107 020c 	add.w	r2, r7, #12
 80056e0:	7bbb      	ldrb	r3, [r7, #14]
 80056e2:	4611      	mov	r1, r2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 f9f1 	bl	8005acc <EPS_READ>
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <READ_EPS_OUTPUT_CONDITION2+0x2c>
        return status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	e00a      	b.n	800570e <READ_EPS_OUTPUT_CONDITION2+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80056f8:	7b3b      	ldrb	r3, [r7, #12]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	b29a      	uxth	r2, r3
 8005700:	7b7b      	ldrb	r3, [r7, #13]
 8005702:	b29b      	uxth	r3, r3
 8005704:	4413      	add	r3, r2
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	801a      	strh	r2, [r3, #0]
    return status;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <READ_EPS_POWER_ON_CYCLES>:
/**
  * @brief Reads the current count of EPS power cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_POWER_ON_CYCLES(uint16_t *count_ptr){
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 26; //power on cycles count command
 8005722:	231a      	movs	r3, #26
 8005724:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005726:	f107 020c 	add.w	r2, r7, #12
 800572a:	7bbb      	ldrb	r3, [r7, #14]
 800572c:	4611      	mov	r1, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f9cc 	bl	8005acc <EPS_READ>
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <READ_EPS_POWER_ON_CYCLES+0x2c>
        return status;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	e00a      	b.n	8005758 <READ_EPS_POWER_ON_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005742:	7b3b      	ldrb	r3, [r7, #12]
 8005744:	b29b      	uxth	r3, r3
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	b29a      	uxth	r2, r3
 800574a:	7b7b      	ldrb	r3, [r7, #13]
 800574c:	b29b      	uxth	r3, r3
 800574e:	4413      	add	r3, r2
 8005750:	b29a      	uxth	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	801a      	strh	r2, [r3, #0]
    return status;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <READ_EPS_UNDER_VOLT_COUNT>:
/**
  * @brief Reads the current count of EPS under-voltage occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_UNDER_VOLT_COUNT(uint16_t *count_ptr){
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 27; //under voltage count command
 800576c:	231b      	movs	r3, #27
 800576e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005770:	f107 020c 	add.w	r2, r7, #12
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	4611      	mov	r1, r2
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f9a7 	bl	8005acc <EPS_READ>
 800577e:	4603      	mov	r3, r0
 8005780:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <READ_EPS_UNDER_VOLT_COUNT+0x2c>
        return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	e00a      	b.n	80057a2 <READ_EPS_UNDER_VOLT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800578c:	7b3b      	ldrb	r3, [r7, #12]
 800578e:	b29b      	uxth	r3, r3
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	b29a      	uxth	r2, r3
 8005794:	7b7b      	ldrb	r3, [r7, #13]
 8005796:	b29b      	uxth	r3, r3
 8005798:	4413      	add	r3, r2
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	801a      	strh	r2, [r3, #0]
    return status;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <READ_EPS_SHORT_CIRCUIT_COUNT>:
/**
  * @brief Reads the current count of EPS short-circuit occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SHORT_CIRCUIT_COUNT(uint16_t *count_ptr){
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80057b2:	2301      	movs	r3, #1
 80057b4:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 28; //short circuit count command
 80057b6:	231c      	movs	r3, #28
 80057b8:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80057ba:	f107 020c 	add.w	r2, r7, #12
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f982 	bl	8005acc <EPS_READ>
 80057c8:	4603      	mov	r3, r0
 80057ca:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <READ_EPS_SHORT_CIRCUIT_COUNT+0x2c>
        return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	e00a      	b.n	80057ec <READ_EPS_SHORT_CIRCUIT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80057d6:	7b3b      	ldrb	r3, [r7, #12]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	b29a      	uxth	r2, r3
 80057de:	7b7b      	ldrb	r3, [r7, #13]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	801a      	strh	r2, [r3, #0]
    return status;
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <READ_EPS_OVER_TEMP_COUNT>:
/**
  * @brief Reads the current count of EPS over-temp occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OVER_TEMP_COUNT(uint16_t *count_ptr){
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 29; //over temperature count command
 8005800:	231d      	movs	r3, #29
 8005802:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005804:	f107 020c 	add.w	r2, r7, #12
 8005808:	7bbb      	ldrb	r3, [r7, #14]
 800580a:	4611      	mov	r1, r2
 800580c:	4618      	mov	r0, r3
 800580e:	f000 f95d 	bl	8005acc <EPS_READ>
 8005812:	4603      	mov	r3, r0
 8005814:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <READ_EPS_OVER_TEMP_COUNT+0x2c>
        return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	e00a      	b.n	8005836 <READ_EPS_OVER_TEMP_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8005820:	7b3b      	ldrb	r3, [r7, #12]
 8005822:	b29b      	uxth	r3, r3
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	b29a      	uxth	r2, r3
 8005828:	7b7b      	ldrb	r3, [r7, #13]
 800582a:	b29b      	uxth	r3, r3
 800582c:	4413      	add	r3, r2
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	801a      	strh	r2, [r3, #0]
    return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <READ_EPS_CHARGE_CYCLES>:
/**
  * @brief Reads the current count of EPS battery charge cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_CHARGE_CYCLES(uint16_t *count_ptr){
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005846:	2301      	movs	r3, #1
 8005848:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 48; //charging cycles count command
 800584a:	2330      	movs	r3, #48	; 0x30
 800584c:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800584e:	f107 020c 	add.w	r2, r7, #12
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f938 	bl	8005acc <EPS_READ>
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <READ_EPS_CHARGE_CYCLES+0x2c>
        return status;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	e00a      	b.n	8005880 <READ_EPS_CHARGE_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800586a:	7b3b      	ldrb	r3, [r7, #12]
 800586c:	b29b      	uxth	r3, r3
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	b29a      	uxth	r2, r3
 8005872:	7b7b      	ldrb	r3, [r7, #13]
 8005874:	b29b      	uxth	r3, r3
 8005876:	4413      	add	r3, r2
 8005878:	b29a      	uxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	801a      	strh	r2, [r3, #0]
    return status;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <READ_EPS_DEFAULTS1>:
/**
  * @brief Reads the default values of LUPs and fast charge modes and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS1(uint16_t *default_ptr){
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 43; //output 1 default value command
 8005894:	232b      	movs	r3, #43	; 0x2b
 8005896:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8005898:	f107 020c 	add.w	r2, r7, #12
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 f913 	bl	8005acc <EPS_READ>
 80058a6:	4603      	mov	r3, r0
 80058a8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <READ_EPS_DEFAULTS1+0x2c>
        return status;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	e00a      	b.n	80058ca <READ_EPS_DEFAULTS1+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80058b4:	7b3b      	ldrb	r3, [r7, #12]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	7b7b      	ldrb	r3, [r7, #13]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	4413      	add	r3, r2
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	801a      	strh	r2, [r3, #0]
    return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <READ_EPS_DEFAULTS2>:
/**
  * @brief Reads the default values of OUT1-OUT6 and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS2(uint16_t *default_ptr){
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 44; //output 3 default value command
 80058de:	232c      	movs	r3, #44	; 0x2c
 80058e0:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80058e2:	f107 020c 	add.w	r2, r7, #12
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	4611      	mov	r1, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f8ee 	bl	8005acc <EPS_READ>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <READ_EPS_DEFAULTS2+0x2c>
        return status;
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	e00a      	b.n	8005914 <READ_EPS_DEFAULTS2+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80058fe:	7b3b      	ldrb	r3, [r7, #12]
 8005900:	b29b      	uxth	r3, r3
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	b29a      	uxth	r2, r3
 8005906:	7b7b      	ldrb	r3, [r7, #13]
 8005908:	b29b      	uxth	r3, r3
 800590a:	4413      	add	r3, r2
 800590c:	b29a      	uxth	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	801a      	strh	r2, [r3, #0]
    return status;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <enable_EPS_Vbatt_Bus>:


/********************************************** WRITE FUNCTIONS **********************************************************************************/
HAL_StatusTypeDef enable_EPS_Vbatt_Bus(){
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 1); //turn command 1 to the ON state
 8005920:	2101      	movs	r1, #1
 8005922:	2001      	movs	r0, #1
 8005924:	f000 f8fc 	bl	8005b20 <EPS_WRITE>
 8005928:	4603      	mov	r3, r0
}
 800592a:	4618      	mov	r0, r3
 800592c:	bd80      	pop	{r7, pc}

0800592e <disable_EPS_Vbatt_Bus>:

HAL_StatusTypeDef disable_EPS_Vbatt_Bus(){
 800592e:	b580      	push	{r7, lr}
 8005930:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 0); //turn command 1 to the OFF state
 8005932:	2100      	movs	r1, #0
 8005934:	2001      	movs	r0, #1
 8005936:	f000 f8f3 	bl	8005b20 <EPS_WRITE>
 800593a:	4603      	mov	r3, r0
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}

08005940 <enable_EPS_5v_Bus>:

HAL_StatusTypeDef enable_EPS_5v_Bus(){
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 1); //turn command 4 to the ON state
 8005944:	2101      	movs	r1, #1
 8005946:	2004      	movs	r0, #4
 8005948:	f000 f8ea 	bl	8005b20 <EPS_WRITE>
 800594c:	4603      	mov	r3, r0
}
 800594e:	4618      	mov	r0, r3
 8005950:	bd80      	pop	{r7, pc}

08005952 <disable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_5v_Bus(){
 8005952:	b580      	push	{r7, lr}
 8005954:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 0); //turn command 4 to the OFF state
 8005956:	2100      	movs	r1, #0
 8005958:	2004      	movs	r0, #4
 800595a:	f000 f8e1 	bl	8005b20 <EPS_WRITE>
 800595e:	4603      	mov	r3, r0
}
 8005960:	4618      	mov	r0, r3
 8005962:	bd80      	pop	{r7, pc}

08005964 <enable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_LUP_3v(){
    return EPS_WRITE(5, 0); //turn command 5 to the OFF state
}

HAL_StatusTypeDef enable_EPS_Fast_Charge1(){
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 1); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8005968:	2101      	movs	r1, #1
 800596a:	2008      	movs	r0, #8
 800596c:	f000 f8d8 	bl	8005b20 <EPS_WRITE>
 8005970:	4603      	mov	r3, r0
}
 8005972:	4618      	mov	r0, r3
 8005974:	bd80      	pop	{r7, pc}

08005976 <disable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_Fast_Charge1(){
 8005976:	b580      	push	{r7, lr}
 8005978:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 0); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 800597a:	2100      	movs	r1, #0
 800597c:	2008      	movs	r0, #8
 800597e:	f000 f8cf 	bl	8005b20 <EPS_WRITE>
 8005982:	4603      	mov	r3, r0
}
 8005984:	4618      	mov	r0, r3
 8005986:	bd80      	pop	{r7, pc}

08005988 <enable_EPS_Fast_Charge2>:

HAL_StatusTypeDef enable_EPS_Fast_Charge2(){
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 1); //turn command 9 to the ON state (HIGH = Fast?, LOW = Slow?)
 800598c:	2101      	movs	r1, #1
 800598e:	2009      	movs	r0, #9
 8005990:	f000 f8c6 	bl	8005b20 <EPS_WRITE>
 8005994:	4603      	mov	r3, r0
}
 8005996:	4618      	mov	r0, r3
 8005998:	bd80      	pop	{r7, pc}

0800599a <disable_EPS_Fast_Charge2>:

HAL_StatusTypeDef disable_EPS_Fast_Charge2(){
 800599a:	b580      	push	{r7, lr}
 800599c:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 0); //turn command 9 to the OFF state (HIGH = Fast?, LOW = Slow?)
 800599e:	2100      	movs	r1, #0
 80059a0:	2009      	movs	r0, #9
 80059a2:	f000 f8bd 	bl	8005b20 <EPS_WRITE>
 80059a6:	4603      	mov	r3, r0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	bd80      	pop	{r7, pc}

080059ac <enable_EPS_Output_1>:

HAL_StatusTypeDef enable_EPS_Output_1(){
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 1); //turn command 10 to the ON state
 80059b0:	2101      	movs	r1, #1
 80059b2:	200a      	movs	r0, #10
 80059b4:	f000 f8b4 	bl	8005b20 <EPS_WRITE>
 80059b8:	4603      	mov	r3, r0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	bd80      	pop	{r7, pc}

080059be <disable_EPS_Output_1>:

HAL_StatusTypeDef disable_EPS_Output_1(){
 80059be:	b580      	push	{r7, lr}
 80059c0:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 0); //turn command 10 to the OFF state
 80059c2:	2100      	movs	r1, #0
 80059c4:	200a      	movs	r0, #10
 80059c6:	f000 f8ab 	bl	8005b20 <EPS_WRITE>
 80059ca:	4603      	mov	r3, r0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <enable_EPS_Output_2>:

HAL_StatusTypeDef enable_EPS_Output_2(){
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 1); //turn command 11 to the ON state
 80059d4:	2101      	movs	r1, #1
 80059d6:	200b      	movs	r0, #11
 80059d8:	f000 f8a2 	bl	8005b20 <EPS_WRITE>
 80059dc:	4603      	mov	r3, r0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <disable_EPS_Output_2>:

HAL_StatusTypeDef disable_EPS_Output_2(){
 80059e2:	b580      	push	{r7, lr}
 80059e4:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 0); //turn command 11 to the OFF state
 80059e6:	2100      	movs	r1, #0
 80059e8:	200b      	movs	r0, #11
 80059ea:	f000 f899 	bl	8005b20 <EPS_WRITE>
 80059ee:	4603      	mov	r3, r0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <enable_EPS_Output_3>:

HAL_StatusTypeDef enable_EPS_Output_3(){
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 1); //turn command 12 to the ON state
 80059f8:	2101      	movs	r1, #1
 80059fa:	200c      	movs	r0, #12
 80059fc:	f000 f890 	bl	8005b20 <EPS_WRITE>
 8005a00:	4603      	mov	r3, r0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <disable_EPS_Output_3>:

HAL_StatusTypeDef disable_EPS_Output_3(){
 8005a06:	b580      	push	{r7, lr}
 8005a08:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 0); //turn command 12 to the OFF state
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	200c      	movs	r0, #12
 8005a0e:	f000 f887 	bl	8005b20 <EPS_WRITE>
 8005a12:	4603      	mov	r3, r0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <enable_EPS_Output_5>:

HAL_StatusTypeDef enable_EPS_Output_5(){
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 1); //turn command 14 to the ON state
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	200e      	movs	r0, #14
 8005a20:	f000 f87e 	bl	8005b20 <EPS_WRITE>
 8005a24:	4603      	mov	r3, r0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <disable_EPS_Output_5>:

HAL_StatusTypeDef disable_EPS_Output_5(){
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 0); //turn command 14 to the OFF state
 8005a2e:	2100      	movs	r1, #0
 8005a30:	200e      	movs	r0, #14
 8005a32:	f000 f875 	bl	8005b20 <EPS_WRITE>
 8005a36:	4603      	mov	r3, r0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <enable_EPS_Output_6>:

HAL_StatusTypeDef enable_EPS_Output_6(){
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 1); //turn command 15 to the ON state
 8005a40:	2101      	movs	r1, #1
 8005a42:	200f      	movs	r0, #15
 8005a44:	f000 f86c 	bl	8005b20 <EPS_WRITE>
 8005a48:	4603      	mov	r3, r0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <disable_EPS_Output_6>:

HAL_StatusTypeDef disable_EPS_Output_6(){
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 0); //turn command 15 to the OFF state
 8005a52:	2100      	movs	r1, #0
 8005a54:	200f      	movs	r0, #15
 8005a56:	f000 f863 	bl	8005b20 <EPS_WRITE>
 8005a5a:	4603      	mov	r3, r0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <enable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_1(){
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 1); //turn command 16 to the ON state
 8005a64:	2101      	movs	r1, #1
 8005a66:	2010      	movs	r0, #16
 8005a68:	f000 f85a 	bl	8005b20 <EPS_WRITE>
 8005a6c:	4603      	mov	r3, r0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <disable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_1(){
 8005a72:	b580      	push	{r7, lr}
 8005a74:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 0); //turn command 16 to the OFF state
 8005a76:	2100      	movs	r1, #0
 8005a78:	2010      	movs	r0, #16
 8005a7a:	f000 f851 	bl	8005b20 <EPS_WRITE>
 8005a7e:	4603      	mov	r3, r0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <enable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_2(){
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 1); //turn command 17 to the ON state
 8005a88:	2101      	movs	r1, #1
 8005a8a:	2011      	movs	r0, #17
 8005a8c:	f000 f848 	bl	8005b20 <EPS_WRITE>
 8005a90:	4603      	mov	r3, r0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <disable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_2(){
 8005a96:	b580      	push	{r7, lr}
 8005a98:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 0); //turn command 17 to the OFF state
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	2011      	movs	r0, #17
 8005a9e:	f000 f83f 	bl	8005b20 <EPS_WRITE>
 8005aa2:	4603      	mov	r3, r0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <enable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_3(){
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 1); //turn command 18 to the ON state
 8005aac:	2101      	movs	r1, #1
 8005aae:	2012      	movs	r0, #18
 8005ab0:	f000 f836 	bl	8005b20 <EPS_WRITE>
 8005ab4:	4603      	mov	r3, r0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <disable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_3(){
 8005aba:	b580      	push	{r7, lr}
 8005abc:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 0); //turn command 18 to the OFF state
 8005abe:	2100      	movs	r1, #0
 8005ac0:	2012      	movs	r0, #18
 8005ac2:	f000 f82d 	bl	8005b20 <EPS_WRITE>
 8005ac6:	4603      	mov	r3, r0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	bd80      	pop	{r7, pc}

08005acc <EPS_READ>:
  * @brief Sends a write command to the EPS module over a given I2C instance and reads back a response
  * @param command : the command to be used on the transceiver
  * @param data_ptr : A pointer to allow information from the health check to be viewed.
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_READ(uint8_t command, uint8_t* data_ptr){
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	6039      	str	r1, [r7, #0]
 8005ad6:	71fb      	strb	r3, [r7, #7]
        HAL_StatusTypeDef status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 8005adc:	1dfa      	adds	r2, r7, #7
 8005ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	2130      	movs	r1, #48	; 0x30
 8005ae8:	480c      	ldr	r0, [pc, #48]	; (8005b1c <EPS_READ+0x50>)
 8005aea:	f7fb fa11 	bl	8000f10 <HAL_I2C_Master_Transmit>
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK){
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <EPS_READ+0x30>
            return status;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	e00b      	b.n	8005b14 <EPS_READ+0x48>
        }
        status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 8005afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	2302      	movs	r3, #2
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	2130      	movs	r1, #48	; 0x30
 8005b08:	4804      	ldr	r0, [pc, #16]	; (8005b1c <EPS_READ+0x50>)
 8005b0a:	f7fb faff 	bl	800110c <HAL_I2C_Master_Receive>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	73fb      	strb	r3, [r7, #15]
        return status;
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000094 	.word	0x20000094

08005b20 <EPS_WRITE>:
/**
  * @brief Sends a write command to the EPS module over a given I2C instance
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(uint8_t command, uint8_t state){
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	4603      	mov	r3, r0
 8005b28:	460a      	mov	r2, r1
 8005b2a:	71fb      	strb	r3, [r7, #7]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	71bb      	strb	r3, [r7, #6]
        HAL_StatusTypeDef status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
        uint8_t data[2];
        data[0] = command;
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	733b      	strb	r3, [r7, #12]
        data[1] = state;
 8005b38:	79bb      	ldrb	r3, [r7, #6]
 8005b3a:	737b      	strb	r3, [r7, #13]
        status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT);
 8005b3c:	f107 020c 	add.w	r2, r7, #12
 8005b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	2302      	movs	r3, #2
 8005b48:	2130      	movs	r1, #48	; 0x30
 8005b4a:	4805      	ldr	r0, [pc, #20]	; (8005b60 <EPS_WRITE+0x40>)
 8005b4c:	f7fb f9e0 	bl	8000f10 <HAL_I2C_Master_Transmit>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]
        return status;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000094 	.word	0x20000094

08005b64 <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = packet[1];
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	733b      	strb	r3, [r7, #12]
    cySatPacket.Command = packet[2];
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	789b      	ldrb	r3, [r3, #2]
 8005b78:	737b      	strb	r3, [r7, #13]
    cySatPacket.Data_Length = packet[3];
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	78db      	ldrb	r3, [r3, #3]
 8005b7e:	73bb      	strb	r3, [r7, #14]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * cySatPacket.Data_Length);
 8005b80:	7bbb      	ldrb	r3, [r7, #14]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 fca6 	bl	80074d4 <malloc>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	613b      	str	r3, [r7, #16]
    memcpy(cySatPacket.Data, packet+4, cySatPacket.Data_Length);
 8005b8c:	6938      	ldr	r0, [r7, #16]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	3304      	adds	r3, #4
 8005b92:	7bba      	ldrb	r2, [r7, #14]
 8005b94:	4619      	mov	r1, r3
 8005b96:	f001 fcad 	bl	80074f4 <memcpy>
    cySatPacket.Checksum = packet[cySatPacket.Data_Length+4];
 8005b9a:	7bbb      	ldrb	r3, [r7, #14]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	753b      	strb	r3, [r7, #20]
    return cySatPacket;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	461c      	mov	r4, r3
 8005baa:	f107 030c 	add.w	r3, r7, #12
 8005bae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}
	...

08005bc0 <sendCySatPacket>:
 * @brief Takes in a packet and sends it to the Ground Station via UART serial connection
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendCySatPacket(CySat_Packet_t packet){
 8005bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	b089      	sub	sp, #36	; 0x24
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005bce:	466b      	mov	r3, sp
 8005bd0:	461e      	mov	r6, r3
    uint8_t message[packet.Data_Length + 5];
 8005bd2:	79bb      	ldrb	r3, [r7, #6]
 8005bd4:	1d59      	adds	r1, r3, #5
 8005bd6:	1e4b      	subs	r3, r1, #1
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	460a      	mov	r2, r1
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4690      	mov	r8, r2
 8005be0:	4699      	mov	r9, r3
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4614      	mov	r4, r2
 8005bfc:	461d      	mov	r5, r3
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	00eb      	lsls	r3, r5, #3
 8005c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c0c:	00e2      	lsls	r2, r4, #3
 8005c0e:	460b      	mov	r3, r1
 8005c10:	3307      	adds	r3, #7
 8005c12:	08db      	lsrs	r3, r3, #3
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	ebad 0d03 	sub.w	sp, sp, r3
 8005c1a:	466b      	mov	r3, sp
 8005c1c:	3300      	adds	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]

    //build byte array
    message[0] = 0xFF; //start byte
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	22ff      	movs	r2, #255	; 0xff
 8005c24:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 8005c26:	793a      	ldrb	r2, [r7, #4]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	705a      	strb	r2, [r3, #1]
    message[2] = packet.Command;
 8005c2c:	797a      	ldrb	r2, [r7, #5]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	709a      	strb	r2, [r3, #2]
    message[3] = packet.Data_Length;
 8005c32:	79ba      	ldrb	r2, [r7, #6]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	70da      	strb	r2, [r3, #3]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e00a      	b.n	8005c54 <sendCySatPacket+0x94>
        message[i + 4] = packet.Data[i];
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	441a      	add	r2, r3
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	3304      	adds	r3, #4
 8005c48:	7811      	ldrb	r1, [r2, #0]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < packet.Data_Length; i++){
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3301      	adds	r3, #1
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	79bb      	ldrb	r3, [r7, #6]
 8005c56:	461a      	mov	r2, r3
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	dbef      	blt.n	8005c3e <sendCySatPacket+0x7e>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8005c5e:	79bb      	ldrb	r3, [r7, #6]
 8005c60:	3304      	adds	r3, #4
 8005c62:	7b39      	ldrb	r1, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 8005c68:	79bb      	ldrb	r3, [r7, #6]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3305      	adds	r3, #5
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c74:	6979      	ldr	r1, [r7, #20]
 8005c76:	4809      	ldr	r0, [pc, #36]	; (8005c9c <sendCySatPacket+0xdc>)
 8005c78:	f7fe f8f3 	bl	8003e62 <HAL_UART_Transmit>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	74fb      	strb	r3, [r7, #19]
    if(status != HAL_OK){
 8005c80:	7cfb      	ldrb	r3, [r7, #19]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <sendCySatPacket+0xcc>
        return -1;
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	e000      	b.n	8005c8e <sendCySatPacket+0xce>
    }
    return 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	46b5      	mov	sp, r6
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3724      	adds	r7, #36	; 0x24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200000fc 	.word	0x200000fc

08005ca0 <sendErrorPacket>:
/**
 * @brief This function sends an error packet to the Ground Station
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendErrorPacket(){
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 8005ca6:	230a      	movs	r3, #10
 8005ca8:	713b      	strb	r3, [r7, #4]
    cySatPacket.Command = 0xFF;
 8005caa:	23ff      	movs	r3, #255	; 0xff
 8005cac:	717b      	strb	r3, [r7, #5]
    cySatPacket.Data_Length = 0x02;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	71bb      	strb	r3, [r7, #6]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 8005cb2:	2002      	movs	r0, #2
 8005cb4:	f001 fc0e 	bl	80074d4 <malloc>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	60bb      	str	r3, [r7, #8]
    cySatPacket.Data[0] = 0xFF;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	22ff      	movs	r2, #255	; 0xff
 8005cc0:	701a      	strb	r2, [r3, #0]
    cySatPacket.Data[1] = 0xFF;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	22ff      	movs	r2, #255	; 0xff
 8005cc8:	701a      	strb	r2, [r3, #0]
    cySatPacket.Checksum = generateCySatChecksum(cySatPacket);
 8005cca:	1d3b      	adds	r3, r7, #4
 8005ccc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cd0:	f000 ff04 	bl	8006adc <generateCySatChecksum>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	733b      	strb	r3, [r7, #12]
    return sendCySatPacket(cySatPacket);
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cde:	f7ff ff6f 	bl	8005bc0 <sendCySatPacket>
 8005ce2:	4603      	mov	r3, r0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b0a9      	sub	sp, #164	; 0xa4
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    HAL_StatusTypeDef status;
    CySat_Packet_t outgoingPacket;
    switch(packet.Subsystem_Type){
 8005cf8:	793b      	ldrb	r3, [r7, #4]
 8005cfa:	2b28      	cmp	r3, #40	; 0x28
 8005cfc:	dc48      	bgt.n	8005d90 <handleCySatPacket+0xa4>
 8005cfe:	2b0a      	cmp	r3, #10
 8005d00:	f2c0 86df 	blt.w	8006ac2 <handleCySatPacket+0xdd6>
 8005d04:	3b0a      	subs	r3, #10
 8005d06:	2b1e      	cmp	r3, #30
 8005d08:	f200 86db 	bhi.w	8006ac2 <handleCySatPacket+0xdd6>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <handleCySatPacket+0x28>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08006ac9 	.word	0x08006ac9
 8005d18:	08006ac3 	.word	0x08006ac3
 8005d1c:	08006ac3 	.word	0x08006ac3
 8005d20:	08006ac3 	.word	0x08006ac3
 8005d24:	08006ac3 	.word	0x08006ac3
 8005d28:	08006ac3 	.word	0x08006ac3
 8005d2c:	08006ac3 	.word	0x08006ac3
 8005d30:	08006ac3 	.word	0x08006ac3
 8005d34:	08006ac3 	.word	0x08006ac3
 8005d38:	08006ac3 	.word	0x08006ac3
 8005d3c:	08006ac9 	.word	0x08006ac9
 8005d40:	08006ac3 	.word	0x08006ac3
 8005d44:	08006ac3 	.word	0x08006ac3
 8005d48:	08006ac3 	.word	0x08006ac3
 8005d4c:	08006ac3 	.word	0x08006ac3
 8005d50:	08006ac3 	.word	0x08006ac3
 8005d54:	08006ac3 	.word	0x08006ac3
 8005d58:	08006ac3 	.word	0x08006ac3
 8005d5c:	08006ac3 	.word	0x08006ac3
 8005d60:	08006ac3 	.word	0x08006ac3
 8005d64:	08005d9b 	.word	0x08005d9b
 8005d68:	08006ac3 	.word	0x08006ac3
 8005d6c:	08006ac3 	.word	0x08006ac3
 8005d70:	08006ac3 	.word	0x08006ac3
 8005d74:	08006ac3 	.word	0x08006ac3
 8005d78:	08006ac3 	.word	0x08006ac3
 8005d7c:	08006ac3 	.word	0x08006ac3
 8005d80:	08006ac3 	.word	0x08006ac3
 8005d84:	08006ac3 	.word	0x08006ac3
 8005d88:	08006ac3 	.word	0x08006ac3
 8005d8c:	08006ac9 	.word	0x08006ac9
 8005d90:	2b5a      	cmp	r3, #90	; 0x5a
 8005d92:	f000 869b 	beq.w	8006acc <handleCySatPacket+0xde0>
 8005d96:	f000 be94 	b.w	8006ac2 <handleCySatPacket+0xdd6>
        case ADCS_SUBSYSTEM_TYPE: //ADCS

            break;

        case EPS_SUBSYSTEM_TYPE: //EPS
            switch(packet.Command){
 8005d9a:	797b      	ldrb	r3, [r7, #5]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	2b10      	cmp	r3, #16
 8005da0:	f200 8696 	bhi.w	8006ad0 <handleCySatPacket+0xde4>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <handleCySatPacket+0xc0>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005df1 	.word	0x08005df1
 8005db0:	08006ad1 	.word	0x08006ad1
 8005db4:	08005ecb 	.word	0x08005ecb
 8005db8:	08006ad1 	.word	0x08006ad1
 8005dbc:	08006003 	.word	0x08006003
 8005dc0:	08006ad1 	.word	0x08006ad1
 8005dc4:	0800613b 	.word	0x0800613b
 8005dc8:	08006ad1 	.word	0x08006ad1
 8005dcc:	08006273 	.word	0x08006273
 8005dd0:	08006ad1 	.word	0x08006ad1
 8005dd4:	0800635b 	.word	0x0800635b
 8005dd8:	08006ad1 	.word	0x08006ad1
 8005ddc:	08006523 	.word	0x08006523
 8005de0:	08006ad1 	.word	0x08006ad1
 8005de4:	08006645 	.word	0x08006645
 8005de8:	08006ad1 	.word	0x08006ad1
 8005dec:	0800679f 	.word	0x0800679f
                case 0x01: { //Battery Pack Voltage/Current Request
                    float voltage, current;
                    status = READ_EPS_BATTERY_VOLTAGE(&voltage); //read the voltage from the EPS Battery Pack
 8005df0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff f88f 	bl	8004f18 <READ_EPS_BATTERY_VOLTAGE>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005e00:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <handleCySatPacket+0x124>
                        return -1;
 8005e08:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0c:	f000 be62 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATTERY_CURRENT(&current); //read the current from the EPS Battery Pack
 8005e10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff f8b1 	bl	8004f7c <READ_EPS_BATTERY_CURRENT>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005e20:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <handleCySatPacket+0x144>
                        return -1;
 8005e28:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2c:	f000 be52 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(voltage);
 8005e30:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005e34:	eeb0 0a67 	vmov.f32	s0, s15
 8005e38:	f000 ff88 	bl	8006d4c <FloatToUnsigned16bits>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
                    uint16_t data2 = FloatToUnsigned16bits(current);
 8005e42:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005e46:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4a:	f000 ff7f 	bl	8006d4c <FloatToUnsigned16bits>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8005e54:	231e      	movs	r3, #30
 8005e56:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x00; //Battery Pack Voltage/Current Response
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8005e66:	2004      	movs	r0, #4
 8005e68:	f001 fb34 	bl	80074d4 <malloc>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8005e70:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8005e74:	0a1b      	lsrs	r3, r3, #8
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8005e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8005e8a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e94:	3302      	adds	r3, #2
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8005e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e9c:	3303      	adds	r3, #3
 8005e9e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8005ea6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005eae:	f000 fe15 	bl	8006adc <generateCySatChecksum>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    return sendCySatPacket(outgoingPacket); //send the response
 8005eb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ebc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ec0:	f7ff fe7e 	bl	8005bc0 <sendCySatPacket>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f000 be05 	b.w	8006ad4 <handleCySatPacket+0xde8>
                }
                case 0x03: { //Solar Panel X Status Request
                    float x_voltage, x_neg_current, x_pos_current;
                    status = READ_EPS_SOLAR_X_VOLTAGE(&x_voltage); //read the Solar Panel X axis voltage
 8005eca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff f886 	bl	8004fe0 <READ_EPS_SOLAR_X_VOLTAGE>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005eda:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <handleCySatPacket+0x1fe>
                        return -1;
 8005ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee6:	f000 bdf5 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current); //read the Solar Panel X- current
 8005eea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff f8a8 	bl	8005044 <READ_EPS_SOLAR_X_NEG_CURRENT>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005efa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <handleCySatPacket+0x21e>
                        return -1;
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295
 8005f06:	f000 bde5 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current); //read the Solar Panel X+ current
 8005f0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff f8ca 	bl	80050a8 <READ_EPS_SOLAR_X_POS_CURRENT>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8005f1a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <handleCySatPacket+0x23e>
                        return -1;
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295
 8005f26:	f000 bdd5 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(x_voltage);
 8005f2a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f32:	f000 ff0b 	bl	8006d4c <FloatToUnsigned16bits>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                    uint16_t data2 = FloatToUnsigned16bits(x_neg_current);
 8005f3c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f40:	eeb0 0a67 	vmov.f32	s0, s15
 8005f44:	f000 ff02 	bl	8006d4c <FloatToUnsigned16bits>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                    uint16_t data3 = FloatToUnsigned16bits(x_pos_current);
 8005f4e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005f52:	eeb0 0a67 	vmov.f32	s0, s15
 8005f56:	f000 fef9 	bl	8006d4c <FloatToUnsigned16bits>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8005f60:	231e      	movs	r3, #30
 8005f62:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x02; //Solar Panel X Status Response
 8005f66:	2302      	movs	r3, #2
 8005f68:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8005f6c:	2306      	movs	r3, #6
 8005f6e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8005f72:	2006      	movs	r0, #6
 8005f74:	f001 faae 	bl	80074d4 <malloc>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8005f7c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005f80:	0a1b      	lsrs	r3, r3, #8
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8005f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8005f96:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8005f9a:	0a1b      	lsrs	r3, r3, #8
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa0:	3302      	adds	r3, #2
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8005fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa8:	3303      	adds	r3, #3
 8005faa:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8005fb2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8005fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fc4:	3305      	adds	r3, #5
 8005fc6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8005fce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005fd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fd6:	f000 fd81 	bl	8006adc <generateCySatChecksum>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8005fe0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005fe4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fe8:	f7ff fdea 	bl	8005bc0 <sendCySatPacket>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8005ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 fa75 	bl	80074e4 <free>
                    return status; //send the response
 8005ffa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005ffe:	f000 bd69 	b.w	8006ad4 <handleCySatPacket+0xde8>
                }
                case 0x05: { //Solar Panel Y Status Request
                    float y_voltage, y_neg_current, y_pos_current;
                    status = READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage); //read the Solar Panel Y axis voltage
 8006002:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff f880 	bl	800510c <READ_EPS_SOLAR_Y_VOLTAGE>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006012:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <handleCySatPacket+0x336>
                        return -1;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	f000 bd59 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current); //read the Solar Panel Y- current
 8006022:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff f8a2 	bl	8005170 <READ_EPS_SOLAR_Y_NEG_CURRENT>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006032:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <handleCySatPacket+0x356>
                        return -1;
 800603a:	f04f 33ff 	mov.w	r3, #4294967295
 800603e:	f000 bd49 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current); //read the Solar Panel Y+ current
 8006042:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff f8c4 	bl	80051d4 <READ_EPS_SOLAR_Y_POS_CURRENT>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006052:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <handleCySatPacket+0x376>
                        return -1;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	f000 bd39 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(y_voltage);
 8006062:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006066:	eeb0 0a67 	vmov.f32	s0, s15
 800606a:	f000 fe6f 	bl	8006d4c <FloatToUnsigned16bits>
 800606e:	4603      	mov	r3, r0
 8006070:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                    uint16_t data2 = FloatToUnsigned16bits(y_neg_current);
 8006074:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006078:	eeb0 0a67 	vmov.f32	s0, s15
 800607c:	f000 fe66 	bl	8006d4c <FloatToUnsigned16bits>
 8006080:	4603      	mov	r3, r0
 8006082:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                    uint16_t data3 = FloatToUnsigned16bits(y_pos_current);
 8006086:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800608a:	eeb0 0a67 	vmov.f32	s0, s15
 800608e:	f000 fe5d 	bl	8006d4c <FloatToUnsigned16bits>
 8006092:	4603      	mov	r3, r0
 8006094:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8006098:	231e      	movs	r3, #30
 800609a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x04; //Solar Panel Y Status Response
 800609e:	2304      	movs	r3, #4
 80060a0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80060a4:	2306      	movs	r3, #6
 80060a6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80060aa:	2006      	movs	r0, #6
 80060ac:	f001 fa12 	bl	80074d4 <malloc>
 80060b0:	4603      	mov	r3, r0
 80060b2:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80060b4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80060b8:	0a1b      	lsrs	r3, r3, #8
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80060c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060c4:	3301      	adds	r3, #1
 80060c6:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80060ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d8:	3302      	adds	r3, #2
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80060de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060e0:	3303      	adds	r3, #3
 80060e2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80060ea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060f4:	3304      	adds	r3, #4
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 80060fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060fc:	3305      	adds	r3, #5
 80060fe:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8006106:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800610a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800610e:	f000 fce5 	bl	8006adc <generateCySatChecksum>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8006118:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800611c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006120:	f7ff fd4e 	bl	8005bc0 <sendCySatPacket>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 800612a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800612c:	4618      	mov	r0, r3
 800612e:	f001 f9d9 	bl	80074e4 <free>
                    return status; //send the response
 8006132:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006136:	f000 bccd 	b.w	8006ad4 <handleCySatPacket+0xde8>
                }
                case 0x07: { //Solar Panel Z Status Request
                    float z_voltage, z_neg_current, z_pos_current;
                    status = READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage); //read the Solar Panel Z axis voltage
 800613a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff f87a 	bl	8005238 <READ_EPS_SOLAR_Z_VOLTAGE>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800614a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <handleCySatPacket+0x46e>
                        return -1;
 8006152:	f04f 33ff 	mov.w	r3, #4294967295
 8006156:	f000 bcbd 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current); //read the Solar Panel Z- current
 800615a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff f89c 	bl	800529c <READ_EPS_SOLAR_Z_NEG_CURRENT>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800616a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <handleCySatPacket+0x48e>
                        return -1;
 8006172:	f04f 33ff 	mov.w	r3, #4294967295
 8006176:	f000 bcad 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current); //read the Solar Panel Z+ current
 800617a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff f8be 	bl	8005300 <READ_EPS_SOLAR_Z_POS_CURRENT>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800618a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <handleCySatPacket+0x4ae>
                        return -1;
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
 8006196:	f000 bc9d 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(z_voltage);
 800619a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800619e:	eeb0 0a67 	vmov.f32	s0, s15
 80061a2:	f000 fdd3 	bl	8006d4c <FloatToUnsigned16bits>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
                    uint16_t data2 = FloatToUnsigned16bits(z_neg_current);
 80061ac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80061b0:	eeb0 0a67 	vmov.f32	s0, s15
 80061b4:	f000 fdca 	bl	8006d4c <FloatToUnsigned16bits>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                    uint16_t data3 = FloatToUnsigned16bits(z_pos_current);
 80061be:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80061c2:	eeb0 0a67 	vmov.f32	s0, s15
 80061c6:	f000 fdc1 	bl	8006d4c <FloatToUnsigned16bits>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80061d0:	231e      	movs	r3, #30
 80061d2:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x06; //Solar Panel Z Status Response
 80061d6:	2306      	movs	r3, #6
 80061d8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80061dc:	2306      	movs	r3, #6
 80061de:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80061e2:	2006      	movs	r0, #6
 80061e4:	f001 f976 	bl	80074d4 <malloc>
 80061e8:	4603      	mov	r3, r0
 80061ea:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80061ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80061fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061fc:	3301      	adds	r3, #1
 80061fe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8006206:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	b29a      	uxth	r2, r3
 800620e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006210:	3302      	adds	r3, #2
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8006216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006218:	3303      	adds	r3, #3
 800621a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8006222:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006226:	0a1b      	lsrs	r3, r3, #8
 8006228:	b29a      	uxth	r2, r3
 800622a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800622c:	3304      	adds	r3, #4
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8006232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006234:	3305      	adds	r3, #5
 8006236:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800623e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006246:	f000 fc49 	bl	8006adc <generateCySatChecksum>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8006250:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006254:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006258:	f7ff fcb2 	bl	8005bc0 <sendCySatPacket>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8006262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006264:	4618      	mov	r0, r3
 8006266:	f001 f93d 	bl	80074e4 <free>
                    return status; //send the response
 800626a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800626e:	f000 bc31 	b.w	8006ad4 <handleCySatPacket+0xde8>
                }
                case 0x09: { //BUS Current Request
                    float current_3, current_5;
                    status = READ_EPS_3V_CURRENT(&current_3); //read the 3.3v BUS current
 8006272:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff f874 	bl	8005364 <READ_EPS_3V_CURRENT>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006282:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <handleCySatPacket+0x5a6>
                        return -1;
 800628a:	f04f 33ff 	mov.w	r3, #4294967295
 800628e:	f000 bc21 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_5V_CURRENT(&current_5); //read the 5v BUS current
 8006292:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff f896 	bl	80053c8 <READ_EPS_5V_CURRENT>
 800629c:	4603      	mov	r3, r0
 800629e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80062a2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <handleCySatPacket+0x5c6>
                        return -1;
 80062aa:	f04f 33ff 	mov.w	r3, #4294967295
 80062ae:	f000 bc11 	b.w	8006ad4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(current_3);
 80062b2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80062b6:	eeb0 0a67 	vmov.f32	s0, s15
 80062ba:	f000 fd47 	bl	8006d4c <FloatToUnsigned16bits>
 80062be:	4603      	mov	r3, r0
 80062c0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
                    uint16_t data2 = FloatToUnsigned16bits(current_5);
 80062c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80062c8:	eeb0 0a67 	vmov.f32	s0, s15
 80062cc:	f000 fd3e 	bl	8006d4c <FloatToUnsigned16bits>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80062d6:	231e      	movs	r3, #30
 80062d8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x08; //BUS Current Response
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 80062e2:	2304      	movs	r3, #4
 80062e4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 80062e8:	2004      	movs	r0, #4
 80062ea:	f001 f8f3 	bl	80074d4 <malloc>
 80062ee:	4603      	mov	r3, r0
 80062f0:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80062f2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8006300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006302:	3301      	adds	r3, #1
 8006304:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800630c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8006310:	0a1b      	lsrs	r3, r3, #8
 8006312:	b29a      	uxth	r2, r3
 8006314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006316:	3302      	adds	r3, #2
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 800631c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800631e:	3303      	adds	r3, #3
 8006320:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8006328:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800632c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006330:	f000 fbd4 	bl	8006adc <generateCySatChecksum>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800633a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800633e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006342:	f7ff fc3d 	bl	8005bc0 <sendCySatPacket>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 800634c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800634e:	4618      	mov	r0, r3
 8006350:	f001 f8c8 	bl	80074e4 <free>
                    return status; //send the response
 8006354:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006358:	e3bc      	b.n	8006ad4 <handleCySatPacket+0xde8>
                }
                case 0x0B: { //Temperature Request
                    float mcu_temp, battery1_temp, battery2_temp, battery3_temp, battery4_temp;
                    status = READ_EPS_MCU_TEMP(&mcu_temp); //read the MCU Temperature
 800635a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff f864 	bl	800542c <READ_EPS_MCU_TEMP>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800636a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <handleCySatPacket+0x68c>
                        return -1;
 8006372:	f04f 33ff 	mov.w	r3, #4294967295
 8006376:	e3ad      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_1_TEMP(&battery1_temp); //read the Battery Cell 1 Temperature
 8006378:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff f893 	bl	80054a8 <READ_EPS_BATT_1_TEMP>
 8006382:	4603      	mov	r3, r0
 8006384:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006388:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <handleCySatPacket+0x6aa>
                        return -1;
 8006390:	f04f 33ff 	mov.w	r3, #4294967295
 8006394:	e39e      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_2_TEMP(&battery2_temp); //read the Battery Cell 2 Temperature
 8006396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff f8b6 	bl	800550c <READ_EPS_BATT_2_TEMP>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80063a6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <handleCySatPacket+0x6c8>
                        return -1;
 80063ae:	f04f 33ff 	mov.w	r3, #4294967295
 80063b2:	e38f      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_3_TEMP(&battery3_temp); //read the Battery Cell 3 Temperature
 80063b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff f8d9 	bl	8005570 <READ_EPS_BATT_3_TEMP>
 80063be:	4603      	mov	r3, r0
 80063c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80063c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <handleCySatPacket+0x6e6>
                        return -1;
 80063cc:	f04f 33ff 	mov.w	r3, #4294967295
 80063d0:	e380      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_4_TEMP(&battery4_temp); //read the Battery Cell 4 Temperature
 80063d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff f8fc 	bl	80055d4 <READ_EPS_BATT_4_TEMP>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80063e2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <handleCySatPacket+0x704>
                        return -1;
 80063ea:	f04f 33ff 	mov.w	r3, #4294967295
 80063ee:	e371      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(mcu_temp);
 80063f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80063f4:	eeb0 0a67 	vmov.f32	s0, s15
 80063f8:	f000 fca8 	bl	8006d4c <FloatToUnsigned16bits>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                    uint16_t data2 = FloatToUnsigned16bits(battery1_temp);
 8006402:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006406:	eeb0 0a67 	vmov.f32	s0, s15
 800640a:	f000 fc9f 	bl	8006d4c <FloatToUnsigned16bits>
 800640e:	4603      	mov	r3, r0
 8006410:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                    uint16_t data3 = FloatToUnsigned16bits(battery2_temp);
 8006414:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006418:	eeb0 0a67 	vmov.f32	s0, s15
 800641c:	f000 fc96 	bl	8006d4c <FloatToUnsigned16bits>
 8006420:	4603      	mov	r3, r0
 8006422:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                    uint16_t data4 = FloatToUnsigned16bits(battery3_temp);
 8006426:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800642a:	eeb0 0a67 	vmov.f32	s0, s15
 800642e:	f000 fc8d 	bl	8006d4c <FloatToUnsigned16bits>
 8006432:	4603      	mov	r3, r0
 8006434:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
                    uint16_t data5 = FloatToUnsigned16bits(battery4_temp);
 8006438:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800643c:	eeb0 0a67 	vmov.f32	s0, s15
 8006440:	f000 fc84 	bl	8006d4c <FloatToUnsigned16bits>
 8006444:	4603      	mov	r3, r0
 8006446:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800644a:	231e      	movs	r3, #30
 800644c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0A; //Temperature Response
 8006450:	230a      	movs	r3, #10
 8006452:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 8006456:	230a      	movs	r3, #10
 8006458:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 800645c:	200a      	movs	r0, #10
 800645e:	f001 f839 	bl	80074d4 <malloc>
 8006462:	4603      	mov	r3, r0
 8006464:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8006466:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800646a:	0a1b      	lsrs	r3, r3, #8
 800646c:	b29a      	uxth	r2, r3
 800646e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8006474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006476:	3301      	adds	r3, #1
 8006478:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8006480:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	b29a      	uxth	r2, r3
 8006488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800648a:	3302      	adds	r3, #2
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8006490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006492:	3303      	adds	r3, #3
 8006494:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 800649c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80064a0:	0a1b      	lsrs	r3, r3, #8
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064a6:	3304      	adds	r3, #4
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 80064ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ae:	3305      	adds	r3, #5
 80064b0:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (data4 & 0xFF00) >> 8;
 80064b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	b29a      	uxth	r2, r3
 80064c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c2:	3306      	adds	r3, #6
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = data4 & 0xFF;
 80064c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ca:	3307      	adds	r3, #7
 80064cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (data5 & 0xFF00) >> 8;
 80064d4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80064d8:	0a1b      	lsrs	r3, r3, #8
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064de:	3308      	adds	r3, #8
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = data5 & 0xFF;
 80064e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e6:	3309      	adds	r3, #9
 80064e8:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80064f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80064f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064f8:	f000 faf0 	bl	8006adc <generateCySatChecksum>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8006502:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006506:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800650a:	f7ff fb59 	bl	8005bc0 <sendCySatPacket>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8006514:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006516:	4618      	mov	r0, r3
 8006518:	f000 ffe4 	bl	80074e4 <free>
                    return status; //send the response
 800651c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006520:	e2d8      	b.n	8006ad4 <handleCySatPacket+0xde8>
                }
                case 0x0D: { //Input, Output, and Default Conditions Request
                    uint16_t input, output1, output2, defaults1, defaults2;
                    status = READ_EPS_INPUT_CONDITION(&input); //read the Input Conditions
 8006522:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff f886 	bl	8005638 <READ_EPS_INPUT_CONDITION>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006532:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <handleCySatPacket+0x854>
                        return -1;
 800653a:	f04f 33ff 	mov.w	r3, #4294967295
 800653e:	e2c9      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION1(&output1); //read the Output 1 Conditions
 8006540:	f107 0320 	add.w	r3, r7, #32
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff f89c 	bl	8005682 <READ_EPS_OUTPUT_CONDITION1>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006550:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <handleCySatPacket+0x872>
                        return -1;
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	e2ba      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION2(&output2); //read the Output 2 Conditions
 800655e:	f107 031e 	add.w	r3, r7, #30
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff f8b2 	bl	80056cc <READ_EPS_OUTPUT_CONDITION2>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800656e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <handleCySatPacket+0x890>
                        return -1;
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	e2ab      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS1(&defaults1); //read the Defaults 1 Conditions
 800657c:	f107 031c 	add.w	r3, r7, #28
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff f981 	bl	8005888 <READ_EPS_DEFAULTS1>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800658c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <handleCySatPacket+0x8ae>
                        return -1;
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
 8006598:	e29c      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS2(&defaults2); //read the Defaults 2 Conditions
 800659a:	f107 031a 	add.w	r3, r7, #26
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff f997 	bl	80058d2 <READ_EPS_DEFAULTS2>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80065aa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <handleCySatPacket+0x8cc>
                        return -1;
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	e28d      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80065b8:	231e      	movs	r3, #30
 80065ba:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0C; //Input, Output, and Default Conditions Response
 80065be:	230c      	movs	r3, #12
 80065c0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80065c4:	2306      	movs	r3, #6
 80065c6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80065ca:	2006      	movs	r0, #6
 80065cc:	f000 ff82 	bl	80074d4 <malloc>
 80065d0:	4603      	mov	r3, r0
 80065d2:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = input & 0xFF;
 80065d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80065d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = (output1 & 0xFF00) >> 8;
 80065dc:	8c3b      	ldrh	r3, [r7, #32]
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065e4:	3301      	adds	r3, #1
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = output1 & 0xFF;
 80065ea:	8c3a      	ldrh	r2, [r7, #32]
 80065ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ee:	3302      	adds	r3, #2
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = output2 & 0xFF;
 80065f4:	8bfa      	ldrh	r2, [r7, #30]
 80065f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065f8:	3303      	adds	r3, #3
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = defaults1 & 0xFF;
 80065fe:	8bba      	ldrh	r2, [r7, #28]
 8006600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006602:	3304      	adds	r3, #4
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = defaults2 & 0xFF;
 8006608:	8b7a      	ldrh	r2, [r7, #26]
 800660a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800660c:	3305      	adds	r3, #5
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8006612:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800661a:	f000 fa5f 	bl	8006adc <generateCySatChecksum>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8006624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800662c:	f7ff fac8 	bl	8005bc0 <sendCySatPacket>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8006636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006638:	4618      	mov	r0, r3
 800663a:	f000 ff53 	bl	80074e4 <free>
                    return status; //send the response
 800663e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006642:	e247      	b.n	8006ad4 <handleCySatPacket+0xde8>
                }
                case 0x0F: { //Counter Check Request
                    uint16_t power_on, under_voltage, short_circuited, over_temp, charging_cycles;
                    status = READ_EPS_POWER_ON_CYCLES(&power_on); //read the MCU Temperature
 8006644:	f107 0318 	add.w	r3, r7, #24
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff f864 	bl	8005716 <READ_EPS_POWER_ON_CYCLES>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006654:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <handleCySatPacket+0x976>
                        return -1;
 800665c:	f04f 33ff 	mov.w	r3, #4294967295
 8006660:	e238      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_UNDER_VOLT_COUNT(&under_voltage); //read the Battery Cell 1 Temperature
 8006662:	f107 0316 	add.w	r3, r7, #22
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff f87a 	bl	8005760 <READ_EPS_UNDER_VOLT_COUNT>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006672:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <handleCySatPacket+0x994>
                        return -1;
 800667a:	f04f 33ff 	mov.w	r3, #4294967295
 800667e:	e229      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SHORT_CIRCUIT_COUNT(&short_circuited); //read the Battery Cell 2 Temperature
 8006680:	f107 0314 	add.w	r3, r7, #20
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff f890 	bl	80057aa <READ_EPS_SHORT_CIRCUIT_COUNT>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8006690:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <handleCySatPacket+0x9b2>
                        return -1;
 8006698:	f04f 33ff 	mov.w	r3, #4294967295
 800669c:	e21a      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OVER_TEMP_COUNT(&over_temp); //read the Battery Cell 3 Temperature
 800669e:	f107 0312 	add.w	r3, r7, #18
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff f8a6 	bl	80057f4 <READ_EPS_OVER_TEMP_COUNT>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80066ae:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <handleCySatPacket+0x9d0>
                        return -1;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	e20b      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_CHARGE_CYCLES(&charging_cycles); //read the Battery Cell 4 Temperature
 80066bc:	f107 0310 	add.w	r3, r7, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff f8bc 	bl	800583e <READ_EPS_CHARGE_CYCLES>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80066cc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <handleCySatPacket+0x9ee>
                        return -1;
 80066d4:	f04f 33ff 	mov.w	r3, #4294967295
 80066d8:	e1fc      	b.n	8006ad4 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80066da:	231e      	movs	r3, #30
 80066dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0E; //Temperature Response
 80066e0:	230e      	movs	r3, #14
 80066e2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 80066e6:	230a      	movs	r3, #10
 80066e8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 80066ec:	200a      	movs	r0, #10
 80066ee:	f000 fef1 	bl	80074d4 <malloc>
 80066f2:	4603      	mov	r3, r0
 80066f4:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (power_on & 0xFF00) >> 8;
 80066f6:	8b3b      	ldrh	r3, [r7, #24]
 80066f8:	0a1b      	lsrs	r3, r3, #8
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = power_on & 0xFF;
 8006702:	8b3a      	ldrh	r2, [r7, #24]
 8006704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006706:	3301      	adds	r3, #1
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (under_voltage & 0xFF00) >> 8;
 800670c:	8afb      	ldrh	r3, [r7, #22]
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	b29a      	uxth	r2, r3
 8006712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006714:	3302      	adds	r3, #2
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = under_voltage & 0xFF;
 800671a:	8afa      	ldrh	r2, [r7, #22]
 800671c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800671e:	3303      	adds	r3, #3
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (short_circuited & 0xFF00) >> 8;
 8006724:	8abb      	ldrh	r3, [r7, #20]
 8006726:	0a1b      	lsrs	r3, r3, #8
 8006728:	b29a      	uxth	r2, r3
 800672a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800672c:	3304      	adds	r3, #4
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = short_circuited & 0xFF;
 8006732:	8aba      	ldrh	r2, [r7, #20]
 8006734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006736:	3305      	adds	r3, #5
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (over_temp & 0xFF00) >> 8;
 800673c:	8a7b      	ldrh	r3, [r7, #18]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	b29a      	uxth	r2, r3
 8006742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006744:	3306      	adds	r3, #6
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = over_temp & 0xFF;
 800674a:	8a7a      	ldrh	r2, [r7, #18]
 800674c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800674e:	3307      	adds	r3, #7
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (charging_cycles & 0xFF00) >> 8;
 8006754:	8a3b      	ldrh	r3, [r7, #16]
 8006756:	0a1b      	lsrs	r3, r3, #8
 8006758:	b29a      	uxth	r2, r3
 800675a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800675c:	3308      	adds	r3, #8
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = charging_cycles & 0xFF;
 8006762:	8a3a      	ldrh	r2, [r7, #16]
 8006764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006766:	3309      	adds	r3, #9
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800676c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006770:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006774:	f000 f9b2 	bl	8006adc <generateCySatChecksum>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800677e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006786:	f7ff fa1b 	bl	8005bc0 <sendCySatPacket>
 800678a:	4603      	mov	r3, r0
 800678c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8006790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fea6 	bl	80074e4 <free>
                    return status; //send the response
 8006798:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800679c:	e19a      	b.n	8006ad4 <handleCySatPacket+0xde8>
                }
                case 0x11: { //Enable/Disable Request
                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800679e:	231e      	movs	r3, #30
 80067a0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x10; //Enable/Disable Response
 80067a4:	2310      	movs	r3, #16
 80067a6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x01;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t));
 80067b0:	2001      	movs	r0, #1
 80067b2:	f000 fe8f 	bl	80074d4 <malloc>
 80067b6:	4603      	mov	r3, r0
 80067b8:	673b      	str	r3, [r7, #112]	; 0x70
                    if(validateCySatChecksum(packet)==0){
 80067ba:	1d3b      	adds	r3, r7, #4
 80067bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067c0:	f000 f9c1 	bl	8006b46 <validateCySatChecksum>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <handleCySatPacket+0xae6>
                        outgoingPacket.Data[0] = 0;
 80067ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e15e      	b.n	8006a90 <handleCySatPacket+0xda4>
                    }
                    else{
                        switch(packet.Data[0]){
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	2b0e      	cmp	r3, #14
 80067da:	f200 8159 	bhi.w	8006a90 <handleCySatPacket+0xda4>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <handleCySatPacket+0xaf8>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006821 	.word	0x08006821
 80067e8:	08006a91 	.word	0x08006a91
 80067ec:	08006a91 	.word	0x08006a91
 80067f0:	08006855 	.word	0x08006855
 80067f4:	08006a91 	.word	0x08006a91
 80067f8:	08006889 	.word	0x08006889
 80067fc:	080068bd 	.word	0x080068bd
 8006800:	080068f1 	.word	0x080068f1
 8006804:	08006925 	.word	0x08006925
 8006808:	08006959 	.word	0x08006959
 800680c:	0800698d 	.word	0x0800698d
 8006810:	080069c1 	.word	0x080069c1
 8006814:	080069f5 	.word	0x080069f5
 8006818:	08006a29 	.word	0x08006a29
 800681c:	08006a5d 	.word	0x08006a5d
                            case 0x01:{ //Enable/Disable Battery BUS
                                if(packet.Data[1] == 0){
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	3301      	adds	r3, #1
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <handleCySatPacket+0xb4a>
                                    outgoingPacket.Data[0] = disable_EPS_Vbatt_Bus();
 800682a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800682c:	f7ff f87f 	bl	800592e <disable_EPS_Vbatt_Bus>
 8006830:	4603      	mov	r3, r0
 8006832:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006834:	e12c      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	3301      	adds	r3, #1
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d105      	bne.n	800684c <handleCySatPacket+0xb60>
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
 8006840:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006842:	f7ff f86b 	bl	800591c <enable_EPS_Vbatt_Bus>
 8006846:	4603      	mov	r3, r0
 8006848:	7023      	strb	r3, [r4, #0]
                                break;
 800684a:	e121      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 800684c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
                                break;
 8006852:	e11d      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x04:{ //Enable/Disable 5v BUS
                                if(packet.Data[1] == 0){
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	3301      	adds	r3, #1
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <handleCySatPacket+0xb7e>
                                    outgoingPacket.Data[0] = disable_EPS_5v_Bus();
 800685e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006860:	f7ff f877 	bl	8005952 <disable_EPS_5v_Bus>
 8006864:	4603      	mov	r3, r0
 8006866:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006868:	e112      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	3301      	adds	r3, #1
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d105      	bne.n	8006880 <handleCySatPacket+0xb94>
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
 8006874:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006876:	f7ff f863 	bl	8005940 <enable_EPS_5v_Bus>
 800687a:	4603      	mov	r3, r0
 800687c:	7023      	strb	r3, [r4, #0]
                                break;
 800687e:	e107      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8006880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006882:	2200      	movs	r2, #0
 8006884:	701a      	strb	r2, [r3, #0]
                                break;
 8006886:	e103      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x06:{ //Enable/Disable Fast/Slow Battery Charge 1
                                if(packet.Data[1] == 0){
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	3301      	adds	r3, #1
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d105      	bne.n	800689e <handleCySatPacket+0xbb2>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge1();
 8006892:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006894:	f7ff f86f 	bl	8005976 <disable_EPS_Fast_Charge1>
 8006898:	4603      	mov	r3, r0
 800689a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800689c:	e0f8      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	3301      	adds	r3, #1
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d105      	bne.n	80068b4 <handleCySatPacket+0xbc8>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
 80068a8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80068aa:	f7ff f85b 	bl	8005964 <enable_EPS_Fast_Charge1>
 80068ae:	4603      	mov	r3, r0
 80068b0:	7023      	strb	r3, [r4, #0]
                                break;
 80068b2:	e0ed      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80068b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068b6:	2200      	movs	r2, #0
 80068b8:	701a      	strb	r2, [r3, #0]
                                break;
 80068ba:	e0e9      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x07:{ //Enable/Disable Fast/Slow Battery Charge 2
                                if(packet.Data[1] == 0){
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	3301      	adds	r3, #1
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d105      	bne.n	80068d2 <handleCySatPacket+0xbe6>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge2();
 80068c6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80068c8:	f7ff f867 	bl	800599a <disable_EPS_Fast_Charge2>
 80068cc:	4603      	mov	r3, r0
 80068ce:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80068d0:	e0de      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	3301      	adds	r3, #1
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d105      	bne.n	80068e8 <handleCySatPacket+0xbfc>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
 80068dc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80068de:	f7ff f853 	bl	8005988 <enable_EPS_Fast_Charge2>
 80068e2:	4603      	mov	r3, r0
 80068e4:	7023      	strb	r3, [r4, #0]
                                break;
 80068e6:	e0d3      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80068e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
                                break;
 80068ee:	e0cf      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x08:{ //Enable/Disable Out1/Boost Board
                                if(packet.Data[1] == 0){
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	3301      	adds	r3, #1
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <handleCySatPacket+0xc1a>
                                    outgoingPacket.Data[0] = disable_EPS_Output_1();
 80068fa:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80068fc:	f7ff f85f 	bl	80059be <disable_EPS_Output_1>
 8006900:	4603      	mov	r3, r0
 8006902:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006904:	e0c4      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	3301      	adds	r3, #1
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d105      	bne.n	800691c <handleCySatPacket+0xc30>
                                    outgoingPacket.Data[0] = enable_EPS_Output_1();
 8006910:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006912:	f7ff f84b 	bl	80059ac <enable_EPS_Output_1>
 8006916:	4603      	mov	r3, r0
 8006918:	7023      	strb	r3, [r4, #0]
                                break;
 800691a:	e0b9      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 800691c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
                                break;
 8006922:	e0b5      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x09:{ //Enable/Disable Out2
                                if(packet.Data[1] == 0){
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	3301      	adds	r3, #1
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <handleCySatPacket+0xc4e>
                                    outgoingPacket.Data[0] = disable_EPS_Output_2();
 800692e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006930:	f7ff f857 	bl	80059e2 <disable_EPS_Output_2>
 8006934:	4603      	mov	r3, r0
 8006936:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006938:	e0aa      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	3301      	adds	r3, #1
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d105      	bne.n	8006950 <handleCySatPacket+0xc64>
                                    outgoingPacket.Data[0] = enable_EPS_Output_2();
 8006944:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006946:	f7ff f843 	bl	80059d0 <enable_EPS_Output_2>
 800694a:	4603      	mov	r3, r0
 800694c:	7023      	strb	r3, [r4, #0]
                                break;
 800694e:	e09f      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8006950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
                                break;
 8006956:	e09b      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x0A:{ //Enable/Disable Out3
                                if(packet.Data[1] == 0){
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	3301      	adds	r3, #1
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d105      	bne.n	800696e <handleCySatPacket+0xc82>
                                    outgoingPacket.Data[0] = disable_EPS_Output_3();
 8006962:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006964:	f7ff f84f 	bl	8005a06 <disable_EPS_Output_3>
 8006968:	4603      	mov	r3, r0
 800696a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800696c:	e090      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	3301      	adds	r3, #1
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d105      	bne.n	8006984 <handleCySatPacket+0xc98>
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
 8006978:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800697a:	f7ff f83b 	bl	80059f4 <enable_EPS_Output_3>
 800697e:	4603      	mov	r3, r0
 8006980:	7023      	strb	r3, [r4, #0]
                                break;
 8006982:	e085      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8006984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]
                                break;
 800698a:	e081      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x0B:{ //Enable/Disable Out5/UHF
                                if(packet.Data[1] == 0){
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	3301      	adds	r3, #1
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d105      	bne.n	80069a2 <handleCySatPacket+0xcb6>
                                    outgoingPacket.Data[0] = disable_EPS_Output_5();
 8006996:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006998:	f7ff f847 	bl	8005a2a <disable_EPS_Output_5>
 800699c:	4603      	mov	r3, r0
 800699e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_5();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80069a0:	e076      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	3301      	adds	r3, #1
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d105      	bne.n	80069b8 <handleCySatPacket+0xccc>
                                    outgoingPacket.Data[0] = enable_EPS_Output_5();
 80069ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80069ae:	f7ff f833 	bl	8005a18 <enable_EPS_Output_5>
 80069b2:	4603      	mov	r3, r0
 80069b4:	7023      	strb	r3, [r4, #0]
                                break;
 80069b6:	e06b      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80069b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
                                break;
 80069be:	e067      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x0C:{ //Enable/Disable Out6
                                if(packet.Data[1] == 0){
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3301      	adds	r3, #1
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d105      	bne.n	80069d6 <handleCySatPacket+0xcea>
                                    outgoingPacket.Data[0] = disable_EPS_Output_6();
 80069ca:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80069cc:	f7ff f83f 	bl	8005a4e <disable_EPS_Output_6>
 80069d0:	4603      	mov	r3, r0
 80069d2:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80069d4:	e05c      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	3301      	adds	r3, #1
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d105      	bne.n	80069ec <handleCySatPacket+0xd00>
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
 80069e0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80069e2:	f7ff f82b 	bl	8005a3c <enable_EPS_Output_6>
 80069e6:	4603      	mov	r3, r0
 80069e8:	7023      	strb	r3, [r4, #0]
                                break;
 80069ea:	e051      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80069ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
                                break;
 80069f2:	e04d      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x0D:{ //Enable/Disable Heater 1
                                if(packet.Data[1] == 0){
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	3301      	adds	r3, #1
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d105      	bne.n	8006a0a <handleCySatPacket+0xd1e>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_1();
 80069fe:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006a00:	f7ff f837 	bl	8005a72 <disable_EPS_Batt_Heater_1>
 8006a04:	4603      	mov	r3, r0
 8006a06:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006a08:	e042      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d105      	bne.n	8006a20 <handleCySatPacket+0xd34>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
 8006a14:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006a16:	f7ff f823 	bl	8005a60 <enable_EPS_Batt_Heater_1>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	7023      	strb	r3, [r4, #0]
                                break;
 8006a1e:	e037      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8006a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]
                                break;
 8006a26:	e033      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x0E:{ //Enable/Disable Heater 2
                                if(packet.Data[1] == 0){
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <handleCySatPacket+0xd52>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_2();
 8006a32:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006a34:	f7ff f82f 	bl	8005a96 <disable_EPS_Batt_Heater_2>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006a3c:	e028      	b.n	8006a90 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	3301      	adds	r3, #1
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d105      	bne.n	8006a54 <handleCySatPacket+0xd68>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
 8006a48:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006a4a:	f7ff f81b 	bl	8005a84 <enable_EPS_Batt_Heater_2>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	7023      	strb	r3, [r4, #0]
                                break;
 8006a52:	e01d      	b.n	8006a90 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8006a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]
                                break;
 8006a5a:	e019      	b.n	8006a90 <handleCySatPacket+0xda4>
                            }
                            case 0x0F:{ //Enable/Disable Heater 3
                                if(packet.Data[1] == 0){
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d105      	bne.n	8006a72 <handleCySatPacket+0xd86>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_3();
 8006a66:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006a68:	f7ff f827 	bl	8005aba <disable_EPS_Batt_Heater_3>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8006a70:	e00d      	b.n	8006a8e <handleCySatPacket+0xda2>
                                else if(packet.Data[1] == 1){
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	3301      	adds	r3, #1
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d105      	bne.n	8006a88 <handleCySatPacket+0xd9c>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
 8006a7c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8006a7e:	f7ff f813 	bl	8005aa8 <enable_EPS_Batt_Heater_3>
 8006a82:	4603      	mov	r3, r0
 8006a84:	7023      	strb	r3, [r4, #0]
                                break;
 8006a86:	e002      	b.n	8006a8e <handleCySatPacket+0xda2>
                                    outgoingPacket.Data[0] = 0x00;
 8006a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
                                break;
 8006a8e:	bf00      	nop
                            }
                        }
                    }
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8006a90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006a94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a98:	f000 f820 	bl	8006adc <generateCySatChecksum>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8006aa2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006aa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006aaa:	f7ff f889 	bl	8005bc0 <sendCySatPacket>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8006ab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fd14 	bl	80074e4 <free>
                    return status; //send the response
 8006abc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006ac0:	e008      	b.n	8006ad4 <handleCySatPacket+0xde8>
        case EOL_SUBSYSTEM_TYPE: //End of Life

            break;

        default:
            return -1;
 8006ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac6:	e005      	b.n	8006ad4 <handleCySatPacket+0xde8>
            break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <handleCySatPacket+0xde6>
            break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <handleCySatPacket+0xde6>
            break;
 8006ad0:	bf00      	nop
    }

    return 0;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	37a4      	adds	r7, #164	; 0xa4
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd90      	pop	{r4, r7, pc}

08006adc <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 8006adc:	b480      	push	{r7}
 8006ade:	b089      	sub	sp, #36	; 0x24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	1d3b      	adds	r3, r7, #4
 8006ae4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 8006aec:	793b      	ldrb	r3, [r7, #4]
 8006aee:	461a      	mov	r2, r3
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	4413      	add	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 8006af6:	797b      	ldrb	r3, [r7, #5]
 8006af8:	461a      	mov	r2, r3
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	4413      	add	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 8006b00:	79bb      	ldrb	r3, [r7, #6]
 8006b02:	461a      	mov	r2, r3
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	4413      	add	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	e00a      	b.n	8006b26 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	3301      	adds	r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	79bb      	ldrb	r3, [r7, #6]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	dbef      	blt.n	8006b10 <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	43db      	mvns	r3, r3
 8006b38:	b2db      	uxtb	r3, r3
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3724      	adds	r7, #36	; 0x24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 8006b56:	793b      	ldrb	r3, [r7, #4]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 8006b60:	797b      	ldrb	r3, [r7, #5]
 8006b62:	461a      	mov	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 8006b6a:	79bb      	ldrb	r3, [r7, #6]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e00a      	b.n	8006b90 <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	4413      	add	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	79bb      	ldrb	r3, [r7, #6]
 8006b92:	461a      	mov	r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	dbef      	blt.n	8006b7a <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 8006b9a:	7b3b      	ldrb	r3, [r7, #12]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2bff      	cmp	r3, #255	; 0xff
 8006baa:	d101      	bne.n	8006bb0 <validateCySatChecksum+0x6a>
        return 1;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 8006bb0:	2300      	movs	r3, #0
    }
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
	...

08006bc0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08a      	sub	sp, #40	; 0x28
 8006bc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bc6:	f107 0314 	add.w	r3, r7, #20
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	605a      	str	r2, [r3, #4]
 8006bd0:	609a      	str	r2, [r3, #8]
 8006bd2:	60da      	str	r2, [r3, #12]
 8006bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	4a26      	ldr	r2, [pc, #152]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006be0:	f043 0304 	orr.w	r3, r3, #4
 8006be4:	6313      	str	r3, [r2, #48]	; 0x30
 8006be6:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	4a1f      	ldr	r2, [pc, #124]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	6313      	str	r3, [r2, #48]	; 0x30
 8006c02:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60bb      	str	r3, [r7, #8]
 8006c12:	4b19      	ldr	r3, [pc, #100]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c1e:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	4a11      	ldr	r2, [pc, #68]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006c34:	f043 0302 	orr.w	r3, r3, #2
 8006c38:	6313      	str	r3, [r2, #48]	; 0x30
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <MX_GPIO_Init+0xb8>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8006c46:	2200      	movs	r2, #0
 8006c48:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8006c4c:	480b      	ldr	r0, [pc, #44]	; (8006c7c <MX_GPIO_Init+0xbc>)
 8006c4e:	f7fa f801 	bl	8000c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8006c52:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c60:	2300      	movs	r3, #0
 8006c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006c64:	f107 0314 	add.w	r3, r7, #20
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4804      	ldr	r0, [pc, #16]	; (8006c7c <MX_GPIO_Init+0xbc>)
 8006c6c:	f7f9 fe46 	bl	80008fc <HAL_GPIO_Init>

}
 8006c70:	bf00      	nop
 8006c72:	3728      	adds	r7, #40	; 0x28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40023800 	.word	0x40023800
 8006c7c:	40021800 	.word	0x40021800

08006c80 <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 8006c80:	b40f      	push	{r0, r1, r2, r3}
 8006c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	466b      	mov	r3, sp
 8006c8c:	4698      	mov	r8, r3

    uint32_t bufferSize = 512;
 8006c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c92:	61bb      	str	r3, [r7, #24]
    uint8_t formatBuffer[bufferSize];
 8006c94:	69be      	ldr	r6, [r7, #24]
 8006c96:	4633      	mov	r3, r6
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4634      	mov	r4, r6
 8006ca0:	461d      	mov	r5, r3
 8006ca2:	f04f 0200 	mov.w	r2, #0
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	00eb      	lsls	r3, r5, #3
 8006cac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cb0:	00e2      	lsls	r2, r4, #3
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	00cb      	lsls	r3, r1, #3
 8006cc2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006cc6:	00c2      	lsls	r2, r0, #3
 8006cc8:	1df3      	adds	r3, r6, #7
 8006cca:	08db      	lsrs	r3, r3, #3
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	ebad 0d03 	sub.w	sp, sp, r3
 8006cd2:	466b      	mov	r3, sp
 8006cd4:	3300      	adds	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]

    va_list args;
    va_start(args, format);
 8006cd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006cdc:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ce2:	69b9      	ldr	r1, [r7, #24]
 8006ce4:	6938      	ldr	r0, [r7, #16]
 8006ce6:	f000 fd37 	bl	8007758 <vsniprintf>
 8006cea:	60f8      	str	r0, [r7, #12]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	77fb      	strb	r3, [r7, #31]
    if (len > 0) {
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dd1b      	ble.n	8006d2e <debug_printf+0xae>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cfe:	6939      	ldr	r1, [r7, #16]
 8006d00:	4810      	ldr	r0, [pc, #64]	; (8006d44 <debug_printf+0xc4>)
 8006d02:	f7fd f8ae 	bl	8003e62 <HAL_UART_Transmit>
 8006d06:	4603      	mov	r3, r0
 8006d08:	77fb      	strb	r3, [r7, #31]
        uint8_t crlf[] = "\r\n";
 8006d0a:	4a0f      	ldr	r2, [pc, #60]	; (8006d48 <debug_printf+0xc8>)
 8006d0c:	1d3b      	adds	r3, r7, #4
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	4611      	mov	r1, r2
 8006d12:	8019      	strh	r1, [r3, #0]
 8006d14:	3302      	adds	r3, #2
 8006d16:	0c12      	lsrs	r2, r2, #16
 8006d18:	701a      	strb	r2, [r3, #0]
        status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
 8006d1a:	1d39      	adds	r1, r7, #4
 8006d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d20:	2202      	movs	r2, #2
 8006d22:	4808      	ldr	r0, [pc, #32]	; (8006d44 <debug_printf+0xc4>)
 8006d24:	f7fd f89d 	bl	8003e62 <HAL_UART_Transmit>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	77fb      	strb	r3, [r7, #31]
 8006d2c:	e001      	b.n	8006d32 <debug_printf+0xb2>
    }
    else{
        status = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 8006d32:	7ffb      	ldrb	r3, [r7, #31]
 8006d34:	46c5      	mov	sp, r8
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d40:	b004      	add	sp, #16
 8006d42:	4770      	bx	lr
 8006d44:	2000013c 	.word	0x2000013c
 8006d48:	08007e2c 	.word	0x08007e2c

08006d4c <FloatToUnsigned16bits>:
  * @brief Converts a float into a uint16_t
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a uint16_t
  * @retval The 16 bit unsigned integer
  */
uint16_t FloatToUnsigned16bits(float float_value){
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t x = *((uint32_t*)&float_value);
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
    return ((x>>16)&0x8000)|((((x&0x7f800000)-0x38000000)>>13)&0x7c00)|((x>>13)&0x03ff);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	0c1b      	lsrs	r3, r3, #16
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8006d72:	f103 4348 	add.w	r3, r3, #3355443200	; 0xc8000000
 8006d76:	0b5b      	lsrs	r3, r3, #13
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	0b5b      	lsrs	r3, r3, #13
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	4313      	orrs	r3, r2
 8006d92:	b29b      	uxth	r3, r3
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006da4:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006da6:	4a1c      	ldr	r2, [pc, #112]	; (8006e18 <MX_I2C1_Init+0x78>)
 8006da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006daa:	4b1a      	ldr	r3, [pc, #104]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006dac:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <MX_I2C1_Init+0x7c>)
 8006dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006db0:	4b18      	ldr	r3, [pc, #96]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006db6:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006dbc:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006dc4:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006dca:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006dd0:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006ddc:	480d      	ldr	r0, [pc, #52]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006dde:	f7f9 ff53 	bl	8000c88 <HAL_I2C_Init>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006de8:	f000 f976 	bl	80070d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006dec:	2100      	movs	r1, #0
 8006dee:	4809      	ldr	r0, [pc, #36]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006df0:	f7fc fb20 	bl	8003434 <HAL_I2CEx_ConfigAnalogFilter>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8006dfa:	f000 f96d 	bl	80070d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4804      	ldr	r0, [pc, #16]	; (8006e14 <MX_I2C1_Init+0x74>)
 8006e02:	f7fc fb53 	bl	80034ac <HAL_I2CEx_ConfigDigitalFilter>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8006e0c:	f000 f964 	bl	80070d8 <Error_Handler>
  }

}
 8006e10:	bf00      	nop
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20000094 	.word	0x20000094
 8006e18:	40005400 	.word	0x40005400
 8006e1c:	000186a0 	.word	0x000186a0

08006e20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08a      	sub	sp, #40	; 0x28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e28:	f107 0314 	add.w	r3, r7, #20
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	605a      	str	r2, [r3, #4]
 8006e32:	609a      	str	r2, [r3, #8]
 8006e34:	60da      	str	r2, [r3, #12]
 8006e36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <HAL_I2C_MspInit+0x94>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d133      	bne.n	8006eaa <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e42:	2300      	movs	r3, #0
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	4b1c      	ldr	r3, [pc, #112]	; (8006eb8 <HAL_I2C_MspInit+0x98>)
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <HAL_I2C_MspInit+0x98>)
 8006e4c:	f043 0302 	orr.w	r3, r3, #2
 8006e50:	6313      	str	r3, [r2, #48]	; 0x30
 8006e52:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <HAL_I2C_MspInit+0x98>)
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e5e:	23c0      	movs	r3, #192	; 0xc0
 8006e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e62:	2312      	movs	r3, #18
 8006e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e66:	2301      	movs	r3, #1
 8006e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e6e:	2304      	movs	r3, #4
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e72:	f107 0314 	add.w	r3, r7, #20
 8006e76:	4619      	mov	r1, r3
 8006e78:	4810      	ldr	r0, [pc, #64]	; (8006ebc <HAL_I2C_MspInit+0x9c>)
 8006e7a:	f7f9 fd3f 	bl	80008fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <HAL_I2C_MspInit+0x98>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	4a0c      	ldr	r2, [pc, #48]	; (8006eb8 <HAL_I2C_MspInit+0x98>)
 8006e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <HAL_I2C_MspInit+0x98>)
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	201f      	movs	r0, #31
 8006ea0:	f7f9 fcc5 	bl	800082e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006ea4:	201f      	movs	r0, #31
 8006ea6:	f7f9 fcde 	bl	8000866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006eaa:	bf00      	nop
 8006eac:	3728      	adds	r7, #40	; 0x28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40005400 	.word	0x40005400
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	40020400 	.word	0x40020400

08006ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006ec4:	f7f9 fb66 	bl	8000594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ec8:	f000 f850 	bl	8006f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ecc:	f7ff fe78 	bl	8006bc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8006ed0:	f7ff ff66 	bl	8006da0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8006ed4:	f000 f9c8 	bl	8007268 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8006ed8:	f000 f9f0 	bl	80072bc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  SatFlags.Detumbling = 0;
 8006edc:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <main+0x9c>)
 8006ede:	7813      	ldrb	r3, [r2, #0]
 8006ee0:	f36f 0300 	bfc	r3, #0, #1
 8006ee4:	7013      	strb	r3, [r2, #0]
  SatFlags.Auto_Control = 0;
 8006ee6:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <main+0x9c>)
 8006ee8:	7813      	ldrb	r3, [r2, #0]
 8006eea:	f36f 0382 	bfc	r3, #2, #1
 8006eee:	7013      	strb	r3, [r2, #0]
  SatFlags.Infinity_Detumbling = 0;
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	; (8006f5c <main+0x9c>)
 8006ef2:	7813      	ldrb	r3, [r2, #0]
 8006ef4:	f36f 0341 	bfc	r3, #1, #1
 8006ef8:	7013      	strb	r3, [r2, #0]
  SatFlags.AD_is_Running = 0;
 8006efa:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <main+0x9c>)
 8006efc:	7813      	ldrb	r3, [r2, #0]
 8006efe:	f36f 03c3 	bfc	r3, #3, #1
 8006f02:	7013      	strb	r3, [r2, #0]
  SatFlags.Antenna_is_Released = 0;
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <main+0x9c>)
 8006f06:	7813      	ldrb	r3, [r2, #0]
 8006f08:	f36f 1304 	bfc	r3, #4, #1
 8006f0c:	7013      	strb	r3, [r2, #0]
  SatFlags.Battery_Low = 0;
 8006f0e:	4a13      	ldr	r2, [pc, #76]	; (8006f5c <main+0x9c>)
 8006f10:	7813      	ldrb	r3, [r2, #0]
 8006f12:	f36f 1345 	bfc	r3, #5, #1
 8006f16:	7013      	strb	r3, [r2, #0]
  SatFlags.MelodyEnabled = 0;
 8006f18:	4a10      	ldr	r2, [pc, #64]	; (8006f5c <main+0x9c>)
 8006f1a:	7813      	ldrb	r3, [r2, #0]
 8006f1c:	f36f 13c7 	bfc	r3, #7, #1
 8006f20:	7013      	strb	r3, [r2, #0]
  SatFlags.CameraReady = 0;
 8006f22:	4a0e      	ldr	r2, [pc, #56]	; (8006f5c <main+0x9c>)
 8006f24:	7853      	ldrb	r3, [r2, #1]
 8006f26:	f36f 0300 	bfc	r3, #0, #1
 8006f2a:	7053      	strb	r3, [r2, #1]
  SatFlags.MakePicture = 0;
 8006f2c:	4a0b      	ldr	r2, [pc, #44]	; (8006f5c <main+0x9c>)
 8006f2e:	7853      	ldrb	r3, [r2, #1]
 8006f30:	f36f 0341 	bfc	r3, #1, #1
 8006f34:	7053      	strb	r3, [r2, #1]
  SatFlags.Gyros_ON_OFF = 0;
 8006f36:	4a09      	ldr	r2, [pc, #36]	; (8006f5c <main+0x9c>)
 8006f38:	7853      	ldrb	r3, [r2, #1]
 8006f3a:	f36f 0382 	bfc	r3, #2, #1
 8006f3e:	7053      	strb	r3, [r2, #1]
  SatFlags.BeaconEnabled = 0;
 8006f40:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <main+0x9c>)
 8006f42:	7813      	ldrb	r3, [r2, #0]
 8006f44:	f36f 1386 	bfc	r3, #6, #1
 8006f48:	7013      	strb	r3, [r2, #0]

  GroundStationRxDataLength = 4;
 8006f4a:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <main+0xa0>)
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, GroundStationRxBuffer, 4);
 8006f50:	2204      	movs	r2, #4
 8006f52:	4904      	ldr	r1, [pc, #16]	; (8006f64 <main+0xa4>)
 8006f54:	4804      	ldr	r0, [pc, #16]	; (8006f68 <main+0xa8>)
 8006f56:	f7fd f81d 	bl	8003f94 <HAL_UART_Receive_IT>
//  HAL_I2C_Master_Receive_IT(&hi2c1, 0x18 << 1, data_echo, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006f5a:	e7fe      	b.n	8006f5a <main+0x9a>
 8006f5c:	200000e8 	.word	0x200000e8
 8006f60:	200000f4 	.word	0x200000f4
 8006f64:	200000ec 	.word	0x200000ec
 8006f68:	200000fc 	.word	0x200000fc

08006f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b094      	sub	sp, #80	; 0x50
 8006f70:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f72:	f107 0320 	add.w	r3, r7, #32
 8006f76:	2230      	movs	r2, #48	; 0x30
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fac8 	bl	8007510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f80:	f107 030c 	add.w	r3, r7, #12
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	605a      	str	r2, [r3, #4]
 8006f8a:	609a      	str	r2, [r3, #8]
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f90:	2300      	movs	r3, #0
 8006f92:	60bb      	str	r3, [r7, #8]
 8006f94:	4b23      	ldr	r3, [pc, #140]	; (8007024 <SystemClock_Config+0xb8>)
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	4a22      	ldr	r2, [pc, #136]	; (8007024 <SystemClock_Config+0xb8>)
 8006f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8006fa0:	4b20      	ldr	r3, [pc, #128]	; (8007024 <SystemClock_Config+0xb8>)
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006fac:	2300      	movs	r3, #0
 8006fae:	607b      	str	r3, [r7, #4]
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <SystemClock_Config+0xbc>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006fb8:	4a1b      	ldr	r2, [pc, #108]	; (8007028 <SystemClock_Config+0xbc>)
 8006fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	4b19      	ldr	r3, [pc, #100]	; (8007028 <SystemClock_Config+0xbc>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fc8:	607b      	str	r3, [r7, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006fdc:	f107 0320 	add.w	r3, r7, #32
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fc faa3 	bl	800352c <HAL_RCC_OscConfig>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8006fec:	f000 f874 	bl	80070d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006ff0:	230f      	movs	r3, #15
 8006ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007004:	f107 030c 	add.w	r3, r7, #12
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f7fc fcfc 	bl	8003a08 <HAL_RCC_ClockConfig>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8007016:	f000 f85f 	bl	80070d8 <Error_Handler>
  }
}
 800701a:	bf00      	nop
 800701c:	3750      	adds	r7, #80	; 0x50
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800
 8007028:	40007000 	.word	0x40007000

0800702c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){ //OBC connected to computer
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a15      	ldr	r2, [pc, #84]	; (800708c <HAL_UART_RxCpltCallback+0x60>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d117      	bne.n	800706c <HAL_UART_RxCpltCallback+0x40>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 800703c:	f107 030c 	add.w	r3, r7, #12
 8007040:	4913      	ldr	r1, [pc, #76]	; (8007090 <HAL_UART_RxCpltCallback+0x64>)
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fd8e 	bl	8005b64 <parseCySatPacket>
 8007048:	f107 030c 	add.w	r3, r7, #12
 800704c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007050:	f7fe fe4c 	bl	8005cec <handleCySatPacket>
 8007054:	4603      	mov	r3, r0
 8007056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705a:	d101      	bne.n	8007060 <HAL_UART_RxCpltCallback+0x34>
            sendErrorPacket();
 800705c:	f7fe fe20 	bl	8005ca0 <sendErrorPacket>
        }
		HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);
 8007060:	2204      	movs	r2, #4
 8007062:	490b      	ldr	r1, [pc, #44]	; (8007090 <HAL_UART_RxCpltCallback+0x64>)
 8007064:	4809      	ldr	r0, [pc, #36]	; (800708c <HAL_UART_RxCpltCallback+0x60>)
 8007066:	f7fc ff95 	bl	8003f94 <HAL_UART_Receive_IT>
	}
	else if(huart == &huart6){ //OBC connected to Payload
		debug_printf("Got UART6 Connection!");
		HAL_UART_Receive_IT(&huart6, data_echo, 1);
	}
}
 800706a:	e00b      	b.n	8007084 <HAL_UART_RxCpltCallback+0x58>
	else if(huart == &huart6){ //OBC connected to Payload
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <HAL_UART_RxCpltCallback+0x68>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d107      	bne.n	8007084 <HAL_UART_RxCpltCallback+0x58>
		debug_printf("Got UART6 Connection!");
 8007074:	4808      	ldr	r0, [pc, #32]	; (8007098 <HAL_UART_RxCpltCallback+0x6c>)
 8007076:	f7ff fe03 	bl	8006c80 <debug_printf>
		HAL_UART_Receive_IT(&huart6, data_echo, 1);
 800707a:	2201      	movs	r2, #1
 800707c:	4907      	ldr	r1, [pc, #28]	; (800709c <HAL_UART_RxCpltCallback+0x70>)
 800707e:	4805      	ldr	r0, [pc, #20]	; (8007094 <HAL_UART_RxCpltCallback+0x68>)
 8007080:	f7fc ff88 	bl	8003f94 <HAL_UART_Receive_IT>
}
 8007084:	bf00      	nop
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	200000fc 	.word	0x200000fc
 8007090:	200000ec 	.word	0x200000ec
 8007094:	2000013c 	.word	0x2000013c
 8007098:	08007e88 	.word	0x08007e88
 800709c:	20000008 	.word	0x20000008

080070a0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){ //OBC connected to EPS, UHF, and ADCS
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a08      	ldr	r2, [pc, #32]	; (80070cc <HAL_I2C_MasterRxCpltCallback+0x2c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d108      	bne.n	80070c2 <HAL_I2C_MasterRxCpltCallback+0x22>
		debug_printf("Got I2C Connection!");
 80070b0:	4807      	ldr	r0, [pc, #28]	; (80070d0 <HAL_I2C_MasterRxCpltCallback+0x30>)
 80070b2:	f7ff fde5 	bl	8006c80 <debug_printf>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x18 << 1, data_echo, 1);
 80070b6:	2301      	movs	r3, #1
 80070b8:	4a06      	ldr	r2, [pc, #24]	; (80070d4 <HAL_I2C_MasterRxCpltCallback+0x34>)
 80070ba:	2130      	movs	r1, #48	; 0x30
 80070bc:	4803      	ldr	r0, [pc, #12]	; (80070cc <HAL_I2C_MasterRxCpltCallback+0x2c>)
 80070be:	f7fa fa4b 	bl	8001558 <HAL_I2C_Master_Receive_IT>
	}
}
 80070c2:	bf00      	nop
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20000094 	.word	0x20000094
 80070d0:	08007ea0 	.word	0x08007ea0
 80070d4:	20000008 	.word	0x20000008

080070d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80070dc:	bf00      	nop
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070ee:	2300      	movs	r3, #0
 80070f0:	607b      	str	r3, [r7, #4]
 80070f2:	4b10      	ldr	r3, [pc, #64]	; (8007134 <HAL_MspInit+0x4c>)
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <HAL_MspInit+0x4c>)
 80070f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070fc:	6453      	str	r3, [r2, #68]	; 0x44
 80070fe:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <HAL_MspInit+0x4c>)
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007106:	607b      	str	r3, [r7, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800710a:	2300      	movs	r3, #0
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <HAL_MspInit+0x4c>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	4a08      	ldr	r2, [pc, #32]	; (8007134 <HAL_MspInit+0x4c>)
 8007114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007118:	6413      	str	r3, [r2, #64]	; 0x40
 800711a:	4b06      	ldr	r3, [pc, #24]	; (8007134 <HAL_MspInit+0x4c>)
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40023800 	.word	0x40023800

08007138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800713c:	bf00      	nop
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007146:	b480      	push	{r7}
 8007148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800714a:	e7fe      	b.n	800714a <HardFault_Handler+0x4>

0800714c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007150:	e7fe      	b.n	8007150 <MemManage_Handler+0x4>

08007152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007152:	b480      	push	{r7}
 8007154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007156:	e7fe      	b.n	8007156 <BusFault_Handler+0x4>

08007158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800715c:	e7fe      	b.n	800715c <UsageFault_Handler+0x4>

0800715e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800715e:	b480      	push	{r7}
 8007160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007162:	bf00      	nop
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007170:	bf00      	nop
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800717a:	b480      	push	{r7}
 800717c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800717e:	bf00      	nop
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800718c:	f7f9 fa54 	bl	8000638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007190:	bf00      	nop
 8007192:	bd80      	pop	{r7, pc}

08007194 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007198:	4802      	ldr	r0, [pc, #8]	; (80071a4 <I2C1_EV_IRQHandler+0x10>)
 800719a:	f7fa fa8b 	bl	80016b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800719e:	bf00      	nop
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000094 	.word	0x20000094

080071a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80071ac:	4802      	ldr	r0, [pc, #8]	; (80071b8 <USART1_IRQHandler+0x10>)
 80071ae:	f7fc ff47 	bl	8004040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80071b2:	bf00      	nop
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200000fc 	.word	0x200000fc

080071bc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80071c0:	4802      	ldr	r0, [pc, #8]	; (80071cc <USART6_IRQHandler+0x10>)
 80071c2:	f7fc ff3d 	bl	8004040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80071c6:	bf00      	nop
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	2000013c 	.word	0x2000013c

080071d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071d8:	4a14      	ldr	r2, [pc, #80]	; (800722c <_sbrk+0x5c>)
 80071da:	4b15      	ldr	r3, [pc, #84]	; (8007230 <_sbrk+0x60>)
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071e4:	4b13      	ldr	r3, [pc, #76]	; (8007234 <_sbrk+0x64>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071ec:	4b11      	ldr	r3, [pc, #68]	; (8007234 <_sbrk+0x64>)
 80071ee:	4a12      	ldr	r2, [pc, #72]	; (8007238 <_sbrk+0x68>)
 80071f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <_sbrk+0x64>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4413      	add	r3, r2
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d207      	bcs.n	8007210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007200:	f000 f93e 	bl	8007480 <__errno>
 8007204:	4603      	mov	r3, r0
 8007206:	220c      	movs	r2, #12
 8007208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800720a:	f04f 33ff 	mov.w	r3, #4294967295
 800720e:	e009      	b.n	8007224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007210:	4b08      	ldr	r3, [pc, #32]	; (8007234 <_sbrk+0x64>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007216:	4b07      	ldr	r3, [pc, #28]	; (8007234 <_sbrk+0x64>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	4a05      	ldr	r2, [pc, #20]	; (8007234 <_sbrk+0x64>)
 8007220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007222:	68fb      	ldr	r3, [r7, #12]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20030000 	.word	0x20030000
 8007230:	00000400 	.word	0x00000400
 8007234:	200000f8 	.word	0x200000f8
 8007238:	20000190 	.word	0x20000190

0800723c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007240:	4b08      	ldr	r3, [pc, #32]	; (8007264 <SystemInit+0x28>)
 8007242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007246:	4a07      	ldr	r2, [pc, #28]	; (8007264 <SystemInit+0x28>)
 8007248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800724c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007250:	4b04      	ldr	r3, [pc, #16]	; (8007264 <SystemInit+0x28>)
 8007252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007256:	609a      	str	r2, [r3, #8]
#endif
}
 8007258:	bf00      	nop
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	e000ed00 	.word	0xe000ed00

08007268 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800726c:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <MX_USART1_UART_Init+0x4c>)
 800726e:	4a12      	ldr	r2, [pc, #72]	; (80072b8 <MX_USART1_UART_Init+0x50>)
 8007270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007272:	4b10      	ldr	r3, [pc, #64]	; (80072b4 <MX_USART1_UART_Init+0x4c>)
 8007274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800727a:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <MX_USART1_UART_Init+0x4c>)
 800727c:	2200      	movs	r2, #0
 800727e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007280:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <MX_USART1_UART_Init+0x4c>)
 8007282:	2200      	movs	r2, #0
 8007284:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <MX_USART1_UART_Init+0x4c>)
 8007288:	2200      	movs	r2, #0
 800728a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800728c:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <MX_USART1_UART_Init+0x4c>)
 800728e:	220c      	movs	r2, #12
 8007290:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007292:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <MX_USART1_UART_Init+0x4c>)
 8007294:	2200      	movs	r2, #0
 8007296:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007298:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <MX_USART1_UART_Init+0x4c>)
 800729a:	2200      	movs	r2, #0
 800729c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800729e:	4805      	ldr	r0, [pc, #20]	; (80072b4 <MX_USART1_UART_Init+0x4c>)
 80072a0:	f7fc fd92 	bl	8003dc8 <HAL_UART_Init>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80072aa:	f7ff ff15 	bl	80070d8 <Error_Handler>
  }

}
 80072ae:	bf00      	nop
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200000fc 	.word	0x200000fc
 80072b8:	40011000 	.word	0x40011000

080072bc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80072c0:	4b11      	ldr	r3, [pc, #68]	; (8007308 <MX_USART6_UART_Init+0x4c>)
 80072c2:	4a12      	ldr	r2, [pc, #72]	; (800730c <MX_USART6_UART_Init+0x50>)
 80072c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <MX_USART6_UART_Init+0x4c>)
 80072c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80072cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80072ce:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <MX_USART6_UART_Init+0x4c>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80072d4:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <MX_USART6_UART_Init+0x4c>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80072da:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <MX_USART6_UART_Init+0x4c>)
 80072dc:	2200      	movs	r2, #0
 80072de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80072e0:	4b09      	ldr	r3, [pc, #36]	; (8007308 <MX_USART6_UART_Init+0x4c>)
 80072e2:	220c      	movs	r2, #12
 80072e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072e6:	4b08      	ldr	r3, [pc, #32]	; (8007308 <MX_USART6_UART_Init+0x4c>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <MX_USART6_UART_Init+0x4c>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80072f2:	4805      	ldr	r0, [pc, #20]	; (8007308 <MX_USART6_UART_Init+0x4c>)
 80072f4:	f7fc fd68 	bl	8003dc8 <HAL_UART_Init>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80072fe:	f7ff feeb 	bl	80070d8 <Error_Handler>
  }

}
 8007302:	bf00      	nop
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	2000013c 	.word	0x2000013c
 800730c:	40011400 	.word	0x40011400

08007310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	; 0x30
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007318:	f107 031c 	add.w	r3, r7, #28
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	609a      	str	r2, [r3, #8]
 8007324:	60da      	str	r2, [r3, #12]
 8007326:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a3a      	ldr	r2, [pc, #232]	; (8007418 <HAL_UART_MspInit+0x108>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d135      	bne.n	800739e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007332:	2300      	movs	r3, #0
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	4b39      	ldr	r3, [pc, #228]	; (800741c <HAL_UART_MspInit+0x10c>)
 8007338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733a:	4a38      	ldr	r2, [pc, #224]	; (800741c <HAL_UART_MspInit+0x10c>)
 800733c:	f043 0310 	orr.w	r3, r3, #16
 8007340:	6453      	str	r3, [r2, #68]	; 0x44
 8007342:	4b36      	ldr	r3, [pc, #216]	; (800741c <HAL_UART_MspInit+0x10c>)
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007346:	f003 0310 	and.w	r3, r3, #16
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	4b32      	ldr	r3, [pc, #200]	; (800741c <HAL_UART_MspInit+0x10c>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	4a31      	ldr	r2, [pc, #196]	; (800741c <HAL_UART_MspInit+0x10c>)
 8007358:	f043 0301 	orr.w	r3, r3, #1
 800735c:	6313      	str	r3, [r2, #48]	; 0x30
 800735e:	4b2f      	ldr	r3, [pc, #188]	; (800741c <HAL_UART_MspInit+0x10c>)
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800736a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800736e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007370:	2302      	movs	r3, #2
 8007372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007374:	2300      	movs	r3, #0
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007378:	2303      	movs	r3, #3
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800737c:	2307      	movs	r3, #7
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007380:	f107 031c 	add.w	r3, r7, #28
 8007384:	4619      	mov	r1, r3
 8007386:	4826      	ldr	r0, [pc, #152]	; (8007420 <HAL_UART_MspInit+0x110>)
 8007388:	f7f9 fab8 	bl	80008fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	2025      	movs	r0, #37	; 0x25
 8007392:	f7f9 fa4c 	bl	800082e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007396:	2025      	movs	r0, #37	; 0x25
 8007398:	f7f9 fa65 	bl	8000866 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800739c:	e038      	b.n	8007410 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a20      	ldr	r2, [pc, #128]	; (8007424 <HAL_UART_MspInit+0x114>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d133      	bne.n	8007410 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80073a8:	2300      	movs	r3, #0
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	4b1b      	ldr	r3, [pc, #108]	; (800741c <HAL_UART_MspInit+0x10c>)
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	4a1a      	ldr	r2, [pc, #104]	; (800741c <HAL_UART_MspInit+0x10c>)
 80073b2:	f043 0320 	orr.w	r3, r3, #32
 80073b6:	6453      	str	r3, [r2, #68]	; 0x44
 80073b8:	4b18      	ldr	r3, [pc, #96]	; (800741c <HAL_UART_MspInit+0x10c>)
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	4b14      	ldr	r3, [pc, #80]	; (800741c <HAL_UART_MspInit+0x10c>)
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	4a13      	ldr	r2, [pc, #76]	; (800741c <HAL_UART_MspInit+0x10c>)
 80073ce:	f043 0304 	orr.w	r3, r3, #4
 80073d2:	6313      	str	r3, [r2, #48]	; 0x30
 80073d4:	4b11      	ldr	r3, [pc, #68]	; (800741c <HAL_UART_MspInit+0x10c>)
 80073d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073e0:	23c0      	movs	r3, #192	; 0xc0
 80073e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073e4:	2302      	movs	r3, #2
 80073e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073ec:	2303      	movs	r3, #3
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80073f0:	2308      	movs	r3, #8
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073f4:	f107 031c 	add.w	r3, r7, #28
 80073f8:	4619      	mov	r1, r3
 80073fa:	480b      	ldr	r0, [pc, #44]	; (8007428 <HAL_UART_MspInit+0x118>)
 80073fc:	f7f9 fa7e 	bl	80008fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007400:	2200      	movs	r2, #0
 8007402:	2100      	movs	r1, #0
 8007404:	2047      	movs	r0, #71	; 0x47
 8007406:	f7f9 fa12 	bl	800082e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800740a:	2047      	movs	r0, #71	; 0x47
 800740c:	f7f9 fa2b 	bl	8000866 <HAL_NVIC_EnableIRQ>
}
 8007410:	bf00      	nop
 8007412:	3730      	adds	r7, #48	; 0x30
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40011000 	.word	0x40011000
 800741c:	40023800 	.word	0x40023800
 8007420:	40020000 	.word	0x40020000
 8007424:	40011400 	.word	0x40011400
 8007428:	40020800 	.word	0x40020800

0800742c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800742c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007464 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007430:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007432:	e003      	b.n	800743c <LoopCopyDataInit>

08007434 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007434:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007436:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007438:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800743a:	3104      	adds	r1, #4

0800743c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800743c:	480b      	ldr	r0, [pc, #44]	; (800746c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800743e:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007440:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007442:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007444:	d3f6      	bcc.n	8007434 <CopyDataInit>
  ldr  r2, =_sbss
 8007446:	4a0b      	ldr	r2, [pc, #44]	; (8007474 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007448:	e002      	b.n	8007450 <LoopFillZerobss>

0800744a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800744a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800744c:	f842 3b04 	str.w	r3, [r2], #4

08007450 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007450:	4b09      	ldr	r3, [pc, #36]	; (8007478 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007452:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007454:	d3f9      	bcc.n	800744a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007456:	f7ff fef1 	bl	800723c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800745a:	f000 f817 	bl	800748c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800745e:	f7ff fd2f 	bl	8006ec0 <main>
  bx  lr    
 8007462:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007464:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007468:	08007f10 	.word	0x08007f10
  ldr  r0, =_sdata
 800746c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007470:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8007474:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8007478:	2000018c 	.word	0x2000018c

0800747c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800747c:	e7fe      	b.n	800747c <ADC_IRQHandler>
	...

08007480 <__errno>:
 8007480:	4b01      	ldr	r3, [pc, #4]	; (8007488 <__errno+0x8>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000010 	.word	0x20000010

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4d0d      	ldr	r5, [pc, #52]	; (80074c4 <__libc_init_array+0x38>)
 8007490:	4c0d      	ldr	r4, [pc, #52]	; (80074c8 <__libc_init_array+0x3c>)
 8007492:	1b64      	subs	r4, r4, r5
 8007494:	10a4      	asrs	r4, r4, #2
 8007496:	2600      	movs	r6, #0
 8007498:	42a6      	cmp	r6, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	4d0b      	ldr	r5, [pc, #44]	; (80074cc <__libc_init_array+0x40>)
 800749e:	4c0c      	ldr	r4, [pc, #48]	; (80074d0 <__libc_init_array+0x44>)
 80074a0:	f000 fcb8 	bl	8007e14 <_init>
 80074a4:	1b64      	subs	r4, r4, r5
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	2600      	movs	r6, #0
 80074aa:	42a6      	cmp	r6, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b4:	4798      	blx	r3
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80074be:	4798      	blx	r3
 80074c0:	3601      	adds	r6, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	08007f08 	.word	0x08007f08
 80074c8:	08007f08 	.word	0x08007f08
 80074cc:	08007f08 	.word	0x08007f08
 80074d0:	08007f0c 	.word	0x08007f0c

080074d4 <malloc>:
 80074d4:	4b02      	ldr	r3, [pc, #8]	; (80074e0 <malloc+0xc>)
 80074d6:	4601      	mov	r1, r0
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	f000 b88d 	b.w	80075f8 <_malloc_r>
 80074de:	bf00      	nop
 80074e0:	20000010 	.word	0x20000010

080074e4 <free>:
 80074e4:	4b02      	ldr	r3, [pc, #8]	; (80074f0 <free+0xc>)
 80074e6:	4601      	mov	r1, r0
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	f000 b819 	b.w	8007520 <_free_r>
 80074ee:	bf00      	nop
 80074f0:	20000010 	.word	0x20000010

080074f4 <memcpy>:
 80074f4:	440a      	add	r2, r1
 80074f6:	4291      	cmp	r1, r2
 80074f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074fc:	d100      	bne.n	8007500 <memcpy+0xc>
 80074fe:	4770      	bx	lr
 8007500:	b510      	push	{r4, lr}
 8007502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800750a:	4291      	cmp	r1, r2
 800750c:	d1f9      	bne.n	8007502 <memcpy+0xe>
 800750e:	bd10      	pop	{r4, pc}

08007510 <memset>:
 8007510:	4402      	add	r2, r0
 8007512:	4603      	mov	r3, r0
 8007514:	4293      	cmp	r3, r2
 8007516:	d100      	bne.n	800751a <memset+0xa>
 8007518:	4770      	bx	lr
 800751a:	f803 1b01 	strb.w	r1, [r3], #1
 800751e:	e7f9      	b.n	8007514 <memset+0x4>

08007520 <_free_r>:
 8007520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007522:	2900      	cmp	r1, #0
 8007524:	d044      	beq.n	80075b0 <_free_r+0x90>
 8007526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800752a:	9001      	str	r0, [sp, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f1a1 0404 	sub.w	r4, r1, #4
 8007532:	bfb8      	it	lt
 8007534:	18e4      	addlt	r4, r4, r3
 8007536:	f000 f91d 	bl	8007774 <__malloc_lock>
 800753a:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <_free_r+0x94>)
 800753c:	9801      	ldr	r0, [sp, #4]
 800753e:	6813      	ldr	r3, [r2, #0]
 8007540:	b933      	cbnz	r3, 8007550 <_free_r+0x30>
 8007542:	6063      	str	r3, [r4, #4]
 8007544:	6014      	str	r4, [r2, #0]
 8007546:	b003      	add	sp, #12
 8007548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800754c:	f000 b918 	b.w	8007780 <__malloc_unlock>
 8007550:	42a3      	cmp	r3, r4
 8007552:	d908      	bls.n	8007566 <_free_r+0x46>
 8007554:	6825      	ldr	r5, [r4, #0]
 8007556:	1961      	adds	r1, r4, r5
 8007558:	428b      	cmp	r3, r1
 800755a:	bf01      	itttt	eq
 800755c:	6819      	ldreq	r1, [r3, #0]
 800755e:	685b      	ldreq	r3, [r3, #4]
 8007560:	1949      	addeq	r1, r1, r5
 8007562:	6021      	streq	r1, [r4, #0]
 8007564:	e7ed      	b.n	8007542 <_free_r+0x22>
 8007566:	461a      	mov	r2, r3
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	b10b      	cbz	r3, 8007570 <_free_r+0x50>
 800756c:	42a3      	cmp	r3, r4
 800756e:	d9fa      	bls.n	8007566 <_free_r+0x46>
 8007570:	6811      	ldr	r1, [r2, #0]
 8007572:	1855      	adds	r5, r2, r1
 8007574:	42a5      	cmp	r5, r4
 8007576:	d10b      	bne.n	8007590 <_free_r+0x70>
 8007578:	6824      	ldr	r4, [r4, #0]
 800757a:	4421      	add	r1, r4
 800757c:	1854      	adds	r4, r2, r1
 800757e:	42a3      	cmp	r3, r4
 8007580:	6011      	str	r1, [r2, #0]
 8007582:	d1e0      	bne.n	8007546 <_free_r+0x26>
 8007584:	681c      	ldr	r4, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	6053      	str	r3, [r2, #4]
 800758a:	4421      	add	r1, r4
 800758c:	6011      	str	r1, [r2, #0]
 800758e:	e7da      	b.n	8007546 <_free_r+0x26>
 8007590:	d902      	bls.n	8007598 <_free_r+0x78>
 8007592:	230c      	movs	r3, #12
 8007594:	6003      	str	r3, [r0, #0]
 8007596:	e7d6      	b.n	8007546 <_free_r+0x26>
 8007598:	6825      	ldr	r5, [r4, #0]
 800759a:	1961      	adds	r1, r4, r5
 800759c:	428b      	cmp	r3, r1
 800759e:	bf04      	itt	eq
 80075a0:	6819      	ldreq	r1, [r3, #0]
 80075a2:	685b      	ldreq	r3, [r3, #4]
 80075a4:	6063      	str	r3, [r4, #4]
 80075a6:	bf04      	itt	eq
 80075a8:	1949      	addeq	r1, r1, r5
 80075aa:	6021      	streq	r1, [r4, #0]
 80075ac:	6054      	str	r4, [r2, #4]
 80075ae:	e7ca      	b.n	8007546 <_free_r+0x26>
 80075b0:	b003      	add	sp, #12
 80075b2:	bd30      	pop	{r4, r5, pc}
 80075b4:	2000017c 	.word	0x2000017c

080075b8 <sbrk_aligned>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	4e0e      	ldr	r6, [pc, #56]	; (80075f4 <sbrk_aligned+0x3c>)
 80075bc:	460c      	mov	r4, r1
 80075be:	6831      	ldr	r1, [r6, #0]
 80075c0:	4605      	mov	r5, r0
 80075c2:	b911      	cbnz	r1, 80075ca <sbrk_aligned+0x12>
 80075c4:	f000 f88c 	bl	80076e0 <_sbrk_r>
 80075c8:	6030      	str	r0, [r6, #0]
 80075ca:	4621      	mov	r1, r4
 80075cc:	4628      	mov	r0, r5
 80075ce:	f000 f887 	bl	80076e0 <_sbrk_r>
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	d00a      	beq.n	80075ec <sbrk_aligned+0x34>
 80075d6:	1cc4      	adds	r4, r0, #3
 80075d8:	f024 0403 	bic.w	r4, r4, #3
 80075dc:	42a0      	cmp	r0, r4
 80075de:	d007      	beq.n	80075f0 <sbrk_aligned+0x38>
 80075e0:	1a21      	subs	r1, r4, r0
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 f87c 	bl	80076e0 <_sbrk_r>
 80075e8:	3001      	adds	r0, #1
 80075ea:	d101      	bne.n	80075f0 <sbrk_aligned+0x38>
 80075ec:	f04f 34ff 	mov.w	r4, #4294967295
 80075f0:	4620      	mov	r0, r4
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	20000180 	.word	0x20000180

080075f8 <_malloc_r>:
 80075f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fc:	1ccd      	adds	r5, r1, #3
 80075fe:	f025 0503 	bic.w	r5, r5, #3
 8007602:	3508      	adds	r5, #8
 8007604:	2d0c      	cmp	r5, #12
 8007606:	bf38      	it	cc
 8007608:	250c      	movcc	r5, #12
 800760a:	2d00      	cmp	r5, #0
 800760c:	4607      	mov	r7, r0
 800760e:	db01      	blt.n	8007614 <_malloc_r+0x1c>
 8007610:	42a9      	cmp	r1, r5
 8007612:	d905      	bls.n	8007620 <_malloc_r+0x28>
 8007614:	230c      	movs	r3, #12
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	2600      	movs	r6, #0
 800761a:	4630      	mov	r0, r6
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	4e2e      	ldr	r6, [pc, #184]	; (80076dc <_malloc_r+0xe4>)
 8007622:	f000 f8a7 	bl	8007774 <__malloc_lock>
 8007626:	6833      	ldr	r3, [r6, #0]
 8007628:	461c      	mov	r4, r3
 800762a:	bb34      	cbnz	r4, 800767a <_malloc_r+0x82>
 800762c:	4629      	mov	r1, r5
 800762e:	4638      	mov	r0, r7
 8007630:	f7ff ffc2 	bl	80075b8 <sbrk_aligned>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	4604      	mov	r4, r0
 8007638:	d14d      	bne.n	80076d6 <_malloc_r+0xde>
 800763a:	6834      	ldr	r4, [r6, #0]
 800763c:	4626      	mov	r6, r4
 800763e:	2e00      	cmp	r6, #0
 8007640:	d140      	bne.n	80076c4 <_malloc_r+0xcc>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	4631      	mov	r1, r6
 8007646:	4638      	mov	r0, r7
 8007648:	eb04 0803 	add.w	r8, r4, r3
 800764c:	f000 f848 	bl	80076e0 <_sbrk_r>
 8007650:	4580      	cmp	r8, r0
 8007652:	d13a      	bne.n	80076ca <_malloc_r+0xd2>
 8007654:	6821      	ldr	r1, [r4, #0]
 8007656:	3503      	adds	r5, #3
 8007658:	1a6d      	subs	r5, r5, r1
 800765a:	f025 0503 	bic.w	r5, r5, #3
 800765e:	3508      	adds	r5, #8
 8007660:	2d0c      	cmp	r5, #12
 8007662:	bf38      	it	cc
 8007664:	250c      	movcc	r5, #12
 8007666:	4629      	mov	r1, r5
 8007668:	4638      	mov	r0, r7
 800766a:	f7ff ffa5 	bl	80075b8 <sbrk_aligned>
 800766e:	3001      	adds	r0, #1
 8007670:	d02b      	beq.n	80076ca <_malloc_r+0xd2>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	442b      	add	r3, r5
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	e00e      	b.n	8007698 <_malloc_r+0xa0>
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	1b52      	subs	r2, r2, r5
 800767e:	d41e      	bmi.n	80076be <_malloc_r+0xc6>
 8007680:	2a0b      	cmp	r2, #11
 8007682:	d916      	bls.n	80076b2 <_malloc_r+0xba>
 8007684:	1961      	adds	r1, r4, r5
 8007686:	42a3      	cmp	r3, r4
 8007688:	6025      	str	r5, [r4, #0]
 800768a:	bf18      	it	ne
 800768c:	6059      	strne	r1, [r3, #4]
 800768e:	6863      	ldr	r3, [r4, #4]
 8007690:	bf08      	it	eq
 8007692:	6031      	streq	r1, [r6, #0]
 8007694:	5162      	str	r2, [r4, r5]
 8007696:	604b      	str	r3, [r1, #4]
 8007698:	4638      	mov	r0, r7
 800769a:	f104 060b 	add.w	r6, r4, #11
 800769e:	f000 f86f 	bl	8007780 <__malloc_unlock>
 80076a2:	f026 0607 	bic.w	r6, r6, #7
 80076a6:	1d23      	adds	r3, r4, #4
 80076a8:	1af2      	subs	r2, r6, r3
 80076aa:	d0b6      	beq.n	800761a <_malloc_r+0x22>
 80076ac:	1b9b      	subs	r3, r3, r6
 80076ae:	50a3      	str	r3, [r4, r2]
 80076b0:	e7b3      	b.n	800761a <_malloc_r+0x22>
 80076b2:	6862      	ldr	r2, [r4, #4]
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	bf0c      	ite	eq
 80076b8:	6032      	streq	r2, [r6, #0]
 80076ba:	605a      	strne	r2, [r3, #4]
 80076bc:	e7ec      	b.n	8007698 <_malloc_r+0xa0>
 80076be:	4623      	mov	r3, r4
 80076c0:	6864      	ldr	r4, [r4, #4]
 80076c2:	e7b2      	b.n	800762a <_malloc_r+0x32>
 80076c4:	4634      	mov	r4, r6
 80076c6:	6876      	ldr	r6, [r6, #4]
 80076c8:	e7b9      	b.n	800763e <_malloc_r+0x46>
 80076ca:	230c      	movs	r3, #12
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	4638      	mov	r0, r7
 80076d0:	f000 f856 	bl	8007780 <__malloc_unlock>
 80076d4:	e7a1      	b.n	800761a <_malloc_r+0x22>
 80076d6:	6025      	str	r5, [r4, #0]
 80076d8:	e7de      	b.n	8007698 <_malloc_r+0xa0>
 80076da:	bf00      	nop
 80076dc:	2000017c 	.word	0x2000017c

080076e0 <_sbrk_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4d06      	ldr	r5, [pc, #24]	; (80076fc <_sbrk_r+0x1c>)
 80076e4:	2300      	movs	r3, #0
 80076e6:	4604      	mov	r4, r0
 80076e8:	4608      	mov	r0, r1
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	f7ff fd70 	bl	80071d0 <_sbrk>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_sbrk_r+0x1a>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_sbrk_r+0x1a>
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	20000184 	.word	0x20000184

08007700 <_vsniprintf_r>:
 8007700:	b530      	push	{r4, r5, lr}
 8007702:	4614      	mov	r4, r2
 8007704:	2c00      	cmp	r4, #0
 8007706:	b09b      	sub	sp, #108	; 0x6c
 8007708:	4605      	mov	r5, r0
 800770a:	461a      	mov	r2, r3
 800770c:	da05      	bge.n	800771a <_vsniprintf_r+0x1a>
 800770e:	238b      	movs	r3, #139	; 0x8b
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	f04f 30ff 	mov.w	r0, #4294967295
 8007716:	b01b      	add	sp, #108	; 0x6c
 8007718:	bd30      	pop	{r4, r5, pc}
 800771a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800771e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007722:	bf14      	ite	ne
 8007724:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007728:	4623      	moveq	r3, r4
 800772a:	9302      	str	r3, [sp, #8]
 800772c:	9305      	str	r3, [sp, #20]
 800772e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007732:	9100      	str	r1, [sp, #0]
 8007734:	9104      	str	r1, [sp, #16]
 8007736:	f8ad 300e 	strh.w	r3, [sp, #14]
 800773a:	4669      	mov	r1, sp
 800773c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800773e:	f000 f881 	bl	8007844 <_svfiprintf_r>
 8007742:	1c43      	adds	r3, r0, #1
 8007744:	bfbc      	itt	lt
 8007746:	238b      	movlt	r3, #139	; 0x8b
 8007748:	602b      	strlt	r3, [r5, #0]
 800774a:	2c00      	cmp	r4, #0
 800774c:	d0e3      	beq.n	8007716 <_vsniprintf_r+0x16>
 800774e:	9b00      	ldr	r3, [sp, #0]
 8007750:	2200      	movs	r2, #0
 8007752:	701a      	strb	r2, [r3, #0]
 8007754:	e7df      	b.n	8007716 <_vsniprintf_r+0x16>
	...

08007758 <vsniprintf>:
 8007758:	b507      	push	{r0, r1, r2, lr}
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	4613      	mov	r3, r2
 800775e:	460a      	mov	r2, r1
 8007760:	4601      	mov	r1, r0
 8007762:	4803      	ldr	r0, [pc, #12]	; (8007770 <vsniprintf+0x18>)
 8007764:	6800      	ldr	r0, [r0, #0]
 8007766:	f7ff ffcb 	bl	8007700 <_vsniprintf_r>
 800776a:	b003      	add	sp, #12
 800776c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007770:	20000010 	.word	0x20000010

08007774 <__malloc_lock>:
 8007774:	4801      	ldr	r0, [pc, #4]	; (800777c <__malloc_lock+0x8>)
 8007776:	f000 baf9 	b.w	8007d6c <__retarget_lock_acquire_recursive>
 800777a:	bf00      	nop
 800777c:	20000188 	.word	0x20000188

08007780 <__malloc_unlock>:
 8007780:	4801      	ldr	r0, [pc, #4]	; (8007788 <__malloc_unlock+0x8>)
 8007782:	f000 baf4 	b.w	8007d6e <__retarget_lock_release_recursive>
 8007786:	bf00      	nop
 8007788:	20000188 	.word	0x20000188

0800778c <__ssputs_r>:
 800778c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007790:	688e      	ldr	r6, [r1, #8]
 8007792:	429e      	cmp	r6, r3
 8007794:	4682      	mov	sl, r0
 8007796:	460c      	mov	r4, r1
 8007798:	4690      	mov	r8, r2
 800779a:	461f      	mov	r7, r3
 800779c:	d838      	bhi.n	8007810 <__ssputs_r+0x84>
 800779e:	898a      	ldrh	r2, [r1, #12]
 80077a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077a4:	d032      	beq.n	800780c <__ssputs_r+0x80>
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	6909      	ldr	r1, [r1, #16]
 80077aa:	eba5 0901 	sub.w	r9, r5, r1
 80077ae:	6965      	ldr	r5, [r4, #20]
 80077b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077b8:	3301      	adds	r3, #1
 80077ba:	444b      	add	r3, r9
 80077bc:	106d      	asrs	r5, r5, #1
 80077be:	429d      	cmp	r5, r3
 80077c0:	bf38      	it	cc
 80077c2:	461d      	movcc	r5, r3
 80077c4:	0553      	lsls	r3, r2, #21
 80077c6:	d531      	bpl.n	800782c <__ssputs_r+0xa0>
 80077c8:	4629      	mov	r1, r5
 80077ca:	f7ff ff15 	bl	80075f8 <_malloc_r>
 80077ce:	4606      	mov	r6, r0
 80077d0:	b950      	cbnz	r0, 80077e8 <__ssputs_r+0x5c>
 80077d2:	230c      	movs	r3, #12
 80077d4:	f8ca 3000 	str.w	r3, [sl]
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295
 80077e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e8:	6921      	ldr	r1, [r4, #16]
 80077ea:	464a      	mov	r2, r9
 80077ec:	f7ff fe82 	bl	80074f4 <memcpy>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fa:	81a3      	strh	r3, [r4, #12]
 80077fc:	6126      	str	r6, [r4, #16]
 80077fe:	6165      	str	r5, [r4, #20]
 8007800:	444e      	add	r6, r9
 8007802:	eba5 0509 	sub.w	r5, r5, r9
 8007806:	6026      	str	r6, [r4, #0]
 8007808:	60a5      	str	r5, [r4, #8]
 800780a:	463e      	mov	r6, r7
 800780c:	42be      	cmp	r6, r7
 800780e:	d900      	bls.n	8007812 <__ssputs_r+0x86>
 8007810:	463e      	mov	r6, r7
 8007812:	6820      	ldr	r0, [r4, #0]
 8007814:	4632      	mov	r2, r6
 8007816:	4641      	mov	r1, r8
 8007818:	f000 faaa 	bl	8007d70 <memmove>
 800781c:	68a3      	ldr	r3, [r4, #8]
 800781e:	1b9b      	subs	r3, r3, r6
 8007820:	60a3      	str	r3, [r4, #8]
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	4433      	add	r3, r6
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	2000      	movs	r0, #0
 800782a:	e7db      	b.n	80077e4 <__ssputs_r+0x58>
 800782c:	462a      	mov	r2, r5
 800782e:	f000 fab9 	bl	8007da4 <_realloc_r>
 8007832:	4606      	mov	r6, r0
 8007834:	2800      	cmp	r0, #0
 8007836:	d1e1      	bne.n	80077fc <__ssputs_r+0x70>
 8007838:	6921      	ldr	r1, [r4, #16]
 800783a:	4650      	mov	r0, sl
 800783c:	f7ff fe70 	bl	8007520 <_free_r>
 8007840:	e7c7      	b.n	80077d2 <__ssputs_r+0x46>
	...

08007844 <_svfiprintf_r>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	4698      	mov	r8, r3
 800784a:	898b      	ldrh	r3, [r1, #12]
 800784c:	061b      	lsls	r3, r3, #24
 800784e:	b09d      	sub	sp, #116	; 0x74
 8007850:	4607      	mov	r7, r0
 8007852:	460d      	mov	r5, r1
 8007854:	4614      	mov	r4, r2
 8007856:	d50e      	bpl.n	8007876 <_svfiprintf_r+0x32>
 8007858:	690b      	ldr	r3, [r1, #16]
 800785a:	b963      	cbnz	r3, 8007876 <_svfiprintf_r+0x32>
 800785c:	2140      	movs	r1, #64	; 0x40
 800785e:	f7ff fecb 	bl	80075f8 <_malloc_r>
 8007862:	6028      	str	r0, [r5, #0]
 8007864:	6128      	str	r0, [r5, #16]
 8007866:	b920      	cbnz	r0, 8007872 <_svfiprintf_r+0x2e>
 8007868:	230c      	movs	r3, #12
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	e0d1      	b.n	8007a16 <_svfiprintf_r+0x1d2>
 8007872:	2340      	movs	r3, #64	; 0x40
 8007874:	616b      	str	r3, [r5, #20]
 8007876:	2300      	movs	r3, #0
 8007878:	9309      	str	r3, [sp, #36]	; 0x24
 800787a:	2320      	movs	r3, #32
 800787c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007880:	f8cd 800c 	str.w	r8, [sp, #12]
 8007884:	2330      	movs	r3, #48	; 0x30
 8007886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a30 <_svfiprintf_r+0x1ec>
 800788a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800788e:	f04f 0901 	mov.w	r9, #1
 8007892:	4623      	mov	r3, r4
 8007894:	469a      	mov	sl, r3
 8007896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800789a:	b10a      	cbz	r2, 80078a0 <_svfiprintf_r+0x5c>
 800789c:	2a25      	cmp	r2, #37	; 0x25
 800789e:	d1f9      	bne.n	8007894 <_svfiprintf_r+0x50>
 80078a0:	ebba 0b04 	subs.w	fp, sl, r4
 80078a4:	d00b      	beq.n	80078be <_svfiprintf_r+0x7a>
 80078a6:	465b      	mov	r3, fp
 80078a8:	4622      	mov	r2, r4
 80078aa:	4629      	mov	r1, r5
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ff6d 	bl	800778c <__ssputs_r>
 80078b2:	3001      	adds	r0, #1
 80078b4:	f000 80aa 	beq.w	8007a0c <_svfiprintf_r+0x1c8>
 80078b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ba:	445a      	add	r2, fp
 80078bc:	9209      	str	r2, [sp, #36]	; 0x24
 80078be:	f89a 3000 	ldrb.w	r3, [sl]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80a2 	beq.w	8007a0c <_svfiprintf_r+0x1c8>
 80078c8:	2300      	movs	r3, #0
 80078ca:	f04f 32ff 	mov.w	r2, #4294967295
 80078ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d2:	f10a 0a01 	add.w	sl, sl, #1
 80078d6:	9304      	str	r3, [sp, #16]
 80078d8:	9307      	str	r3, [sp, #28]
 80078da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078de:	931a      	str	r3, [sp, #104]	; 0x68
 80078e0:	4654      	mov	r4, sl
 80078e2:	2205      	movs	r2, #5
 80078e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e8:	4851      	ldr	r0, [pc, #324]	; (8007a30 <_svfiprintf_r+0x1ec>)
 80078ea:	f7f8 fc81 	bl	80001f0 <memchr>
 80078ee:	9a04      	ldr	r2, [sp, #16]
 80078f0:	b9d8      	cbnz	r0, 800792a <_svfiprintf_r+0xe6>
 80078f2:	06d0      	lsls	r0, r2, #27
 80078f4:	bf44      	itt	mi
 80078f6:	2320      	movmi	r3, #32
 80078f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078fc:	0711      	lsls	r1, r2, #28
 80078fe:	bf44      	itt	mi
 8007900:	232b      	movmi	r3, #43	; 0x2b
 8007902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007906:	f89a 3000 	ldrb.w	r3, [sl]
 800790a:	2b2a      	cmp	r3, #42	; 0x2a
 800790c:	d015      	beq.n	800793a <_svfiprintf_r+0xf6>
 800790e:	9a07      	ldr	r2, [sp, #28]
 8007910:	4654      	mov	r4, sl
 8007912:	2000      	movs	r0, #0
 8007914:	f04f 0c0a 	mov.w	ip, #10
 8007918:	4621      	mov	r1, r4
 800791a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800791e:	3b30      	subs	r3, #48	; 0x30
 8007920:	2b09      	cmp	r3, #9
 8007922:	d94e      	bls.n	80079c2 <_svfiprintf_r+0x17e>
 8007924:	b1b0      	cbz	r0, 8007954 <_svfiprintf_r+0x110>
 8007926:	9207      	str	r2, [sp, #28]
 8007928:	e014      	b.n	8007954 <_svfiprintf_r+0x110>
 800792a:	eba0 0308 	sub.w	r3, r0, r8
 800792e:	fa09 f303 	lsl.w	r3, r9, r3
 8007932:	4313      	orrs	r3, r2
 8007934:	9304      	str	r3, [sp, #16]
 8007936:	46a2      	mov	sl, r4
 8007938:	e7d2      	b.n	80078e0 <_svfiprintf_r+0x9c>
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	1d19      	adds	r1, r3, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	9103      	str	r1, [sp, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	bfbb      	ittet	lt
 8007946:	425b      	neglt	r3, r3
 8007948:	f042 0202 	orrlt.w	r2, r2, #2
 800794c:	9307      	strge	r3, [sp, #28]
 800794e:	9307      	strlt	r3, [sp, #28]
 8007950:	bfb8      	it	lt
 8007952:	9204      	strlt	r2, [sp, #16]
 8007954:	7823      	ldrb	r3, [r4, #0]
 8007956:	2b2e      	cmp	r3, #46	; 0x2e
 8007958:	d10c      	bne.n	8007974 <_svfiprintf_r+0x130>
 800795a:	7863      	ldrb	r3, [r4, #1]
 800795c:	2b2a      	cmp	r3, #42	; 0x2a
 800795e:	d135      	bne.n	80079cc <_svfiprintf_r+0x188>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	1d1a      	adds	r2, r3, #4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	9203      	str	r2, [sp, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	bfb8      	it	lt
 800796c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007970:	3402      	adds	r4, #2
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a40 <_svfiprintf_r+0x1fc>
 8007978:	7821      	ldrb	r1, [r4, #0]
 800797a:	2203      	movs	r2, #3
 800797c:	4650      	mov	r0, sl
 800797e:	f7f8 fc37 	bl	80001f0 <memchr>
 8007982:	b140      	cbz	r0, 8007996 <_svfiprintf_r+0x152>
 8007984:	2340      	movs	r3, #64	; 0x40
 8007986:	eba0 000a 	sub.w	r0, r0, sl
 800798a:	fa03 f000 	lsl.w	r0, r3, r0
 800798e:	9b04      	ldr	r3, [sp, #16]
 8007990:	4303      	orrs	r3, r0
 8007992:	3401      	adds	r4, #1
 8007994:	9304      	str	r3, [sp, #16]
 8007996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800799a:	4826      	ldr	r0, [pc, #152]	; (8007a34 <_svfiprintf_r+0x1f0>)
 800799c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079a0:	2206      	movs	r2, #6
 80079a2:	f7f8 fc25 	bl	80001f0 <memchr>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d038      	beq.n	8007a1c <_svfiprintf_r+0x1d8>
 80079aa:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <_svfiprintf_r+0x1f4>)
 80079ac:	bb1b      	cbnz	r3, 80079f6 <_svfiprintf_r+0x1b2>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	3307      	adds	r3, #7
 80079b2:	f023 0307 	bic.w	r3, r3, #7
 80079b6:	3308      	adds	r3, #8
 80079b8:	9303      	str	r3, [sp, #12]
 80079ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079bc:	4433      	add	r3, r6
 80079be:	9309      	str	r3, [sp, #36]	; 0x24
 80079c0:	e767      	b.n	8007892 <_svfiprintf_r+0x4e>
 80079c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80079c6:	460c      	mov	r4, r1
 80079c8:	2001      	movs	r0, #1
 80079ca:	e7a5      	b.n	8007918 <_svfiprintf_r+0xd4>
 80079cc:	2300      	movs	r3, #0
 80079ce:	3401      	adds	r4, #1
 80079d0:	9305      	str	r3, [sp, #20]
 80079d2:	4619      	mov	r1, r3
 80079d4:	f04f 0c0a 	mov.w	ip, #10
 80079d8:	4620      	mov	r0, r4
 80079da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079de:	3a30      	subs	r2, #48	; 0x30
 80079e0:	2a09      	cmp	r2, #9
 80079e2:	d903      	bls.n	80079ec <_svfiprintf_r+0x1a8>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0c5      	beq.n	8007974 <_svfiprintf_r+0x130>
 80079e8:	9105      	str	r1, [sp, #20]
 80079ea:	e7c3      	b.n	8007974 <_svfiprintf_r+0x130>
 80079ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80079f0:	4604      	mov	r4, r0
 80079f2:	2301      	movs	r3, #1
 80079f4:	e7f0      	b.n	80079d8 <_svfiprintf_r+0x194>
 80079f6:	ab03      	add	r3, sp, #12
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	462a      	mov	r2, r5
 80079fc:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <_svfiprintf_r+0x1f8>)
 80079fe:	a904      	add	r1, sp, #16
 8007a00:	4638      	mov	r0, r7
 8007a02:	f3af 8000 	nop.w
 8007a06:	1c42      	adds	r2, r0, #1
 8007a08:	4606      	mov	r6, r0
 8007a0a:	d1d6      	bne.n	80079ba <_svfiprintf_r+0x176>
 8007a0c:	89ab      	ldrh	r3, [r5, #12]
 8007a0e:	065b      	lsls	r3, r3, #25
 8007a10:	f53f af2c 	bmi.w	800786c <_svfiprintf_r+0x28>
 8007a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a16:	b01d      	add	sp, #116	; 0x74
 8007a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1c:	ab03      	add	r3, sp, #12
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	462a      	mov	r2, r5
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <_svfiprintf_r+0x1f8>)
 8007a24:	a904      	add	r1, sp, #16
 8007a26:	4638      	mov	r0, r7
 8007a28:	f000 f87a 	bl	8007b20 <_printf_i>
 8007a2c:	e7eb      	b.n	8007a06 <_svfiprintf_r+0x1c2>
 8007a2e:	bf00      	nop
 8007a30:	08007ecc 	.word	0x08007ecc
 8007a34:	08007ed6 	.word	0x08007ed6
 8007a38:	00000000 	.word	0x00000000
 8007a3c:	0800778d 	.word	0x0800778d
 8007a40:	08007ed2 	.word	0x08007ed2

08007a44 <_printf_common>:
 8007a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	4616      	mov	r6, r2
 8007a4a:	4699      	mov	r9, r3
 8007a4c:	688a      	ldr	r2, [r1, #8]
 8007a4e:	690b      	ldr	r3, [r1, #16]
 8007a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a54:	4293      	cmp	r3, r2
 8007a56:	bfb8      	it	lt
 8007a58:	4613      	movlt	r3, r2
 8007a5a:	6033      	str	r3, [r6, #0]
 8007a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a60:	4607      	mov	r7, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	b10a      	cbz	r2, 8007a6a <_printf_common+0x26>
 8007a66:	3301      	adds	r3, #1
 8007a68:	6033      	str	r3, [r6, #0]
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	0699      	lsls	r1, r3, #26
 8007a6e:	bf42      	ittt	mi
 8007a70:	6833      	ldrmi	r3, [r6, #0]
 8007a72:	3302      	addmi	r3, #2
 8007a74:	6033      	strmi	r3, [r6, #0]
 8007a76:	6825      	ldr	r5, [r4, #0]
 8007a78:	f015 0506 	ands.w	r5, r5, #6
 8007a7c:	d106      	bne.n	8007a8c <_printf_common+0x48>
 8007a7e:	f104 0a19 	add.w	sl, r4, #25
 8007a82:	68e3      	ldr	r3, [r4, #12]
 8007a84:	6832      	ldr	r2, [r6, #0]
 8007a86:	1a9b      	subs	r3, r3, r2
 8007a88:	42ab      	cmp	r3, r5
 8007a8a:	dc26      	bgt.n	8007ada <_printf_common+0x96>
 8007a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a90:	1e13      	subs	r3, r2, #0
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	bf18      	it	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	0692      	lsls	r2, r2, #26
 8007a9a:	d42b      	bmi.n	8007af4 <_printf_common+0xb0>
 8007a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	47c0      	blx	r8
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d01e      	beq.n	8007ae8 <_printf_common+0xa4>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	68e5      	ldr	r5, [r4, #12]
 8007aae:	6832      	ldr	r2, [r6, #0]
 8007ab0:	f003 0306 	and.w	r3, r3, #6
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	bf08      	it	eq
 8007ab8:	1aad      	subeq	r5, r5, r2
 8007aba:	68a3      	ldr	r3, [r4, #8]
 8007abc:	6922      	ldr	r2, [r4, #16]
 8007abe:	bf0c      	ite	eq
 8007ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac4:	2500      	movne	r5, #0
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	bfc4      	itt	gt
 8007aca:	1a9b      	subgt	r3, r3, r2
 8007acc:	18ed      	addgt	r5, r5, r3
 8007ace:	2600      	movs	r6, #0
 8007ad0:	341a      	adds	r4, #26
 8007ad2:	42b5      	cmp	r5, r6
 8007ad4:	d11a      	bne.n	8007b0c <_printf_common+0xc8>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e008      	b.n	8007aec <_printf_common+0xa8>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4652      	mov	r2, sl
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	47c0      	blx	r8
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d103      	bne.n	8007af0 <_printf_common+0xac>
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af0:	3501      	adds	r5, #1
 8007af2:	e7c6      	b.n	8007a82 <_printf_common+0x3e>
 8007af4:	18e1      	adds	r1, r4, r3
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	2030      	movs	r0, #48	; 0x30
 8007afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007afe:	4422      	add	r2, r4
 8007b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b08:	3302      	adds	r3, #2
 8007b0a:	e7c7      	b.n	8007a9c <_printf_common+0x58>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4622      	mov	r2, r4
 8007b10:	4649      	mov	r1, r9
 8007b12:	4638      	mov	r0, r7
 8007b14:	47c0      	blx	r8
 8007b16:	3001      	adds	r0, #1
 8007b18:	d0e6      	beq.n	8007ae8 <_printf_common+0xa4>
 8007b1a:	3601      	adds	r6, #1
 8007b1c:	e7d9      	b.n	8007ad2 <_printf_common+0x8e>
	...

08007b20 <_printf_i>:
 8007b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	7e0f      	ldrb	r7, [r1, #24]
 8007b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b28:	2f78      	cmp	r7, #120	; 0x78
 8007b2a:	4691      	mov	r9, r2
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	469a      	mov	sl, r3
 8007b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b36:	d807      	bhi.n	8007b48 <_printf_i+0x28>
 8007b38:	2f62      	cmp	r7, #98	; 0x62
 8007b3a:	d80a      	bhi.n	8007b52 <_printf_i+0x32>
 8007b3c:	2f00      	cmp	r7, #0
 8007b3e:	f000 80d8 	beq.w	8007cf2 <_printf_i+0x1d2>
 8007b42:	2f58      	cmp	r7, #88	; 0x58
 8007b44:	f000 80a3 	beq.w	8007c8e <_printf_i+0x16e>
 8007b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b50:	e03a      	b.n	8007bc8 <_printf_i+0xa8>
 8007b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b56:	2b15      	cmp	r3, #21
 8007b58:	d8f6      	bhi.n	8007b48 <_printf_i+0x28>
 8007b5a:	a101      	add	r1, pc, #4	; (adr r1, 8007b60 <_printf_i+0x40>)
 8007b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b60:	08007bb9 	.word	0x08007bb9
 8007b64:	08007bcd 	.word	0x08007bcd
 8007b68:	08007b49 	.word	0x08007b49
 8007b6c:	08007b49 	.word	0x08007b49
 8007b70:	08007b49 	.word	0x08007b49
 8007b74:	08007b49 	.word	0x08007b49
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007b49 	.word	0x08007b49
 8007b80:	08007b49 	.word	0x08007b49
 8007b84:	08007b49 	.word	0x08007b49
 8007b88:	08007b49 	.word	0x08007b49
 8007b8c:	08007cd9 	.word	0x08007cd9
 8007b90:	08007bfd 	.word	0x08007bfd
 8007b94:	08007cbb 	.word	0x08007cbb
 8007b98:	08007b49 	.word	0x08007b49
 8007b9c:	08007b49 	.word	0x08007b49
 8007ba0:	08007cfb 	.word	0x08007cfb
 8007ba4:	08007b49 	.word	0x08007b49
 8007ba8:	08007bfd 	.word	0x08007bfd
 8007bac:	08007b49 	.word	0x08007b49
 8007bb0:	08007b49 	.word	0x08007b49
 8007bb4:	08007cc3 	.word	0x08007cc3
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	1d1a      	adds	r2, r3, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	602a      	str	r2, [r5, #0]
 8007bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e0a3      	b.n	8007d14 <_printf_i+0x1f4>
 8007bcc:	6820      	ldr	r0, [r4, #0]
 8007bce:	6829      	ldr	r1, [r5, #0]
 8007bd0:	0606      	lsls	r6, r0, #24
 8007bd2:	f101 0304 	add.w	r3, r1, #4
 8007bd6:	d50a      	bpl.n	8007bee <_printf_i+0xce>
 8007bd8:	680e      	ldr	r6, [r1, #0]
 8007bda:	602b      	str	r3, [r5, #0]
 8007bdc:	2e00      	cmp	r6, #0
 8007bde:	da03      	bge.n	8007be8 <_printf_i+0xc8>
 8007be0:	232d      	movs	r3, #45	; 0x2d
 8007be2:	4276      	negs	r6, r6
 8007be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be8:	485e      	ldr	r0, [pc, #376]	; (8007d64 <_printf_i+0x244>)
 8007bea:	230a      	movs	r3, #10
 8007bec:	e019      	b.n	8007c22 <_printf_i+0x102>
 8007bee:	680e      	ldr	r6, [r1, #0]
 8007bf0:	602b      	str	r3, [r5, #0]
 8007bf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bf6:	bf18      	it	ne
 8007bf8:	b236      	sxthne	r6, r6
 8007bfa:	e7ef      	b.n	8007bdc <_printf_i+0xbc>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	6820      	ldr	r0, [r4, #0]
 8007c00:	1d19      	adds	r1, r3, #4
 8007c02:	6029      	str	r1, [r5, #0]
 8007c04:	0601      	lsls	r1, r0, #24
 8007c06:	d501      	bpl.n	8007c0c <_printf_i+0xec>
 8007c08:	681e      	ldr	r6, [r3, #0]
 8007c0a:	e002      	b.n	8007c12 <_printf_i+0xf2>
 8007c0c:	0646      	lsls	r6, r0, #25
 8007c0e:	d5fb      	bpl.n	8007c08 <_printf_i+0xe8>
 8007c10:	881e      	ldrh	r6, [r3, #0]
 8007c12:	4854      	ldr	r0, [pc, #336]	; (8007d64 <_printf_i+0x244>)
 8007c14:	2f6f      	cmp	r7, #111	; 0x6f
 8007c16:	bf0c      	ite	eq
 8007c18:	2308      	moveq	r3, #8
 8007c1a:	230a      	movne	r3, #10
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c22:	6865      	ldr	r5, [r4, #4]
 8007c24:	60a5      	str	r5, [r4, #8]
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	bfa2      	ittt	ge
 8007c2a:	6821      	ldrge	r1, [r4, #0]
 8007c2c:	f021 0104 	bicge.w	r1, r1, #4
 8007c30:	6021      	strge	r1, [r4, #0]
 8007c32:	b90e      	cbnz	r6, 8007c38 <_printf_i+0x118>
 8007c34:	2d00      	cmp	r5, #0
 8007c36:	d04d      	beq.n	8007cd4 <_printf_i+0x1b4>
 8007c38:	4615      	mov	r5, r2
 8007c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007c42:	5dc7      	ldrb	r7, [r0, r7]
 8007c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c48:	4637      	mov	r7, r6
 8007c4a:	42bb      	cmp	r3, r7
 8007c4c:	460e      	mov	r6, r1
 8007c4e:	d9f4      	bls.n	8007c3a <_printf_i+0x11a>
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d10b      	bne.n	8007c6c <_printf_i+0x14c>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	07de      	lsls	r6, r3, #31
 8007c58:	d508      	bpl.n	8007c6c <_printf_i+0x14c>
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	6861      	ldr	r1, [r4, #4]
 8007c5e:	4299      	cmp	r1, r3
 8007c60:	bfde      	ittt	le
 8007c62:	2330      	movle	r3, #48	; 0x30
 8007c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c6c:	1b52      	subs	r2, r2, r5
 8007c6e:	6122      	str	r2, [r4, #16]
 8007c70:	f8cd a000 	str.w	sl, [sp]
 8007c74:	464b      	mov	r3, r9
 8007c76:	aa03      	add	r2, sp, #12
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f7ff fee2 	bl	8007a44 <_printf_common>
 8007c80:	3001      	adds	r0, #1
 8007c82:	d14c      	bne.n	8007d1e <_printf_i+0x1fe>
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	b004      	add	sp, #16
 8007c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8e:	4835      	ldr	r0, [pc, #212]	; (8007d64 <_printf_i+0x244>)
 8007c90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c94:	6829      	ldr	r1, [r5, #0]
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c9c:	6029      	str	r1, [r5, #0]
 8007c9e:	061d      	lsls	r5, r3, #24
 8007ca0:	d514      	bpl.n	8007ccc <_printf_i+0x1ac>
 8007ca2:	07df      	lsls	r7, r3, #31
 8007ca4:	bf44      	itt	mi
 8007ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8007caa:	6023      	strmi	r3, [r4, #0]
 8007cac:	b91e      	cbnz	r6, 8007cb6 <_printf_i+0x196>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	f023 0320 	bic.w	r3, r3, #32
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	2310      	movs	r3, #16
 8007cb8:	e7b0      	b.n	8007c1c <_printf_i+0xfc>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	f043 0320 	orr.w	r3, r3, #32
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	2378      	movs	r3, #120	; 0x78
 8007cc4:	4828      	ldr	r0, [pc, #160]	; (8007d68 <_printf_i+0x248>)
 8007cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cca:	e7e3      	b.n	8007c94 <_printf_i+0x174>
 8007ccc:	0659      	lsls	r1, r3, #25
 8007cce:	bf48      	it	mi
 8007cd0:	b2b6      	uxthmi	r6, r6
 8007cd2:	e7e6      	b.n	8007ca2 <_printf_i+0x182>
 8007cd4:	4615      	mov	r5, r2
 8007cd6:	e7bb      	b.n	8007c50 <_printf_i+0x130>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	6826      	ldr	r6, [r4, #0]
 8007cdc:	6961      	ldr	r1, [r4, #20]
 8007cde:	1d18      	adds	r0, r3, #4
 8007ce0:	6028      	str	r0, [r5, #0]
 8007ce2:	0635      	lsls	r5, r6, #24
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	d501      	bpl.n	8007cec <_printf_i+0x1cc>
 8007ce8:	6019      	str	r1, [r3, #0]
 8007cea:	e002      	b.n	8007cf2 <_printf_i+0x1d2>
 8007cec:	0670      	lsls	r0, r6, #25
 8007cee:	d5fb      	bpl.n	8007ce8 <_printf_i+0x1c8>
 8007cf0:	8019      	strh	r1, [r3, #0]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	4615      	mov	r5, r2
 8007cf8:	e7ba      	b.n	8007c70 <_printf_i+0x150>
 8007cfa:	682b      	ldr	r3, [r5, #0]
 8007cfc:	1d1a      	adds	r2, r3, #4
 8007cfe:	602a      	str	r2, [r5, #0]
 8007d00:	681d      	ldr	r5, [r3, #0]
 8007d02:	6862      	ldr	r2, [r4, #4]
 8007d04:	2100      	movs	r1, #0
 8007d06:	4628      	mov	r0, r5
 8007d08:	f7f8 fa72 	bl	80001f0 <memchr>
 8007d0c:	b108      	cbz	r0, 8007d12 <_printf_i+0x1f2>
 8007d0e:	1b40      	subs	r0, r0, r5
 8007d10:	6060      	str	r0, [r4, #4]
 8007d12:	6863      	ldr	r3, [r4, #4]
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	2300      	movs	r3, #0
 8007d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d1c:	e7a8      	b.n	8007c70 <_printf_i+0x150>
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	462a      	mov	r2, r5
 8007d22:	4649      	mov	r1, r9
 8007d24:	4640      	mov	r0, r8
 8007d26:	47d0      	blx	sl
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d0ab      	beq.n	8007c84 <_printf_i+0x164>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	079b      	lsls	r3, r3, #30
 8007d30:	d413      	bmi.n	8007d5a <_printf_i+0x23a>
 8007d32:	68e0      	ldr	r0, [r4, #12]
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	4298      	cmp	r0, r3
 8007d38:	bfb8      	it	lt
 8007d3a:	4618      	movlt	r0, r3
 8007d3c:	e7a4      	b.n	8007c88 <_printf_i+0x168>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	4632      	mov	r2, r6
 8007d42:	4649      	mov	r1, r9
 8007d44:	4640      	mov	r0, r8
 8007d46:	47d0      	blx	sl
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d09b      	beq.n	8007c84 <_printf_i+0x164>
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	68e3      	ldr	r3, [r4, #12]
 8007d50:	9903      	ldr	r1, [sp, #12]
 8007d52:	1a5b      	subs	r3, r3, r1
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dcf2      	bgt.n	8007d3e <_printf_i+0x21e>
 8007d58:	e7eb      	b.n	8007d32 <_printf_i+0x212>
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	f104 0619 	add.w	r6, r4, #25
 8007d60:	e7f5      	b.n	8007d4e <_printf_i+0x22e>
 8007d62:	bf00      	nop
 8007d64:	08007edd 	.word	0x08007edd
 8007d68:	08007eee 	.word	0x08007eee

08007d6c <__retarget_lock_acquire_recursive>:
 8007d6c:	4770      	bx	lr

08007d6e <__retarget_lock_release_recursive>:
 8007d6e:	4770      	bx	lr

08007d70 <memmove>:
 8007d70:	4288      	cmp	r0, r1
 8007d72:	b510      	push	{r4, lr}
 8007d74:	eb01 0402 	add.w	r4, r1, r2
 8007d78:	d902      	bls.n	8007d80 <memmove+0x10>
 8007d7a:	4284      	cmp	r4, r0
 8007d7c:	4623      	mov	r3, r4
 8007d7e:	d807      	bhi.n	8007d90 <memmove+0x20>
 8007d80:	1e43      	subs	r3, r0, #1
 8007d82:	42a1      	cmp	r1, r4
 8007d84:	d008      	beq.n	8007d98 <memmove+0x28>
 8007d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d8e:	e7f8      	b.n	8007d82 <memmove+0x12>
 8007d90:	4402      	add	r2, r0
 8007d92:	4601      	mov	r1, r0
 8007d94:	428a      	cmp	r2, r1
 8007d96:	d100      	bne.n	8007d9a <memmove+0x2a>
 8007d98:	bd10      	pop	{r4, pc}
 8007d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007da2:	e7f7      	b.n	8007d94 <memmove+0x24>

08007da4 <_realloc_r>:
 8007da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da8:	4680      	mov	r8, r0
 8007daa:	4614      	mov	r4, r2
 8007dac:	460e      	mov	r6, r1
 8007dae:	b921      	cbnz	r1, 8007dba <_realloc_r+0x16>
 8007db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007db4:	4611      	mov	r1, r2
 8007db6:	f7ff bc1f 	b.w	80075f8 <_malloc_r>
 8007dba:	b92a      	cbnz	r2, 8007dc8 <_realloc_r+0x24>
 8007dbc:	f7ff fbb0 	bl	8007520 <_free_r>
 8007dc0:	4625      	mov	r5, r4
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc8:	f000 f81b 	bl	8007e02 <_malloc_usable_size_r>
 8007dcc:	4284      	cmp	r4, r0
 8007dce:	4607      	mov	r7, r0
 8007dd0:	d802      	bhi.n	8007dd8 <_realloc_r+0x34>
 8007dd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dd6:	d812      	bhi.n	8007dfe <_realloc_r+0x5a>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4640      	mov	r0, r8
 8007ddc:	f7ff fc0c 	bl	80075f8 <_malloc_r>
 8007de0:	4605      	mov	r5, r0
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d0ed      	beq.n	8007dc2 <_realloc_r+0x1e>
 8007de6:	42bc      	cmp	r4, r7
 8007de8:	4622      	mov	r2, r4
 8007dea:	4631      	mov	r1, r6
 8007dec:	bf28      	it	cs
 8007dee:	463a      	movcs	r2, r7
 8007df0:	f7ff fb80 	bl	80074f4 <memcpy>
 8007df4:	4631      	mov	r1, r6
 8007df6:	4640      	mov	r0, r8
 8007df8:	f7ff fb92 	bl	8007520 <_free_r>
 8007dfc:	e7e1      	b.n	8007dc2 <_realloc_r+0x1e>
 8007dfe:	4635      	mov	r5, r6
 8007e00:	e7df      	b.n	8007dc2 <_realloc_r+0x1e>

08007e02 <_malloc_usable_size_r>:
 8007e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e06:	1f18      	subs	r0, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	bfbc      	itt	lt
 8007e0c:	580b      	ldrlt	r3, [r1, r0]
 8007e0e:	18c0      	addlt	r0, r0, r3
 8007e10:	4770      	bx	lr
	...

08007e14 <_init>:
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e16:	bf00      	nop
 8007e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1a:	bc08      	pop	{r3}
 8007e1c:	469e      	mov	lr, r3
 8007e1e:	4770      	bx	lr

08007e20 <_fini>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	bf00      	nop
 8007e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e26:	bc08      	pop	{r3}
 8007e28:	469e      	mov	lr, r3
 8007e2a:	4770      	bx	lr
